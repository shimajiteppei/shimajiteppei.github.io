<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 23 Jul 2024 12:04:15 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[React.lazyとは一体？？]]></title><description><![CDATA[
 はじめに
今までReact.lazy使ったことなかったんですけど、パフォーマンスの重要に対して意識を持つようになってから、React.lazyが役立つって知りました。なので今回学んだことをまとめてみました！

 React.lazyは何をしているのか
React.lazyを使うと、初回のレンダリング負担を軽減できます。どういうことかというと、必要なときにだけコンポーネントを読み込むんです。これによって、最初にアプリがロードされるときのスピードが上がり、ユーザー体験が向上します。
また、React.lazyは、アプリのパーツを分けて、それぞれ必要なときにだけ読み込む「コードスプリッティ...]]></description><link>https://zenn.dev/gemcook/articles/66eb923e761a90</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/66eb923e761a90</guid><pubDate>Tue, 23 Jul 2024 09:20:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ebfXieBV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React.lazy%25E3%2581%25A8%25E3%2581%25AF%25E4%25B8%2580%25E4%25BD%2593%25EF%25BC%259F%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25A6%25E3%2582%2593%25E3%2582%2580%25E3%2581%2599%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pDOVl3NGNrMndZZXFVWWE1eWZrdkpHUURmNFJCNGFwN1FIUGVLPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てんむす</dc:creator></item><item><title><![CDATA[WEBコンポ―ネントでデザインシステム構築した感想（Vite・Vue3）]]></title><description><![CDATA[
 WEBコンポ―ネントでデザインシステム構築した感想

 はじめに
自社内で使いまわしできるデザインシステムをWEBコンポーネントで制作しました。

 目的

メンバー間の技術力に大きな偏りがある中で円滑に保守管理を行う
業務の効率化（共通のUI・UXをすぐに利用できる）
品質の保持（デザインの統一性やアクセシビリティの共通化など）


 事情
なぜWEBコンポーネントという結論になったのかという点については、社内の独特するぎる事情が複雑にあるためここでは割愛させていただきます。
とにかく、この方法しかないという結論に至り決行しました。

 技術

 おもな開発環境

Vite
Vue...]]></description><link>https://zenn.dev/shu_saginoya/articles/c50c216d04221e</link><guid isPermaLink="true">https://zenn.dev/shu_saginoya/articles/c50c216d04221e</guid><pubDate>Tue, 23 Jul 2024 08:08:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gZVkoRWA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WEB%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E2%2580%2595%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%259F%25E6%2584%259F%25E6%2583%25B3%25EF%25BC%2588Vite%25E3%2583%25BBVue3%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shu-saginoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MjRhU1czaC1GWk5xQThjWmRUN2xhRXhmc09Lc1U5N3duU1dCek09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shu-saginoya</dc:creator></item><item><title><![CDATA[Firebase Genkit入門]]></title><description><![CDATA[Firebase Genkit は、開発者がAI搭載のアプリケーションを作成するのを支援するオープンソースフレームワークです。
このチュートリアルでは、Firebase Genkitの基本原理を探り、開発プロセスをどのように向上させるかを説明します。
備考: 以下英語記事の翻訳版なので、日本語として言い回し変なところあるかもですが、ご了承ください(´・ω・｀)汗
https://medium.com/@yukinagae/your-first-guide-to-getting-started-with-firebase-genkit-6948d88e8a92

 急いでいる人のためのクイ...]]></description><link>https://zenn.dev/cureapp/articles/ab5382ce510c8c</link><guid isPermaLink="true">https://zenn.dev/cureapp/articles/ab5382ce510c8c</guid><pubDate>Tue, 23 Jul 2024 04:04:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--36FfgNz_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Firebase%2520Genkit%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yukinagae%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1MThkMWZlMzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:CureApp%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dJaGJ0cmVPNThxQ2UyVnd5S3lRTC02MTEtejJaUDVsTUQwVkpNMUE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukinagae</dc:creator></item><item><title><![CDATA[[memo]Netflixのクローンを作るチュートリアル過程で気になったことを雑に残しておく]]></title><description><![CDATA[
 前提
こちらの記事を参考にNetflixのクローンアプリを作成しています。
その際に個人的に気になったことのメモになります。
後々丁寧に書き直せたらと思っています..(ｱｸﾏﾃﾞｶﾞﾝﾎﾞｳﾃﾞｽ)
https://zenn.dev/gunners6518/books/4c4672f32dd100

 Chapter02 1章 TMDBの下準備
TMDBの設定が変わっていてAPI KEYを取得するために、アプリURLとかが必要になっていました。
そのため、先に下記を行っておくといいかもしれないです。

Chapter03 2章 環境構築　を参考に、以下を実施。

教材にあるリポジトリ...]]></description><link>https://zenn.dev/kon_kon_nok/articles/1a6ed5ad191acf</link><guid isPermaLink="true">https://zenn.dev/kon_kon_nok/articles/1a6ed5ad191acf</guid><pubDate>Tue, 23 Jul 2024 00:53:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BE8B38g7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bmemo%255DNetflix%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E9%2581%258E%25E7%25A8%258B%25E3%2581%25A7%25E6%25B0%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E9%259B%2591%25E3%2581%25AB%25E6%25AE%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NOK%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzOGRjOTRmMzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NOK</dc:creator></item><item><title><![CDATA[TypeScriptにてgRPC Clientのメソッドへpromisifyを適用する]]></title><description><![CDATA[こんにちは。エンジニアのYです。
データ連携（バッチ取り込み）機能のGA版ではバッチの設定を管理するWeb APIを開発しました。Web APIはgRPCサーバーをバックエンドとするBFFサーバーにより構成されています。BFFサーバーはTypeScriptにより実装されており、スキーマから自動生成されたgRPC Clientを通じてgRPCメソッドを呼び出しています。gRPC Clientのメソッドコールはコールバックによる非同期処理が実装されているため、そのまま使用すると可読性の低いコードになってしまいます。
今回はutil.promisifyを用いてasync/awaitを用いたgR...]]></description><link>https://zenn.dev/sprocket/articles/171eba8e6c7d7b</link><guid isPermaLink="true">https://zenn.dev/sprocket/articles/171eba8e6c7d7b</guid><pubDate>Tue, 23 Jul 2024 00:22:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L9yKYTOX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AB%25E3%2581%25A6gRPC%2520Client%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25B8promisify%25E3%2582%2592%25E9%2581%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Sprocket%2520Zenn%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA1ZWQxMjFmN2UuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Sprocket%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMyY2UxY2ZlNWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sprocket Zenn</dc:creator></item><item><title><![CDATA[namespaceを使って、コンポーネントのインポートを整理する]]></title><description><![CDATA[
 はじめに
Typescript の独自構文、namespaceはご存知でしょうか？
https://www.typescriptlang.org/docs/handbook/namespaces.html
過去に.を使って関数コンポーネントの型であるReact.FCを参照する機会あるかと思います。
ドット記法をで型を参照するのはnamespaceの機能です。

 一般的なやり方
以下は一般的なやり方かと思います。

src/components/button.tsx
import * as React from "react";

export type ButtonProps = ...]]></description><link>https://zenn.dev/mylifeasjosh/articles/24b9f728f6fb38</link><guid isPermaLink="true">https://zenn.dev/mylifeasjosh/articles/24b9f728f6fb38</guid><pubDate>Tue, 23 Jul 2024 00:09:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a_TcF5mZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:namespace%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:josh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMzMyZjFhMDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>josh</dc:creator></item><item><title><![CDATA[Rust の中で TypeScript を書くには]]></title><description><![CDATA[
 はじめに
先日ユニークビジョン株式会社の UV Study というイベントで Rust に関する LT 登壇を行いました。
https://uniquevision.connpass.com/event/323686/
この記事はそれを zenn 用にまとめ直したものです。
当日の発表は 10 分と短かったため、当日の発表で話せなかったところも補足しています。

 作ったもの
https://github.com/hotwatermorning/poc-rust-ts-block

 FFI は面倒
あるプログラミング言語で書かれたプログラムの中から、別のプログラミング言語で書かれた...]]></description><link>https://zenn.dev/labbase/articles/bc5be6e5f01920</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/bc5be6e5f01920</guid><pubDate>Mon, 22 Jul 2024 03:03:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CJwsr__v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%25A7%2520TypeScript%2520%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25AB%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hotwatermorning%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxNTdjYTY2ZGIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hotwatermorning</dc:creator></item><item><title><![CDATA[neovim-lspconfig + Biome で保存時に import の整理をする]]></title><description><![CDATA[
 3行まとめ

neovim-lspconfig で Biome の LSP Proxy を起動できる

textDocument/codeAction で source.organizeImports と source.fixAll を実行することで、import の整理が可能
codeAction の同期実行は gopls のドキュメントを参考にする


 前提1: Biome と import
Biome には import に関連する機能が2つ存在する。

Analyzer の Imports Sorting

import をいい感じに並び替えてくれる機能


eslint-...]]></description><link>https://zenn.dev/izumin/articles/b8046e64eaa2b5</link><guid isPermaLink="true">https://zenn.dev/izumin/articles/b8046e64eaa2b5</guid><pubDate>Mon, 22 Jul 2024 02:43:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1mJmIznZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:neovim-lspconfig%2520%252B%2520Biome%2520%25E3%2581%25A7%25E4%25BF%259D%25E5%25AD%2598%25E6%2599%2582%25E3%2581%25AB%2520import%2520%25E3%2581%25AE%25E6%2595%25B4%25E7%2590%2586%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masayuki%2520Izumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pLQnhYeEszZEtUbG80dkZXU04zbWNpU0lvNlRFckpid1M3WUdoeFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masayuki Izumi</dc:creator></item><item><title><![CDATA[TypeScript コーディングテクニック #3 【関数編その1】]]></title><description><![CDATA[
 はじめに
TypeScript のコーディングテクニックを紹介するシリーズの第 3 回です。
前回で内容を予告していたのですが、ほぼ半年ぶりの投稿になってしまいました。またゆっくり投稿していこうと思います。
想定する読者は、プログラミングをある程度経験したうえでさらにコード品質を高めたい方です。初心者向けではないと思います。
第 3 回は、関数でどのようなことができるかを整理していきます。TypeScript と題していますが、 TypeScript に限らずあらゆるプログラミング言語に通ずる考え方だと思います。

 関数でできること

 処理の抽象化
一連の処理を関数にまとめて名前...]]></description><link>https://zenn.dev/somnicattus/articles/9c1ac15f9a9589</link><guid isPermaLink="true">https://zenn.dev/somnicattus/articles/9c1ac15f9a9589</guid><pubDate>Mon, 22 Jul 2024 01:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uLSpRcYu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2520%25233%2520%25E3%2580%2590%25E9%2596%25A2%25E6%2595%25B0%25E7%25B7%25A8%25E3%2581%259D%25E3%2581%25AE1%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:somnicattus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlNvNXE3eXJhZTY5OHVBWGpCN05EYTVOZVRxanpMQ2hBakhaek85RmZSPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>somnicattus</dc:creator></item><item><title><![CDATA[Supabaseでリアルタイムチャットアプリを作る]]></title><description><![CDATA[SupabaseにはRealtime APIがあります。接続しているクライアントとのメッセージを送受信できるAPIになります。
このAPIを使用して簡単なリアルタイムチャットアプリを作ってみました。
コード全体はこちらを参考にしてください。
https://github.com/k-logic563/supabase-chat-app
使用モジュールのバージョンは以下の通りです。
主要なモジュールのみ載せていますので、その他はリポジトリのpackage.jsonを参考にしてください。
"vite": "^5.3.4"
"vue": "^3.4.31"
"typescript": "^5....]]></description><link>https://zenn.dev/k_log24/articles/1912d857cc54f3</link><guid isPermaLink="true">https://zenn.dev/k_log24/articles/1912d857cc54f3</guid><pubDate>Sun, 21 Jul 2024 23:47:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EaIpt8T4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Supabase%25E3%2581%25A7%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kohei.com%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FhYTBhMmFjNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kohei.com</dc:creator></item><item><title><![CDATA[React × TypeScriptでポートフォリオを作った。]]></title><description><![CDATA[
 はじめに
2023年10月ごろから本格的にプログラマー転職を考え、ドットインストールにてHTML、CSS、JavaScriptを学んだのち、YoutubeやZennの記事、そしてドキュメントを通してReactを勉強しました。
何かポートフォリオを作成したく、好きな写真家さんである石田真澄さんのポートフォリオサイトを模倣したサイトを作成しようと考え、作り終えたはいいものの何かレガシーとして文章化した方が、就活や今後のために良いだろうと思い、ブログ化することにしました。文章を書くのはとても好きな作業なので、今まではObsidianで疑問点の解決方法などをアウトプットしていましたが、ローカ...]]></description><link>https://zenn.dev/interprecord/articles/f0b7f3711a8766</link><guid isPermaLink="true">https://zenn.dev/interprecord/articles/f0b7f3711a8766</guid><pubDate>Sun, 21 Jul 2024 17:17:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1NDC4tah--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25C3%2597%2520TypeScript%25E3%2581%25A7%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AA%25E3%2582%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:glycerin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MzVkYTUzOWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glycerin</dc:creator></item><item><title><![CDATA[Next.js って App Router が出てきて平和じゃなくなったよね]]></title><description><![CDATA[
 背景
Next.js に App Router が導入されてから1年近くが経ちました。しかし、未だに App Router を前提として設計のベストプラクティスが定まっておらず、身近なフロントエンドエンジニアはみな「まだプロダクトに取り入れるには考えることが多いよね」という共通認識のまま止まっているような気がしています。
また、App Router が導入されるまでは、技術選定の無難な選択肢として Next.js が最有力でした。しかし、現在は App Router の設計のプラクティスが未発達なことや、オーバースペックであるという見方が出てきており、検討しなければならないことが多く...]]></description><link>https://zenn.dev/noko_noko/articles/3ccc64c389259c</link><guid isPermaLink="true">https://zenn.dev/noko_noko/articles/3ccc64c389259c</guid><pubDate>Sun, 21 Jul 2024 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MuYQqHdb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25A3%25E3%2581%25A6%2520App%2520Router%2520%25E3%2581%258C%25E5%2587%25BA%25E3%2581%25A6%25E3%2581%258D%25E3%2581%25A6%25E5%25B9%25B3%25E5%2592%258C%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2581%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A4%25E3%2581%25A1%25E3%2581%25AE%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjZDZjM2E1ZmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>つちのこ</dc:creator></item><item><title><![CDATA[【React】useRefの深掘り ~ useStateとの違い、レンダリングの際の挙動等]]></title><description><![CDATA[
 はじめに
本記事ではuseRef, useStateについて説明した後、両者の違いについて解説します。

 useRef とは
レンダリングに必要ない値を参照する際に用いられる React Hook です。

 入力


initialValue: ref のcurrentの初期値。最初のレンダリング後、この値は無視されます。


 返り値


currentというプロパティを有するオブジェクトを返します。currentは最初initialValueで初期化されますが、後に他の値を指定することもできます。このrefオブジェクトを JSX ノードのref属性として React に渡すと...]]></description><link>https://zenn.dev/tanukichi001/articles/20240718_day1</link><guid isPermaLink="true">https://zenn.dev/tanukichi001/articles/20240718_day1</guid><pubDate>Sun, 21 Jul 2024 14:37:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aZr6-iGa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591useRef%25E3%2581%25AE%25E6%25B7%25B1%25E6%258E%2598%25E3%2582%258A%2520%7E%2520useState%25E3%2581%25A8%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2580%2581%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E9%259A%259B%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E7%25AD%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25AC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxZjQzZmI5ZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たぬき</dc:creator></item><item><title><![CDATA[入社3週間で同僚からアニメ作品のオススメを捌ききれなくなったので審議用Botを作ってみました]]></title><description><![CDATA[こんにちは。ダイの大冒険ガチ勢のbun913と申します。
今回は、SlackとAWSの Lambda + Bedrock を利用して自分用のAI Chatを作成してみました。

画像引用: https://dev.classmethod.jp/articles/amazon-bedrock-slack-chat-bot-part2/
なお、上記画像も含めて、今回の構成はこちらの記事Amazon BedrockとSlackで生成AIチャットボットアプリを作る (その2：Lambda＋API Gatewayで動かす) | DevelopersIOを参考にさせていただきました。非常にわかりやす...]]></description><link>https://zenn.dev/moneyforward/articles/3eadb58169f235</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/3eadb58169f235</guid><pubDate>Sun, 21 Jul 2024 13:52:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yt1pmHsR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E7%25A4%25BE3%25E9%2580%25B1%25E9%2596%2593%25E3%2581%25A7%25E5%2590%258C%25E5%2583%259A%25E3%2581%258B%25E3%2582%2589%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E4%25BD%259C%25E5%2593%2581%25E3%2581%25AE%25E3%2582%25AA%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%25E3%2582%2592%25E6%258D%258C%25E3%2581%258D%25E3%2581%258D%25E3%2582%258C%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E5%25AF%25A9%25E8%25AD%25B0%25E7%2594%25A8Bot%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bun913%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNGVhMDEyMDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bun913</dc:creator></item><item><title><![CDATA[Playwright+GitHub Actions*E2E with VRT 環境構築とCI/CD連携の知見]]></title><description><![CDATA[
 はじめに
業務でPlaywrightの環境構築及びCI/CD連携担当したことから、E2EテストとVRTのベストな構成をずっと悩んでいました。
自分の中である程度納得できる形まで落とし込めたので、その知見を残しておきます。
🎭Playwrigth
Microsoftが開発したテストツールです。複数ブラウザ対応、自動待機機能、並列処理などによりE2Eテストを実施します。また、スクリーンショットの比較によるテスト（VRT:Visual Regression Testing）により視覚的変更も検出可能です。元々Puppeteerを作っていたチームにより開発が行われているようです。
https...]]></description><link>https://zenn.dev/ishiyama/articles/c85138b42e3e1f</link><guid isPermaLink="true">https://zenn.dev/ishiyama/articles/c85138b42e3e1f</guid><pubDate>Sun, 21 Jul 2024 10:44:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LlJ8S2DC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Playwright%252BGitHub%2520Actions%252AE2E%2520with%2520VRT%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A8CI%252FCD%25E9%2580%25A3%25E6%2590%25BA%25E3%2581%25AE%25E7%259F%25A5%25E8%25A6%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ishiyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1ODA5ZmJmZDMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ishiyama</dc:creator></item><item><title><![CDATA[TypeScriptの実行環境をBunとBiomeに移行してみた]]></title><description><![CDATA[
 はじめに
転職してからサーバーサイドの勉強や AWS の SAA の勉強をしていて、一旦一区切り着きました。(SAA は無事合格しました。)
TypeScript もかなりアップデートが入り、気づいたらバージョンは5.5でした。
ここのキャッチアップから始めようと思い、勉強用の実行環境を久しぶりに立ち上げふと思いました。
「環境だいぶ昔に作ったからパッケージのバージョン古いんじゃね？」
なので確認してみました。

かなり古かったので、勉強の前に環境をアップデートしようと思いました。

 既存のパッケージのバージョンアップ
当初は既存のパッケージのバージョンアップで進めていたのですが、...]]></description><link>https://zenn.dev/pe_be_o/articles/maeta-187-articles_c7602bb31f03d7</link><guid isPermaLink="true">https://zenn.dev/pe_be_o/articles/maeta-187-articles_c7602bb31f03d7</guid><pubDate>Sun, 21 Jul 2024 10:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c2vfJOO5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592Bun%25E3%2581%25A8Biome%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Maeta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNGE3YTFjNzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maeta</dc:creator></item><item><title><![CDATA[ローカル環境でTypeScriptを実行する手順]]></title><description><![CDATA[
 1.TypeScriptをJavaScriptにコンパイルしてからNode.jsで実行する場合

 1.1.Node.jsをインストール
公式サイトからダウンロードできます。

 1.2.TypeScriptをインストール
コマンドラインで以下のコマンドを実行して、TypeScriptをインストールします：
npm install -g typescript

 1.3.TypeScriptファイルの作成
TypeScriptファイル（例：example.ts）を作成します。

 1.4.JavaScriptにコンパイル
コマンドラインで以下のコマンドを実行して、TypeScript...]]></description><link>https://zenn.dev/zaruta/articles/d453ca6d3bed88</link><guid isPermaLink="true">https://zenn.dev/zaruta/articles/d453ca6d3bed88</guid><pubDate>Sun, 21 Jul 2024 09:47:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D-AjRWkR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7TypeScript%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zaruta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VVMjRBckJvN3ltdnFLcEFOc09iUW41Z0tSMnhfSnpXTnpmeEVFZVZKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaruta</dc:creator></item><item><title><![CDATA[Github CLIをインストールしようとしたらハマった💦]]></title><description><![CDATA[
 Tips💡
本屋さんで買ってみたGitHub CI/CD実践ガイドを読んで、Github CLIの環境構築をしようとしたら、些細なミスでハマった💦
https://gihyo.jp/book/2024/978-4-297-14173-8
install:
brew install gh
show version:
gh --version
loginして、Githubと連携する。ここからハマった💦
ターミナルにワンタイムパスワードが貼ってあるのに気づかなかった笑
gh auth login
Title for your SSH key: (GitHub CLI)
自分で名前をつけるよ...]]></description><link>https://zenn.dev/joo_hashi/articles/d08592bf798256</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/articles/d08592bf798256</guid><pubDate>Sun, 21 Jul 2024 07:33:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TES4qg9a--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Github%2520CLI%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JboyHashimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjOTBiY2M0M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[JavaScriptにおけるビルドの仕組みを考える]]></title><description><![CDATA[
 はじめに
これまでビルドについては、『トランスパイルしてバンドルして〜』と言ったように何となく雰囲気で捉えていました。しかし、設定ファイルを修正するにあたり理解が足りない箇所があったため、ビルドプロセス全体について調べてみました。今回は『具体的にビルドは何をしてくれるの？』と言った疑問を解消することを目的に記事を書いてみます。

 ビルドとは
そもそも”ビルド”とはどのようなプロセスを表しているのでしょうか？
JavaScriptにおけるビルドプロセスは、開発中のコードを本番環境で効率よく実行できる形に「変換」するための一連のステップを指します。このプロセスには、コードの最適化や変換...]]></description><link>https://zenn.dev/atusi/articles/02754c98953061</link><guid isPermaLink="true">https://zenn.dev/atusi/articles/02754c98953061</guid><pubDate>Sun, 21 Jul 2024 07:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W8I8rGKJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Atsushi%2520hatakeyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYWE3ODNjN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Atsushi hatakeyama</dc:creator></item><item><title><![CDATA[TypeScriptでe-Stat APIのデータを取得する]]></title><description><![CDATA[
 TypeScriptでe-Stat APIのデータを取得する方法

 e-Stat APIの概要
e-Stat APIは、日本の政府統計総合窓口（e-Stat）が提供する公式APIです。このAPIを使用することで、日本の様々な統計データに簡単にアクセスできます。主な特徴は以下の通りです：


豊富なデータセット：人口統計、経済指標、社会調査など、幅広い分野のデータが利用可能です。


リアルタイムデータ：最新の統計情報にアクセスできます。


カスタマイズ可能なクエリ：特定の地域、期間、カテゴリーなどでデータをフィルタリングできます。


JSON形式のレスポンス：プログラムで扱いや...]]></description><link>https://zenn.dev/uruhayato373/articles/5ba8d0f944a138</link><guid isPermaLink="true">https://zenn.dev/uruhayato373/articles/5ba8d0f944a138</guid><pubDate>Sun, 21 Jul 2024 07:11:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fng31IUP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7e-Stat%2520API%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:uruhayato373%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3E2VE5PWVVhRlpoSVRRd2FzNDk2azhfbWlKN3c3REZGb0NTS1A0N1VyYkxqUjkyaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uruhayato373</dc:creator></item></channel></rss>