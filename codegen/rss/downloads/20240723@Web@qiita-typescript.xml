<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/typescript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/typescript/feed"/>
  <title>TypeScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでTypeScriptタグが付けられた新着記事</description>
  <updated>2024-07-23T18:24:34+09:00</updated>
  <link>https://qiita.com/tags/typescript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1891057</id>
    <published>2024-07-23T18:24:34+09:00</published>
    <updated>2024-07-23T18:24:34+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/dkdidudtn/items/56f1565b6048ff6091ec"/>
    <url>https://qiita.com/dkdidudtn/items/56f1565b6048ff6091ec</url>
    <title>お互いの type を union type としますが、お互いの property を never にしたいとき</title>
    <content type="html">はしがき
仕事をしながら、api 取得からこのような jbuilder をみました。
if @hello?
  json.hello 1
  json.world hello_world
  return
en…</content>
    <author>
      <name>dkdidudtn</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1890838</id>
    <published>2024-07-23T07:41:04+09:00</published>
    <updated>2024-07-23T07:41:04+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/BlackOpal/items/a62ffa3ef11d8cc6acc1"/>
    <url>https://qiita.com/BlackOpal/items/a62ffa3ef11d8cc6acc1</url>
    <title>エラーに応じて表示画面を変える</title>
    <content type="html">import React from 'react';

interface ErrorFallbackProps {
  error: Error;
}

export const ErrorFallbac…</content>
    <author>
      <name>BlackOpal</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1890778</id>
    <published>2024-07-23T00:56:51+09:00</published>
    <updated>2024-07-23T00:56:51+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/takegons/items/17159cfa348b59108233"/>
    <url>https://qiita.com/takegons/items/17159cfa348b59108233</url>
    <title>【TypeScript】複数の型を定義する方法</title>
    <content type="html">ユニオン型
複数の型のいずれかを許容する型を定義します。
「|」で繋いで複数定義が可能！
let value: string | number;
value = "Hello";
value = 4…</content>
    <author>
      <name>takegons</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1890777</id>
    <published>2024-07-23T00:54:52+09:00</published>
    <updated>2024-07-23T00:54:52+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/takegons/items/01fb8c1432da0a771777"/>
    <url>https://qiita.com/takegons/items/01fb8c1432da0a771777</url>
    <title>【TypeScript】特殊な型</title>
    <content type="html">any
どんな型でも許容する型。TypeScriptの型チェックを無効にする。
let value: any = "string";
value = 42;

unknown
anyに似ているが、安全…</content>
    <author>
      <name>takegons</name>
    </author>
  </entry>
</feed>
