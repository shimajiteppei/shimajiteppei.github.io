<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 19 May 2024 06:45:31 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[キャッシュを使用して、二重ループのパフォーマンスを改善した話　Java]]></title><description><![CDATA[
 問題点：二重ループによる時間計算量の増加
次のように二つのリスト間で一致する要素を見つけるために二重ループを使用したい。
    for (int i : list1) {
        for (int j : list2) {
            if (i == j) {
                System.out.println("Match found: " + i);
            }
        }
    }
このコードではlist1の各要素に対して、list2の全ての要素を比較しているため、時間計算量はO(n^2)となる。この方法はリス...]]></description><link>https://zenn.dev/tech_mico/articles/6c9f12751da82d</link><guid isPermaLink="true">https://zenn.dev/tech_mico/articles/6c9f12751da82d</guid><pubDate>Sun, 19 May 2024 06:19:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KlTbxjJB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581%25E4%25BA%258C%25E9%2587%258D%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E6%2594%25B9%25E5%2596%2584%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%25E3%2580%2580Java%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techmico%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxMTBhYmRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techmico</dc:creator></item><item><title><![CDATA[CheerpJ 3.0rc1を発表：テストと改善にご協力ください！]]></title><description><![CDATA[
本日、最初のCheerpJ 3.0リリース候補、バージョン3.0rc1のリリースを発表できることを嬉しく思います。
過去何年もの間、私たちのチームは、Javaアプリケーション、アプレット、ライブラリをモダンブラウザ上で実行するためのソリューションであるCheerpJのために、全く新しいアーキテクチャの開発に精力的に取り組んできました。

 主なハイライト
世界中の何百もの組織による長年のCheerpJ 2.xの実世界での利用を活用し、我々のブラウザベースのx86仮想マシンであるCheerpXの開発から学んだ多くの教訓を活用して、我々はCheerpJの全面的な書き直しを行いました。
・さ...]]></description><link>https://zenn.dev/leaning_tech_jp/articles/c475f91ab7d087</link><guid isPermaLink="true">https://zenn.dev/leaning_tech_jp/articles/c475f91ab7d087</guid><pubDate>Fri, 17 May 2024 12:23:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kAdc9ywS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CheerpJ%25203.0rc1%25E3%2582%2592%25E7%2599%25BA%25E8%25A1%25A8%25EF%25BC%259A%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A8%25E6%2594%25B9%25E5%2596%2584%25E3%2581%25AB%25E3%2581%2594%25E5%258D%2594%25E5%258A%259B%25E3%2581%258F%25E3%2581%25A0%25E3%2581%2595%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leaning%2520Technologi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MmNjYWUyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leaning Technologies Japan (リーニングテクノロジー)</dc:creator></item><item><title><![CDATA[デバッグのコツ]]></title><description><![CDATA[
 比較する。
現状、期待通りに動作しているものとの比較を行うことで、異常の原因を探す手法です。
プログラミングの他、Linuxでのサーバ構築で威力を発揮します。
ただし、人間が目で確認するだけでは細かい違いを調べるのは難しいため、差分検出ツールを使います。
windowsであればwinmerge、macであればCompareMergeがオススメ。
この二つはフォルダ比較という機能を備えていて、同じディレクトリ構造であれば数百個のファイルでも一括で差分を洗い出すことができます。

CompareMerge
目で間違い探しをしていては抜け漏れが発生します。間違えない人でも無駄に疲れます。
...]]></description><link>https://zenn.dev/k_tabuchi/articles/02176795753152</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/02176795753152</guid><pubDate>Thu, 16 May 2024 13:06:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WNQ5X7SP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[Java の標準 URI ライブラリが RFC 3986 に対応していないので、自作ライブラリで対応する羽目になった話]]></title><description><![CDATA[
 はじめに
Java 開発者にとっては周知の事実かもしれませんが、Java の標準 URI ライブラリ (java.net.URI クラス) は未だに古い仕様である RFC 2396 をベースに実装されており、今日のデファクトスタンダードである RFC 3986 に完全準拠していません。RFC 6749 (The OAuth 2.0 Authorization Framework) や他の規格・仕様によって RFC 3986 が参照されているにも関わらず標準ライブラリがそれに対応していないとなると、開発者としては不足部分を何らかの手段で補完せざるを得なくなります。かく言う私も自社製品の...]]></description><link>https://zenn.dev/authlete/articles/025acd196b78a9</link><guid isPermaLink="true">https://zenn.dev/authlete/articles/025acd196b78a9</guid><pubDate>Thu, 16 May 2024 10:19:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mssPNhht--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2581%25AE%25E6%25A8%2599%25E6%25BA%2596%2520URI%2520%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%258C%2520RFC%25203986%2520%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25A7%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2599%25E3%2582%258B%25E7%25BE%25BD%25E7%259B%25AE%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hidebike712%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5ZDcwYTM5MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Authlete%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNzY2NmMyYzYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hidebike712</dc:creator></item><item><title><![CDATA[【Java】クラス解説37・内部クラス]]></title><description><![CDATA[
 ネストクラス
ネストクラスとは、クラスの中に定義されたクラスです。
ネストクラスは、以下の種類に分けられます。

内部クラス
ローカルクラス
匿名クラス
スタティックネステッドクラス


 内部クラス
内部クラスは、外部クラスの直下で作成されたクラスであり、外部クラスと密接な関係にあります。


 外部クラスから内部クラスのインスタンスを生成し内部クラスのメソッドにアクセスするコード例
public class Main {
    public static void main(String... args) {
        // 外部クラスのインスタンスを生成
       ...]]></description><link>https://zenn.dev/goriki/articles/075-inner-classe</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/075-inner-classe</guid><pubDate>Thu, 16 May 2024 06:54:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gLdR-pf_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC37%25E3%2583%25BB%25E5%2586%2585%25E9%2583%25A8%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(後半)]]></title><description><![CDATA[
 前回の記事から
今回は2つの記事に分けることになりました。
こちらはデザインパターン備忘録(前半)からの続きになります。

 Chain of Responsibility（責任の連鎖）パターン

 メリット

柔軟なリクエスト処理

リクエストを処理するオブジェクトを動的に変更できるため、柔軟なリクエスト処理が可能です。

コードの分離

リクエストを処理する各オブジェクトを独立して設計できるため、責任を分離できます。

可読性と保守性の向上

処理ロジックをチェーン内の各オブジェクトに分散させることで、コードの可読性と保守性が向上します。

新しい処理の追加が容易

新しい処理を...]]></description><link>https://zenn.dev/kou_kawa/articles/36-design-pattern-02</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/36-design-pattern-02</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MQBCehL4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%25BE%258C%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(前半)]]></title><description><![CDATA[
 はじめに
ChatGPT-4oが使用できるようになりました。私も早速使ってみましたが、以前のバージョンに比べてスピードと精度の向上を実感しました。これを機に、デザインパターンについての記事を書いてみることにしました。この記事を通じて勉強にもなり、後で見返すための資料としても活用できるようにしたいと思います。サンプルコードには、Java、TypeScript、Pythonのプログラミング言語を使用しています。
今回は記事を2つに分けることになりました。
後半の記事はこちら

 デザインパターン一覧

生成に関するパターン

Abstract Factory（アブストラクトファクトリー）...]]></description><link>https://zenn.dev/kou_kawa/articles/35-design-pattern-01</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/35-design-pattern-01</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ihl2SnhW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%2589%258D%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item><item><title><![CDATA[Spring Bootを使ってTodo Appを作ってみる]]></title><description><![CDATA[Spring Bootを使ってTodo Appを作ってみる。
基本的なCRUD機能を持った簡単なAppになる。

 1. postgreSQLの準備
インストールについては、こちらの方の記事を参考にしました。
PostgreSQL を Windows にインストールするには
インストールができたら、Todoアプリで使用するDBを作る。
「SQL Shell(psql)」を開いて、ユーザーを作成する。

ユーザーが作成されたことを確認する。

データベースを作成する。

作成したデータベースに、作成したユーザーで接続する。

接続ができたので、テーブルを作成する。

作成したテーブルを確認...]]></description><link>https://zenn.dev/heylee/articles/3684a4fd6e3a69</link><guid isPermaLink="true">https://zenn.dev/heylee/articles/3684a4fd6e3a69</guid><pubDate>Wed, 15 May 2024 13:00:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_yiJiGQ8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Todo%2520App%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzZTlhOWRhZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rin</dc:creator></item><item><title><![CDATA[入門書と実際の業務の違いとは。]]></title><description><![CDATA[
 はじめに
プログラミングを覚えるにあたって、皆さんはどのように勉強してきたでしょうか？
私は自費で入門書を買って勉強したり、ドットインストールという動画サイトに課金して勉強していました。
最近はYoutubeの動画配信で勉強することも多いです。
プログラミングスクールに通ったり、専門学校で習う方もいるでしょう。
どんな教材であれ、プログラマーとして採用された皆さんは何かしらの言語を多少なりとも身につけ、教材どおりのプログラムを動かすことができるようになっていることと思います。
さて、数週間の研修期間を終えたあなたは出向の面談に受かり、ついに業務案件に携わることになります。
そこであな...]]></description><link>https://zenn.dev/k_tabuchi/articles/c97402a43fc9fa</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/c97402a43fc9fa</guid><pubDate>Wed, 15 May 2024 09:58:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yr1oFGzR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E9%2596%2580%25E6%259B%25B8%25E3%2581%25A8%25E5%25AE%259F%25E9%259A%259B%25E3%2581%25AE%25E6%25A5%25AD%25E5%258B%2599%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E3%2581%25AF%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[【Java】クラス解説36・インターフェイス]]></title><description><![CDATA[
 インターフェイス
インターフェイスとは、下記の特徴があります。

直接的にインスタンス化できない。
フィールドは定数のみです。暗黙的にpublic static finalになり、初期化子が必要になります。
メソッドは原則論的にはpublicな抽象メソッド（=処理内容を実装しない）ですが、static、default及びprivateを用いることにより、処理内容を実装できるようになりました。
インターフェイスの特性を引き継いだクラスを定義する時は、implementsを使用する。implementsによりポリモーフィズムを活用することができます。



 インスタンス化できないコード...]]></description><link>https://zenn.dev/goriki/articles/074-interface</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/074-interface</guid><pubDate>Wed, 15 May 2024 07:26:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mutf7zBB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC36%25E3%2583%25BB%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A4%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[Apple Silicon でJavaのSpring使ったアプリのコンテナビルドしようとしたらうまくいかなかったことメモ]]></title><description><![CDATA[
 はじめに
タイトルにあるように、Apple Silicon で Java の Spring 使ったアプリのコンテナビルドしようとしたらうまくいかなかったことのメモ
ふわふわした情報だけど、こうしたら動かなくて、こうしたら動いたよってメモです。

 やろうとしたこと

IBM Cloud Code Engine ってコンテナプラットフォームで Web アプリをデプロイするために、Apple Silicon の Macbook で、Java の Spring 使ったアプリのイメージをビルドしようとした


 したこと


gradleのイメージを使って Dockerfile を作った

...]]></description><link>https://zenn.dev/optimisuke/articles/07d4120d37c542</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/07d4120d37c542</guid><pubDate>Tue, 14 May 2024 13:31:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HdsaGiW3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Apple%2520Silicon%2520%25E3%2581%25A7Java%25E3%2581%25AESpringw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[100DaysOfJava - [Day 5] `equals()`メソッドのオーバーライドについて]]></title><description><![CDATA[
 equals()メソッドの役割


equals()メソッドは、オブジェクト同士が等しいかどうかを判断するために使用されます。
オブジェクトの等価性比較を行う際に、equals()メソッドのオーバーライドが重要です。


 equals()メソッドのオーバーライド


equals()メソッドのシグネチャ
equals()メソッドをオーバーライドする際には、以下のシグネチャに従う必要があります。
@Override
public boolean equals(Object obj) {
    // 実装
}



nullのチェック
オブジェクトの比較を行う際には、nullチェック...]]></description><link>https://zenn.dev/jianbo/articles/b2ef5c4a79ad23</link><guid isPermaLink="true">https://zenn.dev/jianbo/articles/b2ef5c4a79ad23</guid><pubDate>Tue, 14 May 2024 07:17:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hAQPPk8_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:100DaysOfJava%2520-%2520%255BDay%25205%255D%2520%2560equals%2528%2529%2560%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AE%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bob%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y294R080dWFKVXlVNEZBZW1pdWt5cnZjQmhRMGdIQ09OMzJ6NThCSFE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bob</dc:creator></item><item><title><![CDATA[デザインパターン: Template Methodパターン -具体的な処理をサブクラスに任せる-]]></title><description><![CDATA[
 はじめに
GoFの23のデザインパターンがまとめられている「Java言語で学ぶデザインパターン入門」を読んでアウトプットとしてデザインパターンを1つずつ記事としてアウトプットしていきます。
原則的にJavaで実装コード例などを記述していきますが、気になったことや改善点、感想等ありましたらぜひコメントくださると嬉しいです！
23のパターン一覧はこちらから　※随時更新中
1.Iteratorパターン
2.Adapterパターン
3.Template Methodパターン
4.Factory Methodパターン
5.Singletonパターン
6.Prototypeパターン
7.Buil...]]></description><link>https://zenn.dev/sadaizin/articles/0578d01e03f7cf</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/0578d01e03f7cf</guid><pubDate>Tue, 14 May 2024 03:59:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WoJKPgHP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%253A%2520Template%2520Method%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2520-%25E5%2585%25B7%25E4%25BD%2593%25E7%259A%2584%25E3%2581%25AA%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AB%25E4%25BB%25BB%25E3%2581%259B%25E3%2582%258B-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SADAIZIN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SADAIZIN</dc:creator></item><item><title><![CDATA[【Java】クラス解説35・抽象メソッド]]></title><description><![CDATA[
 抽象メソッド

抽象メソッドとは、abstractが付与されたメソッドです。メソッド名、戻り値の型、引数、例外を定義しますが、処理内容を実装しません。

そのため、抽象クラスを継承するサブクラスにおいて、抽象メソッドをオーバーライドして、処理内容を実装しなければなりません。

抽象メソッドを含むクラスは、必ず抽象クラスとして宣言しなければなりません。



 抽象メソッドのコード例
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Fuzi fz ...]]></description><link>https://zenn.dev/goriki/articles/073-abstract-method</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/073-abstract-method</guid><pubDate>Mon, 13 May 2024 06:39:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VQymX_2Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC35%25E3%2583%25BB%25E6%258A%25BD%25E8%25B1%25A1%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[チームラボの通年インターンに参加してきた話]]></title><description><![CDATA[
 はじめに
2,3月にチームラボの通年インターンシップに行ってきたので、体験したことを書いていきます。
初めて書く記事なので優しい目で読んでいただければ幸いです。

 チームラボについて
チームラボと聞くと豊洲のチームラボプラネッツや麻布台のチームラボボーダレスをはじめとするアート展示のことを思い浮かべる人が多いと思います。しかし、実際は展示だけでなく「りそなグループアプリ」「BUMP OF CHICKEN リスナー向け公式アプリ」などの受託開発も行っています。（私はインターン応募の際に事業を詳しく調べるまで知りませんでした）
https://speakerdeck.com/teaml...]]></description><link>https://zenn.dev/naoki_ymd/articles/teamlab-internship-2024</link><guid isPermaLink="true">https://zenn.dev/naoki_ymd/articles/teamlab-internship-2024</guid><pubDate>Mon, 13 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6FOQsjml--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25A9%25E3%2583%259C%25E3%2581%25AE%25E9%2580%259A%25E5%25B9%25B4%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AB%25E5%258F%2582%25E5%258A%25A0%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258D%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JjMTFlNWJlZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naoki</dc:creator></item><item><title><![CDATA[Java EntityクラスはintとIntegerどちらを使うべきか]]></title><description><![CDATA[
 はじめに
個人開発で新しくアプリを作り始めるときに毎回迷います。
また、調べてもintとIntegerの書き方が人によってマチマチでどちらであるべきかよくわかりません。
Spring Data JDBCを使った開発を想定しています。

 intとIntegerの違い
int型とInteger型の違いについて。
NULLを許容するかどうかがポイントな気がしています。

NULL許容
intはプリミティブ型で、NULLを許容しません。一方、Integerはオブジェクト型で、NULLを許容します。
メソッドとフィールド
Integerはオブジェクト型であり、値を操作するためのメソッド（例え...]]></description><link>https://zenn.dev/wanderer_eel/articles/6a6e2f41ea5d34</link><guid isPermaLink="true">https://zenn.dev/wanderer_eel/articles/6a6e2f41ea5d34</guid><pubDate>Sun, 12 May 2024 07:16:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dsEw1OWd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Entity%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AFint%25E3%2581%25A8Integer%25E3%2581%25A9%25E3%2581%25A1%25E3%2582%2589%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25B9%25E3%2581%258D%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%2587%25E9%2582%25A3%25E6%259C%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5MjhlYjgwMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宇那木</dc:creator></item><item><title><![CDATA[Spring Bootを使ってHello Worldを表示]]></title><description><![CDATA[Spring Bootは、Spring Frameworkに基づいていて
Spring Frameworkより簡単なセットアップでSpring Application開発ができるフレームワーク。
Spring Bootを使って画面にHello Worldを表示させてみる。

流れ
Spring Bootプロジェクトの作成
HTMLの作成
Controllerクラスの作成
実行
エラー


 流れ

Spring Bootプロジェクトの作成
HTMLの作成
Controllerクラスの作成
実行
エラー


 1. Spring Bootプロジェクトの作成
「ファイル」→「新規」→「その他...]]></description><link>https://zenn.dev/heylee/articles/4e89b26e159981</link><guid isPermaLink="true">https://zenn.dev/heylee/articles/4e89b26e159981</guid><pubDate>Fri, 10 May 2024 15:46:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P6sC0Bf1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Hello%2520World%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzZTlhOWRhZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rin</dc:creator></item><item><title><![CDATA[デザインパターン: Adapterパターン -一皮かぶせて再利用-]]></title><description><![CDATA[
 はじめに
GoFの23のデザインパターンがまとめられている「Java言語で学ぶデザインパターン入門」を読んでアウトプットとしてデザインパターンを1つずつ記事としてアウトプットしていきます。
原則的にJavaで実装コード例などを記述していきますが、気になったことや改善点、感想等ありましたらぜひコメントくださると嬉しいです！
23のパターン一覧はこちらから　※随時更新中
1.Iteratorパターン
2.Adapterパターン
3.Template Methodパターン
4.Factory Methodパターン
5.Singletonパターン
6.Prototypeパターン
7.Buil...]]></description><link>https://zenn.dev/sadaizin/articles/332a0c8706178f</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/332a0c8706178f</guid><pubDate>Fri, 10 May 2024 08:21:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pfTBuv0k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%253A%2520Adapter%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2520-%25E4%25B8%2580%25E7%259A%25AE%25E3%2581%258B%25E3%2581%25B6%25E3%2581%259B%25E3%2581%25A6%25E5%2586%258D%25E5%2588%25A9%25E7%2594%25A8-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SADAIZIN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SADAIZIN</dc:creator></item><item><title><![CDATA[【Java】クラス解説34・抽象クラス]]></title><description><![CDATA[
 抽象クラス

抽象クラスとは、クラス名の前にabstractを付けたインスタンス化できないクラスを指します。
主にスーパークラスで使う事が多いです。スーパークラスは、共通のアクションや機能を実装し、サブクラスに具体的な実装を任せるためです。
抽象クラスで定義されたフィールドやメソッドは、サブクラスのインスタンスから参照することが可能です。


 抽象クラスのコード例
import java.util.*;

public class Main {
    public static void main(String[] args) {
        // 抽象クラスのインスタンスの...]]></description><link>https://zenn.dev/goriki/articles/072-abstract-class</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/072-abstract-class</guid><pubDate>Fri, 10 May 2024 07:16:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yisHrkqk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC34%25E3%2583%25BB%25E6%258A%25BD%25E8%25B1%25A1%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[CheerpJ 3.0 AMAを見る]]></title><description><![CDATA[
https://youtu.be/Z-mHW6ldgco
2023年9月18日（月）午後3時（BST）に、CTO兼リード開発者のアレッサンドロによるライブ**Ask-Me-Anything (AMA)**を開催しました。
主なトピックはCheerpJ 3.0でしたが、WebAssemblyやコンパイラ、会社全般など、私たちの製品全般に関する質問を歓迎しました。CheerpJ 3.0の開発、リリーススケジュール、3.0のアーキテクチャが2.0とどう違うかなどの技術的な詳細について話しました。
今後のイベント開始のお知らせを受け取るには、私たちのDiscordサーバーに参加してください！
...]]></description><link>https://zenn.dev/leaning_tech_jp/articles/2faf0d14b37113</link><guid isPermaLink="true">https://zenn.dev/leaning_tech_jp/articles/2faf0d14b37113</guid><pubDate>Thu, 09 May 2024 22:03:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cV7GMRam--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:CheerpJ%25203.0%2520AMA%25E3%2582%2592%25E8%25A6%258B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leaning%2520Technologi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MmNjYWUyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leaning Technologies Japan (リーニングテクノロジー)</dc:creator></item></channel></rss>