<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 07 Jul 2024 11:38:42 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[一日一処: TypeScriptでオブジェクトのプロパティに任意のキーと必須のキーを設定し、それぞれのキーによって異なる値の型を設定する]]></title><description><![CDATA[
 TypeScriptでの型定義
TSに触れていると、いくつか前例を調べても見つからないパターンがある。また、意図するものが見つかったとしても、適切に動作するとは限らないこともある。
今回は、TSにおけるオブジェクトで、必須のキーと任意のキーを設定し、それぞれに異なる値の型を与えた苦戦した方法を紹介する。
この記事は、過去の記事を更に深堀り、より厳密に動作するように改良を加えた作業となる。

 通常のオブジェクト型定義と記事の前提
通常、型を定義する場合、typeやinterfaceを使用する。今回は、記事全体を通して、typeでの記法に統一する。
一般的にUserの型を定義したいとき...]]></description><link>https://zenn.dev/jinkutoriu/articles/d9f5760fa193c9</link><guid isPermaLink="true">https://zenn.dev/jinkutoriu/articles/d9f5760fa193c9</guid><pubDate>Sun, 07 Jul 2024 09:23:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cV2vYC2c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25B8%2580%25E6%2597%25A5%25E4%25B8%2580%25E5%2587%25A6%253A%2520TypeScript%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25AB%25E4%25BB%25BB%25E6%2584%258F%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25E3%2581%25A8%25E5%25BF%2585%25E9%25A0%2588%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2597%25E3%2580%2581%25E3%2581%259D%25E3%2582%258C%25E3%2581%259E%25E3%2582%258C%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25E3%2581%25AB%25E3%2582%2588%25E3%2581%25A3%25E3%2581%25A6...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25B3%25A5%25E7%2594%259F%2520%25E7%2594%259A%25E5%258F%25A5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyZTA4MTQ0MTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>鳥生 甚句</dc:creator></item><item><title><![CDATA[JSON.parse(JSON.stringify(x))に型をつけよう]]></title><description><![CDATA[
 はじめに
WebバックエンドとクライアントをともにTypeScriptで書くとします。また、バックエンドではJSON.stringifyで値をシリアライズし、クライアントサイドではJSON.parse相当の処理でレスポンスボディを取得すると仮定しましょう[1]。このとき、JSON.stringifyの挙動がわかれば、実際にクライアントにどのような値が返ってきうるかを型で表現できるはずです。例えば、
console.log(JSON.stringify({ a: undefined })) // =&gt; "{}"
となるので、{ a: undefined }の型をJSON.stri...]]></description><link>https://zenn.dev/mshaka/articles/8b9d8fdb7a219e</link><guid isPermaLink="true">https://zenn.dev/mshaka/articles/8b9d8fdb7a219e</guid><pubDate>Sun, 07 Jul 2024 09:11:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rw3PdKN0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JSON.parse%2528JSON.stringify%2528x%2529%2529%25E3%2581%25AB%25E5%259E%258B%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BB%25E3%2581%25A8%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MGMxZmFkMjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ほとけ</dc:creator></item><item><title><![CDATA[SOLIDの原則を心で理解する - インターフェース分離の原則]]></title><description><![CDATA[さて、SOLIDの原則を心で理解することの探求を続けましょう。その第四の原則は「インターフェース分離の原則」（ISP）であり、Wikipedia(英語版)では以下のようにまとめられています。
!
この原則は、いかなるクライアントも使用しないメソッドに依存してはならないということを規定しています。
したがって、大きなインターフェースをより小さく、より具体的なものに分割し、クライアントが自分に関係のあるメソッドにだけアクセスできるようにする必要があります。

以前のSOLID原則に関する投稿、特に単一責任の原則（SRP）に関するものを読んだことがあるなら、その目的にすでに気付いているかもしれ...]]></description><link>https://zenn.dev/andmorefine/articles/5ae927efe2daba</link><guid isPermaLink="true">https://zenn.dev/andmorefine/articles/5ae927efe2daba</guid><pubDate>Sun, 07 Jul 2024 06:10:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pRmOY6Xi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SOLID%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%25E3%2582%2592%25E5%25BF%2583%25E3%2581%25A7%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2520-%2520%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E5%2588%2586%25E9%259B%25A2%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:andmorefine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d4SWhtd3ZlckNiV1hqRkRZWk9xOEJJSGsyMHFYN3ZqN3lrS0NQd1QwPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>andmorefine</dc:creator></item><item><title><![CDATA[カルーセルスライダーライブラリの Embla Carousel が良かった]]></title><description><![CDATA[WEBサイトの開発でカルーセルスライダーを実装する際に、Swiper によくお世話になっています。
はじめての OSS コントリビュートも Swiper でした。
https://github.com/nolimits4web/swiper/pull/7228
https://github.com/nolimits4web/swiper/pull/7319
Swiperも優れたライブラリで気に入っていますが、React / TypeScript の構成で利用する際にコンポーネントではなくロジックだけ提供するライブラリがないかなと思い調べてみたところ、以下記事で Embla Carouse...]]></description><link>https://zenn.dev/yall/articles/4c7ab236d60553</link><guid isPermaLink="true">https://zenn.dev/yall/articles/4c7ab236d60553</guid><pubDate>Sun, 07 Jul 2024 01:32:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rapnqGXY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%25BC%25E3%2582%25BB%25E3%2583%25AB%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2580%25E3%2583%25BC%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%2520Embla%2520Carousel%2520%25E3%2581%258C%25E8%2589%25AF%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasuhiro%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2ZTM4Njc5YmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasuhiro Yamamoto</dc:creator></item><item><title><![CDATA[contentEditable + Reactで簡易的なリッチエディタの自作]]></title><description><![CDATA[みなさんcontentEditable属性を使ったことはありますか？
使いこなせればリッチエディタの開発ができる反面、奇妙な挙動が大変多いです。
例えば、キャレット操作を自前実装で対応が求められるなどです。
更にReactでこの属性をそのまま使うと、子要素をJSXで指定することができません。
本稿ではこれらの辛いポイントを乗り越えて、簡易的なマークダウン風のリッチエディタを開発することを目指します。
!
本稿はPC版のChromeでのみ動作確認をしています。
他のブラウザでは動かない可能性が高いです。


 対象読者

ライブラリを使用しないリッチエディタ開発に興味がある
content...]]></description><link>https://zenn.dev/karintou/articles/35e9e314c5579f</link><guid isPermaLink="true">https://zenn.dev/karintou/articles/35e9e314c5579f</guid><pubDate>Sat, 06 Jul 2024 11:18:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DxlNXXKQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:contentEditable%2520%252B%2520React%25E3%2581%25A7%25E7%25B0%25A1%25E6%2598%2593%25E7%259A%2584%25E3%2581%25AA%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2581%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2581%25AE%25E8%2587%25AA%25E4%25BD%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258A%25E3%2582%2593%25E3%2581%25A8%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMjg4ODkyZjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かりんとう</dc:creator></item><item><title><![CDATA[Reactでオブジェクト指向やってみる #状態管理ライブラリ一切不要]]></title><description><![CDATA[
 オブジェクト指向を取り入れると


『可読性』『拡張性』『汎用性(=保守性)』 の三大柱(自称)が担保され、現場でドヤれる

メソッド名やメンバ変数名が1~2単語で済む #ポリモーフィズム


主語.動詞(補語 | 目的語) S+V+C、S+V+O の形になる

例1: $(A).appendTo(B)

例2: comment.createdBy: User

例3: comment.getCreatedBy(): User

例4: user.medias[n].comments.create({ title, body }: Comment)

例5: user.medias[...]]></description><link>https://zenn.dev/llc_starhacks/articles/929e58b503d6ce</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/929e58b503d6ce</guid><pubDate>Sat, 06 Jul 2024 09:23:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RU0LEX7c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2520%2523%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E4%25B8%2580%25E5%2588%2587%25E4%25B8%258D%25E8%25A6%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[【2024年7月最新🚀】Azure Functions V4 環境構築 TypeScript編]]></title><description><![CDATA[
Azure Functions は、Microsoft Azure のサーバーレスコンピューティングサービスです。これを利用することで、インフラ管理を気にすることなくコードを実行することができます。
この記事では、2024年7月時点の最新情報に基づき、TypeScript で Azure Functions V4 の環境を構築する手順をご紹介します。
Azure FunctionsでHTTPトリガーを作成します。

 前提条件

Node.js のインストール (version 16.x 以上推奨 筆者はv20.9.0で実施)
Azure アカウント
Visual Studio Cod...]]></description><link>https://zenn.dev/yusu29/articles/azure_functions_introduction</link><guid isPermaLink="true">https://zenn.dev/yusu29/articles/azure_functions_introduction</guid><pubDate>Sat, 06 Jul 2024 05:25:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xJDy_6dE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%25902024%25E5%25B9%25B47%25E6%259C%2588%25E6%259C%2580%25E6%2596%25B0%2520%25E3%2580%2591Azure%2520Functions%2520V4%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520TypeScript%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczMjQwNDhhMDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[React の学習のためにTodoアプリを作ってみた  その２]]></title><description><![CDATA[
 はじめに
4ヶ月ほど前に初めてTodoアプリを作成しました。（こちらの記事）当時は、Reactの公式チュートリアルを終えたばかりで、手探り状態でなんとか完成させたという感じでした。
あれから時間も経ち、色々学習を進めたのでその時の経験を踏まえ、さらに学びを深めるためにもう一度Todoアプリを作成してみましたので、作業ログを残しておきます。

 使用する技術

React
Typescript
CSS

tailwind


Recoil


 仕様

 Todoに持たせる情報

ID
タイトル
ステータス
の3つ


 機能

Todoを追加できる
Todoを削除できる
Todoを編...]]></description><link>https://zenn.dev/surume3/articles/9726aeeb969d1e</link><guid isPermaLink="true">https://zenn.dev/surume3/articles/9726aeeb969d1e</guid><pubDate>Sat, 06 Jul 2024 00:16:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m6bEE5Pv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25ABTodo%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%2520%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2592%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Syumai3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4MzZlZGI2OWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Syumai3</dc:creator></item><item><title><![CDATA[自身で作成した ESLint Config をスナップショットテストする]]></title><description><![CDATA[
 これはなに
作成した ESLint Config が期待値通りかどうかをテストする方法についてまとめたものです。
ESLint は非常に多くのルールを提供しており、これにプラグインも加えるとその数は膨大なものになります。全てのルール設定を自身で記述するには多大なコストを要するため、各種プラグインが提供する configs （≒ プリセット）を取り入れつつ、必要に応じてルール設定を追加するのが一般的です。さらに特定のファイル形式やディレクトリー配下に限定して異なる設定を適用する場合もあるでしょう。こうなると設定の全体像が極めて複雑となり、期待値通りになっているかを目視で確認するのは非常...]]></description><link>https://zenn.dev/wakamsha/articles/test-eslint-config</link><guid isPermaLink="true">https://zenn.dev/wakamsha/articles/test-eslint-config</guid><pubDate>Fri, 05 Jul 2024 01:46:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Qf8VzH4U--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E8%25BA%25AB%25E3%2581%25A7%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%2520ESLint%2520Config%2520%25E3%2582%2592%25E3%2582%25B9%25E3%2583%258A%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakamsha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2psYURiOW50NGN1UTUweE54dmxHcW50Rkxsbkg1VThSWUFZOUtBakE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakamsha</dc:creator></item><item><title><![CDATA[ray.soをNeovim/Vimから快適に使えるプラグインを書いた]]></title><description><![CDATA[!
この記事はVim 駅伝の 7/5 の記事です。


https://github.com/ryoppippi/ray-so.vim/

 はじめに
皆さんはray.soをご存知でしょうか？)
https://ray.so/
ray.soは、プログラミング言語のコードを画像に変換してくれるサービスです。
コードを画像にしてくれるサービスやツールといえば、他にもCarbonやSilicon、Freeze などがありますが、ray.soはブラウザから使えて尚且つとてもかっこいいデザインが特徴です。
元々RaycastというMacのランチャーアプリを作っている会社が運営しているサービスで、R...]]></description><link>https://zenn.dev/vim_jp/articles/527fe9cea500c5</link><guid isPermaLink="true">https://zenn.dev/vim_jp/articles/527fe9cea500c5</guid><pubDate>Thu, 04 Jul 2024 21:32:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LHE2quMn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ray.so%25E3%2582%2592Neovim%252FVim%25E3%2581%258B%25E3%2582%2589%25E5%25BF%25AB%25E9%2581%25A9%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ryoppippi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1YzllYzNiYzAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:vim-jp%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzNDU0MTQ1MTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryoppippi</dc:creator></item><item><title><![CDATA[drizzle schemaから型を作成し、特定のフィールドを選択・除外・追加する方法]]></title><description><![CDATA[この記事では、drizzle-zodを使ってスキーマから型を作成し、pickやomitを使って特定のフィールドを選択・除外したり、さらにフィールドを追加する方法について解説します。

 小学生にもわかる説明version

 データの型ってなぁに？
データの型（種類）というのは、情報がどんな形をしているかを決めるルールのことです。たとえば、数字か、文字か、メールアドレスか、みたいなことを決めます。

 特定のフィールド（情報の一部）だけを使う方法

 例: ジョンさんとそのプレゼント


基本の情報カード:


ジョンさんの情報カードには、次のようなことが書かれています：
ID: 1
名...]]></description><link>https://zenn.dev/keishi815/articles/7042d8dabea65d</link><guid isPermaLink="true">https://zenn.dev/keishi815/articles/7042d8dabea65d</guid><pubDate>Thu, 04 Jul 2024 14:35:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Zb0OVbCw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:drizzle%2520schema%25E3%2581%258B%25E3%2582%2589%25E5%259E%258B%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2580%2581%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E9%2581%25B8%25E6%258A%259E%25E3%2583%25BB%25E9%2599%25A4%25E5%25A4%2596%25E3%2583%25BB%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25A3%25E3%2581%25A1%25E3%2583%25BC%25E3%2581%25AEtech%2520blog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2Z0anpKTGlDbGVGbUt3UXJhMjhUWEwwZEx6cjM2UDlKai1oRDJPVjByM1c1ZkxfR1Y9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いっちーのtech blog</dc:creator></item><item><title><![CDATA[Next.js　revalidatePathを簡単にわかりやすく解説]]></title><description><![CDATA[
 導入
next.jsのサーバー側を設定しているときに、revalidateが出てきます。この記事は、「revalidatePathって何？」、「revalidateを日本語にすると再検証と出てきたけど、意味が分からない」という人に向けて書きました。revalidatePathについて理解しましょう。

 revalidatePathとは
revalidatePathは、指定されたpathのcacheにデータを入れなおす。

 引数
revalidatePath(path:string,type?:'page'|'layout');
path:revalidateつまり、cacheにデ...]]></description><link>https://zenn.dev/maiamitorio/articles/547b7bcc2ae41c</link><guid isPermaLink="true">https://zenn.dev/maiamitorio/articles/547b7bcc2ae41c</guid><pubDate>Thu, 04 Jul 2024 12:07:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U1p4l6lO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2580%2580revalidatePath%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2582%258F%25E3%2581%258B%25E3%2582%258A%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maiamitorio%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwZmEwOTA0ZTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maiamitorio</dc:creator></item><item><title><![CDATA[SaaS企業の成長を支えるバックエンドの裏側で登壇してきました]]></title><description><![CDATA[こんにちは、JicooでCTOをしている小林です。
2024年6月25日に開催されたSaaS提供企業4社合同のバックエンド勉強会で登壇してきました。
https://pick.connpass.com/event/320729/
最近リリースした公開APIに関する技術について発表する機会を頂けて大変ありがたかったです。
https://x.com/feel_sooo_baaad/status/1805554316486525291
またご来場いただいた皆様、共同開催していただいたIVRyさん、スペースマーケットさん、Pickさん、ありがとうございました。

 登壇内容
発表内容としてはA...]]></description><link>https://zenn.dev/jicoo/articles/73afb8d595b1d3</link><guid isPermaLink="true">https://zenn.dev/jicoo/articles/73afb8d595b1d3</guid><pubDate>Thu, 04 Jul 2024 05:05:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nRWXg150--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SaaS%25E4%25BC%2581%25E6%25A5%25AD%25E3%2581%25AE%25E6%2588%2590%25E9%2595%25B7%25E3%2582%2592%25E6%2594%25AF%25E3%2581%2588%25E3%2582%258B%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E8%25A3%258F%25E5%2581%25B4%25E3%2581%25A7%25E7%2599%25BB%25E5%25A3%2587%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Haruhiko%2520kobayashi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExODMwNTlhODkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Jicoo%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2ZDY2ZWE2MjAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Haruhiko kobayashi</dc:creator></item><item><title><![CDATA[CopilotでTypescriptの型を元にダミーデータを生成するVSCodeの拡張機能を作ってみた]]></title><description><![CDATA[
 はじめに
VSCode の 7 月リリースにて、Language ModelとChat extensionsの API がリリースされました。
https://code.visualstudio.com/api/extension-guides/language-model
https://code.visualstudio.com/api/extension-guides/chat
これにより、Copilot の生成 AI を活かす拡張機能を実装可能となりました。これを機に Typescript の型を元にダミーデータを生成してくれる拡張機能とチャットボットを実装してます。
まずは...]]></description><link>https://zenn.dev/mylifeasjosh/articles/9338bbdc397a55</link><guid isPermaLink="true">https://zenn.dev/mylifeasjosh/articles/9338bbdc397a55</guid><pubDate>Thu, 04 Jul 2024 04:05:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ALUnot6Y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Copilot%25E3%2581%25A7Typescript%25E3%2581%25AE%25E5%259E%258B%25E3%2582%2592%25E5%2585%2583%25E3%2581%25AB%25E3%2583%2580%25E3%2583%259F%25E3%2583%25BC%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258BVSCode%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:josh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMzMyZjFhMDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>josh</dc:creator></item><item><title><![CDATA[TypeScriptのswitch文におけるcaseで複数条件を扱う方法]]></title><description><![CDATA[
 はじめに
TypeScriptやJavaScriptのswitch文で複数の条件を一つのcaseで扱いたい場合があります。
この記事では、その正しい方法と、よくある間違いについて解説します。

 背景
APIのあるレスポンスがstringでありつつ、想定する中身はほぼ定まっている(=ほぼenumやん)が、あくまでもstringではあるので例外対応も考慮しないといけないような実装をする必要があったとき。
テストを先に書いてから実装進めてたら、想定する結果にならず。
なんでだーと思ったら、間違った方法の後者の方で記載して、実装問題ないよなーと思いつつ、vscodeでもテスト実行時のコンパ...]]></description><link>https://zenn.dev/91works/articles/afe51e4e177daf</link><guid isPermaLink="true">https://zenn.dev/91works/articles/afe51e4e177daf</guid><pubDate>Wed, 03 Jul 2024 15:36:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZhInlKNU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEswitch%25E6%2596%2587%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258Bcase%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E6%259D%25A1%25E4%25BB%25B6%25E3%2582%2592%25E6%2589%25B1%25E3%2581%2586%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:YoshikiAgatsuma%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDA5N2JmNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:91works%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiMzIwNDk2ZTUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YoshikiAgatsuma</dc:creator></item><item><title><![CDATA[Next.jsのMiddlewareと友達になろう]]></title><description><![CDATA[
 導入
「middlewareって何？」、「重要なんだろうけど学ぶ気にならない」その人たちのための記事です。この記事を読めばmiddlewareと友達になれます。途中コードもありますが、必ず手を動かして、コードを写して読みましょう。「このコード使わなそう」と思っても書きましょう。いつか、そのコードと出会う日が来るでしょう。

 middlewareとは
httpのrequestが終わる前に実行される。requestの内容によって、responseやrequest,response headersを修正する。middlewareは、cacheされる前、routeがマッチする前に実行される...]]></description><link>https://zenn.dev/maiamitorio/articles/992981cce5d194</link><guid isPermaLink="true">https://zenn.dev/maiamitorio/articles/992981cce5d194</guid><pubDate>Wed, 03 Jul 2024 12:25:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mms6vWKu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25AEMiddleware%25E3%2581%25A8%25E5%258F%258B%25E9%2581%2594%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maiamitorio%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwZmEwOTA0ZTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maiamitorio</dc:creator></item><item><title><![CDATA[【個人開発】エンジニアのインプット・アウトプットを加速させるサービス「PaPut（パプト）」β版をリリースしました！🎉]]></title><description><![CDATA[
 はじめに
こんにちは、mizukoです！
この度、エンジニアのためのインプット・アウトプットを加速させるサービス「PaPut（パプト）」のβ版をリリースしました！
新サービスについて、宣伝も兼ねて色々とアウトプットしていきたいと思います！

 自己紹介
改めて私が何者なのか、自己紹介させていただきます🙏

年齢

29歳


職歴

新卒1年間フリーの音楽奏者

その間独学でプログラミングを勉強


勉強して作ったアプリを元にエンジニアへ転職
25歳でフリーランスへ



普段はGo、Typescript（Node、React、Next.js）、AWSを軸にフルスタックのフリーランス...]]></description><link>https://zenn.dev/mizuko_dev/articles/b2c2844b9438ab</link><guid isPermaLink="true">https://zenn.dev/mizuko_dev/articles/b2c2844b9438ab</guid><pubDate>Wed, 03 Jul 2024 09:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dy577uQl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588%25E3%2583%25BB%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E5%258A%25A0%25E9%2580%259F%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2580%258CPaPut%25EF%25BC%2588%25E3%2583%2591%25E3%2583%2597%25E3%2583%2588%25EF%25BC%2589%25E3%2580%258D%25CE%25B2%25E7%2589%2588%25E3%2582%2592%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljOGMwOTFlZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuko</dc:creator></item><item><title><![CDATA[Reactプロジェクトで main.jsx から main.tsx へ移行]]></title><description><![CDATA[
 ReactプロジェクトでTypeScriptへの移行時の注意点
ReactプロジェクトをJavaScriptからTypeScriptに移行する際、main.jsxからmain.tsxへのファイル名変更だけでなく、いくつかの重要なステップが必要です。以下に、移行プロセス中に遭遇する可能性のある一般的なエラーとその解決策を紹介します。

 エラーメッセージ
[vite] Pre-transform error: Failed to load url /src/main.jsx (resolved id: /src/main.jsx). Does the file exist? GET h...]]></description><link>https://zenn.dev/souomou/articles/ec6e884021be80</link><guid isPermaLink="true">https://zenn.dev/souomou/articles/ec6e884021be80</guid><pubDate>Wed, 03 Jul 2024 08:55:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m6XkQjS1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25A7%2520main.jsx%2520%25E3%2581%258B%25E3%2582%2589%2520main.tsx%2520%25E3%2581%25B8%25E7%25A7%25BB%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:MAR%2520%25E3%2581%25BE%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGUwZWQ4N2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>MAR まー</dc:creator></item><item><title><![CDATA[名著「Javaによる関数型プログラミング」のStrategyパターンをTypeScriptで表現してみた。]]></title><description><![CDATA[
 初めに
Strategyパターンは英語で"戦略"を意味する言葉になります。
事前に"戦略"を定義して状況に応じて既存のコードを変更することなく
"戦略"を切り替えることができるデザインパターンになります。
※Strategyパターンの基本は こちらの記事 をご参照ください。
通常のオブジェクト指向デザインパターンではインターフェースを定義して
継承先の具象クラスで戦略を定義するのが一般的ですが、
関数型プログラムを利用するとわざわざインターフェースや
具象クラスを定義せずにすっきり書くことができます。
本項は　名著「Javaによる関数型プログラミング」で紹介されている
Strateg...]]></description><link>https://zenn.dev/xxhotaruxx19/articles/b3c684ec3b3208</link><guid isPermaLink="true">https://zenn.dev/xxhotaruxx19/articles/b3c684ec3b3208</guid><pubDate>Wed, 03 Jul 2024 08:45:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--reBf0qz0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2590%258D%25E8%2591%2597%25E3%2580%258CJava%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2580%258D%25E3%2581%25AEStrategy%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%2592TypeScript%25E3%2581%25A7%25E8%25A1%25A8%25E7%258F%25BE%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AB%25E3%2582%2583%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWdDdld1N0I2UFpYdkthdVJCTEZCanpJRExsc2h5ZWdoWlJOTUFYazcwcjRpZU02bz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>にゃし</dc:creator></item><item><title><![CDATA[Nodejsで2Way-SQLの自作ライブラリを試してみた]]></title><description><![CDATA[
 1. 2Way-SQLとは
2Way-SQLは、動的なSQLを生成するためのテンプレート言語です。通常のSQLに特殊なコメントを追加することで、条件に応じてSQLの一部を変更したり、パラメータを動的に設定したりすることができます。これにより、開発者はJavaなどのプログラミング言語でSQLを組み立てる複雑さを避けつつ、柔軟なSQLクエリを作成できます。

 2. 内容
このプロジェクトでは、自作したSQLQueryBuilderクラスを使用して、2Way-SQLテンプレートからSQLとパラメーターを生成しています。主な特徴は以下の通りです：

SQLQueryBuilderクラスが2...]]></description><link>https://zenn.dev/akabana/articles/d9eda18f0f9157</link><guid isPermaLink="true">https://zenn.dev/akabana/articles/d9eda18f0f9157</guid><pubDate>Wed, 03 Jul 2024 07:14:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6ezSTvRP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nodejs%25E3%2581%25A72Way-SQL%25E3%2581%25AE%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AKABANA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyMDYwZDMxYmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AKABANA</dc:creator></item></channel></rss>