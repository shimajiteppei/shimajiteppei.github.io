<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 25 May 2024 10:12:35 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Factory Methodパターン：インスタンス作成をサブクラスにまかせる]]></title><description><![CDATA[
 はじめに
GoFの23のデザインパターンがまとめられている「Java言語で学ぶデザインパターン入門」を読んでアウトプットとしてデザインパターンを1つずつ記事としてアウトプットしていきます。
原則的にJavaで実装コード例などを記述していきますが、気になったことや改善点、感想等ありましたらぜひコメントくださると嬉しいです！
23のパターン一覧はこちらから　※随時更新中
1.Iteratorパターン
2.Adapterパターン
3.Template Methodパターン
4.Factory Methodパターン
5.Singletonパターン
6.Prototypeパターン
7.Buil...]]></description><link>https://zenn.dev/sadaizin/articles/a41bd6f73c2d50</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/a41bd6f73c2d50</guid><pubDate>Sat, 25 May 2024 08:39:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IPkbJoWw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Factory%2520Method%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25EF%25BC%259A%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E4%25BD%259C%25E6%2588%2590%25E3%2582%2592%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25BE%25E3%2581%258B%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SADAIZIN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SADAIZIN</dc:creator></item><item><title><![CDATA[Java switch文のアロー演算子を用いた構文ついて]]></title><description><![CDATA[
 switch文でのアロー構文
switch文でアロー演算子を用いたコードを初めて見たのでメモとして残しておく。
アロー演算子「-&gt;」を使うことでswitch文の「：」と[break;]を省略することができる。
{}でブロックを作れば複数行の処理も書ける。
String　str = "B";
switch(str){
case "A" -&gt; System.out.println("A");
case "B" -&gt; System.out.println("B");
case "C" -&gt; {System.out.println("C");
　　　　　 System...]]></description><link>https://zenn.dev/sadaizin/articles/52eacf767b543d</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/52eacf767b543d</guid><pubDate>Sat, 25 May 2024 07:48:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7qJlZjro--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520switch%25E6%2596%2587%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E6%25A7%258B%25E6%2596%2587%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SADAIZIN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SADAIZIN</dc:creator></item><item><title><![CDATA[Javaクラスの基礎]]></title><description><![CDATA[
 概要
「Java SE 11 Programmer II (1Z0-816-JPN) 試験」の出題範囲「Javaの基礎」の自己学習メモになります

 final修飾子とstatic修飾子

 final修飾子



適用箇所
説明




クラス
final指定されたクラスを元に、サブクラスは作成できない


メソッド
final指定されたメソッドを元に、オーバーライドできない


変数
final指定された変数は、定数




 構文
クラスに適用
[アクセス修飾子] final class class名{ }
メソッドに適用
[アクセス修飾子] final 戻り値の型 メソッド名...]]></description><link>https://zenn.dev/greenwakame/articles/1749ecd5cff5ae</link><guid isPermaLink="true">https://zenn.dev/greenwakame/articles/1749ecd5cff5ae</guid><pubDate>Thu, 23 May 2024 14:55:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zo8b69cs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:greenwakame%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pmWkJvR1pwQS1NblhzT0d3UTdRRHhPcTd3QkpIQkFuRnVjcUZnMUh3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>greenwakame</dc:creator></item><item><title><![CDATA[エンジニアになる際に言語はどれが適切か？]]></title><description><![CDATA[いろいろな意見がありそうなテーマですが、
私はJavaを選択して正解だったというお話を簡単にしたいと思います。
言語に悩む人の参考になれば幸いです。

 Javaのシェア率が圧倒的
Javaは非常に多くのシステムで使われており改修案件が非常に多いです。
新規のプロジェクトで選択されることはあまりないのですが、改修案件が多いので初心者が参入しやすい案件が多いためおすすめです。

 言語シフトもしやすい
Javaで3年以上の開発経験であれば未経験でもPythonの案件OKです。などの案件もあるので最初からPythonをやっていなくてもよいのでは？という考えです。実際私も未経験で別言語の案件に...]]></description><link>https://zenn.dev/ysk_aup/articles/bd0413cbd007c1</link><guid isPermaLink="true">https://zenn.dev/ysk_aup/articles/bd0413cbd007c1</guid><pubDate>Thu, 23 May 2024 08:19:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K5YN4Kb0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AB%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AF%25E3%2581%25A9%25E3%2582%258C%25E3%2581%258C%25E9%2581%25A9%25E5%2588%2587%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25B3%25A2%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwMTZlZTFjNjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>賢一</dc:creator></item><item><title><![CDATA[OSSのデザインパターン解説シリーズ：Iteratorパターンの活用と悪いコード例]]></title><description><![CDATA[
 1. はじめに
このシリーズでは、オープンソースソフトウェア（OSS）のソースコードを通じて、GoF（Gang of Four）デザインパターンの活用方法を解説します。
特に悪い例と良い例を見ることで、デザインパターンのメリットを考えていきます。
なお、OSSやデザインパターンの詳しい解説は書きません。
最小限のコード例と解説を書いていきます。

 2. Iteratorパターンとは
Iteratorパターンとは、「"ものの集まり"の要素を全てたどること」を抽象化することです。
Javaの場合、"ものの集まり"に当たるクラスは以下が挙げられます：

配列
ArrayList
Link...]]></description><link>https://zenn.dev/neko_student/articles/5e9849afcdef0d</link><guid isPermaLink="true">https://zenn.dev/neko_student/articles/5e9849afcdef0d</guid><pubDate>Wed, 22 May 2024 23:58:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g25kD5NI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA%25EF%25BC%259AIterator%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%25A8%25E6%2582%25AA%25E3%2581%2584%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:neko%2520student%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2ZnQzBseWZlcFJjSXIwMUJqQnFxVWZsZm5RZ1lNUUN0d1N6blA5VE8tTUE0TEtjQlAzdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>neko student</dc:creator></item><item><title><![CDATA[エラーを起こしてバグを減らそう]]></title><description><![CDATA[
 はじめに
みなさんはエラーは好きですか？
大抵の人は嫌いなのではないでしょうか。
プログラミングをしていると多くのエラーが発生し、修正に苦労します。
そもそもエラーとは何なのでしょうか？
何の為にあるのか考えたことはあるでしょうか？
この記事でエラーの本質と向き合ってみましょう。
※JavaやPHPでは言語仕様上「エラー」と「例外」は明確に区分されますが、ここでは話の便宜上、「例外」の事も「エラー」と表現する場合があります。

 エラーは安全装置
たとえば、崖に沿った道路を走っていたら、ガードレールにぶつかって車が凹んでしまったとします。
じゃあ、ガードレールなんてない方が良かったの...]]></description><link>https://zenn.dev/k_tabuchi/articles/9fa03edd956f8a</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/9fa03edd956f8a</guid><pubDate>Wed, 22 May 2024 16:30:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D3by958Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E8%25B5%25B7%25E3%2581%2593%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2590%25E3%2582%25B0%25E3%2582%2592%25E6%25B8%259B%25E3%2582%2589%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[Internet Explorer EOL - Chrome Enterpriseユーザーにとっての意味]]></title><description><![CDATA[
2022年6月、Microsoftは長寿ブラウザであるInternet Explorerのメインストリームサポートを終了する意向であり、Windows 11上のIE11デスクトップアプリケーションは無効になる。
しかし、一部のアプリケーション、特にJavaアプレットに基づくアプリケーションは、Internet Explorerでのみ確実に動作し、Chrome Enterpriseユーザーは、Googleのレガシーブラウザサポー（LBS）を介してこのコンテンツにアクセスします。
IEの無効化は、これらのアプリケーションへのアクセスを維持する必要がある企業のワークフローに大きな変化をもたら...]]></description><link>https://zenn.dev/leaning_tech_jp/articles/2c220815d74f7e</link><guid isPermaLink="true">https://zenn.dev/leaning_tech_jp/articles/2c220815d74f7e</guid><pubDate>Wed, 22 May 2024 14:25:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7YcD0HSG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Internet%2520Explorer%2520EOL%2520-%2520Chrome%2520Enterprise%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25A8%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AE%25E6%2584%258F%25E5%2591%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leaning%2520Technologi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MmNjYWUyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leaning Technologies Japan (リーニングテクノロジー)</dc:creator></item><item><title><![CDATA[SpringでDIした実装クラスの実行順序を制御する]]></title><description><![CDATA[https://s-kugel.com/blog/controlling-execution-order-spring
]]></description><link>https://zenn.dev/silber_kugel/articles/6fb638897fc737</link><guid isPermaLink="true">https://zenn.dev/silber_kugel/articles/6fb638897fc737</guid><pubDate>Tue, 21 May 2024 15:48:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MNE689Bf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2581%25A7DI%25E3%2581%2597%25E3%2581%259F%25E5%25AE%259F%25E8%25A3%2585%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E9%25A0%2586%25E5%25BA%258F%25E3%2582%2592%25E5%2588%25B6%25E5%25BE%25A1%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:i-zacky%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3EwcVpjcWE1eElrZkhTVlEySDdSQnU4cEZUdmZGMEJ5RXNfSVQxPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>i-zacky</dc:creator></item><item><title><![CDATA[JavaBeanを軽くまとめました。]]></title><description><![CDATA[
 JavaBeanとは?
Java Beanは再利用可能なソフトウェアコンポーネントを意味します。
Java Beansは特別な要求事項を満たすJavaオブジェクトであり、主にグラフィックユーザーインターフェース(GUI)で使用されたり、エンタープライズアプリケーションでデータモデルとして活用されています。
簡単に言うと、特定の情報(id, password, name, job...)などを持っているクラスを表現する一つの規則であり、データを表現するための目的を持っています。
この規則を持つクラスをJava Beanと言います。

 JavaBeanの規約

クラスをpublicで指...]]></description><link>https://zenn.dev/hyung8/articles/b0743d6f872f98</link><guid isPermaLink="true">https://zenn.dev/hyung8/articles/b0743d6f872f98</guid><pubDate>Tue, 21 May 2024 06:57:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8wyzjIKh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaBean%25E3%2582%2592%25E8%25BB%25BD%25E3%2581%258F%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hyung8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3Mjk5MDVhOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hyung8</dc:creator></item><item><title><![CDATA[静的解析ライブラリのSpoonを使って、コード規約を遵守させる]]></title><description><![CDATA[
 概要
Javaの静的解析ライブラリであるSpoonを使い、コード規約に違反するコードを検知するテストを書きました。パイプラインでのテスト実行時にこれらのテストを実行することで、規約に違反したコードがコードベースにマージされることを防ぐことができます。
今回は下記のようなコード規約が存在すると仮定し、規約違反するコードを検知するためのテストを実装していきます。

メソッドの長さが50行を超える場合は分割すること
フィールド数が20を超える場合はクラスを分割すること
値オブジェクトのクラス名はチームで運用しているユビキタス言語の一覧にあるものを使うこと（ない場合はユビキタス言語のリストを...]]></description><link>https://zenn.dev/hsaitooo/articles/spoon-code-analysis</link><guid isPermaLink="true">https://zenn.dev/hsaitooo/articles/spoon-code-analysis</guid><pubDate>Mon, 20 May 2024 13:26:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZcZk1Xy3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%2599%25E7%259A%2584%25E8%25A7%25A3%25E6%259E%2590%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AESpoon%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E8%25A6%258F%25E7%25B4%2584%25E3%2582%2592%25E9%2581%25B5%25E5%25AE%2588%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:saito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5ZTM0M2Y5MDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saito</dc:creator></item><item><title><![CDATA[【Java】クラス解説38・ローカルクラス]]></title><description><![CDATA[
 ローカルクラス
ローカルクラスとは、内部クラスのうち、ブロック内に定義されるクラスです。主にメソッドブロック内で定義されることが多いです。
ローカルクラスは、以下の種類に分けられます。

通常クラス
列挙型
レコードクラス

今回は、通常クラスについて解説します。
また、ローカルクラスにprivate、protected及びprivateを付与することはできません。

 ローカルクラスをインスタンス化するコード例
public class Main {
    public static void main(String... args) {
        Fuzi fz = ne...]]></description><link>https://zenn.dev/goriki/articles/076-local-class</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/076-local-class</guid><pubDate>Mon, 20 May 2024 07:29:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--thzCZ_0z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC38%25E3%2583%25BB%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[キャッシュを使用して、二重ループのパフォーマンスを改善した話　Java]]></title><description><![CDATA[
 問題点：二重ループによる時間計算量の増加
次のように二つのリスト間で一致する要素を見つけるために二重ループを使用したい。
    for (int i : list1) {
        for (int j : list2) {
            if (i == j) {
                System.out.println("Match found: " + i);
            }
        }
    }
このコードではlist1の各要素に対して、list2の全ての要素を比較しているため、時間計算量はO(n^2)となる。この方法はリス...]]></description><link>https://zenn.dev/tech_mico/articles/6c9f12751da82d</link><guid isPermaLink="true">https://zenn.dev/tech_mico/articles/6c9f12751da82d</guid><pubDate>Sun, 19 May 2024 06:19:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KlTbxjJB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581%25E4%25BA%258C%25E9%2587%258D%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E6%2594%25B9%25E5%2596%2584%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%25E3%2580%2580Java%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techmico%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxMTBhYmRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techmico</dc:creator></item><item><title><![CDATA[CheerpJ 3.0rc1を発表：テストと改善にご協力ください！]]></title><description><![CDATA[
本日、最初のCheerpJ 3.0リリース候補、バージョン3.0rc1のリリースを発表できることを嬉しく思います。
過去何年もの間、私たちのチームは、Javaアプリケーション、アプレット、ライブラリをモダンブラウザ上で実行するためのソリューションであるCheerpJのために、全く新しいアーキテクチャの開発に精力的に取り組んできました。

 主なハイライト
世界中の何百もの組織による長年のCheerpJ 2.xの実世界での利用を活用し、我々のブラウザベースのx86仮想マシンであるCheerpXの開発から学んだ多くの教訓を活用して、我々はCheerpJの全面的な書き直しを行いました。
・さ...]]></description><link>https://zenn.dev/leaning_tech_jp/articles/c475f91ab7d087</link><guid isPermaLink="true">https://zenn.dev/leaning_tech_jp/articles/c475f91ab7d087</guid><pubDate>Fri, 17 May 2024 12:23:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kAdc9ywS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CheerpJ%25203.0rc1%25E3%2582%2592%25E7%2599%25BA%25E8%25A1%25A8%25EF%25BC%259A%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A8%25E6%2594%25B9%25E5%2596%2584%25E3%2581%25AB%25E3%2581%2594%25E5%258D%2594%25E5%258A%259B%25E3%2581%258F%25E3%2581%25A0%25E3%2581%2595%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leaning%2520Technologi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MmNjYWUyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leaning Technologies Japan (リーニングテクノロジー)</dc:creator></item><item><title><![CDATA[デバッグのコツ]]></title><description><![CDATA[
 比較する。
現状、期待通りに動作しているものとの比較を行うことで、異常の原因を探す手法です。
プログラミングの他、Linuxでのサーバ構築で威力を発揮します。
ただし、人間が目で確認するだけでは細かい違いを調べるのは難しいため、差分検出ツールを使います。
windowsであればwinmerge、macであればCompareMergeがオススメ。
この二つはフォルダ比較という機能を備えていて、同じディレクトリ構造であれば数百個のファイルでも一括で差分を洗い出すことができます。

CompareMerge
目で間違い探しをしていては抜け漏れが発生します。間違えない人でも無駄に疲れます。
...]]></description><link>https://zenn.dev/k_tabuchi/articles/02176795753152</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/02176795753152</guid><pubDate>Thu, 16 May 2024 13:06:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WNQ5X7SP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[Java の標準 URI ライブラリが RFC 3986 に対応していないので、自作ライブラリで対応する羽目になった話]]></title><description><![CDATA[
 はじめに
Java 開発者にとっては周知の事実かもしれませんが、Java の標準 URI ライブラリ (java.net.URI クラス) は未だに古い仕様である RFC 2396 をベースに実装されており、今日のデファクトスタンダードである RFC 3986 に完全準拠していません。RFC 6749 (The OAuth 2.0 Authorization Framework) や他の規格・仕様によって RFC 3986 が参照されているにも関わらず標準ライブラリがそれに対応していないとなると、開発者としては不足部分を何らかの手段で補完せざるを得なくなります。かく言う私も自社製品の...]]></description><link>https://zenn.dev/authlete/articles/025acd196b78a9</link><guid isPermaLink="true">https://zenn.dev/authlete/articles/025acd196b78a9</guid><pubDate>Thu, 16 May 2024 10:19:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mssPNhht--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2581%25AE%25E6%25A8%2599%25E6%25BA%2596%2520URI%2520%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%258C%2520RFC%25203986%2520%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25A7%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2599%25E3%2582%258B%25E7%25BE%25BD%25E7%259B%25AE%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hidebike712%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5ZDcwYTM5MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Authlete%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNzY2NmMyYzYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hidebike712</dc:creator></item><item><title><![CDATA[【Java】クラス解説37・内部クラス]]></title><description><![CDATA[
 ネストクラス
ネストクラスとは、クラスの中に定義されたクラスです。
ネストクラスは、以下の種類に分けられます。

内部クラス
ローカルクラス
匿名クラス
スタティックネステッドクラス


 内部クラス
内部クラスは、外部クラスの直下で作成されたクラスであり、外部クラスと密接な関係にあります。


 外部クラスから内部クラスのインスタンスを生成し内部クラスのメソッドにアクセスするコード例
public class Main {
    public static void main(String... args) {
        // 外部クラスのインスタンスを生成
       ...]]></description><link>https://zenn.dev/goriki/articles/075-inner-classe</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/075-inner-classe</guid><pubDate>Thu, 16 May 2024 06:54:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gLdR-pf_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC37%25E3%2583%25BB%25E5%2586%2585%25E9%2583%25A8%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(後半)]]></title><description><![CDATA[
 前回の記事から
今回は2つの記事に分けることになりました。
こちらはデザインパターン備忘録(前半)からの続きになります。

 Chain of Responsibility（責任の連鎖）パターン

 メリット

柔軟なリクエスト処理

リクエストを処理するオブジェクトを動的に変更できるため、柔軟なリクエスト処理が可能です。

コードの分離

リクエストを処理する各オブジェクトを独立して設計できるため、責任を分離できます。

可読性と保守性の向上

処理ロジックをチェーン内の各オブジェクトに分散させることで、コードの可読性と保守性が向上します。

新しい処理の追加が容易

新しい処理を...]]></description><link>https://zenn.dev/kou_kawa/articles/36-design-pattern-02</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/36-design-pattern-02</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MQBCehL4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%25BE%258C%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(前半)]]></title><description><![CDATA[
 はじめに
ChatGPT-4oが使用できるようになりました。私も早速使ってみましたが、以前のバージョンに比べてスピードと精度の向上を実感しました。これを機に、デザインパターンについての記事を書いてみることにしました。この記事を通じて勉強にもなり、後で見返すための資料としても活用できるようにしたいと思います。サンプルコードには、Java、TypeScript、Pythonのプログラミング言語を使用しています。
今回は記事を2つに分けることになりました。
後半の記事はこちら

 デザインパターン一覧

生成に関するパターン

Abstract Factory（アブストラクトファクトリー）...]]></description><link>https://zenn.dev/kou_kawa/articles/35-design-pattern-01</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/35-design-pattern-01</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ihl2SnhW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%2589%258D%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item><item><title><![CDATA[Spring Bootを使ってTodo Appを作ってみる]]></title><description><![CDATA[Spring Bootを使ってTodo Appを作ってみる。
基本的なCRUD機能を持った簡単なAppになる。

 1. postgreSQLの準備
インストールについては、こちらの方の記事を参考にしました。
PostgreSQL を Windows にインストールするには
インストールができたら、Todoアプリで使用するDBを作る。
「SQL Shell(psql)」を開いて、ユーザーを作成する。

ユーザーが作成されたことを確認する。

データベースを作成する。

作成したデータベースに、作成したユーザーで接続する。

接続ができたので、テーブルを作成する。

作成したテーブルを確認...]]></description><link>https://zenn.dev/heylee/articles/3684a4fd6e3a69</link><guid isPermaLink="true">https://zenn.dev/heylee/articles/3684a4fd6e3a69</guid><pubDate>Wed, 15 May 2024 13:00:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_yiJiGQ8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Todo%2520App%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzZTlhOWRhZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rin</dc:creator></item><item><title><![CDATA[入門書と実際の業務の違いとは。]]></title><description><![CDATA[
 はじめに
プログラミングを覚えるにあたって、皆さんはどのように勉強してきたでしょうか？
私は自費で入門書を買って勉強したり、ドットインストールという動画サイトに課金して勉強していました。
最近はYoutubeの動画配信で勉強することも多いです。
プログラミングスクールに通ったり、専門学校で習う方もいるでしょう。
どんな教材であれ、プログラマーとして採用された皆さんは何かしらの言語を多少なりとも身につけ、教材どおりのプログラムを動かすことができるようになっていることと思います。
さて、数週間の研修期間を終えたあなたは出向の面談に受かり、ついに業務案件に携わることになります。
そこであな...]]></description><link>https://zenn.dev/k_tabuchi/articles/c97402a43fc9fa</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/c97402a43fc9fa</guid><pubDate>Wed, 15 May 2024 09:58:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yr1oFGzR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E9%2596%2580%25E6%259B%25B8%25E3%2581%25A8%25E5%25AE%259F%25E9%259A%259B%25E3%2581%25AE%25E6%25A5%25AD%25E5%258B%2599%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E3%2581%25AF%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item></channel></rss>