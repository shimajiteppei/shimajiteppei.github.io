<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 23 Jun 2024 07:05:34 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[SOLIDの原則を心で理解する - オープン/クローズドの原則]]></title><description><![CDATA[一つの記事で始めたSOLID原則の探求を続け、今回は2番目の原則であるオープン/クローズドの原則について説明します。
この概念は、1988年にバートランド・メイヤーが彼の著書「オブジェクト指向入門」で表現したように、多くの著者によってオブジェクト指向プログラミングの最も重要な原則の一つと考えられています。
モジュール（クラスや関数など）が「拡張には開かれているが、修正には閉じている」べきだと述べています。
!
拡張に対して開かれている: モジュールの機能を追加したり、改善したりすることができる。
修正に対して閉じている: 既存のコードを変更せずに、新しい機能を追加できる。

つまり、新し...]]></description><link>https://zenn.dev/andmorefine/articles/837d7c90f246ee</link><guid isPermaLink="true">https://zenn.dev/andmorefine/articles/837d7c90f246ee</guid><pubDate>Sun, 23 Jun 2024 06:58:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VE7UebQU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SOLID%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%25E3%2582%2592%25E5%25BF%2583%25E3%2581%25A7%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2520-%2520%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25B3%252F%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25BA%25E3%2583%2589%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:andmorefine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d4SWhtd3ZlckNiV1hqRkRZWk9xOEJJSGsyMHFYN3ZqN3lrS0NQd1QwPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>andmorefine</dc:creator></item><item><title><![CDATA[cursorでreact/typescriptにおけるデバック実行環境構築のメモ]]></title><description><![CDATA[
 目的
現在reactの学習をしているのですが、
cursorでreact/typescriptのデバック環境の構築にかなり手間取ってしまったため
自分用の証跡になります。

 方法

 ①ts-nodeでCLI実行
本項とは直接関係ないですが、
とりあえずコマンドベースでサクッと動作確認したい時のために

 ②Reactのデバック実行(Google Chrome)
create-react-appでReactのテンプレートを作成し、
cursor上でブレークポイントを使用してデバック実行ができるようにします。
どちらも試してはいないですがvscodeでも可能だと思います。

 前提条...]]></description><link>https://zenn.dev/xxhotaruxx19/articles/f2a88ee187f264</link><guid isPermaLink="true">https://zenn.dev/xxhotaruxx19/articles/f2a88ee187f264</guid><pubDate>Sun, 23 Jun 2024 05:44:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--y1FbaH7a--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cursor%25E3%2581%25A7react%252Ftypescript%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AB%25E3%2582%2583%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWdDdld1N0I2UFpYdkthdVJCTEZCanpJRExsc2h5ZWdoWlJOTUFYazcwcjRpZU02bz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>にゃし</dc:creator></item><item><title><![CDATA[Mac OSでファイル名の濁点が一文字として扱われる場合の対処法（JavaScript編）]]></title><description><![CDATA[
 はじめに
先日、JavaScriptでファイルアップロード処理を実装していたところ、ファイル名が以下のように表示されてしまいました。
アッフ゜ ロート゛ したファイル.csv
元のファイル名は「アップロードしたファイル.csv」だったのですが、濁点、半濁点が一文字として扱われている状態です。今回はこちらをJavaScript(TypeScript)で解消する方法をまとめました。

 前提条件
・Mac OSのPCを使っている
・アップロードしたファイルはuploadedFileで保持している

 解消方法
uploadedFile.name.normalize('NFC');

//...]]></description><link>https://zenn.dev/hrtr/articles/6a238878bfd08e</link><guid isPermaLink="true">https://zenn.dev/hrtr/articles/6a238878bfd08e</guid><pubDate>Sun, 23 Jun 2024 05:15:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nNNpC7pf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mac%2520OS%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E5%2590%258D%25E3%2581%25AE%25E6%25BF%2581%25E7%2582%25B9%25E3%2581%258C%25E4%25B8%2580%25E6%2596%2587%25E5%25AD%2597%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%2589%25B1%25E3%2582%258F%25E3%2582%258C%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%25EF%25BC%2588JavaScript%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HRTR-86%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M3MzMxZGQyNmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HRTR-86</dc:creator></item><item><title><![CDATA[【FetchAPI】React/TypeScriptでGET,POST,PUT,DELETEをする【C#】]]></title><description><![CDATA[
 はじめに
Reactを利用して、APIをGET,POST,PUT,DELETEする方法をまとめます。
Axiosは比較的多く情報があったのですが、Fetch APIは日本語であまりなかったので、まとめておきます。
本記事では、【C#】SQL Serverと.NETのAPIをDockerで動かす方法で作成したAPIを使うことがあります。
良ければこちらもご覧ください。

 プロジェクトを作る
今回は、Viteを使ってプロジェクトを作りました。

以下を実行

npm create vite

以下を選択
Reactと、TypeScriptを選択します。


 GET
まず、基本のGet...]]></description><link>https://zenn.dev/haru330/articles/859d6a7982d06d</link><guid isPermaLink="true">https://zenn.dev/haru330/articles/859d6a7982d06d</guid><pubDate>Sun, 23 Jun 2024 05:00:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YPMKa_Sw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590FetchAPI%25E3%2580%2591React%252FTypeScript%25E3%2581%25A7GET%252CPOST%252CPUT%252CDELETE%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590C%2523%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3NzQyOWFkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はる</dc:creator></item><item><title><![CDATA[型の変換【TypeScript】]]></title><description><![CDATA[
 はじめに
実務でTypeScriptの型の変換についてわからないことがあり調べたので、
備忘録として残しておきます。

 TypeScript においての型の変換
TypeScript において、型の変換を指す用語はいくつかあります。
それらを一つずつ整理していきたいと思います。

 1.型変換(Type Conversion)
型変換は、ある型の値を別の型の値に変換することです。例えば、文字列を数値に変換することなどが含まれます。
let str: string = "123";
let num: number = Number(str);

 2.型キャスト(Type Casti...]]></description><link>https://zenn.dev/ao_5585/articles/a76c97c811afeb</link><guid isPermaLink="true">https://zenn.dev/ao_5585/articles/a76c97c811afeb</guid><pubDate>Sun, 23 Jun 2024 01:33:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3NkZ5eXM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E3%2581%25AE%25E5%25A4%2589%25E6%258F%259B%25E3%2580%2590TypeScript%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5Njc1MTg2YzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あお</dc:creator></item><item><title><![CDATA[[!Mozi-VIDEA!] Horizont: Egy amerikai eposz (2024) Teljes Film Online]]></title><description><![CDATA[Mozi Filmek | Horizont: Egy amerikai eposz Teljes Film Magyarul 2024 Online Videa - Indavideo ☑ Horizont: Egy amerikai eposz (2024) Filmek Online 4K - Ultra HD
Horizont: Egy amerikai eposz « Teljes Film Magyarul Online 2024 /Filmek Magyarul – Online Magyarul // Teljes Film Ingyen
▷▷ Teljes Film: ...]]></description><link>https://zenn.dev/ernamisre/articles/6346b7cc0238bd</link><guid isPermaLink="true">https://zenn.dev/ernamisre/articles/6346b7cc0238bd</guid><pubDate>Sat, 22 Jun 2024 21:38:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xem_NMch--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%2521Mozi-VIDEA%2521%255D%2520Horizont%253A%2520Egy%2520amerikai%2520eposz%2520%25282024%2529%2520Teljes...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:erna%2520misaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSW1qQ1J4bDJKNTVlMXJYbjQzR3Nrc2pKU2VTVFBQRktCWkNkUjBEV3F3YWhBUl9BPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>erna misaki</dc:creator></item><item><title><![CDATA[TypeScriptのclassのinstance methodをarrow functionで書くと困ることになるかもしれない話]]></title><description><![CDATA[
 はじめに
TypeScriptではclassが使えて、classにはmethodが定義できる。
そのmethodをarrow functionで書くと、テストで困ったことになるかもしれない。

 TL;DR;
instance methodをarrow functionで書くと、prototypeに関数が作られずインスタンスごとに異なる参照で関数が作られてしまい、インスタンスの同一性を確認するテストが落ちる。
この記事にもそんなことが書いてあった。
https://dev.to/sakhnyuk/why-you-should-avoid-using-arrow-functions-t...]]></description><link>https://zenn.dev/yamazaki_sensei/articles/3fde7a161f2946</link><guid isPermaLink="true">https://zenn.dev/yamazaki_sensei/articles/3fde7a161f2946</guid><pubDate>Sat, 22 Jun 2024 15:30:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fiBXGRP7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEclass%25E3%2581%25AEinstance%2520method%25E3%2582%2592arrow%2520function%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25A8%25E5%259B%25B0%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25AB%25E3%2581%25AA...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiraku%2520Ohno%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjYTVlYmY2NTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiraku Ohno</dc:creator></item><item><title><![CDATA[Hono Conference 2024参戦レポート]]></title><description><![CDATA[こんにちは、あさひです。
今回はナウでイケてると話題？の Hono のカンファレンスに潜入してきましたので雰囲気やどんな流れだったかをまとめようと思います。

 Hono🔥 って？

Hono - means flame🔥 in Japanese - is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify,...]]></description><link>https://zenn.dev/gemcook/articles/hono-conference-report</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/hono-conference-report</guid><pubDate>Sat, 22 Jun 2024 14:05:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AIipY00t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%2520Conference%25202024%25E5%258F%2582%25E6%2588%25A6%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2582%25E3%2581%2595%25E3%2581%25B2%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhMDQyOWUwODUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あさひ</dc:creator></item><item><title><![CDATA[個人的TypeScriipt 5.5 まとめ]]></title><description><![CDATA[TypeScript 5.5がアナウンスされました。
https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/
個人的にマイナーの割にビックニュースが多かったのでまとめました

 Type Predicatesの推論
5.5からはガード関数の戻り値が type predicates として推論されるようになりました
// function isBirdReal(bird: Bird | undefined): bird is Bird
function isBirdReal(bird: Bird | unde...]]></description><link>https://zenn.dev/holy_web_dev/articles/877a2b66808bce</link><guid isPermaLink="true">https://zenn.dev/holy_web_dev/articles/877a2b66808bce</guid><pubDate>Sat, 22 Jun 2024 11:18:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wohDyWJ_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2580%258B%25E4%25BA%25BA%25E7%259A%2584TypeScriipt%25205.5%2520%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2597%25E3%2583%25AA%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmNThjMTEzNzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>プリン</dc:creator></item><item><title><![CDATA[AppRouter+Auth.js v5系でGoogle認証するサンプル]]></title><description><![CDATA[AppRouter + Auth.js v5系 でGoogle認証を実装したので、備忘録も兼ねてミニマムなサンプルを作って記事にしておく。

 サンプルコード

googleの認証情報は以下の記事を参考に設定する。


 v5で便利になったとや書き方が変わるとこ抜粋

 Universal auth()

今まではgetServerSession, getSession, withAuth, getToken, useSession などを使い分けていたが、これらがauthメソッドにまとめられた。

 Simplified setup

今まではproviderにCLIENT_IDやSE...]]></description><link>https://zenn.dev/thim/articles/app-router-google-auth-sample</link><guid isPermaLink="true">https://zenn.dev/thim/articles/app-router-google-auth-sample</guid><pubDate>Sat, 22 Jun 2024 09:15:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KKmo0QXu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AppRouter%252BAuth.js%2520v5%25E7%25B3%25BB%25E3%2581%25A7Google%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:himi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOGI5ZTQxMTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>himi</dc:creator></item><item><title><![CDATA[Playwright でタイマーモックが使えるようになる]]></title><description><![CDATA[どうもこんにちは、@nzws です。（ちょうど気になったネタを見つけたので Zenn 初投稿です）
今回は記事執筆時点で次バージョンの Playwright v1.45 で追加される予定である Clock API についてお試ししたことを書いていきます。
https://playwright.dev/docs/next/clock
https://playwright.dev/docs/next/api/class-clock

 背景
背景について簡単に説明すると、タイマーモックは自動テスト内で時間を操り、コード内で時間に依存するような機能を上手く短時間でテストさせるための機能です。
...]]></description><link>https://zenn.dev/nzws/articles/introduce-playwright-clock-api</link><guid isPermaLink="true">https://zenn.dev/nzws/articles/introduce-playwright-clock-api</guid><pubDate>Sat, 22 Jun 2024 04:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V8kgX94W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Playwright%2520%25E3%2581%25A7%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259E%25E3%2583%25BC%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2581%258C%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nzws%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjODIxODM4NTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nzws</dc:creator></item><item><title><![CDATA[AWS CDKのコード変更時にリアルタイムで構成図のプレビューを表示する]]></title><description><![CDATA[
 TL;DR

プレビュー対象はcdk synthで出力されたCloudFormationのテンプレートファイル
構成図はVSCode拡張機能aws toolkitのApplication Composerでプレビュー表示(変更検知機能利用)

nodemonを用いて、プレビューを開いた状態でtsファイル保存時にcdk synthを実行することで再表示させる

nodemon -e ts --ignore cdk.out --exec 'cdk synth'


情報元: aws-summit-2024-iac-booth-demo/realtime-draw-diagram at m...]]></description><link>https://zenn.dev/nondescript/articles/72aabaaeda4e39</link><guid isPermaLink="true">https://zenn.dev/nondescript/articles/72aabaaeda4e39</guid><pubDate>Fri, 21 Jun 2024 18:31:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cDGlGZoK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520CDK%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%25A4%2589%25E6%259B%25B4%25E6%2599%2582%25E3%2581%25AB%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2581%25A7%25E6%25A7%258B%25E6%2588%2590%25E5%259B%25B3%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B4%25A0%25E4%25BA%25BA%25E3%2581%25AE%25E6%2588%25AF%25E8%25A8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmYTVmOTBhM2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>素人の戯言</dc:creator></item><item><title><![CDATA[Reactの props の正体は オブジェクト]]></title><description><![CDATA[タイトルの通り、Reactのpropsを学習したのでまとめます。

 props とは？
propsはコンポーネントにデータを渡すための手段。propsはオブジェクトであり、その中には親コンポーネントから渡されたすべてのデータが含まれています。
例えば、以下のようなコンポーネントがあった時、
import React from 'react';

// 親コンポーネント
function App() {
  return (
    &lt;&gt;
      &lt;h1&gt;ボタン&lt;/h1&gt;
      &lt;Button text={'Hello World'} ...]]></description><link>https://zenn.dev/surume3/articles/40ae6210c496e8</link><guid isPermaLink="true">https://zenn.dev/surume3/articles/40ae6210c496e8</guid><pubDate>Fri, 21 Jun 2024 15:27:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RYdJ2Qo9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25AE%2520props%2520%25E3%2581%25AE%25E6%25AD%25A3%25E4%25BD%2593%25E3%2581%25AF%2520%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:syumai3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4MzZlZGI2OWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>syumai3</dc:creator></item><item><title><![CDATA[The 2023 State of JavaScript のピックアップ]]></title><description><![CDATA[
 はじめに
こんにちは。
Soziの米田です。
The 2023 State of JavaScript が公開されました。
https://2023.stateofjs.com/en-US/
JavaScript界隈、主にJS自体の新し目の機能だったり、ライブラリ、ツールについて、認知度など調査結果をまとめたものです。
移り変わりの激しいフロントエンドですが、このような調査があることはとてもありがたく思っています。
さて、今回はライブラリを中心に、いくつかピックアップしてみました。
!
調査に答えている人は欧米に大きく偏っているため、あくまで「ざっくり」とトレンドをつかむ、程度に利用...]]></description><link>https://zenn.dev/sozi/articles/3deb414b260cf2</link><guid isPermaLink="true">https://zenn.dev/sozi/articles/3deb414b260cf2</guid><pubDate>Fri, 21 Jun 2024 14:56:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hJvQFgON--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:The%25202023%2520State%2520of%2520JavaScript%2520%25E3%2581%25AE%25E3%2583%2594%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:keisukekomeda%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjNjI1ZmE4Y2QuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Sozi%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5NzkzYzA0NTEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>keisukekomeda</dc:creator></item><item><title><![CDATA[TypeScript 5.5 で追加された正規表現構文チェックを理解する]]></title><description><![CDATA[TypeScript 5.5で、@graphemeclusterさんによって正規表現リテラルの構文チェックが導入されました🎉
この構文チェックによって、正規表現に間違いがあった場合、事前にTypeScriptがエラーを出力してくれます。
https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/#regular-expression-syntax-checking
この機能について、次のことが気になったので調べてみました。

どんな構文がエラーになるか
なぜ導入されたか
どうやってチェックしているか
JavaS...]]></description><link>https://zenn.dev/cybozu_frontend/articles/349e9a778dfe0b</link><guid isPermaLink="true">https://zenn.dev/cybozu_frontend/articles/349e9a778dfe0b</guid><pubDate>Fri, 21 Jun 2024 08:59:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HxDNp60K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25205.5%2520%25E3%2581%25A7%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E6%25A7%258B%25E6%2596%2587%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Daiki%2520Maekawa%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjOTA1OThlNjEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%259C%25E3%2582%25A6%25E3%2582%25BA%2520%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzN2NiNjM1NWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki Maekawa</dc:creator></item><item><title><![CDATA[文字化けはなぜ起こるのか？どういう時に復元できるのか？]]></title><description><![CDATA[文字コードが何もわからないのでNode.js（TypeScript）を使って手を動かしながら入門するメモの第2弾です。
下記記事の続編になります。
https://zenn.dev/dyoshikawa/articles/nodejs-charset-introduction
今回は文字化けについて書いていきます。
!
筆者は文字コードの専門家ではないため、間違いがあればご指摘ください。


 文字化けさせてみる
実務で出番が多い（？）UTF-8↔️Shift_JISで文字化けさせてみます。
ああ という文字列を対象に試してみます。2つのパターンを見てみましょう。
import icon...]]></description><link>https://zenn.dev/dyoshikawa/articles/nodejs-charset-introduction-mojibake</link><guid isPermaLink="true">https://zenn.dev/dyoshikawa/articles/nodejs-charset-introduction-mojibake</guid><pubDate>Fri, 21 Jun 2024 07:22:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZjkIdzIc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E5%258C%2596%25E3%2581%2591%25E3%2581%25AF%25E3%2581%25AA%25E3%2581%259C%25E8%25B5%25B7%25E3%2581%2593%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%25E3%2581%25A9%25E3%2581%2586%25E3%2581%2584%25E3%2581%2586%25E6%2599%2582%25E3%2581%25AB%25E5%25BE%25A9%25E5%2585%2583%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:d%2520yoshikawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjNWU1ODc1NjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>d yoshikawa</dc:creator></item><item><title><![CDATA[入力要素が少し違うフォームをReactで量産するときに]]></title><description><![CDATA[
 はじめに
react-hook-form はフォームを作る際に便利なライブラリですが、フォームが複数のコンポーネントに分割されていると複雑になります。
特に送信周りを担う基底コンポーネントとフォームの表示を担うフォームコンポーネントが別であるような場合はcontrolの受け渡しがprops経由ではできなくなります。
このような事例は多くはないのですが、ここではある記事投稿サイトを想定し、「記事のカテゴリを選ぶとそれに応じたフォームが表示される」ような状況を想像してみましょう。

 全体設計
まず各カテゴリに対応するフォームをどんな形で作りたいかを想像しながら、最終系を設計してみましょ...]]></description><link>https://zenn.dev/intomyam/articles/fd5fc4f86670b6</link><guid isPermaLink="true">https://zenn.dev/intomyam/articles/fd5fc4f86670b6</guid><pubDate>Fri, 21 Jun 2024 05:56:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CX7AQmg5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E5%258A%259B%25E8%25A6%2581%25E7%25B4%25A0%25E3%2581%258C%25E5%25B0%2591%25E3%2581%2597%25E9%2581%2595%25E3%2581%2586%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592React%25E3%2581%25A7%25E9%2587%258F%25E7%2594%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B1%25B1%25E4%25B8%25AD%25E6%2599%25BA%25E4%25BB%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g5UFd4SVM0MGgxVkZGeVo2d3V0QnoxdnN6RVgtVHlRMGlRQm9iLVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山中智仁</dc:creator></item><item><title><![CDATA[令和トラベルでの挑戦🔥バックエンドエンジニアが語る入社5ヶ月のリアル]]></title><description><![CDATA[

 はじめに
こんにちは、令和トラベルでバックエンドエンジニアをしている中野です！
社会人4年目で、2024年1月に令和トラベルに入社しました。
この記事では、中野が入社5ヶ月で経験したプロジェクトについて書いていこうと思います。
バックエンドエンジニアとして、令和トラベルに入社したらどんな開発をするのか、どんな経験が得られるのかといった観点の解像度が上がれば幸いです。
この5ヶ月でセールツアーを管理する機能、送迎やアクティビティを旅程表に自動で反映する機能、そしてNEWTの新規プロジェクト（こちら公開時点ではまだリリースされてないので秘密です🙏）における開発、といった3つの機能につい...]]></description><link>https://zenn.dev/reiwatravel/articles/b9ac6d1d1a029e</link><guid isPermaLink="true">https://zenn.dev/reiwatravel/articles/b9ac6d1d1a029e</guid><pubDate>Fri, 21 Jun 2024 04:38:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--drh99TuD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%25A4%25E5%2592%258C%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AE%25E6%258C%2591%25E6%2588%25A6%2520%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E8%25AA%259E%25E3%2582%258B%25E5%2585%25A5%25E7%25A4%25BE5%25E3%2583%25B6%25E6%259C%2588%25E3%2581%25AE%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Hironori%2520Nakano%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcyYjBjZTEzOGQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25BB%25A4%25E5%2592%258C%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVc0NzBkbmh0RDZqd1E5N2lxdWVBR0lSZk53cDdMaDZGUXlEQ1NvWkhTPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hironori Nakano</dc:creator></item><item><title><![CDATA[TypeScript5.5でfilterの型推論が強化されました]]></title><description><![CDATA[TypeScript5.5が正式リリースされました。
https://devblogs.microsoft.com/typescript/announcing-typescript-5-5/
今回のアップデートで特にうれしいのが配列にfilterをかけた時の型推論の強化です。
const f = (v: (number | null)[]) =&gt; v.filter((v) =&gt; v !== null);
こういう関数を書いた場合、これまで戻り値は(number | null)[]でしたが、TypeScript5.5ではnumber[]になります。
TypeScript5.4
...]]></description><link>https://zenn.dev/nekoya/articles/ba2cdaf287558d</link><guid isPermaLink="true">https://zenn.dev/nekoya/articles/ba2cdaf287558d</guid><pubDate>Fri, 21 Jun 2024 01:07:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iR135JDs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript5.5%25E3%2581%25A7filter%25E3%2581%25AE%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%258C%25E5%25BC%25B7%25E5%258C%2596%25E3%2581%2595%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nekoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2ZmU4ZWVmN2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nekoya</dc:creator></item><item><title><![CDATA[[Next.js App Router]メタデータの設定をしよう]]></title><description><![CDATA[
 はじめに
Next.js(App Router)でメタデータを生成する方法について書いていきます。

 参考
https://nextjs.org/docs/app/building-your-application/optimizing/metadata

 静的メタデータの設定方法
https://nextjs.org/docs/app/building-your-application/optimizing/metadata#static-metadata
静的メタデータを設定するには、以下のように書きます。
「metadata」関数をエクスポートする形で定義し、その中で、静的...]]></description><link>https://zenn.dev/ryohei0509/articles/a363da4e20bf1a</link><guid isPermaLink="true">https://zenn.dev/ryohei0509/articles/a363da4e20bf1a</guid><pubDate>Thu, 20 Jun 2024 23:15:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U3XAjSCx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNext.js%2520App%2520Router%255D%25E3%2583%25A1%25E3%2582%25BF%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hukuryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeEhoX2RPUm5EXzhoQXFwbGpaQk1KS2U4VVZaMVpUSm1CVE5pdWE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hukuryo</dc:creator></item></channel></rss>