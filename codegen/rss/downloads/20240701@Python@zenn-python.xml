<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 01 Jul 2024 10:18:32 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[AtCoder Beginner Contest 360[A - A Healthy Breakfast]]]></title><description><![CDATA[
 はじめに
言語はPython
次この問題と出会ったらどう解くか、私が100%扱える解法の作成を目的としている。

 問題文
A - A Healthy Breakfast

高橋くんは、朝食にご飯、味噌汁、サラダを1皿ずつ食べます。
高橋くんの家のテーブルは細長いので、3皿を横一列に並べました。並べ方は文字列Sによって与えられ、左からi番目の皿はSiが\textcolor{red}{R}ならご飯、Siが\textcolor{red}{M}なら味噌汁、Siが\textcolor{red}{S}ならサラダです。
ご飯の皿が味噌汁の皿より左にあるかどうかを判定してください。

 制約


...]]></description><link>https://zenn.dev/panda_ninja/articles/48cbdcb21dedfa</link><guid isPermaLink="true">https://zenn.dev/panda_ninja/articles/48cbdcb21dedfa</guid><pubDate>Mon, 01 Jul 2024 07:36:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YOvmsXTw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AtCoder%2520Beginner%2520Contest%2520360%255BA%2520-%2520A%2520Healthy%2520Breakfast%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:PandaNinja%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3Zjc3NDJhNGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>PandaNinja</dc:creator></item><item><title><![CDATA[CloudComposer始めました]]></title><description><![CDATA[WEDでデータエンジニアをしているthimi0412こと清水です。
WEDでは現在GKE上にAirflowの環境を構築し、Embulk使用してアプリケーションで使用しているCloudSQLから分析用のBigQueryにデータを転送しています。そして、自前のGEK上のAirflowからCloudComposerへの移行を現在行っている最中です。
今回はCloudComposerの作成と開発運用について紹介します。

 なぜCloudComposer
CloudComposerはv1とv2があり今回は新しいv2で作りました。(Airflowが2系なので使ってみたい&amp;GKEがAutop...]]></description><link>https://zenn.dev/wed_engineering/articles/ebdd6858394baf</link><guid isPermaLink="true">https://zenn.dev/wed_engineering/articles/ebdd6858394baf</guid><pubDate>Mon, 01 Jul 2024 07:23:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0bkHfd6I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CloudComposer%25E5%25A7%258B%25E3%2582%2581%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:thimi0412%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxYjlmMzI3YWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:WED%2520Engineering%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNHhubDBvUmJJcnRYdFAzOUpNekRoYmJIVFhpZzNiQ2pBZVV4bFNOZz1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>thimi0412</dc:creator></item><item><title><![CDATA[Gemini 1.5 FlashからGrounding for Google Searchを使ってみた]]></title><description><![CDATA[
 はじめに
こんにちは！逆転オセロニアのYouTubeチャンネル「まこちゃんねる」の中の人です。
本稿ではGoogle Cloud Next '24で発表されたVertex AIの最新機能の1つである、Grounding for Google SearchをGeminiから使ってみたいと思います！

 概要
本稿で使っていくソリューションは、大きく分けて以下の2つです。この2つは、Vertex AIと呼ばれるGoogle Cloud上に構築されている機械学習プラットフォームを介して利用することができます（Gemini単体は、Vertex AIとは別に、Google AIというサービスか...]]></description><link>https://zenn.dev/makochan/articles/b3b81b83ae1a37</link><guid isPermaLink="true">https://zenn.dev/makochan/articles/b3b81b83ae1a37</guid><pubDate>Mon, 01 Jul 2024 04:11:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_2Z7dXVu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Gemini%25201.5%2520Flash%25E3%2581%258B%25E3%2582%2589Grounding%2520for%2520Google%2520Search%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%2593%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3ZDE2MTk1MTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まこちゃん</dc:creator></item><item><title><![CDATA[Python インスタンスのメンバーの状態や関数内の変数の内容を列挙する vars() 関数が便利]]></title><description><![CDATA[Python で作成していた Lambda がバグっていたので、調査していたところ vars() という Python の組み込み関数が便利だったので備忘録として残します。

 簡単な経緯
APIGw X Lambda X Python で構築していた API がバグっていた。
調査したところ、HTTP 通信に使用している requests モジュールの Response オブジェクトに関する理解が誤っていたっぽいところまではわかった。
Response オブジェクトのメンバー一覧を確認することができれば理解の誤りを訂正できるのではと考え調べた。

 vars 関数のまとめ

インスタン...]]></description><link>https://zenn.dev/ndjndj/articles/79275d03d80f4d</link><guid isPermaLink="true">https://zenn.dev/ndjndj/articles/79275d03d80f4d</guid><pubDate>Mon, 01 Jul 2024 02:15:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2cqdA6zS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%2520%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E3%2582%2584%25E9%2596%25A2%25E6%2595%25B0%25E5%2586%2585%25E3%2581%25AE%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AE%25E5%2586%2585%25E5%25AE%25B9%25E3%2582%2592%25E5%2588%2597%25E6%258C%2599%25E3%2581%2599%25E3%2582%258B%2520vars%2528%2529%2520%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%258C%25E4%25BE%25BF%25E5%2588%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ndj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmOGFkYjRiMGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ndj</dc:creator></item><item><title><![CDATA[UPSの状態をMackerelで可視化する: apcupsdとPythonを使ったカスタムプラグイン]]></title><description><![CDATA[
 UPSの状態をMackerelで可視化する: apcupsdとPythonを使ったカスタムプラグイン

 はじめに
サーバーの安定稼働にとって、電源の安定供給は非常に重要です。そのため、多くの環境でUPS（無停電電源装置）が使用されています。UPSの状態を常に監視することで、潜在的な問題を早期に発見し、対応できます。
この記事では、apcupsdを使用してUPSの情報を取得し、それをPythonスクリプトでMackerelに送信する方法を紹介します。これにより、UPSの状態をリアルタイムで可視化し、監視することが可能になります。


 前提条件

Linux環境（Ubuntu, Ce...]]></description><link>https://zenn.dev/matsubokkuri/articles/apc-mackerel</link><guid isPermaLink="true">https://zenn.dev/matsubokkuri/articles/apc-mackerel</guid><pubDate>Sun, 30 Jun 2024 16:28:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kb-imU4f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:UPS%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E3%2582%2592Mackerel%25E3%2581%25A7%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%253A%2520apcupsd%25E3%2581%25A8Python%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Matsukura%2520Yuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2diQWZWd2dLbmhzWjJZdGgyY2k1c2hveDdQWHl5UUVaN0MyV2JkQ0E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Matsukura Yuki</dc:creator></item><item><title><![CDATA[ディレクトリ内に閉じた任意バージョンの Python 環境構築 (python-build-standalone)]]></title><description><![CDATA[
 はじめに
本記事では、python-build-standalone のバイナリを使い、お手軽にディレクトリ内に閉じた Python 環境構築する方法を紹介します。
ユースケースとしては以下のような場面を想定しています。

「サーバー上で動かすちょっとしたスクリプトを実行したいけど、システムの Python のバージョンが古い」
「Python をインストールしたいけど他の環境やディレクトリには影響を与えたくない」
「Docker を導入するほどではない」

※ python-build-standalone バイナリの Runtime Requirements はこちら

 結論
...]]></description><link>https://zenn.dev/pollenjp/articles/2024-06-27-install-python-at-directory</link><guid isPermaLink="true">https://zenn.dev/pollenjp/articles/2024-06-27-install-python-at-directory</guid><pubDate>Sun, 30 Jun 2024 15:14:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vMPy1fPz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E5%2586%2585%25E3%2581%25AB%25E9%2596%2589%25E3%2581%2598%25E3%2581%259F%25E4%25BB%25BB%25E6%2584%258F%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%2520Python%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520%2528python-build-standalone%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pollenjp%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kydDRtSXd1ZWI4dzNsUzhOQjZwamJsNlRoMlZFTFFPUnctOFIyOUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pollenjp</dc:creator></item><item><title><![CDATA[セキュリティの学習のために、SQLインジェクションを起こせる簡単なWebアプリをPythonで作る]]></title><description><![CDATA[
 準備
必要なライブラリをインストールする。
$ pip install flask

 ソースコード

main.py
from flask import Flask, request, render_template_string
import sqlite3

app = Flask(__name__)


# データベースの初期化
def init_db():
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT ...]]></description><link>https://zenn.dev/aki8128/articles/dd4f13aa854b4e</link><guid isPermaLink="true">https://zenn.dev/aki8128/articles/dd4f13aa854b4e</guid><pubDate>Sun, 30 Jun 2024 14:20:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mZ0A3Vkv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E3%2580%2581SQL%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E8%25B5%25B7%25E3%2581%2593%25E3%2581%259B%25E3%2582%258B%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AAWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592Python%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tanuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tanuki</dc:creator></item><item><title><![CDATA[【Python】Dockerコマンドを使用して特定のコンテナでDjangoのマイグレーションを実行]]></title><description><![CDATA[
 はじめに

docker-compose exec &lt;service-name&gt; python manage.py makemigrations
!
&lt;service-name&gt;でmakemigrationsを実行しようとすると上記図のようにコンテナ毎度起動してしまうため、コンテナを指定してマイグレーションコマンドを実行する方法をまとめている。


 makemigrations

execの後に&lt;container-name&gt;または&lt;container-id&gt;を入力して実行する
docker exec &lt;container-na...]]></description><link>https://zenn.dev/code_journey_ys/articles/d208d124a4c852</link><guid isPermaLink="true">https://zenn.dev/code_journey_ys/articles/d208d124a4c852</guid><pubDate>Sun, 30 Jun 2024 14:08:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z3qlCydL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591Docker%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25A7Django%25E3%2581%25AE%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxYmU5MTc2ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[Windows + MinGW + MSYS2でRust実装のPythonライブラリーを作る]]></title><description><![CDATA[
 はじめに
RustでPythonライブラリーを作成する手段としてPyO3があり、過去の記事「PyO3 + PoetryでPythonからRust実装を使う」でやり方を解説したが、暗黙的にLinuxやmacOSを対象としていた。
ライブラリーによってはWindows向けのWheel配布が必要なこともあるため、この記事ではGitHub Actionsを使ってWindows + MinGW + MSYS2環境でPyO3とRustを使ったPythonライブラリーのビルド方法について述べる。
この記事で利用するコードは下記のGitHubリポジトリーでまとめて公開している。

https://g...]]></description><link>https://zenn.dev/yyu/articles/3f83943960411f</link><guid isPermaLink="true">https://zenn.dev/yyu/articles/3f83943960411f</guid><pubDate>Sun, 30 Jun 2024 12:21:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JnKD6TJe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Windows%2520%252B%2520MinGW%2520%252B%2520MSYS2%25E3%2581%25A7Rust%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AEPython%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YOSHIMURA%2520Yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2laenQzajlqNGY3NFNiV2ppMUxoeGZNbE5PNmVhcXJLY2cza1JaTFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YOSHIMURA Yuu</dc:creator></item><item><title><![CDATA[CausalImpact の概要と Python による実装、その評価]]></title><description><![CDATA[
 1. 背景
ある商品の KPI (Key Performance Index) を達成するために行ったビジネスアクションを介入（施策）という。介入の効果を正しく評価するためには、施策を行った母集団のセレクションバイアスに気を付けて、RCT (Randomized Controlled Trial) を満たした手法で検証を行う必要がある。しかし、RCT を満たした手法で検証を行うのは、要求されるデータ量の大きさなどの観点から現実的には困難である。限られたデータの中で有意な検証を行う方法はいくつか存在する。そこで本記事では、その 1 つの手法である CausalImpact  の概要と ...]]></description><link>https://zenn.dev/pe/articles/12be20efdaed40</link><guid isPermaLink="true">https://zenn.dev/pe/articles/12be20efdaed40</guid><pubDate>Sun, 30 Jun 2024 12:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nWvfr9EY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CausalImpact%2520%25E3%2581%25AE%25E6%25A6%2582%25E8%25A6%2581%25E3%2581%25A8%2520Python%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E5%25AE%259F%25E8%25A3%2585%25E3%2580%2581%25E3%2581%259D%25E3%2581%25AE%25E8%25A9%2595%25E4%25BE%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naoki%2520Maekawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5Y2YxY2VmZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naoki Maekawa</dc:creator></item><item><title><![CDATA[デザインパターン入門：ObserverパターンをPythonで]]></title><description><![CDATA[現在取り組んでいるプロジェクトはオブジェクト指向設計を採用しており、復習を兼ねてデザインパターンについての記事を定期的に作成したいと思います。今回は、Observerパターンに焦点を当ててみます


 対象読者

オブジェクト指向に馴染みがある
継承、コンポジション、抽象などオブジェクト指向に関する基本的なことを知っている
Observerパターンについて知りたい or おさらいしておきたい




 Observerパターンの概要
あるクラスの変更を検知して、別のクラスに変更を適用したいときによく使用されるデザインパターンです
Observerパターンはサブジェクトとオブザーバーの2つ...]]></description><link>https://zenn.dev/ryutaro_h/articles/e9ead32d39e2c0</link><guid isPermaLink="true">https://zenn.dev/ryutaro_h/articles/e9ead32d39e2c0</guid><pubDate>Sun, 30 Jun 2024 11:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UrbFvEde--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259AObserver%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%2592Python%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ryutaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyYjlkMTUzNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ryutaro</dc:creator></item><item><title><![CDATA[scikit-learn~ワイン問題をロジスティック回帰~]]></title><description><![CDATA[こんにちは！
機械学習の初学者として、scikit-learnに組み込んであるデータセットを用いて「ロジスティック回帰」に挑戦してみました。
機械学習の最初の壁であるデータ収集をに時間を割かなくて済むためscikit-learnのデータセットは楽です！
ワインのデータセットを使用します。
データセットの中身についてはこちらの「7.1.5. Wine recognition dataset」をご確認ください。
https://scikit-learn.org/stable/datasets/toy_dataset.html#wine-recognition-dataset

 機械学習の一...]]></description><link>https://zenn.dev/chanpaya/articles/00fd0b175b5a0b</link><guid isPermaLink="true">https://zenn.dev/chanpaya/articles/00fd0b175b5a0b</guid><pubDate>Sun, 30 Jun 2024 10:28:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W5Lz76m1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:scikit-learn%7E%25E3%2583%25AF%25E3%2582%25A4%25E3%2583%25B3%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2583%25E3%2582%25AF%25E5%259B%259E%25E5%25B8%25B0%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:chanpaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmYmY1NGIxMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chanpaya</dc:creator></item><item><title><![CDATA[Stable Diffusion で遊んでみる (3) — わざわざ Diffusers で VAE を実装する]]></title><description><![CDATA[
 目的
diffusers を使ったコードを見ると、AutoencoderKL というものが使われていることがあって、arXiv:1312.6114 Auto-Encoding Variational Bayes とどういう関係にあるのかな？と思ったので少し調べた話。ほぼ備忘録。

 AutoencoderKL
AutoencoderKL は autoencoder_kl.py で定義されていて、forward を見ると、
    def forward(
        self,
        sample: torch.Tensor,
        sample_poster...]]></description><link>https://zenn.dev/derwind/articles/dwd-stable-diffusion03</link><guid isPermaLink="true">https://zenn.dev/derwind/articles/dwd-stable-diffusion03</guid><pubDate>Sun, 30 Jun 2024 08:18:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YroUi1of--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Stable%2520Diffusion%2520%25E3%2581%25A7%25E9%2581%258A%25E3%2582%2593%25E3%2581%25A7%25E3%2581%25BF%25E3%2582%258B%2520%25283%2529%2520%25E2%2580%2594%2520%25E3%2582%258F%25E3%2581%2596%25E3%2582%258F%25E3%2581%2596%2520Diffusers%2520%25E3%2581%25A7%2520VAE%2520%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:derwind%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiNjBiZDcwMDMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>derwind</dc:creator></item><item><title><![CDATA[dlibのshapre predictorでAFLW2000の学習をさせる]]></title><description><![CDATA[
 shape predictorについて
dlibの顔ランドマーク推定などを擁する推論器の種類です。5点予測、68点予測のモデルが用意されています。68点については「HELENデータセット」で学習させられているようです。
ざっと論文を見ると、モデルは回帰木の組み合わせで、初期座標から徐々に被写体の顔に合わせた位置にランドマークの座標を更新していくという計算方法の様です。
この「初期座標」はどうやら訓練データに依存して決まるようで、データセットを変えたら推論結果もそこそこ変わるかも？と思いました。

 モチベーション
そこで、AFLW20003Dデータセットで2次元のランドマーク推論器を...]]></description><link>https://zenn.dev/079aefdf/articles/148d494e5e3dd1</link><guid isPermaLink="true">https://zenn.dev/079aefdf/articles/148d494e5e3dd1</guid><pubDate>Sun, 30 Jun 2024 07:07:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vQttXdeU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:dlib%25E3%2581%25AEshapre%2520predictor%25E3%2581%25A7AFLW2000%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2582%2592%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daidai-orange%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhZmViMTkxMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daidai-orange</dc:creator></item><item><title><![CDATA[Pythonでプロファイリングする]]></title><description><![CDATA[
 はじめに
とある処理の実行速度を計測したいと思った時に、いつもprint文を仕込むだけだったのですが、
ハイパフォーマンスPython 第2版 に載っていた方法が便利だったので下記にまとめます。

 環境
・M1Mac
・OS:Ventura13.5

 事前準備
sample.py というファイルに下記のsample_funcという関数を定義しました。
def sample_func():
    # 計測したい処理

 1. print文
import time
from sample import sample_func

start_time = time.time()
sa...]]></description><link>https://zenn.dev/enechange_blog/articles/c0053dfbe51beb</link><guid isPermaLink="true">https://zenn.dev/enechange_blog/articles/c0053dfbe51beb</guid><pubDate>Sun, 30 Jun 2024 06:23:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--toVqpIuB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Saya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5YThmZmY3MzEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ENECHANGE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhODYxNjRmOTUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Saya</dc:creator></item><item><title><![CDATA[chromadb使い方メモ]]></title><description><![CDATA[
 事前準備

 ライブラリinstall
pip install charomadb

 実装
import chromadb

 クライアント取得
# inmemoryでクライアント取得
# chroma_client = chromadb.Client()
# 永続化データから取得
chroma_client = chromadb.PersistentClient(path="./db/chromadb")

 コレクション取得。無ければ作成
collection = chroma_client.get_or_create_collection("testdb")
永続化データ利用...]]></description><link>https://zenn.dev/y2k/articles/8f59d400bb360b</link><guid isPermaLink="true">https://zenn.dev/y2k/articles/8f59d400bb360b</guid><pubDate>Sun, 30 Jun 2024 05:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K8E5jQ0S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chromadb%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:y2k%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKejFiTlNlbW1IalRqR2lqY1R5bjhQSDVuM1hfcjJjS01OcVU3c3Qtdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>y2k</dc:creator></item><item><title><![CDATA[HLS形式の配信動画をローカルに保存する]]></title><description><![CDATA[
 TL;DR


Selenium + undetected_chromedriver使用

ChromeOptions.set_capability("goog:loggingPrefs", {"performance": "ALL"})を設定し、Chrome.get_log("performance")でブラウザのネットワークログを解析してストリームデータのURLを1件ずつ構築し、requestsで保存

ffmpeg-pythonで結合
スクリプト
配信ページへのアクセスにログインが必要な場合は先にログインしておく
ストリームデータ取得に認証が必要なページ非対応


 スクリプト...]]></description><link>https://zenn.dev/nondescript/articles/ede2c165236dd8</link><guid isPermaLink="true">https://zenn.dev/nondescript/articles/ede2c165236dd8</guid><pubDate>Sun, 30 Jun 2024 01:48:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mH-Qnp-n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HLS%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25AE%25E9%2585%258D%25E4%25BF%25A1%25E5%258B%2595%25E7%2594%25BB%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25AB%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B4%25A0%25E4%25BA%25BA%25E3%2581%25AE%25E6%2588%25AF%25E8%25A8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmYTVmOTBhM2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>素人の戯言</dc:creator></item><item><title><![CDATA[Tkinter でルビを表示する]]></title><description><![CDATA[Python の GUI ライブラリである Tkinter でルビを表示したい場面に遭遇しました。Web であれば簡単に表現可能なのですが、残念ながら Tkinter にルビ機能は存在しないため、スペースを用いて擬似的に表現します。

 親文字用、ルビ用の TextLabel を用意する
親文字を表示する parentLabel およびルビを表示する rubyLabel を用意します。rubyLabel のフォントサイズは parentLabel の半分にセットします。
import tkinter as tk

size = 24
parentLabel = tk.Label(Disp...]]></description><link>https://zenn.dev/inaniwaudon/articles/61d2b3632a3325</link><guid isPermaLink="true">https://zenn.dev/inaniwaudon/articles/61d2b3632a3325</guid><pubDate>Sun, 30 Jun 2024 01:02:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BQrojm0r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tkinter%2520%25E3%2581%25A7%25E3%2583%25AB%25E3%2583%2593%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25AA%25E3%2581%25AB%25E3%2582%258F%25E3%2581%2586%25E3%2581%25A9%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0YjlhYjgzNmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いなにわうどん</dc:creator></item><item><title><![CDATA[Django触るなら知っとけ -Djangoベストプラクティス-]]></title><description><![CDATA[
 はじめに
Djangoを多分2.x頃から触り始めて、なんだかんだで今でもよく使っているのでDjango使うならこの辺知っといた方が良いよなぁみたいな基本的なところをまとめます。
また、DRFを利用する方が多いと勝手に思っているためserializers.pyのようなものが一部登場しますがDRFのものとなりますのであまり気にせず。

 プロジェクトの作成
Djangoのプロジェクトを作成する際によく以下のようなコマンドで作成するかと思います。
django-admin startproject ${application-name}
上記のようなコマンドで作成すると以下のような構成とな...]]></description><link>https://zenn.dev/yuya_morimoto/articles/80450e19c01e9c</link><guid isPermaLink="true">https://zenn.dev/yuya_morimoto/articles/80450e19c01e9c</guid><pubDate>Sun, 30 Jun 2024 01:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fefREAyn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%25E8%25A7%25A6%25E3%2582%258B%25E3%2581%25AA%25E3%2582%2589%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A8%25E3%2581%2591%2520-Django%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuya_morimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4NjJlMTEyYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuya_morimoto</dc:creator></item><item><title><![CDATA[Pythonで簡単に始める！ホットペッパーグルメAPI活用ガイド]]></title><description><![CDATA[近年、データを活用したアプリケーション開発が盛んに行われており、API（アプリケーションプログラミングインターフェース）を利用した開発が増えています。特に、飲食店情報を簡単に取得できる「ホットペッパーグルメAPI」は、便利なデータ提供サービスとして注目されています。しかし、APIの利用方法やPythonでの実装方法については詳しく知らない方も多いのではないでしょうか。この記事では、ホットペッパーグルメAPIをPythonで使用する方法を詳しく解説します。

 1. ホットペッパーグルメAPIとは？

 APIの概要
ホットペッパーグルメAPIは、リクルートが提供する飲食店検索サービス「ホ...]]></description><link>https://zenn.dev/shintaro/articles/053fe2ca8b3430</link><guid isPermaLink="true">https://zenn.dev/shintaro/articles/053fe2ca8b3430</guid><pubDate>Sun, 30 Jun 2024 00:47:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C8M2XZOW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25EF%25BC%2581%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%259A%25E3%2583%2583%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B0%25E3%2583%25AB%25E3%2583%25A1API%25E6%25B4%25BB%25E7%2594%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shintaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzZDU4NjE5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shintaro</dc:creator></item></channel></rss>