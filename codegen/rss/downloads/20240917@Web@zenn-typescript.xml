<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 17 Sep 2024 12:03:56 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[HonoでGraphQLサーバーを構築する]]></title><description><![CDATA[
 はじめに
こんにちは、soso です！
最近 Hono×GraphQL で試しにサーバーを構築してたので、その内容をまとめてみました。今回は Cloudflare Workers にデプロイする前提で書いています。Workers で GraphQL サーバーを構築する場合、Hono を使わず graphql-yoga を使うなどの選択肢もあります。今回は Hono でも GraphQL サーバーをどれぐらい快適に構築できるかの検証も含めて、Hono を使ってやっていきます。
GraphQL 自体は無駄に複雑だし REST&amp;OpenAPI で十分でしょ。的な意見も最近はよく聞き...]]></description><link>https://zenn.dev/gemcook/articles/hono-graphql</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/hono-graphql</guid><pubDate>Tue, 17 Sep 2024 07:09:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oOVkao8K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%25E3%2581%25A7GraphQL%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:soso%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmODE2ZDZkNWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>soso</dc:creator></item><item><title><![CDATA[Next.js(Pages Router) + TypeScript + Prismaを学習するためのExampleアプリ]]></title><description><![CDATA[!
Next.js v13より導入されたApp Routerについては取り扱いません。
Pages Routerについて取り扱います。


 はじめに
こちらの書籍にてNext.jsの学習を一通りしました。
https://www.amazon.co.jp/dp/4839980179/
Next.jsの基礎学習を終えた後、次のステップとして「TypeScriptを使いたい」「DBを使いたい」という気持ちが出てきました。しかしゼロからアプリを作るのはまだハードルが高い。何かお手本となるアプリが無いかなと探してみたところ、ピッタリなサンプルアプリがGitHubにあったので共有いたします。

...]]></description><link>https://zenn.dev/hocitron/articles/c2f878c298d77a</link><guid isPermaLink="true">https://zenn.dev/hocitron/articles/c2f878c298d77a</guid><pubDate>Tue, 17 Sep 2024 06:54:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jq1NOEhT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2528Pages%2520Router%2529%2520%252B%2520TypeScript%2520%252B%2520Prisma%25E3%2582%2592%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEExampl...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hocitron%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxMjlkMjBlZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hocitron</dc:creator></item><item><title><![CDATA[VSCodeでvueファイルをインポートした時のエラー]]></title><description><![CDATA[VSCodeでvueファイルをインポートした時にエラーが発生していたので解決方法をメモ

 エラー

src/App.vue
モジュール '@/components/Sample.vue' またはそれに対応する型宣言が見つかりません。ts-plugin(2307)
vueファイルをインポートすると、上記のエラーが発生していた。

 解決方法

tsconfig.json
  "include": [
    "**/*.ts",
    ・・・,
+   "**/*.vue",
  ],

tsconfig.jsonに上記を追記すると解決した。
どうやらincludeにvueを含めないと...]]></description><link>https://zenn.dev/third_tech/articles/ecea229ba94961</link><guid isPermaLink="true">https://zenn.dev/third_tech/articles/ecea229ba94961</guid><pubDate>Tue, 17 Sep 2024 04:59:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qcKVQyiT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25A7vue%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ter4130%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRkNGYzMzMzZDcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BETHIRD%2520%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYjVjMjk0MzMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ter4130</dc:creator></item><item><title><![CDATA[状態管理の勉強&Jotaiを使ってみる]]></title><description><![CDATA[
 はじめに
効率的にアプリケーションを作るためには状態管理が必須です。
そこでここ数年で大きく利用者数を伸ばしている、Jotaiを使ってみます。
https://jotai.org/

 propsのバケツリレーの問題点
まずはじめに状態管理を行いたい理由である、propsのバケツリレーについて説明します。
あるアプリ内のプロフィール画面から、ユーザーネームを変更する場合を想定しています。
今回は単純化しているので、ただ下層のコンポーネントを表示するだけの処理です。
usernameとsetUsernameは、コンポーネントの階層を通じて下層へと渡されていきます。App → UserP...]]></description><link>https://zenn.dev/k_zumi_dev/articles/bb192e7a5d6920</link><guid isPermaLink="true">https://zenn.dev/k_zumi_dev/articles/bb192e7a5d6920</guid><pubDate>Tue, 17 Sep 2024 03:56:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GPxJFRJ7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25AE%25E5%258B%2589%25E5%25BC%25B7%2526Jotai%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k_zumi_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiMTRjZTg1MTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k_zumi_dev</dc:creator></item><item><title><![CDATA[【Next.js】Storybookにふれる（１）]]></title><description><![CDATA[
 Storybookとは
Atomic Designなどの考え方に基づいてコンポーネント開発を行う場合、個々のコンポーネントの状態を確認するには、Pagesコンポーネントなどの画面表示用ファイルにコンポーネントを配置し、そのpropsに対して文脈に応じた値や関数を渡す必要があります。
こんな時にStorybookを使うことで、アプリケーション全体のコンテキストや他のコンポーネントの状態に依存することなく、デモデータを利用して個々のコンポーネントのUIテストを行うことができます。
開発が進むにつれてファイルが増え、管理が煩雑になりがちなコンポーネントの管理もStorybookを利用するこ...]]></description><link>https://zenn.dev/atsumu22/articles/f2d810f3d9613d</link><guid isPermaLink="true">https://zenn.dev/atsumu22/articles/f2d810f3d9613d</guid><pubDate>Tue, 17 Sep 2024 03:15:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tiDuWjK1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Next.js%25E3%2580%2591Storybook%25E3%2581%25AB%25E3%2581%25B5%25E3%2582%258C%25E3%2582%258B%25EF%25BC%2588%25EF%25BC%2591%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%25A4%25E3%2582%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RkMTVhNTAzMmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あつむ</dc:creator></item><item><title><![CDATA[JavaScript イベントリスナー入門：基本概念から実践的な使い方まで]]></title><description><![CDATA[
 イベントリスナーの基本：JavaScriptの重要機能を理解する
こんにちは。今回は、JavaScriptにおいて非常に重要な「イベントリスナー」について、わかりやすく解説します。初心者の方にもイメージしやすいよう、具体例を交えながら説明していきます。

 イベントリスナーとは
イベントリスナーは、特定の出来事（イベント）が発生したときに実行される関数のことです。例えば、「ボタンがクリックされたらメッセージを表示する」といった動作を設定できます。
!
イベントリスナーを使うと、Webページをインタラクティブにし、ユーザーの操作に応じて動的に内容を変更することができます。


 add...]]></description><link>https://zenn.dev/crebo_tech/articles/article-0009-20240916</link><guid isPermaLink="true">https://zenn.dev/crebo_tech/articles/article-0009-20240916</guid><pubDate>Tue, 17 Sep 2024 01:34:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UVm4mkQ---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%258A%25E3%2583%25BC%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E5%259F%25BA%25E6%259C%25AC%25E6%25A6%2582%25E5%25BF%25B5%25E3%2581%258B%25E3%2582%2589%25E5%25AE%259F%25E8%25B7%25B5%25E7%259A%2584%25E3%2581%25AA%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BC%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BC%25E3%2583%25BC%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNzlhZTFjZGIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>株式会社くりぼー</dc:creator></item><item><title><![CDATA[React状態管理ライブラリJotaiで非同期処理のTodoリストを作ってみる]]></title><description><![CDATA[
 はじめに
Reactの状態管理ライブラリJotaiに触る機会があったのでインプットのためにTodoリストを作りました。
Todoリストの初期表示（擬似APIから読み込み）のほか登録/削除機能を持ち、非同期処理時は処理中であることを表示したり、ボタンを非活性にするといった挙動をJotaiの機能を使用しながら実装していきます。
本記事では、
①Todoリスト初期表示
②Todoリスト追加機能
③Todoリスト削除機能
の3段階に分けて実装していきます。

 ターゲット

Jotai初学者


 バージョン

node.js : v20.10.0
React : 18.3.1
TypeSc...]]></description><link>https://zenn.dev/yoshimo/articles/c65c3859201adf</link><guid isPermaLink="true">https://zenn.dev/yoshimo/articles/c65c3859201adf</guid><pubDate>Tue, 17 Sep 2024 00:21:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5WvaGy-x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AAJotai%25E3%2581%25A7%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AETodo%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshimo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MG9veU5KSUhuWFRBVHltREdSYnhpQnhPbnpyVVFzbC1jajFjVjg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshimo</dc:creator></item><item><title><![CDATA[[テスト] 今よりも単体テストを良くする考え方]]></title><description><![CDATA[
 はじめに
エンジニアとして初めて入社したPJでテスターとして2年間活動しました。
そのPJでテストについての概念等を理解しました。
しかし、現在のPJでいざテストの文化を1から構築する時に色々分からないことがあった為、
下記書籍で単体テストについて学習しました。
その内容を記録します。


 1. 網羅率(coverage)のみを強く意識しない
!
網羅率（coverage）とは
全体の中でどれだけの範囲をカバーできているかを示す指標です。
何かを調査・分析したり、テストしたりする場合に、
その対象の中で網羅できた部分の割合を示します。

テストパターンが十分であるかの指標の為に網羅...]]></description><link>https://zenn.dev/aew2sbee/articles/test-high-performance-at-minimal-cost</link><guid isPermaLink="true">https://zenn.dev/aew2sbee/articles/test-high-performance-at-minimal-cost</guid><pubDate>Mon, 16 Sep 2024 23:35:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OwMDWiN7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%255D%2520%25E4%25BB%258A%25E3%2582%2588%25E3%2582%258A%25E3%2582%2582%25E5%258D%2598%25E4%25BD%2593%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%2589%25AF%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%25E8%2580%2583%25E3%2581%2588%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2582%258B%25E3%2581%259F%2520%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YTFYdHhmWGZPVmpKek9sTnQ0cDZmaWQyeENLMTlKOEl0akpQczZiZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふるた なおき🥝</dc:creator></item><item><title><![CDATA[Zustandでの状態管理が複雑になってきた時に使えるSliceパターン]]></title><description><![CDATA[
 はじめに
前回に続いてZustandの記述パターンについて備忘的に書いていきます。今回はタイトルにもあるように状態管理が複雑になってきた時に使えるSliceパターンです。基本的にZustandはシンプルな記述をすることが大きなメリットではありますが、コードが複雑になってくると段々Store内で定義したactionsやstateが大きくなってきます。zustand-slicesでは別で定義したStore同士を結合して利用することができます。

 サンプルコード
import { create } from 'zustand';
import { createSlice, withSli...]]></description><link>https://zenn.dev/goemon/articles/dfba33b6850f66</link><guid isPermaLink="true">https://zenn.dev/goemon/articles/dfba33b6850f66</guid><pubDate>Mon, 16 Sep 2024 13:57:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ncLrSuVj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zustand%25E3%2581%25A7%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%258C%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258D%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258BSlice%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Goemon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hySmh1MkFjWEZMbXZzWWVFRWtoU3gwZ3NYdHJmektMMm9tVV9VblE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Goemon</dc:creator></item><item><title><![CDATA[React Hook Formを使ってユーザーの操作によってバリデーションを動的に変更する]]></title><description><![CDATA[
 やりたいこと

入力の不要/必須の切り替えができるテキストエリアを作りたい
チェックボックスがtrueの場合はテキストエリアが入力でき、必須項目になる
チェックボックスがflseの場合はテキストエリアが入力できない


 コンポーネントのイメージ
チェックボックスが押されていない場合


このときにはテキストエリアに入力できない
送信ボタンを押した場合は、フォームが送信される

チェックボックスを押した場合


テキストエリアが空の場合は、送信ボタンを押してもフォームが送信されない
テキストエリアに何か入力した場合は、送信ボタンを押してフォームを送信できる


 実装
import ...]]></description><link>https://zenn.dev/perzikanz/articles/30a35d6ea6528a</link><guid isPermaLink="true">https://zenn.dev/perzikanz/articles/30a35d6ea6528a</guid><pubDate>Mon, 16 Sep 2024 10:04:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hFGP869c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Hook%2520Form%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%25AE%25E6%2593%258D%25E4%25BD%259C%25E3%2581%25AB%25E3%2582%2588%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Perzik_anz%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pxLWcwVmJSM2h1elQxU0Y4SU1PdkVCWFJCdDJEZjN2VFBVMnpKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Perzik_anz</dc:creator></item><item><title><![CDATA[はじめてのGmailアドオン：Apps ScriptとVertex AI (Gemini)でメール要約AIアシスタントを作ろう]]></title><description><![CDATA[この本では、Google Workspaceのアドオンのうち、GmailアドオンをGoogle Apps Scriptで作成します。

前半ではかんたんなサンプルアドオンを動かしながら、Gmailアドオンのしくみを概観します。

後半ではGmailのメールを開くと、そのスレッドの要約をするAIアシスタントを作成します。

コードは下記のリポジトリで公開しています。
https://github.com/HosakaKeigo/gmail-sample-addon
]]></description><link>https://zenn.dev/hosaka313/books/6092471ac8bf38</link><guid isPermaLink="true">https://zenn.dev/hosaka313/books/6092471ac8bf38</guid><pubDate>Mon, 16 Sep 2024 05:50:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C5K_uYt3--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8yY2U3NjUyZjk3LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>hosaka313</dc:creator></item><item><title><![CDATA[React + FastAPIでファイルアップロード機能作ってみた]]></title><description><![CDATA[こんにちは、ぴよ太です🐤
久しぶりにブログ書きます！！

 やったこと
React + FastAPIでファイルアップロード機能を作成してみました。GitHubにアップしています。
仕事でファイルアップロードの部分を作ることになりそうで、事前に把握しておこうと思ったのがきっかけです。基本的な内容とは思いますが、誰かの役に立てたらうれしいです🥹
出来上がったもの


 構成
SPA風で作りました。最近はSPAの記事をあまり見ない。
Next.jsやRemixフルスタックが多い気がしている。（NextjsのTutorialやってみたけど、Pages Router便利。）

フロントエンド

...]]></description><link>https://zenn.dev/ttr0108/articles/729636bf9f8b98</link><guid isPermaLink="true">https://zenn.dev/ttr0108/articles/729636bf9f8b98</guid><pubDate>Mon, 16 Sep 2024 05:42:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vesleu1P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520FastAPI%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E6%25A9%259F%25E8%2583%25BD%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:piyota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2MjUyMmU1ODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>piyota</dc:creator></item><item><title><![CDATA[Jotaiはどのようにして誕生したのか、単なるRecoilの代替手段なのか？]]></title><description><![CDATA[こんにちは、Jotaiの作者です。Jotaiが生まれるまでに様々な取り組みをした歴史を短い記事にしてありますのでよろしければご覧ください。今後のJotaiの発展に期待します。
https://blog.axlight.com/posts/how-jotai-was-born/
以下、ChatGPTによる翻訳です。


 はじめに
この投稿では、なぜ私がJotaiの開発を始めたのか、その背景にあるストーリーを共有したいと思います。JotaiはしばしばRecoilと似たような解決策と見なされますが、その開発にはもっと長い歴史があります。

 React Hooks
React Hooksが最...]]></description><link>https://zenn.dev/dai_shi/articles/f770b771b75f73</link><guid isPermaLink="true">https://zenn.dev/dai_shi/articles/f770b771b75f73</guid><pubDate>Mon, 16 Sep 2024 05:36:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hQUgYi4p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jotai%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6%25E8%25AA%2595%25E7%2594%259F%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%258B%25E3%2580%2581%25E5%258D%2598%25E3%2581%25AA%25E3%2582%258BRecoil%25E3%2581%25AE%25E4%25BB%25A3%25E6%259B%25BF%25E6%2589%258B%25E6%25AE%25B5%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGNhM2E2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daishi</dc:creator></item><item><title><![CDATA[TypeScriptでポリモーフィズム入門〜関数型スタイル編〜]]></title><description><![CDATA[サンプルコードはTypeScriptです。

 ポリモーフィズムとは
関数を再利用したい、しかし完全に同じコードは使えないときに使います。
関数型スタイルの場合のポリモーフィズムは、同じ関数名の関数に対して異なるデータ型の入力ができることをいいます。端的にいえば、この関数につっこんでおけば、なんか良しなにやってくれる、という感じです。
ポリモーフィズムが必要になる場面は基本的にストラテジーパターンかデータとパイプパターンです。そのため返り値の型は共通であることが多いです。
逆にlodashのようなutility関数を作成する場合、パラメトリック多相を意識すると使いやすい関数ができます。
...]]></description><link>https://zenn.dev/trape_inc/articles/98769cb21e2741</link><guid isPermaLink="true">https://zenn.dev/trape_inc/articles/98769cb21e2741</guid><pubDate>Mon, 16 Sep 2024 04:21:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yy0qoNt6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2583%259D%25E3%2583%25AA%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A3%25E3%2582%25BA%25E3%2583%25A0%25E5%2585%25A5%25E9%2596%2580%25E3%2580%259C%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%25E7%25B7%25A8%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%258F%25E3%2583%2588%25E3%2581%2599%25E3%2581%2591%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmM2ViMDA0OGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TRAPE%2528%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2594%2529%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVkMjNlN2Q4MzMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ハトすけ</dc:creator></item><item><title><![CDATA[Vue3×TypeScriptでポケモン図鑑作ってみた]]></title><description><![CDATA[Vue3×TypeScriptでポケモン図鑑を作り、GitHub Pagesにて公開するまでをまとめた本です。]]></description><link>https://zenn.dev/souemon/books/2054148f022328</link><guid isPermaLink="true">https://zenn.dev/souemon/books/2054148f022328</guid><pubDate>Mon, 16 Sep 2024 04:09:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--byzcj5ka--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci85MTYyYzU2N2IxLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>そうえもん</dc:creator></item><item><title><![CDATA[canvasを動的にリサイズさせる]]></title><description><![CDATA[canvasに線などを描画しているときにウィンドウや親要素のサイズが変更すると，画像のサイズはそのままに描画領域の大きさだけを自動でリサイズするcanvasが必要になったので作ってみました．画像が勝手に伸縮したりぼやけたりするのを防ぐために，divラッパーやResize Observerを使い実装しました．

 canvas要素の大きさと画像の大きさの関係
canvas要素では，画像や図形を「キャンバス」といった領域に描画します．そして，そのキャンバスを実際に画面で表示される領域の大きさに合わせて表示します．つまりキャンバスと実際に表示される領域の大きさを適切に設定しないと，画像が伸縮し...]]></description><link>https://zenn.dev/rerrah/articles/2195b607c7af98</link><guid isPermaLink="true">https://zenn.dev/rerrah/articles/2195b607c7af98</guid><pubDate>Sun, 15 Sep 2024 13:37:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--N4Yxgn6l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:canvas%25E3%2582%2592%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E3%2583%25AA%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rerrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2cweTZjdnlzVVVibTYyamhnZ1N5M1pzMGl6Q1ZvU25KRTVTSF9acFFQOVJyRmx1dz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rerrah</dc:creator></item><item><title><![CDATA[Angular（RxJS）でよく使っているオペレータたち]]></title><description><![CDATA[最近、業務で何回もdialogフォームを書いていたら、書き方がテンプレ化してきたので備忘録。
ついでに、記事っぽくするためにRxJSの基本的なところからまとめてみる。

 subscribeのコールバックたち
of(1,2,3).subscribe({
  next: (res) =&gt; console.log(res),
  error: (e) =&gt; console.error(e),
  complete: (res) =&gt; console.log(res)
})


next
Observableが新しい値を発行するたびに呼び出される

error
Observa...]]></description><link>https://zenn.dev/ryoooosk/articles/9e180ce27633e0</link><guid isPermaLink="true">https://zenn.dev/ryoooosk/articles/9e180ce27633e0</guid><pubDate>Sun, 15 Sep 2024 12:05:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VGnODTAf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular%25EF%25BC%2588RxJS%25EF%25BC%2589%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2582%25AA%25E3%2583%259A%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%259F%25E3%2581%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A3%25E3%2581%25A1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExZGZlZDk1MWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いどっっち</dc:creator></item><item><title><![CDATA[ESLintからBiomeへの移行時に特に差分があったexhaustive-depsの挙動について]]></title><description><![CDATA[開発中のプロダクトで、静的解析ツールをESLintからBiomeへ移行しました。基本的にはBiomeが提供するmigrateコマンドで移行できますが、ツール間で差異があるルールについては修正が必要でした。特に修正量が多かった、Reactの依存配列に関するルールについて詳しく調査しました。



ESLint
Biome




exhaustive-deps
useExhaustiveDependencies



※ 2024/9/15時点での仕様です
結論として、Biomeのルールの方が依存配列をより厳密にチェックでき、チーム内のコード記述を統一できると感じました。

 exhaus...]]></description><link>https://zenn.dev/okkun/articles/9fd3cc710d6bc1</link><guid isPermaLink="true">https://zenn.dev/okkun/articles/9fd3cc710d6bc1</guid><pubDate>Sun, 15 Sep 2024 11:19:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q6adm2iT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ESLint%25E3%2581%258B%25E3%2582%2589Biome%25E3%2581%25B8%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AB%25E7%2589%25B9%25E3%2581%25AB%25E5%25B7%25AE%25E5%2588%2586%25E3%2581%258C%25E3%2581%2582%25E3%2581%25A3%25E3%2581%259Fexhaustive-deps%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okkun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkNDFmMTEyYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okkun</dc:creator></item><item><title><![CDATA[Prismaのクエリ情報から型定義を取得する]]></title><description><![CDATA[
 目的
PrismaClientを使って取得したデータの型定義が欲しかったのですが、手動定義ではなくクエリ情報から自動定義したいので調査しました

 方法
Prisma documentの該当ページを参考に、Prisma.validatorユーティリティ型で抽出しました。
// 1. validatorにクエリの種類に応じて作成した情報を渡す
const fetchLatestInvoicesQuery =
  Prisma.validator&lt;Prisma.invoicesFindManyArgs&gt;()({
    select: {
      amount: true...]]></description><link>https://zenn.dev/yasuakiomokawa/articles/afa2a0e1f49c06</link><guid isPermaLink="true">https://zenn.dev/yasuakiomokawa/articles/afa2a0e1f49c06</guid><pubDate>Sun, 15 Sep 2024 08:36:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3QYAvQ3k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E6%2583%2585%25E5%25A0%25B1%25E3%2581%258B%25E3%2582%2589%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%25A2%25E5%25B7%259D%25E6%25B3%25B0%25E6%2598%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o4Z2JYdTRLN2ZxZHJfaGhJTjlKWWZ5TDUtRG1qVDd2aWpKVWVFVXc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>面川泰明</dc:creator></item><item><title><![CDATA[ChatGPT (o1-preview) にテストを渡してコードを実装させるとどうなるか試した]]></title><description><![CDATA[
 はじめに
前にも別のモデルでやってる
https://zenn.dev/sterashima78/articles/7876bd00aa2115
https://zenn.dev/sterashima78/articles/8bca47a054fabd
ただ o1-preview は、やり取りを重ねるよりも一発で終わらせるほうがいいらしいので、最終的なテスト全体を渡すようにした。
情報の提示方法が異なると当然結果も変わるので、 gpt-4o でも同様なことを試した。

 材料
プロンプトは以下。
基本的に最初にやったときと同じ。ペアプロではないのでその部分の調整をしている
- 私がテ...]]></description><link>https://zenn.dev/sterashima78/articles/2b6fafc86415b6</link><guid isPermaLink="true">https://zenn.dev/sterashima78/articles/2b6fafc86415b6</guid><pubDate>Sun, 15 Sep 2024 06:30:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vRHrpckn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGPT%2520%2528o1-preview%2529%2520%25E3%2581%25AB%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E6%25B8%25A1%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E3%2581%25A8%25E3%2581%25A9%25E3%2581%2586%25E3%2581%25AA%25E3%2582%258B%25E3%2581%258B%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sterashima78%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZTM3ODhmMTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sterashima78</dc:creator></item></channel></rss>