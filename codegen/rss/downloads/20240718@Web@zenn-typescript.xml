<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 18 Jul 2024 03:14:29 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[node.jsでdotenv使わずに.envをts-nodeで動かすtips]]></title><description><![CDATA[
 env

ts-node: 10.9.2
node.js: v22.4.1

Node.js は dotenv が buildin されている新しいバージョンにする。

 Files
.env
FOO=foo
/src/index.ts
console.log(process.env.FOO)
実際に動かしたい TypeScript コード

 Command
node --env-file=.env -r ts-node/register ./src/index.ts
--env-file=.env で指定することで dotenv と同様の挙動になる。
]]></description><link>https://zenn.dev/ojin/articles/8c7bdde3f8562e</link><guid isPermaLink="true">https://zenn.dev/ojin/articles/8c7bdde3f8562e</guid><pubDate>Thu, 18 Jul 2024 02:49:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4U_KQBjr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:node.js%25E3%2581%25A7dotenv%25E4%25BD%25BF%25E3%2582%258F%25E3%2581%259A%25E3%2581%25AB.env%25E3%2582%2592ts-node%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599tips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ofa-chan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZGQ3OTVmYjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ofa-chan</dc:creator></item><item><title><![CDATA[ログイン前にアクセスしたURLにリダイレクト]]></title><description><![CDATA[
next-auth@5.0.0-beta.19
nextjs@14.1

未ログイン状態で認証で保護されたページにアクセスしたとき、ログイン後に元々アクセスしていたページにリダイレクトしたい

 実装
middleware → loginページ → login サーバーアクションの順にpathをURLパラメータ経由で渡していく

 middleware
redirectToパラメーターをつけてログインページにリダイレクト
import { auth } from "@acme/auth";

export default auth(async (req) =&gt; {
  const...]]></description><link>https://zenn.dev/blackmax/articles/607d9219f98bd3</link><guid isPermaLink="true">https://zenn.dev/blackmax/articles/607d9219f98bd3</guid><pubDate>Thu, 18 Jul 2024 00:42:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S8Vbyc-_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E5%2589%258D%25E3%2581%25AB%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%2597%25E3%2581%259FURL%25E3%2581%25AB%25E3%2583%25AA%25E3%2583%2580%25E3%2582%25A4%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kuroma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkZTU3MWIzZTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kuroma</dc:creator></item><item><title><![CDATA[Svelte5のイベント修飾子の代替手段]]></title><description><![CDATA[
Svelte5ではイベント修飾子(Event modifiers)が廃止されたのでそれぞれの代替ラップ関数を作成しました。ほぼ参考文献そのままではありますが、一応TypeScriptということと自分用備忘メモとして意味があるということにしておきます。

 イベント修飾子一覧



修飾子
動作




preventDefault

event.preventDefault()を最初に実行


stopPropagation

event.stopPropagation()を実行


once
ハンドラを最初に実行した後に削除


self
要素がevent.targetの場合のみトリ...]]></description><link>https://zenn.dev/scirexs/articles/2669ffbd77567f</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/2669ffbd77567f</guid><pubDate>Wed, 17 Jul 2024 21:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c3PiPAEq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Svelte5%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E4%25BF%25AE%25E9%25A3%25BE%25E5%25AD%2590%25E3%2581%25AE%25E4%25BB%25A3%25E6%259B%25BF%25E6%2589%258B%25E6%25AE%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[TypeScript で特定の値しか受け付けない型を定義する]]></title><description><![CDATA[TypeScript を学習中です。
虹の色は無限色あるとも言われていますが、一方で我々が横断歩道を渡る際に目にする信号の色は、世界中で「赤・青」、「赤・黄・青」と決められています。
そういったものを TypeScript の型として表現する際に、特定の値しか受け付けないようにしたかったので調べたことをまとめました。

 結論

文字列リテラルとユニオンを組み合わせる

type Signal = 'safety' | 'alert' | 'danger'

let sig1: Signal = "safety"
let sig2: Signal = "alert"
let sig3: ...]]></description><link>https://zenn.dev/ndjndj/articles/0ef4d6c7147aef</link><guid isPermaLink="true">https://zenn.dev/ndjndj/articles/0ef4d6c7147aef</guid><pubDate>Wed, 17 Jul 2024 10:57:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hFZgX7cJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E5%2580%25A4%25E3%2581%2597%25E3%2581%258B%25E5%258F%2597%25E3%2581%2591%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E5%259E%258B%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ndj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmOGFkYjRiMGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ndj</dc:creator></item><item><title><![CDATA[Typescript これ使ってみて Part 1]]></title><description><![CDATA[
 はじめに
TypeScriptには新しい機能がたくさん追加されていて、どれを使うか迷うことがあります。本ブログでは、次の開発にすぐ使えそうなTypeScriptの面白い機能をいくつかピックアップして紹介します。

 using キーワードでリソース管理をシンプルに
こちらは C# の using や Python の with と同じものです。
using が導入される前は、以下のようにリソース管理を行いました。
export function doSomeWork() {
    const path = ".some_temp_file";
    const file = fs...]]></description><link>https://zenn.dev/socialplus/articles/fd3092e9b96554</link><guid isPermaLink="true">https://zenn.dev/socialplus/articles/fd3092e9b96554</guid><pubDate>Wed, 17 Jul 2024 10:22:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ws-nIhAa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%2520%25E3%2581%2593%25E3%2582%258C%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25A6%2520Part%25201%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kailma%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4Mjg2YmNjMDEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SocialPLUS%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXNXRVZFaTBmMDM2VUhvckNoRzF4UkotZzdtaFpJek8xUkdWcDRjcTBlPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kailma</dc:creator></item><item><title><![CDATA[TypeScriptでClassの初期化をもっと楽にする]]></title><description><![CDATA[
 はじめに
TypeScriptでClassを定義する場合、みなさんはどのように初期化を行っていますか？
コンストラクタに引数を並べる方法が一般的だと思いますが、引数が多い場合や、引数の順番を間違えるとバグの原因になります。
class User {
  public readonly id: number;
  public readonly firstName: string;
  public readonly lastName: string;
  
  public constructor(id: number, firstName: string, lastName: st...]]></description><link>https://zenn.dev/praha/articles/4ef2bb7ca69e5a</link><guid isPermaLink="true">https://zenn.dev/praha/articles/4ef2bb7ca69e5a</guid><pubDate>Wed, 17 Jul 2024 07:25:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3Hh-EbhE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7Class%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A3%25E3%2581%25A8%25E6%25A5%25BD%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiNzU1NDliMzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25A2%25E3%2582%25AC%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2582%25BA%252FPrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[コーディング規約（仮）]]></title><description><![CDATA[これがよいのではと思った規約をまとめました。
適宜更新予定。

 命名規則



種別
規約
例
備考




変数
先頭小文字 (camel)
var fooVar;



関数
先頭小文字 (camel)
function barFunc() { }



クラス
先頭大文字 (Pascal)
class Foo { }



インターフェース名
先頭大文字 (Pascal)
interface Foo {}
先頭にIを付けてはいけない


インターフェースメンバ
先頭小文字 (camel)
interface Foo { foo: string }



型エイリアス名
先頭大文字...]]></description><link>https://zenn.dev/zhenyou620/articles/coding-conventions</link><guid isPermaLink="true">https://zenn.dev/zhenyou620/articles/coding-conventions</guid><pubDate>Wed, 17 Jul 2024 05:21:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9mqj8NMh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E8%25A6%258F%25E7%25B4%2584%25EF%25BC%2588%25E4%25BB%25AE%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mayu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5ODA4ZjExZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mayu</dc:creator></item><item><title><![CDATA[TypeScriptで組み合わせの関数を自作する]]></title><description><![CDATA[
 前提
順列関数と同様に再帰を利用して実装する。
理由は下の記事と同様です。
https://zenn.dev/takahiro0404/articles/dd6c9814fc4904

 ソースコード

combination.ts
function combination(elements: number[], depth: number): number[][] {
    let answer: number[][] = [];
    if (depth === 1) {
        for (let i = 0; i &lt; elements.length; i++)...]]></description><link>https://zenn.dev/takahiro0404/articles/34d225955dfa62</link><guid isPermaLink="true">https://zenn.dev/takahiro0404/articles/34d225955dfa62</guid><pubDate>Wed, 17 Jul 2024 03:04:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--108v3wM8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E7%25B5%2584%25E3%2581%25BF%25E5%2590%2588%25E3%2582%258F%25E3%2581%259B%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takahiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I0MGUyNDk1NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takahiro</dc:creator></item><item><title><![CDATA[PostgreSQLクエリ結果が期待結果通りにならないようにするためのELSE構文の考慮点]]></title><description><![CDATA[お疲れ様です。中塚です。
SQLを扱う際には、クエリ結果がnullになるケースを適切に処理することが重要です。特に、条件のカラムが想定しないデータになる可能性がある場合、IF ELSE構文を使用する際に注意が必要です。この記事では、クエリの境界値的な考慮について説明します。
※　随時更新：2024/07/17

 問題の背景
IF ELSE構文を使用する際、たとえば理論的には全ての条件をカバーしている場合、最後のELSEは不要に思えるかもしれません。しかし、条件のカラムに想定しないデータが含まれた場合、この仮定は成立しません。例えば、以下のようなクエリを考えてみます。
SELECT 
 ...]]></description><link>https://zenn.dev/aipics/articles/b72c28504b9080</link><guid isPermaLink="true">https://zenn.dev/aipics/articles/b72c28504b9080</guid><pubDate>Wed, 17 Jul 2024 00:28:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zXRTAGwT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PostgreSQL%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E7%25B5%2590%25E6%259E%259C%25E3%2581%258C%25E6%259C%259F%25E5%25BE%2585%25E7%25B5%2590%25E6%259E%259C%25E9%2580%259A%25E3%2582%258A%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEELSE%25E6%25A7%258B%25E6%2596%2587%25E3%2581%25AE%25E8%2580%2583%25E6%2585%25AE%25E7%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nakatsuka%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUxNTU3NTQyNzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Aipictors%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDNBRkJWT3p2VERZeVpfbkNLOXE1QmRidk5ySUNEUjIwZmhUNUJVLVc0eGc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakatsuka</dc:creator></item><item><title><![CDATA[Zodスキーマをもとにクラスを定義するライブラリを公開しました【TypeScript】]]></title><description><![CDATA[
 概要
https://www.npmjs.com/package/validated-extendable

いちばん基本の使用例
import { Validated } from "validated-extendable";
import { z } from "zod";

const schema = z.object({
  name: z.string().min(1),
  age: z.number().nonnegative().int(),
});

class Person extends Validated(schema) {
  greet() {
   ...]]></description><link>https://zenn.dev/takagiy/articles/64824b116fccc7</link><guid isPermaLink="true">https://zenn.dev/takagiy/articles/64824b116fccc7</guid><pubDate>Tue, 16 Jul 2024 09:14:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EFPs0xye--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A8%25E3%2581%25AB%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25E3%2580%2590TypeScript%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takagiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUl0YnZta3dNaUxRaHJYdXFVTWFyaWMtT0ZYUFRPTTRlTGgwdEhpbnNzRXY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takagiy</dc:creator></item><item><title><![CDATA[Next.js App Router でクエリパラメーターをすべて取得する方法]]></title><description><![CDATA[
 やりたいこと
Next.js App Router でクエリパラメーターを文字列形式ですべて取得したい
※ 使用している Next.js のバージョンは14系（App Router） です

 Server Component の場合
Server Component の場合、page.tsx の Props で searchParams を受け取ることができる
しかし searchParams は Plain Object の形式で返却されるので、URLSearchParams の引数に searchParams を渡して toString で文字列に変換すると、ブラウザのアドレス...]]></description><link>https://zenn.dev/k_kazukiiiiii/articles/1c12a1acfd05b9</link><guid isPermaLink="true">https://zenn.dev/k_kazukiiiiii/articles/1c12a1acfd05b9</guid><pubDate>Tue, 16 Jul 2024 07:18:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R1dfTYLV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520App%2520Router%2520%25E3%2581%25A7%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2583%2591%25E3%2583%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E3%2581%2599%25E3%2581%25B9%25E3%2581%25A6%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kimura%2520Kazuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2MDJhZGIxMWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kimura Kazuki</dc:creator></item><item><title><![CDATA[クライアント・サーバー間の一貫したバリデーション管理: Conform + Server Actions]]></title><description><![CDATA[
 はじめに 🚩
フォームの状態管理やクライアントサイドのバリデーションには、React Hook Form（RHF）がよく採用されると思います。しかし、RHF の Server Actions サポートは現在実験的な段階にあり、開発が停滞しています。
https://github.com/react-hook-form/react-hook-form/pull/11061
一方、Conform はすでに Server Actions に対応しています。そこで本記事では、React 19/ Next.js 15 の環境で Conform と Server Actions 使って、クライア...]]></description><link>https://zenn.dev/chot/articles/410e17750860bf</link><guid isPermaLink="true">https://zenn.dev/chot/articles/410e17750860bf</guid><pubDate>Tue, 16 Jul 2024 05:34:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZYETF7am--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25BB%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E9%2596%2593%25E3%2581%25AE%25E4%25B8%2580%25E8%25B2%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E7%25AE%25A1%25E7%2590%2586%253A%2520Conform%2520%252B%2520Server%2520Actions%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Tsuboi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUzMmU3Zjg2MTIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tsuboi</dc:creator></item><item><title><![CDATA[TypeScriptで順列の関数を自作する]]></title><description><![CDATA[
 前提
今回自作する関数は、n個からr個とる順列です。
再帰を利用することで、問題をより小さな部分問題に分割することができます。
具体的には、ある要素を1つ選択した後に残りの部分に対して再帰的に順列を生成する、というように問題を分割することができます。
そのため、再帰を使用します。

 ソースコード

permutation.ts
function permutation(setNumbers: number[], extractNumber: number): number[][] {
    let answer: number[][] = [];
    if (extractN...]]></description><link>https://zenn.dev/takahiro0404/articles/dd6c9814fc4904</link><guid isPermaLink="true">https://zenn.dev/takahiro0404/articles/dd6c9814fc4904</guid><pubDate>Tue, 16 Jul 2024 01:55:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AK50uuXZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E9%25A0%2586%25E5%2588%2597%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takahiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I0MGUyNDk1NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takahiro</dc:creator></item><item><title><![CDATA[【React】useOptimisticってどうなの？調べてみました！]]></title><description><![CDATA[React 19系から追加されたuseOptimisticというAPIを弄った所感を述べていきます。

 楽観的更新とは
楽観的更新とは、フロントエンドの操作を通してサーバーへの反映を行うとき、そのレスポンスを待たずにUIを更新する手法です。

通常の更新: UIを操作 → サーバーにリクエスト → レスポンスが返る → UIに反映
楽観的更新: UIを操作 → サーバーにリクエスト → 想定したレスポンスが返った場合のUIを反映 → レスポンスが返り、その結果に応じて後続処理を行う。(例: エラーの場合はもとに戻すなど)

身近な場合としては、Twitterでいいねボタンやフォローボタ...]]></description><link>https://zenn.dev/yhase_rqp/articles/7685facb67cb22</link><guid isPermaLink="true">https://zenn.dev/yhase_rqp/articles/7685facb67cb22</guid><pubDate>Tue, 16 Jul 2024 00:30:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dj5m71fC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591useOptimistic%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25A9%25E3%2581%2586%25E3%2581%25AA%25E3%2581%25AE%25EF%25BC%259F%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YmU3ZDM3N2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yha</dc:creator></item><item><title><![CDATA[頼む、リアクティブな値に対して.valueを忘れたときに警告してくれ]]></title><description><![CDATA[
 はじめに
今回は、Vue のリアクティブな値に対して .value を忘れた場合に警告を出す ESLint のカスタムルールを作ってみた話です。
正直内容が拙いと思いますが、ぜひ目を通していただけると幸いです。
Vue や Nuxt ではリアクティブな値に対してアクセスする時は reactiveValue.value といった感じで、.value をつける必要があります。
これを忘れるとバグの原因になるのですが、よく忘れられるんですよね。私に。
リアクティブな値に対して .value をつけてアクセスしなければならないという仕様は、個人的にはバグの温床であると思っていて、これを防ぐた...]]></description><link>https://zenn.dev/xeiculy/articles/62ce028dc6eb7a</link><guid isPermaLink="true">https://zenn.dev/xeiculy/articles/62ce028dc6eb7a</guid><pubDate>Tue, 16 Jul 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2CSiovJp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%25A0%25BC%25E3%2582%2580%25E3%2580%2581%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25AA%25E5%2580%25A4%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6.value%25E3%2582%2592%25E5%25BF%2598%25E3%2582%258C%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E8%25AD%25A6%25E5%2591%258A%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%259F%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDQ4ZGE2NDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>柿</dc:creator></item><item><title><![CDATA[react-google-mapを試してみる]]></title><description><![CDATA[
 経緯
google.maps.Markerが 2024年2月にサポートが終了したこともあり、現在利用しているライブラリの対応を待とうとしましたが、更新の可能性は低そうでした。（issueはたてられていましたが、更新のモチベーションはなさそうでした）そんなことから、別のライブラリに移行を考えていた中でvisgl/react-google-mapsを見つけました。このライブラリは2024/05/11にリリースされたばかりで、比較的新しいライブラリなので試してみようと思いました。ドキュメントもしっかり用意されており簡単に実装することができると思います。

 実際に使ってみる
実際にvisg...]]></description><link>https://zenn.dev/iririn/articles/9b156eb262b961</link><guid isPermaLink="true">https://zenn.dev/iririn/articles/9b156eb262b961</guid><pubDate>Mon, 15 Jul 2024 11:36:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xW1H8T7o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:react-google-map%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:IRUG%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4Wi1BNURlWGg5dE9vY0pQSGs1M01VWVhxcEFEQ09NWXJJMlJqa3Y9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>IRUG</dc:creator></item><item><title><![CDATA[[K, U] extends [U, K] ← ナニコレ]]></title><description><![CDATA[タイトルは初見時の自分の気持ちでした。内容は結構あっさりしたもので、5分あれば読めると思います。
「あーなるほどね」となった方はわざわざ読む必要がない記事っぽいです。

 型の互換性チェック
一言で言ってしまえばそういうことです。KとUが互いに置き換え可能かどうかを確認しています。
これがKとUのままだと分かりづらいのですが、適当な型に置き換えてみると分かりやすいです。
type Test1 = [1, 1] extends [1, 1] ? true : false;  // true
type Test2 = [number, number] extends [number, num...]]></description><link>https://zenn.dev/bs_kansai/articles/87c5cde1be86b6</link><guid isPermaLink="true">https://zenn.dev/bs_kansai/articles/87c5cde1be86b6</guid><pubDate>Mon, 15 Jul 2024 11:03:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pqg40Mk4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BK%252C%2520U%255D%2520extends%2520%255BU%252C%2520K%255D%2520%25E2%2586%2590%2520%25E3%2583%258A%25E3%2583%258B%25E3%2582%25B3%25E3%2583%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kanon%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMDEzZTI2ODYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Kobe.ts%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MWQ5MmViYmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanon</dc:creator></item><item><title><![CDATA[Nuxt 3・Nuxt 4 の useFetch() を完全に理解する（したい）]]></title><description><![CDATA[以前（まだ Nuxt 3 がベータリリースだった頃）に『Nuxt 3 の useFetch() と useAsyncData() の使い方』という記事を書きました。
その後、より多機能になり、またベストプラクティス的な使い方が分かってきたこともあり、改めて useFetch() についてまとめてみたいと思います。

 はじめに
ここ数年、一貫して Nuxt 3 を使用している僕ですが、主要なコンポーザブルである useFetch については当初の理解が違っていたものもありました。
少しずつ修正しながら、都度コードを書き換えてきたのですが、その過程で得られた知見を共有したいと思います。
な...]]></description><link>https://zenn.dev/comm_vue_nuxt/articles/nuxt-use-fetch-guide</link><guid isPermaLink="true">https://zenn.dev/comm_vue_nuxt/articles/nuxt-use-fetch-guide</guid><pubDate>Mon, 15 Jul 2024 08:16:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dMMsjJUn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nuxt%25203%25E3%2583%25BBNuxt%25204%2520%25E3%2581%25AE%2520useFetch%2528%2529%2520%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2588%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:coedo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MTZlOWFlNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Vue%25E3%2583%25BBNuxt%2520%25E6%2583%2585%25E5%25A0%25B1%25E3%2581%258C%25E9%259B%2586%25E3%2581%25BE%25E3%2582%258B%25E5%25BA%2583%25E5%25A0%25B4%2520%252F%2520P...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c4STBvUEtWYXpIUGdWdUFwVFNiaFdXUGVZd0l2Rkd3QlV0alAwaHc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>coedo</dc:creator></item><item><title><![CDATA[2024年7月 最新版 Eslint & prettier & Typescript セットアップ方法]]></title><description><![CDATA[
 背景
新しくプロジェクトを立ち上げるたびに、eslintのバージョンが上がっていたりして、毎回セットアップ方法が変わるので、毎回調べる人が多いと思います。今どきはめちゃくちゃ簡単になっているので、ここにおいておきます。

 内容
プロジェクト内のディレクトリで、次のコマンドを実行します。yarnを使っていても、このコマンドで大丈夫です。
npm init @eslint/config@latest
そこから、こんな感じの質問がされるので、それらを回答します
✔ How would you like to use ESLint? · problems
✔ What type of mo...]]></description><link>https://zenn.dev/szkyk/articles/31904c47a494a4</link><guid isPermaLink="true">https://zenn.dev/szkyk/articles/31904c47a494a4</guid><pubDate>Mon, 15 Jul 2024 07:22:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B1PFWIib--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2024%25E5%25B9%25B47%25E6%259C%2588%2520%25E6%259C%2580%25E6%2596%25B0%25E7%2589%2588%2520Eslint%2520%2526%2520prettier%2520%2526%2520Typescript%2520%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:szkyk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTRfd2RMa2hRNjlsYl9SdkpNckNSQ3gxVE9OYlNqdU9mTl9DTENPWlFjY0M0c3BRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>szkyk</dc:creator></item><item><title><![CDATA[Web サービスをフロントもバックも TypeScript で作る時の構成例]]></title><description><![CDATA[せっかくなのでフロントもバックも TypeScript を使おう、ということで、アレコレ考えて作った構成を共有します。何かの参考になれば幸いです。
下記の Web サービスを開発するときに使いました。
https://nc.harmonicom.jp/

 システム構成
ランタイム：Bun
フレームワーク： Express
ORM：Drizzle ORM
インフラ：Docker
私的にはバックエンド中心で処理・出力し、そのうえでフロントエンドを使うのが好きです。

 ディレクトリ・ファイル構成の例
あまり深くディレクトリを掘りたくなかったので、ルートに散在しています。
├── asset...]]></description><link>https://zenn.dev/yamakazoo/articles/b497bfdf91c13b</link><guid isPermaLink="true">https://zenn.dev/yamakazoo/articles/b497bfdf91c13b</guid><pubDate>Mon, 15 Jul 2024 05:47:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SbWckMxm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Web%2520%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2582%2592%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2582%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2582%2520TypeScript%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E6%2599%2582%25E3%2581%25AE%25E6%25A7%258B%25E6%2588%2590%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yamakazoo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0YTM5ODY2NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamakazoo</dc:creator></item></channel></rss>