<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 22 Jul 2024 00:18:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Supabaseでリアルタイムチャットアプリを作る]]></title><description><![CDATA[SupabaseにはRealtime APIがあります。接続しているクライアントとのメッセージを送受信できるAPIになります。
このAPIを使用して簡単なリアルタイムチャットアプリを作ってみました。
コード全体はこちらを参考にしてください。
https://github.com/k-logic563/supabase-chat-app
使用モジュールのバージョンは以下の通りです。
主要なモジュールのみ載せていますので、その他はリポジトリのpackage.jsonを参考にしてください。
"vite": "^5.3.4"
"vue": "^3.4.31"
"typescript": "^5....]]></description><link>https://zenn.dev/k_log24/articles/1912d857cc54f3</link><guid isPermaLink="true">https://zenn.dev/k_log24/articles/1912d857cc54f3</guid><pubDate>Sun, 21 Jul 2024 23:47:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EaIpt8T4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Supabase%25E3%2581%25A7%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kohei.com%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FhYTBhMmFjNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kohei.com</dc:creator></item><item><title><![CDATA[React × TypeScriptでポートフォリオを作った。]]></title><description><![CDATA[
 はじめに
2023年10月ごろから本格的にプログラマー転職を考え、ドットインストールにてHTML、CSS、JavaScriptを学んだのち、YoutubeやZennの記事、そしてドキュメントを通してReactを勉強しました。
何かポートフォリオを作成したく、好きな写真家さんである石田真澄さんのポートフォリオサイトを模倣したサイトを作成しようと考え、作り終えたはいいものの何かレガシーとして文章化した方が、就活や今後のために良いだろうと思い、ブログ化することにしました。文章を書くのはとても好きな作業なので、今まではObsidianで疑問点の解決方法などをアウトプットしていましたが、ローカ...]]></description><link>https://zenn.dev/interprecord/articles/f0b7f3711a8766</link><guid isPermaLink="true">https://zenn.dev/interprecord/articles/f0b7f3711a8766</guid><pubDate>Sun, 21 Jul 2024 17:17:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1NDC4tah--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25C3%2597%2520TypeScript%25E3%2581%25A7%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AA%25E3%2582%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:glycerin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MzVkYTUzOWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glycerin</dc:creator></item><item><title><![CDATA[Next.js って App Router が出てきて平和じゃなくなったよね]]></title><description><![CDATA[
 背景
Next.js に App Router が導入されてから1年近くが経ちました。しかし、未だに App Router を前提として設計のベストプラクティスが定まっておらず、身近なフロントエンドエンジニアはみな「まだプロダクトに取り入れるには考えることが多いよね」という共通認識のまま止まっているような気がしています。
また、App Router が導入されるまでは、技術選定の無難な選択肢として Next.js が最有力でした。しかし、現在は App Router の設計のプラクティスが未発達なことや、オーバースペックであるという見方が出てきており、検討しなければならないことが多く...]]></description><link>https://zenn.dev/noko_noko/articles/3ccc64c389259c</link><guid isPermaLink="true">https://zenn.dev/noko_noko/articles/3ccc64c389259c</guid><pubDate>Sun, 21 Jul 2024 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MuYQqHdb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25A3%25E3%2581%25A6%2520App%2520Router%2520%25E3%2581%258C%25E5%2587%25BA%25E3%2581%25A6%25E3%2581%258D%25E3%2581%25A6%25E5%25B9%25B3%25E5%2592%258C%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2581%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A4%25E3%2581%25A1%25E3%2581%25AE%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjZDZjM2E1ZmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>つちのこ</dc:creator></item><item><title><![CDATA[【React】useRefの深掘り ~ useStateとの違い、レンダリングの際の挙動等]]></title><description><![CDATA[
 はじめに
本記事ではuseRef, useStateについて説明した後、両者の違いについて解説します。

 useRef とは
レンダリングに必要ない値を参照する際に用いられる React Hook です。

 入力


initialValue: ref のcurrentの初期値。最初のレンダリング後、この値は無視されます。


 返り値


currentというプロパティを有するオブジェクトを返します。currentは最初initialValueで初期化されますが、後に他の値を指定することもできます。このrefオブジェクトを JSX ノードのref属性として React に渡すと...]]></description><link>https://zenn.dev/tanukichi001/articles/20240718_day1</link><guid isPermaLink="true">https://zenn.dev/tanukichi001/articles/20240718_day1</guid><pubDate>Sun, 21 Jul 2024 14:37:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kYIg9Xof--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591useRef%25E3%2581%25AE%25E6%25B7%25B1%25E6%258E%2598%25E3%2582%258A%2520%7E%2520useState%25E3%2581%25A8%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2580%2581%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E9%259A%259B%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E7%25AD%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25AC%25E3%2581%258D%25E3%2581%25A1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxZjQzZmI5ZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たぬきち</dc:creator></item><item><title><![CDATA[入社3週間で同僚からアニメ作品のオススメを捌ききれなくなったので審議用Botを作ってみました]]></title><description><![CDATA[こんにちは。ダイの大冒険ガチ勢のbun913と申します。
今回は、SlackとAWSの Lambda + Bedrock を利用して自分用のAI Chatを作成してみました。

画像引用: https://dev.classmethod.jp/articles/amazon-bedrock-slack-chat-bot-part2/
なお、上記画像も含めて、今回の構成はこちらの記事Amazon BedrockとSlackで生成AIチャットボットアプリを作る (その2：Lambda＋API Gatewayで動かす) | DevelopersIOを参考にさせていただきました。非常にわかりやす...]]></description><link>https://zenn.dev/moneyforward/articles/3eadb58169f235</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/3eadb58169f235</guid><pubDate>Sun, 21 Jul 2024 13:52:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yt1pmHsR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E7%25A4%25BE3%25E9%2580%25B1%25E9%2596%2593%25E3%2581%25A7%25E5%2590%258C%25E5%2583%259A%25E3%2581%258B%25E3%2582%2589%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E4%25BD%259C%25E5%2593%2581%25E3%2581%25AE%25E3%2582%25AA%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%25E3%2582%2592%25E6%258D%258C%25E3%2581%258D%25E3%2581%258D%25E3%2582%258C%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E5%25AF%25A9%25E8%25AD%25B0%25E7%2594%25A8Bot%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bun913%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNGVhMDEyMDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bun913</dc:creator></item><item><title><![CDATA[Playwright+GitHub Actions*E2E with VRT 環境構築とCI/CD連携の知見]]></title><description><![CDATA[
 はじめに
業務でPlaywrightの環境構築及びCI/CD連携担当したことから、E2EテストとVRTのベストな構成をずっと悩んでいました。
自分の中である程度納得できる形まで落とし込めたので、その知見を残しておきます。
🎭Playwrigth
Microsoftが開発したテストツールです。複数ブラウザ対応、自動待機機能、並列処理などによりE2Eテストを実施します。また、スクリーンショットの比較によるテスト（VRT:Visual Regression Testing）により視覚的変更も検出可能です。元々Puppeteerを作っていたチームにより開発が行われているようです。
https...]]></description><link>https://zenn.dev/ishiyama/articles/c85138b42e3e1f</link><guid isPermaLink="true">https://zenn.dev/ishiyama/articles/c85138b42e3e1f</guid><pubDate>Sun, 21 Jul 2024 10:44:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LlJ8S2DC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Playwright%252BGitHub%2520Actions%252AE2E%2520with%2520VRT%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A8CI%252FCD%25E9%2580%25A3%25E6%2590%25BA%25E3%2581%25AE%25E7%259F%25A5%25E8%25A6%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ishiyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1ODA5ZmJmZDMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ishiyama</dc:creator></item><item><title><![CDATA[TypeScriptの実行環境をBunとBiomeに移行してみた]]></title><description><![CDATA[
 はじめに
転職してからサーバーサイドの勉強や AWS の SAA の勉強をしていて、一旦一区切り着きました。(SAA は無事合格しました。)
TypeScript もかなりアップデートが入り、気づいたらバージョンは5.5でした。
ここのキャッチアップから始めようと思い、勉強用の実行環境を久しぶりに立ち上げふと思いました。
「環境だいぶ昔に作ったからパッケージのバージョン古いんじゃね？」
なので確認してみました。

かなり古かったので、勉強の前に環境をアップデートしようと思いました。

 既存のパッケージのバージョンアップ
当初は既存のパッケージのバージョンアップで進めていたのですが、...]]></description><link>https://zenn.dev/pe_be_o/articles/maeta-187-articles_c7602bb31f03d7</link><guid isPermaLink="true">https://zenn.dev/pe_be_o/articles/maeta-187-articles_c7602bb31f03d7</guid><pubDate>Sun, 21 Jul 2024 10:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c2vfJOO5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592Bun%25E3%2581%25A8Biome%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Maeta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNGE3YTFjNzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maeta</dc:creator></item><item><title><![CDATA[ローカル環境でTypeScriptを実行する手順]]></title><description><![CDATA[
 1.TypeScriptをJavaScriptにコンパイルしてからNode.jsで実行する場合

 1.1.Node.jsをインストール
公式サイトからダウンロードできます。

 1.2.TypeScriptをインストール
コマンドラインで以下のコマンドを実行して、TypeScriptをインストールします：
npm install -g typescript

 1.3.TypeScriptファイルの作成
TypeScriptファイル（例：example.ts）を作成します。

 1.4.JavaScriptにコンパイル
コマンドラインで以下のコマンドを実行して、TypeScript...]]></description><link>https://zenn.dev/zaruta/articles/d453ca6d3bed88</link><guid isPermaLink="true">https://zenn.dev/zaruta/articles/d453ca6d3bed88</guid><pubDate>Sun, 21 Jul 2024 09:47:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D-AjRWkR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7TypeScript%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zaruta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VVMjRBckJvN3ltdnFLcEFOc09iUW41Z0tSMnhfSnpXTnpmeEVFZVZKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaruta</dc:creator></item><item><title><![CDATA[Github CLIをインストールしようとしたらハマった💦]]></title><description><![CDATA[
 Tips💡
本屋さんで買ってみたGitHub CI/CD実践ガイドを読んで、Github CLIの環境構築をしようとしたら、些細なミスでハマった💦
https://gihyo.jp/book/2024/978-4-297-14173-8
install:
brew install gh
show version:
gh --version
loginして、Githubと連携する。ここからハマった💦
ターミナルにワンタイムパスワードが貼ってあるのに気づかなかった笑
gh auth login
Title for your SSH key: (GitHub CLI)
自分で名前をつけるよ...]]></description><link>https://zenn.dev/joo_hashi/articles/d08592bf798256</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/articles/d08592bf798256</guid><pubDate>Sun, 21 Jul 2024 07:33:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TES4qg9a--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Github%2520CLI%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JboyHashimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjOTBiY2M0M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[JavaScriptにおけるビルドを理解する!!]]></title><description><![CDATA[
 はじめに
これまでビルドについては、『トランスパイルしてバンドルして〜』と言ったように何となく雰囲気で捉えていました。しかし、設定ファイルを修正するにあたり理解が足りない箇所があったため、ビルドプロセス全体について調べてみました。今回は『具体的にビルドは何をしてくれるの？』と言った疑問を解消することを目的に記事を書いてみます。

 ビルドとは
そもそも”ビルド”とはどのようなプロセスを表しているのでしょうか？
JavaScriptにおけるビルドプロセスは、開発中のコードを本番環境で効率よく実行できる形に「変換」するための一連のステップを指します。このプロセスには、コードの最適化や変換...]]></description><link>https://zenn.dev/atusi/articles/02754c98953061</link><guid isPermaLink="true">https://zenn.dev/atusi/articles/02754c98953061</guid><pubDate>Sun, 21 Jul 2024 07:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e-_52UZM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2521%2521%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Atsushi%2520hatakeyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYWE3ODNjN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Atsushi hatakeyama</dc:creator></item><item><title><![CDATA[TypeScriptでe-Stat APIのデータを取得する]]></title><description><![CDATA[
 TypeScriptでe-Stat APIのデータを取得する方法

 e-Stat APIの概要
e-Stat APIは、日本の政府統計総合窓口（e-Stat）が提供する公式APIです。このAPIを使用することで、日本の様々な統計データに簡単にアクセスできます。主な特徴は以下の通りです：


豊富なデータセット：人口統計、経済指標、社会調査など、幅広い分野のデータが利用可能です。


リアルタイムデータ：最新の統計情報にアクセスできます。


カスタマイズ可能なクエリ：特定の地域、期間、カテゴリーなどでデータをフィルタリングできます。


JSON形式のレスポンス：プログラムで扱いや...]]></description><link>https://zenn.dev/uruhayato373/articles/5ba8d0f944a138</link><guid isPermaLink="true">https://zenn.dev/uruhayato373/articles/5ba8d0f944a138</guid><pubDate>Sun, 21 Jul 2024 07:11:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fng31IUP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7e-Stat%2520API%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:uruhayato373%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3E2VE5PWVVhRlpoSVRRd2FzNDk2azhfbWlKN3c3REZGb0NTS1A0N1VyYkxqUjkyaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uruhayato373</dc:creator></item><item><title><![CDATA[【基本】CDKの初期設定とコマンド]]></title><description><![CDATA[
 はじめに
CDKを使用するために必要な設定を備忘録として残しておきます。
前提：Mac使用

 インストール

 AWS CLIをインストール
https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html

ブラウザで、macOS pkg ファイルをダウンロードします。https://awscli.amazonaws.com/AWSCLIV2.pkg

ダウンロードしたファイルを実行し、その後は画面の指示に従います。
インストールできたことの確認。表示されればOK。

which...]]></description><link>https://zenn.dev/tnakano/articles/4a1b1c91e448d3</link><guid isPermaLink="true">https://zenn.dev/tnakano/articles/4a1b1c91e448d3</guid><pubDate>Sun, 21 Jul 2024 04:19:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a8UBdteA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%259F%25BA%25E6%259C%25AC%25E3%2580%2591CDK%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2588%25E3%2582%2589%25E5%2591%25BC%25E5%2590%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzM2FlZTI5Y2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>えら呼吸</dc:creator></item><item><title><![CDATA[NestJSのビルドをswcを使って高速したかったが苦戦した話]]></title><description><![CDATA[
 はじめに
NestJS v10でSWCサポートが追加され、nest buildにオプションを渡すだけでSWCが利用できるようになりました。
詳細はこちら: NestJS v10リリース情報
しかし、特定の条件下でうまく動作しない問題に悩まされましたが、試行錯誤の末に解決することができましたので、共有します。

 問題

 前提
プロジェクト構成は以下の通りです：
.
├── src/
│   └── hoge/
│       └── hoge.ts
├── tasks/
│   └── hogeTask.ts
├── prisma/
├── batch/
│   └── hogeB...]]></description><link>https://zenn.dev/smartcamp/articles/d3b9601782275d</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/d3b9601782275d</guid><pubDate>Sun, 21 Jul 2024 03:46:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HoRpuWGs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:NestJS%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592swc%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E9%25AB%2598%25E9%2580%259F%25E3%2581%2597%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%258C%25E8%258B%25A6%25E6%2588%25A6%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:uki884%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsveS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uki884</dc:creator></item><item><title><![CDATA[TypeScriptでRESAS-APIの都道府県データを利用する。]]></title><description><![CDATA[以前、TypeScriptでRESAS-APIを利用する方法について書きました。
https://zenn.dev/uruhayato373/articles/611aa2c7ffe51c
この記事では、RESAS（地域経済分析システム）APIからデータを取得し、e-Stat APIで使用できる形式に変換する方法について書きます。

 1. 基本構造
まず、モジュールの全体構造を見てみましょう。
import regionsData from 'utils/prefecture/regions.json'
import handleResasAPI from 'utils/resas'
...]]></description><link>https://zenn.dev/uruhayato373/articles/679247974df61b</link><guid isPermaLink="true">https://zenn.dev/uruhayato373/articles/679247974df61b</guid><pubDate>Sun, 21 Jul 2024 02:48:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LAlzbr_V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7RESAS-API%25E3%2581%25AE%25E9%2583%25BD%25E9%2581%2593%25E5%25BA%259C%25E7%259C%258C%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:uruhayato373%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3E2VE5PWVVhRlpoSVRRd2FzNDk2azhfbWlKN3c3REZGb0NTS1A0N1VyYkxqUjkyaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uruhayato373</dc:creator></item><item><title><![CDATA[Zennの投稿をブログに取り込む（svelte）]]></title><description><![CDATA[
 はじめに
Svelteを用いて構築した個人サイトに技術ブログページを追加し、記事を投稿していくことを検討していました。この記事ではZennの投稿を個人サイトに反映する方法を解説します。

 個人サイトにZennの投稿を反映
これまで技術ブログはZennで投稿しており、その使い勝手が非常に良かったため、今後もZennでの投稿を続けたいと思っています。そこで、ZennからRSSフィードを取得し、最新の記事を自動的に個人サイトに反映させる仕組みを導入しました。

個人サイトにZennの投稿を反映
個人サイト→
GitHubリポジトリ→
これにより、Zennでの新しい投稿が個人サイトにも表示...]]></description><link>https://zenn.dev/shige99/articles/5e2984975b045d</link><guid isPermaLink="true">https://zenn.dev/shige99/articles/5e2984975b045d</guid><pubDate>Sat, 20 Jul 2024 15:10:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4hdV5JHt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E3%2581%25AE%25E6%258A%2595%25E7%25A8%25BF%25E3%2582%2592%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2581%25AB%25E5%258F%2596%25E3%2582%258A%25E8%25BE%25BC%25E3%2582%2580%25EF%25BC%2588svelte%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shige%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwNjQ5Nzk2OTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shige</dc:creator></item><item><title><![CDATA[Typescript PickとOmit]]></title><description><![CDATA[Typescriptで、
Todoの型指定としてtodo.tsを作成
export type TodoType = {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
};
使いたい側のコンポーネントでtodo.tsをimportして使用する時

 Pick
Pickを使うと、指定したい型の中から使いたいプロパティだけを抜き出せる
import { TodoType } from "./types/todo";

export const Todo = (
  props: Pick&lt;To...]]></description><link>https://zenn.dev/nobyn0312/articles/fac73af0efcc46</link><guid isPermaLink="true">https://zenn.dev/nobyn0312/articles/fac73af0efcc46</guid><pubDate>Sat, 20 Jul 2024 14:01:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--89zwZZLN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Typescript%2520Pick%25E3%2581%25A8Omit%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:inouenobuhide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjYzg2ZDIwODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>inouenobuhide</dc:creator></item><item><title><![CDATA[Zennみたいな目次を作りたい！]]></title><description><![CDATA[
 はじめに
現在ブログサイトを作成しており、ZennやQiitaのような目次機能を追加したいと考えています。
色々調べてみたところ、Tocbotが使いやすそうだったので、これを使ってみることにしました！

 Tocbotとは
Tocbotは、htmlの見出しタグから目次を自動的に作成してくれるライブラリです。
目次をクリックすればhtmlの該当箇所まで自動でスクロールしてくれたり、見た目も自分好みにカスタマイズすることができます。

 使い方
以下は基本的なtocbotの導入方法になります！

 前提条件（技術スタック）

フロントエンド: Next.js, TypeScript, T...]]></description><link>https://zenn.dev/uraaaa24/articles/ac0caeb1b86eef</link><guid isPermaLink="true">https://zenn.dev/uraaaa24/articles/ac0caeb1b86eef</guid><pubDate>Sat, 20 Jul 2024 11:46:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VBJufSc1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E7%259B%25AE%25E6%25AC%25A1%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYzA1ZjYyNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ura</dc:creator></item><item><title><![CDATA[How to get started with TestRail]]></title><description><![CDATA[API Testing について。
Playwright [1] で API Testing を組み立てており、 TestRail [2] と連携させる。
Playwright は複数の Report 機能 [3] があり、それを TestRail に表示させることができる。
最近は E2E の実践のために、本を読みながら Playwright で遊んでいる。
AWS CDK との格闘の合間の休憩として 🍵
https://gihyo.jp/book/2024/978-4-297-14220-9
本の購入は BENTO にお世話になっている。thank you kubell
https:...]]></description><link>https://zenn.dev/dannya/articles/0571b69a780dd4</link><guid isPermaLink="true">https://zenn.dev/dannya/articles/0571b69a780dd4</guid><pubDate>Sat, 20 Jul 2024 11:37:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UkD18msh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:How%2520to%2520get%2520started%2520with%2520TestRail%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daisuke%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiNDY0NzBmMTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daisuke Yamamoto</dc:creator></item><item><title><![CDATA[短時間でできるNuxt3入門（Vue3, Naive UI, Tailwind CSS, pinia）]]></title><description><![CDATA[Nuxtの最新バージョンを使ってサンプルアプリを作りました。
Nuxt3の最新機能を豊富に使っています。

APIにはjsonplaceholderを使って、ユーザーやポストの情報を管理できるようなシステムとなっています。
下記が本プロジェクトの環境です。
- Nuxt 3.12.2
- pinia 2.1.7
- tailwindcss 3.4.4
- naive-ui 2.38.2

動画で学習できるコースも出してるので、ぜひご覧ください。
https://www.udemy.com/course/nuxt3-introduction/?referralCode=70826E31016926E92545]]></description><link>https://zenn.dev/h_taro/books/f18234015f4108</link><guid isPermaLink="true">https://zenn.dev/h_taro/books/f18234015f4108</guid><pubDate>Sat, 20 Jul 2024 00:12:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Nlj_MZAo--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci82ODUxZDc2OWJhLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>taro</dc:creator></item><item><title><![CDATA[TypeScriptでRESAS-APIを利用する]]></title><description><![CDATA[
 はじめに
RESAS（Regional Economy and Society Analyzing System）は、日本の地域経済分析システムであり、内閣府のまち・ひと・しごと創生本部が提供する官民データ利活用のためのプラットフォームです。このAPIを使用することで、開発者は日本の様々な地域経済データにプログラムからアクセスできます。本記事では、TypeScriptを使用してRESAS-APIにアクセスする方法を詳しく解説します。

 RESAS-APIの概要
RESAS-APIは以下のようなデータへのアクセスを提供しています：

人口動態：年齢別人口、人口増減、将来人口推計など
...]]></description><link>https://zenn.dev/uruhayato373/articles/611aa2c7ffe51c</link><guid isPermaLink="true">https://zenn.dev/uruhayato373/articles/611aa2c7ffe51c</guid><pubDate>Fri, 19 Jul 2024 22:09:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B67TpdI2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7RESAS-API%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:uruhayato373%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3E2VE5PWVVhRlpoSVRRd2FzNDk2azhfbWlKN3c3REZGb0NTS1A0N1VyYkxqUjkyaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uruhayato373</dc:creator></item></channel></rss>