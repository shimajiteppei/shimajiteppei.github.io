<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/javascript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/javascript/feed"/>
  <title>JavaScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでJavaScriptタグが付けられた新着記事</description>
  <updated>2024-06-30T20:52:51+09:00</updated>
  <link>https://qiita.com/tags/javascript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1879717</id>
    <published>2024-06-30T20:52:51+09:00</published>
    <updated>2024-06-30T20:52:51+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/youtoy/items/8011696a9f45e1881824"/>
    <url>https://qiita.com/youtoy/items/8011696a9f45e1881824</url>
    <title>wavesurfer.js での簡単に波形表示（インタラクティブな音声再生も可能）を p5.js Web Editor上で動かす</title>
    <content type="html">はじめに
今回の記事は、以下の wavesurfer.js を題材にしたものです。
●wavesurfer.js | audio waveform player JavaScript library…</content>
    <author>
      <name>youtoy</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1879695</id>
    <published>2024-06-30T20:11:24+09:00</published>
    <updated>2024-06-30T20:11:24+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/ryome/items/3b50c4cc74b2374127e9"/>
    <url>https://qiita.com/ryome/items/3b50c4cc74b2374127e9</url>
    <title>Playwrightのインストール方法</title>
    <content type="html">事前準備
Node.jsのインストール
以下のリンクを参考にNode.jsをインストールする
https://qiita.com/ryome/items/eec08b28aff294e8c3d6
P…</content>
    <author>
      <name>ryome</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1879663</id>
    <published>2024-06-30T18:50:09+09:00</published>
    <updated>2024-06-30T20:36:25+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/bskcorona-github/items/0e29ae9078b9ca7efb41"/>
    <url>https://qiita.com/bskcorona-github/items/0e29ae9078b9ca7efb41</url>
    <title>論理演算子の秘密：&amp;&amp;と||をマスターして、コードを魔法のようにシンプルに！</title>
    <content type="html">論理演算子の考え方
&amp;amp;&amp;amp; (AND)について
こんな記述があるとして
result = a &amp;amp;&amp;amp; b;

aとbがtrueならtrueを返すって認識だったんですが、間違いらしいです…
&amp;amp;&amp;amp;（論理AND…</content>
    <author>
      <name>bskcorona-github</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1879646</id>
    <published>2024-06-30T18:06:39+09:00</published>
    <updated>2024-06-30T18:06:39+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/moko_san/items/dace2fcf829104cd3680"/>
    <url>https://qiita.com/moko_san/items/dace2fcf829104cd3680</url>
    <title>【JavaScript】someメソッドとeveryメソッド</title>
    <content type="html">someメソッド
配列に対して、コールバック関数で指定した条件に合致する（trueを返す）要素が1つでも
ある場合にtrueを返すメソッド。
例：配列内に文字型の要素が含まれるかどうかを判定する処理
const isString = typeof elem === 'string';
const Array01 = [1, 2, 3 ,'4', 5, 'あ'];
const Array02 = [1, 2, 3 ,4, 5, 10];
const isIncludesString01 = Array01.some((elem) =&amp;gt; { return isString });
const isIncludesString02 = Array02.some((elem) =&amp;gt; { return isString });
console.log(isIncludesString01); // trueが返る
console.log(isIncludesString02); // falseが返る…</content>
    <author>
      <name>moko_san</name>
    </author>
  </entry>
</feed>
