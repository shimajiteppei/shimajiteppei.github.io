<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 16 Sep 2024 07:02:45 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[cargo-wasixでファイルの読み書きをするWasmプログラムを作成する]]></title><description><![CDATA[この記事では、cargo-wasixを使用して、ファイルの読み書きを行うWebAssemblyプログラムを作成する方法を説明します。
https://github.com/wasix-org/cargo-wasix
cargo-wasixは、コマンドラインツールで、これは、WASIXをターゲットにしたアプリケーションのビルドが簡単できます。
WASIXは、WASI (WebAssembly System Interface) の機能を拡張し、ネットワーキングやスレッドなどの追加機能を含むWebAssembly (WASM) の拡張仕様です。Wasmer社によって開発されています。
car...]]></description><link>https://zenn.dev/laiso/articles/c675d3a8762a58</link><guid isPermaLink="true">https://zenn.dev/laiso/articles/c675d3a8762a58</guid><pubDate>Sun, 15 Sep 2024 15:08:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--36JNnoaq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-wasix%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E6%259B%25B8%25E3%2581%258D%25E3%2582%2592%25E3%2581%2599%25E3%2582%258BWasm%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:laiso%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4Nzc0MDcyMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>laiso</dc:creator></item><item><title><![CDATA[RustのDockerイメージビルドを高速にする]]></title><description><![CDATA[
 要約
以下を参考にしましょう。
https://docs.docker.com/guides/language/rust/develop/

 はじめに
Rustは素晴らしい言語ですが、弱点もあります。その弱点の一つが、コンパイル時間が長いことです。
特にDockerイメージのビルドにおいては、キャッシュをうまく使わないと、依存関係を含めて毎回すべてをビルドすることになり、とても長い時間がかかってしまいます。
本稿ではDockerイメージのビルドを高速化する方法について解説します。

 従来の方法とその問題点

 レイヤーキャッシュの利用
Dockerにはレイヤーキャッシュが存在しま...]]></description><link>https://zenn.dev/htlsne/articles/rust-build-image-faster</link><guid isPermaLink="true">https://zenn.dev/htlsne/articles/rust-build-image-faster</guid><pubDate>Sun, 15 Sep 2024 12:52:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f7Xkr5x2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEDocker%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiterm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiZGY0NzgyMjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiterm</dc:creator></item><item><title><![CDATA[Rust 向けのテンプレートエンジン minijinja を使い始めたので]]></title><description><![CDATA[
 tl;dr

mitsuhiko/minijinja: MiniJinja is a powerful but minimal dependency template engine for Rust compatible with Jinja/Jinja2
1バイナリで jinja2 互換のテンプレートエンジンを探していた
更新頻度の低いものを避けた
性能や機能の比較はできていないので、他にいいものがあったら教えて欲しい


 テンプレートエンジンを探す旅

仕事用に軽量、簡潔なテンプレートエンジンとして、{{ mustache }} の bash版 を使っていた
言語に依存しないツ...]]></description><link>https://zenn.dev/raki/articles/2024-09-15_minijinja</link><guid isPermaLink="true">https://zenn.dev/raki/articles/2024-09-15_minijinja</guid><pubDate>Sat, 14 Sep 2024 19:45:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CnS-ONAt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%2520minijinja%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E5%25A7%258B%25E3%2582%2581%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:raki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dLekxDZzlSWjJVT0VQSlhhdUJiazBnS29DYVR2cVpoVmVEUlNFa3c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>raki</dc:creator></item><item><title><![CDATA[#53 Understanding BitTorrent 4: Peer handshake]]></title><description><![CDATA[
 Introduction
In our last exploration, we delved into the intricacies of communicating with a BitTorrent tracker, breaking down the request components essential for successful peer discovery. Building on that foundation, we now advance to establishing direct communication with peers. In this ins...]]></description><link>https://zenn.dev/nxted_sapporo/articles/2d2a90977044af</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/2d2a90977044af</guid><pubDate>Fri, 13 Sep 2024 05:12:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eeq0lrGW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252353%2520Understanding%2520BitTorrent%25204%253A%2520Peer%2520handshake%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Rust のデータ型の上限・下限の扱い方とその応用]]></title><description><![CDATA[
 はじめに
Rustには様々なデータ型が存在しますが、u8、u16あるいは i32のように上限値と下限値がわからなくなることはないでしょうか。僕はめちゃくちゃあります。
いちいち調べるのも面倒なのでどうせならコード上で確認したい！そんな場合に有効な方法を簡単ですが紹介します。

 u8::MAX, i32::MIN のように指定する
u8やi32などの数値系型の上限値、下限値には MAXやMINを指定することが可能です。
これにより、上限値や下限値を簡単に知ることができます。
fn main() {
    println!("型: u8   下限値: {}   上限値: {}", u...]]></description><link>https://zenn.dev/collabostyle/articles/63fdd3ee351df3</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/63fdd3ee351df3</guid><pubDate>Wed, 11 Sep 2024 22:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k2nvrHPb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%259E%258B%25E3%2581%25AE%25E4%25B8%258A%25E9%2599%2590%25E3%2583%25BB%25E4%25B8%258B%25E9%2599%2590%25E3%2581%25AE%25E6%2589%25B1%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E5%25BF%259C%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwNGNlNzQxNTYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shota</dc:creator></item><item><title><![CDATA[tree-sitterをRustで使ってjuliaをparseしようとしたけど失敗したときのメモ]]></title><description><![CDATA[
 最初に
julia言語のプログラムをparseして失敗した時のメモ、そのうちリベンジしたい
parseした後の処理まではしていません。

 流れ

 プロジェクト作成
cargo new treejulia
cd treejulia

 juliaのtree-sitterリポジトリを利用する
git submodule add https://github.com/tree-sitter/tree-sitter-julia
https://github.com/tree-sitter/tree-sitter-julia
parserの生成
cd tree-sitter-julia
n...]]></description><link>https://zenn.dev/soyukke/articles/78af24fd98470c</link><guid isPermaLink="true">https://zenn.dev/soyukke/articles/78af24fd98470c</guid><pubDate>Mon, 09 Sep 2024 18:58:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6r3_s-TB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tree-sitter%25E3%2582%2592Rust%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6julia%25E3%2582%2592parse%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2591%25E3%2581%25A9%25E5%25A4%25B1%25E6%2595%2597%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2582%2586%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MDU4YzBkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そゆっけ</dc:creator></item><item><title><![CDATA[Rustでtypescriptのstring literal typeみたいなことをやりたいときはどうする]]></title><description><![CDATA[
 typescriptのstring literal type
type Animal = 'cat' | 'dog'
このような型定義をRustでやりたい。具体的にはRustのdeserializeするためのstruct定義で行いたい。

 Enumを使った方法
serde_jsonを使用して文字列をBlockというstructにdeserializeする流れ。
特にdeselializeの処理を独自に実装する必要などはなかった。
use serde_derive::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deser...]]></description><link>https://zenn.dev/soyukke/articles/b1292aa712fd59</link><guid isPermaLink="true">https://zenn.dev/soyukke/articles/b1292aa712fd59</guid><pubDate>Mon, 09 Sep 2024 17:59:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zS6LPTVl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7typescript%25E3%2581%25AEstring%2520literal%2520type%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E3%2582%2584%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2582%2586%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MDU4YzBkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そゆっけ</dc:creator></item><item><title><![CDATA[RustでShapefileとGeoJSONを変換するライブラリを作ってみた]]></title><description><![CDATA[
 概要
ShapefileからGeoJSONに変換するcrateを作成した。
https://github.com/Tomoro0726/shapefile-to-geojson
https://crates.io/crates/shapefile-to-geojson

 作成の動機

Shapefileはバイナリなので軽い。しかし、複数ファイルに情報が分散されている点や格納可能なオブジェクトの種類が1種類までという制限があり取り回しにくかった。
近年、GeoJSONというJSONベースのGISファイルの規格がシェアを広げているが、未だに多くのGISデータはShapefileとして配...]]></description><link>https://zenn.dev/tomoro0726/articles/d4bfa737e1b7db</link><guid isPermaLink="true">https://zenn.dev/tomoro0726/articles/d4bfa737e1b7db</guid><pubDate>Mon, 09 Sep 2024 16:48:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4FuhbwIH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Shapefile%25E3%2581%25A8GeoJSON%25E3%2582%2592%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tomo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjOTk5ZThlOTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tomo</dc:creator></item><item><title><![CDATA[From トレイトで HashMap<K, V> を 型変換する]]></title><description><![CDATA[
 はじめに
Rust の From トレイトを使って、複数の構造体などに対して、双方向の型変換を実装するケースは少なくないと思います。（特に責務分けを厳格にしているプロジェクトだと余計にそうではないでしょうか）
私自身、型変換処理に苦労していたところがあり、若干の苦手意識をもっているような気がします。
HashMap&lt;K, V&gt;を使った時に、どのように型変換をしていくかの実装をちょこっとやっていければと思います！

 HashMap&lt;K, V&gt; を使った構造体のイメージ
多少無理やりですが、以下のようなHashMap&lt;K, V&gt;の入った構造体を定義し...]]></description><link>https://zenn.dev/collabostyle/articles/11baac707b0d12</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/11baac707b0d12</guid><pubDate>Sun, 08 Sep 2024 22:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uIvu3vLO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:From%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7%2520HashMap%253CK%252C%2520V%253E%2520%25E3%2582%2592%2520%25E5%259E%258B%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwNGNlNzQxNTYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shota</dc:creator></item><item><title><![CDATA[ロボコン用にドキュメントジェネレータ作ってみた。#1 コンフィグファイルの生成まで]]></title><description><![CDATA[
 はじめに
皆様はじめまして。今夜は星が見えますか？流星 彗です。ながほし すいと読みます。私のX(@SuiSpace214)をご存知の方はご無沙汰してます。
今回から、私の所属している弊高専ロボコンプロジェクト用に、ドキュメントジェネレータを作っていきます。
というのも、我が校ロボコンプロジェクト(以下ロボコン)では、アジャイルとウォーターフォールの悪い所どりをしたような開発手法をとっており本当は取りたくない、効率があまりにも悪いことに今更気づかされてしまいました。そこでオフシーズン〜来年度以降に役立てられるよう、便利ツールを作っていこうと、私が一肌脱ぎ(指の一本や二本を捧げて)改革...]]></description><link>https://zenn.dev/sui_space/articles/71f099595fd7fa</link><guid isPermaLink="true">https://zenn.dev/sui_space/articles/71f099595fd7fa</guid><pubDate>Sun, 08 Sep 2024 11:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HNQLpUxl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%259C%25E3%2582%25B3%25E3%2583%25B3%25E7%2594%25A8%25E3%2581%25AB%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%25231%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A3%25E3%2582%25B0%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E7%2594%259F%25E6%2588%2590%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B5%2581%25E6%2598%259F%2520%25E5%25BD%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJhNzg5MTU5ZTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>流星 彗</dc:creator></item><item><title><![CDATA[Rustの時間に関するクレート：timeメモ [blessed.rsシリーズ27]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はtimeについてです。
https://crates.io/crates/time

 timeとは
日付と時刻に関するクレート

 全体の構成
以下の内容はversion0.3.36のものである。
また、各featureについての詳細は基本的にはのせていない。
timeクレートは日付と時刻に関するクレートであるが、stdにも同名のモジュール（std::time）がある。
std::timeには以下の3つの構造体が主にある。

SystemTime: 日時を扱う構造体...]]></description><link>https://zenn.dev/kotabrog/articles/35c969f35957f1</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/35c969f35957f1</guid><pubDate>Sun, 08 Sep 2024 09:17:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eQvW0ulC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%2599%2582%25E9%2596%2593%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259Atime%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA27%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[Assert実装のすゝめ]]></title><description><![CDATA[
 どういうコトか?
Rustで以下のような実装を行ったとしよう
pub enum Number{
    Integer(i64),
    Real(f64)
}
当然こいつに演算子のOverloadはしたくなるし、Fromも付けたくなる。今回は抜粋でAddだけ実装してみることにしよう。
pub enum Number{
	Integer(i64),
	Real(f64)
}

impl From&lt;i64&gt; for Number{
	fn from(value: i64) -&gt; Self {
		todo!()
	}
}

impl From&lt;f64&gt; ...]]></description><link>https://zenn.dev/tokeiya3/articles/a3350c350f8214</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/a3350c350f8214</guid><pubDate>Sat, 07 Sep 2024 06:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TQFOGjHJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Assert%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AE%25E3%2581%2599%25E3%2582%259D%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[RustでUnion Typesを実現する型レベルプログラミングの技術]]></title><description><![CDATA[
 はじめに
この記事では、RustでUnion Typesのように型の集合を表現する方法について解説します。型レベルリストを用いることで型の集合を表現し、Trait Resolutionを使って特定の型が集合に含まれるかどうか、またある集合が別の集合を含むかどうかを判定することができます。
実装の核となるのは、再帰の深さを表す型パラメータを使った型レベルリストの再帰的処理です。このトリックを使うことで、型レベルリストに対する様々な処理が実現できます。
!
筆者はRustの初心者です。もし間違いや用語の誤用などがあれば、お気軽にご指摘ください。


 モチベーション

 Union Ty...]]></description><link>https://zenn.dev/shun_kashiwa/articles/rust-union-types</link><guid isPermaLink="true">https://zenn.dev/shun_kashiwa/articles/rust-union-types</guid><pubDate>Fri, 06 Sep 2024 20:55:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tPnoLquv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Union%2520Types%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shun%2520Kashiwa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dKX1AxUVBNNW1hNUJvYkRkandDYzc0eTJNWEZYZnNZSTFYYmNQQlNVPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shun Kashiwa</dc:creator></item><item><title><![CDATA[Rust on Rails!? Rust 版の Rails と呼ばれる "Loco" を試す！]]></title><description><![CDATA[
 Rust 版 Rails "Loco"
Loco は Rails にインスパイアされた Rust の比較的新しい Web フレームワークです。
2024 年 9 月 1 日時点でバージョン 0.8.0 がリリースされています。

https://loco.rs/

 Loco の特徴
タイトルにもある通り、Loco is Rust on Rails. [1] を謳っており、
Ruby on Rails の開発体験の良さを Rust でも再現しようとしています。
また、小さいサービスや個人開発に適したフルスタックフレームワークとして開発されているようです。
内部実装では、コントローラー...]]></description><link>https://zenn.dev/collabostyle/articles/45762b07bc16fb</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/45762b07bc16fb</guid><pubDate>Thu, 05 Sep 2024 15:28:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--96g2Sz1V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520on%2520Rails%2521%253F%2520Rust%2520%25E7%2589%2588%25E3%2581%25AE%2520Rails%2520%25E3%2581%25A8%25E5%2591%25BC%25E3%2581%25B0%25E3%2582%258C%25E3%2582%258B%2520%2522Loco%2522%2520%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[＃48　Understanding BItTorrent 3: A Discover Peers]]></title><description><![CDATA[
 Introduction to BitTorrent Tracker Interaction with Rust
Welcome back to our exploration of the BitTorrent protocol! Today, we're taking a significant leap forward by focusing on a crucial aspect of the BitTorrent ecosystem - interacting with a tracker.

 Why Trackers Matter
In the world of Bit...]]></description><link>https://zenn.dev/nxted_sapporo/articles/4f0e6829e786a7</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/4f0e6829e786a7</guid><pubDate>Thu, 05 Sep 2024 08:33:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o-swVvAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%258348%25E3%2580%2580Understanding%2520BItTorrent%25203%253A%2520A%2520Discover%2520Peers%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[permutationsってなんやねん 〜オレオレnext_permutation実装まで〜]]></title><description><![CDATA[
順列のこと
最近AtCoderに参加して、詰まる問題のパーツになっている事が多い
解説を見てもしれっと next_permutation() などと出てきてはい終わり、みたいなことも多い
学業で登場するときなどは専ら順列の「数」など個数に着目するが、競プロの題材においては順列の「中身」に着目するんだなぁ


 概念

いわゆる「箱の中に1~4の数字が書かれたカードが4枚あり、箱の中から1枚ずつ順番にすべてのカードを取ったときにありうる順番を列挙したもの」というやつ

+---------+
| box     |
+---------+
| 1,3,4   |
+---------+
...]]></description><link>https://zenn.dev/yajamon/articles/202e44f20e2980</link><guid isPermaLink="true">https://zenn.dev/yajamon/articles/202e44f20e2980</guid><pubDate>Thu, 05 Sep 2024 06:36:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--71Hnifjg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:permutations%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2582%2584%25E3%2581%25AD%25E3%2582%2593%2520%25E3%2580%259C%25E3%2582%25AA%25E3%2583%25AC%25E3%2582%25AA%25E3%2583%25ACnext_permutation%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25BE%25E3%2581%25A7%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yajamon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4ZDZiMWVhMWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yajamon</dc:creator></item><item><title><![CDATA[＃47　Understanding BitTorrent 2: A Deep Dive into Torrent file]]></title><description><![CDATA[
 Introduction
BitTorrent is one of the pioneering and most popular peer-to-peer (P2P) file sharing protocols. In the last blog, I wrote about Bencode. Bencode is the encoding method used by BitTorrent for storing and transmitting loosely structured data. It's a binary format that serializes data...]]></description><link>https://zenn.dev/nxted_sapporo/articles/bd6593d4ad23a9</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/bd6593d4ad23a9</guid><pubDate>Thu, 05 Sep 2024 01:18:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k1S5MNDx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%258347%25E3%2580%2580Understanding%2520BitTorrent%25202%253A%2520A%2520Deep%2520Dive%2520into%2520Torrent%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Rustの構造体]]></title><description><![CDATA[
 Rustの構造体
名前と年齢の構造体を作ってみます
struct User {
   name: String,
   age: u32,
}
let user1 = User {
   name: String::from("nikuman"),
   age: 20,
};
構造体定義
struct 構造体作成のおまじない
name: String, nameがメンバの変数、Stringがメンバの型ですね
: コロンは変数定義に必要
,　コンマはケツにつけるおまじない
構造体の作成
User　構造体の名前です
age: 20, コロンのあとに年齢の数値をつけるよ
]]></description><link>https://zenn.dev/ni9man_butaman/articles/529cb09f040013</link><guid isPermaLink="true">https://zenn.dev/ni9man_butaman/articles/529cb09f040013</guid><pubDate>Wed, 04 Sep 2024 10:40:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ovpDdaq0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Rust%25E3%2581%25AE%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ni9man%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MTYxMGFhZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ni9man</dc:creator></item><item><title><![CDATA[Rustの関数]]></title><description><![CDATA[
 Rustの関数
まずは、簡単に足し算の関数を作ります
fn main() {
   let x = add(1,2);
   println!("add {}", x);
}

fn add(x: i32, y: i32) -&gt; i32 {
   x + y
}
fn　関数作成のおまじない
x: i32　ｘが変数名でi32が型ですね、:が定義するときのおまじないですね
-&gt; i32 i32が戻り値です、-&gt;戻り値のおまじないですね
x + y にセミコロンが付かないよ
]]></description><link>https://zenn.dev/ni9man_butaman/articles/ed9840abd9ed6a</link><guid isPermaLink="true">https://zenn.dev/ni9man_butaman/articles/ed9840abd9ed6a</guid><pubDate>Wed, 04 Sep 2024 10:26:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--liUAjyow--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Rust%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ni9man%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MTYxMGFhZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ni9man</dc:creator></item><item><title><![CDATA[Rustで言語を自作してみた]]></title><description><![CDATA[なんか作りたくなったので作りました

 言語について
言語名はPrimo、ChatGPTに決めてもらいました(多分他のソフトウェアと名前は被ってないはず)
一応初心者が書くことを想定して作ってます
インタプリタ形式の動的型付け言語で、Rustで実装してます
https://github.com/Netetra/primo-lang.git
programs/以下にコード例があります

 使用したcrate

rust-peg

構文のパースからAST生成までをしてます


rstest

テスト書くとき使いました




 文法

 リテラル
bool型のリテラル
true false
...]]></description><link>https://zenn.dev/netetra/articles/4c5969d19b720e</link><guid isPermaLink="true">https://zenn.dev/netetra/articles/4c5969d19b720e</guid><pubDate>Tue, 03 Sep 2024 16:20:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jYCHYOv9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Netetra%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNl95WXRLSFl4TGZraE5iX2lNOVc5bUVidmhnWFdZQk9xR3NSYmY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Netetra</dc:creator></item></channel></rss>