<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 19 Oct 2024 08:39:04 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[#67　Understanding BitTorrent 6: Download the whole file]]></title><description><![CDATA[
 Introduction
In this blog post, we will dive deep into the creation of a basic BitTorrent client using Rust. We'll start by setting up our project, parsing command-line arguments, and managing asynchronous file downloads. Whether you're a seasoned Rustacean or new to the language, this guide wi...]]></description><link>https://zenn.dev/nxted_sapporo/articles/36526d353f9156</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/36526d353f9156</guid><pubDate>Fri, 18 Oct 2024 05:19:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ww7iV9H2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252367%25E3%2580%2580Understanding%2520BitTorrent%25206%253A%2520Download%2520the%2520whole%2520file%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Axumで作ったWebアプリケーションをLambdaで公開する]]></title><description><![CDATA[AWSのLambda、割と無料の幅が広いなって思っています。
個人的こじんまりしたWebアプリケーション作るのには最適かなぁと。

100万リクエスト！こじんまりしたものならほぼ無料でOKだと思います。
320万秒も十分でしょう。
問題はLambdaの最大の弱点、Coldスタートの待ち時間です。
Node.jsやPHPといったスクリプト言語のWebフレームワークだと初期処理が比較的重いと感じています。
またメモリ使用量の観点からもスクリプト言語よりRustのWebFrameworkが最適だと判断しました。
そんなわけで、Rust(Axum)を使った最小のプログラムと、ビルドについて書いて...]]></description><link>https://zenn.dev/upopon/articles/2abf0e777e0246</link><guid isPermaLink="true">https://zenn.dev/upopon/articles/2abf0e777e0246</guid><pubDate>Fri, 18 Oct 2024 01:51:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s9MFJT8f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259FWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592Lambda%25E3%2581%25A7%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2581%25BD%25E3%2581%25BD%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lXS3dNU1FXY2FFamZFTjBVSDlfXy01MXotRDZwTTlpQ1NJNUxabGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うぽぽん</dc:creator></item><item><title><![CDATA[rustでユニットテストを別ファイルで管理したい]]></title><description><![CDATA[rustではユニットテストはテスト対象と同じファイルに記述するのがならわしのようです。同一ファイルに書かなくても一応テスト自体はできますが、privateな識別子にアクセスできないといったデメリットが発生します。
しかし、テストコードは大体テスト対象のコードの3 ~ 5倍くらいのコード量になるのなんて普通なので、そんな規模感のコードがプロダクトコードと同じファイルに書かれてるとgrepしづらいやらdiffも見づらいやらでデメリットしかない気がしますね。同じファイルを上下左右に分割してコード書くのもやりにくいです。
そんなワケなのでprivateな識別子にアクセスできる状態でユニットテスト...]]></description><link>https://zenn.dev/sho2/articles/rust-test-file-division</link><guid isPermaLink="true">https://zenn.dev/sho2/articles/rust-test-file-division</guid><pubDate>Thu, 17 Oct 2024 15:53:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dqwlxnw_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%2588%25A5%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25A7%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZDVjODQ1MWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しょ</dc:creator></item><item><title><![CDATA[Rustで世界初のCPU「4004」エミュレータ #調査記録📚]]></title><description><![CDATA[
 はじめに
!

本稿はIntel 4004の調査記録です🙏

RustでIntel 4004のエミュレーターが完成次第、後日Zennにて別途記事で報告予定📚


◆👇前回オリジナルCPUを設計してRustでエミュレートするまで投稿しました🥳
https://zenn.dev/chimipupu/articles/e0af6451e0cab9
👇GitHubで世界初(1971年)のCPU Intel 4004のエミュレータを開発中で色々と調査中なので随時、共有していきます🥳
https://github.com/Chimipupu/cpu_4004_rs_emu
!

Intel 40...]]></description><link>https://zenn.dev/chimipupu/articles/71a6a540d1fec7</link><guid isPermaLink="true">https://zenn.dev/chimipupu/articles/71a6a540d1fec7</guid><pubDate>Thu, 17 Oct 2024 07:48:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5Hmr5PJn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25B8%2596%25E7%2595%258C%25E5%2588%259D%25E3%2581%25AECPU%25E3%2580%258C4004%25E3%2580%258D%25E3%2582%25A8%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%2520%2523%25E8%25AA%25BF%25E6%259F%25BB%25E8%25A8%2598%25E9%258C%25B2%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%25BF%25E3%2581%25AB%25E3%2582%2583%2520%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlYjgxZjQ2ODQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちみにゃ👾💜</dc:creator></item><item><title><![CDATA[rustでいちいちiterとcollectを書かない方法]]></title><description><![CDATA[Vectorを使う場合にmapやfilterをよく使うことになると思います。しかし、rustの場合は一旦iterを使ってiteratorを取得して、最後に明示的にcollectを実行して別のVectorを生成する必要があるようです。
例えばこんな感じ。
let v = vec![1, 2, 3, 4, 5];
let result = v.iter().filter(|i| *i % 2 == 0 ).collect::&lt;Vec&lt;_&gt;&gt;();
assert_eq!(result.len(), 2);
assert_eq!(*result[0], 2);
asser...]]></description><link>https://zenn.dev/sho2/articles/rust-omit-iter</link><guid isPermaLink="true">https://zenn.dev/sho2/articles/rust-omit-iter</guid><pubDate>Thu, 17 Oct 2024 06:08:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JKnDIO7Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25A7%25E3%2581%2584%25E3%2581%25A1%25E3%2581%2584%25E3%2581%25A1iter%25E3%2581%25A8collect%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZDVjODQ1MWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しょ</dc:creator></item><item><title><![CDATA[TS使っている人のRust 0から勉強日記2]]></title><description><![CDATA[こんにちは！普段TypeScriptを使ってフロントエンド開発をしている人です🙌
今回は前回の日記1に引き続き、copyトレイトとcloneトレイトについてとなってます。
また今回も、内容は基礎の基礎(+TypeScriptとの比較？)で自分の勉強の記録用に書いています。


 所有権についてのおさらい
全ての値に「所有者」が存在し、その所有者が所有権を持っています。(1つの値に1つの所有者)
所有者がスコープから外れるとその所有者が持つ値はメモリから解放されます。
スコープ・束縛・参照・可変性・借用チェックについては日記1に書いているので気になる方は見てみてください〜

 Shallo...]]></description><link>https://zenn.dev/maru_contents/articles/rust_copytrait</link><guid isPermaLink="true">https://zenn.dev/maru_contents/articles/rust_copytrait</guid><pubDate>Thu, 17 Oct 2024 05:53:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GU7GHnb7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TS%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%25AERust%25200%25E3%2581%258B%25E3%2582%2589%25E5%258B%2589%25E5%25BC%25B7%25E6%2597%25A5%25E8%25A8%25982%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyZDVlZjUxOGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maru</dc:creator></item><item><title><![CDATA[Dev ContainerでTauriの開発環境を作る]]></title><description><![CDATA[以下のDev Containerの設定ファイルを使う。ポイントは、Desktop (Lightweight)を使ってWebブラウザ上でUbuntu画面を表示し、その画面上でTauriのGUIを表示する。

devcontainer.json
{
	"name": "Ubuntu",
	"image": "mcr.microsoft.com/devcontainers/base:jammy",
	"features": {
		"ghcr.io/devcontainers/features/desktop-lite:1": {
			"version": "latest",
			"noV...]]></description><link>https://zenn.dev/hkthirano/articles/122b36a6585120</link><guid isPermaLink="true">https://zenn.dev/hkthirano/articles/122b36a6585120</guid><pubDate>Wed, 16 Oct 2024 13:43:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K76cGT9y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dev%2520Container%25E3%2581%25A7Tauri%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AE%25E3%2583%25BC%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNThkMzViZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>のーまん</dc:creator></item><item><title><![CDATA[Rustの時間に関するクレート2：chronoメモ [blessed.rsシリーズ28]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はchronoについてです。
https://docs.rs/chrono/latest/chrono/

 chronoとは
日付と時刻に関するクレート

 timeとの違い
https://zenn.dev/kotabrog/articles/35c969f35957f1
日付と時間に関するクレートとしては、有名なものだと他にtimeがある。
timeとの機能的な大きな違いはないように感じたが、どちらかというとchronoの方がより構造が複雑で、その分柔軟にできる部...]]></description><link>https://zenn.dev/kotabrog/articles/739fca6419153a</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/739fca6419153a</guid><pubDate>Wed, 16 Oct 2024 13:08:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qJMG3nqi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%2599%2582%25E9%2596%2593%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25882%25EF%25BC%259Achrono%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA28%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[備忘録: Diesel入門]]></title><description><![CDATA[
 Getting Started
DieselはRustのORMライブラリ。
本家Getting Startedに従って、Dieselを使ってみたときのメモ。

 環境

ubuntu 22.04
Rust edition 2021
postgresql 14


 インストール
diesel_cliのインストールにはcargo使うのが一番楽だと思う。（本家ではなぜか一番下にあるが）
cargo install diesel_cli

 実行
show_posts.rsを実行すると以下のエラーが出た。
/usr/bin/ld: cannot find -lpq: No such fil...]]></description><link>https://zenn.dev/oksongh/articles/hello-diesel</link><guid isPermaLink="true">https://zenn.dev/oksongh/articles/hello-diesel</guid><pubDate>Wed, 16 Oct 2024 12:58:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gaF7xClA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%253A%2520Diesel%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:oksongh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKei1WNzVFZzlpWVd3SlV0LTZTTTFsclVnSTBjSUdVN09lNjJERjQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>oksongh</dc:creator></item><item><title><![CDATA[開発用適当ツールは Rust で作るのもオススメ]]></title><description><![CDATA[
 開発用適当ツールは Go で作るのがオススメ！？
先日、開発用適当ツールはGoで作るのがオススメ という記事を拝見しました。
まだ読んでないよという方はぜひ読んでみてください！
https://qiita.com/ssc-ksaitou/items/6c66669f1672806ac9bb
とても良い記事でした😌✨
Go 言語も CLI ツールの実装に向いているということも分かりました。
そして、Go 言語の魅力も伝わってきました...！！
まとめると以下のような点がメリットとして挙げられていると思います。


go run で簡単に実行できる
シングルバイナリにクロスコンパイルでき...]]></description><link>https://zenn.dev/codemountains/articles/0d3831c10c46b8</link><guid isPermaLink="true">https://zenn.dev/codemountains/articles/0d3831c10c46b8</guid><pubDate>Wed, 16 Oct 2024 12:10:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q35_XTYs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%258B%25E7%2599%25BA%25E7%2594%25A8%25E9%2581%25A9%25E5%25BD%2593%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AF%2520Rust%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2581%25AE%25E3%2582%2582%25E3%2582%25AA%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[#03 Rust & WebAssembly 構築メモ]]></title><description><![CDATA[
 はじめに
Rust を使ってWebAssemblyアプリを開発した時のメモ

 セットアップ対象のバージョン

rustc 1.80.1
cargo 1.80.1
rustup 1.27.1
pnpm 9.7.0  // $ pnpm add -g pnpm


 参考
[Rust and WebAssembly[(https://rustwasm.github.io/docs/book/game-of-life/hello-world.html)

 Rust開発環境をセットアップする
rustup is an installerを参照

command
$ curl --prot...]]></description><link>https://zenn.dev/yurioka/articles/3649c5190e33bc</link><guid isPermaLink="true">https://zenn.dev/yurioka/articles/3649c5190e33bc</guid><pubDate>Wed, 16 Oct 2024 11:53:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rc_7gpnL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252303%2520Rust%2520%2526%2520WebAssembly%2520%25E6%25A7%258B%25E7%25AF%2589%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myurioka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YTE2NGMzMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myurioka</dc:creator></item><item><title><![CDATA[RustでDFS(深さ優先探索)]]></title><description><![CDATA[
 TL;DR

どの言語でも手順は選択､展開､生成
生成はm.chain(L) (= concat(m, L))


 背景
講義でDFSとBFSを習ったのでRustで実装する｡以上

 DFS(Depth First Search)について
日本語では深さ優先探索
与えられた木構造に対して､問題固有の情報を使わない探索法の一つ｡(&lt;=&gt; BFS)
探索する木が有限であれば必ず解が見つかる
選択した対象のノードが子を所持していない階層まで降下して行き､葉(子を持たないノード)に到達したら､浅いレベルのノードに戻り探索していく｡
詳しい解説は別にゆずるが､この葉をめざして兄弟...]]></description><link>https://zenn.dev/ahoxa1rx/articles/0126aea8f474ed</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/0126aea8f474ed</guid><pubDate>Wed, 16 Oct 2024 08:53:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qGATG8WZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7DFS%2528%25E6%25B7%25B1%25E3%2581%2595%25E5%2584%25AA%25E5%2585%2588%25E6%258E%25A2%25E7%25B4%25A2%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[ゴリラでもわかるSA-IS]]></title><description><![CDATA[
 初めに
SA-IS[1]は接尾字配列を線形時間[2]で構築できるアルゴリズムの1つです。他の線形時間アルゴリズムと比較して高速かつ省メモリであり、コードもコンパクトです。


 SA-KA
SA-ISはSA-KA[3]を改良したものです。そこで、SA-ISの解説に入る前にSA-KAを概観します。なお、SA-KAという名称は一般的ではないかもしれません。
以下では、文字列Sのi文字目をS[i]と表記します。また、部分文字列S[i]..S[j]をS[i..j]と略記します。とくに、接尾字はS[i..n]です。
Sは辞書順最小の（ユニークな）番兵\#を末尾に持ちます。これは証明の見通しをよ...]]></description><link>https://zenn.dev/yatyou/articles/f96972c7edeac7</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/f96972c7edeac7</guid><pubDate>Mon, 14 Oct 2024 14:12:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zFkhxDwX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B4%25E3%2583%25AA%25E3%2583%25A9%25E3%2581%25A7%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%258BSA-IS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[RustでUEFIのBIOSにHello World!を出す]]></title><description><![CDATA[
 はじめに
UEFI仕様のBIOSにHello World!を表示するブートファイルをRustで作成します。
今回使用した開発環境は以下です。

CPUのアーキテクチャ：x86_64
開発環境のホストOS：Windows11
実行環境：devcontainer
エミュレーター：QEMU


 環境構築
実行環境にはvscodeの拡張機能「devcontainer」を使っています。
検証はしておりませんが、devcontainerを使わない場合でも必要なものをインストールすれば、各自の環境でも開発は可能と思われます。
devcontainerの説明は割愛し、設定ファイルのみ公開します。
...]]></description><link>https://zenn.dev/usuijuice/articles/50a4ca0d035fdd</link><guid isPermaLink="true">https://zenn.dev/usuijuice/articles/50a4ca0d035fdd</guid><pubDate>Mon, 14 Oct 2024 13:39:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---A11Tyg---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7UEFI%25E3%2581%25AEBIOS%25E3%2581%25ABHello%2520World%2521%25E3%2582%2592%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2598%25E3%2582%2585%25E3%2581%2586%25E3%2581%2599%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlmOTYwYTE4N2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>じゅうす</dc:creator></item><item><title><![CDATA[RustでWindowsサービスを作成するメモ]]></title><description><![CDATA[出来れば常時起動しておきたいコンソールアプリをRustで作って居ました。
ふと思ったのですが、Windowsで常駐させるならサービスじゃぁないかぁと。
そんなわけでWindowsサービスアプリケーション化を行ってみました。
プログラム自体はもっと良い書き方があると思うのですが、自分の備忘録ともしサービス作る人の一助になればと思い公開します。

 使用パッケージについて

cargo.toml
anyhow = "1.0.89"
clap = { version = "4.5.18", features = ["derive"] }
dotenvy = "0.15.7"
file-rota...]]></description><link>https://zenn.dev/upopon/articles/25af9ae99e1b43</link><guid isPermaLink="true">https://zenn.dev/upopon/articles/25af9ae99e1b43</guid><pubDate>Mon, 14 Oct 2024 07:45:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mA1OiSdQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Windows%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2581%25BD%25E3%2581%25BD%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lXS3dNU1FXY2FFamZFTjBVSDlfXy01MXotRDZwTTlpQ1NJNUxabGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うぽぽん</dc:creator></item><item><title><![CDATA[Tauri 2.0 で ネイティブモジュール作成(Android版) [MLKitでオンデバイス翻訳]]]></title><description><![CDATA[
 1.はじめに

 Tauri 2.0 が StableRelease になった!
Tauri 2.0 が StableRelease になったんですが、これがモバイルアプリも作成できるとのこと。
https://forest.watch.impress.co.jp/docs/news/1628498.html


モバイルサポート。デスクトップだけでなく、iOS/Android向けのアプリも「Tauri」で(上記リンクより引用)



 Tauri 2.0 って？（個人的な理解）
ざっくり、 "Tauri" はクロスプラットフォーム対応のアプリフレームワークで、
バージョン 2.0 ...]]></description><link>https://zenn.dev/sh1r4s4g1/articles/843a21340b1dfd</link><guid isPermaLink="true">https://zenn.dev/sh1r4s4g1/articles/843a21340b1dfd</guid><pubDate>Mon, 14 Oct 2024 05:41:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tChq2xvd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%2520%25E3%2581%25A7%2520%25E3%2583%258D%25E3%2582%25A4%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E4%25BD%259C%25E6%2588%2590%2528Android%25E7%2589%2588%2529%2520%255BMLKit%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25B9%25E7%25BF%25BB%25E8%25A8%25B3%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SH1R4S4G1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1YQmtDLVREWUhYTFY1NVFOQkM4NmNPZXdiM09vN1l4ZUNQSmNTckRXN2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SH1R4S4G1</dc:creator></item><item><title><![CDATA[Tauri 2.0 & Next.js 14の環境を作成してみる]]></title><description><![CDATA[Electronの代替と期待されている「Tauri 2.0」の正式版がリリースされたということで、早速触れてみました。
TauriはRustで構築された、軽量、高速、安全なクロスプラットフォームのアプリを開発できるフレームワークとのことです。
https://v2.tauri.app/
Rustにも興味があったものの、なかなか触れる切っ掛けが無かったのでちょうど良い機会かなと。
一応自分もこれから触れていくところなので、まずは立ち上げの手順を残しておきます。

 目標

フロントとしてNext.jsを採用してみる
自分はWeb系でNext.jsをメインで利用しているので。
Tailwin...]]></description><link>https://zenn.dev/playree/articles/966ebafc3d11f8</link><guid isPermaLink="true">https://zenn.dev/playree/articles/966ebafc3d11f8</guid><pubDate>Mon, 14 Oct 2024 00:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4uXFqs9V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%2520%2526%2520Next.js%252014%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:playree%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzc1OVNMOTM4THJqcFl0OUxnSUZKS2NlYThMTVEwbkwyS3oteFBxbUcyQTB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>playree</dc:creator></item><item><title><![CDATA[RustでCPUを自作して動くまで📝]]></title><description><![CDATA[
 はじめに
CPUの名前は CC8R（ちみ's CPU 8bit RISC) ！
お仕事のお勉強のメモ📝に近いかも🦆
【サマリー】

8bitCPUの設計

RustでCPUを実装、CPUをエミュレート（※）
自作CPUで(5+3)x2=16を計算させる

※C++版も実装しました🥳

 成果物（できたもの）
!

Rust版、C++版 ... MITライセンスです🥳



 Rustでの実装
https://github.com/Chimipupu/cc8r_zenn

 C++での実装
https://github.com/Chimipupu/cc8r_zenn_cpp

 対象者...]]></description><link>https://zenn.dev/chimipupu/articles/e0af6451e0cab9</link><guid isPermaLink="true">https://zenn.dev/chimipupu/articles/e0af6451e0cab9</guid><pubDate>Sun, 13 Oct 2024 22:37:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B-MD--Pp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7CPU%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6%25E5%258B%2595%25E3%2581%258F%25E3%2581%25BE%25E3%2581%25A7%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%25BF%25E3%2581%25AB%25E3%2582%2583%2520%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlYjgxZjQ2ODQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちみにゃ👾💜</dc:creator></item><item><title><![CDATA[ECDH鍵交換を用いた共通鍵暗号の検証 (Rust)]]></title><description><![CDATA[
 はじめに
ECDH (Elliptic-curve Diffie–Hellman)鍵交換という仕組みを使うことにより、自分の秘密鍵と相手の公開鍵から共通鍵が生成できると教わったので、Rustで試してみました。
ECDH鍵交換アルゴリズムと共通鍵暗号のRust実装は、すでに専門の方々によって行われCrateとして公開されていますので、こちらを使用することにします。

 1. ECDH鍵交換

 (1) プロジェクト作成
cargo newコマンドを実行して、プロジェクトを作成します。
ECDH鍵交換のため、secp256k1を使用します。
$ cargo new ecdhtest
$ ...]]></description><link>https://zenn.dev/halifax/articles/rust_crypto_ecdh_aes</link><guid isPermaLink="true">https://zenn.dev/halifax/articles/rust_crypto_ecdh_aes</guid><pubDate>Sun, 13 Oct 2024 12:16:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5PkS0WUF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ECDH%25E9%258D%25B5%25E4%25BA%25A4%25E6%258F%259B%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E5%2585%25B1%25E9%2580%259A%25E9%258D%25B5%25E6%259A%2597%25E5%258F%25B7%25E3%2581%25AE%25E6%25A4%259C%25E8%25A8%25BC%2520%2528Rust%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:halifax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNWUxM2Q5YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>halifax</dc:creator></item><item><title><![CDATA[chip8. タッチ操作でカメラを動かす(追加)]]></title><description><![CDATA[
 はじめに
2024/10/12時点の内容です。

rustc 1.81.0
bevy 0.14.2
bevyは開発初期段階のOSSで、まだまだ破壊的なアップデートが入ります。
でも、面白いですよ。


 前回
chip7. キー、マウス、ゲームパッドでカメラを動かす

 タッチ操作を追加
入力の4つ目としてタッチ操作を追加しました。カメラの動きとの対応は下表のとおりです。



カメラの動き
キー
マウス
タッチ
ゲームパッド




仰角アップ
上矢印
右ボタン＆下へ移動
一本指を下へ
十字ボタン上 ／ 左スティック上


仰角ダウン
下矢印
右ボタン＆上へ移動
一本指を上へ
十字...]]></description><link>https://zenn.dev/hyoi/articles/1569b0192a4b0e</link><guid isPermaLink="true">https://zenn.dev/hyoi/articles/1569b0192a4b0e</guid><pubDate>Sat, 12 Oct 2024 13:21:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ao_ydm4k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chip8.%2520%25E3%2582%25BF%25E3%2583%2583%25E3%2583%2581%25E6%2593%258D%25E4%25BD%259C%25E3%2581%25A7%25E3%2582%25AB%25E3%2583%25A1%25E3%2583%25A9%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2528%25E8%25BF%25BD%25E5%258A%25A0%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hyoi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o3d2VRb3N6YndjY3ZuWE5kM1JuRHFVTWxVZWVVbDlzYjUtS1lKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hyoi</dc:creator></item></channel></rss>