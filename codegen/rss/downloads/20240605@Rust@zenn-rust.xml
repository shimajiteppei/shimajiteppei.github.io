<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 05 Jun 2024 02:30:52 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RustのDeep Learningフレームワークburnで足りない関数の実装例(onehot matrixを作る関数とか)]]></title><description><![CDATA[
 はじめに

この記事は2023/12月に記述したもので、最新の情報ではないので注意してください。

趣味でRustのDeep Learningフレームワークのburnを使用していて、burnに組み込まれていない関数が欲しいという状態になりました。
そこで実装に足りていなかった関数の実装方法をメモとして残します。
burnは2023年12月現在活発に開発されているフレームワークで、onnx形式のimportも実装中となっているのでonnxを読み込んでburnを使ったモデル定義のコードを自動生成するような仕組みもあります。
サポートされている関数などが限定されるので今後に期待です。
bu...]]></description><link>https://zenn.dev/soyukke/articles/c634a3669d7694</link><guid isPermaLink="true">https://zenn.dev/soyukke/articles/c634a3669d7694</guid><pubDate>Tue, 04 Jun 2024 18:57:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HOJr983v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEDeep%2520Learning%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AFburn%25E3%2581%25A7%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%2584%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E4%25BE%258B%2528onehot%2520matrix%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2582%2586%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MDU4YzBkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そゆっけ</dc:creator></item><item><title><![CDATA[Rust の CLI 作りに便利そうなクレート]]></title><description><![CDATA[
 はじめに
Rust でサクッと CLI を作ってみたいと考え、色々調べていたところ、
「なんか便利そう！」「これ面白い！」が結構出てきたので紹介させてください。
ゆるく3つほど紹介していければと思いますので、ぜひ。

 figlet-rs
https://github.com/yuanbohan/rs-figlet
文字を立体的に出力できるクレート。
use figlet_rs::FIGfont;

fn main() {
    let standard_font = FIGfont::standard().unwrap();
    let figure = standard_f...]]></description><link>https://zenn.dev/collabostyle/articles/ebd88b46be0f3a</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/ebd88b46be0f3a</guid><pubDate>Sun, 02 Jun 2024 03:06:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6NS2uUl0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%2520CLI%2520%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25AB%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AA%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[赤チャート(数学IA)の問題をpythonとRustで解いてみた①（順列）]]></title><description><![CDATA[数学IAの復習のために赤チャートを買ってみた。
自分が学んでいた頃とは、教育課程もかなり変わっているみたいなので、初見の部分と復習の部分があるが、基本的にほとんど忘れているので、一から勉強し直しながらその中の一部をプログラミングで解くことで数学の復習とプログラミングの勉強を併せてしていこうと思う。
基本的には、言語はPythonを使う予定。できればRustも交えていければ良いなという感じ。
問題は前からではなく、気になった問題を解いていく。

 第１問 順列
最初は、赤チャートI+A　P352　「同じものを含む順列について」
AtcoderだとABCのA問題かB問題くらいかな

 小問１...]]></description><link>https://zenn.dev/matcha22/articles/ce6fcd2a5c5a2c</link><guid isPermaLink="true">https://zenn.dev/matcha22/articles/ce6fcd2a5c5a2c</guid><pubDate>Sat, 01 Jun 2024 08:11:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Pl3jeo8d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B5%25A4%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25BC%25E3%2583%2588%2528%25E6%2595%25B0%25E5%25AD%25A6IA%2529%25E3%2581%25AE%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592python%25E3%2581%25A8Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E2%2591%25A0%25EF%25BC%2588%25E9%25A0%2586%25E5%2588%2597%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matcha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MTA1OWFmZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matcha</dc:creator></item><item><title><![CDATA[より進化したcargo test：cargo-nextestメモ [blessed.rsシリーズ12]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-nextestについてです。

 cargo-nextestとは
cargo testをより進化させたテストランナー

 install
https://nexte.st/book/installation
上記を参照
Linux x86_64であれば以下を実行
$ curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

 実行方法
h...]]></description><link>https://zenn.dev/kotabrog/articles/974468ac37639d</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/974468ac37639d</guid><pubDate>Sat, 01 Jun 2024 01:14:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RHR2sk_G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2588%25E3%2582%258A%25E9%2580%25B2%25E5%258C%2596%25E3%2581%2597%25E3%2581%259Fcargo%2520test%25EF%25BC%259Acargo-nextest%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA12%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[VscodeでBevyの動的リンクを使ったプロジェクトの作成]]></title><description><![CDATA[!
※この記事はBevy 0.13.2での環境です.

!
Rust Bevy Vscode 初心かつ，Zennへの投稿も初めての為，不備多々あるかもしれませんが，気付き次第ご教示いただきたく思っております．ぜひ勉強させてください．


 Bevyコンパイルの高速化
リンカには既存ものより高速なruat-lldを使用.
Dynamic_linking(動的にリンク)を使用．

 本記事での対象環境
OS:Windows11
Editor:Visualstudio Code
Bevy:0.13.2
Debugger:CodeLLDB

 ターミナルでの作業

 rust-lldの導入
ru...]]></description><link>https://zenn.dev/u7f8au7fbd/articles/8586812fa5a381</link><guid isPermaLink="true">https://zenn.dev/u7f8au7fbd/articles/8586812fa5a381</guid><pubDate>Wed, 29 May 2024 02:36:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FJ_2TcjP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vscode%25E3%2581%25A7Bevy%25E3%2581%25AE%25E5%258B%2595%25E7%259A%2584%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25BE%258A%25E7%25BE%25BD%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZElVdXlCU0xtQlpkMUxaN0UtdnhkQnRSdnBIdVpSdGJXREhHSkFxakEwYkE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>羊羽ちゃん</dc:creator></item><item><title><![CDATA[GPT-4o APIを叩くRust製ぬるぬるCLIアプリ]]></title><description><![CDATA[先日【Rust】✨CLIアプリ向けクレート4選✨ ~ clap, dialoguer, indicatif, console ~ #Rust - Qiitaという記事をQiitaに投稿しまして、その副産物としてChatGPT APIを叩くRust CLIアプリケーションを作成しましたので、折角ですから紹介したいと思います！

https://github.com/anotherhollow1125/chatgpt_cli
Rustに関係のない部分から初めて、Rustで工夫した部分をゆるく紹介できればと思います✨
!
APIキーの取得方法については割愛します。頑張れ💪
一応: https:...]]></description><link>https://zenn.dev/namn1125/articles/44a37d48adbcc8</link><guid isPermaLink="true">https://zenn.dev/namn1125/articles/44a37d48adbcc8</guid><pubDate>Tue, 28 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jTUnIig2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GPT-4o%2520API%25E3%2582%2592%25E5%258F%25A9%25E3%2581%258FRust%25E8%25A3%25BD%25E3%2581%25AC%25E3%2582%258B%25E3%2581%25AC%25E3%2582%258BCLI%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:namn1125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMTYxMjNiY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>namn1125</dc:creator></item><item><title><![CDATA[Rustでファイルを既定のアプリで開く(Windows限定)]]></title><description><![CDATA[
 Rust でファイルを既定のファイルで開く(Windows 限定)
Rust を使ってファイルを既定のアプリで開くのに Windows の API を使ってたんですが、もっと単純な方法に気付いたのでメモ。
use std::process::Command;
use std::path::Path;

fn open_file(file_path: &amp;str) -&gt; std::io::Result&lt;()&gt; {
    if !Path::new(file_path).exists() {
        return Err(std::io::Error::...]]></description><link>https://zenn.dev/dekunobo/articles/rust_openfile_for_windows</link><guid isPermaLink="true">https://zenn.dev/dekunobo/articles/rust_openfile_for_windows</guid><pubDate>Mon, 27 May 2024 14:58:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--690BTNZ9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E6%2597%25A2%25E5%25AE%259A%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25A7%25E9%2596%258B%25E3%2581%258F%2528Windows%25E9%2599%2590%25E5%25AE%259A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2587%25E3%2582%25AF%25E3%2583%258E%25E3%2583%259C%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YjQ0OGNjMjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>デクノボー</dc:creator></item><item><title><![CDATA[Rust製TypeScript Linterにおける型情報Lintルールの模索]]></title><description><![CDATA[Rust製TypeScript LinterであるBiome, Oxc, deno_lintなどは、TypeScriptの型情報を利用するLintルール（型情報Lintルール）[1]を持っていません。本記事では、その背景から、Rust製TypeScript Linterが型情報Lintルールを実現するための手段についてまとめます。
筆者のTSKaigi 2024で利用した下記登壇資料に情報を追加し、文章化したものです。

要約すると、以下になります。

Rust製TypeScript Linterは、安全性をさらに高めてくれるtypescript-eslintの型情報Lintルールが欲し...]]></description><link>https://zenn.dev/kirohi/articles/3c644b614977fe</link><guid isPermaLink="true">https://zenn.dev/kirohi/articles/3c644b614977fe</guid><pubDate>Mon, 27 May 2024 12:06:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G29kfO6E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BDTypeScript%2520Linter%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E5%259E%258B%25E6%2583%2585%25E5%25A0%25B1Lint%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E6%25A8%25A1%25E7%25B4%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:unvalley%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlNWU0YWY2ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>unvalley</dc:creator></item><item><title><![CDATA[AxumでのExtensionの使い方 - ミドルウェアとデータを共有する -]]></title><description><![CDATA[
 動作環境
本記事は以下の環境で動作確認を行なっています。
Rust, Axum共に最新の機能を使っているわけではないので、これよりもある程度古いバージョンでも動作すると思われます。

Rust 1.78.0
Axum 0.7.5


 Extension
axumには Extension という型があります。
ドキュメントに多くは書かれていないのですが、それには以下のようにあります。

Extractor and response for extensions.
As extractor
This is commonly used to share state across hand...]]></description><link>https://zenn.dev/techno_tanoc/articles/a295da5efcd494</link><guid isPermaLink="true">https://zenn.dev/techno_tanoc/articles/a295da5efcd494</guid><pubDate>Mon, 27 May 2024 10:24:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YYjhrlR6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%25E3%2581%25A7%25E3%2581%25AEExtension%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2520-%2520%25E3%2583%259F%25E3%2583%2589%25E3%2583%25AB%25E3%2582%25A6%25E3%2582%25A7%25E3%2582%25A2%25E3%2581%25A8%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%2585%25B1%25E6%259C%2589%25E3%2581%2599%25E3%2582%258B%2520-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techno-tanoC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlZTdjM2ZlYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techno-tanoC</dc:creator></item><item><title><![CDATA[KotlinでUnion Typeを使いこなそう]]></title><description><![CDATA[!
この記事は毎週必ず記事がでるテックブログ "Loglass Tech Blog Sprint"の41週目の記事です！ 1年間連続達成まで 残り 12 週 となりました！


 はじめに
こんにちは、株式会社ログラスでエンジニアをしています、Kyosukeです。
私は前職では主にTypescriptでフロントエンド・バックエンドのどちらも開発を行っていたのですが、ログラスではフロントエンドにTypescript、バックエンドにKotlinを使用しています。
そしてKotlinを書いていると、定期的にTypeScriptで言う、Union Typeを使いたくなることがあります。
そこで、...]]></description><link>https://zenn.dev/loglass/articles/46be7f140a60bd</link><guid isPermaLink="true">https://zenn.dev/loglass/articles/46be7f140a60bd</guid><pubDate>Mon, 27 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c_yWO4WT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25A7Union%2520Type%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kyosuke%2520Awata%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNWQ4ZTRjZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzYmYxMDc5MDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyosuke Awata</dc:creator></item><item><title><![CDATA[Rust における文字列の所有権]]></title><description><![CDATA[
 はじめに
Rust で参照&amp;を利用するシーンは少なくないことですよね。
個人的に、Rust の学習において、所有権、所有権解放、メモリ等は理解しておかなければいけないところかなと感じています。
今回は文字列にフォーカスして、紹介していけたらと思います。

 文字列
参照はすでに知っている方もいらっしゃる方も少なくないかもしれません。
&amp;を付けることによって、所有権を保持することのない参照の値とすることができます。
fn main() {
    let name = "Rust".to_string();
    let rename = &amp;name;

  ...]]></description><link>https://zenn.dev/collabostyle/articles/b9f185729c934f</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/b9f185729c934f</guid><pubDate>Sat, 25 May 2024 15:23:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ovd4TUzZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[SQLx を使って PostgreSQL にアクセスする]]></title><description><![CDATA[
 はじめに
今回は Rust の SQLx を使って、
マイグレーションファイルを作成し、PostgreSQLにアクセスするところまでやっていきたいと思います。
SQLx は様々なデーターベースサービスをサポートしていますので、良いですね。
PostgreSQL, MySQL, MariaDB, SQLite
▼SQLx
https://github.com/launchbadge/sqlx

 プロジェクトを作成
Rust を動かすディレクトリを作成します。
$ cargo new sqlx-sample
$ cd new sqlx-sample
これで一旦の準備は完了です。
このタ...]]></description><link>https://zenn.dev/collabostyle/articles/97a5069804b175</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/97a5069804b175</guid><pubDate>Sat, 25 May 2024 09:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Cgr7ytn4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SQLx%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520PostgreSQL%2520%25E3%2581%25AB%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[AWS のスイッチロールを簡単に実行するコマンドを書きました]]></title><description><![CDATA[類似品は色々とあるし、何なら AWS CLI と簡単なシェルスクリプトだけでも実現できます[1]。
https://github.com/99designs/aws-vault
https://github.com/yoshihitoh/assume-rolers
https://github.com/sinofseven/aws-masquerade
環境変数に AWS_ACCESS_KEY_ID や AWS_SECRET_ACCESS_KEY なんかを入れておいたらよしなにしてくれるやつが欲しかったんですが、探してみたけどどれもそういうことはできませんでした。
aws-vault は...]]></description><link>https://zenn.dev/okkez/articles/0101a435a28d43</link><guid isPermaLink="true">https://zenn.dev/okkez/articles/0101a435a28d43</guid><pubDate>Sat, 25 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zglMv-PC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25A4%25E3%2583%2583%25E3%2583%2581%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okkez%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlYmNkZTFhN2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okkez</dc:creator></item><item><title><![CDATA[プロジェクト内の様々な確認を行う：cargo-denyメモ [blessed.rsシリーズ11]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-denyについてです。

 cargo-denyとは
プロジェクト内の様々な確認を行うcargoの拡張ツール

 わかりやすいサイト

https://qiita.com/KisaragiEffective/items/30071957ae4174fdaf1a


 install
https://github.com/EmbarkStudios/cargo-deny?tab=readme-ov-file#install-cargo-deny
$ carg...]]></description><link>https://zenn.dev/kotabrog/articles/4d971167af4664</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/4d971167af4664</guid><pubDate>Thu, 23 May 2024 11:09:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Irp9pbwI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E5%2586%2585%25E3%2581%25AE%25E6%25A7%2598%25E3%2580%2585%25E3%2581%25AA%25E7%25A2%25BA%25E8%25AA%258D%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%25EF%25BC%259Acargo-deny%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA11%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[RustとEmbassyでKeyballのファームウェアを作った]]></title><description><![CDATA[
 はじめに
以前RustでKeyballのファームウェアを書きたい話で、ATMega32U4向けのファームウェアの作成をRustで試みたという話を書きましたが、結論から言うとこれは諦めてProMicro RP2040向けのファームウェアをRustで書くことにしました。
理由は当該記事に既にちらっと書いているのですが

USBの謎バグを解決できなかった
さすがにメモリサイズが小さすぎる
RP2040であればEmbassyが対応している
というのが大まかなものになっています。

今回は純正品ではなくAliExpressで互換品を購入したのですが、これは16MBのフラッシュメモリを積んでおり...]]></description><link>https://zenn.dev/nazo6/articles/keyball-embassy-rp2040</link><guid isPermaLink="true">https://zenn.dev/nazo6/articles/keyball-embassy-rp2040</guid><pubDate>Wed, 22 May 2024 14:32:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3lawgCle--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8Embassy%25E3%2581%25A7Keyball%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25A6%25E3%2582%25A7%25E3%2582%25A2%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nazo6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0YTA4ZjY1ZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nazo6</dc:creator></item><item><title><![CDATA[OpenTelemetry と OpenObserve でトレースとログを可視化してみた]]></title><description><![CDATA[マイクロサービスや分散システムなど今のシステムは複雑化していて全体の挙動を把握することは難しくなってきています。そこでシステムの内部状態を外部から可視化しシステムのパフォーマンスや健全性を維持するオブザーバビリティは必要不可欠となっています。
オブザーバビリティを高めることで、

障害の迅速な検出：リアルタイムでシステムの状態を監視し、問題が発生したときに通知することでダウンタイムを最小限に抑えられる
信頼性の向上: アプリケーションのレスポンス時間やエラーレートなどを監視して自動リカバリ機能を実装したりユーザー体験の向上に繋げられる
パフォーマンスの最適化：システムのボトルネックを特定...]]></description><link>https://zenn.dev/pyama2000/articles/0ad0e8db11d854</link><guid isPermaLink="true">https://zenn.dev/pyama2000/articles/0ad0e8db11d854</guid><pubDate>Wed, 22 May 2024 11:24:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O9EFbLoe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenTelemetry%2520%25E3%2581%25A8%2520OpenObserve%2520%25E3%2581%25A7%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25A8%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pyama2000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvcC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pyama2000</dc:creator></item><item><title><![CDATA[Diesel ORM 動的なクエリ発行ハック]]></title><description><![CDATA[
 背景・問題
Diesel ORMで動的にクエリを生成したいことがある。
特定の条件に当てはまるときのみ、WHEREを追加したいときはよくあるだろう。
そういった場合はinto_boxed(https://docs.rs/diesel/latest/diesel/prelude/trait.QueryDsl.html#method.into_boxed) を使用すれば容易に解決できる。
例はdocs.rsの方に載っているのでそちらを参照。
この記事で紹介するのはそういった基本的な解決法ではなく、特定のユースケースに対応するための少しハッキーな方法だ。
このようなSQLをORMで実現した...]]></description><link>https://zenn.dev/kbwok/articles/diesel-dynamic-query</link><guid isPermaLink="true">https://zenn.dev/kbwok/articles/diesel-dynamic-query</guid><pubDate>Tue, 21 May 2024 15:58:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IXgVLE9m--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Diesel%2520ORM%2520%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E7%2599%25BA%25E8%25A1%258C%25E3%2583%258F%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kbwo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxMzQ1ZGZjYjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kbwo</dc:creator></item><item><title><![CDATA[依存関係のライセンスの確認：cargo-licenseメモ [blessed.rsシリーズ10]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-licenseについてです。

 cargo-licenseとは
dependenciesのライセンスを確認するcargoの拡張ツール

 install
https://github.com/onur/cargo-license?tab=readme-ov-file#installation-and-usage
$ cargo install cargo-license

 使用方法
https://github.com/onur/cargo-licen...]]></description><link>https://zenn.dev/kotabrog/articles/55565684cdeed0</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/55565684cdeed0</guid><pubDate>Tue, 21 May 2024 15:36:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gEZXayrU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25BB%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25AE%25E7%25A2%25BA%25E8%25AA%258D%25EF%25BC%259Acargo-license%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA10%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[【Rust】MongoDBで配列内の特定の値だけnullに更新する実装]]></title><description><![CDATA[
 概要
MongoDBで配列内の値を更新するクエリはMongoDBで配列内の特定の値だけを更新するの記事で紹介されています。
今回はこの記事を参考にして、Rustで配列内の特定の値だけnullに更新する実装をしてみたのでメモ書きします。

 前提

今回使用したrustcのバージョンは1.78.0、mongo-rust-driverのバージョンは2.8.2です。


 実装のポイント

nullをどうやって設定するかという点について、bsonのドキュメントにあるNullのenumを使用します。

array_filtersに設定する実装として、UpdateOptionsを使用します。u...]]></description><link>https://zenn.dev/someone7140/articles/12c17433c57734</link><guid isPermaLink="true">https://zenn.dev/someone7140/articles/12c17433c57734</guid><pubDate>Tue, 21 May 2024 10:49:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kVd56Vh8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591MongoDB%25E3%2581%25A7%25E9%2585%258D%25E5%2588%2597%25E5%2586%2585%25E3%2581%25AE%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E5%2580%25A4%25E3%2581%25A0%25E3%2581%2591null%25E3%2581%25AB%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%2599%25E3%2582%258B%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A4%25E3%2581%258C%25E3%2582%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhNWRlOTE4YjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>なかつがわ</dc:creator></item><item><title><![CDATA[Rust の slog の基本設定]]></title><description><![CDATA[開発において効果的なログ管理は非常に重要です。
slogは構造化ログのための強力なライブラリなのですが、意外とまとまった記事が見つかりませんでした。もちろん公式サイトにはちゃんと書いてあるのですが、基本的な内容がほしいなと思いまとめてみました。

 全体像 (logging.rs)
最初に、DEFAULTとしてslogを設定している具体例を示し、順に解説していきます。
この例ではバージョン情報が全体のログに付与されるように設定してあります。

logging.rs
use once_cell::sync::Lazy;
pub use slog::*;
use slog_async::As...]]></description><link>https://zenn.dev/sawatani/articles/6f8790adb6d2c9</link><guid isPermaLink="true">https://zenn.dev/sawatani/articles/6f8790adb6d2c9</guid><pubDate>Mon, 20 May 2024 14:04:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CHz5iPWb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%2520slog%2520%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sawatani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyYzQ3NmVkMTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sawatani</dc:creator></item></channel></rss>