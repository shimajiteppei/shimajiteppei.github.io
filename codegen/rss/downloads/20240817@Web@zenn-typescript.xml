<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 17 Aug 2024 00:35:37 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Next.jsとtRPCで始めるタイプセーフなAPI開発]]></title><description><![CDATA[
 Next.jsとtRPCで始めるタイプセーフなAPI開発

 はじめに
近年、Webアプリケーションの開発において、フロントエンドとバックエンドの連携がますます重要になっています。特に、APIの設計と実装は、アプリケーションのパフォーマンスやメンテナンス性に大きな影響を与えます。そこで注目されているのが、Next.jsとtRPCの組み合わせです。Next.jsはReactベースのフレームワークであり、tRPCはタイプセーフなAPIを構築するためのライブラリです。この二つを組み合わせることで、開発者は効率的かつ安全にAPIを構築することができます。
本記事では、Next.jsとtRPC...]]></description><link>https://zenn.dev/llm_robot/articles/20240817-nextjs-trpc-api</link><guid isPermaLink="true">https://zenn.dev/llm_robot/articles/20240817-nextjs-trpc-api</guid><pubDate>Fri, 16 Aug 2024 22:07:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gfyKXwQG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A8tRPC%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25BC%25E3%2583%2595%25E3%2581%25AAAPI%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AIZAWA%2520version%253A0.0.2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMTE3MGM1NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AIZAWA version:0.0.2</dc:creator></item><item><title><![CDATA[Co-Edo終了報告サイトをCloudflareで開発するとき使った NuxtHub がとっても便利！]]></title><description><![CDATA[こんにちは。田中弘治です。
僕は2013年よりコワーキングスペース茅場町 Co-Edoというのを運営してきているのですが、実はまことに残念なことに、ビル建て替えに伴い本年中に終了することとなりました。
これまでご活用いただいたみなさま、本当にありがとうございます。
その報告をする専用サイトを作ろうと思い、どうせならCo-Edoへのメッセージを送れるようなものをと考えてたところで Cloudflare を活用しようと思いました。
D1 や KV といったエッジで動く技術は今後広まっていくと思うので、今後 Cloudflare 中心の開発をしていくための準備でもあります。

 作ったもの
1...]]></description><link>https://zenn.dev/comm_vue_nuxt/articles/nuxt-hub-cloudflare-2025-coedo-org</link><guid isPermaLink="true">https://zenn.dev/comm_vue_nuxt/articles/nuxt-hub-cloudflare-2025-coedo-org</guid><pubDate>Fri, 16 Aug 2024 12:02:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jx4rnM0z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Co-Edo%25E7%25B5%2582%25E4%25BA%2586%25E5%25A0%25B1%25E5%2591%258A%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592Cloudflare%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%2520NuxtHub%2520%25E3%2581%258C%25E3%2581%25A8%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%2582%25E4%25BE%25BF%25E5%2588%25A9%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:coedo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MTZlOWFlNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Vue%25E3%2583%25BBNuxt%2520%25E6%2583%2585%25E5%25A0%25B1%25E3%2581%258C%25E9%259B%2586%25E3%2581%25BE%25E3%2582%258B%25E5%25BA%2583%25E5%25A0%25B4%2520%252F%2520P...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c4STBvUEtWYXpIUGdWdUFwVFNiaFdXUGVZd0l2Rkd3QlV0alAwaHc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>coedo</dc:creator></item><item><title><![CDATA[Hats Protocolを理解する2！！]]></title><description><![CDATA[

 はじめに
この記事は以下の記事の続きになります！！
https://zenn.dev/mashharuki/articles/4fc8bb038497aa
前回まで Hats Module SDKの概要をまとめていました。
今回はその続きで Hats Signer Gate SDK 、 Hats Account SDK についてまとめた記事になります！！

 Hats Signer Gate SDK
Hats Signer Gate（HSG） は、特定のHatを着用しているアドレスに対してマルチシグ署名権を付与するコントラクトです。
これにより、オンチェーン組織（DAOなど）が、個...]]></description><link>https://zenn.dev/mashharuki/articles/f3a7047e0f0003</link><guid isPermaLink="true">https://zenn.dev/mashharuki/articles/f3a7047e0f0003</guid><pubDate>Fri, 16 Aug 2024 10:38:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---XM-hqLJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hats%2520Protocol%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B2%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Haruki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dIaXowNy12WWVodmV1RVRrNGZoU25LaldfYTVFdmJlYnprWG1XPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Haruki</dc:creator></item><item><title><![CDATA[Hats Protocolを理解する3！！]]></title><description><![CDATA[

 はじめに
この記事は以下の記事の続きになります！！
https://zenn.dev/mashharuki/articles/f3a7047e0f0003
前回の記事でHatsProtocolがどういうプロトコルかまとめました。
今回はSDKを実際に使って機能を試していきたいと思います！！

 SDKを使ってみた
では次にSDKを触っていきたいと思います！！
SDKのGitHubは以下です。
https://github.com/Hats-Protocol/sdk-v1-core
自分で触ってみた記録は以下のGitHubにまとめてみました！！
https://github.com/...]]></description><link>https://zenn.dev/mashharuki/articles/8cdd8bb7230b4f</link><guid isPermaLink="true">https://zenn.dev/mashharuki/articles/8cdd8bb7230b4f</guid><pubDate>Fri, 16 Aug 2024 10:38:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a8kD3gFn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hats%2520Protocol%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B3%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Haruki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dIaXowNy12WWVodmV1RVRrNGZoU25LaldfYTVFdmJlYnprWG1XPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Haruki</dc:creator></item><item><title><![CDATA[TypeScriptにInfinity型は存在する？]]></title><description><![CDATA[TypeScriptにはリテラル型という機能があるので、数値を型として使うことができます。
では特殊な数値Infinityに対応するInfinity型は存在するのか？ がこの記事のテーマです。
結論だけ先に書くと「Infinity型は表面上は提供されていないが内部的には存在する」という感じの不思議な状況のようです。
ちょっとややこしい話なので、順を追って説明していきます。

 そもそもInfinityはリテラルではない
実はInfinityはグローバル変数らしいです。
試しにVSCodeでInfinityの定義にジャンプしてみると次のように型定義されています。

このことから次のことが分...]]></description><link>https://zenn.dev/chot/articles/1d7369fbf058b0</link><guid isPermaLink="true">https://zenn.dev/chot/articles/1d7369fbf058b0</guid><pubDate>Fri, 16 Aug 2024 07:51:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eSvNbA6g--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25ABInfinity%25E5%259E%258B%25E3%2581%25AF%25E5%25AD%2598%25E5%259C%25A8%25E3%2581%2599%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ootidea%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJhYmMwZmQxYmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ootidea</dc:creator></item><item><title><![CDATA[ヒヨコでもわかる React x Vite ハンズオン]]></title><description><![CDATA[プログラミング初学者向けのハンズオン用の資料になります。]]></description><link>https://zenn.dev/kubo_programmer/books/74a3a1b3d25124</link><guid isPermaLink="true">https://zenn.dev/kubo_programmer/books/74a3a1b3d25124</guid><pubDate>Fri, 16 Aug 2024 07:04:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t5NfKMyV--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8wNmFlNDkyZDg1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>クボ太郎 | 窪田秀哉</dc:creator></item><item><title><![CDATA[ノーコードプロダクトのReact化の工夫]]></title><description><![CDATA[!
この記事は、CYBOZU SUMMER BLOG FES '24 (kintone Stage) DAY 3の記事です。


 はじめに
こんにちは！サイボウズ株式会社でkintone開発を行っている かげ です。
弊社が開発しているkintoneは、プログラミングの知識がなくても、ノーコードで業務のシステム化や効率化を実現するアプリがつくれるクラウドサービスです。
https://kintone.cybozu.co.jp
kintoneは初回リリースから10年以上経ちましたが、そのフロントエンドに使用されるClosure Libraryが今月(2024/08)EOLを迎えます。EO...]]></description><link>https://zenn.dev/cybozu_frontend/articles/nocode_fe_replace</link><guid isPermaLink="true">https://zenn.dev/cybozu_frontend/articles/nocode_fe_replace</guid><pubDate>Thu, 15 Aug 2024 21:46:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nMN3vGef--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258E%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2580%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AEReact%25E5%258C%2596%25E3%2581%25AE%25E5%25B7%25A5%25E5%25A4%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%258B%25E3%2581%2592%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjOTA1OThlNjEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%259C%25E3%2582%25A6%25E3%2582%25BA%2520%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2NmY5OGEzZTEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かげ</dc:creator></item><item><title><![CDATA[App Routerの基本的なデータフェッチング手法]]></title><description><![CDATA[
 はじめに
ここ十数年のWebアプリ開発では、ブログ記事の表示やユーザーのプロフィール情報取得など、外部データを取得して表示することが当たり前になってますよね。
Next.jsのApp Routerは、そんなデータフェッチをより直感的で柔軟に行うことができるようになっている+キャッシングが強化されたり、Server Actionsという新たな機能が追加されたり。。と、大きく進化ししています。
ということで、今回はApp Routerにおけるさまざまなデータフェッチの手法について、これからNext.jsを学ぶ方、「Pages Routerを使ったことはあるけどApp Routerはまだ〜...]]></description><link>https://zenn.dev/blueish/articles/61526c0983362e</link><guid isPermaLink="true">https://zenn.dev/blueish/articles/61526c0983362e</guid><pubDate>Thu, 15 Aug 2024 20:25:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3_6VcRVK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:App%2520Router%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2595%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2581%25E3%2583%25B3%25E3%2582%25B0%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E4%25BD%2590%25E3%2580%2585%25E6%259C%25A8%2520%25E7%25BE%258E%25E9%2581%25A5%2520%257C%2520BLUEISH%2520E...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5YWRmNjMzNzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BLUEISH%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3MDYwNjU5YWIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>佐々木 美遥 | BLUEISH Engineer</dc:creator></item><item><title><![CDATA[TypeScriptで値なしをundefinedに統一する]]></title><description><![CDATA[
 主張

値なしをundefinedに統一すること

なぜ統一するか？
なぜnullに統一しないのか？
APIのレスポンスやライブラリ、またはjsのAPIでnullが発生しうるが、それにはどう対応すれば良いか？


値なしのハンドリングを論理否定演算子(!)で行うこと

なぜ x === undefinedとしないのか？
null/undefinedと同様に0/空文字もtrue判定となるが、、、




 目的
TypeScript/JavaScriptにおいて、nullを可能な限り使用せず、undefined/optionalの使用を勧める、もしくはコーディング規約に追加すること。
...]]></description><link>https://zenn.dev/daikuman/articles/ba7ac42a7fe231</link><guid isPermaLink="true">https://zenn.dev/daikuman/articles/ba7ac42a7fe231</guid><pubDate>Thu, 15 Aug 2024 11:49:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xaIVT4Gi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E5%2580%25A4%25E3%2581%25AA%25E3%2581%2597%25E3%2582%2592undefined%25E3%2581%25AB%25E7%25B5%25B1%25E4%25B8%2580%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dyecma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNmVmMzk3ZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dyecma</dc:creator></item><item><title><![CDATA[graphql-request v7をCommonJS環境で使い続ける]]></title><description><![CDATA[
 graphql-request@7.0.0にてCommonJSがサポート対象外に
Release Noteに記載されている通り、v7以降ではCommonJSサポートが削除されESMのみサポートとなりました。

7.0.0
BREAKING CHANGES

2a121c6 remove inlined graphql websocket code
99a192e add spec compliant default Accept header (#618)
0e53aed replace GraphQLClientRequestHeaders with built-in Header...]]></description><link>https://zenn.dev/grainrigi/articles/dbc2cbf4021fb8</link><guid isPermaLink="true">https://zenn.dev/grainrigi/articles/dbc2cbf4021fb8</guid><pubDate>Thu, 15 Aug 2024 07:01:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2CtPo_oj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:graphql-request%2520v7%25E3%2582%2592CommonJS%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2584%25E7%25B6%259A%25E3%2581%2591%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:grainrigi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeFhjT3BsTDdwd3lZcHNKRUl0VUx0UDBoRUpDYnZNQWcwQXVweVI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>grainrigi</dc:creator></item><item><title><![CDATA[Next.js14 + ヘッドレスブラウザでOG画像の自動生成APIを作る]]></title><description><![CDATA[こんにちは。音楽ディレクター・プロデューサーの村上といいます。
今回は、Next.jsサイトで各記事のOG画像を自動生成するシステムを独自実装で作ってみました。普通のAPIなので、Next.jsではない、どんなサイトでも使えます。
（Next.js/Vercelが提供する動的OGP自動生成ライブラリも存在しますが、いろいろ問題があって使えず。後述）

 OG画像 is 何
OGPとも呼ばれます。これがサイトにメタデータとして埋め込まれていると、Ｘ(Twitter)やLineなどの各SNSやブログなどで、ユーザーがページをシェアしたときにサムネイル的なやつが表示されます。
下記が完成品です...]]></description><link>https://zenn.dev/jun_murakami/articles/7e5bf3a85fde65</link><guid isPermaLink="true">https://zenn.dev/jun_murakami/articles/7e5bf3a85fde65</guid><pubDate>Thu, 15 Aug 2024 01:12:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mypUdIU6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js14%2520%252B%2520%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25A7OG%25E7%2594%25BB%25E5%2583%258F%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590API%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jun%2520Murakami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WUpGeVFIblVsUDZucHhNYXZtX25qUEx3M1JfanJxRldjdEhDSjlodz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jun Murakami</dc:creator></item><item><title><![CDATA[Vite+TypeScriptでp5.js+daisyUI(TailWindCSS)開発用Boilerplateを作ってみた]]></title><description><![CDATA[
 🚀 はじめに
これまでReactベースのウェブサイトを作る機会が多く、UIは全てdaisyUI(TailWindCSS)をカスタマイズして使っていました。
事業紹介などの目的のものが多く、特にサーバとのやりとりをするような重い処理は不要だったので、フロントエンドのUI/UXにだけに注力してきました。
...思い返せば、クライアントワークばかりしてきて、自分のホームページを全然更新していなかったので、これを機会にリニューアルしてみました...!
👇こちらです
https://fujii-web.works/

 &lt;/&gt; 公開GitHubレポジトリ(vite-typescri...]]></description><link>https://zenn.dev/fww/articles/dev_vite-typescript-tailwindcss-p5js-boilerplate</link><guid isPermaLink="true">https://zenn.dev/fww/articles/dev_vite-typescript-tailwindcss-p5js-boilerplate</guid><pubDate>Thu, 15 Aug 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9DQg7Qzm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vite%252BTypeScript%25E3%2581%25A7p5.js%252BdaisyUI%2528TailWindCSS%2529%25E9%2596%258B%25E7%2599%25BA%25E7%2594%25A8Boilerplate%25E3%2582%2592...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%2598%25E3%2583%25BC%2540Fujii%2520Web%2520Works%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3NmJhOGZmOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふじー@Fujii Web Works</dc:creator></item><item><title><![CDATA[Cloud Functions 2nd gen.でNest.jsを使うためのテンプレート（Hot Reload付き）]]></title><description><![CDATA[
 はじめに
バックエンドにNest.jsを個人的に使うようになってしばらく経ちますが、Nest.jsの精緻な公式ドキュメント・豊富なコミュニティ記事が心強いです。
とはいえ、試行錯誤が必要になったケースもあって、筆者の場合、サーバーレス環境へのデプロイ、具体的にはCloud Functionsへのデプロイがその一つでした。
公式ドキュメントにはなるほどServerlessの一項は設けられていますが、AWS Lambdaこそあれ、Cloud Functionsに関する具体的な記述はありません。
https://docs.nestjs.com/faq/serverless#serverle...]]></description><link>https://zenn.dev/ptna/articles/6dc37529ac61d9</link><guid isPermaLink="true">https://zenn.dev/ptna/articles/6dc37529ac61d9</guid><pubDate>Wed, 14 Aug 2024 22:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zqT7ugNC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloud%2520Functions%25202nd%2520gen.%25E3%2581%25A7Nest.js%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%2588Hot%2520Reload%25E4%25BB%2598%25E3%2581%258D%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hosaka313%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNDZkNWFmNTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%2585%25A8%25E6%2597%25A5%25E6%259C%25AC%25E3%2583%2594%25E3%2582%25A2%25E3%2583%258E%25E6%258C%2587%25E5%25B0%258E%25E8%2580%2585%25E5%258D%2594%25E4%25BC%259A%25EF%25BC%2588%25E3%2583%2594%25E3%2583%2586%25E3%2582%25A3%25E3%2583%258A%25EF%25BC%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lvTjJRYzJRN1V1ZnM1X29EblNkWkt4OFNPSWUzOTBaQTRSTDVOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hosaka313</dc:creator></item><item><title><![CDATA[TypeScriptの高度な型システム：条件付き型とマッピング型の活用法]]></title><description><![CDATA[
 TypeScriptの高度な型システム：条件付き型とマッピング型の活用法

 はじめに
TypeScriptは、JavaScriptに型安全性を追加するためのプログラミング言語であり、開発者がより堅牢で保守性の高いコードを書くことを可能にします。TypeScriptの型システムは非常に強力で、特に条件付き型とマッピング型は、型の柔軟性と再利用性を高めるための重要な機能です。本記事では、これらの高度な型システムの概念を深く掘り下げ、実践的な例を通じてその活用法を解説します。

 TypeScriptの型システムの概要
TypeScriptの型システムは、静的型付けを提供し、開発者がコー...]]></description><link>https://zenn.dev/llm_robot/articles/20240815-typescript-conditional-mapping</link><guid isPermaLink="true">https://zenn.dev/llm_robot/articles/20240815-typescript-conditional-mapping</guid><pubDate>Wed, 14 Aug 2024 22:08:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_aUFJp2B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E9%25AB%2598%25E5%25BA%25A6%25E3%2581%25AA%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25EF%25BC%259A%25E6%259D%25A1%25E4%25BB%25B6%25E4%25BB%2598%25E3%2581%258D%25E5%259E%258B%25E3%2581%25A8%25E3%2583%259E%25E3%2583%2583%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%25E5%259E%258B%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AIZAWA%2520version%253A0.0.2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMTE3MGM1NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AIZAWA version:0.0.2</dc:creator></item><item><title><![CDATA[【JS初級】#1 mapメソッドとforEachメソッドの違い・使い分け【3分解説】]]></title><description><![CDATA[
 まえがき
今回から始まりました、JavaScript(TypeScript)解説シリーズ。実務でJavaScript(TypeScript)を使っている人も、勉強中の人も、「あれ？言われてみればどうだったっけ？」となるような疑問を解決していこうというコーナーです。今後はもっと踏み込んだ内容も執筆していきたいと思っています。

 今回のテーマ
第一回のテーマはmapメソッドとforEachメソッドです。どちらもよく使われることのあるメソッドですが、違いを正しく理解せずに使っている方も中にはいるのではないでしょうか。今回はこの二つのメソッドの違いについて解説します。

 例題
const...]]></description><link>https://zenn.dev/gamuprog/articles/29ea2f58883750</link><guid isPermaLink="true">https://zenn.dev/gamuprog/articles/29ea2f58883750</guid><pubDate>Wed, 14 Aug 2024 22:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tAoYOBB1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JS%25E5%2588%259D%25E7%25B4%259A%25E3%2580%2591%25231%2520map%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25A8forEach%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2583%25BB%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2580%25903%25E5%2588%2586%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258C%25E3%2582%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmYTNjODM0OTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>がむ</dc:creator></item><item><title><![CDATA[TypeScript、ネストする型定義とFE/BEでの使い方]]></title><description><![CDATA[
 前提

研修を終えて配属一週間目のひよこです

研修で触れた言語やフレームワーク

HTML, CSS
JavaScript
React
TypeScript
python
Java
kotlin
SpringBoot




諸々触れることはできていても理解は甘々なので、自分でwebアプリを作ってみてます
TODO管理アプリのフロントとバックを作ります

使用する言語など

フロント

TypeScript
React


バック

TypeScript
Firebase Function




プロダクトのコンセプト

TODO粒度での振り返りを行いやすくすることで、成長のPD...]]></description><link>https://zenn.dev/shunsuke108m/articles/c6c4966e77d4e8</link><guid isPermaLink="true">https://zenn.dev/shunsuke108m/articles/c6c4966e77d4e8</guid><pubDate>Wed, 14 Aug 2024 18:11:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uaX8uRvh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2580%2581%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8FE%252FBE%25E3%2581%25A7%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%25AE%25E7%2594%25B0%25E5%25B3%25BB%25E8%25BC%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG9Jdy1QSHNvSW1WVGpKTmxFbkhnZkRyZ0pBVlRSQzhIaWMweDVJUmZLS3hlUjZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宮田峻輔</dc:creator></item><item><title><![CDATA[TypeScriptの基本的な型]]></title><description><![CDATA[
 型アノテーション(型注釈)
変数名: 型名 = 値
let name: string = "Name";

 プリミティブな型

 number

整数、浮動小数、負の値、NaN(not a number)、infinity、2進数(0b)、8進数(0o)、16進数(0x)
範囲は約 -9007199254740991-(2^53 − 1)から約 90071992547409912^53 − 1



 string

シングルクウォート、ダブルクウォート、バックティック(テンプレートリテラル)


 boolean

true/false


 undefined

値が存在しない...]]></description><link>https://zenn.dev/momonga_g/articles/755294dea6f610</link><guid isPermaLink="true">https://zenn.dev/momonga_g/articles/755294dea6f610</guid><pubDate>Wed, 14 Aug 2024 16:11:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ujR3TMvt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2582%2582%25E3%2582%2593%25E3%2581%258C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiZWRkZTc0YzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ももんが</dc:creator></item><item><title><![CDATA[Firebaseにデプロイが反映されなくなったが、package.jsonのmainが原因だった件]]></title><description><![CDATA[
 状況

Firebase Functionに、新しく書いた関数のデプロイが反映されない
デプロイ自体はエラーなく実行できるているが、Functionsを見ても新しく書いた関数が追加されていない
エラーは特に出ていないので原因不明で発狂。ChatGPTもお手上げ。


 環境

フロント　：　TypeScript * React（Vite）
バック　：　TypeScript * Firebase


 ざっくりディレクトリ構成
- vite-project
    - function //Firebase周り
    - common/schema //フロントでもバックでも使う型を...]]></description><link>https://zenn.dev/shunsuke108m/articles/9dd0d08584d257</link><guid isPermaLink="true">https://zenn.dev/shunsuke108m/articles/9dd0d08584d257</guid><pubDate>Wed, 14 Aug 2024 14:31:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yDKX8vsS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Firebase%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%258C%25E5%258F%258D%25E6%2598%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%258C%25E3%2580%2581package.json%25E3%2581%25AEmain%25E3%2581%258C%25E5%258E%259F%25E5%259B%25A0%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%25AE%25E7%2594%25B0%25E5%25B3%25BB%25E8%25BC%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG9Jdy1QSHNvSW1WVGpKTmxFbkhnZkRyZ0pBVlRSQzhIaWMweDVJUmZLS3hlUjZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宮田峻輔</dc:creator></item><item><title><![CDATA[ネストオブジェクトの罠 RE: TypeScriptで「選択肢」の定義をEnum的な定数にまとめる]]></title><description><![CDATA[この記事は、静的解析とビルドサイズ面で興味深いテーマでした。記事として自分の考えを書きます。
https://zenn.dev/yumemi_inc/articles/ts-enum-like-const
注意。あくまでビルドパフォーマンス視点での最適化です。強い意図があって、自分のドメインモデリングの方法論ではこれが最適なんだ、というなら元コードの方法論を止めるつもりはありません。

 元記事のコードを minify するとどうなるか
元コードを参考に、それにアクセスするサンプルコードを書いてみます。
const sortingOptions = {
  priceDesc: {
  ...]]></description><link>https://zenn.dev/mizchi/articles/you-cant-mangle-nested-obj</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/you-cant-mangle-nested-obj</guid><pubDate>Wed, 14 Aug 2024 13:58:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O2YKfqHk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E7%25BD%25A0%2520RE%253A%2520TypeScript%25E3%2581%25A7%25E3%2580%258C%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%25E3%2580%258D%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592Enum%25E7%259A%2584%25E3%2581%25AA%25E5%25AE%259A%25E6%2595%25B0%25E3%2581%25AB%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[use-immer でネストした State を更新する]]></title><description><![CDATA[こんにちは。記事の連投記録更新中ののツーさんです 😁。State の管理といえば React の "useState" を使うのが一般的ですよね。もちろん私もよく使っています。
しかし、下記みたいなネストされた State を更新をする時ってちょっとめんどくさいと思ったことありませんか？
const [form, setForm] = useState&lt;FormType&gt;({
  name: "",
  address: {
    prefecture: "",
    city: "",
  },
  contact: {
    tel: "",
    email: ...]]></description><link>https://zenn.dev/cocomina/articles/update-nested-state-with-use-immer</link><guid isPermaLink="true">https://zenn.dev/cocomina/articles/update-nested-state-with-use-immer</guid><pubDate>Wed, 14 Aug 2024 13:43:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C6YpJ2Sh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:use-immer%2520%25E3%2581%25A7%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%2520State%2520%25E3%2582%2592%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Twosun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA3OGIxMjYyYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Twosun</dc:creator></item></channel></rss>