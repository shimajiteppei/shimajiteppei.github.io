<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 10 Aug 2024 12:03:40 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Java製クローラーフレームワークの実装]]></title><description><![CDATA[
 イントロダクション
有名なクローラーフレームワークに、Scrapyがあります。今回、Javaで同じような動きをするフレームワークを実装してみました。
アーキテクチャは、完全にScrapyのアーキテクチャ概観ページから真似しています。
https://doc-ja-scrapy.readthedocs.io/ja/latest/topics/architecture.html
フレームワーク名はKaibutsuにしました。
https://github.com/heruoji/Kaibutsu
Scrapyのコード自体は全く見ておらず、あくまで勉強用に想像して実装した偽物なので、悪しか...]]></description><link>https://zenn.dev/currypun/articles/f1857840deba00</link><guid isPermaLink="true">https://zenn.dev/currypun/articles/f1857840deba00</guid><pubDate>Sat, 10 Aug 2024 10:43:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vk6jjBn3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E8%25A3%25BD%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B8%25E3%2582%258B%25E3%2581%258A%25E3%2583%25BC%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhYWFiNjI2ODguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>へるおーじ</dc:creator></item><item><title><![CDATA[Resilience4jドキュメントの日本語訳（非公式）を公開しました]]></title><description><![CDATA[
 Resilience4jとは
Resilience4jは、Javaで実装されたサーキットブレイカーライブラリです。サーキットブレイカーとして有名なNetflixのHystrixは既に開発がメンテナンスモードに入っていて、積極的には開発がされていません。Resilience4jはその代替となるライブラリとして期待されています。
リポジトリ → https://github.com/resilience4j/resilience4j
公式ドキュメント（英語） → https://resilience4j.readme.io
ざっくりと理解したい場合は、僕がPivotal SpringOn...]]></description><link>https://zenn.dev/masatoshi_tada/articles/a8b44736f3c48b</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/a8b44736f3c48b</guid><pubDate>Sat, 10 Aug 2024 01:41:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hyArGeAW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Resilience4j%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E8%25A8%25B3%25EF%25BC%2588%25E9%259D%259E%25E5%2585%25AC%25E5%25BC%258F%25EF%25BC%2589%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Springのプロファイル機能、そしてSpring Bootのapplication.properties]]></title><description><![CDATA[
 Springのプロファイル機能
プロファイルとは、DIコンテナ内のBeanのグループです。任意のグループ名を指定できます。
Beanにプロファイルを指定するには、 @Profile アノテーションを利用します。

DevBean.java
@Profile("dev")
@Component
public class DevBean {
}


ProductionBean.java
@Profile("production")
@Component
public class ProductionBean {
}

@Profile が付加されていないBeanは、特定のプロファイルに...]]></description><link>https://zenn.dev/masatoshi_tada/articles/3ebda7aa28d8b6</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/3ebda7aa28d8b6</guid><pubDate>Sat, 10 Aug 2024 01:41:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mpTsDWtY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E6%25A9%259F%25E8%2583%25BD%25E3%2580%2581%25E3%2581%259D%25E3%2581%2597%25E3%2581%25A6Spring%2520Boot%25E3%2581%25AEapplication.properties%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[令和時代に「Spring入門」「Spring徹底入門」を読むとき気をつけるべきN個のこと]]></title><description><![CDATA[
 この記事について
事ある度に書いたり言ったりしている通り、2020年を迎えようとしている現在でも、信頼できるSpring関連書籍は下記の2冊しかありません。

Spring徹底入門
改訂新版Spring入門

2冊（以下「書籍」）とも超良書なのですが、どちらもリリースされたのが2016年で、対応しているSpringのバージョンが4.2と古くなっています。
2019年末時点での最新版はSpring 5.2です。この記事では、上記書籍を令和の今読む際、特に気をつけるべき点をいくつか紹介していきます。

4.x-&gt;5.xの差分すべてについては、GitHubのWikiを確認してください...]]></description><link>https://zenn.dev/masatoshi_tada/articles/1c19b429069632</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/1c19b429069632</guid><pubDate>Sat, 10 Aug 2024 01:40:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NBR2RY2T--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%25A4%25E5%2592%258C%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AB%25E3%2580%258CSpring%25E5%2585%25A5%25E9%2596%2580%25E3%2580%258D%25E3%2580%258CSpring%25E5%25BE%25B9%25E5%25BA%2595%25E5%2585%25A5%25E9%2596%2580%25E3%2580%258D%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2580%25E3%2581%25A8%25E3%2581%258D%25E6%25B0%2597%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258DN%25E5%2580%258B%25E3%2581%25AE%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[入門Javaのenum]]></title><description><![CDATA[
この記事のサンプルコードは、enumの説明に特化しています。それゆえ、一般的には良くないとされるコードも含まれています（金額の計算で BigDecimal ではなく int や double を使っているなど）。


 分類などをどう表すか
例えば、架空のECサイトのシステムを考えます。このECサイトの会員にはブロンズ会員・シルバー会員・ゴールド会員の３つのランクがあり、ランクによって割引率などが異なります。これをどうやって表しましょうか？
まずは良くない例です。

良くない例
public class Rank {
    public static final int BRONZE...]]></description><link>https://zenn.dev/masatoshi_tada/articles/1484727a2ea8ca</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/1484727a2ea8ca</guid><pubDate>Sat, 10 Aug 2024 01:39:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b8NnQ0fY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%25E5%2585%25A5%25E9%2596%2580Java%25E3%2581%25AEenum%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[入門Javaのリフレクション]]></title><description><![CDATA[
 はじめに

 リフレクションとは
リフレクションとは、クラス・コンストラクタ・フィールド・メソッドなどを扱うためのJava標準APIです。
具体的には、次のようなクラスがあります。



パッケージ
クラス名
表すもの




java.lang
Class
クラス


java.lang.reflect
Constructor
コンストラクタ


java.lang.reflect
Field
フィールド


java.lang.reflect
Method
メソッド




 リフレクションを知る意義
Springなどのフレームワークは、多くの内部処理でリフレクションを利用してい...]]></description><link>https://zenn.dev/masatoshi_tada/articles/7d18bdd0d84990</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/7d18bdd0d84990</guid><pubDate>Sat, 10 Aug 2024 01:38:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XU6kN-WD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E9%2596%2580Java%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2595%25E3%2583%25AC%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Spring MVCで、Filterでリクエストボディとレスポンスボディをログ出力するときの落とし穴と対策]]></title><description><![CDATA[
 やりたいこと
リクエストボディとレスポンスボディの内容を、Filterでログ出力したい。

ログ出力例
... リクエストボディ = param1=value1&amp;param2=value2
... レスポンスボディ = This is reponse body


本来は秘匿情報のマスクなどが必要になりますが、この記事ではその説明を省いています。


 問題
HttpServletRequest や HttpServletResponse には、ボディを String で取得するようなメソッドは存在しません。前者には getInputStream() 、後者には getOut...]]></description><link>https://zenn.dev/masatoshi_tada/articles/d9c66e38d4409f</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/d9c66e38d4409f</guid><pubDate>Sat, 10 Aug 2024 01:38:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eYU0B928--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520MVC%25E3%2581%25A7%25E3%2580%2581Filter%25E3%2581%25A7%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2583%259C%25E3%2583%2587%25E3%2582%25A3%25E3%2581%25A8%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%259C%25E3%2583%2587%25E3%2582%25A3%25E3%2582%2592%25E3%2583%25AD%25E3%2582%25B0%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%25E3%2581%25A8%25E5%25AF%25BE%25E7%25AD%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[DataSourceが複数ある場合にSpring Testの@Sqlを使う場合の落とし穴]]></title><description><![CDATA[
 やりたいこと
DataSourceが複数ある場合のテスト時に、Spring Testの@Sqlを使ってそれぞれのDataSourceにデータ投入を行いたいです。
Spring Bootで DataSource を複数作る方法は、👇の記事を参照してください。
https://qiita.com/suke_masa/items/92fcd8b30e55f67c0855

 忙しい人のためのまとめ


@SqlConfigに必ず下記を設定しましょう


dataSource要素にDataSourceのBean ID

transactionManager要素にPlatformTransac...]]></description><link>https://zenn.dev/masatoshi_tada/articles/c78e8f0dae3eed</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/c78e8f0dae3eed</guid><pubDate>Sat, 10 Aug 2024 01:37:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vhDU7WZ8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DataSource%25E3%2581%258C%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%2582%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25ABSpring%2520Test%25E3%2581%25AE%2540Sql%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Spring Security 5.xでOAuth2アクセストークンをリフレッシュする]]></title><description><![CDATA[

2019/12/03 Spring Security 5.2リリースに伴い、記事を大幅に修正しました
2020/09/04 RefreshTokenOAuth2AuthorizedClientProvider ではなく DefaultRefreshTokenTokenResponseClient を使う方法に全面的に書き換えました。併せて、Spring Security 5.3にアップデートしました



 前提
認可サーバーはKeycloak、クライアントやリソースサーバーをSpring Security 5.3で作成しています。

 関連記事

OAuth 2.0 with Sp...]]></description><link>https://zenn.dev/masatoshi_tada/articles/bc82873896e1c0</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/bc82873896e1c0</guid><pubDate>Fri, 09 Aug 2024 12:28:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JqTGUdvC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Security%25205.x%25E3%2581%25A7OAuth2%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%25B3%25E3%2582%2592%25E3%2583%25AA%25E3%2583%2595%25E3%2583%25AC%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Spring BootでThymeleafのDialectを追加する方法]]></title><description><![CDATA[
 環境
Spring Boot 2.0

 デフォルトで使えるDialect

Java8TimeDialect

spring-boot-starter-thymeleafの依存性として入っていて、かつAuto Configurationクラス内で追加されているので、何もしないでも使うことができます。

 依存性を追加するだけでOKなDialect

SpringSecurityDialect
LayoutDialect
DataAttributeDialect

上記の3つはAuto Configuration対象になっているため、依存性を追加するだけで使うことが出来ます。
ここら...]]></description><link>https://zenn.dev/masatoshi_tada/articles/8ead76dbe8edf2</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/8ead76dbe8edf2</guid><pubDate>Fri, 09 Aug 2024 12:28:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V1H7lFaU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2581%25A7Thymeleaf%25E3%2581%25AEDialect%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Spring Bootでサーブレットフィルターを使う [Spring Boot 1.x, 2.x両対応]]]></title><description><![CDATA[
 環境

Spring Boot 1.5.10
Embedded Tomcat 8.5.27
JDK 8


2018-03-09追記
Spring Boot 2.0.0.RELEASEにアップグレードしても同様の挙動でした。


2018-12-20追記
Spring Boot 2.1の説明を追記しました。


 基本的なFilterの登録方法
Spring Bootで用意されているFilterRegistrationBeanクラスを利用します。
FilterRegistrationBeanをBean定義すると、Spring BootのAuto Configurationクラス内でF...]]></description><link>https://zenn.dev/masatoshi_tada/articles/5e6f7f774c468c</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/5e6f7f774c468c</guid><pubDate>Fri, 09 Aug 2024 12:27:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CamukEx3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2520%255BSpring%2520Boot%25201.x%252C%25202.x%25E4%25B8%25A1%25E5%25AF%25BE%25E5%25BF%259C%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmZTNhODA2MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Crew CTF 2024 - BearBurger (follow up)]]></title><description><![CDATA[(495pts 2/575 クリア率0.35%)
解けなかったけどwriteupは書くシリーズです
色々な料理をみたり料理にコメントしたりできるサイト。

app.warというファイルが配布されるが、これはJavaベースのWebアプリケーションが圧縮されたものらしい。java -jar app.warというコマンドで実行できた。
配布ファイルはjd-guiというデコンパイラを通すことで、中身を見ることができた。実行コマンドはjd-gui app.war。
フラグの位置はわからないので、おそらくRCEまで行うことが想定されていそうだ。

 ✅Step 1: 環境設定
まず、手元で起動しよう...]]></description><link>https://zenn.dev/tchen/articles/7a3150bc67af03</link><guid isPermaLink="true">https://zenn.dev/tchen/articles/7a3150bc67af03</guid><pubDate>Thu, 08 Aug 2024 04:32:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NRxSR4dk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Crew%2520CTF%25202024%2520-%2520BearBurger%2520%2528follow%2520up%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-chen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSndGbmw3UUNSVkZRdDdIRXpZYm84alBZQW0xYzhXTXhUc0c2UkgzMXRjV3NsMll3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-chen</dc:creator></item><item><title><![CDATA[[Minecraft Mod #2] Minecraft Mod開発の初期構築]]></title><description><![CDATA[
 はじめに
MinecraftのMod開発環境を作成するために、Forgeの公式サイトにある開発ファイルを使用したいと思います。
Minecraft Mod開発環境にはJavaとgradleのインストールが必要になりますので、環境がそろっていない場合は、以下の記事を参考にインストールをお願いします。
https://zenn.dev/dawnzlight/articles/java-gradle-install-coco9122

 Forgeのファイルのダウンロード
Forgeの公式サイトから開発環境の準備を行います。

 Forgeから開発用ファイルのダウンロード
今回は最新バージ...]]></description><link>https://zenn.dev/dawnzlight/articles/minecraft-mod-settings-coco9122</link><guid isPermaLink="true">https://zenn.dev/dawnzlight/articles/minecraft-mod-settings-coco9122</guid><pubDate>Wed, 07 Aug 2024 16:39:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OuMhtMtd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BMinecraft%2520Mod%2520%25232%255D%2520Minecraft%2520Mod%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:CoCo9122%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Dawn%2527z%2520Light%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hLY1FkbTlXblJabGVYLTBPeE5sM0tBTmpXNDVwcGpPU3pwMXdrPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>CoCo9122</dc:creator></item><item><title><![CDATA[Javaのprotectedについて]]></title><description><![CDATA[継承を説明する時に大体出てくるprotectedについて
人に説明をしようとした時に、実はあまり理解できてなかったのでまとめ。

 protectedとは？
Javaのprotectedは、クラスのメンバー（フィールドやメソッド）のアクセス制御を行うために使用するもの。
protectedが付けられたメンバーは、次の場合にアクセスできる。


同じパッケージ内のクラス：
同じパッケージに属するクラスからアクセスできる。


サブクラス（継承関係）：
継承しているクラスからアクセスできる。
サブクラスが異なるパッケージに存在していても、継承しているクラスであればアクセスできる。


pac...]]></description><link>https://zenn.dev/zenn_rr/articles/8fdb82dea2fe45</link><guid isPermaLink="true">https://zenn.dev/zenn_rr/articles/8fdb82dea2fe45</guid><pubDate>Tue, 06 Aug 2024 12:43:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bjup2FIQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AEprotected%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NWNhMDI0NzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sto</dc:creator></item><item><title><![CDATA[【Java】条件に沿って記号英数字を含むランダムなパスワードを生成する]]></title><description><![CDATA[
 １． はじめに
今回はパスワードポリシーに沿って記号英数字を含むランダムなパスワードを生成してみたいと思います。
具体的な条件は以下の通りです。
※こちらの記事を参考にパスワード生成でよく扱われる条件を追加してみました。



パスワードポリシー
コード上での表現




大文字アルファベットを含むことを許可あるいは不許可とする
uppercaseEnable = "true"/"false"


大文字アルファベットを必ず含む
uppercaseEnable = "required"


小文字アルファベットを含むことを許可あるいは不許可とする
lowercaseEnable = ...]]></description><link>https://zenn.dev/is0383kk/articles/c4cf5a62dcf4c4</link><guid isPermaLink="true">https://zenn.dev/is0383kk/articles/c4cf5a62dcf4c4</guid><pubDate>Mon, 05 Aug 2024 21:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4jYx3Mnm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E6%259D%25A1%25E4%25BB%25B6%25E3%2581%25AB%25E6%25B2%25BF%25E3%2581%25A3%25E3%2581%25A6%25E8%25A8%2598%25E5%258F%25B7%25E8%258B%25B1%25E6%2595%25B0%25E5%25AD%2597%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2580%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25A0%25E3%2581%25AA%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5ZDIwMDdjOTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヨ</dc:creator></item><item><title><![CDATA[PDFBox 3.0からPDDocument.loadメソッドが廃止された]]></title><description><![CDATA[
 これからの書き方
try (PDDocument document = Loader.loadPDF(byteArray)) {
      PDFTextStripper pdfStripper = new PDFTextStripper();
      System.out.println(pdfStripper.getText(document));
  } catch (Exception e) {
      e.printStackTrace();
  }


 環境
JDK 21
org.apache.pdfbox pdfbox 3.0.2

 変更点
PDDocum...]]></description><link>https://zenn.dev/dexcter/articles/9390f506339cf9</link><guid isPermaLink="true">https://zenn.dev/dexcter/articles/9390f506339cf9</guid><pubDate>Mon, 05 Aug 2024 13:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fjHN0rQC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PDFBox%25203.0%25E3%2581%258B%25E3%2582%2589PDDocument.load%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%258C%25E5%25BB%2583%25E6%25AD%25A2%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dexcter%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2ZmE0OTdmNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dexcter</dc:creator></item><item><title><![CDATA[【Mac】外部TomcatにSpring Bootアプリをデプロイしたが、サーバがうまく起動しなかったことから得た学び]]></title><description><![CDATA[
 はじめに
ローカル環境内の外部Tomcatにアプリをデプロイした際に、サーバの起動がうまくいかなかったため今回学んだ知識や解決内容も含め備忘録として残します。

 対象者
・現在、業務中にJavaを使用されていて経験年数が1〜3年目くらいの方
・外部のTomcatにアプリをデプロイすることに興味がある方、したことがない方
・Tomcatについて、あまり良くわかっていないという方

 環境
・JDK：21
・Spring Boot：3.3.2
・Tomcat：10.1.25

 前提

SpringBootアプリをMavenでビルドし、warファイルを出力
1で出力したwarファイルを...]]></description><link>https://zenn.dev/keita09/articles/9fecd0d3825ec7</link><guid isPermaLink="true">https://zenn.dev/keita09/articles/9fecd0d3825ec7</guid><pubDate>Sun, 04 Aug 2024 15:57:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lRkWbA9q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Mac%25E3%2580%2591%25E5%25A4%2596%25E9%2583%25A8Tomcat%25E3%2581%25ABSpring%2520Boot%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%259F%25E3%2581%258C%25E3%2580%2581%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%258C%25E3%2581%2586%25E3%2581%25BE%25E3%2581%258F%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%2597%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258B%25E3%2582%2589%25E5%25BE%2597%25E3%2581%259F%25E5%25AD%25A6%25E3%2581%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:keita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JjNTc2NjBmNTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>keita</dc:creator></item><item><title><![CDATA[VSCodeにてJavaのコードをフォーマットして、github Actionsでそれをチェックしたい]]></title><description><![CDATA[MinecraftのMod開発にJavaを使い始めて、コードの統一化（整合性）を保つためにフォーマットを実装しようとすると少し詰まってしましました。
PythonにはRuffやTypescriptにはprettierといった主流のライブラリ等の記事が簡単に見つかるのですが、私自身がJava初心者というもとこもあると思いますが、Javaではすんなり見つからず、、、
こんな苦戦した経緯もありまので、今回はJavaのフォーマット実装の解説になります。少しでも参考になれば幸いです。

 Javaのコードをフォーマットしたい
今回はフォーマットするにあたって、以下の条件は満たすようなものを探すこと...]]></description><link>https://zenn.dev/dawnzlight/articles/java-gradle-formatter-coco9122</link><guid isPermaLink="true">https://zenn.dev/dawnzlight/articles/java-gradle-formatter-coco9122</guid><pubDate>Sat, 03 Aug 2024 16:50:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IzUzhQ9M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25AB%25E3%2581%25A6Java%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%2583%25E3%2583%2588%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581github%2520Actions%25E3%2581%25A7%25E3%2581%259D%25E3%2582%258C%25E3%2582%2592%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:CoCo9122%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Dawn%2527z%2520Light%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hLY1FkbTlXblJabGVYLTBPeE5sM0tBTmpXNDVwcGpPU3pwMXdrPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>CoCo9122</dc:creator></item><item><title><![CDATA[ケツリカ(結論から理解)する　Class内用語集]]></title><description><![CDATA[自分が分からなくなったとき用のやつです

 inheritance and extends (継承と拡張)
継承とは
!

 既存のクラスの機能を引き継ぎ、新しいクラスを作成する仕組み

拡張とは
!

 拡張は継承の一種であり、既存のクラスの機能に新しい機能を追加する仕組み

最小限の例(java)// 基底クラス
class Animal {
    void makeSound() {
        System.out.println("Some sound");
    }
}

// 派生クラス
class Dog extends Animal {
    void mak...]]></description><link>https://zenn.dev/wh_space/articles/5c05b94c36248d</link><guid isPermaLink="true">https://zenn.dev/wh_space/articles/5c05b94c36248d</guid><pubDate>Sat, 03 Aug 2024 08:49:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZW5Nwpad--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B1%25E3%2583%2584%25E3%2583%25AA%25E3%2582%25AB%2528%25E7%25B5%2590%25E8%25AB%2596%25E3%2581%258B%25E3%2582%2589%25E7%2590%2586%25E8%25A7%25A3%2529%25E3%2581%2599%25E3%2582%258B%25E3%2580%2580Class%25E5%2586%2585%25E7%2594%25A8%25E8%25AA%259E%25E9%259B%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wh.space%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTE1YT3l1VDlvdnVSZ250aXFna0xpMUVjYUxSRjlEYzA4M3RrSnFoYm85d1JZQTJoVT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wh.space</dc:creator></item><item><title><![CDATA[【Java】クラス解説42・アノテーション]]></title><description><![CDATA[
 アノテーション
アノテーションとは、コード中に「＠」を付けてメタデータを付加することを言います。
アノテーションを利用することで、コンパイラが通常では検出できないエラーやバグを探知したり、特定の警告を抑制したりできます。
また、アノテーションを使用することで、コードの可読性が高まり、そして、保守性や拡張性を高めることができます。
全てのアノテーションを紹介はできませんが、下記でいくつかのアノテーションを解説します。


 @Override

 オーバーライドに失敗しているがエラーを出さないコード例
public class Main {
    public static void...]]></description><link>https://zenn.dev/goriki/articles/081-annotation</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/081-annotation</guid><pubDate>Fri, 02 Aug 2024 21:47:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DKXdDwTY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC42%25E3%2583%25BB%25E3%2582%25A2%25E3%2583%258E%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item></channel></rss>