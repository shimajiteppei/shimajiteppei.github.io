<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 29 May 2024 04:10:41 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[最速でXRPLのクロスカレンシー送金をJavaScriptで試す方法]]></title><description><![CDATA[私が作成しているXRPL道場でクロスカレンシー送金の講座を作成しましたので、合わせてこちらでも「最速でXRPLのクロスカレンシー送金をJavaScriptで試す方法」としてテストフローをご紹介したいと思います。

 前提
最終的に、以下の条件をクリアできるように進めていきます。

チャーリーからボブに、発行者AのA.USDが届くこと
チャーリーが発行者BのB.EURで支払いを行えること


 1.プロジェクトのセットアップ
// ディレクトリの作成・移動
mkdir xrpl-cross-currency
cd xrpl-cross-currency

// プロジェクト作成
npm i...]]></description><link>https://zenn.dev/nabe3/articles/f96cb8f006763b</link><guid isPermaLink="true">https://zenn.dev/nabe3/articles/f96cb8f006763b</guid><pubDate>Wed, 29 May 2024 00:24:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZVlDHATI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%2580%25E9%2580%259F%25E3%2581%25A7XRPL%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25BC%25E9%2580%2581%25E9%2587%2591%25E3%2582%2592JavaScript%25E3%2581%25A7%25E8%25A9%25A6%25E3%2581%2599%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nabe3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzZjM2ZDU5MDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nabe3</dc:creator></item><item><title><![CDATA[JavaScriptの正規表現でgフラグを使う際は気をつけた方が良い]]></title><description><![CDATA[
 はじめに
先日こちらのツイートが流れてきました。
https://x.com/jjenzz/status/1794891346643497418
動画内では次のことをやっていました。
何が起きているのか、まったくわからなかったので気になってこの挙動について調べて備忘録として残します。
&gt; const r = /boop/g
undefined
&gt; r.test("boop")
true
&gt; r.test("boop")
false
&gt; r.test("boop")
true
&gt; r.test("boop")
false
&gt; 

 gフラグとは
Ja...]]></description><link>https://zenn.dev/skanehira/articles/2024-05-29-js-regexp-g-flag</link><guid isPermaLink="true">https://zenn.dev/skanehira/articles/2024-05-29-js-regexp-g-flag</guid><pubDate>Wed, 29 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r0vJ8wMW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2581%25A7g%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E9%259A%259B%25E3%2581%25AF%25E6%25B0%2597%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2581%259F%25E6%2596%25B9%25E3%2581%258C%25E8%2589%25AF%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B4%25E3%2583%25AA%25E3%2583%25A9%2540%25E5%25AE%258C%25E5%2585%25A8%25E9%2580%25B1%25E4%25BC%25917%25E6%2597%25A5%25E3%2581%25AE%25E4%25BB%2595%25E4%25BA%258B%25E3%2581%258F%25E3%2581%25A0%25E3%2581%2595%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlNGE3Zjg2ODIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゴリラ@完全週休7日の仕事ください</dc:creator></item><item><title><![CDATA[バグギルド第1回！ CVE-2024-4367 – Arbitrary JavaScript execution in PDF.js]]></title><description><![CDATA[

 茶番
来たな新米バグハンター！ようこそバグギルドへ！
俺たちの業界(バグハント業界)では、世界中の脆弱性に飢えたハンター達が日夜脆弱性を見つけてはレポートとして報告し、その脆弱性にかけられた懸賞金をかっさらっていっている...
腕のたつハンターともなれば稼ぎまくりだ！
そんな夢のようなハンターという職業だが、伝説級のハンター、すなわちレジェンドハンターになるのはもちろん楽じゃあねえ...
このバグギルドは、お前ら新米ハンターが将来伝説級のハンターになれるように、腕利きのハンターたちが報告した脆弱性レポートを解説&amp;読み込んでいきながらレジェンドハンターを目指すことを目的とした...]]></description><link>https://zenn.dev/cyber_mamba/articles/ca5b2b25bb4df2</link><guid isPermaLink="true">https://zenn.dev/cyber_mamba/articles/ca5b2b25bb4df2</guid><pubDate>Tue, 28 May 2024 23:13:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hVLVROnc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2582%25B0%25E3%2582%25AE%25E3%2583%25AB%25E3%2583%2589%25E7%25AC%25AC1%25E5%259B%259E%25EF%25BC%2581%2520CVE-2024-4367%2520%25E2%2580%2593%2520Arbitrary%2520JavaScript%2520execution%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:namake_hebi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA0NGY5OWNlMTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>namake_hebi</dc:creator></item><item><title><![CDATA[Mobx とは]]></title><description><![CDATA[
 MobX とは
MobX は JavaScript の状態管理ライブラリで、React などのフレームワークと組み合わせて使用することが多く、特徴は状態管理をシンプルで直感的に行うことができる点である。以下の 3 つの主要な概念に基づいている。

State
アプリケーションを動かすデータのこと。スプレッドシートのセルのように扱うことで、その変更を追跡する。
Actions
State を変更するコード。ユーザーイベント、バックエンドデータへの送信、スケジュールされたイベントなどが該当します。
Derivations
State から相互作用なしに導き出すことができるもの。ユーザーイ...]]></description><link>https://zenn.dev/eitaro1230/articles/mobx-description</link><guid isPermaLink="true">https://zenn.dev/eitaro1230/articles/mobx-description</guid><pubDate>Tue, 28 May 2024 17:04:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H1RCzBDA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Mobx%2520%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:eitaro1230%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDNOT1g3UzNIZUhYNW9RVnBOQWE4bjFHazNScEdUWE9HU3pOREE0SFRFS3RIelBnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>eitaro1230</dc:creator></item><item><title><![CDATA[【JS】javascriptのvar , let ,constの違い]]></title><description><![CDATA[
 調べたきっかけ
varは確かいま非推奨で、constが定数...？
というような曖昧な理解で使ってしまっていたので、どういう時にどれをつかうべきなのかきちんと理解したく調べてまとめました

 そもそもvar,let,constってなに？
変数の宣言方法。どれを変数の前につけて宣言するかによって変数の扱いが変わる！

 3つの違い

 ①varは再宣言ができる。let、constはできない。
var test;
var test;//エラーでない
let test;
let test;// エラー
const test1;
const test1;// エラー

 ②var、letは再...]]></description><link>https://zenn.dev/nami_06063/articles/dc363ce8d232e3</link><guid isPermaLink="true">https://zenn.dev/nami_06063/articles/dc363ce8d232e3</guid><pubDate>Tue, 28 May 2024 11:46:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MqNjyKb_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JS%25E3%2580%2591javascript%25E3%2581%25AEvar%2520%252C%2520let%2520%252Cconst%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxMzc4Y2NmMzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nami</dc:creator></item><item><title><![CDATA[jsでQRコードを生成してSVGとして保存する]]></title><description><![CDATA[タイトルの通り、QRコードを生成してSVGで保存できる仕組みが必要になったので作成しました。
※自分用のメモです

 使用したライブラリ
https://www.npmjs.com/package/qrcode-generator

 ライブラリの追加
npm install qrcode-generator
or
yarn add qrcode-generator

 記述方法
HTML
...省略...
&lt;div id="qr_place_holder"&gt;&lt;/div&gt;
&lt;button id="generate_button"&gt;生成&lt;/butt...]]></description><link>https://zenn.dev/a_saya_108/articles/09b52118745c0a</link><guid isPermaLink="true">https://zenn.dev/a_saya_108/articles/09b52118745c0a</guid><pubDate>Tue, 28 May 2024 10:35:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rkjb-EMa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:js%25E3%2581%25A7QR%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6SVG%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:adachi%2520saya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2ZGYyZTcxZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>adachi saya</dc:creator></item><item><title><![CDATA[JavaScriptでエンコードを学ぶ]]></title><description><![CDATA[
 これはなに
今更ながらエンコードってなに??ってなったのでJavaScriptで試しながら学んでみた。
これはその時のメモを備忘録的にまとめたもの。

 エンコードとは
データを他の形式へ変換すること。
ポイントは、意味を変えずに形式を変換する点。
参考: エンコードとは

 身近なエンコード例
Google 検索で日本語を打ち込んで検索するとエンコードされる。
これは URL はアルファベットのみが許可されおり、日本語を含めることができないからである。
そのため日本語を入れると、アルファベットの組み合わせに変換（URL エンコード）される。
参考: URL エンコードとは

 Ja...]]></description><link>https://zenn.dev/s_h_i_o_n/articles/6cf009f65adf0e</link><guid isPermaLink="true">https://zenn.dev/s_h_i_o_n/articles/6cf009f65adf0e</guid><pubDate>Tue, 28 May 2024 07:49:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4yO6hEne--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shion%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzNmRkZTRmNzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shion</dc:creator></item><item><title><![CDATA[React + ViteでGoogle Chromeの拡張機能を作成する]]></title><description><![CDATA[
 作成するもの
chrome上でaを2回押した時、ブックマークが階層状に表示されるポップアップを作成していきます。


 プロジェクトのセットアップ
 % pnpm create vite@latest
✔ Project name: … bookmark-extension
✔ Select a framework: › React
✔ Select a variant: › JavaScript
プロジェクト直下に移動して以下のコマンドを実行します。
 % pnpm add -D @crxjs/vite-plugin@beta
vite.config.jsを編集します。

vite...]]></description><link>https://zenn.dev/monjara/articles/3b200fa041fbdf</link><guid isPermaLink="true">https://zenn.dev/monjara/articles/3b200fa041fbdf</guid><pubDate>Tue, 28 May 2024 00:42:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a3DH4AEu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520Vite%25E3%2581%25A7Google%2520Chrome%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:monjara%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwZTlkOTQwZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>monjara</dc:creator></item><item><title><![CDATA[PuppeteerとCloud Functons for Firebaseでスクレイピング]]></title><description><![CDATA[Node.js v18、Puppeteer v22とCloud Functons for Firebase v2環境でスクレイピングする最小構成を作ってみます。
https://github.com/takamoso/puppeteer-firebase-cloud-functions
GitHubにプロジェクト全体のコードが置いてあります。

 インストール
Firebaseプロジェクトの作成と firebase init までの作業は省略します。
npm i puppeteer puppeteer-chromium-resolver
スクレイピングするための puppeteer とロ...]]></description><link>https://zenn.dev/takamoso/articles/puppeteer-firebase-cloud-functions</link><guid isPermaLink="true">https://zenn.dev/takamoso/articles/puppeteer-firebase-cloud-functions</guid><pubDate>Mon, 27 May 2024 17:48:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oX1PH28c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Puppeteer%25E3%2581%25A8Cloud%2520Functons%2520for%2520Firebase%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%258B%25E3%2582%2582%25E3%2581%259D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2MDZjZDhmMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たかもそ</dc:creator></item><item><title><![CDATA[CodeRabbit お試ししたくて面談管理ツールを作ってみる（その19：質問テンプレート画面作成）]]></title><description><![CDATA[
 本日の内容

質問関連テーブル設計
質問関連画面遷移図設計
質問テンプレートテーブル作成
質問テンプレート登録画面作成
ついでにLaravelデフォルト画面削除


 簡単な要約
ついに新機能「質問テンプレート機能」実装ということで、テーブル設計から再始動です。最近覚えたMermaidで意気揚々とER図を作成。
ついでに調子に乗って画面遷移図も設計
これで準備万端作成した質問テンプレート画面がこちら。

 質問テンプレート一覧画面


 質問テンプレート登録編集画面


 プルリク
https://github.com/WdknWdkn/oneonone/pull/19

 Code...]]></description><link>https://zenn.dev/wdknwdkn/articles/1f17fd101afdd5</link><guid isPermaLink="true">https://zenn.dev/wdknwdkn/articles/1f17fd101afdd5</guid><pubDate>Mon, 27 May 2024 17:39:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5FFiRGPd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CodeRabbit%2520%25E3%2581%258A%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%2597%25E3%2581%259F%25E3%2581%258F%25E3%2581%25A6%25E9%259D%25A2%25E8%25AB%2587%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25EF%25BC%2588%25E3%2581%259D%25E3%2581%25AE19%25EF%25BC%259A%25E8%25B3%25AA%25E5%2595%258F%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E7%2594%25BB%25E9%259D%25A2%25E4%25BD%259C%25E6%2588%2590%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2581%25A0%25E3%2581%2591%25E3%2582%2593%25EF%25BC%25A0%25E9%25A7%2586%25E3%2581%2591%25E5%2587%25BA%25E3%2581%2597%25E8%2582%25B2%25E3%2581%25A6%25E3%2582%258BEM%25E5%259F%25B7%25E8%25A1%258C%25E5%25BD%25B9%25E5%2593%25A1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JISkF3QXNGeGxMY29sdEpjUHRpN0IwRWpTdlZ0MzFkWnluQ2tmUGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わだけん＠駆け出し育てるEM執行役員</dc:creator></item><item><title><![CDATA[【cluster】クラフトアイテムでワープ・移動速度等変更]]></title><description><![CDATA[これまで「ベータ機能」だったプレイヤーのワープや移動速度変更などがどこでも使えるようになりました。
・「ベータワールド」にしたくない
・イベントで使いたい
という人には魅力的なアップデートだと思います。
使用感とかはこちらのワールドをどうぞ。

https://cluster.mu/w/57fbb6fb-8026-4cb6-a9b8-c9da07aac9a3

 コード
$.onInteract((player) =&gt; {
  player.setJumpSpeedRate(2)
  player.setMoveSpeedRate(4)
  player.setGravity(-3...]]></description><link>https://zenn.dev/vins/articles/e93b992d1d824c</link><guid isPermaLink="true">https://zenn.dev/vins/articles/e93b992d1d824c</guid><pubDate>Mon, 27 May 2024 12:35:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JiV9fAIx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590cluster%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2595%25E3%2583%2588%25E3%2582%25A2%25E3%2582%25A4%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25A7%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25BB%25E7%25A7%25BB%25E5%258B%2595%25E9%2580%259F%25E5%25BA%25A6%25E7%25AD%2589%25E5%25A4%2589%25E6%259B%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:vins%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c0ZERlaWVTamtQcDFmTDYwS1FhTlpYMkpMeTJOOGtfeWRha1F6PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>vins</dc:creator></item><item><title><![CDATA[TypeScript再入門メモ]]></title><description><![CDATA[
 はじめに
これまで実務でTypeScript（以下TS）を使用してきましたが、基礎知識が不十分だと感じることが多々ありました。
そこで、TSとJavaScriptの再入門のため、『プロを目指す人のためのTypeScript入門』（通称ブルーベリー本）で一通り学び直しました。
せっかく得た知識を定着させるために、個人的に重要だと感じたポイントを備忘録としてまとめてみたいと思います。

 1. 基礎編

 1.1 TSの利点・静的型付けによるメリット

 型安全性
TSのような静的型付け言語では、コンパイラが行う型チェック（後述）により、コードを書いている段階で型のミスを検出できる。これ...]]></description><link>https://zenn.dev/makoto1995/articles/fe04ac81221514</link><guid isPermaLink="true">https://zenn.dev/makoto1995/articles/fe04ac81221514</guid><pubDate>Mon, 27 May 2024 10:58:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XsyJh6UH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E5%2586%258D%25E5%2585%25A5%25E9%2596%2580%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Makoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1M3RXM1huOHFZNnp1dERtQ3pYWlNjUzBUMGdMOU94RHdJV3ZRNW1fdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Makoto</dc:creator></item><item><title><![CDATA[React 19以下でもReact Compilerを有効化する]]></title><description><![CDATA[
 はじめに
一応React Compilerは、React 19を必須としていますが、なくても動きます
https://x.com/potetotes/status/1793248011239170156
Reactチームの方によりますと、React 19のキャッシュ機構が過去のバージョンより効率が良いとされていますね。
しかしReactチームは、React 19じゃないプロジェクトでもReact Compilerが動くようにpolyfillを用意してくれてます。

the gist isn’t unsafe, it’s not efficient and not maintained...]]></description><link>https://zenn.dev/mylifeasjosh/articles/380f27af37733c</link><guid isPermaLink="true">https://zenn.dev/mylifeasjosh/articles/380f27af37733c</guid><pubDate>Mon, 27 May 2024 00:54:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---4amAYDz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%252019%25E4%25BB%25A5%25E4%25B8%258B%25E3%2581%25A7%25E3%2582%2582React%2520Compiler%25E3%2582%2592%25E6%259C%2589%25E5%258A%25B9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:josh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMzMyZjFhMDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>josh</dc:creator></item><item><title><![CDATA[jQueryの基本的な実装方法]]></title><description><![CDATA[①実装したい部分を部分テンプレート化します。
②、部分テンプレートを挟むように囲い、htmlのコードにidを付与してあげます。
divでなくとも、idを付与してあげることには変わりありません。
例は以下の通りです
例１
&lt;div id = "chaterror"&gt;
    &lt;%= render "layouts/error_messages", model: @chat %&gt;
&lt;/div&gt;
例2
 &lt;tbody id="messages"&gt;
　　 &lt;% @chats.each do |chat| %&gt;
     &lt;%= r...]]></description><link>https://zenn.dev/makoto_niko/articles/bc507dc67f83b6</link><guid isPermaLink="true">https://zenn.dev/makoto_niko/articles/bc507dc67f83b6</guid><pubDate>Mon, 27 May 2024 00:50:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_OhoGDO0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jQuery%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:niko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUzY2Q4NTU1N2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>niko</dc:creator></item><item><title><![CDATA[LangChain で構造化データを取得する方法]]></title><description><![CDATA[
 はじめに
LLM では、モデルから構造化データを取得できます。この記事では、LangChain でモデルから構造化データを返す方法について説明します。

 LangChain でモデルから構造化データを返す方法
以下のように Zod を使って構造化データを取得できます。
import { ChatOpenAI } from "@langchain/openai";
import { z } from "zod";
import 'dotenv/config'

// model
const model = new ChatOpenAI({
  model: "gpt-3.5-turb...]]></description><link>https://zenn.dev/hayato94087/articles/226875c041c7fd</link><guid isPermaLink="true">https://zenn.dev/hayato94087/articles/226875c041c7fd</guid><pubDate>Sun, 26 May 2024 12:58:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qvMfOdoT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangChain%2520%25E3%2581%25A7%25E6%25A7%258B%25E9%2580%25A0%25E5%258C%2596%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hayato94087%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5ZTEyZGJjZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hayato94087</dc:creator></item><item><title><![CDATA[Node.jsのモジュールタイプごとの読み込み方法]]></title><description><![CDATA[
 はじめに
CJSやESMといったモジュールタイプ、先人たちの記事を読み理解したつもりになるが、時間が経つと完全に忘れるということを繰り返している。package.jsonの最低限の設定と、その読み込み方法を簡易的に記載する。
これは検証で書いたサンプルコード
https://github.com/kkznch/sample-dual-package

 CJSからCJS, ESMを読み込む
パッケージ中の .js は、パッケージのpackage.jsonに記載されている type フィールドが commonjs の場合はCJSとして扱われ、 type フィールドが module の場...]]></description><link>https://zenn.dev/monicle/articles/06362e143950c5</link><guid isPermaLink="true">https://zenn.dev/monicle/articles/06362e143950c5</guid><pubDate>Sun, 26 May 2024 09:54:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ooJu7lE9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2597%25E3%2581%2594%25E3%2581%25A8%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2591%25E3%2581%2591%25E3%2581%259A%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhMWExNjBjOWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25A2%25E3%2583%258B%25E3%2582%25AF%25E3%2583%25AB%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hCOG5jVXVrRUY4SkZPdVRPVy1IdS1VdERUVjhTOEp1dFpaejlGPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>けけずん</dc:creator></item><item><title><![CDATA[using に対応した Symbol を作る]]></title><description><![CDATA[
 Symbol に [Symbol.dispose] プロパティを付与したい
スコープ外を検知してセルフGCするSymbol型、要はスマートポインタもどきをピュアに実装したい
いやいや、Symbol はプリミティブでしょうが…はい

 解: toString() で Symbol を返却するオブジェクトを作る
なんと、({ toString: () =&gt; someSymbol }) と someSymbol はプロパティとして同様の働きをする
const MY_SYMBOL: symbol = Symbol("address");

using GC_SYMBOL: any = ...]]></description><link>https://zenn.dev/ihasq/articles/ee92beccd4e172</link><guid isPermaLink="true">https://zenn.dev/ihasq/articles/ee92beccd4e172</guid><pubDate>Sun, 26 May 2024 04:08:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ArN-muAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:using%2520%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%2520Symbol%2520%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ihasq%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YWEyZmFhZmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ihasq</dc:creator></item><item><title><![CDATA[カスタムフック不要!! Reactとオブジェクト指向で完全state管理]]></title><description><![CDATA[Reactは意外とオブジェクト指向と相性がいいです
状態管理ライブラリが不要になります


不要: Redux、Jotai、Zustand、TanStack Query
カスタムフックも不要になります。


 用語


Model: User、Media、Roomといったエンティティです。

階層型オブジェクト: users[].medias[].comments[] といったチェーンで繋げられるインスタンスのことです。


 実装

Auth.js
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPasswo...]]></description><link>https://zenn.dev/llc_starhacks/articles/955208b2b2daaf</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/955208b2b2daaf</guid><pubDate>Sun, 26 May 2024 02:57:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dzg7CqQk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E4%25B8%258D%25E8%25A6%2581%2521%2521%2520React%25E3%2581%25A8%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%25E3%2581%25A7%25E5%25AE%258C%25E5%2585%25A8state%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[フロントエンド ディレクトリ ベストプラクティス #Firebase]]></title><description><![CDATA[FeDdBp: Front-end Directory-dsign Best-practice
## ディレクトリ構成

src/
  model/
    User.js
    Collection.js // basic
    Following.js
    Media.js
    Tag.js
    List.js
    Room.js
    ChatRoom.js
  service/
    firebase/
      config.js
      fcm.js
      auth.js
      firestore.js
      storage.j...]]></description><link>https://zenn.dev/llc_starhacks/articles/9e6428de958175</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/9e6428de958175</guid><pubDate>Sun, 26 May 2024 02:05:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ylz2x16b--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2520%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%2520%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2520%2523Firebase%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[React.オブジェクト指向: ファイルをアップロードするコード]]></title><description><![CDATA[
 最終形態

page.js
  onClick={async ()=&gt; {
    const file = await new InputFile().get();
    user.thumbnails.push(file);
  }}


Element.Input.js
export class Input {
  constructor(attr) {
    this.El = document.createElement('input');
  }
}

export class InputFile extends Input {
  constructor() ...]]></description><link>https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</guid><pubDate>Sat, 25 May 2024 20:41:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9zdM-vm---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React.%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%253A%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item></channel></rss>