<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 26 Aug 2024 00:59:21 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rails/LaravelエンジニアのためのフルスタックTypeScriptフレームワーク「AdonisJS」]]></title><description><![CDATA[
 はじめに
この記事では、RailsやLaravelに精通したエンジニアに向けて、フルスタックTypeScriptフレームワーク「AdonisJS」を紹介します。
AdonisJSは、これまでRuby on RailsやLaravelでの開発に慣れ親しんだエンジニアにとって、とても親しみやすいフレームワークで、どれほど似ているか比較してみようと思います。

 AdonisJSとは？
AdonisJSとはTypeScriptベースのフルスタックWebフレームワークです。
MVCパターンを採用しており、Ruby on RailsやLaravelのようにルーティング、コントローラ、ORMなど...]]></description><link>https://zenn.dev/fusic/articles/90fe58c4eaa28e</link><guid isPermaLink="true">https://zenn.dev/fusic/articles/90fe58c4eaa28e</guid><pubDate>Sun, 25 Aug 2024 23:30:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zshlMXpu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rails%252FLaravel%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AFTypeScript%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2580%258CAdonisJS%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Daiki%2520Urata%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhNDgxMzQ3YjkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Fusic%2520%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2luUk9ncUNFbm9DQ2NnZ0NVR0k0b1k4R3ByYUVNdE1XRF9qR1plWXc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki Urata</dc:creator></item><item><title><![CDATA[TypeScript のユーティリティ型全部]]></title><description><![CDATA[TypeScript に用意されているユーティリティ型 (Utility Types) の全部について書く。
情報のソースは TypeScript 公式サイトの Utility Types のページを基本に、解説を追加している。
順番は、よく使うであろうものを上に、あまり使わないであろうものを下の方に並べている。

 Pick&lt;Type, Keys&gt;
追加されたバージョン: 2.1
Type から Keys のプロパティの集合を選び出して型を構築する。要するに Type から特定のプロパティだけをピックアップした型を生成できる。
Keys は単なる文字列リテラルか、あるいは文...]]></description><link>https://zenn.dev/tris/articles/ts-utility-types</link><guid isPermaLink="true">https://zenn.dev/tris/articles/ts-utility-types</guid><pubDate>Sun, 25 Aug 2024 23:08:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---zDYH4Hd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25AE%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E5%2585%25A8%25E9%2583%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tris%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlYTJiYjcyMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tris</dc:creator></item><item><title><![CDATA[3分で始めるフルスタックwebアプリ]]></title><description><![CDATA[
 はじめに
こんにちは、葵です！
プログラミングをしていると、「アウトプットとして何かを作りたい！」と感じること、ありますよね。
しかし、その過程で環境構築が難しくて挫折してしまうことも多いのではないでしょうか？
この記事では、Django REST framework + Next.js + Dockerでフルスタックアプリの環境構築方法を紹介しようと思います☺️

 本当に3分で終わります🍳

 1. テンプレートからリポジトリ作成
https://github.com/s1f10210273/fullstackapp

 2. Dockerのインストール
下のリンクからDocke...]]></description><link>https://zenn.dev/shuei/articles/3f2ca4f426f0bd</link><guid isPermaLink="true">https://zenn.dev/shuei/articles/3f2ca4f426f0bd</guid><pubDate>Sun, 25 Aug 2024 17:43:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sENCIboc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:3%25E5%2588%2586%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AFweb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2591%25B5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0ODI3MzlkZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>葵</dc:creator></item><item><title><![CDATA[【App Router】 LayoutsとTemplates]]></title><description><![CDATA[
 はじめに
こんにちは！
株式会社BLUEISH エンジニアの佐々木（@osasasasa22）です。
普段はNext.jsを用いたフロントエンド開発に携わっています。
今回は、App Routerの機能であるApp RouterのLayoutsとTemplatesについてご紹介します。
これらの機能は、ページや共有レイアウト、テンプレートを簡単に作成できる新しいファイル規約を導入しており、モジュール化されたUIの作成や状態管理を直感的に行うことができます。
それでは、詳しく見ていきましょう！

 Layouts
https://nextjs.org/docs/app/building...]]></description><link>https://zenn.dev/osasasasa/articles/20b67f4481107c</link><guid isPermaLink="true">https://zenn.dev/osasasasa/articles/20b67f4481107c</guid><pubDate>Sun, 25 Aug 2024 14:27:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TqdxiA3g--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590App%2520Router%25E3%2580%2591%2520Layouts%25E3%2581%25A8Templates%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BD%2590%25E3%2580%2585%25E6%259C%25A8%2520%25E7%25BE%258E%25E9%2581%25A5%2520%257C%2520BLUEISH%2520E...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3MDYwNjU5YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>佐々木 美遥 | BLUEISH Engineer</dc:creator></item><item><title><![CDATA[【Next.js】で1ペラサイトを作ってみた]]></title><description><![CDATA[Next.js, React(+その界隈の技術)をキャッチアップしたいと思い、
アウトプットとしてwebサイト( https://yota-suzuki.jp )を作成しました！
本記事はその振り返りです。

 概要
概要としては下記の画像に掲載の通りです。


 詳細
PG, FW（作成時点）

Next.js @ 14.2.4（App Router）
React @ 18.3.1
TypeScript @ 5.4.5
tailwindcss @ 3.4.4

ソースコード管理

GitHub

CI/CD、ホスティングサービス

Vercel

デザインツール

Figma

参考に...]]></description><link>https://zenn.dev/blc/articles/68b589b7de8cd1</link><guid isPermaLink="true">https://zenn.dev/blc/articles/68b589b7de8cd1</guid><pubDate>Sun, 25 Aug 2024 13:06:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Hr_L24kp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2581%25A71%25E3%2583%259A%25E3%2583%25A9%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yota%2520Suzuki%2520%252F%2520BLC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3JJQkRZakpBMlJsc2JzUWtCRDhXak9zOGc1cnpoUk5hSXlMcDJpMTkzTk5NamZjaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yota Suzuki / BLC</dc:creator></item><item><title><![CDATA[テキストエリア要素の高さ（height）を入力値に応じて動的に変更したい]]></title><description><![CDATA[
 概要
テキストエリア要素の height をさっと動的に変更したい。

 方法
以下の hook を作成し、使用します。
hook の内容と使い方は後述のとおりです。
import { useCallback, useRef } from 'react';

type UseAutoResizeTextareaProps = { defaultHeight: number; maxHeight: number };
export const useAutoResizeTextarea = ({ defaultHeight, maxHeight }: UseAutoResizeText...]]></description><link>https://zenn.dev/masani/articles/4fab184faa64ae</link><guid isPermaLink="true">https://zenn.dev/masani/articles/4fab184faa64ae</guid><pubDate>Sun, 25 Aug 2024 11:57:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E-MMlbKd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%25A2%25E8%25A6%2581%25E7%25B4%25A0%25E3%2581%25AE%25E9%25AB%2598%25E3%2581%2595%25EF%25BC%2588height%25EF%25BC%2589%25E3%2582%2592%25E5%2585%25A5%25E5%258A%259B%25E5%2580%25A4%25E3%2581%25AB%25E5%25BF%259C%25E3%2581%2598%25E3%2581%25A6%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:masani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkIzN29iSFVFazgteDh1eEJVTG1JWmtCOHItb3htWGY0ZkNtaUJVcXRTPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>masani</dc:creator></item><item><title><![CDATA[技術選定の失敗 2年間を振り返る TypeScript,Hono,Nest.js,React,GraphQL]]></title><description><![CDATA[
 はじめに
久々に記事を書いたのでどうぞお手柔らかに...
私が過去2年間で行った技術選定の成功と失敗を振り返り、その学びを共有したいと思います。
文才無いので淡々と箇条書きでいきます

 注意

意見を押し付けるものではありません。ただ建設的な議論は大事だと思う。
自分の意見は明確に、歯切れのよい表現を意識している。人それぞれだよねみたいな感じに逃げたくない。技術選定に結論はある（過激）。
ただし技術選定にはコンテキストがあり、例えばプロダクトのフェーズや組織の事情によって当然結論は変わる可能性がある。
OSSの開発者さん達は偉大ですごい。ありがたく使わせてもらってます。開発者を攻撃...]]></description><link>https://zenn.dev/nem/articles/ade7b83cae2fa5</link><guid isPermaLink="true">https://zenn.dev/nem/articles/ade7b83cae2fa5</guid><pubDate>Sun, 25 Aug 2024 11:51:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U-9bDSeH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%258A%2580%25E8%25A1%2593%25E9%2581%25B8%25E5%25AE%259A%25E3%2581%25AE%25E5%25A4%25B1%25E6%2595%2597%25202%25E5%25B9%25B4%25E9%2596%2593%25E3%2582%2592%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258B%2520TypeScript%252CHono%252CNest.js%252CReact%252CGraphQL%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:MuliMuliSonnanMuli%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeVQ5c0V2TUlZRnFEUWRhOVJpTzBaTjBNRXNQbGt1VmxtdXJmaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>MuliMuliSonnanMuli</dc:creator></item><item><title><![CDATA[neverthrowを学ぶ]]></title><description><![CDATA[
 前提
今回はChatGPTによる解説を入れながら個人的な感想を入れた記事になります。
対象としてはneverthrowってなんだ？となったタイミングで読んでいただけますと幸いです。
僕もneverthrowってなんだ？という状況から学習していますので、一緒に読み進めていって学習していただけますと幸いです。
ちなみにちょっとRustにはまっていたこともありResultについてのキャッチアップは早かったです。
The Rust Programming Language 日本語版
公式のgithubはこちらneverthrow

 1. まずは説明をよみます
説明
プログラムにエラー処理を...]]></description><link>https://zenn.dev/kazumasa/articles/82b8373a2bb621</link><guid isPermaLink="true">https://zenn.dev/kazumasa/articles/82b8373a2bb621</guid><pubDate>Sun, 25 Aug 2024 10:00:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EXKWIXZI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:neverthrow%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazumasa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d2MFpjUUctQVdIZTU5MmJTbGVxc3FCZnlYUDJOOEtKbmVTMEFDPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazumasa</dc:creator></item><item><title><![CDATA[TypeScriptで実現する条件付きデータ操作: 日向坂46の未知なるユニットを作る]]></title><description><![CDATA[
 はじめに
この記事ではTypeScriptを使ってデータ操作や条件付けを行う方法について書きます。
具体例として、日向坂46のメンバーから特定の条件を満たすユニットを作成するプログラムを用います。

 プログラムの概要
日向坂46のメンバーから4人を選抜してユニットを作るプログラムです。
ただランダムに選抜しても面白みに欠けるので、
プログラムを書いた時点では存在しないユニットを作るようにします。
設定する条件としては、まず、加入時期が異なるようにします。
※この時点で1期生・2期生・3期生・4期生が1人ずつ必ず含まれることになり、
この記事の執筆時点では存在しないユニットであること...]]></description><link>https://zenn.dev/ohimusdev46301/articles/9876041402aff9</link><guid isPermaLink="true">https://zenn.dev/ohimusdev46301/articles/9876041402aff9</guid><pubDate>Sun, 25 Aug 2024 07:20:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2M9EYEyZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E6%259D%25A1%25E4%25BB%25B6%25E4%25BB%2598%25E3%2581%258D%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E6%2593%258D%25E4%25BD%259C%253A%2520%25E6%2597%25A5%25E5%2590%2591%25E5%259D%258246%25E3%2581%25AE%25E6%259C%25AA%25E7%259F%25A5%25E3%2581%25AA%25E3%2582%258B%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Wataru%2520Takiguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkOTBhM2EyYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Wataru Takiguchi</dc:creator></item><item><title><![CDATA[最強のクエリビルダ「kysely」の紹介 ~薄いORMを探して~]]></title><description><![CDATA[
 はじめに
こんにちは、畑田です。
最近、RDBを使用しているプロダクトをリプレイスする機会がありました。
このプロジェクトの目標は今現在の使用や実装方針をできるだけそのままに、インフラと技術だけをリプレイスするというものでした。
もちろん、インフラや技術を刷新するということはその上に乗るアプリケーションの実装にも必ず影響を及ぼします。その中で出来るだけ現状の仕様に寄せる試みを行いました。
元のプロジェクトはPHPで書かれており、DBのへの通信においても、文字列とsprintfなどを使用し、生のSQLを書いてpg_queryで実行していました。
私はこれを再現する最も安全な方法を探しま...]]></description><link>https://zenn.dev/randd_inc/articles/b8e009b74863ab</link><guid isPermaLink="true">https://zenn.dev/randd_inc/articles/b8e009b74863ab</guid><pubDate>Sun, 25 Aug 2024 04:44:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ICZl384k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%2580%25E5%25BC%25B7%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2580%25E3%2580%258Ckysely%25E3%2580%258D%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2520%7E%25E8%2596%2584%25E3%2581%2584ORM%25E3%2582%2592%25E6%258E%25A2%25E3%2581%2597%25E3%2581%25A6%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Daiki-Hatada%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxZTNhMjllZmMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:R%2526D%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lKYURnclJlemVSd3hTZmNsOUlSMFBaZFpYSlVIRlhyNUhjT1FpNFE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki-Hatada</dc:creator></item><item><title><![CDATA[Reactで作るふわっと上がるアニメーション]]></title><description><![CDATA[
 概要
今回は、IntersectionObserverを使って、ふわっと浮き上がるアニメーションです。
IntersectionObserverは、ある要素が別の要素と交差したかどうかを監視することができます。
これを用いることでスクロールを検知し、画面内に入った場合にアニメーションをすることができます。

 実装
useDadeIn.tsx
import React, { useRef, useEffect } from 'react'

const ScrollComponent = ({ children }) =&gt; {
  const ref = useRef(null...]]></description><link>https://zenn.dev/643866/articles/c6d1d81d05a47b</link><guid isPermaLink="true">https://zenn.dev/643866/articles/c6d1d81d05a47b</guid><pubDate>Sun, 25 Aug 2024 02:39:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AD9Ls9KI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2581%25B5%25E3%2582%258F%25E3%2581%25A3%25E3%2581%25A8%25E4%25B8%258A%25E3%2581%258C%25E3%2582%258B%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2593%25E7%2584%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxZWY2MWJmNmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たこ焼き</dc:creator></item><item><title><![CDATA[TypeScriptで、オブジェクトから値を取り出す]]></title><description><![CDATA[
 🔅Tips
データ型をつけたオブジェクトから、値を抽出する方法がまだまだよくわかっていないので、試してみた。
やってることはこのDartの記事と同じです。

 Objectの中にcountryというkeyがあるかどうかを確認

type Memberを定義
hasOwnPropertyでオブジェクトが存在するか確認

function main() {
  const members = [
    { name: "Roko", age: 26, height: 170.0, weight: 50.0 },
    { name: "Mako", age: 24, height: ...]]></description><link>https://zenn.dev/joo_hashi/articles/9b238705df7dee</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/articles/9b238705df7dee</guid><pubDate>Sun, 25 Aug 2024 00:50:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yzJdo6bU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2580%2581%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%258B%25E3%2582%2589%25E5%2580%25A4%25E3%2582%2592%25E5%258F%2596%25E3%2582%258A%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JboyHashimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjOTBiY2M0M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[Hono + Microsoft Azure FunctionsでContextのLogを出力してみたメモ]]></title><description><![CDATA[
 概要
前回にAzure FunctionsでHonoを動かした。
今回はログを開始時と終了時に出そうと考えている。
Hono Azure Functionsで紹介されている方法だとcontext.logが使えないので対応を考えた。
ソースコード

 context.logを何故使いたいのか
ログを出すだけなら、console.logでも可能。
MSのドキュメントではcontext.logが推奨されている。
そこで、ログの出力にどんな差がでるのか試してみる。
applications.insightsのtraceログで出力される項目を確認対象とした。
結果、context.logのほう...]]></description><link>https://zenn.dev/hibo/articles/a9ebd3d6caad12</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/a9ebd3d6caad12</guid><pubDate>Sun, 25 Aug 2024 00:40:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UNJNQIcy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%2520%252B%2520Microsoft%2520Azure%2520Functions%25E3%2581%25A7Context%25E3%2581%25AELog%25E3%2582%2592%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[Next14 + Typescript でマークダウンコンポーネントを作る @ts-stack/markdown]]></title><description><![CDATA[
 概要
@next/mdxだとテーブルが描画できなかったりエラーでうまくいかなかった + mdxは使わないので
@ts-stack/markdownを使いました

 コード
npm install @ts-stack/markdown
import { Marked, Renderer } from '@ts-stack/markdown';

Marked.setOptions ({
    renderer: new Renderer,
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
...]]></description><link>https://zenn.dev/szgk/articles/f9f95db0596bbd</link><guid isPermaLink="true">https://zenn.dev/szgk/articles/f9f95db0596bbd</guid><pubDate>Sat, 24 Aug 2024 14:04:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--klaR3PJY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next14%2520%252B%2520Typescript%2520%25E3%2581%25A7%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2520%2540ts-stack%252Fmarkdown%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shibe%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBjYTYxMTYxYzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shibe</dc:creator></item><item><title><![CDATA[typescriptで新しくパッケージをテストしたいときのdocker環境構築]]></title><description><![CDATA[本記事ではChatGPTを使用して作成しています。一応手順の確認をしましたが、typescriptで新しくパッケージを勉強するときにコンテナで構築して動作を確認したかったのでつくりました。
参考になれば幸いです。

 1. プロジェクトの初期設定

 プロジェクトディレクトリを作成し、package.json を初期化
mkdir my-typescript-app
cd my-typescript-app
npm init -y

 必要なパッケージをインストール
npm install --save express nodemon neverthrow
npm install --s...]]></description><link>https://zenn.dev/kazumasa/articles/90b8ed1585f60a</link><guid isPermaLink="true">https://zenn.dev/kazumasa/articles/90b8ed1585f60a</guid><pubDate>Sat, 24 Aug 2024 04:35:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K0k1mj4S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:typescript%25E3%2581%25A7%25E6%2596%25B0%25E3%2581%2597%25E3%2581%258F%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AEdocker%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazumasa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d2MFpjUUctQVdIZTU5MmJTbGVxc3FCZnlYUDJOOEtKbmVTMEFDPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazumasa</dc:creator></item><item><title><![CDATA[フロントエンドエンジニアのためのGo入門：変数と関数をサクッと理解しよう！]]></title><description><![CDATA[
 はじめに
Goはシンプルで効率的な言語ですが、TypeScript(Javascript)の経験のあるフロントエンドエンジニアが初めて学ぶ際には、いくつかの独特なポイントで戸惑ったので記事にしました。
フロントエンドエンジニアがGoを学ぶ際につまづきやすい点をわかりやすく解説し、それぞれの言語の比較コードを示します。
この記事はA Tour of GoのBasicsの一部をピックアップしました。
https://go-tour-jp.appspot.com/list

 エクスポートされた名前
Goでは、名前が大文字で始まる場合、その名前はパッケージ外から参照できる「エクスポートされ...]]></description><link>https://zenn.dev/miumi/articles/fcc720adb49093</link><guid isPermaLink="true">https://zenn.dev/miumi/articles/fcc720adb49093</guid><pubDate>Fri, 23 Aug 2024 22:56:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vXpXh-ja--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEGo%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25A8%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E3%2582%25B5%25E3%2582%25AF%25E3%2583%2583%25E3%2581%25A8%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259F%25E3%2582%25AB%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4YjgwZTkyZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ミカイ</dc:creator></item><item><title><![CDATA[TypeScriptで始めるデザインパターン入門]]></title><description><![CDATA[
 TypeScriptで始めるデザインパターン入門

 はじめに
デザインパターンは、ソフトウェア開発における一般的な問題に対する再利用可能な解決策を提供します。これらのパターンは、特定の状況でのベストプラクティスを示し、コードの可読性や保守性を向上させるために役立ちます。TypeScriptは、JavaScriptのスーパーセットであり、型安全性を提供することで、デザインパターンの実装をより明確にし、エラーを減少させることができます。本記事では、TypeScriptを使用してデザインパターンを実装する方法を紹介し、具体的な例を通じて理解を深めていきます。

 デザインパターンの基本
...]]></description><link>https://zenn.dev/llm_robot/articles/20240824-typescript-designpatterns-sql</link><guid isPermaLink="true">https://zenn.dev/llm_robot/articles/20240824-typescript-designpatterns-sql</guid><pubDate>Fri, 23 Aug 2024 22:08:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rj59J3ly--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AIZAWA%2520version%253A0.0.2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMTE3MGM1NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AIZAWA version:0.0.2</dc:creator></item><item><title><![CDATA[Cloudflare Workers 入門【はじめからそうやって教えてくれればいいのに！】]]></title><description><![CDATA[
 はじめに
この記事の内容は、以下の動画でも解説しています。アニメーションでわかりやすくなっているので、ぜひ見てみてください。他にも Web に関する解説動画を投稿しているので、気になる人はチャンネル登録よろしくお願いします！
https://www.youtube.com/watch?v=ijjNvTKl5eg

 Cloudflare Workers とは？
Cloudflare Workers とは、一言で言うと、Cloudflare のエッジで動くサーバーレスの JavaScript 実行環境のことです。
...と言っても、これだけだとよくわからないですよね。だから、今回は初め...]]></description><link>https://zenn.dev/ak/articles/a2bd28a258b615</link><guid isPermaLink="true">https://zenn.dev/ak/articles/a2bd28a258b615</guid><pubDate>Fri, 23 Aug 2024 11:35:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mCHl5Nb---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Workers%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2590%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%258B%25E3%2582%2589%25E3%2581%259D%25E3%2581%2586%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E6%2595%2599%25E3%2581%2588%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258C%25E3%2581%25B0%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25AB%25EF%25BC%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3YTNhNmZhNjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aki</dc:creator></item><item><title><![CDATA[App Router の Route Handlers をうまくプロダクトに組み込む]]></title><description><![CDATA[
 この記事でやること

Next.js の App Router の基本的な学習
Route Handlers の基本的な学習


 この記事でやらないこと

外部との連携


 モチベーション
せっかく Route Handlers という便利そうな機能が存在するのに、その機能についての知見が足りていないと感じたので、この機会に少し学習しておこうと考えました。

 いざ実践

 今回実現すること

Route Handlers 経由でデータを取得する
Server Actions を使って Route Handlers に対して POST リクエストを送信する


 データを取得する...]]></description><link>https://zenn.dev/tbaba/articles/07fd1fac0d82ba</link><guid isPermaLink="true">https://zenn.dev/tbaba/articles/07fd1fac0d82ba</guid><pubDate>Fri, 23 Aug 2024 06:42:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o_0JW9hl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:App%2520Router%2520%25E3%2581%25AE%2520Route%2520Handlers%2520%25E3%2582%2592%25E3%2581%2586%25E3%2581%25BE%25E3%2581%258F%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2580%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AB%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tbaba%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tbaba</dc:creator></item><item><title><![CDATA[Waku v0.21リリース反響まとめ]]></title><description><![CDATA[https://x.com/dai_shi/status/1825907642654666973
から、いくつかのサイトで取り上げられましたのでまとめておきます。

 This Week In React
https://thisweekinreact.com/newsletter/197

 React Status
https://react.statuscode.com/issues/396

 Bytes
https://bytes.dev/archives/316

 The New Stack
https://thenewstack.io/ai-dev-tools-ranke...]]></description><link>https://zenn.dev/dai_shi/articles/10c5821b22b72a</link><guid isPermaLink="true">https://zenn.dev/dai_shi/articles/10c5821b22b72a</guid><pubDate>Fri, 23 Aug 2024 03:17:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TCozokHa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Waku%2520v0.21%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E5%258F%258D%25E9%259F%25BF%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGNhM2E2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daishi</dc:creator></item></channel></rss>