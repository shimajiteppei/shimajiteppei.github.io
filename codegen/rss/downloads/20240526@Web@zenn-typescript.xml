<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 26 May 2024 01:38:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[React.オブジェクト指向: ファイルをアップロードするコード]]></title><description><![CDATA[
 最終形態

page.js
  onClick={async ()=&gt; {
    const file = await new InputFile().get();
    user.thumbnails.push(file);
  }}


Element.Input.js
export class Input {
  constructor(attr) {
    this.El = document.createElement('input');
  }
}

export class InputFile extends Input {
  constructor() ...]]></description><link>https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</guid><pubDate>Sat, 25 May 2024 20:41:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9zdM-vm---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React.%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%253A%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[Vue3 + TypeScript + Prettier に対応した ESLint Flat Config の最小構成]]></title><description><![CDATA[
 TL; DR

eslint.config.js
import globals from "globals";
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";
import pluginVue from "eslint-plugin-vue";
import vueParser from "vue-eslint-parser";
import eslintConfigPrettier from "eslint-config-prettier";

export default [...]]></description><link>https://zenn.dev/shun91/articles/min-eslint-flat-config-for-vue3-ts-prettier</link><guid isPermaLink="true">https://zenn.dev/shun91/articles/min-eslint-flat-config-for-vue3-ts-prettier</guid><pubDate>Sat, 25 May 2024 12:43:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sb5ixUgC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue3%2520%252B%2520TypeScript%2520%252B%2520Prettier%2520%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%2520ESLint%2520Flat%2520Config%2520%25E3%2581%25AE%25E6%259C%2580%25E5%25B0%258F%25E6%25A7%258B%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shun91%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqLWFka3hrSi1rTUFYQ3JNX0QybHpFOTEyVzhWbVRwS3VHQ2ZEVW9rPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shun91</dc:creator></item><item><title><![CDATA[RaycastでExtensionを作る上でのTips]]></title><description><![CDATA[レビュー時によく指摘されがちなものをまとめておく。目指せ１発Merge！

 時間のかかる非同期通信はisLoadingを使おう
APIリクエストの結果などをListビューなどで表示させる場合、待機中は空の配列 or undefinedなstateになる。
Raycast的にはその場合は　No Resultが表示されてしまう。が、適切でないのでisLoadingを使って適切な表示に切り替えよう。

https://developers.raycast.com/information/best-practices#show-loading-indicator

 便利なReactHooks...]]></description><link>https://zenn.dev/nakamuloud/articles/5def1e11c5efd6</link><guid isPermaLink="true">https://zenn.dev/nakamuloud/articles/5def1e11c5efd6</guid><pubDate>Sat, 25 May 2024 10:23:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SupNHUH5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Raycast%25E3%2581%25A7Extension%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E4%25B8%258A%25E3%2581%25A7%25E3%2581%25AETips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%2584%25E3%2582%2582%25E3%2581%25AE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlYmY3YjczYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かいもの</dc:creator></item><item><title><![CDATA[Next.jsで、たった3行で型安全なルーティングを行う]]></title><description><![CDATA[
 はじめに
主に、routerやLinkコンポーネントなどでパスを指定するとき、以下のような問題に悩まされていませんか？

パス指定を手動で書くのがめんどくさい
パス指定をするとき、タイピングミスで間違ったパスを指定してしまった
開発途中でページのパス変更が必要になったが、パスの変更漏れが起きてしまった

こんな問題が、たった3行の記述で解決されます。
※app routerのみで使える機能です。

 どんな機能？

 パスに型補完が効く
こんな感じでパスに補完が効くので、めちゃ楽にパスの指定ができます。


 型エラーで怒られる
存在しないパスを設定すると、型エラーで怒ってくれます。...]]></description><link>https://zenn.dev/yarai/articles/e2476c2b39b0d5</link><guid isPermaLink="true">https://zenn.dev/yarai/articles/e2476c2b39b0d5</guid><pubDate>Sat, 25 May 2024 09:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ejq41_yC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E3%2580%2581%25E3%2581%259F%25E3%2581%25A3%25E3%2581%259F3%25E8%25A1%258C%25E3%2581%25A7%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu_aoringo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MWQzYjIxZDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu_aoringo</dc:creator></item><item><title><![CDATA[JS: 使えそうなビルドイン演算子]]></title><description><![CDATA[
 1
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment


 2
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment


 3
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coal...]]></description><link>https://zenn.dev/llc_starhacks/articles/c9cd2bc329729a</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/c9cd2bc329729a</guid><pubDate>Sat, 25 May 2024 06:11:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1_-zBZOs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%253A%2520%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AA%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25A4%25E3%2583%25B3%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[TypeScriptの基本的な型と機能]]></title><description><![CDATA[
 プリミティブ型
TypeScriptにはいくつかの基本的なデータ型があります。


String: 文字列を表します。

Number: 数値を表します。

Boolean: 真偽値を表します。

let name: string = "John";
let age: number = 25;
let isStudent: boolean = true;


 型シグネチャ
型シグネチャは、関数がどのような型の引数を受け取り、どのような型の値を返すかを定義します。
function greet(name: string): string {
    return `Hello, ${...]]></description><link>https://zenn.dev/machiaka/articles/88e8c99c4bd56f</link><guid isPermaLink="true">https://zenn.dev/machiaka/articles/88e8c99c4bd56f</guid><pubDate>Sat, 25 May 2024 04:02:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RtyUlVRk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E5%259E%258B%25E3%2581%25A8%25E6%25A9%259F%25E8%2583%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%25A1%25E3%2581%25AE%25E3%2581%2582%25E3%2581%258B%25E3%2582%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1M2JjM2JkMTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まちのあかり</dc:creator></item><item><title><![CDATA[Async ComponentはRSCだけのものじゃない、サーバだけじゃなくてクライアントでも動くんです！（でも、ダメだそうです）]]></title><description><![CDATA[RSC (React Server Component)の特徴の一つにAsync Componentが使えるというのがあるのですが、Async Component自体はRSCでなくても動いちゃいます。そう、React 19ならね。
https://x.com/dai_shi/status/1794184060501479903


追記
無限ループになることがあるからダメだそうです。
https://x.com/rickhanlonii/status/1794339764768002216
]]></description><link>https://zenn.dev/dai_shi/articles/edafb42997c98e</link><guid isPermaLink="true">https://zenn.dev/dai_shi/articles/edafb42997c98e</guid><pubDate>Sat, 25 May 2024 02:11:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c5k3_Sez--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Async%2520Component%25E3%2581%25AFRSC%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25AE%25E3%2582%2582%25E3%2581%25AE%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2581%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%25A0%25E3%2581%2591%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E3%2582%2582%25E5%258B%2595%25E3%2581%258F%25E3%2582%2593%25E3%2581%25A7%25E3%2581%2599%25EF%25BC%2581%25EF%25BC%2588%25E3%2581%25A7%25E3%2582%2582%25E3%2580%2581...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGNhM2E2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daishi</dc:creator></item><item><title><![CDATA[React-Router v6 でのルーティングが本番環境で機能しない【403エラー】]]></title><description><![CDATA[
 はじめに
原因はとても恥ずかしながら筆者のファイル構成のせいでした。かなり少ないケースだと思いますが自戒と備忘録を兼ねて記事にしていきます。
ちなみに技術に関しては、React,TypeScript,Viteで国内ホスティング会社へのセルフホストという内容です。

 原因
画像など素材管理用フォルダ（ディレクトリ）名とリンク（ルーティング）先の文字列（gallery）を同じにしていたため。
画像など各種素材は静的アセットとしてpublicディレクトリ内にgalleryディレクトリを作ってその中に入れていました。
public
|-gallery
開発環境ではpublicからのファイル...]]></description><link>https://zenn.dev/benjuwan/articles/030cd7860460b0</link><guid isPermaLink="true">https://zenn.dev/benjuwan/articles/030cd7860460b0</guid><pubDate>Sat, 25 May 2024 01:52:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k7SlYuZu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React-Router%2520v6%2520%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%258C%25E6%259C%25AC%25E7%2595%25AA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2590403%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:benjuwan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnd2XzJhLTN4SnJmSkN0Ql9wMkkwWUlVaVlTY1ozLTFQZFZoNkxsaUIyRmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>benjuwan</dc:creator></item><item><title><![CDATA[Node.jsでCLIツールを作ろう！〜Commanderを使ったコマンド実装パターン〜]]></title><description><![CDATA[
 はじめに
Node.jsを使ってCLIツールを開発する際に便利なのが、Commanderライブラリです。Commanderを使うと、コマンドラインからの入力を簡単に解析し、適切なアクションを実行することができます。
今回は、Commanderを使ったコマンド実装のパターンを紹介します。このパターンに従うことで、CLIツールに新しいコマンドを追加するのが容易になります。

 プロジェクトの構成
プロジェクトのディレクトリ構成は以下のようになります。
src/
  ├── commands/
  │   ├── server.ts
  │   └── ・・・
  └── index.ts...]]></description><link>https://zenn.dev/takuh/articles/20661cfd3cd337</link><guid isPermaLink="true">https://zenn.dev/takuh/articles/20661cfd3cd337</guid><pubDate>Sat, 25 May 2024 01:15:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--APgu8aZ7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25A7CLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%25E3%2580%259CCommander%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259F%25E8%25A3%2585%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takuh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MFZDMlpZSlp1TVJEQ1AtYkxabmNzRnlkU3RZQ2FGNU4wUTNwVWhGUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takuh</dc:creator></item><item><title><![CDATA[MediaPipeの検出結果をもとに、P5で描画する。]]></title><description><![CDATA[
 デモ

 実装
🌾捕捉事項

過去の記事ではMediaPipe Handsが用いられており、npmパッケージも@mediapipe/handsなどを使い実装されているものが多かった。
2024.05現在MediaPipeのうち視覚情報を扱うものがMediaPipe Vision tasksとしてまとめ提供されているようなのでこの記事では後者で実装を行なっている。


 環境構築
この記事では開発にViteを用いています。
npm create vite@latest
npm i @mediapipe/tasks-vision
npm i p5 @types/p5

 手(HandLa...]]></description><link>https://zenn.dev/makimura3329/articles/mediapipe-hand-p5-20240524</link><guid isPermaLink="true">https://zenn.dev/makimura3329/articles/mediapipe-hand-p5-20240524</guid><pubDate>Fri, 24 May 2024 23:37:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ti93cPbP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MediaPipe%25E3%2581%25AE%25E6%25A4%259C%25E5%2587%25BA%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A8%25E3%2581%25AB%25E3%2580%2581P5%25E3%2581%25A7%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2520Makimura%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3ZTE1MjMxZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>🧟Makimura🧟</dc:creator></item><item><title><![CDATA[type-fest で便利なユーティリティ型を使う]]></title><description><![CDATA[
 type-fest とは
TypeScript の便利なユーティリティ型を集めたライブラリです。
https://github.com/sindresorhus/type-fest

 ユーティリティ型とは
既存の型を変形して新しい型を作成するためのTypeScriptの機能です。
TypeScript にもデフォルトで  Partial, Required, Readonly などいくつかのユーティリティ型が用意されています。
https://www.typescriptlang.org/docs/handbook/utility-types.html

 なぜ type-fest...]]></description><link>https://zenn.dev/t0daaay/articles/1f531bd9f352bc</link><guid isPermaLink="true">https://zenn.dev/t0daaay/articles/1f531bd9f352bc</guid><pubDate>Fri, 24 May 2024 15:45:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--24yZpiTE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:type-fest%2520%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A4%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmOTY1Y2M0NzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>つじ</dc:creator></item><item><title><![CDATA[2023/9/20 using : リソース変数の管理が楽になるキーワード (JavaScript&TypeScript)]]></title><description><![CDATA[この記事は2023/9/20に書きました。

この記事の内容にある意見は、個人の主観的意見を前提とします。
記事の内容は間違いがあり得ますので、ご了承いただけると幸いです。内容の間違い、認識の違い、違う意見などありましたら、コメント大歓迎です！


 概要
JavaScriptにおいて、変数を初期化できるkeyword var, let, constに加え、usingがまもなく追加される予定です。
usingキーワードで宣言した変数は、リソースタイプ変数として見なされ、変数がscope外になる前に自動でリソース解除作業を行うことができるようになり、従来の明示的にリソース解除コードを書くと...]]></description><link>https://zenn.dev/genie_oh/articles/ad33548f64b435</link><guid isPermaLink="true">https://zenn.dev/genie_oh/articles/ad33548f64b435</guid><pubDate>Fri, 24 May 2024 13:17:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qzJRwnbM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2023%252F9%252F20%2520using%2520%253A%2520%25E3%2583%25AA%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AE%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%258C%25E6%25A5%25BD%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%2520%2528JavaScript%2526TypeScr...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:genie_oh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2ZTgxNWIyODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>genie_oh</dc:creator></item><item><title><![CDATA[2020/7/26 Typescript書き方の速成まとめ]]></title><description><![CDATA[この記事は2020/7/26に書きました。
個人学習目的で作成していますが、間違ったところや捕捉などありましたがご指摘ください。

 1. 概論・セットアップ

transpile言語 (類似コンパイル言語)
Javascriptと交換
Typescriptの主な役目

コンパイル時にタイプチェックを行うこと




 Typescript setup &amp; compile
# 初期化
npm init -y
npm -i typescript [-g]
%init tsconfig.json
./node_modules/.bin/tsc --init 

# compile
t...]]></description><link>https://zenn.dev/genie_oh/articles/b6e1096b6c977e</link><guid isPermaLink="true">https://zenn.dev/genie_oh/articles/b6e1096b6c977e</guid><pubDate>Fri, 24 May 2024 13:04:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qIYPvXs5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2020%252F7%252F26%2520Typescript%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%25E3%2581%25AE%25E9%2580%259F%25E6%2588%2590%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:genie_oh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2ZTgxNWIyODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>genie_oh</dc:creator></item><item><title><![CDATA[Nest.jsをインストールしたが起動しなかった]]></title><description><![CDATA[
 何が起きたか
ドキュメント通りにコマンドを進めたが、インストール後に何もコードを触らずにエラーが出て起動しなかった。
現在は解決したが、備忘録として残しておく。
ローカルバージョン

node 19.1.0
nest 10.3.2

起動コマンド
npm run start
出力されたエラー文
&gt; test-nest3@0.0.1 start
&gt; nest start

error TS2688: Cannot find type definition file for 'lodash'.
  The file is in the program because:
   ...]]></description><link>https://zenn.dev/sgtkuc1118/articles/72bffa84fa2edc</link><guid isPermaLink="true">https://zenn.dev/sgtkuc1118/articles/72bffa84fa2edc</guid><pubDate>Fri, 24 May 2024 12:49:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tDkAUYZO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nest.js%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2581%258C%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%2597%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%25E3%2581%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c2bXdRc3VZd3pLcmNwWm9JdzQzQ3hxOHJRUUJVU3AxbjV3cGFnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しょうご</dc:creator></item><item><title><![CDATA[TypeScript を利用し LangChain で チャットボットを構築]]></title><description><![CDATA[
 はじめに
LangChain を利用し、大規模言語モデル（LLM）を活用した Chatbot をここでは作成します。具体的にはこの記事に記載されている例を実装します。
https://js.langchain.com/v0.2/docs/tutorials/chatbot
LLM は Python での実装事例は多いですが、TypeScript でも問題なく実践できます。

 コンセプト
この記事でカバーされるコンセプトこちらです。

Chat Model

LLM はステートを持ちません。つまり、過去の会話に基づいて会話できませんが、過去の会話履歴を LLM のモデルに入力すること...]]></description><link>https://zenn.dev/hayato94087/articles/3a9cf81d1b8dd3</link><guid isPermaLink="true">https://zenn.dev/hayato94087/articles/3a9cf81d1b8dd3</guid><pubDate>Fri, 24 May 2024 12:33:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wtdAluiD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%2520LangChain%2520%25E3%2581%25A7%2520%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2583%259C%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hayato94087%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5ZTEyZGJjZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hayato94087</dc:creator></item><item><title><![CDATA[メモ Next.js TypeScript 自作WebApp]]></title><description><![CDATA[
 Next.js TypeScript 自作WebApp

 1. 断捨離App
捨てられない物を登録し、期限内に使用されなかったものを断捨離するよう通知します。あなたは、断捨離をするか期限を延ばすかを選択できます。

WebApp: 断捨離App



 2. 時計App
時計をホバーするとHarryPotterのキャラクターが現れます。

WebApp: 時計App



 1. 断捨離Appの説明

断捨離品目名を入力し、適切なカテゴリを選択してSubmitボタンを押すと、アイテムに期限が割り当てられます。


Limit欄に設定された時間が過ぎるとActions欄の背景色が赤色...]]></description><link>https://zenn.dev/jim_soros/articles/2c3c6af78747a7</link><guid isPermaLink="true">https://zenn.dev/jim_soros/articles/2c3c6af78747a7</guid><pubDate>Fri, 24 May 2024 08:07:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ii9rNduX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A1%25E3%2583%25A2%2520Next.js%2520TypeScript%2520%25E8%2587%25AA%25E4%25BD%259CWebApp%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BD%2595%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%2589%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA1MzViNWUxODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>何もわからん</dc:creator></item><item><title><![CDATA[TSKaigi 2024へ参加してきました]]></title><description><![CDATA[こんにちは。チームラボフロントエンド班の濟木です。
2024年5月11日、東京中野セントラルパークにて開催された「TSKaigi 2024」に現地参加してきました。TSKaigi 2024は、プログラミング言語TypeScriptをテーマとした技術カンファレンスで、業界の最新動向や技術トレンドを学ぶことができました。
https://tskaigi.org/
今回は参加レポを書かせていただきます。
また、チームラボはTSKaigi 2024のシルバースポンサーとして参加しました。


 聴講したセッション(当日の流れ)

 Keynote: What's New in TypeScrip...]]></description><link>https://zenn.dev/teamlab_fe/articles/6482b6e6e6000b</link><guid isPermaLink="true">https://zenn.dev/teamlab_fe/articles/6482b6e6e6000b</guid><pubDate>Fri, 24 May 2024 07:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CODNfRq6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TSKaigi%25202024%25E3%2581%25B8%25E5%258F%2582%25E5%258A%25A0%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25A9%25E3%2583%259C%2520%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E7%258F%25AD%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmMDc2NDA4YWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25A9%25E3%2583%259C%25E3%2580%2580%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E7%258F%25AD%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmY2M0MTZmNGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>チームラボ フロントエンド班</dc:creator></item><item><title><![CDATA[その関数ほんとに全部わかってますか? ~Effectの実例を添えて~]]></title><description><![CDATA[こんにちは、エンジニアの籏野です。
最近、弊社エンジニアが社内向けに書いた記事で「ある関数を実行したときに捕捉すべきエラーをどのように知ればよいか？」という問いを投げていました。
この問いに対する回答として、いわゆるResult型の利用を提案してくれていたのですが、これが個人的にとても興味深いものでした。
私自身最近はRustを触っていることもあり、なんとなくResult型の存在は認識していたのですが、どのようなメリットがあるのかといったことについてはあまり理解していませんでした。
そんな中で、「関数を実行したときに捕捉すべきエラー」を型を通じて可視化するというアプローチは大変学びになり...]]></description><link>https://zenn.dev/forcia_tech/articles/202405_hatano_effect_ts</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/202405_hatano_effect_ts</guid><pubDate>Fri, 24 May 2024 04:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OFG3WSjW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25BB%25E3%2582%2593%25E3%2581%25A8%25E3%2581%25AB%25E5%2585%25A8%25E9%2583%25A8%25E3%2582%258F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BE%25E3%2581%2599%25E3%2581%258B%253F%2520%7EEffect%25E3%2581%25AE%25E5%25AE%259F%25E4%25BE%258B%25E3%2582%2592%25E6%25B7%25BB%25E3%2581%2588%25E3%2581%25A6%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[Hono + Cloudflare WorkersでserveStaticしている時のvitestの設定]]></title><description><![CDATA[
 背景

Hono内でserveStatic()を利用する際は、import manifest from '__STATIC_CONTENT_MANIFEST';というイディオムが必要となる

__STATIC_CONTENT_MANIFESTは静的ファイルをCloudflare KVで配信するための設定を色々書くためのものらしい、あんまりよくわかっていない
このimportはvitestでは失敗する


 解決策
import { vi } from 'vitest';

vi.mock('__STATIC_CONTENT_MANIFEST', () =&gt; ({ default...]]></description><link>https://zenn.dev/mierune/articles/618b2d7163a09d</link><guid isPermaLink="true">https://zenn.dev/mierune/articles/618b2d7163a09d</guid><pubDate>Fri, 24 May 2024 01:16:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4waQCGg0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%2520%252B%2520Cloudflare%2520Workers%25E3%2581%25A7serveStatic%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E6%2599%2582%25E3%2581%25AEvitest%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:IGUCHI%2520Kanahiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNDdjMTQzMmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:MIERUNE%25E3%2581%25AEZenn%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyUWJ4RXRhM0tGZ2F5NVBQMGhCRk04ajFmZ210amNvdXFld2lxPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>IGUCHI Kanahiro</dc:creator></item><item><title><![CDATA[TypeScript を利用し LangChain で 簡易LLMアプリを構築]]></title><description><![CDATA[
 はじめに
LangChain を利用し、大規模言語モデル（LLM）を活用した簡易的なアプリをここでは作成します。具体的にはこの記事に記載されている例を実装します。
https://js.langchain.com/v0.2/docs/tutorials/llm_chain/
LLM は Python での実装事例は多いですが、TypeScript でも問題なく実践できます。

 LangChain とは
LangChain は、大規模言語モデル（LLM）を活用したアプリケーションの開発を支援するフレームワークです。
https://js.langchain.com/v0.2/docs...]]></description><link>https://zenn.dev/hayato94087/articles/6473368cb6457e</link><guid isPermaLink="true">https://zenn.dev/hayato94087/articles/6473368cb6457e</guid><pubDate>Fri, 24 May 2024 00:43:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i-6RKH1V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%2520LangChain%2520%25E3%2581%25A7%2520%25E7%25B0%25A1%25E6%2598%2593LLM%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hayato94087%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5ZTEyZGJjZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hayato94087</dc:creator></item></channel></rss>