<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 23 Jul 2024 01:09:06 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RSAの暗号と署名の違い ~Rustで実装してみた~]]></title><description><![CDATA[
 はじめに
先日RSA暗号についての記事を書きました。
https://zenn.dev/mameta29/articles/1fa0dd67e18d7e
今回はRSA署名についての書いていきます。RSA暗号とRSA署名はどちらもRSAアルゴリズムを利用しますが、それぞれの目的とプロセスは異なります。RSAアルゴリズムによる暗号と署名のちがいと、Rustでの実装をしていきます。（RSA暗号のRust実装についてはこちらの記事参照）

 RSA暗号の基本


目的: メッセージの秘匿化。送信者がメッセージを暗号化して受信者に送信し、受信者がそのメッセージを復号化する。


鍵の使用方法:...]]></description><link>https://zenn.dev/mameta29/articles/25051a3a26c9bd</link><guid isPermaLink="true">https://zenn.dev/mameta29/articles/25051a3a26c9bd</guid><pubDate>Mon, 22 Jul 2024 10:21:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PjnmQOOv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RSA%25E3%2581%25AE%25E6%259A%2597%25E5%258F%25B7%25E3%2581%25A8%25E7%25BD%25B2%25E5%2590%258D%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2520%7ERust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mameta29%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3FzbE45OV9GR0RoRWJpbGxfZHl0dGNTcUhmQTd4VUh2bFo0TDZNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mameta29</dc:creator></item><item><title><![CDATA[Rust の中で TypeScript を書くには]]></title><description><![CDATA[
 はじめに
先日ユニークビジョン株式会社の UV Study というイベントで Rust に関する LT 登壇を行いました。
https://uniquevision.connpass.com/event/323686/
この記事はそれを zenn 用にまとめ直したものです。
当日の発表は 10 分と短かったため、当日の発表で話せなかったところも補足しています。

 作ったもの
https://github.com/hotwatermorning/poc-rust-ts-block

 FFI は面倒
あるプログラミング言語で書かれたプログラムの中から、別のプログラミング言語で書かれた...]]></description><link>https://zenn.dev/labbase/articles/bc5be6e5f01920</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/bc5be6e5f01920</guid><pubDate>Mon, 22 Jul 2024 03:03:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CJwsr__v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%25A7%2520TypeScript%2520%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25AB%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hotwatermorning%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxNTdjYTY2ZGIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hotwatermorning</dc:creator></item><item><title><![CDATA[一件問題無さそうでもError code E0597が発生した件]]></title><description><![CDATA[
 前口上
trait Extract&lt;'a&gt; {
	fn extract(&amp;'a self) -&gt; &amp;'a str;
}

struct Envelope&lt;'a&gt;(&amp;'a str);

impl&lt;'a&gt; Extract&lt;'a&gt; for Envelope&lt;'a&gt; {
	fn extract(&amp;'a self) -&gt; &amp;'a str {
		self.0
	}
}

fn f&lt;'b&gt;(arg: impl Extract&lt;'b&gt;) {
	let a = ar...]]></description><link>https://zenn.dev/tokeiya3/articles/20f00c1be91a32</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/20f00c1be91a32</guid><pubDate>Sun, 21 Jul 2024 12:32:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VgbJb2RU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25B8%2580%25E4%25BB%25B6%25E5%2595%258F%25E9%25A1%258C%25E7%2584%25A1%25E3%2581%2595%25E3%2581%259D%25E3%2581%2586%25E3%2581%25A7%25E3%2582%2582Error%2520code%2520E0597%25E3%2581%258C%25E7%2599%25BA%25E7%2594%259F%25E3%2581%2597%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[Rust で簡易的なマルチスレッドプログラミングをやってみる]]></title><description><![CDATA[
 はじめに
Rust にはマルチスレッドプログラミング（並列処理）ができるような仕組みがあります。
所有権という概念も存在するため、それらをうまく管理しつつ、どのように並列処理を実行していくかが気になりますね。
私自身、正直利用回数がまだまだ少なく、半分メモ書きのような形になることをご容赦ください。

 std::thread を使う
std::threadモジュールを使うことでスレッドを生成することができるようです。
https://doc.rust-lang.org/std/thread/
生成されたスレッドはメインスレッドから「分離」されるため、
生成されたスレッドがいつ終了する...]]></description><link>https://zenn.dev/collabostyle/articles/e1ba6ae7c5cfcf</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/e1ba6ae7c5cfcf</guid><pubDate>Sun, 21 Jul 2024 10:30:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iZzqY1Jn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E7%25B0%25A1%25E6%2598%2593%25E7%259A%2584%25E3%2581%25AA%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[reqwest を使って非同期処理中に外部APIを実行する]]></title><description><![CDATA[
 はじめに
本記事は、前回執筆した、[同期処理]Rust のコードで外部APIを実行するの別編です。
ほとんどの内容は重複しますが、Rust の非同期ランタイムで動作する tokioというクレートを使って、非同期処理内で外部APIを実行する流れを執筆していきます。
https://zenn.dev/collabostyle/articles/054c0361c86f07

 非同期処理でAPIを実行する
前回の記事同様に、公開されているAPIサーバーを利用させていただこうと思います。
jsonplaceholderを使ってAPIをコールしていきたいと思います。
https://json...]]></description><link>https://zenn.dev/collabostyle/articles/cb90f9e247bd6c</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/cb90f9e247bd6c</guid><pubDate>Sun, 21 Jul 2024 10:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KjFB0TPE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:reqwest%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E4%25B8%25AD%25E3%2581%25AB%25E5%25A4%2596%25E9%2583%25A8API%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[RSA暗号の仕組みとRustの実装]]></title><description><![CDATA[
 RSA暗号について
RSA暗号のセキュリティは、非常に大きな数を2つの素数に分解することが難しいという数学的な性質に基づいています。この記事ではRSA暗号の鍵生成、暗号化、復号化についての仕組みを理解し、その上でRSA暗号をRustで実装していきます。
流れは下記の通りです。

鍵生成について
暗号化と復号化のプロセス
復号化の数学的な説明
RustによるRSA暗号の実装


 1. 鍵生成
RSA暗号の鍵生成プロセスは次のステップで行います：

 1. 大きな素数の選択
セキュリティパラメータ k が与えられたとき、それに対応するサイズの2つの素数2 ( p ) と ( q ) を...]]></description><link>https://zenn.dev/mameta29/articles/1fa0dd67e18d7e</link><guid isPermaLink="true">https://zenn.dev/mameta29/articles/1fa0dd67e18d7e</guid><pubDate>Sun, 21 Jul 2024 09:57:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SNS_Ar3U--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RSA%25E6%259A%2597%25E5%258F%25B7%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2581%25A8Rust%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mameta29%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3FzbE45OV9GR0RoRWJpbGxfZHl0dGNTcUhmQTd4VUh2bFo0TDZNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mameta29</dc:creator></item><item><title><![CDATA[[Rust] ボトムアップパーサを自前で書いてみる]]></title><description><![CDATA[「Rustで作るプログラミング言語」とはあまり関係ないですが、やってみたかったことの一つです。
構文解析の世界には LL と LR パーサと呼ばれる分類があります。LL パーサはソースを左からスキャンし、左から導出することを意味します。同様に LR パーサは左からスキャンし、右から導出することを意味します。「導出」というのはトークンの並びを構文の構造で置き換えることを意味します[1]。
LL パーサはトップダウン、 LR パーサはボトムアップパーサとも呼ばれます。再帰下降パーサは LL(k) と呼ばれるパーサになります。 (k) は先読みするトークンの数を表し、再帰下降パーサはマッチに失...]]></description><link>https://zenn.dev/msakuta/articles/98edec154a5992</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/98edec154a5992</guid><pubDate>Sun, 21 Jul 2024 09:09:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0iEmgRVG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E3%2583%259C%25E3%2583%2588%25E3%2583%25A0%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%25E3%2582%2592%25E8%2587%25AA%25E5%2589%258D%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[[T]とかstrの使い方]]></title><description><![CDATA[
 前口上
Rustのスライス型には汎用の&amp;[T]と、文字列の&amp;strがある。
割と以前から、[T]やstrという&amp;無しの定義に使い道はあるのかしらん?と疑問に思っていたんだけど、今般こー言うときに使うのねということが少し解ったのでまとめておこうかなって。

 仕込み
毎度ながら結構作為的な事例になるのでその辺ご了承の程。
ConsoleにDumpを実行するtraitを定義するとしたら概ね以下のようになるかなって
pub trait Dump {
	fn dump(&amp;self);
}
このtraitをSliceに適用しようとした場合、dump(&amp;s...]]></description><link>https://zenn.dev/tokeiya3/articles/61812025d2fa77</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/61812025d2fa77</guid><pubDate>Sat, 20 Jul 2024 12:38:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HfV4xtaV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BT%255D%25E3%2581%25A8%25E3%2581%258Bstr%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[ブロックチェーン上でWEBアプリをホストする　その１（事前準備編）　Internet Computer Protocol(ICP)]]></title><description><![CDATA[
 0.目的
分散型クラウドと呼ばれるInternet Computer Protocol(ICP) は、フロントエンドも
バックエンドもブロックチェーン上でホスト可能です。さらにICPならではの特徴的な機能として、スマートコントラクトからチェーン外部とHTTPS通信を可能とするHTTPS outcallsがあります。
これはもはや、ブロックチェーン上でなんでも出来ちゃうのでは...？
と期待に胸を膨らませ、2章 dapp開発を参考に色々動かしてみたので
備忘録を兼ねて残すことにしました。内容に誤りがあればご指摘いただけますと幸いです。
https://techbookfest.org/...]]></description><link>https://zenn.dev/plum_tt/articles/b14250bdc1c2e3</link><guid isPermaLink="true">https://zenn.dev/plum_tt/articles/b14250bdc1c2e3</guid><pubDate>Sat, 20 Jul 2024 07:47:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HaWggwkm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%25B3%25E4%25B8%258A%25E3%2581%25A7WEB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E3%2580%2580%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2591%25EF%25BC%2588%25E4%25BA%258B%25E5%2589%258D%25E6%25BA%2596%25E5%2582%2599%25E7%25B7%25A8%25EF%25BC%2589%25E3%2580%2580Internet%2520Computer%2520Proto...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:satoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkNMekpyR05WY3B6OEJJTXZqQ1dCc0tKV2RmOWVDM0pJOHpEazBDLUk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>satoshi</dc:creator></item><item><title><![CDATA[rust-analyzerのシンタックスハイライトが効かないときの対処法]]></title><description><![CDATA[
 テーマを変える
Default Darkの場合:

Default Dark+の場合:

+ってなんやねん
]]></description><link>https://zenn.dev/energyzunda/articles/d86eac174683f8</link><guid isPermaLink="true">https://zenn.dev/energyzunda/articles/d86eac174683f8</guid><pubDate>Sat, 20 Jul 2024 03:27:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xyfEx-oc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust-analyzer%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%258F%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2588%25E3%2581%258C%25E5%258A%25B9%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:monax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1MzAxNzNiNDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>monax</dc:creator></item><item><title><![CDATA[RustコードのAssemblyやWASMなどを見れるツール：cargo-show-asmメモ [blessed.rsシリーズ19]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-show-asmについてです。
https://docs.rs/cargo-show-asm/latest/cargo_show_asm/

 cargo-show-asmとは
Rustコードに対して生成されたAssembly、LLVM-IR、MIR、WASMを表示するツール

 使用方法
例えば、cargo new ...をしたばかりで、main()にprintln!("Hello, world!");と書いているだけのプロジェクト内で、以下のように実行...]]></description><link>https://zenn.dev/kotabrog/articles/678acc8a0b0bb8</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/678acc8a0b0bb8</guid><pubDate>Sat, 20 Jul 2024 02:21:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I4WHkkGN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AEAssembly%25E3%2582%2584WASM%25E3%2581%25AA%25E3%2581%25A9%25E3%2582%2592%25E8%25A6%258B%25E3%2582%258C%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%259Acargo-show-asm%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed....%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[Rust + Web Worker(TypeScript + Vite)を試してみたメモ]]></title><description><![CDATA[
 概要
前回は「RustとWebAssemblyによるゲーム開発」の写経をした。
今回はRustとWeb Workerをつなげてみる。
ソースコード

 ソースコード

package.json
{
  "name": "@kartagraph/worker",
  "type": "module",
  "scripts": {
    "build": "rimraf dist pkg &amp;&amp;  wasm-pack build --target web &amp;&amp; tsc",
    "watch-build": "cargo watch -w rust -...]]></description><link>https://zenn.dev/hibo/articles/31edb9eae7609d</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/31edb9eae7609d</guid><pubDate>Fri, 19 Jul 2024 14:47:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IHJT9xD2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%252B%2520Web%2520Worker%2528TypeScript%2520%252B%2520Vite%2529%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[非同期処理の裏側を覗き見 ~Rustのasync/awaitの場合~]]></title><description><![CDATA[
 イントロダクション
非同期処理は、タスクの完了を待つことなく多くのタスクをプログラム上で実行することができる強力なツールです。例えば、Webサーバーのリクエスト処理やファイルの読み書きなど、I/Oバウンドタスクの効率的な処理に非常に有用です。
この記事では、Rust公式のAsynchronous Programming in Rustの第1章と第2章を参考にし、並行プログラミングモデルや非同期処理の実装例、非同期ランタイムの内部構造までまとめました。

 並行プログラミングモデルの比較
並行プログラミングにはさまざまなモデルがあり、それぞれに特有の利点と欠点があります。Asynchr...]]></description><link>https://zenn.dev/currypun/articles/4cc1f096cac91b</link><guid isPermaLink="true">https://zenn.dev/currypun/articles/4cc1f096cac91b</guid><pubDate>Thu, 18 Jul 2024 04:14:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NtLrNGJW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E8%25A3%258F%25E5%2581%25B4%25E3%2582%2592%25E8%25A6%2597%25E3%2581%258D%25E8%25A6%258B%2520%7ERust%25E3%2581%25AEasync%252Fawait%25E3%2581%25AE%25E5%25A0%25B4%25E5%2590%2588%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B8%25E3%2582%258B%25E3%2581%258A%25E3%2583%25BC%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhYWFiNjI2ODguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>へるおーじ</dc:creator></item><item><title><![CDATA[いろいろなプログラミング言語で NFD の濁音・半濁音を NFC に変換する・その2]]></title><description><![CDATA[
 Go
package main

import (
    "regexp"
    "golang.org/x/text/unicode/norm"
    "unicode/utf8"
)

func dakuon_normalize(str string) string {
    re := regexp.MustCompile(`[\p{Hiragana}\p{Katakana}]\p{Mn}`)
    return re.ReplaceAllStringFunc(str, func(m string) string {
        return norm.NFC.S...]]></description><link>https://zenn.dev/masakielastic/articles/463b696e7f6c67</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/463b696e7f6c67</guid><pubDate>Wed, 17 Jul 2024 21:16:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z3umy99b--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2584%25E3%2582%258D%25E3%2581%2584%25E3%2582%258D%25E3%2581%25AA%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25A7%2520NFD%2520%25E3%2581%25AE%25E6%25BF%2581%25E9%259F%25B3%25E3%2583%25BB%25E5%258D%258A%25E6%25BF%2581%25E9%259F%25B3%25E3%2582%2592%2520NFC%2520%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E3%2583%25BB%25E3%2581%259D%25E3%2581%25AE2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[Rust | include_bytes! で特定のファイルをコンパイル対象としてバイナリに含める]]></title><description><![CDATA[
 特定のファイルをコンパイル対象に含める
初期データとなる JSON ファイルをコンパイルに含めたいなと思い調べてみると、
include_bytes! というマクロが使えそうだったので試してみました！

 include_bytes! マクロ
include_bytes! を使うことで、ファイルをバイト配列への参照として含めてくれます。
指定するファイルパスは現在のファイルからの相対パスです。

include_bytes in std - Rust


 include_bytes! とファイル読み込み
include_bytes! と File によるファイル読み込みの違いを確認...]]></description><link>https://zenn.dev/collabostyle/articles/b34861c8fc54b7</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/b34861c8fc54b7</guid><pubDate>Tue, 16 Jul 2024 10:41:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ite2ULyd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%257C%2520include_bytes%2521%2520%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E5%25AF%25BE%25E8%25B1%25A1%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2590%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25AA%25E3%2581%25AB%25E5%2590%25AB%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[次世代Web BandlerのFarmが熱そう]]></title><description><![CDATA[
 はじめに
昨今、ビルドツールは様々なものが開発され、いかに高速化するか、開発者体験を上げられるかが注目されているように思います。2024年6月にState of JSが公開され、その中でBuild Toolsはwebpackが最も使用されており、次いでViteがランキングしています。

Viteの伸びがすごいですね...🔥
ビルドツールも様々ありますが、2024年4月にFarmというWeb Bandlerのv1.0がリリースされました。
https://www.farmfe.org/
気になってドキュメントサイトを覗いてみるとなんだか良さげな雰囲気を感じたので、Farmの特長と推せる...]]></description><link>https://zenn.dev/gemcook/articles/480de0e144d5d2</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/480de0e144d5d2</guid><pubDate>Tue, 16 Jul 2024 05:13:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tRK-w0in--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AC%25A1%25E4%25B8%2596%25E4%25BB%25A3Web%2520Bandler%25E3%2581%25AEFarm%25E3%2581%258C%25E7%2586%25B1%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%259E%25E3%2581%25AE%25E3%2582%258A%25E3%2582%2587%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M3NzU3NTlmZWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぞのりょー</dc:creator></item><item><title><![CDATA[Rustで実装するZeroGrads: ブラックボックス関数に対して勾配法を適用]]></title><description><![CDATA[
 TL;DR

ZeroGradsという解析微分を定義していない関数[1]に対して勾配法に似た最適化を行う新しいアルゴリズムの紹介。
Rust + candleライブラリでZeroGradsを実装して、簡単な高次元関数で効果的に機能するかの確認を行った。
Optunaなどのベイズ最適化と比較と使い分けの雑感を書きました。


 はじめに
最適化問題は機械学習、コンピュータグラフィックス、工学設計など、多くの分野で重要な役割を果たしています。しかし、高次元の複雑な問題や勾配情報が直接利用できない場合、従来の最適化手法では効率的に解を見つけることが困難でした。
本記事では、この課題に取り組...]]></description><link>https://zenn.dev/higumachan/articles/25473188c75ac4</link><guid isPermaLink="true">https://zenn.dev/higumachan/articles/25473188c75ac4</guid><pubDate>Tue, 16 Jul 2024 03:10:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QCDDL_BQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258BZeroGrads%253A%2520%25E3%2583%2596%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25AF%25E3%2583%259C%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6%25E5%258B%25BE%25E9%2585%258D%25E6%25B3%2595%25E3%2582%2592%25E9%2581%25A9%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:higumachan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2h6aERNREQ5RmE1ZEpPaDRGUTNWellUb2xsaVRlSFdqMXpkQ0VBPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>higumachan</dc:creator></item><item><title><![CDATA[Actix Web に入門して REST API サーバーを作る]]></title><description><![CDATA[
 はじめに
今回は Rust の Web フレームワークとしてかなり有名である、Actix-Webのチュートリアル部分をやっていこうと思います。
Rust には Web フレームワークが多く存在しますが、その中でも比較的歴史があり、第一線で活躍するフレームワークの一つが Actix-Webです。
チュートリアル的な内容ですので、これから Actix-Webを触る方の助けになればと思います。
他のWebフレームワークとの比較は以下の記事が参考になりました。
https://synamon.hatenablog.com/entry/rust-server-framework-compari...]]></description><link>https://zenn.dev/collabostyle/articles/77f4f8528ded1c</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/77f4f8528ded1c</guid><pubDate>Mon, 15 Jul 2024 22:05:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GKRDnmAs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Actix%2520Web%2520%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6%2520REST%2520API%2520%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[怪我の功名から理解できたライフタイム注釈]]></title><description><![CDATA[ライフタイム周りと、型として観察したときの&amp;Tと、&amp;mut Tについて色々と理解できたのでまとめておこうかなって

 コトの始まり
コレクションの種類にかかわらずIteratorを取得できるようなtraitを作った場合どうなるだろう?というのが、そもそもの始まりだった。
ただ、結果的に今回の定義と実装は、std::slice::Iter及び、std::slice ::IterMutに引きずられすぎていて全く妥当ではないので、その点ご注意の程。とは言え、ここを元にして、今回のトピックに気付き、ドツボにハマって理解できたのでその一過程として順序だって説明するには最適かなって。...]]></description><link>https://zenn.dev/tokeiya3/articles/cbd23e406e1a7b</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/cbd23e406e1a7b</guid><pubDate>Mon, 15 Jul 2024 11:44:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HVXRHTbt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%25AA%25E6%2588%2591%25E3%2581%25AE%25E5%258A%259F%25E5%2590%258D%25E3%2581%258B%25E3%2582%2589%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%25A7%25E3%2581%258D%25E3%2581%259F%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E6%25B3%25A8%25E9%2587%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[S3 Selectをaws-sdk-rustで行う]]></title><description><![CDATA[
 S3を準備

 S3 Bucketを作成
CloudFormationを用いて以下を作成します。

S3 Bucket
作成したS3からデータを取得するためのIAMユーザー

AWSTemplateFormatVersion: "2010-09-09"
Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
 ...]]></description><link>https://zenn.dev/monjara/articles/17f00f0cab4ef1</link><guid isPermaLink="true">https://zenn.dev/monjara/articles/17f00f0cab4ef1</guid><pubDate>Mon, 15 Jul 2024 02:53:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Oyimcce---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:S3%2520Select%25E3%2582%2592aws-sdk-rust%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:monjara%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwZTlkOTQwZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>monjara</dc:creator></item></channel></rss>