<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/typescript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/typescript/feed"/>
  <title>TypeScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでTypeScriptタグが付けられた新着記事</description>
  <updated>2024-05-20T20:02:39+09:00</updated>
  <link>https://qiita.com/tags/typescript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1861552</id>
    <published>2024-05-20T20:02:39+09:00</published>
    <updated>2024-05-20T20:02:39+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yuu_7_ns/items/7011e7bed216532d1859"/>
    <url>https://qiita.com/yuu_7_ns/items/7011e7bed216532d1859</url>
    <title>TypeScriptで関数のオーバーロードを理解する</title>
    <content type="html">関数のオーバーロードとは？
関数のオーバーロード（Function Overloading）とは、同じ名前の関数を異なる引数の型や数で複数定義し、呼び出し時の引数に応じて適切な関数が実行されるように…</content>
    <author>
      <name>yuu_7_ns</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1861536</id>
    <published>2024-05-20T19:01:42+09:00</published>
    <updated>2024-05-20T19:10:07+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/odas/items/f668941c4f75a15932cc"/>
    <url>https://qiita.com/odas/items/f668941c4f75a15932cc</url>
    <title>TypeScriptでスプラトゥーン3ブキ射程2択クイズアプリを作成した</title>
    <content type="html">はじめに
学習を目的としてTypeScriptを使用してシンプルな2択クイズアプリ「スプラトゥーン3 射程クイズゲーム」を開発しました。2つのブキの中から射程が長いと思うブキを選択するゲームです。ス…</content>
    <author>
      <name>odas</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1861499</id>
    <published>2024-05-20T17:31:51+09:00</published>
    <updated>2024-05-20T17:33:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Cap1231/items/ff240eeadbec9c39e934"/>
    <url>https://qiita.com/Cap1231/items/ff240eeadbec9c39e934</url>
    <title>NextJSでAPIのResponseをキャメルケースで扱いたい</title>
    <content type="html">背景
多くのAPIは、レスポンスのフィールド名やリクエストのボディをsnake_caseで扱います。しかし、JavaScriptではcamelCaseが一般的なスタイルです。そのため、APIから受け…</content>
    <author>
      <name>Cap1231</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1861421</id>
    <published>2024-05-20T14:10:34+09:00</published>
    <updated>2024-05-20T14:10:34+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/y3kh6s03/items/9f6f1ced2bc514cb368e"/>
    <url>https://qiita.com/y3kh6s03/items/9f6f1ced2bc514cb368e</url>
    <title>Next.js(React)でとりあえずReduxの状態管理一元化の恩恵を受ける方法</title>
    <content type="html">はじめに
私は、働く人が働きやすく、企業は働きやすいから人が育ち、より良いサービスを提供できるから多くの人が喜べる。と考えております。
このサイクルで大きな一助になれるのは、エンジニアの力。企業発展…</content>
    <author>
      <name>y3kh6s03</name>
    </author>
  </entry>
</feed>
