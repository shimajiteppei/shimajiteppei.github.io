<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 15 Aug 2024 07:55:51 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[graphql-request v7をCommonJS環境で使い続ける]]></title><description><![CDATA[
 graphql-request@7.0.0にてCommonJSがサポート対象外に
Release Noteに記載されている通り、v7以降ではCommonJSサポートが削除されESMのみサポートとなりました。

7.0.0
BREAKING CHANGES

2a121c6 remove inlined graphql websocket code
99a192e add spec compliant default Accept header (#618)
0e53aed replace GraphQLClientRequestHeaders with built-in Header...]]></description><link>https://zenn.dev/grainrigi/articles/dbc2cbf4021fb8</link><guid isPermaLink="true">https://zenn.dev/grainrigi/articles/dbc2cbf4021fb8</guid><pubDate>Thu, 15 Aug 2024 07:01:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2CtPo_oj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:graphql-request%2520v7%25E3%2582%2592CommonJS%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2584%25E7%25B6%259A%25E3%2581%2591%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:grainrigi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeFhjT3BsTDdwd3lZcHNKRUl0VUx0UDBoRUpDYnZNQWcwQXVweVI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>grainrigi</dc:creator></item><item><title><![CDATA[Next.js14 + ヘッドレスブラウザでOG画像の自動生成APIを作る]]></title><description><![CDATA[こんにちは。音楽ディレクター・プロデューサーの村上といいます。
今回は、Next.jsサイトで各記事のOG画像を自動生成するシステムを独自実装で作ってみました。普通のAPIなので、Next.jsではない、どんなサイトでも使えます。
（Next.js/Vercelが提供する動的OGP自動生成ライブラリも存在しますが、いろいろ問題があって使えず。後述）

 OG画像 is 何
OGPとも呼ばれます。これがサイトにメタデータとして埋め込まれていると、Ｘ(Twitter)やLineなどの各SNSやブログなどで、ユーザーがページをシェアしたときにサムネイル的なやつが表示されます。
下記が完成品です...]]></description><link>https://zenn.dev/jun_murakami/articles/7e5bf3a85fde65</link><guid isPermaLink="true">https://zenn.dev/jun_murakami/articles/7e5bf3a85fde65</guid><pubDate>Thu, 15 Aug 2024 01:12:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mypUdIU6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js14%2520%252B%2520%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25A7OG%25E7%2594%25BB%25E5%2583%258F%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590API%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jun%2520Murakami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WUpGeVFIblVsUDZucHhNYXZtX25qUEx3M1JfanJxRldjdEhDSjlodz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jun Murakami</dc:creator></item><item><title><![CDATA[Cloud Functions 2nd gen.でNest.jsを使うためのテンプレート（Hot Reload付き）]]></title><description><![CDATA[
 はじめに
バックエンドにNest.jsを個人的に使うようになってしばらく経ちますが、Nest.jsの精緻な公式ドキュメント・豊富なコミュニティ記事が心強いです。
とはいえ、試行錯誤が必要になったケースもあって、筆者の場合、サーバーレス環境へのデプロイ、具体的にはCloud Functionsへのデプロイがその一つでした。
公式ドキュメントにはなるほどServerlessの一項は設けられていますが、AWS Lambdaこそあれ、Cloud Functionsに関する具体的な記述はありません。
https://docs.nestjs.com/faq/serverless#serverle...]]></description><link>https://zenn.dev/ptna/articles/6dc37529ac61d9</link><guid isPermaLink="true">https://zenn.dev/ptna/articles/6dc37529ac61d9</guid><pubDate>Wed, 14 Aug 2024 22:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zqT7ugNC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloud%2520Functions%25202nd%2520gen.%25E3%2581%25A7Nest.js%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%2588Hot%2520Reload%25E4%25BB%2598%25E3%2581%258D%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hosaka313%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNDZkNWFmNTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%2585%25A8%25E6%2597%25A5%25E6%259C%25AC%25E3%2583%2594%25E3%2582%25A2%25E3%2583%258E%25E6%258C%2587%25E5%25B0%258E%25E8%2580%2585%25E5%258D%2594%25E4%25BC%259A%25EF%25BC%2588%25E3%2583%2594%25E3%2583%2586%25E3%2582%25A3%25E3%2583%258A%25EF%25BC%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lvTjJRYzJRN1V1ZnM1X29EblNkWkt4OFNPSWUzOTBaQTRSTDVOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hosaka313</dc:creator></item><item><title><![CDATA[TypeScriptの高度な型システム：条件付き型とマッピング型の活用法]]></title><description><![CDATA[
 TypeScriptの高度な型システム：条件付き型とマッピング型の活用法

 はじめに
TypeScriptは、JavaScriptに型安全性を追加するためのプログラミング言語であり、開発者がより堅牢で保守性の高いコードを書くことを可能にします。TypeScriptの型システムは非常に強力で、特に条件付き型とマッピング型は、型の柔軟性と再利用性を高めるための重要な機能です。本記事では、これらの高度な型システムの概念を深く掘り下げ、実践的な例を通じてその活用法を解説します。

 TypeScriptの型システムの概要
TypeScriptの型システムは、静的型付けを提供し、開発者がコー...]]></description><link>https://zenn.dev/llm_robot/articles/20240815-typescript-conditional-mapping</link><guid isPermaLink="true">https://zenn.dev/llm_robot/articles/20240815-typescript-conditional-mapping</guid><pubDate>Wed, 14 Aug 2024 22:08:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_aUFJp2B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E9%25AB%2598%25E5%25BA%25A6%25E3%2581%25AA%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25EF%25BC%259A%25E6%259D%25A1%25E4%25BB%25B6%25E4%25BB%2598%25E3%2581%258D%25E5%259E%258B%25E3%2581%25A8%25E3%2583%259E%25E3%2583%2583%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%25E5%259E%258B%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AIZAWA%2520version%253A0.0.2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMTE3MGM1NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AIZAWA version:0.0.2</dc:creator></item><item><title><![CDATA[【JS初級】#1 mapメソッドとforEachメソッドの違い・使い分け【3分解説】]]></title><description><![CDATA[
 まえがき
今回から始まりました、JavaScript(TypeScript)解説シリーズ。実務でJavaScript(TypeScript)を使っている人も、勉強中の人も、「あれ？言われてみればどうだったっけ？」となるような疑問を解決していこうというコーナーです。今後はもっと踏み込んだ内容も執筆していきたいと思っています。

 今回のテーマ
第一回のテーマはmapメソッドとforEachメソッドです。どちらもよく使われることのあるメソッドですが、違いを正しく理解せずに使っている方も中にはいるのではないでしょうか。今回はこの二つのメソッドの違いについて解説します。

 例題
const...]]></description><link>https://zenn.dev/gamuprog/articles/29ea2f58883750</link><guid isPermaLink="true">https://zenn.dev/gamuprog/articles/29ea2f58883750</guid><pubDate>Wed, 14 Aug 2024 22:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tAoYOBB1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JS%25E5%2588%259D%25E7%25B4%259A%25E3%2580%2591%25231%2520map%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25A8forEach%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2583%25BB%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2580%25903%25E5%2588%2586%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258C%25E3%2582%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmYTNjODM0OTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>がむ</dc:creator></item><item><title><![CDATA[TypeScript、ネストする型定義とFE/BEでの使い方]]></title><description><![CDATA[
 前提

研修を終えて配属一週間目のひよこです

研修で触れた言語やフレームワーク

HTML, CSS
JavaScript
React
TypeScript
python
Java
kotlin
SpringBoot




諸々触れることはできていても理解は甘々なので、自分でwebアプリを作ってみてます
TODO管理アプリのフロントとバックを作ります

使用する言語など

フロント

TypeScript
React


バック

TypeScript
Firebase Function




プロダクトのコンセプト

TODO粒度での振り返りを行いやすくすることで、成長のPD...]]></description><link>https://zenn.dev/shunsuke108m/articles/c6c4966e77d4e8</link><guid isPermaLink="true">https://zenn.dev/shunsuke108m/articles/c6c4966e77d4e8</guid><pubDate>Wed, 14 Aug 2024 18:11:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uaX8uRvh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2580%2581%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8FE%252FBE%25E3%2581%25A7%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%25AE%25E7%2594%25B0%25E5%25B3%25BB%25E8%25BC%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG9Jdy1QSHNvSW1WVGpKTmxFbkhnZkRyZ0pBVlRSQzhIaWMweDVJUmZLS3hlUjZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宮田峻輔</dc:creator></item><item><title><![CDATA[TypeScriptの基本的な型]]></title><description><![CDATA[
 型アノテーション(型注釈)
変数名: 型名 = 値
let name: string = "Name";

 プリミティブな型

 number

整数、浮動小数、負の値、NaN(not a number)、infinity、2進数(0b)、8進数(0o)、16進数(0x)
範囲は約 -9007199254740991-(2^53 − 1)から約 90071992547409912^53 − 1



 string

シングルクウォート、ダブルクウォート、バックティック(テンプレートリテラル)


 boolean

true/false


 undefined

値が存在しない...]]></description><link>https://zenn.dev/momonga_g/articles/755294dea6f610</link><guid isPermaLink="true">https://zenn.dev/momonga_g/articles/755294dea6f610</guid><pubDate>Wed, 14 Aug 2024 16:11:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ujR3TMvt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2582%2582%25E3%2582%2593%25E3%2581%258C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiZWRkZTc0YzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ももんが</dc:creator></item><item><title><![CDATA[Firebaseにデプロイが反映されなくなったが、package.jsonのmainが原因だった件]]></title><description><![CDATA[
 状況

Firebase Functionに、新しく書いた関数のデプロイが反映されない
デプロイ自体はエラーなく実行できるているが、Functionsを見ても新しく書いた関数が追加されていない
エラーは特に出ていないので原因不明で発狂。ChatGPTもお手上げ。


 環境

フロント　：　TypeScript * React（Vite）
バック　：　TypeScript * Firebase


 ざっくりディレクトリ構成
- vite-project
    - function //Firebase周り
    - common/schema //フロントでもバックでも使う型を...]]></description><link>https://zenn.dev/shunsuke108m/articles/9dd0d08584d257</link><guid isPermaLink="true">https://zenn.dev/shunsuke108m/articles/9dd0d08584d257</guid><pubDate>Wed, 14 Aug 2024 14:31:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yDKX8vsS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Firebase%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%258C%25E5%258F%258D%25E6%2598%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%258C%25E3%2580%2581package.json%25E3%2581%25AEmain%25E3%2581%258C%25E5%258E%259F%25E5%259B%25A0%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%25AE%25E7%2594%25B0%25E5%25B3%25BB%25E8%25BC%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG9Jdy1QSHNvSW1WVGpKTmxFbkhnZkRyZ0pBVlRSQzhIaWMweDVJUmZLS3hlUjZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宮田峻輔</dc:creator></item><item><title><![CDATA[ネストオブジェクトの罠 RE: TypeScriptで「選択肢」の定義をEnum的な定数にまとめる]]></title><description><![CDATA[この記事は、静的解析とビルドサイズ面で興味深いテーマでした。記事として自分の考えを書きます。
https://zenn.dev/yumemi_inc/articles/ts-enum-like-const
注意。あくまでビルドパフォーマンス視点での最適化です。強い意図があって、自分のドメインモデリングの方法論ではこれが最適なんだ、というなら元コードの方法論を止めるつもりはありません。

 元記事のコードを minify するとどうなるか
元コードを参考に、それにアクセスするサンプルコードを書いてみます。
const sortingOptions = {
  priceDesc: {
  ...]]></description><link>https://zenn.dev/mizchi/articles/you-cant-mangle-nested-obj</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/you-cant-mangle-nested-obj</guid><pubDate>Wed, 14 Aug 2024 13:58:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O2YKfqHk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E7%25BD%25A0%2520RE%253A%2520TypeScript%25E3%2581%25A7%25E3%2580%258C%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%25E3%2580%258D%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592Enum%25E7%259A%2584%25E3%2581%25AA%25E5%25AE%259A%25E6%2595%25B0%25E3%2581%25AB%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[use-immer でネストした State を更新する]]></title><description><![CDATA[こんにちは。記事の連投記録更新中ののツーさんです 😁。State の管理といえば React の "useState" を使うのが一般的ですよね。もちろん私もよく使っています。
しかし、下記みたいなネストされた State を更新をする時ってちょっとめんどくさいと思ったことありませんか？
const [form, setForm] = useState&lt;FormType&gt;({
  name: "",
  address: {
    prefecture: "",
    city: "",
  },
  contact: {
    tel: "",
    email: ...]]></description><link>https://zenn.dev/cocomina/articles/update-nested-state-with-use-immer</link><guid isPermaLink="true">https://zenn.dev/cocomina/articles/update-nested-state-with-use-immer</guid><pubDate>Wed, 14 Aug 2024 13:43:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g_Npwo2w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:use-immer%2520%25E3%2581%25A7%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%2520State%2520%25E3%2582%2592%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Twosun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiODhhMjUyYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Twosun</dc:creator></item><item><title><![CDATA[ClerkのAuthMiddlewareをClerkMiddlewareで書き換える方法]]></title><description><![CDATA[
 はじめに
個人開発の勉強にて以下のYoutube動画を参考にクローンアプリを作りながらNextJSに触れているのですが、Middlewareの認証周りで非推奨に出会ったので、ClerkMiddlewareでのコーディングを載せておきます.
https://www.youtube.com/watch?v=pRybm9lXW2c

 Clerkとは何か
Clerkは、Next.jsアプリケーションに簡単に認証機能を追加できるサービスです.
個人開発アプリを公開をする場合に認証情報の管理は非常に大切ですが、他の機能の作り込みを頑張りたいのが性な気がします(個人の感想ですが...).
Cle...]]></description><link>https://zenn.dev/norinoriver/articles/1b02876c46dd95</link><guid isPermaLink="true">https://zenn.dev/norinoriver/articles/1b02876c46dd95</guid><pubDate>Wed, 14 Aug 2024 13:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gAgo7mZ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Clerk%25E3%2581%25AEAuthMiddleware%25E3%2582%2592ClerkMiddleware%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258D%25E6%258F%259B%25E3%2581%2588%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nori%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1YjI5NDBlMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nori</dc:creator></item><item><title><![CDATA[リポジトリ内のマークダウンをLLMでまとめて自動翻訳するGithubActionsを作った]]></title><description><![CDATA[
 作ったもの
リポジトリ内のすべてのMarkdownファイルをGlobパターンで検索し、それぞれClaude3.5を使用して翻訳して保存するスクリプトとGitHub Actionsを作成しました。オリジナルのドキュメントをForkし、その中にこれらのスクリプトを組み込むことで、オリジナルのドキュメントが更新されるたびにSyncForkボタンを押すだけで、Actionsが自動的に翻訳を実行してくれます。
現在は、Nostrの仕様書であるNIPs、およびEthereum関連のEIPsやERCsの翻訳を行っています。実際に翻訳されたドキュメントは以下のリンクから確認できます。
https:/...]]></description><link>https://zenn.dev/inaridiy/articles/f1ed9e73cb182b</link><guid isPermaLink="true">https://zenn.dev/inaridiy/articles/f1ed9e73cb182b</guid><pubDate>Wed, 14 Aug 2024 07:11:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5QCydbLm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2583%259D%25E3%2582%25B8%25E3%2583%2588%25E3%2583%25AA%25E5%2586%2585%25E3%2581%25AE%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%2592LLM%25E3%2581%25A7%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E8%2587%25AA%25E5%258B%2595%25E7%25BF%25BB%25E8%25A8%25B3%25E3%2581%2599%25E3%2582%258BGithubActions%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:inaridiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZWUyYTA5OWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>inaridiy</dc:creator></item><item><title><![CDATA[＃28　function callingを試してみた]]></title><description><![CDATA[
 概要
2023年6月13日にOpenAIのGPTがアップデートされ、「function calling」という機能が追加されました。これによって外部のAPIなどを呼び出せるようになり高機能なチャットボットの作成が可能になります。
今回はローカルに保存されている情報とGPTを連携してみたいと思います

 大まかな流れ

呼び出したい関数群を実装し、公式ドキュメントを参考にJSON形式で関数の情報を記述します
送信したいメッセージとともに先ほど作成した関数の情報をGPTに渡します
GPTが関数を呼び出す必要があると判断した場合、関数名と引数を返してくれます。関数を呼び出す必要がないと判断...]]></description><link>https://zenn.dev/nxted_sapporo/articles/341105ba11b51a</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/341105ba11b51a</guid><pubDate>Wed, 14 Aug 2024 06:01:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1dk8OE-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%258328%25E3%2580%2580function%2520calling%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[経験談に基づく主観的Vue.js学習ロードマップ]]></title><description><![CDATA[
 はじめに
おはようございますhiroです。
Vueを学習するにあたり、初学者向けのロードマップがあればと思っていたため本記事を書きました ✏️
タイトルにもありますが、本記事は私の経験に基づくかなり主観的なものとなっていますので予めご了承ください。「これからVueをどのように学習しよう？」そう悩んでいる方の参考になれば幸いです！

 対象読者
本記事はVueをこれから学習しようとしている初学者の方を対象としています。具体的に以下のような悩みを持った方を想定しています。

JavaScriptをざっと学びこれからVueをどのように学習しようか悩んでいる方
どのような教材を使用すれば良い...]]></description><link>https://zenn.dev/comm_vue_nuxt/articles/c2b0b9dd97ff49</link><guid isPermaLink="true">https://zenn.dev/comm_vue_nuxt/articles/c2b0b9dd97ff49</guid><pubDate>Wed, 14 Aug 2024 05:46:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wuRZDT-6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B5%258C%25E9%25A8%2593%25E8%25AB%2587%25E3%2581%25AB%25E5%259F%25BA%25E3%2581%25A5%25E3%2581%258F%25E4%25B8%25BB%25E8%25A6%25B3%25E7%259A%2584Vue.js%25E5%25AD%25A6%25E7%25BF%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MTZlOWFlNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Vue%25E3%2583%25BBNuxt%2520%25E6%2583%2585%25E5%25A0%25B1%25E3%2581%258C%25E9%259B%2586%25E3%2581%25BE%25E3%2582%258B%25E5%25BA%2583%25E5%25A0%25B4%2520%252F%2520P...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwOTUyYzVkNWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiro</dc:creator></item><item><title><![CDATA[個人的に好きなPrettierの設定]]></title><description><![CDATA[
 はじめに
今までデフォルトの設定でPrettierを使ってコード整形をしていましたが、最近コードの見た目をスッキリさせたいと思ってPrettierを自分好みに設定してみました。

 個人的に好きなPrettier設定

.prettierrc
{
  "printWidth": 90,
  "semi": false,
  "singleQuote": true
}

以上！

 printWidth: 90
1行あたりの最大文字数を90文字に設定。

デフォルトは80文字

折り返しの幅はもうちょっと広めに設定したかったので90文字にしました。
バージョンアップによって、デフォルト...]]></description><link>https://zenn.dev/ryouta26/articles/747431b844b4f0</link><guid isPermaLink="true">https://zenn.dev/ryouta26/articles/747431b844b4f0</guid><pubDate>Wed, 14 Aug 2024 05:14:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3wNaPtYJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2580%258B%25E4%25BA%25BA%25E7%259A%2584%25E3%2581%25AB%25E5%25A5%25BD%25E3%2581%258D%25E3%2581%25AAPrettier%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ryouta.js%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZjIyNTZmYmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryouta.js</dc:creator></item><item><title><![CDATA[react-instantsearch & MeiliSearchで、ネストされたオブジェクトのHighlightをするカスタマイズをする]]></title><description><![CDATA[
 前提
InstantSearchとMeiliSearchについてを軽く説明します。
知ってる方は本題からで大丈夫です

 InstantSearchとは
InstantSearchはJavaScriptでalgoliaなどの検索UIを簡単に作ることができるように設計されたライブラリです。
algoliaが作っているものの、algoliaだけじゃなくMeiliSearchなどでもsearchClientが提供されてさえいれば簡単に作れるので検索UIを作る時は素晴らしく使いやすいです。
InstantSearchのcomponentはpreactで実装されていて素のHtmlで使えるのも便...]]></description><link>https://zenn.dev/k_sone/articles/e84541ea29930f</link><guid isPermaLink="true">https://zenn.dev/k_sone/articles/e84541ea29930f</guid><pubDate>Wed, 14 Aug 2024 03:08:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PsErd6vT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:react-instantsearch%2520%2526%2520MeiliSearch%25E3%2581%25A7%25E3%2580%2581%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AEHighlight...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sonken625%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hMZnpoLW5RWXpyQ09NV0tsaG1fb3A2X2plVlc4TmE1Ml9nWk1ldEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sonken625</dc:creator></item><item><title><![CDATA[[GraphQL Code Generator] より良い型を出力するために初期設定時に avoidOptionals を設定しよう]]></title><description><![CDATA[
 公式ドキュメントの手順通りに導入を進めると、avoidOptionals の設定が漏れてしまう場合がある
GraphQL を扱うプロジェクトでは、GraphQL Code Generator を扱っているケースが多いと思います。導入ガイドのドキュメント 通りに実装していけば、型や関数の出力をすることができます。
ただ、導入ガイドのドキュメント では目立ちにくいけれど、自社でフロントエンドもバックエンドも開発してスキーマ駆動開発で進める場合は、設定してしておいた方がいいオプションがあります。それが、avoidOptionals です。
導入ガイドのドキュメント のコードそのままで av...]]></description><link>https://zenn.dev/koji_koji_koji/articles/4f5cc882716819</link><guid isPermaLink="true">https://zenn.dev/koji_koji_koji/articles/4f5cc882716819</guid><pubDate>Wed, 14 Aug 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k15G4daR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BGraphQL%2520Code%2520Generator%255D%2520%25E3%2582%2588%25E3%2582%258A%25E8%2589%25AF%25E3%2581%2584%25E5%259E%258B%25E3%2582%2592%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E6%2599%2582%25E3%2581%25AB%2520avoidOptiona...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:koji-koji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5NGM2N2EyYTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>koji-koji</dc:creator></item><item><title><![CDATA[同じ名前のインターフェースは結合されます！]]></title><description><![CDATA[TypeScriptでは、インターフェースの宣言が同じ名前で複数回行われた場合、それらのインターフェースは結合されます。この記事では、同じ名前のインターフェースがどのように結合されるのかを説明します。

 基本的なインターフェースの宣言
まず、以下のように基本的なインターフェースを宣言します。このインターフェースPersonは、nameというプロパティを持つオブジェクトを定義します。
interface Person {
  name: string
}
このインターフェースを基に、nameプロパティを持つPerson型のオブジェクトを作成できます。

 同じ名前で別のインターフェースを...]]></description><link>https://zenn.dev/nomikazu_x/articles/typescript-interfaces-same-name-merged</link><guid isPermaLink="true">https://zenn.dev/nomikazu_x/articles/typescript-interfaces-same-name-merged</guid><pubDate>Tue, 13 Aug 2024 23:39:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ejs3Kej4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2590%258C%25E3%2581%2598%25E5%2590%258D%25E5%2589%258D%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AF%25E7%25B5%2590%25E5%2590%2588%25E3%2581%2595%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2599%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nomikazu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5Zjg3ZDg5NmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nomikazu</dc:creator></item><item><title><![CDATA[Reactで画像を表示する]]></title><description><![CDATA[
 📝毎回忘れるのでメモ
Reactで画像を表示する方法を毎回忘れるので、メモ程度ですが記事を書くことにしました。参考になると嬉しいですね。
publicディレクトリに、assetsディレクトリを作成して、jpg画像を配置する。

ImageComponent.tsxを作成する。

const ImageComponent = () =&gt; {
  return (
    &lt;div&gt;
        &lt;h1&gt;Reactで画像を表示する&lt;/h1&gt;
        &lt;img src="public/assets/android.jpg" alt...]]></description><link>https://zenn.dev/joo_hashi/articles/b859f4c05a8e58</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/articles/b859f4c05a8e58</guid><pubDate>Tue, 13 Aug 2024 15:48:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KlkOv1X9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JboyHashimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjOTBiY2M0M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[ZodとHTMLだけでバリデーションをやってみた。react-hook-form未使用]]></title><description><![CDATA[こんにちは。最近暑さにめっぽうやられてるツーさんです 😁。こんな時はゾッとする話でも聞いて涼みたいですね。はい。とゆうわけで今回は Zod と HTML だでバリデーションをやってみたのでその内容を記事にしてみました。
※ 本記事では react-hook-form は使用していません。

 記事内に掲載しているソースコードは Github でも確認できます。
https://github.com/twosun-8-git/zod

 Zod とは 🤔
Zod のサイト見ると "TypeScript-first schema validation with static type inf...]]></description><link>https://zenn.dev/cocomina/articles/validation-zod-pure-html</link><guid isPermaLink="true">https://zenn.dev/cocomina/articles/validation-zod-pure-html</guid><pubDate>Tue, 13 Aug 2024 15:24:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---08utYPS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25E3%2581%25A8HTML%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582react-hook-form%25E6%259C%25AA%25E4%25BD%25BF%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Twosun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiODhhMjUyYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Twosun</dc:creator></item></channel></rss>