<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 09 Oct 2024 12:04:21 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[サクッと始めるウェブアプリ開発【Next.js / TypeScript】]]></title><description><![CDATA[この本では、初心者・入門者の方に向けて、Next.jsの知識や使い方を体系的にまとめました。
 
 【概要】
 ・内容：HTML・CSS・JavaScriptとは？、Next.jsとは？、アプリを作る上での環境を整えよう！、Next.jsのプロジェクトを作ろう！、チャットアプリのパーツを作ろう！、オウム返しAPIを作ろう！、MUIを使ってリッチにしよう！、Vercelにデプロイしよう！、【余談】Joy.uiによるUIの変更
 ・所要時間：約3時間
 ・必須条件：HTMLの知識、CSSの知識、JavaScriptの知識
 ・推奨OS：macOS / windows(WSL2)
 ・レベル：★★☆☆☆
 ]]></description><link>https://zenn.dev/umi_mori/books/next-js-typescript</link><guid isPermaLink="true">https://zenn.dev/umi_mori/books/next-js-typescript</guid><pubDate>Wed, 09 Oct 2024 06:10:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3lCoDJ92--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8wZDk4NWMxYmJkLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ますみ / 生成AIエンジニア</dc:creator></item><item><title><![CDATA[filterメソッド]]></title><description><![CDATA[
 基本構文
array.filter(callbackFn, thisArg)

 引数
第一引数に callback 関数（3つの引数を取る）、第二引数にthisArg。


callback: 各要素に対して実行される関数。次の3つの引数を取ります。


currentValue: 配列の現在の要素。
currentIndex (オプション): 現在の要素のインデックス。
array (オプション): filter() が呼び出された配列。


thisArg (オプション): callback が実行される際に this として使用する値。


 戻り値
callback が t...]]></description><link>https://zenn.dev/kimascript/articles/4db93adafab80f</link><guid isPermaLink="true">https://zenn.dev/kimascript/articles/4db93adafab80f</guid><pubDate>Wed, 09 Oct 2024 06:08:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OMTudOPB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:filter%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2N2UwMmQyNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>...</dc:creator></item><item><title><![CDATA[mapメソッド]]></title><description><![CDATA[
 基本構文
array.map(callbackFn, thisArg)

 引数
第一引数に callback 関数（3つの引数を取る）、第二引数にthisArg。


callback: 各要素に対して実行される関数。次の3つの引数を取ります。


currentValue: 配列の現在の要素。
currentIndex (オプション): 現在の要素のインデックス。
array (オプション): map() が呼び出された配列。


thisArg (オプション): callback が実行される際に this として使用する値。


 戻り値
各要素に対して callback を...]]></description><link>https://zenn.dev/kimascript/articles/6f5f3564aca61e</link><guid isPermaLink="true">https://zenn.dev/kimascript/articles/6f5f3564aca61e</guid><pubDate>Wed, 09 Oct 2024 05:32:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eVS7izZS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:map%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2N2UwMmQyNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>...</dc:creator></item><item><title><![CDATA[reduceメソッド]]></title><description><![CDATA[
 基本構文
array.reduce(callbackFn, initialValue])

 引数
第一引数に callback 関数（4つの引数を取る) 、第二引数にinitialValue。


callback: 各要素に対して実行される関数。次の4つの引数を取ります。


accumulator: 前回のコールバックの戻り値。initialValueが提供された場合はそれが初期値になります。

currentValue: 現在の配列要素。
currentIndex (オプション): 現在の要素のインデックス。
array (オプション): reduce()が呼び出された配列。...]]></description><link>https://zenn.dev/kimascript/articles/48889551d2d2d7</link><guid isPermaLink="true">https://zenn.dev/kimascript/articles/48889551d2d2d7</guid><pubDate>Wed, 09 Oct 2024 00:54:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fAX7PP8G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:reduce%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2N2UwMmQyNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>...</dc:creator></item><item><title><![CDATA[C#erから見たJavaScriptの非同期処理]]></title><description><![CDATA[
 解法
C# 開発者が JavaScript の非同期プログラミングを理解するには、以下の主要な違いと類似点に注目することが重要です：

Promise と Task の対応関係
async/await 構文の類似性と違い
実行モデルの根本的な違い
Promise の then チェーンと await の違い


 解説

 Promise と Task の対応関係
C# の Task に相当するのが JavaScript の Promise です。両者とも非同期操作の結果を表現するオブジェクトですが、使い方に違いがあります。

 C# の Task の例:
public async ...]]></description><link>https://zenn.dev/nuits_jp/articles/2024-10-09-csharp-dev-javascript-async</link><guid isPermaLink="true">https://zenn.dev/nuits_jp/articles/2024-10-09-csharp-dev-javascript-async</guid><pubDate>Tue, 08 Oct 2024 21:32:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sWi6Qu2s--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:C%2523er%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2581%259FJavaScript%25E3%2581%25AE%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Atsushi%2520Nakamura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kxcWVVUGV3Z1lrYXhhaE1uWW1rQnRRT0RVLWtNemJiMEhfTHo4MkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Atsushi Nakamura</dc:creator></item><item><title><![CDATA[【メンバ変数】クラス変数とインスタンス変数]]></title><description><![CDATA[
 メンバ変数
メンバ変数には、クラス変数とインスタンス変数がある。


 クラス変数とインスタンス変数


 クラス変数

クラス内すべてのオブジェクトに共通の状態
初期化時にstatic をつける
クラス名.クラス変数　でアクセスする

staticについては以下
https://zenn.dev/417yr/articles/f09d29124fc803

 インスタンス変数

インスタンス毎に異なる状態。1レコードずつ異なるイメージ
インスタンス名.インスタンス変数　でアクセスできる
クラスの中では this.インスタンス変数　でアクセスできる


test.js
class P...]]></description><link>https://zenn.dev/417yr/articles/ec0b278087ed5f</link><guid isPermaLink="true">https://zenn.dev/417yr/articles/ec0b278087ed5f</guid><pubDate>Tue, 08 Oct 2024 14:15:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--muyyFzhV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2590%25E5%25A4%2589%25E6%2595%25B0%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E5%25A4%2589%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:417yr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0NmMyZTY3ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>417yr</dc:creator></item><item><title><![CDATA[開発もコードレビューも最後には「優しさに溢れたコメント」だよね、という話]]></title><description><![CDATA[
 はじめに
皆さんはちゃんとコメント残していますか？
新しくコードを追加した時、自分だけはその意味をよく分かっているため、よほど意識的にならないと「客観的にこのコード見たらどうか？」ということに考えが至らない場合が多いです。
熟練のエンジニアでも陥りがちですから、新人は言わずもがなでしょう。
コメントを残す主なメリットは次の通りです。

他の人の理解にかかる時間を短縮する（自分も含む）
誤解を防ぎ、人為的なミスを減らす
心理的安全性の向上

ここに過去の自分が知っておきたかった「新人が知っておくべきコメント」について3つを紹介しておきます。
※ 普段フロントエンドエンジニアをやっている...]]></description><link>https://zenn.dev/oimo/articles/7c141304dd387c</link><guid isPermaLink="true">https://zenn.dev/oimo/articles/7c141304dd387c</guid><pubDate>Tue, 08 Oct 2024 13:49:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OBNiT9W5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otfw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OimO%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODY5NmM1ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OimO屋</dc:creator></item><item><title><![CDATA[CSS変数とJavaScriptを使って、アンカーリンクのジャンプ先の位置を柔軟に調整する]]></title><description><![CDATA[ウェブサイトでアンカーリンクを使用する際、固定ヘッダーがあると目的の位置に正確にジャンプできないことがあります。この問題を解決するために、CSS変数とJavaScriptを組み合わせた柔軟な方法を紹介します。

 解決策の概要

CSS変数を使ってデフォルトのアンカー位置調整値を設定
HTMLで個別の調整を可能にする
JavaScriptを使って動的にスタイルを適用


 コードと解説

 1. CSS
:root {
    --header-height: 4.125pc;
    --anchor: var(--header-height);
}

@media print, sc...]]></description><link>https://zenn.dev/sarap422/articles/6d1a5befc9a1ba</link><guid isPermaLink="true">https://zenn.dev/sarap422/articles/6d1a5befc9a1ba</guid><pubDate>Tue, 08 Oct 2024 13:13:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YvxyGFOH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CSS%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25A8JavaScript%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25A2%25E3%2583%25B3%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2581%25AE%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25B3%25E3%2583%2597%25E5%2585%2588%25E3%2581%25AE%25E4%25BD%258D%25E7%25BD%25AE%25E3%2582%2592%25E6%259F%2594%25E8%25BB%259F%25E3%2581%25AB%25E8%25AA%25BF%25E6%2595%25B4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sarap422%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sarap422</dc:creator></item><item><title><![CDATA[Next.js は React の型情報をどのように拡張しているのか]]></title><description><![CDATA[
 はじめに
Next.js 14 では React 19 で搭載予定の新機能がすでにサポートされており React 19 でなくとも利用することができます。
たとえば、useTransition フックは新しく非同期関数も扱えるようになりました。使い方はこちらの記事にて紹介しています。
https://zenn.dev/k0rosuke/articles/eab514e4920778#usetransition-フックを利用して処理中状態を管理する
この新機能自体は Next.js がサポートしてるので正常に動作するのはわかるのですが、型情報はどうでしょうか？
useTransitio...]]></description><link>https://zenn.dev/k0rosuke/articles/5895ff34364604</link><guid isPermaLink="true">https://zenn.dev/k0rosuke/articles/5895ff34364604</guid><pubDate>Tue, 08 Oct 2024 10:06:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wUwZOEVv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25AF%2520React%2520%25E3%2581%25AE%25E5%259E%258B%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E6%258B%25A1%25E5%25BC%25B5%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:korosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmODcxM2MxMTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>korosuke</dc:creator></item><item><title><![CDATA[電子公文書(XML+XSL)をChromeで表示する]]></title><description><![CDATA[
 電子公文書とは
電子公文書とは、電子的な形式で作成、保存、管理される公文書のことを指します。これには、政府機関や企業が発行する公式な文書が含まれます。電子公文書は、紙の文書と同様に法的効力を持つ場合があり、デジタル署名や暗号化技術を用いることで、その信頼性や安全性が確保されます。
この電子公文書の中には、XML+XSL 形式で作成されたものがあります。XML は、データを構造化して記述するためのマークアップ言語であり、XSL は、XML 文書を別の形式に変換するためのスタイルシート言語です。XML+XSL 形式の電子公文書は、Web ブラウザで表示することができますが、その表示方法に...]]></description><link>https://zenn.dev/sora_kumo/articles/xsl-viewer-html</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/xsl-viewer-html</guid><pubDate>Mon, 07 Oct 2024 23:51:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0yrXSzrN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259B%25BB%25E5%25AD%2590%25E5%2585%25AC%25E6%2596%2587%25E6%259B%25B8%2528XML%252BXSL%2529%25E3%2582%2592Chrome%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[【Vue2】Vuexライブラリのstoreオブジェクトで定義した値を取得する方法]]></title><description><![CDATA[
 はじめに
本記事は、Vuexライブラリのstoreオブジェクトを使用した状態管理の動作確認を正確かつ最速で行う方法を記載しています。

 対象者
・Vuexライブラリのstoreオブジェクトを使って動作確認をしたい方、
またはその方法を知りたい方
・Vuexやstoreについて詳しく知りたいという方はこちら
→ https://vuex.vuejs.org/ja/guide/state.html

 環境構築

 Vueプロジェクトの作成（今回はVue2を選択）
任意の場所（プロジェクトを作成したい階層）で下記コマンドを実行
"vue-store-learning"の部分は自由なネー...]]></description><link>https://zenn.dev/keita09/articles/666ee68e5b728f</link><guid isPermaLink="true">https://zenn.dev/keita09/articles/666ee68e5b728f</guid><pubDate>Mon, 07 Oct 2024 17:33:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gu1rFtQk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Vue2%25E3%2580%2591Vuex%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AEstore%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25A7%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2597%25E3%2581%259F%25E5%2580%25A4%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjZGUxZTY1NTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keita</dc:creator></item><item><title><![CDATA[JSR を 7 ヶ月使った好感と不満]]></title><description><![CDATA[7 ヶ月前にこんな記事を書きました。
https://zenn.dev/nakasyou/articles/20230301_jsr
公開当時は最高だと思い、この 7 ヶ月間新しいパッケージの公開に npm を使わずに、JSR のみを使用してきました。その際に、たくさんの好感、そして同時に不満も多く生まれたので、それを羅列していきたいです。

 👍
npm と比べていいことが一定数あります。批判だけするのはタチが悪いのでたくさん紹介していきます。

 TypeScript サポート
これ最高。
TypeScript パッケージを公開するとき、npm では

tsc や esbuild な...]]></description><link>https://zenn.dev/nakasyou/articles/jsr_7m_thoughts</link><guid isPermaLink="true">https://zenn.dev/nakasyou/articles/jsr_7m_thoughts</guid><pubDate>Mon, 07 Oct 2024 12:55:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DTBFLvQz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JSR%2520%25E3%2582%2592%25207%2520%25E3%2583%25B6%25E6%259C%2588%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25A5%25BD%25E6%2584%259F%25E3%2581%25A8%25E4%25B8%258D%25E6%25BA%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakasyou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NTAyNDNlNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakasyou</dc:creator></item><item><title><![CDATA[[javascript] nvmを使ってNode.js、npmをインストールする。]]></title><description><![CDATA[
 この記事を書くにあたって
Next.jsで自作WEBアプリを作るにあたり、初めにNodejsをインストールしました。
　その際に、今までnodenvを使っていましたが、現在はnvmというのも主流と耳にしたので今回はそちらの方法でインストールしました。今回インストールした方法を今後のメモ代わりとして残しておきたいと思ったので書き留めておきます。
以下の手順に従ってインストールを行います。

 1. nvmをインストール
まず、nvmを使ってNode.jsを管理できるようにします。
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm...]]></description><link>https://zenn.dev/yone5/articles/ee937929d52042</link><guid isPermaLink="true">https://zenn.dev/yone5/articles/ee937929d52042</guid><pubDate>Mon, 07 Oct 2024 09:37:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---a9Mw_wB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bjavascript%255D%2520nvm%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Node.js%25E3%2580%2581npm%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoneko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhN2NkNWJjNTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoneko</dc:creator></item><item><title><![CDATA[bolt.newで始める爆速Jamstackブログ制作（Next.js+microCMS）]]></title><description><![CDATA[!
生成AIを使うのに慣れていないので余計な指示などが多いですがご了承ください

bolt.newというフルスタックの生成AIを使って爆速でJamstackブログを作ろうという記事です。
bolt.newが何なのかは別で書いているのでこちらを御覧ください
https://zenn.dev/trpd/articles/58685060bffcda

 目標
Next.jsとmicroCMSを使ってJamstackブログを作り、Netlifyにデプロイするまでが今回の記事の目標です。
スタイリングにはTailwindCSS（ShadCN）を使います。
完成物
https://beamish-...]]></description><link>https://zenn.dev/trpd/articles/cfbd217c38dd7c</link><guid isPermaLink="true">https://zenn.dev/trpd/articles/cfbd217c38dd7c</guid><pubDate>Mon, 07 Oct 2024 07:34:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JWaRtRaO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:bolt.new%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E7%2588%2586%25E9%2580%259FJamstack%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E5%2588%25B6%25E4%25BD%259C%25EF%25BC%2588Next.js%252BmicroCMS%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TP%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljMmVjYTk4NzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TP</dc:creator></item><item><title><![CDATA[Pleasanterの施設予約で予約時間重複チェックをする]]></title><description><![CDATA[
 概要
タイトル通りです。
色々検索してみたのですが、プリザンター公式 Ch プリ生#14[1]「同じ施設を同じ時間に予約できないように」を、ほぼそのまま利用しました。

 変更点
私の環境では、サーバスクリプト上は GMT、DB の中身は JST になってしまい、想定通りに動作しませんでした。
そのため、JST に変換するコードを追加しています。
また、自レコードを除く所で、context.Id を使っていたのを、model.IssueId に変更しています。

 手順
サーバスクリプト次のコードを入れます。
条件は、作成前と更新前にチェックを入れます。
// 利用開始、利用終了の大...]]></description><link>https://zenn.dev/kondara/articles/pleasanter_facility_reservation_duplicate_check</link><guid isPermaLink="true">https://zenn.dev/kondara/articles/pleasanter_facility_reservation_duplicate_check</guid><pubDate>Mon, 07 Oct 2024 04:44:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--shDHO8qG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pleasanter%25E3%2581%25AE%25E6%2596%25BD%25E8%25A8%25AD%25E4%25BA%2588%25E7%25B4%2584%25E3%2581%25A7%25E4%25BA%2588%25E7%25B4%2584%25E6%2599%2582%25E9%2596%2593%25E9%2587%258D%25E8%25A4%2587%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2582%2593%25E3%2581%25A0%25E3%2582%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZWY0YmMzZmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こんだら</dc:creator></item><item><title><![CDATA[Pleasanterの施設予約でカレンダーViewを色分けする]]></title><description><![CDATA[
 概要
Pleasanter のテンプレートを利用して、「会議室利用申請」作成して会議室の管理ページを作った時、カレンダー View にすると全て同じ色で分かりずらいを解決します。
今回のカレンダータイプは、FullCalendar です。

 手順
前提として、テンプレートを利用して、「会議室利用申請」テーブルを作成したところから説明します。

「エディタ」&gt;「タイトル」&gt;「詳細設定」で、施設が初めに表示されるようにする
「スクリプト」に次のコードを追加する

$p.events.on_calendar_load = function () {
  // 会議室の色設定
...]]></description><link>https://zenn.dev/kondara/articles/pleasanter_facility_reservation_calendar_coloring</link><guid isPermaLink="true">https://zenn.dev/kondara/articles/pleasanter_facility_reservation_calendar_coloring</guid><pubDate>Mon, 07 Oct 2024 04:44:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Br6P5sm6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pleasanter%25E3%2581%25AE%25E6%2596%25BD%25E8%25A8%25AD%25E4%25BA%2588%25E7%25B4%2584%25E3%2581%25A7%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BCView%25E3%2582%2592%25E8%2589%25B2%25E5%2588%2586%25E3%2581%2591%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2582%2593%25E3%2581%25A0%25E3%2582%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZWY0YmMzZmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こんだら</dc:creator></item><item><title><![CDATA[カスタマイズ可能なテキスト変換ツールの実装]]></title><description><![CDATA[
 はじめに
Web開発やテキスト処理において、特定のパターンに基づいてテキストを変換する必要性は頻繁に発生します。今回は、JavaScriptを使用して柔軟で使いやすいテキスト変換ツールを実装する方法を紹介します。
https://code-plus.jp/gp/replace-text-multirules/

 主な機能

JSONベースの置換ルール
双方向変換（正変換と逆変換）
スペース（半角・全角）の可視化
クリップボードへの自動コピー


 コードの解説

 1. 置換ルールのパース
function parseReplacementRules(ruleText) {
  t...]]></description><link>https://zenn.dev/sarap422/articles/1af86ffb5ce928</link><guid isPermaLink="true">https://zenn.dev/sarap422/articles/1af86ffb5ce928</guid><pubDate>Mon, 07 Oct 2024 01:49:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hTncDloG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25BA%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E5%25A4%2589%25E6%258F%259B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sarap422%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sarap422</dc:creator></item><item><title><![CDATA[cluster スクリプトで作って学ぶ、JavaScript 入門]]></title><description><![CDATA[clusterスクリプトでギミック開発をしたい！だけど、JavaScript触ったことがないから何もわからない。という方向けに、作りながらJavaScriptを学ぶことができる本です。]]></description><link>https://zenn.dev/yuniyuni/books/javascript-tutorial-for-clusterscript-document</link><guid isPermaLink="true">https://zenn.dev/yuniyuni/books/javascript-tutorial-for-clusterscript-document</guid><pubDate>Sun, 06 Oct 2024 16:04:29 GMT</pubDate><dc:creator>慕狼ゆに</dc:creator></item><item><title><![CDATA[新しいSetメソッドたち]]></title><description><![CDATA[2024年7月にSetオブジェクトに便利なメソッドが追加されていましたが、
個人的にSetオブジェクトを使う意識が足りてなく、配列メソッドを使っていた場面があったので、自分への戒めとしてまとめました。

 新しく追加されたSetメソッド

intersection
union
difference
symmetricDifference
isSubsetOf
isSupersetOf
isDisjointFrom


 intersection
2つのSet間の共通要素を含む新しいSetを返します。
const setA = new Set([1, 2, 3, 4]);
const se...]]></description><link>https://zenn.dev/macchan/articles/6a7de38eacfeea</link><guid isPermaLink="true">https://zenn.dev/macchan/articles/6a7de38eacfeea</guid><pubDate>Sun, 06 Oct 2024 14:14:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ctk6ciqx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E3%2581%2597%25E3%2581%2584Set%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%259F%25E3%2581%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%2597%25E3%2582%2585%25E3%2582%258B%25E3%2583%25BC%25E3%2582%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjZWEyNTA4MmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まっしゅるーむ</dc:creator></item><item><title><![CDATA[【Premiere Pro】テキストを複数のそれぞれ別の文字列に置き換えて画像出力するスクリプト]]></title><description><![CDATA[「ファイル」→「スクリプト」→「参照」でJSXとして保存した以下のスクリプトを実行
PSDファイルを選択するダイアログで、ターゲットのPSDを選択したら自動で始まります
var inputFile = File.openDialog("PSDファイルを選択");
if (inputFile != null) {
    var doc = open(inputFile);

    var psdDirectory = inputFile.path;

    // 置き換え先のテキスト
    var replacements = ["Text1", "Text2", "Text3"]...]]></description><link>https://zenn.dev/glisan/articles/3dc65e920d88e3</link><guid isPermaLink="true">https://zenn.dev/glisan/articles/3dc65e920d88e3</guid><pubDate>Sun, 06 Oct 2024 13:18:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3c5-1nGI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Premiere%2520Prow_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2589%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M0MzU1YzBlZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>グリッサンド。</dc:creator></item></channel></rss>