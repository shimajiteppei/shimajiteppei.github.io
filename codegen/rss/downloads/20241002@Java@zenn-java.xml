<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 02 Oct 2024 11:34:36 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[クソコードを読む上でのコールスタックの重要性]]></title><description><![CDATA[
 はじめに
プログラミングをしていると、どうしても「クソコード」に出会うことがあります。メンテナンス性が低く、可読性が悪いコードを静的に読んで理解しようとすると、多くのエンジニアが頭を抱えます。そんなときに役立つのが「コールスタック」です。これをうまく活用すれば、クソコードのバグや問題箇所を効率的に見つけ出し、解決に導くことができます。
この記事では、コールスタックの基本的な説明と、それがクソコードの理解にどのように役立つかを解説します。

 コールスタックとは
コールスタックは、プログラムが実行される中で関数やメソッドの呼び出し順序を管理するメモリ領域です。各関数が呼び出されるたびに...]]></description><link>https://zenn.dev/tonbi_attack/articles/3f885f502e006f</link><guid isPermaLink="true">https://zenn.dev/tonbi_attack/articles/3f885f502e006f</guid><pubDate>Tue, 01 Oct 2024 14:15:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fR40ed_M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AF%25E3%2582%25BD%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2580%25E4%25B8%258A%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E9%2587%258D%25E8%25A6%2581%25E6%2580%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tonbiattack%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhZGQ4MThjYjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tonbiattack</dc:creator></item><item><title><![CDATA[Java23の新機能を学ぶ]]></title><description><![CDATA[Java23でJavaDocがMarkdownで書けるという噂を耳にし、これを機に新機能を学んでみる。
（Java23と銘打ってはいるが、実際にはもっと前のバージョンでプレビュー機能になったものも多い。）

 Java23について
https://www.oracle.com/jp/news/announcement/oracle-releases-java-23-2024-09-17/
2024/9/17にリリースされ、すでにAmazon Correttoなどのディストリビューションで利用可能のようだ。
プレスリリース内に登場する単語を調べてみる。

Project Amber
htt...]]></description><link>https://zenn.dev/nadg/articles/4202b4027ae7dd</link><guid isPermaLink="true">https://zenn.dev/nadg/articles/4202b4027ae7dd</guid><pubDate>Mon, 30 Sep 2024 18:12:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--y5uOqzo9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java23%25E3%2581%25AE%25E6%2596%25B0%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nadg%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmVzaE93WlJUMXRvN2FjMHR2TWFzSzBsSnpkM2RGMmFMUlU4V2dLbEczbnRwMFJnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nadg</dc:creator></item><item><title><![CDATA[Javaの歴史と仕様概要]]></title><description><![CDATA[こんにちは、$@(ダラ～っと)です(๑Ò﹃ Ó๑)ゝ

 はじめに
諸般の事情で、Javaの案件に携わり続けることになったので、基本的なところから勉強しなおそうかと思い立ちました。
今更！？ってことが多いと思うところもあるだろうけど、備忘録がてらストックしていこうと思います。

 何がわかる？

Javaの歴史（概要）
Javaの仕様


 Javaの歴史（概要）
Javaの歴史を時系列でまとめると、以下のようになります。

 時系列

1995年 - Java 1.0 リリース
1998年 - Java 2（J2SE、J2EE、J2ME）の登場。JCP設立
1999年 - 最初の JS...]]></description><link>https://zenn.dev/splusl_at/articles/java-history-specification</link><guid isPermaLink="true">https://zenn.dev/splusl_at/articles/java-history-specification</guid><pubDate>Mon, 30 Sep 2024 08:51:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9c9U-nYT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E6%25AD%25B4%25E5%258F%25B2%25E3%2581%25A8%25E4%25BB%2595%25E6%25A7%2598%25E6%25A6%2582%25E8%25A6%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2580%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25A3%25E3%2581%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUxMTIyMzVhYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ダラーっと</dc:creator></item><item><title><![CDATA[Intellijを使用して上手に問題に対処する方法]]></title><description><![CDATA[
 はじめに
このページは、
普段バックエンドのコードを書いてる私が何か問題が発生したときにJetbrainsのIDEを使用して速やかに発生元を突き止め、対処する方法を書いたものです。
言い換えると、問題が起きたときにコードを眺める際の私のルーチンワークを紹介します。
Java、Kotlin、PHPしか仕事では使わないので他は不明ですが、多分一緒です。
これを書いてる端末がmacなのでキーはmacです。
graphql-kotlinのコードを使いながら書いていこうと思います。

 なぜ書くのか
問題が発生したときに、その機能の入口からコードに潜る人を観測したため。
入口から特定しに行くな...]]></description><link>https://zenn.dev/moneyforward/articles/df0b1f8199aa81</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/df0b1f8199aa81</guid><pubDate>Mon, 30 Sep 2024 06:25:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MTgpyuJr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Intellij%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E4%25B8%258A%25E6%2589%258B%25E3%2581%25AB%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25AB%25E5%25AF%25BE%25E5%2587%25A6%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sh-ogawa%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dQMUxWY0xrRDB3M0E3clJtNWdQRWxmUVA2aDBUdjdDakpoLXRQU3c9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sh-ogawa</dc:creator></item><item><title><![CDATA[SpringBoot３(最新版）➀]]></title><description><![CDATA[A.Springでの開発方法
1.Spring Boot CLI
コマンドベースの開発
2.Spring Boot Suite
EclipseやVscode
3.Spring Initializer
サイトでプロジェクトを作成してくれる
→解凍して使用（よくつかう）
B.プロジェクト作成後のpom.xmlについて
→
　　&lt;parent&gt;
&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
...]]></description><link>https://zenn.dev/koounosuke/articles/eb1071cf348ada</link><guid isPermaLink="true">https://zenn.dev/koounosuke/articles/eb1071cf348ada</guid><pubDate>Mon, 30 Sep 2024 05:55:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pMoUd-j7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot%25EF%25BC%2593%2528%25E6%259C%2580%25E6%2596%25B0%25E7%2589%2588%25EF%25BC%2589%25E2%259E%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JavaJava%25E7%2594%25B7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHBqUDlLS2pjOGRlQ050RUQyVmYyOEZZVUU0TWFkQVZoRS1GNXpDLXd3YmJnYXZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JavaJava男</dc:creator></item><item><title><![CDATA[【Spring for GraphQL】Uploadされたファイルを受け取りたい]]></title><description><![CDATA[
 概要
GraphQLではスキーマにUploadの型を設定して、ファイルをアップロードするような手法を取ると思いますが、Spring for GraphQLでファイルをどのように受け取るかというメモ書きです。

 対応方針
Spring for GraphQLのServer Transportsのドキュメントによると、2024年9月時点では標準の機能では対応してなさそうです。別途multipart-spring-graphqlを使用するように案内されているので、今回はこのライブラリを使用します。

 前提等

使用したspring-boot-starter-graphqlのバージョンは...]]></description><link>https://zenn.dev/someone7140/articles/b35ed738b56a84</link><guid isPermaLink="true">https://zenn.dev/someone7140/articles/b35ed738b56a84</guid><pubDate>Fri, 27 Sep 2024 12:08:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B6pcq9fs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Spring%2520for%2520GraphQL%25E3%2580%2591Upload%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E5%258F%2596%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A4%25E3%2581%258C%25E3%2582%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhNWRlOTE4YjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>なかつがわ</dc:creator></item><item><title><![CDATA[Java プログラム開発時に知っておきたい IDE 4選 - 2024年度版]]></title><description><![CDATA[
 はじめに
Java プログラム開発時に知っておきたい IDE (統合開発環境) について、選択肢としては下記があります。

Visual Studio Code
Eclipse IDE
JetBrains IntelliJ IDEA Community Edition
Apache NetBeans

Visual Studio Code (VS Code) は高機能エディタですが拡張機能を利用することで IDE 相当のものとして使えるようになります。Java 専用の IDE の方が使い勝手が良く、高機能ですが、普段から VS Code を使っている人の場合は、本格的な Java プ...]]></description><link>https://zenn.dev/hiro345/articles/20240926_java_ide</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20240926_java_ide</guid><pubDate>Thu, 26 Sep 2024 23:23:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GxeZkBqr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%25E6%2599%2582%25E3%2581%25AB%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258D%25E3%2581%259F%25E3%2581%2584%2520IDE%25204%25E9%2581%25B8%2520-%25202024%25E5%25B9%25B4%25E5%25BA%25A6%25E7%2589%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[Java 本番環境デプロイ手順書]]></title><description><![CDATA[本書は、Javaアプリケーションを本番環境にデプロイする際の標準的な手順を解説することを目的としています。
JAR、WARファイル、クラスファイルを使用したデプロイ方法を中心に、コンテナ技術やクラウドベースのデプロイも少し解説します。]]></description><link>https://zenn.dev/teru_whisky/books/4f6edb84657449</link><guid isPermaLink="true">https://zenn.dev/teru_whisky/books/4f6edb84657449</guid><pubDate>Thu, 26 Sep 2024 15:46:09 GMT</pubDate><dc:creator>taiki</dc:creator></item><item><title><![CDATA[javaを11.0.6→17にアップデートする]]></title><description><![CDATA[自分のjavaバージョンを調べる
java -version
openjdk 11.0.6とでました。
ZuluとはAzul Systemsは、OpenJDKというjavaのオープンソース版を独自にビルドして配布しているOpenJDKのバージョンです。OpenJDK（Java Development Kit）とはそのままで、無料で誰でも使えるJavaを動かすための開発ツールです。なのでZuluという開発キットを使用してjavaで開発しているということ。使用しているJDKはなんですかと聞かれたらZuluと答えます。
openjdk 11.0.6 2020-01-14 LTS
OpenJDK...]]></description><link>https://zenn.dev/tarakosuziko/articles/54c134cafec2b9</link><guid isPermaLink="true">https://zenn.dev/tarakosuziko/articles/54c134cafec2b9</guid><pubDate>Thu, 26 Sep 2024 01:55:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bKOzToxp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:java%25E3%2582%259211.0.6%25E2%2586%259217%25E3%2581%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2581%2593%25E3%2582%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YmMwQ010MmRRUU1vQnpreHlmampLenE3ZVpxc2dXQzdTYWtrREVOUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おこめ</dc:creator></item><item><title><![CDATA[【Java】StringUtilsのメソッドが便利だった件]]></title><description><![CDATA[
 概要
こんにちは！
本日はコードレビューで教わったJavaのtipsを書いてみます。
Javaを数年書いてるのに知らなかったので、
その念も込めた記事です笑

 StringUtilsについて
StringUtilsはString型の文字列操作で様々な操作ができるメソッドです！
レビューで教わった際もそうだったのですが、例えば
nullチェックが不要になる考慮があったりします。
公式サイト↓
https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html
...]]></description><link>https://zenn.dev/railgun0402/articles/cdb484365a51a0</link><guid isPermaLink="true">https://zenn.dev/railgun0402/articles/cdb484365a51a0</guid><pubDate>Wed, 25 Sep 2024 16:52:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LNkvpYgR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591StringUtils%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%258C%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%2581%25E3%2581%2597%25E3%2581%25B0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjMmIxMzk5NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まめしば</dc:creator></item><item><title><![CDATA[SpringBoot Mapperを使ってみた]]></title><description><![CDATA[
 SpringBootのMapper：効率的なデータベース操作の鍵
SpringBootを使用する開発者にとって、効率的なデータベース操作は常に重要な課題です。その中で、Mapperインターフェースは特に注目に値する機能です。簡潔な記述で複雑なSQLクエリを扱える点が、多くの開発者から高く評価されています。

 Mapperとは
Mapperは、Javaオブジェクトとデータベーステーブルをマッピングするインターフェースです。主にMyBatisというO/Rマッパーと併用されることが多く、SQLの記述とJavaコードの統合を簡略化します。

 基本的な使用方法
以下は、Mapperの基本的...]]></description><link>https://zenn.dev/mumin0101/articles/ced5ea63442c61</link><guid isPermaLink="true">https://zenn.dev/mumin0101/articles/ced5ea63442c61</guid><pubDate>Tue, 24 Sep 2024 01:07:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GXhqllUk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot%2520Mapper%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BA%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1ZGM2ODI5NjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぺっくる</dc:creator></item><item><title><![CDATA[RSA暗号化したデータの解読のためにJavaで細かく復号してみた]]></title><description><![CDATA[
 はじめに
以前「RSA暗号化してデータを送信してるんだけど、送信先が不正データとして扱うので原因調査して」という依頼がありました。
「そんなの分かるわけないだろ…」と思いながら試行錯誤していくと結果として解決できましたので、その思考/試行の流れを記載します。
ちなみに以下が前提になります。

RSA暗号化は言語に付属するモジュールではなく独自のコードで行っている。
RSA暗号化用コードは渡されているので公開鍵と適当なテキストを与えてRSA暗号化されたテキストを出力させることはできる。
残念ながらRSA暗号化用コードからは原因を読み取れなかった。


 調査方針

 本題の前に
調査方...]]></description><link>https://zenn.dev/markhammer/articles/rsa-decrypt-java</link><guid isPermaLink="true">https://zenn.dev/markhammer/articles/rsa-decrypt-java</guid><pubDate>Mon, 23 Sep 2024 16:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QW7XOxWJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RSA%25E6%259A%2597%25E5%258F%25B7%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E8%25A7%25A3%25E8%25AA%25AD%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25ABJava%25E3%2581%25A7%25E7%25B4%25B0%25E3%2581%258B%25E3%2581%258F%25E5%25BE%25A9%25E5%258F%25B7%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mark%2520Hammer%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhMThhYjdhMjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mark Hammer</dc:creator></item><item><title><![CDATA[java基礎2(真偽/条件分岐/繰り返し/配列[拡張for文]など)]]></title><description><![CDATA[前回の続き
https://zenn.dev/takeda_kaho/articles/722773658cf662

 ⑤真偽値と条件式（比較演算子、論理演算子など）

 真偽値
使うのはboolean型！！結果は(true)か(false)
boolean 変数名　= true; //もしくはfalse

 比較演算子
比較演算子とは、値を比較するための記号で、比較した結果は真偽値（trueかfalse）になります。
「x == y」はxとyが同じかどうかを比較し、同じであればtrue、違っていればfalseとなります。
x == y //等しいかどうか
x != y //等しくない...]]></description><link>https://zenn.dev/takeda_kaho/articles/0e83191f9104f6</link><guid isPermaLink="true">https://zenn.dev/takeda_kaho/articles/0e83191f9104f6</guid><pubDate>Mon, 23 Sep 2024 09:19:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JoXrdBYW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:java%25E5%259F%25BA%25E7%25A4%258E2%2528%25E7%259C%259F%25E5%2581%25BD%252F%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%252F%25E7%25B9%25B0%25E3%2582%258A%25E8%25BF%2594%25E3%2581%2597%252F%25E9%2585%258D%25E5%2588%2597%255B%25E6%258B%25A1%25E5%25BC%25B5for%25E6%2596%2587%255D%25E3%2581%25AA%25E3%2581%25A9%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takepanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxZWRlZDIyZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takepanda</dc:creator></item><item><title><![CDATA[型クラスパターン]]></title><description><![CDATA[
 型クラスパターンとは
型クラスパターンは、KotlinやJavaのようなインターフェースを使う言語において、Scala, Rust, Haskellなどで使われる型クラスの利点を得る手法です。
これから紹介する型クラスパターンは、単にインターフェースを使う場合に比べて、次のような利点があります。

特定のstatic関数を持つことを抽象化できる

ファクトリーメソッドや型変換など


既存の型に対しても抽象化を適用できる

プリミティブな型やライブラリによって提供される型など



!
型クラスを言語機能として持つ言語は通常インターフェースを持ちませんが、型クラスパターンはインターフ...]]></description><link>https://zenn.dev/esnir/articles/typeclass-pattern</link><guid isPermaLink="true">https://zenn.dev/esnir/articles/typeclass-pattern</guid><pubDate>Mon, 23 Sep 2024 07:52:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jVA39yNi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%25E3%2581%2599%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwNzU3NzQ4MGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りんす</dc:creator></item><item><title><![CDATA[Spring Boot + logstash-logback-encoderで、ログにGitコミットハッシュを出力する]]></title><description><![CDATA[
 環境

Spring Boot 3.3
JDK 21
logback-logstash-encoder 8.0
git-commit-id-maven-plugin


 やりたいこと
本番環境のアプリがどのバージョンなのかを知るために、全ログにGitコミットハッシュを追加したいです。

ログの例
{"@timestamp":"2024-09-23T16:07:51.484848+09:00","@version":"1","message":"アクセスがありました。","logger_name":"com.example.HelloController","thread_name"...]]></description><link>https://zenn.dev/masatoshi_tada/articles/7c943497d9b76b</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/7c943497d9b76b</guid><pubDate>Mon, 23 Sep 2024 07:33:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OCNzmimc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%252B%2520logstash-logback-encoder%25E3%2581%25A7%25E3%2580%2581%25E3%2583%25AD%25E3%2582%25B0%25E3%2581%25ABGit%25E3%2582%25B3%25E3%2583%259F%25E3%2583%2583%25E3%2583%2588%25E3%2583%258F%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%2592%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[コンポーネントの凝集性に関する原則　全再利用の原則とは?]]></title><description><![CDATA[
 背景
全再利用の原則は、コンポーネントの凝集性に関する原則です。この原則を守ることで、不要なデプロイを避けることが可能となります。

 全再利用の原則とは?
私が読んだ書籍では、以下のように定義されていました。
「コンポーネントのユーザーに対して、実際には使わないものへの依存を強要してはいけない。」（ロバート・C・マーチン, 2018, 『Clean Architecture 達人に学ぶソフトウェアの構造と設計』, 翔泳社, p.140）
この原則は、使用されるクラスや機能だけを一つのコンポーネントにまとめ、使われないクラスや機能は別のコンポーネントに分けるべきというものです。これに...]]></description><link>https://zenn.dev/bananauyu/articles/f3740b2bb0fb7c</link><guid isPermaLink="true">https://zenn.dev/bananauyu/articles/f3740b2bb0fb7c</guid><pubDate>Sun, 22 Sep 2024 03:37:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_OGE8PrS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E5%2587%259D%25E9%259B%2586%25E6%2580%25A7%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E5%258E%259F%25E5%2589%2587%25E3%2580%2580%25E5%2585%25A8%25E5%2586%258D%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%25E3%2581%25A8%25E3%2581%25AF%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B0%25E3%2581%25AA%25E3%2581%25AA%25E3%2581%2586%25E3%2582%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg1N2MwMjVjOGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ばななうゆ</dc:creator></item><item><title><![CDATA[【Java】 HashSet、TreeSet、LinkedHashSet、EnumSetの解説]]></title><description><![CDATA[Javaのセットコレクションは、重複を許さない一意の要素を扱うために設計されている。この解説では、HashSet、TreeSet、LinkedHashSet、EnumSet の概要、ユースケース、具体例、負荷テストの速度、そしてそれぞれの違いを詳しく説明する。

 HashSet
HashSet は最も基本的なセットの一種で、順序を保証せず、要素を一意に保持する。高速なアクセスが可能で、内部で HashMap を利用してデータを管理している。

 ユースケース
高速な要素の検索・追加: 順序が不要で、重複のないデータを効率的に管理したい場合に最適である。
集合演算: 他のセットとの和・積...]]></description><link>https://zenn.dev/tya0116/articles/7fc876c9a679d7</link><guid isPermaLink="true">https://zenn.dev/tya0116/articles/7fc876c9a679d7</guid><pubDate>Sat, 21 Sep 2024 17:27:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ox9iuw5o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%2520HashSet%25E3%2580%2581TreeSet%25E3%2580%2581LinkedHashSet%25E3%2580%2581EnumSet%25E3%2581%25AE%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2582%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3lQYktVNVhIdW9fVWZLdVJyNjNIVnR1cjhjNDUxbHZfQ3Y4YjJ5c1JWT1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちゃ</dc:creator></item><item><title><![CDATA[[Android] Javascript Interface]]></title><description><![CDATA[
 Javascript Interfaceとは？
スマホアプリ内にウェブページを埋め込むwebViewを使う際、
フロントエンドのコードがスマホアプリのネイティブコードを叩く手段が提供されている。
それがJavascriptInterface

 使い方導入

 kotlin実装
class MyJavascriptInterfaces {
    @JavascriptInterface
    fun hello(){
        Log.i("webViewApp", "Hello, World")
    }
}
というJavascript Interfaceを搭載したクラ...]]></description><link>https://zenn.dev/holndal/articles/056541ef383f6c</link><guid isPermaLink="true">https://zenn.dev/holndal/articles/056541ef383f6c</guid><pubDate>Sat, 21 Sep 2024 02:26:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aVSS591T--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%255BAndroid%255D%2520Javascript%2520Interface%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:holndal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmODIzYzU4MGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>holndal</dc:creator></item><item><title><![CDATA[Java開発環境をVS Codeで用意する]]></title><description><![CDATA[
 経緯
javaに触れる事になり開発環境を調べるとeclipse等が散見されたが
使い慣れたエディターで開発したくVSCodeでの環境構築をする事にしました。
!
java初学者により至らない点があると思いますので間違いあればコメント頂けますと幸いです


 実行環境

macOS M3
JDK 23


 1. JDKのインストール
https://www.oracle.com/java/technologies/downloads/

 インストール確認
ターミナルから以下のコマンドを実行
java -version
以下の様に表示されていればインストール完了

xxx@MacBo...]]></description><link>https://zenn.dev/w4_3nd0/articles/57b900c98ef549</link><guid isPermaLink="true">https://zenn.dev/w4_3nd0/articles/57b900c98ef549</guid><pubDate>Fri, 20 Sep 2024 04:50:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BbhfrUgY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592VS%2520Code%25E3%2581%25A7%25E7%2594%25A8%25E6%2584%258F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:gyoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTFA3aTNROWJhOU1sbGVOQXlBU0xjbjB3Tzc0VEhMLUYzNnJxSTNyUXVkbkFzMkRRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>gyoza</dc:creator></item><item><title><![CDATA[Javaのフレームワークを使用せずに、キューを連結リストで実装]]></title><description><![CDATA[便利なフレームワークがたくさんありますが、今回は基礎理解のためにキューを連結リストで自前実装しました。
フレームワークの連結リストを使用してしまった方が、簡単で早いのですが内部で何が起こっているのかがわからずブラックボックス化していたので、、、
私と同じように学習目的であれば自前実装をお勧めしますが、手間がかかる上に長年をかけて最適化されているフレームワークを超えることは難しいので、学習目的以外では普通にフレームワークを使用した方がいいかなと思います。
以下の実装でスムーズにいかなかった点はまた後日記載しようと思います。

 今回実装した連結リストによるキュー
// ノードクラス
cla...]]></description><link>https://zenn.dev/tech_mico/articles/aae09ebe209126</link><guid isPermaLink="true">https://zenn.dev/tech_mico/articles/aae09ebe209126</guid><pubDate>Mon, 16 Sep 2024 04:19:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HYu7yvVI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%259B%25E3%2581%259A%25E3%2581%25AB%25E3%2580%2581%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%2592%25E9%2580%25A3%25E7%25B5%2590%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techmico%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxMTBhYmRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techmico</dc:creator></item></channel></rss>