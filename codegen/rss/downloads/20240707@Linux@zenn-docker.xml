<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/01c7f20365.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 07 Jul 2024 08:56:30 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dockerfile の ENV と ARG はどっちも環境変数を設定する]]></title><description><![CDATA[
 はじめに
Dockerfile には環境変数を設定するための ENV と言うまんまの名前の命令があるが、実は ARG 命令も環境変数を設定する。
これは割と良く知られた話だと思っていたんだが、世の中の Dockerfile を見ていると実は思ったほど知られていないんじゃないかと思うことが度々あったので、極めて基本的な事ではあるが記事としてまとめておこうと思う。

 ENV と ARG はどっちも環境変数を設定する
論より証拠。まずは ENV で試してみる。Dockerfile はこんな感じ。

Dockerfile.env
FROM alpine
ENV MSG=message
RU...]]></description><link>https://zenn.dev/kariya_mitsuru/articles/5e9237ce1d4b53</link><guid isPermaLink="true">https://zenn.dev/kariya_mitsuru/articles/5e9237ce1d4b53</guid><pubDate>Sun, 07 Jul 2024 02:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h9hoUyBv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%2520%25E3%2581%25AE%2520ENV%2520%25E3%2581%25A8%2520ARG%2520%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2582%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258A%25E3%2582%2584%25E3%2581%25BF%25E3%2581%25A4%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かりやみつる</dc:creator></item><item><title><![CDATA[Testcontainers for NodeJS を Docker in Dokcer環境でRedisやPrismaを試す]]></title><description><![CDATA[
 Testcontainers とは
https://testcontainers.com/

Testcontainersは、統合テストやエンドツーエンドテストのために、データベース、メッセージブローカー、ウェブブラウザなどの軽量で使い捨てのDockerコンテナインスタンスを提供するオープンソースフレームワークです。


 Testcontainers for NodeJS
https://node.testcontainers.org/
Testcontainersは色んな言語に対応しています。今回はその中のNodeJSを試してみたいと思います。

 Docker in Docke...]]></description><link>https://zenn.dev/slowhand/articles/3bc1da7ed5e698</link><guid isPermaLink="true">https://zenn.dev/slowhand/articles/3bc1da7ed5e698</guid><pubDate>Sat, 06 Jul 2024 21:24:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YPrNT8CM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Testcontainers%2520for%2520NodeJS%2520%25E3%2582%2592%2520Docker%2520in%2520Dokcer%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7Redis%25E3%2582%2584Pris...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:slowhand%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwY2YzMGUzMDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>slowhand</dc:creator></item><item><title><![CDATA[アップデートされたWSL2を使用して、WSL2上のDocker-CEは快適になるか]]></title><description><![CDATA[
 はじめに
ライセンス変更の話からずいぶん経ち、Docker Desktop の話題も落ち着いたように見えます。仕事で使っている場合には色々と大変だったと思いますが、今も個人で利用する範囲では Docker Desktop を無料で使えます。
本記事ではDocker Desktopを使わずに、WSL2 (Windows Subsystem for Linux 2)を使用して環境を作ります。何番煎じだろうかという話でもありますが、WSL2に入った新機能などで従来よりも使い勝手がよくなったのかを確認してみました。個人的に、当時の制約から解放されて便利になったのではという期待がありました

...]]></description><link>https://zenn.dev/techmadot/articles/wsl2-docker-env-2024</link><guid isPermaLink="true">https://zenn.dev/techmadot/articles/wsl2-docker-env-2024</guid><pubDate>Sat, 06 Jul 2024 07:40:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TYm1H-Yg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2595%25E3%2582%258C%25E3%2581%259FWSL2%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581WSL2%25E4%25B8%258A%25E3%2581%25AEDocker-CE%25E3%2581%25AF%25E5%25BF%25AB%25E9%2581%25A9%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2581%25A3%25E3%2581%258F%25E3%2581%25BE.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlpxVEo0c3J4M01zWWVnbzM3V3VBMEN5bmRrTkpOMGk4MExIeFk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てっくま.</dc:creator></item><item><title><![CDATA[Dockerで開発したGoアプリケーションをRenderでデプロイする]]></title><description><![CDATA[
 はじめに
こんにちは！mizukoです！
先日PaPutという個人開発のサービスをβ版としてリリースしました！
バックエンドのリリースにRenderを利用しているのですが、意外とGo&amp;Dockerのruntimeでデプロイしている情報が少なかったので、せっかくならアウトプットしていきたいと思います！
PaPutについてはぜひこちらをご覧いただけますと幸いです🤗

 この記事で扱わないこと

Renderの基本的な使い方

Blueprintでのデプロイ方法など




 render.yaml
いきなり結論ですが、以下Blueprintの構成になります。
version: "...]]></description><link>https://zenn.dev/mizuko_dev/articles/b44ccf3b088c40</link><guid isPermaLink="true">https://zenn.dev/mizuko_dev/articles/b44ccf3b088c40</guid><pubDate>Sat, 06 Jul 2024 05:00:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xM_KzHDy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%259FGo%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592Render%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljOGMwOTFlZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuko</dc:creator></item><item><title><![CDATA[【初学者向け】Dockerネットワークの基礎]]></title><description><![CDATA[
 はじめに
今回は、Dockerのネットワークについて説明します。
!
もし誤解や間違いがあれば、ぜひコメントなどでご指摘していただけると助かります。


 私の動作環境

Docker Desktop 4.30.0 (149282)
Docker Engine 26.1.1
Docker Compose v2.27.0-desktop.2
MacOS Sonoma 14.5


 Dockerコマンド一覧
Dockerのコマンド一覧は、以下のサイトに記載されています。このサイトは、Docker公式ドキュメントを有志の方々が日本語に翻訳してくれているものです。
https://docs...]]></description><link>https://zenn.dev/joho0724/articles/sankaku0724-newcreate20</link><guid isPermaLink="true">https://zenn.dev/joho0724/articles/sankaku0724-newcreate20</guid><pubDate>Sat, 06 Jul 2024 03:02:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lD2zQEjg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Docker%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2582%2593%25E3%2581%258B%25E3%2581%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JkODI3MDRjMmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さんかく</dc:creator></item><item><title><![CDATA[Linux 使いになりたい人向けの Intel N100 ミニ PC で構築する開発環境（１１）- Docker]]></title><description><![CDATA[
 はじめに
これは、Linux 使いになりたい人向けに Intel N100 ミニ PC を使って開発環境を構築する方法を解説する記事の第１１弾です。第１弾はLinux 使いになりたい人向けの Intel N100 ミニ PC で構築する開発環境（１） - 構築する開発環境について にあり、そこから第２弾へと続いています。そちらからご覧ください。
ここで使用する Intel N100 ミニ PC の仕様は次のものを前提とします。



項目
内容




OS
Windows 11 Pro


CPU
Intel N100


メモリ
16GB


ストレージ
SSD 512 GB

...]]></description><link>https://zenn.dev/hiro345/articles/n100_11_20240630</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/n100_11_20240630</guid><pubDate>Sat, 06 Jul 2024 00:10:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ltTXrKvg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%2520%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E4%25BA%25BA%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AE%2520Intel%2520N100%2520%25E3%2583%259F%25E3%2583%258B%2520PC%2520%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25EF%25BC%2588%25EF%25BC%2591%25EF%25BC%2591%25EF%25BC%2589-%2520Docker%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[M2 MacでビルドしたDockerコンテナをAWS App Runnerにデプロイすると失敗する]]></title><description><![CDATA[
 はじめに
タイトルの通り、Docker化したNode.jsサーバをローカルでビルドし、ECRにプッシュ。その後そのイメージをApp Runnerにデプロイしようとしたところ失敗しました。

 結論
DockerイメージとApp Runnerのプラットフォームでアーキテクチャのズレがあったのが原因でした。
私の使用しているM2 MacbookのCPUアーキテクチャはlinux/arm64で、何も指定せずdocker buildを行うとlinux/arm64でビルドされます。
かたや、App Runnerのアーキテクチャはlinux/amd64にしか対応していないそうです。
このアーキテ...]]></description><link>https://zenn.dev/ymgcst/articles/38ef95fe4ef1bf</link><guid isPermaLink="true">https://zenn.dev/ymgcst/articles/38ef95fe4ef1bf</guid><pubDate>Fri, 05 Jul 2024 16:28:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XCDLMcnz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:M2%2520Mac%25E3%2581%25A7%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%2597%25E3%2581%259FDocker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%2592AWS%2520App%2520Runner%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E5%25A4%25B1%25E6%2595%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2590%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXFYa2EtMG1lSXpvN2t6Zjduc0JmS2V0SktaOUpzZjE1NGRzOUs2bUliZ1RWYT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぐ</dc:creator></item><item><title><![CDATA[LangChain、FastAPI、Reactを使用してシンプルなチャットボットを作成する]]></title><description><![CDATA[LangChain、FastAPI、Reactを使用してシンプルなチャットボットを作成しながら、APIやReactの実践的な使い方を学びましょう。
この記事では、フロントエンドのUIをReactで構築し、チャットボットのロジックを実行するサーバーをPythonのFastAPIとDockerを使用して構築する方法を詳しく解説します。

 今回作成するアプリ


ソースコード：[ソースコードのURL]

完成品：[完成されたアプリのURL]

今回作成するアプリは、二つの入力フィールドを持つシンプルなチャットボットです。一つのフィールドにはOpenAIのAPIキーを入力し、もう一つのフィール...]]></description><link>https://zenn.dev/onikarubi/articles/4712175afeecd3</link><guid isPermaLink="true">https://zenn.dev/onikarubi/articles/4712175afeecd3</guid><pubDate>Fri, 05 Jul 2024 08:31:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l63Tl3C1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangChain%25E3%2580%2581FastAPI%25E3%2580%2581React%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2583%259C%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:onikarubi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkYTlkNTc3YzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>onikarubi</dc:creator></item><item><title><![CDATA[【Go】環境毎の設定値運用戦略]]></title><description><![CDATA[
 はじめに
こんにちは！mizukoです！
先日PaPutという個人開発のサービスをβ版としてリリースしました！
その際、今後の個人開発ライフのために、基盤作りを行ったのですが、
環境毎の設定値運用の戦略も検討したので、アウトプットしていきたいと思います！
PaPutについてはぜひこちらをご覧いただけますと幸いです🤗

 戦略
環境毎の設定値を運用するにあたり、以下方針で運用していきます。

.envやtomlを使わず、環境変数を利用する
ローカル開発では.envrcを使う
本番環境では、ホスティングサービスやIaaSで環境変数を扱えるサービスを選ぶ
デプロイはGithubと連携し自動...]]></description><link>https://zenn.dev/mizuko_dev/articles/1021ad55cfb4dc</link><guid isPermaLink="true">https://zenn.dev/mizuko_dev/articles/1021ad55cfb4dc</guid><pubDate>Fri, 05 Jul 2024 06:55:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Mo9YsttR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Go%25E3%2580%2591%25E7%2592%25B0%25E5%25A2%2583%25E6%25AF%258E%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E5%2580%25A4%25E9%2581%258B%25E7%2594%25A8%25E6%2588%25A6%25E7%2595%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljOGMwOTFlZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuko</dc:creator></item><item><title><![CDATA[Docker: dind]]></title><description><![CDATA[Docker について。
Docker-in-Docker ( dind ) の container 内から Host への接続について残す。毎回、何だっけ？となるため。
泥水をすするような仕事を繰り返すのは避けたい。

 tl;dr


--network="host" コンテナ内でホスト側ネットワーク・スタックを使用する。 [1]



 Create a dind
# example
docker run --name mysql-container-4 --network="host" -e MYSQL_ROOT_PASSWORD=rootpassword -d mysql:la...]]></description><link>https://zenn.dev/dannya/articles/4d6b774a8fb46c</link><guid isPermaLink="true">https://zenn.dev/dannya/articles/4d6b774a8fb46c</guid><pubDate>Fri, 05 Jul 2024 06:33:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zKpApGYD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:Docker%253A%2520dind%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daisuke%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiNDY0NzBmMTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daisuke Yamamoto</dc:creator></item><item><title><![CDATA[さくっとDockerを使ってFirebase エミュレータのAuthenticationで認証を試す]]></title><description><![CDATA[
 はじめに
株式会社バニッシュ・スタンダードでエンジニアをしております、chanponと申します。最近、Firebaseを触る機会があり、Firebaseエミュレータの構築について学びましたので、その経験を共有したいと思います。この記事では、Dockerを使ってFirebaseエミュレータを立ち上げ、Authenticationを利用したユーザーの登録から認証までの流れを紹介します。
https://firebase.google.com/docs/emulator-suite?hl=ja

 事前準備
まず、FirebaseエミュレータをDockerで動かすために必要なファイルを準備...]]></description><link>https://zenn.dev/vs_blog/articles/1b5d62cf575fab</link><guid isPermaLink="true">https://zenn.dev/vs_blog/articles/1b5d62cf575fab</guid><pubDate>Fri, 05 Jul 2024 01:20:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mk4OoJcK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2595%25E3%2581%258F%25E3%2581%25A3%25E3%2581%25A8Docker%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Firebase%2520%25E3%2582%25A8%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AEAuthentication%25E3%2581%25A7%25E8%25AA%258D%25E8%25A8%25BC%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:chanpon2015%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjOTFhMjZiZDIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%2590%25E3%2583%258B%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5YjNkOGUwMTYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chanpon2015</dc:creator></item><item><title><![CDATA[ひとくちメモ：LXC コンテナの中で Docker を実行する]]></title><description><![CDATA[ひとくちメモなのですごく短いです。

前提：

Ubuntu
LXC / LXD をお使いの方

LXC コンテナはもちろんコンテナなので仮想化技術の上で動いている。Docker はもちろん仮想化技術である。なので、コンテナの上で Docker を動かすなら仮想化のネスティング的なものが必要になる。
ネスティングは LXC コンテナに対して実行する。厳密にはホストも対応が必要だが、現代のコンピューなら多分何もしなくても勝手に対応してくれているはず。具体的なコマンドは下記一つだけ。
lxc config set &lt;container&gt; security.nesting true...]]></description><link>https://zenn.dev/argi_berri/articles/fd902d45844476</link><guid isPermaLink="true">https://zenn.dev/argi_berri/articles/fd902d45844476</guid><pubDate>Thu, 04 Jul 2024 17:28:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pBYn_3L8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25B2%25E3%2581%25A8%25E3%2581%258F%25E3%2581%25A1%25E3%2583%25A1%25E3%2583%25A2%25EF%25BC%259ALXC%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%25A7%2520Docker%2520%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ARGIA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhYWQwM2NmMzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ARGIA</dc:creator></item><item><title><![CDATA[【Python】dockerでpython-dotenvを実装する]]></title><description><![CDATA[
 はじめに
Pythonでpython-dotenvを用いて機密情報を管理する方法を以下にまとめている。

 動作環境

windows
python3
docker
vscode


 1..envファイルの作成

ターミナル（powershell）
New-Item .env


出力結果
$ New-Item .env
    ディレクトリ: C:\Desktop\test-python

Mode                 LastWriteTime         Length Name
----                 -------------       ...]]></description><link>https://zenn.dev/code_journey_ys/articles/ec43f4f9c91ede</link><guid isPermaLink="true">https://zenn.dev/code_journey_ys/articles/ec43f4f9c91ede</guid><pubDate>Thu, 04 Jul 2024 13:53:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jgZw0JJA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591docker%25E3%2581%25A7python-dotenv%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxYmU5MTc2ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[CodeBuildでdocker buildを高速化できるポテンシャルを持つネタ 3選]]></title><description><![CDATA[
 概要
CodeBuildを使ってコンテナイメージをビルドしてECSやApp RunnerなどのコンテナサービスにデプロイをするCI/CDパイプラインを作る際、コンテナイメージのビルド時間を短くしたい！
CIは早いに越したことはない！ので、そのような期待は皆さんお持ちなのではないでしょうか？
そんなときにコンテナイメージをビルドするのにかかる時間(CodeBuildの実行時間)をなるべく短くする方法で効果を発揮しそうな3ネタを紹介します。
本記事では、以下の3ネタを紹介します。

CodeBuildのインスタンスサイズを適切なものを選ぶ
CodeBuildのローカルキャッシュを有効化す...]]></description><link>https://zenn.dev/tkg216/articles/5b3e4dea15b8ae</link><guid isPermaLink="true">https://zenn.dev/tkg216/articles/5b3e4dea15b8ae</guid><pubDate>Thu, 04 Jul 2024 12:57:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o93uBKL6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CodeBuild%25E3%2581%25A7docker%2520build%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2583%259D%25E3%2583%2586%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AB%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A4%25E3%2583%258D%25E3%2582%25BF%25203%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkg216%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5OTg2N2QzZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tkg216</dc:creator></item><item><title><![CDATA[【2024年版 M1Mac】安全なWEBアプリケーションの作り方セットアップ]]></title><description><![CDATA[
 はじめに
体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践を購入したのですが、環境のセットアップに少し時間がかかってしまったので、こちらにまとめたいと思います。

 実行環境の作成

 準備してあるもの
以下のものは準備が完了している前提で進めます。

Firefoxのインストール
Dockerデスクトップ


 実習用仮想マシン(Docker版)のダウンロード・実行
こちらからDocker版の実習用仮想マシンをダウンロードします。
ページを開くためには書籍に記載されているIDとパスワードが必要です。
ダウンロードした後、zipファイルを解...]]></description><link>https://zenn.dev/kinoucyu_yuta/articles/b0b67c0ce2efd9</link><guid isPermaLink="true">https://zenn.dev/kinoucyu_yuta/articles/b0b67c0ce2efd9</guid><pubDate>Thu, 04 Jul 2024 12:30:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fEzHgtlC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%25902024%25E5%25B9%25B4%25E7%2589%2588%2520M1Mac%25E3%2580%2591%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAWEB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:noukin_technologies%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhN2UxMWEzOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>noukin_technologies</dc:creator></item><item><title><![CDATA[How to install Docker to Ubuntu 22.04]]></title><description><![CDATA[
 1. Update System
sudo apt update

 2. Install Prerequisites
Install the necessary prerequisites for Docker.
sudo apt install apt-transport-https ca-certificates curl software-properties-common

 3. Add Docker’s Official GPG Key
Add Docker's official GPG key.
curl -fsSL https://download.docker.c...]]></description><link>https://zenn.dev/yuto_mo/articles/aad50bbee5628f</link><guid isPermaLink="true">https://zenn.dev/yuto_mo/articles/aad50bbee5628f</guid><pubDate>Thu, 04 Jul 2024 10:48:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LYLSKwsL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:How%2520to%2520install%2520Docker%2520to%2520Ubuntu%252022.04%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0OTcwZWIzMmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu</dc:creator></item><item><title><![CDATA[【Ubuntu:22.04】Dockerfile内でbashrcを読み込めない件]]></title><description><![CDATA[
 概要
Dockerfile内でsource ~/.bashrcを実行しているのに設定した環境変数が読み込まれない問題の解決方法を記載する。

 原因
.bashrc内の以下の記述が悪さをしていた。
[ -z "$PS1" ] &amp;&amp; return

 解決法
Dockerfile内に以下を記述する。
FROM ubuntu:22.04
RUN sed -i '/\[ -z "\$PS1" \] &amp;&amp; return/d' ~/.bashrc
!
本書では記述を削除してますが、要件によってはPS1に値を代入する等の対応が必要です。


 一言
Docker ...]]></description><link>https://zenn.dev/suraud/articles/solve-cannot-load-bashrc-within-dockerfile</link><guid isPermaLink="true">https://zenn.dev/suraud/articles/solve-cannot-load-bashrc-within-dockerfile</guid><pubDate>Thu, 04 Jul 2024 10:18:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hfgCiifK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Ubuntu%253A22.04%25E3%2580%2591Dockerfile%25E5%2586%2585%25E3%2581%25A7bashrc%25E3%2582%2592%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2581%25E3%2581%25AA%25E3%2581%2584%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%252FUD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg0NzY3NjU1ODMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>/UD</dc:creator></item><item><title><![CDATA[PCの環境汚染を食い止めろ ~Docker編~]]></title><description><![CDATA[
 概要
多くの方が、記事に書いてある設定をとりあえず試してみた経験があるのではないでしょうか。
しかし、期待値通りに動作しなかった場合、試した設定をきれいに消している方は多くはないと思います。
本書では、Dockerを使用してUbuntuコンテナを作成し、コンテナ内でテストすることでPCの汚染を防ぐ方法について詳しく解説します。コンテナを利用することで、OS本体に影響を与えることなく、様々なコマンドや設定を安全に試すことができます。

 環境
OS：Ubuntu 22.04.3（筆者はWSL内）

 構成
Docker Compose + Dockerfile でコンテナを管理しましょ...]]></description><link>https://zenn.dev/suraud/articles/protect-your-environment</link><guid isPermaLink="true">https://zenn.dev/suraud/articles/protect-your-environment</guid><pubDate>Thu, 04 Jul 2024 10:18:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LAXCvmSr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PC%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25B1%259A%25E6%259F%2593%25E3%2582%2592%25E9%25A3%259F%25E3%2581%2584%25E6%25AD%25A2%25E3%2582%2581%25E3%2582%258D%2520%7EDocker%25E7%25B7%25A8%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%252FUD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg0NzY3NjU1ODMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>/UD</dc:creator></item><item><title><![CDATA[Rails - Docker上の Rspec を Makefile から実行する書き方の例]]></title><description><![CDATA[
 概要

docker-compose 構成が前提
Makeの引き数として RSPEC_TARGET を利用してファイル名を指定する
localではRailsのディレクトリがMakefileのあるディレクトリより下層にある場合 ( 例: some_rails_directory  ) を想定している


 Makefile
rspec:
	docker-compose run --rm -e RAILS_ENV=test &lt;docker_service_name&gt; rspec ${RSPEC_TARGET:some_rails_directory/%=%}
実行例
make...]]></description><link>https://zenn.dev/yumainaura/articles/qiita-2024-05-24t07_24_36-09_00</link><guid isPermaLink="true">https://zenn.dev/yumainaura/articles/qiita-2024-05-24t07_24_36-09_00</guid><pubDate>Thu, 04 Jul 2024 10:07:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rpQS8Ye7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rails%2520-%2520Docker%25E4%25B8%258A%25E3%2581%25AE%2520Rspec%2520%25E3%2582%2592%2520Makefile%2520%25E3%2581%258B%25E3%2582%2589%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%25E3%2581%25AE%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A8%25B2%25E6%25B5%25A6%25E6%2582%25A0%25E9%25A6%25AC%2520%2528%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2586%25E3%2582%2589%25E3%2582%2586%25E3%2581%2586%25E3%2581%25BE%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BPSm80MUYydFUxV05wb0owWGNCOTBiUGp1MVdxUmtEWjduWmRhSTlZPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>稲浦悠馬 (いなうらゆうま)</dc:creator></item><item><title><![CDATA[Docker + Traefikで運用するDrupalのリバースプロキシ設定]]></title><description><![CDATA[
 概要
以下の記事で紹介したDocker + Traefikを用いて、HTTPS化したDrupalを運用していました。
https://zenn.dev/nakamura196/articles/c607c7834aad0d
この時、Drupalのデフォルト設定の場合、以下のように、httpのURLが設定されていました。

この問題として、以下の記事になるように、例えばGoogleアカウントでログインするようにした際、リダイレクトURLがhttpから始まるURLとなり、Google Cloud コンソールにはhttpsから始まるURLを入力する必要があり、この齟齬によって、認証ができな...]]></description><link>https://zenn.dev/nakamura196/articles/4abc5e67efde49</link><guid isPermaLink="true">https://zenn.dev/nakamura196/articles/4abc5e67efde49</guid><pubDate>Thu, 04 Jul 2024 10:06:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lPyW2tQn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%252B%2520Traefik%25E3%2581%25A7%25E9%2581%258B%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258BDrupal%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25AD%25E3%2582%25B7%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakamura196%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pkd3BpX1gzTWIzV3VqTnVnV2tPTlJlU3VsNFNTN1BNMWlPQm9LRm5JPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakamura196</dc:creator></item></channel></rss>