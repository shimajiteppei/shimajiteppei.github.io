<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 07 Jul 2024 07:14:08 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[「RustとWebAssemblyによるゲーム開発」のGithubActionsのビルド時間を4分から2分に削ったメモ]]></title><description><![CDATA[
 概要
RustとWebAssemblyによるゲーム開発のデプロイについてGitHub Actionsが古かったのでRustにおけるGitHub Actionsベストプラクティスにならって修正したメモ
ソースコード

 問題点
本に記載されているままのActionsは最終更新が5年前のコードで、
permissionのエラーなど出ていた*。あと実行に4分ほどかかってストレス。
 actions-rs/install@v0.1.2
...
Error: Resource not accessible by integration

 対応
actions-rsの廃止対応後のソースコードを...]]></description><link>https://zenn.dev/hibo/articles/54376a0246e7bc</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/54376a0246e7bc</guid><pubDate>Sat, 06 Jul 2024 14:46:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c86oplXA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CRust%25E3%2581%25A8WebAssembly%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%25E3%2580%258D%25E3%2581%25AEGithubActions%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2599%2582%25E9%2596%2593%25E3%2582%25924%25E5%2588%2586%25E3%2581%258B%25E3%2582%25892%25E5%2588%2586%25E3%2581%25AB%25E5%2589%258A%25E3%2581%25A3%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[Rust+WebAssemblyでHello Worldを行ったメモ]]></title><description><![CDATA[
 概要
RustとWebAssemblyによるゲーム開発を進めるにあたって、環境構築で少し詰まったのでメモ
ソースコード

 環境

Windows 11 Home 23H2 22631.3810


 実行環境構築

 Rustのインストール
choco install rustup.install -y 
インストール後、cargoが利用できるようにする。
rustup update

 cmakeのインストール
rust入門
Rustのコンパイルに使うのでC++のビルド環境を設定する。
choco visualstudio2022buildtools visualstudio20...]]></description><link>https://zenn.dev/hibo/articles/47cedc2085b0cf</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/47cedc2085b0cf</guid><pubDate>Sat, 06 Jul 2024 14:37:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---IFG2B3P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%252BWebAssembly%25E3%2581%25A7Hello%2520World%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[AxumでHandlerが自動実装出来ない時]]></title><description><![CDATA[
 この記事の対象者と目標

対象者

Axumを使い始めたばかりの方
Handlerトレイト自動実装ができなくて困っている方


目標
Handlerトレイト自動実装の条件を理解する


 handlerとは
RustでAxumを使っていく上で、ハンドラーは重要な要素の一つです。
Routerと合わせて使用することで、アプリケーションを構築していくことができます。

 Handlerトレイト実装条件と注意点

 実装条件
Handlerトレイトは基本的には自動的に実装されます。
条件は以下のようになります。

非同期関数であること
0～16個のextractorsを引数を取る関数

I...]]></description><link>https://zenn.dev/ryo_nakaya/articles/6b4768cd510466</link><guid isPermaLink="true">https://zenn.dev/ryo_nakaya/articles/6b4768cd510466</guid><pubDate>Sat, 06 Jul 2024 07:38:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VY0O5-XQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%25E3%2581%25A7Handler%25E3%2581%258C%25E8%2587%25AA%25E5%258B%2595%25E5%25AE%259F%25E8%25A3%2585%25E5%2587%25BA%25E6%259D%25A5%25E3%2581%25AA%25E3%2581%2584%25E6%2599%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakaryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MDVhNjgyY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakaryo</dc:creator></item><item><title><![CDATA[Rustのフレームグラフ・ジェネレータ：flamegraphメモ [blessed.rsシリーズ17]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はflamegraphについてです。
https://github.com/flamegraph-rs/flamegraph#cargo-flamegraph

 flamegraphとは
Rust製のフレームグラフ・ジェネレータ。

 フレームグラフとは？
https://deeeet.com/writing/2016/05/29/go-flame-graph/
こちらが参考になった。
また、flamegraphのリポジトリ内では以下で説明がある。
https://g...]]></description><link>https://zenn.dev/kotabrog/articles/aa56ab2cca57a7</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/aa56ab2cca57a7</guid><pubDate>Sat, 06 Jul 2024 02:44:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gsaDIc5n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2583%25BB%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25EF%25BC%259Aflamegraph%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA17%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[勉強目的でRustで簡単なMLPの実装]]></title><description><![CDATA[
 はじめに
Deep Learningを触る機会があったので、両方の勉強目的を含めて
Rustで簡単なMLP(Multi Layer Perceptron)の実装をしてみました。
基本的には実装アルゴリズは有名なオライリーのお魚本を参考にしています。

 実装ポイント
layerを一つずつ設定できるようにしています。
有名なPythonライブラリの例でいくと、sklearnよりはPytorchの方に近い感じです。
let mut layers = Vec::new();
let layer1 = Layer::new(input_size, hidden_size, activatio...]]></description><link>https://zenn.dev/nikekukuri/articles/e20fff6fa34e00</link><guid isPermaLink="true">https://zenn.dev/nikekukuri/articles/e20fff6fa34e00</guid><pubDate>Fri, 05 Jul 2024 14:24:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Qxu8KpK9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258B%2589%25E5%25BC%25B7%25E7%259B%25AE%25E7%259A%2584%25E3%2581%25A7Rust%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AAMLP%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nikekukuri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YWVoenY2aE1SWDhSS0xMM2RINDhtclg3UGQxUVhJUTIzYmxuQnE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nikekukuri</dc:creator></item><item><title><![CDATA[Rustで自作言語のインタプリタを作った話]]></title><description><![CDATA[
 リポジトリ
https://github.com/garebareDA/koto

 前提
字句解析、構文解析を理解または記事を読んでいることを前提として話します。
そしてインタプリタに関してはウェブの情報を下に作成した独自のものなのでおそらく本来イメージするものではないと思われます。Rustにメモリを生やすというわけ変わらん実装になってます。

 字句解析器
https://zenn.dev/smartcamp/articles/a498830e010e18

 構文解析器
https://zenn.dev/smartcamp/articles/076b673e2782d6

 イ...]]></description><link>https://zenn.dev/smartcamp/articles/fb1b3ff6798497</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/fb1b3ff6798497</guid><pubDate>Thu, 04 Jul 2024 13:13:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nbuRji_p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Hit&Blowで学ぶ最適化part2　相互情報量]]></title><description><![CDATA[
 はじめに
前回記事では、Hit&amp;Blowをテーマにベイズ推定の考え方を追っていき、ランダムな方法と比べて少ない手数（平均5.27手）で数を当てることに成功しました。
一方で、前回記事の最後で触れたように、単純に現時点で最も答えの確率が高い数字を宣言していくという戦略には改善の余地がありそうです。本記事では、より良いHit&amp;Blowの戦略として、相互情報量について扱います。(いきなり相互情報量が出てきたのはなぜかというと、AtCoder Heulistic Contest 030で使えるらしいからです。）
なお、前回記事と同様に、Hit&amp;Blowについては探索木...]]></description><link>https://zenn.dev/4eta/articles/c00fcfd07e0238</link><guid isPermaLink="true">https://zenn.dev/4eta/articles/c00fcfd07e0238</guid><pubDate>Wed, 03 Jul 2024 14:18:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9ng_HoT6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hit%2526Blow%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596part2%25E3%2580%2580%25E7%259B%25B8%25E4%25BA%2592%25E6%2583%2585%25E5%25A0%25B1%25E9%2587%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:4eta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmQ4NWp1bGRIUURYQmg4RmhpbEtHMldOd0phWmlHWlRJUmM0WTNhRURxTmYxbjlmQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>4eta</dc:creator></item><item><title><![CDATA[2項演算子の優先度と結合性だけで作るパーサ]]></title><description><![CDATA[「Rustで作るプログラミング言語」関連のトピック、第2弾です。
前回は Rustack の話題でしたが、今回は Ruscal の構文解析の中で紹介できなかったトピックです。
Ruscalについては、拙著「Rustで作るプログラミング言語」で作り方を説明していますので、興味のある方は是非買って読んでみてください！（宣伝）
https://www.amazon.co.jp/dp/4297141922
本書では再帰下降パーサを構文解析に使っていますが、再帰下降パーサには複数のマッチする構文の候補を繰り返し適用し、失敗したらバックトラックするという無駄があります。これは現代のCPUでは現実的な...]]></description><link>https://zenn.dev/msakuta/articles/82dce9d55417a3</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/82dce9d55417a3</guid><pubDate>Wed, 03 Jul 2024 12:15:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ITgLNAxy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2%25E9%25A0%2585%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AE%25E5%2584%25AA%25E5%2585%2588%25E5%25BA%25A6%25E3%2581%25A8%25E7%25B5%2590%25E5%2590%2588%25E6%2580%25A7%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Rustで自作言語ために構文解析器を作った話]]></title><description><![CDATA[https://zenn.dev/smartcamp/articles/a498830e010e18
この記事の続きです。
軸解析と構文解析を一緒の記事すると長くなりそうなので分けました。

 リポジトリ
https://github.com/garebareDA/koto

 構文解析器(parser)とは
軸解析の結果から木構造を生成してインタプリタに渡すものです。
例えば下記のトークンの定義とトークン列がありパースを行うと。
const a = 1


constは変数定義のキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列...]]></description><link>https://zenn.dev/smartcamp/articles/076b673e2782d6</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/076b673e2782d6</guid><pubDate>Wed, 03 Jul 2024 01:02:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D26LqDuK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E6%25A7%258B%25E6%2596%2587%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Rustで自作言語ために字句解析器を作った話]]></title><description><![CDATA[
 リポジトリ
https://github.com/garebareDA/koto

 字句解析器(Lexer)とは
文字をトークンの列に変換を行う機構のものです。
たとえば下記のトークンの定義があり、


constはキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列で4と定義する

const a = 1
上記ののプログラムをトークンの列に変更すると
[1, 2, 3, 4]
このようになります(実際はすべてが数列に置き換わるわけではありません)。
こうすることにより構文解析という次の処理により適した形にすることができます。...]]></description><link>https://zenn.dev/smartcamp/articles/a498830e010e18</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/a498830e010e18</guid><pubDate>Mon, 01 Jul 2024 15:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9xDd6EsL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%25AD%2597%25E5%258F%25A5%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[自作スタック言語 Rustack では再帰呼び出しが for 文より強力]]></title><description><![CDATA[今回は拙著「Rustで作るプログラミング言語」の発売を記念して、宣伝を兼ねたちょっとした小ネタです。
https://www.amazon.co.jp/dp/4297141922

この本では Rust を使用して自分でプログラミング言語を自作する手順をステップバイステップで紹介しているのですが、そこで出来上がる言語には Rustack と Ruscal という２つがあります。ここでは、その一つ目である Rustack の、本では紹介しきれなかった、ちょっとした特性を紹介したいと思います。

 スタックベース言語 Rustack
詳しくは書籍を参照していただければと思いますが、 Rust...]]></description><link>https://zenn.dev/msakuta/articles/7f1bf1fc92aefb</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/7f1bf1fc92aefb</guid><pubDate>Mon, 01 Jul 2024 14:44:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lh49uRxi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E8%25A8%2580%25E8%25AA%259E%2520Rustack%2520%25E3%2581%25A7%25E3%2581%25AF%25E5%2586%258D%25E5%25B8%25B0%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%258C%2520for%2520%25E6%2596%2587%25E3%2582%2588%25E3%2582%258A%25E5%25BC%25B7%25E5%258A%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Quickwit を利用してサーバーレスなログ全文検索ツールを作る]]></title><description><![CDATA[Quickwit は Rust 製の検索エンジンです。
Quickwit の利用用途として挙げられているのは、アプリケーションなどのログを検索したいケースなど、下記のようなデータ・ユースケースの検索に適したツールとなります。

データ自体が immutable
レイテンシを気にしない

Quickwit のアーキテクチャではインデックスされたデータは S3 などのオブジェクトストレージに保管されるます。
また、まだ beta 段階ではありますが、Quickwit を Lambda で動かすこともできるため、サーバーレスな全文検索システムを低コストで構築することができます。

 Quick...]]></description><link>https://zenn.dev/labbase/articles/1cf65adf13bcb3</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/1cf65adf13bcb3</guid><pubDate>Mon, 01 Jul 2024 00:03:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yL8yl2dI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Quickwit%2520%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25AC%25E3%2582%25B9%25E3%2581%25AA%25E3%2583%25AD%25E3%2582%25B0%25E5%2585%25A8%25E6%2596%2587%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Takahiro%2520Yamada%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takahiro Yamada</dc:creator></item><item><title><![CDATA[Windows + MinGW + MSYS2でRust実装のPythonライブラリーを作る]]></title><description><![CDATA[
 はじめに
RustでPythonライブラリーを作成する手段としてPyO3があり、過去の記事「PyO3 + PoetryでPythonからRust実装を使う」でやり方を解説したが、暗黙的にLinuxやmacOSを対象としていた。
ライブラリーによってはWindows向けのWheel配布が必要なこともあるため、この記事ではGitHub Actionsを使ってWindows + MinGW + MSYS2環境でPyO3とRustを使ったPythonライブラリーのビルド方法について述べる。
この記事で利用するコードは下記のGitHubリポジトリーでまとめて公開している。

https://g...]]></description><link>https://zenn.dev/yyu/articles/3f83943960411f</link><guid isPermaLink="true">https://zenn.dev/yyu/articles/3f83943960411f</guid><pubDate>Sun, 30 Jun 2024 12:21:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JnKD6TJe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Windows%2520%252B%2520MinGW%2520%252B%2520MSYS2%25E3%2581%25A7Rust%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AEPython%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YOSHIMURA%2520Yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2laenQzajlqNGY3NFNiV2ppMUxoeGZNbE5PNmVhcXJLY2cza1JaTFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YOSHIMURA Yuu</dc:creator></item><item><title><![CDATA[aws-summit-download を Rust と thirtyfour で再実装してみた]]></title><description><![CDATA[
 【前書き】aws-summit-download とは
先日、「AWS Summitの資料を一括でDLするスクリプトを作成しました。」というポストを発見しました。
https://x.com/bondai_engineer/status/1805428579985232015
とても便利なツールなので、早速使わせていただきました！

このようなツールを OSS で公開してくださることに感謝です🙌✨

 Rewrite "aws-summit-download" In Rust
突然ですが、Rewriting It In Rust と言う言葉を聞いたことはあるでしょうか？

 Rewr...]]></description><link>https://zenn.dev/collabostyle/articles/6462bef3b5d44f</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/6462bef3b5d44f</guid><pubDate>Sun, 30 Jun 2024 07:51:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kSW6u_oC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:aws-summit-download%2520%25E3%2582%2592%2520Rust%2520%25E3%2581%25A8%2520thirtyfour%2520%25E3%2581%25A7%25E5%2586%258D%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[Rust の Yew アプリケーションを Amazon S3  へアップロードする]]></title><description><![CDATA[
 はじめに
以前、Rustのアプリケーションをコンパイルしてフロントエンドの実装を行うライブラリ Yewを紹介しました。
今回は、Yew で作ったアプリケーションを、Amazon S3に配置して、Web上からアクセスできるようにしてみたいと思います。
成果物は、Yewドキュメント通りのカウンターアプリケーションとしたいと思います。
🔻以前執筆した記事
https://zenn.dev/collabostyle/articles/2d87a6834ec989
🔻Yew Docs
https://yew.rs/ja/docs

 環境構築
まずは簡単ですが、環境を構築します。
以下コマンド...]]></description><link>https://zenn.dev/collabostyle/articles/18925793d36c00</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/18925793d36c00</guid><pubDate>Sun, 30 Jun 2024 05:33:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SBS19Gl7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%2520Yew%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%2520Amazon%2520S3%2520%2520%25E3%2581%25B8%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[Rust製のベンチマークツール：hyperfineメモ [blessed.rsシリーズ16]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はhyperfineについてです。
https://github.com/sharkdp/hyperfine#hyperfine

 hyperfineとは
Rust製のベンチマークツール

 Rust製のツール
こちらは（見逃していなければ）Rust内で使用するライブラリではなく、Rust製のツールである。

 登録が必要？
https://github.com/sharkdp/hyperfine?tab=readme-ov-file#sponsors
webページに...]]></description><link>https://zenn.dev/kotabrog/articles/d20a76a0e95382</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/d20a76a0e95382</guid><pubDate>Sat, 29 Jun 2024 01:18:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6N1LA96D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AE%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2581%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%259Ahyperfine%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA16%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[RustでクロスコンパイルにつまずいたときはOpenSSLでなくRustlsを使うといいかもしれない]]></title><description><![CDATA[
 背景
Rust製のDiscord BOTをRaspberry Pi Zero 2 W向けにCrossを使ってクロスコンパイルしようとした際、OpenSSL周りでエラーが発生し、コンパイルが進まない問題に直面しました。

 問題
reqwestクレートではデフォルトでOpenSSLを使用しますが、これがCrossでのクロスコンパイル時に問題を引き起こすようです。すでに同様の問題が報告されており（例: cross-rs/cross#400）、それはCrossでのOpenSSLのサポートが打ち切られたことに端を発するようです（cross-rs/cross#229）。

 解決策
reqwe...]]></description><link>https://zenn.dev/aivoicelab/articles/3b83b5e9cc7730</link><guid isPermaLink="true">https://zenn.dev/aivoicelab/articles/3b83b5e9cc7730</guid><pubDate>Fri, 28 Jun 2024 12:29:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sAHogVza--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%259A%25E3%2581%2584%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AFOpenSSL%25E3%2581%25A7%25E3%2581%25AA%25E3%2581%258FRustls%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2584%25E3%2581%258B%25E3%2582%2582%25E3%2581%2597%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sazanka_yuto%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5YjU1ZjQ0NDIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:AI%25E5%25A3%25B0%25E3%2581%25A5%25E3%2581%258F%25E3%2582%258A%25E6%258A%2580%25E8%25A1%2593%25E7%25A0%2594%25E7%25A9%25B6%25E4%25BC%259A%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxMjcwMjBlN2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sazanka_yuto</dc:creator></item><item><title><![CDATA[Rust 小ネタ: `clap::Parser` をモジュール内に隠蔽する]]></title><description><![CDATA[こんにちは。Fairy Devices株式会社 となんらかの関わりがある nogiro (Twitter (現 Twitter): @nogiro_iota) です。Fairy Devices の Slack にある、Rust 雑談チャンネルで話に出た小ネタを共有します。
clap で derive 機能を使ってコマンドライン引数を解析するとき、clap::Parser::parse() を呼ぶファイルで use clap::Parser as _; などして、トレイトをインポートする必要があります [1]。fn main() で use しがちですが、引数解析のための型を定義しているモ...]]></description><link>https://zenn.dev/fairydevices/articles/fa1f9bdf0ce6fc</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/fa1f9bdf0ce6fc</guid><pubDate>Fri, 28 Jun 2024 08:32:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ivaRSBi5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520%2560clap%253A%253AParser%2560%2520%25E3%2582%2592%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E5%2586%2585%25E3%2581%25AB%25E9%259A%25A0%25E8%2594%25BD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nogiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NGU1YjkxNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nogiro</dc:creator></item><item><title><![CDATA[Torの接続マネージャを作る with Tauri]]></title><description><![CDATA[
 はじめに
こんにちは。calloc134 です。
最近個人開発のネタを探しており、ちょうど作ってみたかったため、Tor の接続マネージャを作ってみました。
技術的にも色々なことを試すことができたため、ブログとしてまとめてみました。

 完成形
まずはじめに完成形を紹介します。
ローディング画面は以下の通りです。


アプリケーションとしてはシンプルな一画面のみです。
Tor の接続に必要なブリッジ情報とプロキシ情報を、既存の Tor の設定ファイルから読み込んでいます。
これを適切に設定して、接続ボタンを押すと Tor に接続されます。
接続の様子はリアルタイムでログに出力されます。...]]></description><link>https://zenn.dev/calloc134/articles/cc19e069f01e0f</link><guid isPermaLink="true">https://zenn.dev/calloc134/articles/cc19e069f01e0f</guid><pubDate>Fri, 28 Jun 2024 05:18:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yA-4De0Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tor%25E3%2581%25AE%25E6%258E%25A5%25E7%25B6%259A%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2520with%2520Tauri%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:calloc134%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0MGU4NGU1YjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>calloc134</dc:creator></item><item><title><![CDATA[sccacheでどのくらいRustのビルドを高速化できるのか (Windows)]]></title><description><![CDATA[
 背景
sccacheはMozillaが開発しているコンパイラー・キャッシング・ツールです。ccacheのようにコンパイラのラッパーとして使用することができます。Rustにも対応しています。
https://github.com/mozilla/sccache

 目的
sccacheを使用することでWindow上でのRustプロジェクトのビルドをどのくらい高速化できるのか検証します。

 環境

OS: Windows 11 Home (10.0.22631.0)
Powershell: 7.4.2
CPU: Core i7-12700
メモリ: DDR4-3200 16GBx2
ス...]]></description><link>https://zenn.dev/yuma14/articles/sccache-rust-benchmark</link><guid isPermaLink="true">https://zenn.dev/yuma14/articles/sccache-rust-benchmark</guid><pubDate>Wed, 26 Jun 2024 16:24:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kxg-ouDD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:sccache%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%25AE%25E3%2581%258F%25E3%2582%2589%25E3%2581%2584Rust%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2520%2528Windows%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuma14%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1YWZjOGQxYTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuma14</dc:creator></item></channel></rss>