<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 07 Sep 2024 07:35:07 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[/var/log/how-to-notify-unmaintained-crates]]></title><description><![CDATA[突然自分がメンテナンスをしている crate のリポジトリに自動生成された Issue ができていた。
https://github.com/containers/oci-spec-rs/issues/211
どうやら内容的に proc-macro-error のメンテがされていないという話らしい。

proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab...]]></description><link>https://zenn.dev/utam0k/articles/3e1d2b931c0c07</link><guid isPermaLink="true">https://zenn.dev/utam0k/articles/3e1d2b931c0c07</guid><pubDate>Sat, 07 Sep 2024 07:26:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mLVsfJ0m--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%252Fvar%252Flog%252Fhow-to-notify-unmaintained-crates%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:utam0k%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlMTBiZGFiMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>utam0k</dc:creator></item><item><title><![CDATA[Assert実装のすゝめ]]></title><description><![CDATA[
 どいういうコトか?
Rustで以下のような実装を行ったとしよう
pub enum Number{
    Integer(i64),
    Real(f64)
}
当然こいつに演算子のOverloadはしたくなるし、Fromも付けたくなる。今回は抜粋でAddだけ実装してみることにしよう。
pub enum Number{
	Integer(i64),
	Real(f64)
}

impl From&lt;i64&gt; for Number{
	fn from(value: i64) -&gt; Self {
		todo!()
	}
}

impl From&lt;f64&gt;...]]></description><link>https://zenn.dev/tokeiya3/articles/a3350c350f8214</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/a3350c350f8214</guid><pubDate>Sat, 07 Sep 2024 06:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TQFOGjHJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Assert%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AE%25E3%2581%2599%25E3%2582%259D%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[RustでUnion Typesを実現する型レベルプログラミングの技術]]></title><description><![CDATA[
 はじめに
この記事では、RustでUnion Typesのように型の集合を表現する方法について解説します。型レベルリストを用いることで型の集合を表現し、Trait Resolutionを使って特定の型が集合に含まれるかどうか、またある集合が別の集合を含むかどうかを判定することができます。
実装の核となるのは、再帰の深さを表す型パラメータを使った型レベルリストの再帰的処理です。このトリックを使うことで、型レベルリストに対する様々な処理が実現できます。
!
筆者はRustの初心者です。もし間違いや用語の誤用などがあれば、お気軽にご指摘ください。


 モチベーション

 Union Ty...]]></description><link>https://zenn.dev/shun_kashiwa/articles/rust-union-types</link><guid isPermaLink="true">https://zenn.dev/shun_kashiwa/articles/rust-union-types</guid><pubDate>Fri, 06 Sep 2024 20:55:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tPnoLquv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Union%2520Types%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shun%2520Kashiwa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dKX1AxUVBNNW1hNUJvYkRkandDYzc0eTJNWEZYZnNZSTFYYmNQQlNVPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shun Kashiwa</dc:creator></item><item><title><![CDATA[Rust on Rails!? Rust 版の Rails と呼ばれる "Loco" を試す！]]></title><description><![CDATA[
 Rust 版 Rails "Loco"
Loco は Rails にインスパイアされた Rust の比較的新しい Web フレームワークです。
2024 年 9 月 1 日時点でバージョン 0.8.0 がリリースされています。

https://loco.rs/

 Loco の特徴
タイトルにもある通り、Loco is Rust on Rails. [1] を謳っており、
Ruby on Rails の開発体験の良さを Rust でも再現しようとしています。
また、小さいサービスや個人開発に適したフルスタックフレームワークとして開発されているようです。
内部実装では、コントローラー...]]></description><link>https://zenn.dev/collabostyle/articles/45762b07bc16fb</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/45762b07bc16fb</guid><pubDate>Thu, 05 Sep 2024 15:28:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--96g2Sz1V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520on%2520Rails%2521%253F%2520Rust%2520%25E7%2589%2588%25E3%2581%25AE%2520Rails%2520%25E3%2581%25A8%25E5%2591%25BC%25E3%2581%25B0%25E3%2582%258C%25E3%2582%258B%2520%2522Loco%2522%2520%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[＃48　Understanding BItTorrent 3: A Discover Peers]]></title><description><![CDATA[
 Introduction to BitTorrent Tracker Interaction with Rust
Welcome back to our exploration of the BitTorrent protocol! Today, we're taking a significant leap forward by focusing on a crucial aspect of the BitTorrent ecosystem - interacting with a tracker.

 Why Trackers Matter
In the world of Bit...]]></description><link>https://zenn.dev/nxted_sapporo/articles/4f0e6829e786a7</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/4f0e6829e786a7</guid><pubDate>Thu, 05 Sep 2024 08:33:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o-swVvAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%258348%25E3%2580%2580Understanding%2520BItTorrent%25203%253A%2520A%2520Discover%2520Peers%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[permutationsってなんやねん 〜オレオレnext_permutation実装まで〜]]></title><description><![CDATA[
順列のこと
最近AtCoderに参加して、詰まる問題のパーツになっている事が多い
解説を見てもしれっと next_permutation() などと出てきてはい終わり、みたいなことも多い
学業で登場するときなどは専ら順列の「数」など個数に着目するが、競プロの題材においては順列の「中身」に着目するんだなぁ


 概念

いわゆる「箱の中に1~4の数字が書かれたカードが4枚あり、箱の中から1枚ずつ順番にすべてのカードを取ったときにありうる順番を列挙したもの」というやつ

+---------+
| box     |
+---------+
| 1,3,4   |
+---------+
...]]></description><link>https://zenn.dev/yajamon/articles/202e44f20e2980</link><guid isPermaLink="true">https://zenn.dev/yajamon/articles/202e44f20e2980</guid><pubDate>Thu, 05 Sep 2024 06:36:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--71Hnifjg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:permutations%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2582%2584%25E3%2581%25AD%25E3%2582%2593%2520%25E3%2580%259C%25E3%2582%25AA%25E3%2583%25AC%25E3%2582%25AA%25E3%2583%25ACnext_permutation%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25BE%25E3%2581%25A7%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yajamon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4ZDZiMWVhMWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yajamon</dc:creator></item><item><title><![CDATA[＃47　Understanding BitTorrent 2: A Deep Dive into Torrent file]]></title><description><![CDATA[
 Introduction
BitTorrent is one of the pioneering and most popular peer-to-peer (P2P) file sharing protocols. In the last blog, I wrote about Bencode. Bencode is the encoding method used by BitTorrent for storing and transmitting loosely structured data. It's a binary format that serializes data...]]></description><link>https://zenn.dev/nxted_sapporo/articles/bd6593d4ad23a9</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/bd6593d4ad23a9</guid><pubDate>Thu, 05 Sep 2024 01:18:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k1S5MNDx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%258347%25E3%2580%2580Understanding%2520BitTorrent%25202%253A%2520A%2520Deep%2520Dive%2520into%2520Torrent%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Rustの構造体]]></title><description><![CDATA[
 Rustの構造体
名前と年齢の構造体を作ってみます
struct User {
   name: String,
   age: u32,
}
let user1 = User {
   name: String::from("nikuman"),
   age: 20,
};
構造体定義
struct 構造体作成のおまじない
name: String, nameがメンバの変数、Stringがメンバの型ですね
: コロンは変数定義に必要
,　コンマはケツにつけるおまじない
構造体の作成
User　構造体の名前です
age: 20, コロンのあとに年齢の数値をつけるよ
]]></description><link>https://zenn.dev/ni9man_butaman/articles/529cb09f040013</link><guid isPermaLink="true">https://zenn.dev/ni9man_butaman/articles/529cb09f040013</guid><pubDate>Wed, 04 Sep 2024 10:40:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ovpDdaq0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Rust%25E3%2581%25AE%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ni9man%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MTYxMGFhZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ni9man</dc:creator></item><item><title><![CDATA[Rustの関数]]></title><description><![CDATA[
 Rustの関数
まずは、簡単に足し算の関数を作ります
fn main() {
   let x = add(1,2);
   println!("add {}", x);
}

fn add(x: i32, y: i32) -&gt; i32 {
   x + y
}
fn　関数作成のおまじない
x: i32　ｘが変数名でi32が型ですね、:が定義するときのおまじないですね
-&gt; i32 i32が戻り値です、-&gt;戻り値のおまじないですね
x + y にセミコロンが付かないよ
]]></description><link>https://zenn.dev/ni9man_butaman/articles/ed9840abd9ed6a</link><guid isPermaLink="true">https://zenn.dev/ni9man_butaman/articles/ed9840abd9ed6a</guid><pubDate>Wed, 04 Sep 2024 10:26:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--liUAjyow--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Rust%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ni9man%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MTYxMGFhZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ni9man</dc:creator></item><item><title><![CDATA[Rustで言語を自作してみた]]></title><description><![CDATA[なんか作りたくなったので作りました

 言語について
言語名はPrimo、ChatGPTに決めてもらいました(多分他のソフトウェアと名前は被ってないはず)
一応初心者が書くことを想定して作ってます
インタプリタ形式の動的型付け言語で、Rustで実装してます
https://github.com/Netetra/primo-lang.git
programs/以下にコード例があります

 使用したcrate

rust-peg

構文のパースからAST生成までをしてます


rstest

テスト書くとき使いました




 文法

 リテラル
bool型のリテラル
true false
...]]></description><link>https://zenn.dev/netetra/articles/4c5969d19b720e</link><guid isPermaLink="true">https://zenn.dev/netetra/articles/4c5969d19b720e</guid><pubDate>Tue, 03 Sep 2024 16:20:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jYCHYOv9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Netetra%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNl95WXRLSFl4TGZraE5iX2lNOVc5bUVidmhnWFdZQk9xR3NSYmY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Netetra</dc:creator></item><item><title><![CDATA[【Rust入門】Result型とは？]]></title><description><![CDATA[
 はじめに
こんにちは、ファスト株式会社のyutakです！
今回は、Rustについての記事です。
弊社では、Web APIの開発言語としてRustを採用しました。
なぜRustを採用したのかについては、今後の記事で詳しく説明する予定です！

 本記事について
どのプログラミング言語でも、プロダクトの実装を進めていくとエラー処理が重要になってきます。
RustにはResult型という強力なエラー処理の機構があります。
本記事では、Result型について説明していきます。

 エラーハンドリングの重要性
エラーハンドリングは、プログラムの信頼性と堅牢性を確保する上で非常に重要です。
適切な...]]></description><link>https://zenn.dev/fast/articles/rust-result-c34ef2f8c584aa</link><guid isPermaLink="true">https://zenn.dev/fast/articles/rust-result-c34ef2f8c584aa</guid><pubDate>Tue, 03 Sep 2024 07:16:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8W1hqGaS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2591Result%25E5%259E%258B%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yutak%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzNjBmNTJkYmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yutak</dc:creator></item><item><title><![CDATA[rustのライフタイムをちゃんと理解する]]></title><description><![CDATA[ライフタイム難しいですよね。なので書きます。

 ライフタイムとはなんなのか
ライフタイムとは参照が有効なスコープのことです。参照はデータが実際に書き込まれているメモリへのアドレスとなるはずなので、参照が有効であるとはデータが書き込まれているメモリが解放されるまでの期間となります。
rustの場合はメモリの解放のタイミングは、そのデータを生成した関数やブロックを抜けたときかと思います。

 ライフタイムはなんのためにあるのか
ダングリング参照を発生させないためにあるらしいです。「だんぐりんぐ」という耳慣れない謎ワードが出てきましたね。言葉の意味はよくわかりませんが、とにかくすごい問題です...]]></description><link>https://zenn.dev/sho2/articles/rust-lifetime-understand</link><guid isPermaLink="true">https://zenn.dev/sho2/articles/rust-lifetime-understand</guid><pubDate>Mon, 02 Sep 2024 15:55:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vYOVNt0D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%2592%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25A8%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZDVjODQ1MWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しょ</dc:creator></item><item><title><![CDATA[Rustの乱数のクレート：randメモ [blessed.rsシリーズ26]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はrandについてです。
https://lib.rs/crates/rand

 randとは
乱数を生成するための色々な機能がまとめられたクレート。

 この記事の構成
version 0.8.5のrandについて調査した。
全体の構成としては以下のようになっている。

乱数とは（ちょっとだけ）
randクレート群の構成
各クレート、各機能の詳細な説明（めちゃくちゃある）

そのため、ちょっとだけrandクレートについて知りたいなという場合には、あまり向かない記事に...]]></description><link>https://zenn.dev/kotabrog/articles/dfba345986f501</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/dfba345986f501</guid><pubDate>Mon, 02 Sep 2024 15:26:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0luqh8qk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B9%25B1%25E6%2595%25B0%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259Arand%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA26%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[axumでファイルダウンロード処理]]></title><description><![CDATA[
 はじめに
プライベートでRustをコツコツ書いてます。

 概要
axum(というかRust)でファイルダウンロード機能のサンプル等がググっても見つからなかったので、実装してみました。
簡単に機能だけざっくり説明すると、DBから取得したデータをJsonに変換し、jsonファイルとしてダウンロードさせるAPIです。

 ライブラリ

 axum
axumで適当にアプリ作ってるので、そのアプリに実装するため、使いました。
https://github.com/tokio-rs/axum

 tokio_util
ストリームとして扱うのに、使用しました。
https://docs.rs/t...]]></description><link>https://zenn.dev/tshige/articles/9f9a26da3ee8d1</link><guid isPermaLink="true">https://zenn.dev/tshige/articles/9f9a26da3ee8d1</guid><pubDate>Mon, 02 Sep 2024 08:31:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QOTU2k45--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axum%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E5%2587%25A6%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:reo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2Njk1ZWFmOTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>reo</dc:creator></item><item><title><![CDATA[Axum+Cloudflare Workersでつまったところn選]]></title><description><![CDATA[!
もしあなたが単にWorkerを使いたいだけならTypeScriptを使ってください｡
RustでかつAxumを使いたい方に同じ点でつまっている方の助けになれば幸いです｡


 1. wranglerでインストールされるworkerが古い
cargo generate cloudflare/workers-rsでAxumのテンプレートを生成したらまずCargo.tomlのdependencies(依存クレート)を確認してほしい｡
現時点(2024年9月2日)で記述されるworker,worker-macrosのバージョンが0.2.0になっている場合必ずビルドに失敗する｡
ログ(長いので...]]></description><link>https://zenn.dev/ahoxa1rx/articles/032776d44e24cb</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/032776d44e24cb</guid><pubDate>Mon, 02 Sep 2024 00:15:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xCsVRdt8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%252BCloudflare%2520Workers%25E3%2581%25A7%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258Dn%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[Rust | SQLx の macro `sqlx::test` でテストを実装する]]></title><description><![CDATA[
 SQLx とは
SQLx は Rust のデーベース接続用のクレートです。
SQLx の詳細や特徴については、いくつか記事を公開しているので割愛します。
参考までに...👨‍💻👨‍💻👨‍💻

Rust | SQLx の macro query! と query_as! を使いこなす
Rust | SQLx の macro query_file! と query_file_as! で複雑な SQL クエリを分離する
Rust | SQLx で transaction &amp; commit / rollbackを実装する


 sqlx::test について

 テスト用のDBを作成...]]></description><link>https://zenn.dev/collabostyle/articles/b8b13870d5ee5b</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/b8b13870d5ee5b</guid><pubDate>Sun, 01 Sep 2024 12:55:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--meZmtDkS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%257C%2520SQLx%2520%25E3%2581%25AE%2520macro%2520%2560sqlx%253A%253Atest%2560%2520%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[EBNFからFIRST集合を求めるプログラム Rustで書いてみた]]></title><description><![CDATA[ナマステ
コンパイラ自作の副産物として，EBNFからFIRST集合を求めるプログラムをRustで書いてみたのでその記録を残す．
ここでは各種用語の解説はしない
またこの記事中の引用形式では，下部に示した参考書籍からの引用を示しているものとする．
ソースコードは以下にある．
https://github.com/neruneruna7/compiler_MPPL/blob/master/src/bin/first.rs

 アルゴリズム
以下のアルゴリズムに従ってプログラムを構成した．

(0) FIRST(\alpha)を空集合に初期化する．
以下のステップを，もう付け加えるものがなくな...]]></description><link>https://zenn.dev/neruneruna7/articles/fe0670c1131e74</link><guid isPermaLink="true">https://zenn.dev/neruneruna7/articles/fe0670c1131e74</guid><pubDate>Sun, 01 Sep 2024 12:48:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SRtC3fVU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:EBNF%25E3%2581%258B%25E3%2582%2589FIRST%25E9%259B%2586%25E5%2590%2588%25E3%2582%2592%25E6%25B1%2582%25E3%2582%2581%25E3%2582%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%2520Rust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Neruneruna7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WjdHT1MzanlRM0dkTGt5WTNNZ2Ewdzl1WjVqcFdBRGJnTW92THQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Neruneruna7</dc:creator></item><item><title><![CDATA[[小ネタ] 関数にライフタイム引数を複数定義する必要がある場合の一例]]></title><description><![CDATA[
 はじめに
初学者向けです。
Rustで作るプログラミング言語の項2.5を写経中、関数にライフタイムを2種類明示しているコードがありました。なぜライフタイムを2つ指定する必要があるのか疑問に感じ、揃えたところコンパイルエラーが発生しました。指定に意味があることが分かったため調査することにしました。

 変更箇所とエラー内容

変更箇所
-fn parse_block&lt;'src, 'a&gt;(input: &amp;'a [&amp;'src str]) -&gt; (Value&lt;'src&gt;, &amp;'a [&amp;'src str]) {
+fn parse_...]]></description><link>https://zenn.dev/shuntaka/articles/9512231f77adec</link><guid isPermaLink="true">https://zenn.dev/shuntaka/articles/9512231f77adec</guid><pubDate>Sun, 01 Sep 2024 09:09:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i9PsSwkT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%255D%2520%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AB%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E5%25BC%2595%25E6%2595%25B0%25E3%2582%2592%25E8%25A4%2587%25E6%2595%25B0%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%25E5%25BF%2585%25E8%25A6%2581%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E4%25B8%2580%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shuntaka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBjNzM4MmNiMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shuntaka</dc:creator></item><item><title><![CDATA[Tauriで「デスクトップディレクトリ構成可視化ツール」を試作した話]]></title><description><![CDATA[[概要]
デスクトップ可視化と聞いて違和感を感じるかもしれない。(デスクトップは目に見えているから)
ただ最近BIツールをで触ってみて意外とデフォルトでは必要情報が可視化されていないように感じた。
なので自分用にとりあえずtreeコマンドで出る情報を可視化できるようなアプリを作ろうと思った。
[URL]
https://github.com/nkwork9999/tree_viz/tree/vizonly
※色々将来的に機能を追加予定ではあるが、現在はディレクトリをツリー状に表示し、クリックすると開くだけとなっています。(スライダーは他機能の名残)

[目的]
個人アプリケーションを作成...]]></description><link>https://zenn.dev/amana/articles/203d6533629704</link><guid isPermaLink="true">https://zenn.dev/amana/articles/203d6533629704</guid><pubDate>Sat, 31 Aug 2024 18:42:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WEIWp6h9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2581%25A7%25E3%2580%258C%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258D%25E3%2582%2592%25E8%25A9%25A6%25E4%25BD%259C%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nk_work%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXl5YnE2MF9NVW5SaXNqUm15RGs2YVpFcmxQM1pKYlhQOER3aWI4NXdqPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nk_work</dc:creator></item><item><title><![CDATA[RustでOllamaにAPIを打つ]]></title><description><![CDATA[
 はじめに
対象読者：Rust、Go、C、C++に触れたことがなく、知識もない人
最近Rustの学習を始めました。
普段はPythonでプログラムを書いています。
背景として、Pythonが重いと感じることがあり、軽量な言語も習得したいと考えたためです。
RustはKernelにも採用される軽い言語です。
まだまだ学習の途中ですが、途中経過のアウトプットとして、Ollama APIを利用するプログラムをRustで実装しました。
このプログラムを通じて、Rustについて説明します。

 環境構築
Rustには、rustupというpyenvのようなツールがあり、様々なtoolchainを使...]]></description><link>https://zenn.dev/headwaters/articles/68a16c04b05024</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/68a16c04b05024</guid><pubDate>Sat, 31 Aug 2024 14:54:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LZnisENa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Ollama%25E3%2581%25ABAPI%25E3%2582%2592%25E6%2589%2593%25E3%2581%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:mshiba%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxNGI2ZTQ2MzguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mshiba</dc:creator></item></channel></rss>