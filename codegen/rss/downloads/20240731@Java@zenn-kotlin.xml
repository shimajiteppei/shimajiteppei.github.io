<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Kotlin」のフィード]]></title><description><![CDATA[Zennのトピック「Kotlin」のRSSフィードです]]></description><link>https://zenn.dev/topics/kotlin</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/0913f0325d.png</url><title>Zennの「Kotlin」のフィード</title><link>https://zenn.dev/topics/kotlin</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 31 Jul 2024 12:04:05 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/kotlin/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[kotlin の coroutine スレッドについて]]></title><description><![CDATA[kotlin の coroutine スレッドについて調べます
]]></description><link>https://zenn.dev/ga_ku/articles/282724e91ef31c</link><guid isPermaLink="true">https://zenn.dev/ga_ku/articles/282724e91ef31c</guid><pubDate>Wed, 31 Jul 2024 04:17:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AqxWLG4d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:kotlin%2520%25E3%2581%25AE%2520coroutine%2520%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GAKU%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiNTNjODVkYzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GAKU</dc:creator></item><item><title><![CDATA[kotlin で 排他処理 mutex の活用]]></title><description><![CDATA[
 背景
kotlin で 排他処理をしたい時どうすればいいんだろう？
複数のコルーチン間でリソースの競合を防ぎたい

 アプローチ① mutex
mutex をつかうと、コードブロック単位で実行するかどうかを選ぶことができます

 lock と unlock
まずは mutex の基本的な lock() と unlock() の挙動を見てみましょう。
※ lock() と unlock() は mutex の状態を見てエラーを返してくれるので catch はしっかりと行いましょう
import kotlinx.coroutines.*
import kotlinx.coroutines...]]></description><link>https://zenn.dev/ga_ku/articles/906a12f23feb65</link><guid isPermaLink="true">https://zenn.dev/ga_ku/articles/906a12f23feb65</guid><pubDate>Wed, 31 Jul 2024 03:42:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1kYpjD4k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:kotlin%2520%25E3%2581%25A7%2520%25E6%258E%2592%25E4%25BB%2596%25E5%2587%25A6%25E7%2590%2586%2520mutex%2520%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GAKU%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiNTNjODVkYzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GAKU</dc:creator></item><item><title><![CDATA[kotlin coroutines の cancel をハンドリングする方法について]]></title><description><![CDATA[
 背景
kotlin coroutines の coroutine cancel のイベントをキャッチできる方法がないのか気になり調査しました。

 結論
coroutine の try { } finally { } ブロックの利用でキャッチできる

 実験
https://play.kotlinlang.org/
import kotlinx.coroutines.*

fun main() = runBlocking {
    val job = launch {
        try {            
            println("Coroutine ...]]></description><link>https://zenn.dev/ga_ku/articles/90c22b9af491d4</link><guid isPermaLink="true">https://zenn.dev/ga_ku/articles/90c22b9af491d4</guid><pubDate>Wed, 31 Jul 2024 03:34:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uuVatHUL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:kotlin%2520coroutines%2520%25E3%2581%25AE%2520cancel%2520%25E3%2582%2592%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GAKU%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiNTNjODVkYzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GAKU</dc:creator></item><item><title><![CDATA[AndroidアプリのUIをGeminiで生成する: Google I/OはFake???]]></title><description><![CDATA[
 はじめに
こちらがこの記事の元となるスライドになります！ぜひご覧ください。
https://speakerdeck.com/musayazuju/androidapurinouiwogeminidesheng-cheng-suru

 Google I/O 2024
今年の5月にGoogle I/O 2024が開催されました。Google I/Oは、Googleが毎年開催する開発者向けの大規模な技術カンファレンスです。このイベントでは、Googleの最新の技術や製品が発表され、開発者がGoogleのプラットフォームやツールについて学ぶ機会が提供されます。
https://io.goo...]]></description><link>https://zenn.dev/musa/articles/46f3024278cb04</link><guid isPermaLink="true">https://zenn.dev/musa/articles/46f3024278cb04</guid><pubDate>Tue, 30 Jul 2024 13:28:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RKBPdHQj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AEUI%25E3%2582%2592Gemini%25E3%2581%25A7%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%253A%2520Google%2520I%252FO%25E3%2581%25AFFake%253F%253F%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A0%25E3%2583%2583%25E3%2583%2581%25E3%2583%25A7%2520%257C%2520iOS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhYzAxYzVkYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ムッチョ | iOSエンジニア</dc:creator></item><item><title><![CDATA[viewModel()とhiltViewModel()の比較]]></title><description><![CDATA[
 結論
Dagger Hiltが入っているプロジェクトならhiltViewModelがオススメ

 引数がない場合
ほぼ変わらない

 引数があるがHiltで解決できる場合
hiltViewModelであれば引数を渡さなくても依存解決してくれるため行数が短くなる

 引数がありAssisted Injectする必要がある場合
viewModelとhiltViewModelで引数の型が変わる・・・がhiltViewModelの方が簡潔になりやすい印象

 コード上の違い
hiltViewModel()は内部でviewModel()を呼び出している
@Composable
inline f...]]></description><link>https://zenn.dev/wansuko_cmd/articles/4d51313242c375</link><guid isPermaLink="true">https://zenn.dev/wansuko_cmd/articles/4d51313242c375</guid><pubDate>Mon, 29 Jul 2024 14:05:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wy_nK2OY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:viewModel%2528%2529%25E3%2581%25A8hiltViewModel%2528%2529%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Wansuko-cmd%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkNzUxZTYwNWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Wansuko-cmd</dc:creator></item><item><title><![CDATA[Kotlin初心者必見！関数型プログラミングの魅力と実践法]]></title><description><![CDATA[
 はじめに
!
この記事は毎週必ず記事がでるテックブログ"Loglass Tech Blog Sprint"の50週目の記事です！
1年間連続達成まで 残り 3 週 となりました！

こんにちは、ログラスの山家です。
ログラスではKotlinでバックエンド開発しており、関数型プログラミングを取り入れています。
Kotlinと関数型プログラミングを始めた当初は、PHPでの開発経験しかなかったこともあり、Kotlinの言語仕様の理解と、関数型の考え方を習得するのにとても苦労しました。しかし、「なぜ関数型プログラミングを使うのか?」に対して解像度を高めることで、Kotlinの言語仕様や関数型...]]></description><link>https://zenn.dev/loglass/articles/8133261f5aef92</link><guid isPermaLink="true">https://zenn.dev/loglass/articles/8133261f5aef92</guid><pubDate>Mon, 29 Jul 2024 12:11:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QEbuh4MS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%25BF%2585%25E8%25A6%258B%25EF%25BC%2581%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E9%25AD%2585%25E5%258A%259B%25E3%2581%25A8%25E5%25AE%259F%25E8%25B7%25B5%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:YamagaShin%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNWQ4ZTRjZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGFFbzZRSVY3Q2VqQkJTQmI4MkgzelZpVWNadndRQmMwR1djZ2pqZ04xbHItNDFBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YamagaShin</dc:creator></item><item><title><![CDATA[[Rx]Rx系まとめ　非同期データの状態管理とフロー]]></title><description><![CDATA[
 はじめに
最近では、非同期データの状態管理とフローは
Ios　-&gt; Combine
Android -&gt;StateFlow
への置換がかなり進んでいると思いますが、以前ではRx系のサードパーティライブラリを使うことが主流でした。
非同期データの状態管理とフローについては、Rx系が源流にあると思うので、以前復習用にGoodNoteにまとめていたNoteを添付しておきたいと思います。
要点のみまとめているので、必要な要素の把握にちょうど良いと思うので、ご活用いただけたらと思います。
こちらの記事から抜粋させていただいたので、より詳しく知りたい方は、こちらを参照ください。
ht...]]></description><link>https://zenn.dev/r0w0120/articles/f942b014bfbba3</link><guid isPermaLink="true">https://zenn.dev/r0w0120/articles/f942b014bfbba3</guid><pubDate>Thu, 25 Jul 2024 23:46:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--71Dmw6FG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRx%255DRx%25E7%25B3%25BB%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2580%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25A8%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:r0w2.0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzN2EyMjg5NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>r0w2.0</dc:creator></item><item><title><![CDATA[SpringBoot×JUnitにおけるよくあるエラー]]></title><description><![CDATA[Spring BootとJUnitを組み合わせてテストを行う際には、さまざまなエラーメッセージに遭遇することがあります。これらのエラーメッセージは、設定ミスや依存関係の問題などによるもので、適切に対応することで解決できます。以下に、Spring Boot＋JUnitでよく目にするエラーメッセージとその原因、解決方法を具体例を挙げて説明します。

 1. @Autowiredによる依存関係のエラー
エラーメッセージ
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifyin...]]></description><link>https://zenn.dev/simsim/articles/d9ebf473c22528</link><guid isPermaLink="true">https://zenn.dev/simsim/articles/d9ebf473c22528</guid><pubDate>Thu, 25 Jul 2024 16:05:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B9i4hZA2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot%25C3%2597JUnit%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2582%2588%25E3%2581%258F%25E3%2581%2582%25E3%2582%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sim_fwork%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sim_fwork</dc:creator></item><item><title><![CDATA[SpringBootで使用するアノテーション(JUnit編)]]></title><description><![CDATA[Spring BootとJUnitは、JavaやKotlinでの迅速で強力なテスト環境を提供します。Spring Bootは、アプリケーション全体を自動的に設定し、JUnitは単体テストと統合テストを実行するためのフレームワークです。これらのツールを組み合わせることで、効率的にテストを行うことができます。以下に、Spring BootとJUnitでよく使用されるアノテーションとその具体例をKotlinで紹介します。

 1. @SpringBootTest
@SpringBootTestは、Spring Bootアプリケーションの完全なコンテキストをロードして統合テストを実行するためのア...]]></description><link>https://zenn.dev/simsim/articles/4b9930dcf2308b</link><guid isPermaLink="true">https://zenn.dev/simsim/articles/4b9930dcf2308b</guid><pubDate>Thu, 25 Jul 2024 15:50:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hwy1w4Rs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot%25E3%2581%25A7%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E3%2582%25A2%25E3%2583%258E%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2528JUnit%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sim_fwork%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sim_fwork</dc:creator></item><item><title><![CDATA[SpringBootで使用するアノテーション]]></title><description><![CDATA[Spring Bootは、JavaやKotlinでの迅速なアプリケーション開発を支援するフレームワークです。Spring Bootでは多くのアノテーションが提供されており、それらを使用することで設定やコーディングが簡素化されます。以下に、Spring Bootでよく使用されるアノテーションとその具体例をKotlinで説明します。

 1. @SpringBootApplication
@SpringBootApplicationは、Spring Bootアプリケーションのエントリーポイントに付けるアノテーションです。このアノテーションは、以下の3つのアノテーションをまとめたものです。
@...]]></description><link>https://zenn.dev/simsim/articles/52a65b7189cfe2</link><guid isPermaLink="true">https://zenn.dev/simsim/articles/52a65b7189cfe2</guid><pubDate>Thu, 25 Jul 2024 15:37:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4x0l1DWy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot%25E3%2581%25A7%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E3%2582%25A2%25E3%2583%258E%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sim_fwork%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sim_fwork</dc:creator></item><item><title><![CDATA[Jetpack Glance(ウィジェット)入門]]></title><description><![CDATA[
 概要
Jetpack GlanceとはComposeと同じ書き方でウィジェットを作れるもの。※同じものではない
https://developer.android.com/develop/ui/views/appwidgets?hl=ja

 使用方法
依存の追加
libs.versions.toml
[versions]
glance = "1.1.0"

[libraries]
glance-appwidget = { module = "androidx.glance:glance-appwidget", version.ref = "glance" }
glance-mate...]]></description><link>https://zenn.dev/giglancer/articles/56cee019669de4</link><guid isPermaLink="true">https://zenn.dev/giglancer/articles/56cee019669de4</guid><pubDate>Tue, 23 Jul 2024 07:07:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1RPIdQHM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jetpack%2520Glance%2528%25E3%2582%25A6%25E3%2582%25A3%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2588%2529%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:apollo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBjZmZlZTVlZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>apollo</dc:creator></item><item><title><![CDATA[[Kotlin]Amazon BedrockのInvoke Model APIをConverse APIへ移行]]></title><description><![CDATA[
スマートラウンドでエンジニアをやっている福本です！
先日、AWSが主催する「Amazon Bedrock Prototyping Camp」というAmazon Bedrockの1dayワークショップに参加してきました👇
https://note.com/smartround/n/nb0ad875e2b02
スマートラウンドでは、社内でLLMに関する取り組みをすでに行っており、Amazon Bedrockを用いてAnthropic(Claude)のAPIを叩くことでLLMにアクセスしています。
既存のコードではInvoke Model APIを利用していたのですが、先ほどのワークショップ...]]></description><link>https://zenn.dev/smartround_dev/articles/edb1995babe8e3</link><guid isPermaLink="true">https://zenn.dev/smartround_dev/articles/edb1995babe8e3</guid><pubDate>Tue, 23 Jul 2024 01:39:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i_wScC8w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BKotlin%255DAmazon%2520Bedrock%25E3%2581%25AEInvoke%2520Model%2520API%25E3%2582%2592Converse%2520API%25E3%2581%25B8%25E7%25A7%25BB%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Teruhisa%2520Fukumoto%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EyZGQyNWFiZDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25A9%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2589%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pFR3g5OWtnM28tSDRUVGNVQmZjNWhXSmlubDI2bjNJTTAwY0IzT3c9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Teruhisa Fukumoto</dc:creator></item><item><title><![CDATA[[Flutter]Flutter描画エンジン（Skia）をネイティブフレームワークと比較]]></title><description><![CDATA[
 はじめに
昨今のアプリ開発において、モダンなプロジェクトのほとんどが宣言的UIによるコーディングにリファクタ、リプレイスされてきているように思われる。
IosにおけるNavigationLink,AndroidにおけるNavigationComposeの普及で、さらにSwiftUI、JetPackComposeともにコンポーネント単位、コンポーネントツリーを活用した実装がモダンとなってきていると個人的には感じている。
コンポーネントでの実装を念頭おくのであれば、当然視野に入ってくるのが、クロスプラットフォーム（Flutter）での開発である。
今回は、ユーザーインタラクション~アプリ...]]></description><link>https://zenn.dev/r0w0120/articles/2222b08c99a449</link><guid isPermaLink="true">https://zenn.dev/r0w0120/articles/2222b08c99a449</guid><pubDate>Mon, 22 Jul 2024 21:51:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ArzfwuTl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BFlutter%255DFlutter%25E6%258F%258F%25E7%2594%25BB%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25EF%25BC%2588Skia%25EF%25BC%2589%25E3%2582%2592%25E3%2583%258D%25E3%2582%25A4%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:r0w2.0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzN2EyMjg5NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>r0w2.0</dc:creator></item><item><title><![CDATA[KotlinのCompose Multiplatform(Desktop)でmaterial3を使う]]></title><description><![CDATA[
 Jetpack Composeのチュートリアルをやりたい
KotlinのMultiplatformが面白そうだったので、Win/Mac両方で動くアプリケーションを作成するためにIntelliJのCompose for Desktopテンプレートを使っていました。
UI関連を一通り触ってみたかったため、Jetpack Composeのチュートリアルを触ってみたのですが、このチュートリアルは androidx.compose.material3 が使われており、Compose for Desktopのテンプレートに含まれているのは androidx.compose.material の方...]]></description><link>https://zenn.dev/99no_exit/articles/683a85c8ce1e11</link><guid isPermaLink="true">https://zenn.dev/99no_exit/articles/683a85c8ce1e11</guid><pubDate>Mon, 22 Jul 2024 02:07:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c8WTSO_R--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25AECompose%2520Multiplatform%2528Desktop%2529%25E3%2581%25A7material3%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2593%25E3%2581%25AE%25E3%2581%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg0NDE4MjNhM2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ここのえ</dc:creator></item><item><title><![CDATA[GoogleMapにBitmapのカスタムマーカーを沢山表示させつつ滑らかな操作を実現したい！]]></title><description><![CDATA[
 自己紹介と概要
初めまして！
株式会社ジーニーのooyamaと申します。現在はGeniee SFA/CRMのAndroidアプリを担当しています
今回は、Jetpack ComposeでGoogleMapを表示し、その中に300個程度のカスタムマーカーを動的に表示させた時のお話です。
マーカーには全てタイトルを表示し、カメラ位置が変わると表示マーカーを新しく取得し直すということを実現しています。その際にタイトル表示やパフォーマンスについて苦労しましたので、実現に至った経緯をご紹介したいと思います
同じようなご苦労をされている方のご参考になれば幸いです


 要望の内容
以下の要件を実...]]></description><link>https://zenn.dev/geniee/articles/e72ef031b96adf</link><guid isPermaLink="true">https://zenn.dev/geniee/articles/e72ef031b96adf</guid><pubDate>Mon, 22 Jul 2024 01:12:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_oRAa6Gr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GoogleMap%25E3%2581%25ABBitmap%25E3%2581%25AE%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25BC%25E3%2582%2592%25E6%25B2%25A2%25E5%25B1%25B1%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2595%25E3%2581%259B%25E3%2581%25A4%25E3%2581%25A4%25E6%25BB%2591%25E3%2582%2589%25E3%2581%258B%25E3%2581%25AA%25E6%2593%258D%25E4%25BD%259C%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ooyama%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyMmViZTNjMjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:GENIEE%2520TechBlog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlN2Y5YjM1N2EuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ooyama</dc:creator></item><item><title><![CDATA[新規参加メンバーにも優しいKotlinによる型安全な世界]]></title><description><![CDATA[!
この記事は毎週必ず記事がでるテックブログ"Loglass Tech Blog Sprint"の49週目の記事です！
1年間連続達成まで 残り 4 週 となりました！

はじめまして、5月にログラスに入社した三田(@eichisanden)です。
ログラスに入社してから、型の恩恵を強く感じる場面が多くありました。
今回は、私が特に良いと感じた実装方法をいくつか紹介したいと思います。
※この記事のコードは、説明のために書いたサンプルコードになります

 sealed クラスによるパターンマッチで実装漏れを防ぐ
Kotlinのsealedクラスとインターフェース(以下「sealedクラス」...]]></description><link>https://zenn.dev/loglass/articles/1e75f6d390f694</link><guid isPermaLink="true">https://zenn.dev/loglass/articles/1e75f6d390f694</guid><pubDate>Sun, 21 Jul 2024 23:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oedfZ7g1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E8%25A6%258F%25E5%258F%2582%25E5%258A%25A0%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25AB%25E3%2582%2582%25E5%2584%25AA%25E3%2581%2597%25E3%2581%2584Kotlin%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E4%25B8%2596%25E7%2595%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:eichisanden%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNWQ4ZTRjZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2doeW1zUWtTdzc2YndfNFZiNVFnTW5FS2V2QmZTMGtwdXZ5RGJEWEE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>eichisanden</dc:creator></item><item><title><![CDATA[【Android】KtorでHTTPクライアント実装]]></title><description><![CDATA[
 はじめに
今回はKtorを使ったAndroidアプリでのHTTPクライアントのセットアップ〜簡単な実装までの記事になります。

 ライブラリの候補
Ktorを試す前にそもそもAndroidアプリでHTTPクライアントを扱う場合、どのようなライブラリが候補にあるのか調べてみました。

 1. Retrofit
https://square.github.io/retrofit/

Retrofitは、Squareが提供する人気の高いHTTPクライアントライブラリです。APIエンドポイントをインターフェースとして定義し、アノテーションを使用してHTTPメソッドやURLパスを指定できます。...]]></description><link>https://zenn.dev/slowhand/articles/d6f08410c6d698</link><guid isPermaLink="true">https://zenn.dev/slowhand/articles/d6f08410c6d698</guid><pubDate>Sun, 21 Jul 2024 04:36:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jqdXavxH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Android%25E3%2580%2591Ktor%25E3%2581%25A7HTTP%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:slowhand%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwY2YzMGUzMDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>slowhand</dc:creator></item><item><title><![CDATA[Androidアプリ開発: 複雑なC++関数のJNI呼び出し]]></title><description><![CDATA[
 はじめに
Androidアプリ開発においてJNI（Java Native Interface）を使用することで、C++をJavaやKotlinから利用することが可能です。ここでは、stable-diffusion.cppの具体的なC++関数を例にJNIを通じてKotlinから呼び出す方法を解説します。

 C++関数の定義
以下に示すのは、sd_ctx_t*型のポインタを返すC++関数です。この関数は、様々なパラメータを受け取り、画像生成のためのコンテキストを設定します。ここではパラメータの意味などは理解する必要はありません。複数の文字列パラメータと数値、およびブール値を受け取り、何...]]></description><link>https://zenn.dev/kmitsunami/articles/0818832c89b1fb</link><guid isPermaLink="true">https://zenn.dev/kmitsunami/articles/0818832c89b1fb</guid><pubDate>Sat, 20 Jul 2024 22:18:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o-10ZVR_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%253A%2520%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AAC%252B%252B%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AEJNI%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Koki%2520Mitsunami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHlURXRRN0JKWXhFMFBVUC10NHY0OWtrejBuT25BOFRnLXJuMW85dzZLVHNkTmFnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Koki Mitsunami</dc:creator></item><item><title><![CDATA[KotlinとC++のブリッジング: AndroidアプリへのC/C++コードの追加]]></title><description><![CDATA[
 背景
Androidアプリ開発ではJavaやKotlinが主に使われますが、パフォーマンスが重要な部分ではC++を利用することがあります。この記事では、Android Studioを使用してKotlinとC++を統合し、JNI（Java Native Interface）を利用して両者間のブリッジを構築する方法を解説します。

 1. Android StudioとC++のセットアップ
Android StudioでC++のサポートを追加するには、まずNDK（Native Development Kit）とCMakeをインストールする必要があります。これらはAndroid Studi...]]></description><link>https://zenn.dev/kmitsunami/articles/89fe4c7b7b9fa0</link><guid isPermaLink="true">https://zenn.dev/kmitsunami/articles/89fe4c7b7b9fa0</guid><pubDate>Thu, 18 Jul 2024 05:19:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C1hFWTVj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25A8C%252B%252B%25E3%2581%25AE%25E3%2583%2596%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25B8%25E3%2583%25B3%25E3%2582%25B0%253A%2520Android%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25B8%25E3%2581%25AEC%252FC%252B%252B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E8%25BF%25BD%25E5%258A%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Koki%2520Mitsunami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHlURXRRN0JKWXhFMFBVUC10NHY0OWtrejBuT25BOFRnLXJuMW85dzZLVHNkTmFnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Koki Mitsunami</dc:creator></item><item><title><![CDATA[【Kotlin】スクリプトとして実行する]]></title><description><![CDATA[mise で導入した
mise plugin add kotlin
mise install kotlin@2.0.0
mise global kotlin@2.0.0
プログラムコードの拡張子を kts として保存する

hello.kts
println("Hello, World!")

実行する
 kotlinc -script hello.kts
]]></description><link>https://zenn.dev/masakielastic/articles/af994f174b0253</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/af994f174b0253</guid><pubDate>Wed, 17 Jul 2024 22:34:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2lWgtDCk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Kotlin%25E3%2580%2591%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item></channel></rss>