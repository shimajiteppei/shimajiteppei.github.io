<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 27 May 2024 12:03:39 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TypeScript再入門メモ]]></title><description><![CDATA[
 はじめに
これまで実務でTypeScript（以下TS）を使用してきましたが、基礎知識が不十分だと感じることが多々ありました。
そこで、TSとJavaScriptの再入門のため、『プロを目指す人のためのTypeScript入門』（通称ブルーベリー本）で一通り学び直しました。
せっかく得た知識を定着させるために、個人的に重要だと感じたポイントを備忘録としてまとめてみたいと思います。

 1. 基礎編

 1.1 TSの利点・静的型付けによるメリット

 型安全性
TSのような静的型付け言語では、コンパイラが行う型チェック（後述）により、コードを書いている段階で型のミスを検出できる。これ...]]></description><link>https://zenn.dev/makoto1995/articles/fe04ac81221514</link><guid isPermaLink="true">https://zenn.dev/makoto1995/articles/fe04ac81221514</guid><pubDate>Mon, 27 May 2024 10:58:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XsyJh6UH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E5%2586%258D%25E5%2585%25A5%25E9%2596%2580%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Makoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1M3RXM1huOHFZNnp1dERtQ3pYWlNjUzBUMGdMOU94RHdJV3ZRNW1fdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Makoto</dc:creator></item><item><title><![CDATA[React 19以下でもReact Compilerを有効化する]]></title><description><![CDATA[
 はじめに
一応React Compilerは、React 19を必須としていますが、なくても動きます
https://x.com/potetotes/status/1793248011239170156
Reactチームの方によりますと、React 19のキャッシュ機構が過去のバージョンより効率が良いとされていますね。
しかしReactチームは、React 19じゃないプロジェクトでもReact Compilerが動くようにpolyfillを用意してくれてます。

the gist isn’t unsafe, it’s not efficient and not maintained...]]></description><link>https://zenn.dev/mylifeasjosh/articles/380f27af37733c</link><guid isPermaLink="true">https://zenn.dev/mylifeasjosh/articles/380f27af37733c</guid><pubDate>Mon, 27 May 2024 00:54:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---4amAYDz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%252019%25E4%25BB%25A5%25E4%25B8%258B%25E3%2581%25A7%25E3%2582%2582React%2520Compiler%25E3%2582%2592%25E6%259C%2589%25E5%258A%25B9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:josh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMzMyZjFhMDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>josh</dc:creator></item><item><title><![CDATA[jQueryの基本的な実装方法]]></title><description><![CDATA[①実装したい部分を部分テンプレート化します。
②、部分テンプレートを挟むように囲い、htmlのコードにidを付与してあげます。
divでなくとも、idを付与してあげることには変わりありません。
例は以下の通りです
例１
&lt;div id = "chaterror"&gt;
    &lt;%= render "layouts/error_messages", model: @chat %&gt;
&lt;/div&gt;
例2
 &lt;tbody id="messages"&gt;
　　 &lt;% @chats.each do |chat| %&gt;
     &lt;%= r...]]></description><link>https://zenn.dev/makoto_niko/articles/bc507dc67f83b6</link><guid isPermaLink="true">https://zenn.dev/makoto_niko/articles/bc507dc67f83b6</guid><pubDate>Mon, 27 May 2024 00:50:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_OhoGDO0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jQuery%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:niko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUzY2Q4NTU1N2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>niko</dc:creator></item><item><title><![CDATA[LangChain で構造化データを取得する方法]]></title><description><![CDATA[
 はじめに
LLM では、モデルから構造化データを取得できます。この記事では、LangChain でモデルから構造化データを返す方法について説明します。

 LangChain でモデルから構造化データを返す方法
以下のように Zod を使って構造化データを取得できます。
import { ChatOpenAI } from "@langchain/openai";
import { z } from "zod";
import 'dotenv/config'

// model
const model = new ChatOpenAI({
  model: "gpt-3.5-turb...]]></description><link>https://zenn.dev/hayato94087/articles/226875c041c7fd</link><guid isPermaLink="true">https://zenn.dev/hayato94087/articles/226875c041c7fd</guid><pubDate>Sun, 26 May 2024 12:58:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qvMfOdoT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangChain%2520%25E3%2581%25A7%25E6%25A7%258B%25E9%2580%25A0%25E5%258C%2596%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hayato94087%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5ZTEyZGJjZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hayato94087</dc:creator></item><item><title><![CDATA[Node.jsのモジュールタイプごとの読み込み方法]]></title><description><![CDATA[
 はじめに
CJSやESMといったモジュールタイプ、先人たちの記事を読み理解したつもりになるが、時間が経つと完全に忘れるということを繰り返している。package.jsonの最低限の設定と、その読み込み方法を簡易的に記載する。
これは検証で書いたサンプルコード
https://github.com/kkznch/sample-dual-package

 CJSからCJS, ESMを読み込む
パッケージ中の .js は、パッケージのpackage.jsonに記載されている type フィールドが commonjs の場合はCJSとして扱われ、 type フィールドが module の場...]]></description><link>https://zenn.dev/monicle/articles/06362e143950c5</link><guid isPermaLink="true">https://zenn.dev/monicle/articles/06362e143950c5</guid><pubDate>Sun, 26 May 2024 09:54:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ooJu7lE9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2597%25E3%2581%2594%25E3%2581%25A8%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2591%25E3%2581%2591%25E3%2581%259A%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhMWExNjBjOWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25A2%25E3%2583%258B%25E3%2582%25AF%25E3%2583%25AB%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hCOG5jVXVrRUY4SkZPdVRPVy1IdS1VdERUVjhTOEp1dFpaejlGPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>けけずん</dc:creator></item><item><title><![CDATA[using に対応した Symbol を作る]]></title><description><![CDATA[
 Symbol に [Symbol.dispose] プロパティを付与したい
スコープ外を検知してセルフGCするSymbol型、要はスマートポインタもどきをピュアに実装したい
いやいや、Symbol はプリミティブでしょうが…はい

 解: toString() で Symbol を返却するオブジェクトを作る
なんと、({ toString: () =&gt; someSymbol }) と someSymbol はプロパティとして同様の働きをする
const MY_SYMBOL = Symbol("address");

using GC_SYMBOL = {
    toStrin...]]></description><link>https://zenn.dev/ihasq/articles/ee92beccd4e172</link><guid isPermaLink="true">https://zenn.dev/ihasq/articles/ee92beccd4e172</guid><pubDate>Sun, 26 May 2024 04:08:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ArN-muAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:using%2520%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%2520Symbol%2520%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ihasq%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YWEyZmFhZmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ihasq</dc:creator></item><item><title><![CDATA[カスタムフック不要!! Reactとオブジェクト指向で完全state管理]]></title><description><![CDATA[Reactは意外とオブジェクト指向と相性がいいです
状態管理ライブラリが不要になります


不要: Redux、Jotai、Zustand、TanStack Query
カスタムフックも不要になります。


 用語


Model: User、Media、Roomといったエンティティです。

階層型オブジェクト: users[].medias[].comments[] といったチェーンで繋げられるインスタンスのことです。


 実装

Auth.js
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPasswo...]]></description><link>https://zenn.dev/llc_starhacks/articles/955208b2b2daaf</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/955208b2b2daaf</guid><pubDate>Sun, 26 May 2024 02:57:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dzg7CqQk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E4%25B8%258D%25E8%25A6%2581%2521%2521%2520React%25E3%2581%25A8%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%25E3%2581%25A7%25E5%25AE%258C%25E5%2585%25A8state%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[フロントエンド ディレクトリ ベストプラクティス #Firebase]]></title><description><![CDATA[FeDdBp: Front-end Directory-dsign Best-practice
## ディレクトリ構成

src/
  model/
    User.js
    Collection.js // basic
    Following.js
    Media.js
    Tag.js
    List.js
    Room.js
    ChatRoom.js
  service/
    firebase/
      config.js
      fcm.js
      auth.js
      firestore.js
      storage.j...]]></description><link>https://zenn.dev/llc_starhacks/articles/9e6428de958175</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/9e6428de958175</guid><pubDate>Sun, 26 May 2024 02:05:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ylz2x16b--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2520%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%2520%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2520%2523Firebase%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[React.オブジェクト指向: ファイルをアップロードするコード]]></title><description><![CDATA[
 最終形態

page.js
  onClick={async ()=&gt; {
    const file = await new InputFile().get();
    user.thumbnails.push(file);
  }}


Element.Input.js
export class Input {
  constructor(attr) {
    this.El = document.createElement('input');
  }
}

export class InputFile extends Input {
  constructor() ...]]></description><link>https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/1f005bc064fefa</guid><pubDate>Sat, 25 May 2024 20:41:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9zdM-vm---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React.%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%253A%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[React.js(CDN)をかじる本]]></title><description><![CDATA[React.js(CDN版)の導入から時計やBMI計算機等、
簡単なWebアプリケーションの作成手順をまとめていきます。
この本は、次の3点に当てはまる読者様を想定しています。

1. HTMLとCSSをさらっと使った事がある方
2. JavaScriptをまずまず使った事がある方
3, React.jsの雰囲気だけかじりたい方]]></description><link>https://zenn.dev/sdkfz181tiger/books/16ed38e7905013</link><guid isPermaLink="true">https://zenn.dev/sdkfz181tiger/books/16ed38e7905013</guid><pubDate>Sat, 25 May 2024 14:48:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7_5dWHoQ--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci85MjZjZjlkODI2LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>かじるプログラミング</dc:creator></item><item><title><![CDATA[100秒で理解するPolyfill]]></title><description><![CDATA[
 はじめに
この記事の内容は、以下の動画でも解説しているので、ぜひ見てみてください。他にもWebに関する解説動画を投稿しているので、良ければチャンネル登録よろしくお願いします！
https://youtu.be/EL7UGJks-lw?si=EOsJRPKaVKqRRrmC

 Polyfillとは？
Polyfill とは、簡単に言うと、古いブラウザでサポートされていない機能を使えるようにするためのコードのことです。

ポリフィルとは、最近の機能をサポートしていない古いブラウザーで、その機能を使えるようにするためのコードです。大抵はウェブ上の JavaScript です。
MDN -...]]></description><link>https://zenn.dev/ak/articles/e48d94824bb8ee</link><guid isPermaLink="true">https://zenn.dev/ak/articles/e48d94824bb8ee</guid><pubDate>Sat, 25 May 2024 12:36:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XBRqfgoG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:100%25E7%25A7%2592%25E3%2581%25A7%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258BPolyfill%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3YTNhNmZhNjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aki</dc:creator></item><item><title><![CDATA[Next.jsで、たった3行で型安全なルーティングを行う]]></title><description><![CDATA[
 はじめに
主に、routerやLinkコンポーネントなどでパスを指定するとき、以下のような問題に悩まされていませんか？

パス指定を手動で書くのがめんどくさい
パス指定をするとき、タイピングミスで間違ったパスを指定してしまった
開発途中でページのパス変更が必要になったが、パスの変更漏れが起きてしまった

こんな問題が、たった3行の記述で解決されます。
※app routerのみで使える機能です。

 どんな機能？

 パスに型補完が効く
こんな感じでパスに補完が効くので、めちゃ楽にパスの指定ができます。


 型エラーで怒られる
存在しないパスを設定すると、型エラーで怒ってくれます。...]]></description><link>https://zenn.dev/yarai/articles/e2476c2b39b0d5</link><guid isPermaLink="true">https://zenn.dev/yarai/articles/e2476c2b39b0d5</guid><pubDate>Sat, 25 May 2024 09:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ejq41_yC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E3%2580%2581%25E3%2581%259F%25E3%2581%25A3%25E3%2581%259F3%25E8%25A1%258C%25E3%2581%25A7%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu_aoringo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MWQzYjIxZDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu_aoringo</dc:creator></item><item><title><![CDATA[JS: 使えそうなビルドイン演算子]]></title><description><![CDATA[
 1
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment


 2
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment


 3
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Nullish_coal...]]></description><link>https://zenn.dev/llc_starhacks/articles/c9cd2bc329729a</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/c9cd2bc329729a</guid><pubDate>Sat, 25 May 2024 06:11:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1_-zBZOs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%253A%2520%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AA%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25A4%25E3%2583%25B3%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[Async ComponentはRSCだけのものじゃない、サーバだけじゃなくてクライアントでも動くんです！（でも、ダメだそうです）]]></title><description><![CDATA[RSC (React Server Component)の特徴の一つにAsync Componentが使えるというのがあるのですが、Async Component自体はRSCでなくても動いちゃいます。そう、React 19ならね。
https://x.com/dai_shi/status/1794184060501479903


追記
無限ループになることがあるからダメだそうです。
https://x.com/rickhanlonii/status/1794339764768002216
]]></description><link>https://zenn.dev/dai_shi/articles/edafb42997c98e</link><guid isPermaLink="true">https://zenn.dev/dai_shi/articles/edafb42997c98e</guid><pubDate>Sat, 25 May 2024 02:11:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c5k3_Sez--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Async%2520Component%25E3%2581%25AFRSC%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25AE%25E3%2582%2582%25E3%2581%25AE%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2581%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%25A0%25E3%2581%2591%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E3%2582%2582%25E5%258B%2595%25E3%2581%258F%25E3%2582%2593%25E3%2581%25A7%25E3%2581%2599%25EF%25BC%2581%25EF%25BC%2588%25E3%2581%25A7%25E3%2582%2582%25E3%2580%2581...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGNhM2E2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daishi</dc:creator></item><item><title><![CDATA[MediaPipeの検出結果をもとに、P5で描画する。]]></title><description><![CDATA[この記事ではGoogle MediaPipeを用いて手を検出し、その結果をもとにP5で描画を行う方法を紹介します。
P5による描画をカスタマイズしてコンテンツに活用できると思います。

 デモ


 実装
🌾捕捉事項

過去の記事ではMediaPipe Handsが用いられており、npmパッケージも@mediapipe/handsなどを使い実装されているものが多かった。
2024.05現在MediaPipeのうち視覚情報を扱うものがMediaPipe Vision tasksとしてまとめ提供されているようなのでこの記事では後者で実装を行なっている。


 環境構築
この記事では開発にVi...]]></description><link>https://zenn.dev/makimura3329/articles/mediapipe-hand-p5-20240524</link><guid isPermaLink="true">https://zenn.dev/makimura3329/articles/mediapipe-hand-p5-20240524</guid><pubDate>Fri, 24 May 2024 23:37:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ti93cPbP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MediaPipe%25E3%2581%25AE%25E6%25A4%259C%25E5%2587%25BA%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A8%25E3%2581%25AB%25E3%2580%2581P5%25E3%2581%25A7%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2520Makimura%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3ZTE1MjMxZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>🧟Makimura🧟</dc:creator></item><item><title><![CDATA[（JS→PHP→WP）WP REST APIでWordPressに投稿する]]></title><description><![CDATA[
 概要
JavaScriptで入力されたコンテンツをPHPに送信し、PHPからWordPressに投稿を実行します。
この方法ではWordPressのログイン機能を使用せず、アプリケーションパスワードによる認証を行って投稿を作成します。
つまりアプリケーションパスワードさえわかってしまえば荒らし放題のため、認証情報を秘匿するためにわざわざPHPを間に挟んでいます。
くれぐれもクライアントサイドで認証情報を扱わないようにね。

 アプリケーションパスワードの発行
WordPressのユーザー一覧から、「アプリケーションパスワード」を発行します。
（管理者権限以外のユーザーで発行するのが望...]]></description><link>https://zenn.dev/210neon/articles/6a888e1797fb86</link><guid isPermaLink="true">https://zenn.dev/210neon/articles/6a888e1797fb86</guid><pubDate>Fri, 24 May 2024 17:49:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0lRtptbz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%2588JS%25E2%2586%2592PHP%25E2%2586%2592WP%25EF%25BC%2589WP%2520REST%2520API%25E3%2581%25A7WordPress%25E3%2581%25AB%25E6%258A%2595%25E7%25A8%25BF%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NettoNeon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlNGZhNmYxMjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NettoNeon</dc:creator></item><item><title><![CDATA[type-fest で便利なユーティリティ型を使う]]></title><description><![CDATA[
 type-fest とは
TypeScript の便利なユーティリティ型を集めたライブラリです。
https://github.com/sindresorhus/type-fest

 ユーティリティ型とは
既存の型を変形して新しい型を作成するためのTypeScriptの機能です。
TypeScript にもデフォルトで  Partial, Required, Readonly などいくつかのユーティリティ型が用意されています。
https://www.typescriptlang.org/docs/handbook/utility-types.html

 なぜ type-fest...]]></description><link>https://zenn.dev/t0daaay/articles/1f531bd9f352bc</link><guid isPermaLink="true">https://zenn.dev/t0daaay/articles/1f531bd9f352bc</guid><pubDate>Fri, 24 May 2024 15:45:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--24yZpiTE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:type-fest%2520%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A4%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmOTY1Y2M0NzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>つじ</dc:creator></item><item><title><![CDATA[Custom Search EngineとCustom Search APIを利用したサイト内検索（JavaScript）]]></title><description><![CDATA[
 はじめに
サイト内検索を

Custom Search Engine
Custom Search API

を利用して開発しました。

 設定
まず、Custom Search Engine、Custom Search APIの設定を行います。

 Custom Search Engine
特定のサイトやドメインを対象としたサイト内検索を作成できるサービスです。
ココで指定したサイトまたはページが検索の対象になります。


 Custom Search API
Custom Search APIは、Custom Search Engineの機能をプログラムから利用できるようにするため...]]></description><link>https://zenn.dev/yyoshioka/articles/fa0e0a8cc480b6</link><guid isPermaLink="true">https://zenn.dev/yyoshioka/articles/fa0e0a8cc480b6</guid><pubDate>Fri, 24 May 2024 08:41:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VrN5EFPz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Custom%2520Search%2520Engine%25E3%2581%25A8Custom%2520Search%2520API%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E5%2586%2585%25E6%25A4%259C%25E7%25B4%25A2%25EF%25BC%2588JavaScr...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2582%2587%25E3%2581%2586%25E3%2581%2598%25E3%2582%2587%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxYjkxZTg3NzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みょうじょう</dc:creator></item><item><title><![CDATA[【React】3つの「propsの渡し方」から理解する、分割代入]]></title><description><![CDATA[
 まえがき
const { id, title, date } = eventData;
「なんだこの書き方は...？」となりがちなJavaScriptの記法、その1つが分割代入ではないでしょうか？
本記事は、「分割代入という単語は知っているけれど仕組みはよく分かっていない」 あるいは、「propsの渡し方がいくつかあって混乱している」 そんな悩みを解決する記事としてお届けします。

 本記事で解説すること


基本を学ぼう

「オブジェクト」とは？
JavaScriptの「分割代入」とは？
Reactの「props」とは？



3つの「propsの渡し方」

分割代入は使わない p...]]></description><link>https://zenn.dev/yamap_web/articles/c197f56924b3fa</link><guid isPermaLink="true">https://zenn.dev/yamap_web/articles/c197f56924b3fa</guid><pubDate>Thu, 23 May 2024 10:48:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1LjRwhpc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%25913%25E3%2581%25A4%25E3%2581%25AE%25E3%2580%258Cprops%25E3%2581%25AE%25E6%25B8%25A1%25E3%2581%2597%25E6%2596%25B9%25E3%2580%258D%25E3%2581%258B%25E3%2582%2589%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2580%2581%25E5%2588%2586%25E5%2589%25B2%25E4%25BB%25A3%25E5%2585%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2584%25E3%2581%25BE%25E3%2581%25B4%25E3%2583%25BC%2520%252F%2520Mt.Piii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwZGM5MGNmNzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>やまぴー / Mt.Piii</dc:creator></item><item><title><![CDATA[【JavaScript】Map オブジェクトについてのまとめ]]></title><description><![CDATA[LeetCodeでMapオブジェクト（ハッシュマップ）を使用して問題を解きました。
この記事ではMapオブジェクトについて学んだ内容をまとめています。
前回の記事
https://zenn.dev/sato_frontend/articles/9bee0b0a455c1d

 概要
nums: 数値が格納されている配列
target: 目標の数値
nums配列内の2つの数字を足してtargetの値になる組み合わせの値のindexを返す
上記の課題が課され、下記のようなコードがRuntimeの少ないコードだということを学習しました。
/**
 * @param {number[]} num...]]></description><link>https://zenn.dev/sato_frontend/articles/2cc7e1890d46c7</link><guid isPermaLink="true">https://zenn.dev/sato_frontend/articles/2cc7e1890d46c7</guid><pubDate>Thu, 23 May 2024 08:12:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V9rnvCA0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591Map%2520%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sato_frontend%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKenJjQm0wLUZqcjN5RzU2djJsZlY2OGswUzNlbHN5cnNYdXR0M0g9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sato_frontend</dc:creator></item></channel></rss>