<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 01 Sep 2024 05:31:19 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【AI_1日目】FastAPI_1冊目]]></title><description><![CDATA[こんにちは投資ロウトです。

 背景
AI開発ができるためにwebAPIについて理解を深めていきます。
※Tailwind CSSとkeycloakは現場でピンチになれば再開します。

 進捗状況
少しずつ進めていっていますが、現在の進捗は以下になっています。
①要件定義：1冊
②設計：1冊
③システムビジネススキル：3冊 + 1冊目(keycloakが進行中)
④インフラ：3冊
⑤フロントエンド：0冊、1冊(TailwindCSSが進行中)
⑥AI：0冊

 FastAPI
FastAPIは最近流行っているPython軽量のwebフレームのこと。
【特徴】
・FastAPIは定義ファイ...]]></description><link>https://zenn.dev/doshirote/articles/5d6e46ba7837e6</link><guid isPermaLink="true">https://zenn.dev/doshirote/articles/5d6e46ba7837e6</guid><pubDate>Sun, 01 Sep 2024 04:22:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_mECjZfU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590AI_1%25E6%2597%25A5%25E7%259B%25AE%25E3%2580%2591FastAPI_1%25E5%2586%258A%25E7%259B%25AE%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%258A%2595%25E8%25B3%2587%25E3%2583%25AD%25E3%2582%25A6%25E3%2583%2588%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM3ODY0NWMwOGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>投資ロウトの技術ブログ</dc:creator></item><item><title><![CDATA[Kaggle 変数間の組み合わせで新しい特徴量を作成]]></title><description><![CDATA[
 はじめに
本記事では、Kaggle等のデータ分析コンペで、変数間の組み合わせを簡単に作成する関数を紹介します。本記事の関数を使うことで、モデルのパフォーマンス向上に寄与できれば幸いです。

 数値データ × 数値データ

 数値データ間の四則演算
from itertools import combinations
from typing import List, Union
from concurrent.futures import ProcessPoolExecutor, as_completed
import multiprocessing

def apply_operat...]]></description><link>https://zenn.dev/mkymdk/articles/d3a7bcd0b3fbee</link><guid isPermaLink="true">https://zenn.dev/mkymdk/articles/d3a7bcd0b3fbee</guid><pubDate>Sun, 01 Sep 2024 04:20:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ah6R8ryg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kaggle%2520%25E5%25A4%2589%25E6%2595%25B0%25E9%2596%2593%25E3%2581%25AE%25E7%25B5%2584%25E3%2581%25BF%25E5%2590%2588%25E3%2582%258F%25E3%2581%259B%25E3%2581%25A7%25E6%2596%25B0%25E3%2581%2597%25E3%2581%2584%25E7%2589%25B9%25E5%25BE%25B4%25E9%2587%258F%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mukaiyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjOTQyMjgwY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mukaiyama</dc:creator></item><item><title><![CDATA[stac-assetのサンプルコード集]]></title><description><![CDATA[
 概要
STACのItemのAssetをダウンロードするツールであるstac-assetのサンプルコードを紹介する。

 環境

Windows 10
Python 3.11.5
AWS CLI aws-cli/2.17.42 Python/3.11.9 Windows/10 exe/AMD64


 環境構築

以下のコマンドを実行し、Pythonの仮想環境をセットアップする。

python -m venv venv
.\venv\Scripts\activate
pip install pystac-client stac-asset

以下のコマンドを実行し、リクエスタ支払いが...]]></description><link>https://zenn.dev/room_208/articles/ba9a501e7141f0</link><guid isPermaLink="true">https://zenn.dev/room_208/articles/ba9a501e7141f0</guid><pubDate>Sun, 01 Sep 2024 02:49:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sw6_Ddgb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:stac-asset%25E3%2581%25AE%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E9%259B%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:room_208%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MmRkNTEzN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>room_208</dc:creator></item><item><title><![CDATA[Streamlit in Snowflake (SiS) で利用ユーザー毎にパーソナライズする]]></title><description><![CDATA[
 はじめに
2024年7月末に Streamlit in Snowflake で Current_User と行アクセスポリシーが利用できるようになりました。
このアップデートの嬉しいところは、アプリケーションに接続した Snowflake ユーザーを識別し、ユーザー毎に処理を変えることが簡単かつセキュアに行うことができるようになったことです。
アプリケーションへのログインの仕組みやユーザー管理テーブルなどを独自に用意しなくても、例えば以下のように1つのアプリケーションをユーザー毎にパーソナライズすることが可能です。

ユーザー毎にアプリケーションの表示を変える
ユーザー毎にパーソナラ...]]></description><link>https://zenn.dev/tsubasa_tech/articles/a23029dfe97c46</link><guid isPermaLink="true">https://zenn.dev/tsubasa_tech/articles/a23029dfe97c46</guid><pubDate>Sat, 31 Aug 2024 14:53:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kXV2-YV0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Streamlit%2520in%2520Snowflake%2520%2528SiS%2529%2520%25E3%2581%25A7%25E5%2588%25A9%25E7%2594%25A8%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E6%25AF%258E%25E3%2581%25AB%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25BD%25E3%2583%258A%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsubasa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EyYmI4NWM0ZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsubasa</dc:creator></item><item><title><![CDATA[動的計画法の状態管理が全くわからない【AtCoder Beginner Contest 369 振り返り（茶）】]]></title><description><![CDATA[こんにちは。ダイの大冒険ガチ勢のbun913と申します。
皆さんはAtCoderという競技プログラミングに気軽に参加できるサービスをご存知でしょうか？
https://atcoder.jp/
競プロと聞くと一見とっつきにくいですが、普段プログラミングができない方でも「この制約だと絶対に2秒じゃ終わらない。俺じゃなきゃ見逃しちゃうね。」と浸れるので、とてもおすすめです。
まったく参加したことのない方でも、以下のような記事を見るだけで簡単な問題を解けるようになりますので、興味があればぜひ見てください。
https://qiita.com/drken/items/fd4e5e3630d0f58...]]></description><link>https://zenn.dev/moneyforward/articles/ab16b11987e6d8</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/ab16b11987e6d8</guid><pubDate>Sat, 31 Aug 2024 14:43:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Iw8c_9E1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258B%2595%25E7%259A%2584%25E8%25A8%2588%25E7%2594%25BB%25E6%25B3%2595%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%258C%25E5%2585%25A8%25E3%2581%258F%25E3%2582%258F%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2590AtCoder%2520Beginner%2520Contest%2520369%2520%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%25EF%25BC%2588%25E8%258C%25B6%25EF%25BC%2589%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bun913%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNGVhMDEyMDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bun913</dc:creator></item><item><title><![CDATA[【連載】LangChainの公式チュートリアルを1個ずつ地味に､地道にコツコツと【Basic編#1】]]></title><description><![CDATA[こんにちは！今回から唐突に始まりました連載記事として新シリーズ「LangChainの公式チュートリアルを1個ずつ地味に、地道にコツコツと」では、LangChainの公式チュートリアルを一つずつ丁寧に解説していきます。初心者の方にも分かりやすいように、LangChainの基本的な使い方から応用まで、少しずつ理解を深めていきましょう。まずは【Basic編#1】として、LangChainの公式チュートリアルにあるBuild a Simple LLM Application with LCELを題材にシンプルなLLM（Large Language Model）アプリケーションを構築する方法を学び...]]></description><link>https://zenn.dev/chips0711/articles/f4ed8ac37eb3a8</link><guid isPermaLink="true">https://zenn.dev/chips0711/articles/f4ed8ac37eb3a8</guid><pubDate>Sat, 31 Aug 2024 14:13:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L_6F_XBG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E9%2580%25A3%25E8%25BC%2589%25E3%2580%2591LangChain%25E3%2581%25AE%25E5%2585%25AC%25E5%25BC%258F%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25921%25E5%2580%258B%25E3%2581%259A%25E3%2581%25A4%25E5%259C%25B0%25E5%2591%25B3%25E3%2581%25AB%25EF%25BD%25A4%25E5%259C%25B0%25E9%2581%2593%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%2584%25E3%2582%25B3%25E3%2583%2584%25E3%2581%25A8%25E3%2580%2590Basic%25E7%25B7%25A8%25231%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naoki%2520Matsumoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxMjVkOWVmNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naoki Matsumoto</dc:creator></item><item><title><![CDATA[IntelOneAPI + anacondaでのpybind11]]></title><description><![CDATA[
 Intel one API利用時のpybind11
C++とPythonを連携させる方法は色々あります。ちょっとしたC++プログラムなら、普通にdllにしてctypesを使えばいいと思いますが、C++オブジェクトと連携させたい場合は面倒です。そういう場合は、個人的には、現状だとpybind11が一番良いのではないかと思っています。ですが、pybind11をIntelコンパイラ環境下で使う場合はどうすればいいのか、というのが情報が少ないようです。
そこで、「c++のコンパイラはoneAPI」「Pythonはanaconda」という環境向けに、pybind11のコンパイル方法を調べてみた...]]></description><link>https://zenn.dev/satoeu/articles/b36454fa9d37dd</link><guid isPermaLink="true">https://zenn.dev/satoeu/articles/b36454fa9d37dd</guid><pubDate>Sat, 31 Aug 2024 12:20:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2embZrFA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IntelOneAPI%2520%252B%2520anaconda%25E3%2581%25A7%25E3%2581%25AEpybind11%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:satoeu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZmpCSE9TN1Q5elBvbWcxdll1NUs2OVBNelBoay1YdVVWR3Y4OXhveHRSPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>satoeu</dc:creator></item><item><title><![CDATA[GitHub Modelsに限定招待されましたので使ってみます]]></title><description><![CDATA[GitHub Modelsの招待リストに登録したところ、先日招待されましたので色々触ってみます。



 GitHub Modelsとは
2024年8月に発表されたばかりのGitHubの新機能。
現在はプライベートプレビュー版です。
1分あたり・1日あたりの使用制限などはあるものの、ユーザーは簡単に生成AIモデルを使用することでき、精度の検証を行うことができます。
今まで各モデルごとにユーザー登録したり、有料プランに入ったり、検証するためにロジックを実装したりしていましたがGitHub Modelsを使用することでそこが簡単に・無料にできるようになりました。

 使用できるモデル一覧
以...]]></description><link>https://zenn.dev/headwaters/articles/39642d899b47a5</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/39642d899b47a5</guid><pubDate>Sat, 31 Aug 2024 10:51:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HThUUtLK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%2520Models%25E3%2581%25AB%25E9%2599%2590%25E5%25AE%259A%25E6%258B%259B%25E5%25BE%2585%25E3%2581%2595%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ikebowsan%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNTM1ZTc4OGYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ikebowsan</dc:creator></item><item><title><![CDATA[カラスの鳴き声で画像記録！?ESP-EYEで始める音声解析と画像保存表示システムの構築🎤📷]]></title><description><![CDATA[
 はじめに
本記事では、ESP-EYEを用いてカラスの鳴き声をトリガーに画像を保存するシステムの構築方法を紹介します。
このシステムは、ESP32のマイクロコントローラとサーバーを使用して音声解析を行い、カラスの鳴き声を検出すると画像をキャプチャして保存します。保存した画像はWeb画面により表示します。
以下に検出して、表示したものの例を示します。


 ESPEYEとは？
ESP-EYEは、およそ3000円という安価に購入できる、2メガピクセルのカメラとマイク内蔵のESP32開発ボードです。PCとボードがあれば、ArduinoIDE環境(C++風言語)または、ESPIDF環境(C言語...]]></description><link>https://zenn.dev/nobutan_tinou/articles/24a43665377bc7</link><guid isPermaLink="true">https://zenn.dev/nobutan_tinou/articles/24a43665377bc7</guid><pubDate>Sat, 31 Aug 2024 07:36:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mx5F6mHI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E9%25B3%25B4%25E3%2581%258D%25E5%25A3%25B0%25E3%2581%25A7%25E7%2594%25BB%25E5%2583%258F%25E8%25A8%2598%25E9%258C%25B2%25EF%25BC%2581%253FESP-EYE%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E9%259F%25B3%25E5%25A3%25B0%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%25A8%25E7%2594%25BB%25E5%2583%258F%25E4%25BF%259D%25E5%25AD%2598%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25A4%25E3%2581%25AE%25E3%2581%25B6%25E3%2580%2582%2540%25E3%2582%25B4%25E3%2583%25AD%25E3%2582%25B4%25E3%2583%25AD%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25BA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjZTExZGI3NDMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たつのぶ。@ゴロゴロシステムズ</dc:creator></item><item><title><![CDATA[ReactとDjangoでレコードの編集と削除機能を実装してみた]]></title><description><![CDATA[
 元美容師のDjangoポートフォリオリニューアル日記Part.5：編集・削除機能実装編
お疲れ様です！やぎです。
引き続き、DjangoとReactを使ってポートフォリオの作成を進めていきます！
前回の記事ではブラウザからサロン(レコード)を登録する実装しました。
今回は、さらに機能を拡張し、サロン情報の編集と削除機能を追加します。
この実装が完了すればシンプルではありますがCRUDの全ての実装が完了します。
それでは実装開始！

 今回の実装内容

サロン情報編集機能の実装
サロン削除機能の実装


 1. サロン情報編集機能の実装
まずはサロンリストに登録されている既存のサロン情...]]></description><link>https://zenn.dev/jenny/articles/fc16a18e97ff90</link><guid isPermaLink="true">https://zenn.dev/jenny/articles/fc16a18e97ff90</guid><pubDate>Fri, 30 Aug 2024 14:03:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--54H2scB1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A8Django%25E3%2581%25A7%25E3%2583%25AC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E7%25B7%25A8%25E9%259B%2586%25E3%2581%25A8%25E5%2589%258A%25E9%2599%25A4%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2584%25E3%2581%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0Y2NlYzgwYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>やぎ</dc:creator></item><item><title><![CDATA[［AtCoder］ABC-367｜B - Cut .0]]></title><description><![CDATA[
 設問ページ

🔗ABC-367 B - Cut .0



 提出結果
def getString():
    return input()


def main():
    X = getString()

    print(X.rstrip("0").rstrip("."))


if __name__ == "__main__":
    main()
]]></description><link>https://zenn.dev/hyperdb/articles/69457ae4cda784</link><guid isPermaLink="true">https://zenn.dev/hyperdb/articles/69457ae4cda784</guid><pubDate>Fri, 30 Aug 2024 04:36:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NI-GjzMg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%25BBAtCoder%25EF%25BC%25BDABC-367%25EF%25BD%259CB%2520-%2520Cut%2520.0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2584%25E3%2581%25B1%25E3%2581%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhODJkODgwMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はいぱぁ</dc:creator></item><item><title><![CDATA[［AtCoder］ABC-367｜A - Shout Everyday]]></title><description><![CDATA[
 設問ページ

🔗ABC-367 A - Shout Everyday



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    A, B, C = getIntMap()

    A = A - B if A &gt; B else A - B + 24
    C = C - B if C &gt; B else C - B + 24

    print("No" if A &lt; C else "Yes")


if __name__ == "__main__":
   ...]]></description><link>https://zenn.dev/hyperdb/articles/1fb9d083606344</link><guid isPermaLink="true">https://zenn.dev/hyperdb/articles/1fb9d083606344</guid><pubDate>Fri, 30 Aug 2024 04:36:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FVm4Xh3K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%25BBAtCoder%25EF%25BC%25BDABC-367%25EF%25BD%259CA%2520-%2520Shout%2520Everyday%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2584%25E3%2581%25B1%25E3%2581%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhODJkODgwMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はいぱぁ</dc:creator></item><item><title><![CDATA[LangGraphのMermaid出力機能とその活用事例]]></title><description><![CDATA[
 はじめに
こんにちは。PharmaX でエンジニアをしている諸岡（@hakoten）です。
この記事では、LLMアプリケーション開発をサポートするグラフ管理ツールである、LangGraphのMermaid出力機能の活用方法をご紹介します。
少しニッチな内容となりますが、既にLangGraphを使っている方や、これから使うことを検討している方にとって、参考になれば幸いです。

 LangGraphとは
LangGraphは、LangChainのツール群の一つで、LLMエージェントのステップをグラフ化し、状態管理を行うためのツールです。
LangChainは、大規模言語モデル（LLM）を...]]></description><link>https://zenn.dev/pharmax/articles/508d378ce45c9e</link><guid isPermaLink="true">https://zenn.dev/pharmax/articles/508d378ce45c9e</guid><pubDate>Fri, 30 Aug 2024 00:53:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b0OXI-iM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangGraph%25E3%2581%25AEMermaid%25E5%2587%25BA%25E5%258A%259B%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E4%25BA%258B%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hakotensan%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxNTUyMTlkOTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PharmaX%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNGM1MmE4MWMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hakotensan</dc:creator></item><item><title><![CDATA[PythonでBrainf*ckのソースコードを生成して、Brainf*ckのソースコードをPythonで実行]]></title><description><![CDATA[ネットをぶらぶらしていたら見かけたので、ちょっと遊んでみる👀
Brainf*ckは難解プログラミング言語です。
難解プログラミング言語の中で一番有名でしょうか？
少なくとも5大難解プログラミング言語の一つではありますね。

Brainf*ck
Cow
Intercal
Malbolge
Whitespace

個人的には難解プログラミング言語のコンセプトで好きなものは
Piet(ソースコードは文字ではなく色の組み合わせで表現する言語)ですが、、、
話が逸れました🦔


 PythonでBrainf*ckのソースコードを生成
Text-to-Brainfuck を使って、入力した文字列を出...]]></description><link>https://zenn.dev/kazuhito/articles/5404d7aa5ff0dd</link><guid isPermaLink="true">https://zenn.dev/kazuhito/articles/5404d7aa5ff0dd</guid><pubDate>Thu, 29 Aug 2024 13:49:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HWoD979---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7Brainf%252Ack%25E3%2581%25AE%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581Brainf%252Ack%25E3%2581%25AE%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592Python%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazuhito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZUW5XQmozQjhFcGlwOVEtSzhhelItcEV1azFOTXdteGhVeUowZHc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazuhito</dc:creator></item><item><title><![CDATA[MoviePyでオリジナルの動画のアス比を保つ方法]]></title><description><![CDATA[MoviePyを使っているとなぜか全ての動画が1920x1080扱いされる。何か使い方を間違えているのかもしれない、教えて詳しい人。
from moviepy.editor import VideoFileClip

video = VideoFileClip(input_file)

print(f"width: {video.width}")
print(f"height: {video.height}")

# どんな動画でも常に1920x1080になる。
&gt;&gt;&gt; 1920
&gt;&gt;&gt; 1080
resizeで片側だけ指定したらアス比保たれるよ！とは...]]></description><link>https://zenn.dev/seya/articles/65229be58df690</link><guid isPermaLink="true">https://zenn.dev/seya/articles/65229be58df690</guid><pubDate>Thu, 29 Aug 2024 13:19:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2aIQMAxo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MoviePy%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%25AA%25E3%2582%25B8%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25AE%25E5%258B%2595%25E7%2594%25BB%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25B9%25E6%25AF%2594%25E3%2582%2592%25E4%25BF%259D%25E3%2581%25A4%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:seya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzODg4YjM0MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>seya</dc:creator></item><item><title><![CDATA[EthereumのABIからPythonコードを自動生成するCLIツールを作った]]></title><description><![CDATA[Zenn初投稿です。
育児が少し落ち着き、スキマで時間取れるようになってきたことで、なんか作りたい欲が高まってきたので作りました。
タイトル通り、以前から作りたかったABIからPythonコードを自動生成するCLIツールを作りました。
Ethereumに限らず、Polygonなど他のEVM系のチェーンでも使えると思います。
名前は py-contract-codegen です。
ちょっと長いのですが、良い名前が思いつかずでとりあえずこれでいきます。
リポジトリはこちらです。
https://github.com/naoki-maeda/py-contract-codegen

 なぜ作っ...]]></description><link>https://zenn.dev/mnaoki/articles/8e9b4f08fd4855</link><guid isPermaLink="true">https://zenn.dev/mnaoki/articles/8e9b4f08fd4855</guid><pubDate>Thu, 29 Aug 2024 13:17:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cx8xK146--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ethereum%25E3%2581%25AEABI%25E3%2581%258B%25E3%2582%2589Python%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mnaoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlmNWNmMTY3N2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mnaoki</dc:creator></item><item><title><![CDATA[【Python】How to exchange to .py from .ipynb]]></title><description><![CDATA[
 0. Who is this article for
If you want to exchange to the .py file from .ipynb file, and using VSCode, and not working below command, you are the target of this article.
# pupular command
jupyter nbconvert --to script your_notebook.ipynb

 1. What should you do
In vscode, right-click the file, ...]]></description><link>https://zenn.dev/yuto_mo/articles/6056d15e986d3b</link><guid isPermaLink="true">https://zenn.dev/yuto_mo/articles/6056d15e986d3b</guid><pubDate>Thu, 29 Aug 2024 12:25:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FZTAV0fL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591How%2520to%2520exchange%2520to%2520.py%2520from%2520.ipynb%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0OTcwZWIzMmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu</dc:creator></item><item><title><![CDATA[Sparkでヒストグラムを作る]]></title><description><![CDATA[Sparkで処理したデータフレームのデータをヒストグラムにして表示したい。
短いファイルであればto_pandas()しても良いが、
大きなparquetファイルからヒストグラムに集計するにはsparkを使いたい。
今回は、

sparkでヒストグラムデータを作る。
matplotlibでヒストグラムを作る。
Jupyter notebookで表示

の手順でやってみた。

 pysparkでヒストグラムを作る
Spark でヒストグラムを作る関数は用意されていないので自分で用意する。
機械学習用の pyspark.ml.features モジュールにある Bucketizerというのが...]]></description><link>https://zenn.dev/rin_yokoyama/articles/ce61737f4a8018</link><guid isPermaLink="true">https://zenn.dev/rin_yokoyama/articles/ce61737f4a8018</guid><pubDate>Thu, 29 Aug 2024 09:46:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EokiiBeo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spark%25E3%2581%25A7%25E3%2583%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rin%2520Yokoyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzBYWlVIcEZaNHhRWTM1STNmTFJaTnQ1VVRMaUd5N1l4T05fMVVwNWR6d2VMaWN3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rin Yokoyama</dc:creator></item><item><title><![CDATA[Datadog トレーサーで OpenTelemetry 仕様のスパンを受け取る]]></title><description><![CDATA[
 はじめに
Datadog で分散トレースをしたいとき、Datadog が提供しているトレーサーを使ってアプリを計装できます（Python の場合は、dd-trace-py）。表題や下記ドキュメントにあるように Datadog のトレーサーは OpenTelemetry 仕様のスパンを受け取ることができます。この記事ではこの仕様がどういうことか、どういったケースで役立ちそうかを簡単に解説していきます。
https://docs.datadoghq.com/ja/tracing/trace_collection/custom_instrumentation/otel_instrument...]]></description><link>https://zenn.dev/k6s4i53rx/articles/ddtrace-supports-otel-api</link><guid isPermaLink="true">https://zenn.dev/k6s4i53rx/articles/ddtrace-supports-otel-api</guid><pubDate>Thu, 29 Aug 2024 09:34:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gUf-6opN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Datadog%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2581%25A7%2520OpenTelemetry%2520%25E4%25BB%2595%25E6%25A7%2598%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2591%25E3%2583%25B3%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E5%258F%2596%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%2580%2586%25E4%25BA%2595%2528%25E3%2581%2595%25E3%2581%258B%25E3%2581%2595%25E3%2581%2584%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FDTlBFdTkxSUU2NExXeGFLUm9DeEUxM1FKeWp6NTRVdFlPeW1ZanJuOFQ1PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>逆井(さかさい)</dc:creator></item><item><title><![CDATA[abstract class for unittest]]></title><description><![CDATA[
 背景・目的

書籍「単体テストの考え方・使い方」を読んで、より良いユニットテストのために抽象化すべきパターンを学んだ。
実際に応用してみたので、具体の方法や感想を共有できれば。


 元々知ってた抽象化

同様の振る舞い（機能要件）であるが詳細実装は異なるケースに対する抽象化。
モジュール同士の密結合を避ける（依存性逆転）用途で用いられる。
すでに実務や個人開発で積極的に利用していた。

class Animal(ABC):
    def __init__(self, name):
        self.name = name

    @abstractmethod
    ...]]></description><link>https://zenn.dev/tsugumisys/articles/0ec75dbe2f5d73</link><guid isPermaLink="true">https://zenn.dev/tsugumisys/articles/0ec75dbe2f5d73</guid><pubDate>Thu, 29 Aug 2024 06:26:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4fEuqBKI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:abstract%2520class%2520for%2520unittest%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsugumi-sys%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjZGU4NDM0N2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsugumi-sys</dc:creator></item></channel></rss>