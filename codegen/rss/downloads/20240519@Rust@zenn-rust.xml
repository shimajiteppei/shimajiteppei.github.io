<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 19 May 2024 11:37:30 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[グルーピングのためのデータ構造：Union Find Tree]]></title><description><![CDATA[
 まとめ

Union Find Tree を利用することで高速にグルーピングすることができます。
Union Find Tree は要素をインデックスで管理するため、インデックスを求めるためにコストがかかることもあります。




メソッド
計算量




find_root_idx()
O(1)


same()
O(1)


get_size()
O(1)


unite()
O(1)


size_iter()
O(n)



nは要素数

 所属するグループがわかっている場合
for文と条件式を組み合わせると何とかなります。単に２つのグループに分ける場合、標準ライブラリにある...]]></description><link>https://zenn.dev/yatyou/articles/8a14ff1925cbc5</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/8a14ff1925cbc5</guid><pubDate>Sun, 19 May 2024 07:12:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0zHppl_z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B0%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E6%25A7%258B%25E9%2580%25A0%25EF%25BC%259AUnion%2520Find%2520Tree%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yatyou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yatyou</dc:creator></item><item><title><![CDATA[Rust 基本文法 - Struct 構造体-]]></title><description><![CDATA[
 はじめに
Struct は Rust における構造体を意味します。
基本文法シリーズは全てそうなのですが、構造体の文法はかなり基本的になるので、紹介していきます。
いつものように、Rust Playground で手を動かすことができますので、良ければ一緒に書いていきましょう。
https://play.rust-lang.org/

 構造体
構造体は、データ型をまとめたものです。
Rust には データ型という概念があり、変数や関数などの要素にはデータ型というものがついてきます。
それらを一つに取りまとめたのが、構造体です。
データ型
https://doc.rust-jp.rs...]]></description><link>https://zenn.dev/collabostyle/articles/2b037847a4e243</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/2b037847a4e243</guid><pubDate>Sat, 18 May 2024 08:41:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h3DNbqWd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%259F%25BA%25E6%259C%25AC%25E6%2596%2587%25E6%25B3%2595%2520-%2520Struct%2520%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[Dioxus v0.5 でデスクトップアプリを作って学んだこと、妥協したこと]]></title><description><![CDATA[
 概要
Dioxus でデスクトップアプリを作って学んだこと、妥協したこと、所感を雑にまとめました。

 作りたかったデスクトップアプリ

DICOM ファイルを読み込んで画像を表示・ダウンロードできるデスクトップアプリです。
サポートする OS は Windows, Mac, Linux です。
リポジトリは こちら です。


 環境

cargo 1.78.0 (54d8815d0 2024-03-26)
rustup 1.27.1 (54dd3d00f 2024-04-24)
dioxus 0.5.4


 学んだこと


dx serve で起動したアプリは常にフォアグラウン...]]></description><link>https://zenn.dev/st_little/articles/lessons-compromises-desktop-app-with-dioxus-v05</link><guid isPermaLink="true">https://zenn.dev/st_little/articles/lessons-compromises-desktop-app-with-dioxus-v05</guid><pubDate>Fri, 17 May 2024 11:39:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NQh8-cNn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dioxus%2520v0.5%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A0%25E3%2581%2593%25E3%2581%25A8%25E3%2580%2581%25E5%25A6%25A5%25E5%258D%2594%25E3%2581%2597%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:st-little%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MzFRX0lpMkZWUVdwclRKOUluaXJPN092TlI2WkV6c1A3WGRRMTU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>st-little</dc:creator></item><item><title><![CDATA[proconioで入力を受け取るメモ]]></title><description><![CDATA[
 整数の入力
改行でもスペース区切りでも関係ないです。

 入力
N
A B

input! {
    n: usize,
    a: isize,
    b: isize
}

 文字列の入力
input!の型にBytesを指定すると、入力された文字列をVec&lt;u8&gt;に変換してくれます。
もちろんStringも指定できますし、Vec&lt;char&gt;にしてくれるCharsもありますが、基本u8内に収まりますし、後でs[i] - b'a'のような操作がしやすいのでVec&lt;u8&gt;推しです。

 入力
S

input! {
    s: Bytes
}...]]></description><link>https://zenn.dev/maple8192/articles/ad8754759ec01c</link><guid isPermaLink="true">https://zenn.dev/maple8192/articles/ad8754759ec01c</guid><pubDate>Fri, 17 May 2024 09:42:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TbBkvOE8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:proconio%25E3%2581%25A7%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E5%258F%2596%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%25E3%2581%2587%25E3%2581%25B7%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lIdGRwYVVQaFV1UVlEdEMtYy1UbVFJb1dEY0xxNGk2WWhOekV6PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>めぇぷる</dc:creator></item><item><title><![CDATA[依存関係の脆弱性確認：cargo auditメモ [blessed.rsシリーズ9]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo auditについてです。

 cargo auditとは
脆弱性を持つクレートの依存関係をRustSec Advisory Databaseから見つけるツール

 わかりやすい記事
https://zenn.dev/shinyay/articles/hello-rust-day072

 install
https://github.com/RustSec/rustsec/tree/main/cargo-audit#installation
$ cargo...]]></description><link>https://zenn.dev/kotabrog/articles/518d43b8ac2e19</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/518d43b8ac2e19</guid><pubDate>Thu, 16 May 2024 11:23:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3Gib0zBs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2581%25AE%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E7%25A2%25BA%25E8%25AA%258D%25EF%25BC%259Acargo%2520audit%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA9%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[依存関係のversion確認：cargo-outdatedメモ [blessed.rsシリーズ8]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-outdatedについてです。

 cargo-outdatedとは
古くなった依存関係を表示するcargoの拡張機能

 わかりやすい記事
https://zenn.dev/shinyay/articles/hello-rust-day071

 install
https://github.com/kbknapp/cargo-outdated?tab=readme-ov-file#installing
$ cargo install --locked ...]]></description><link>https://zenn.dev/kotabrog/articles/30f4c3ac087bc4</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/30f4c3ac087bc4</guid><pubDate>Wed, 15 May 2024 13:56:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sll9JfLB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2581%25AEversion%25E7%25A2%25BA%25E8%25AA%258D%25EF%25BC%259Acargo-outdated%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA8%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[「The Rust Programming Language 日本語版」を読んだ備忘録⑤]]></title><description><![CDATA[
 16.並行処理

 スレッドを生成して、複数のコードを同時に走らせる方法
【スレッドの簡単な説明】
OSでは実行中のプログラムのコードはプロセスで走り、OSは同時に複数のプロセスを管理する。
自分のプログラム内で、独立した部分を同時に実行でき、その独立した部分を走らせる機能をスレッドと呼ぶ。
プログラム内の計算を複数のスレッドに分けると同時に複数の作業を行うためパフォーマンスが改善する。
一方で複雑度が増すという害もある。
スレッドを同時に走らせることが出来るので、異なるスレッドのコードが走る順番に関して保証はない。
そのため、以下のような問題が生じる可能性もある。
・スレッドがデー...]]></description><link>https://zenn.dev/matcha22/articles/7e012b48521f38</link><guid isPermaLink="true">https://zenn.dev/matcha22/articles/7e012b48521f38</guid><pubDate>Wed, 15 May 2024 12:55:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TaXOd0WZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CThe%2520Rust%2520Programming%2520Language%2520%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E7%2589%2588%25E3%2580%258D%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E2%2591%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matcha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MTA1OWFmZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matcha</dc:creator></item><item><title><![CDATA[完全理解: AWS Lambda with Go and Rust]]></title><description><![CDATA[
 完全理解: AWS Lambda with Go and Rust
AWS Lambda functionを書いていて、「だいたいの仕組みはわかったけどなんか下層の解像度が低くてしっくりこないなぁ」と思ったことはないですか？ この記事では、AWS Lambdaのそんなちょっと下側の部分について「完全に理解した」となるような解説をしていきます。AWS Lambda functionを書くためのランタイムライブラリについてもGo版とRust版のそれぞれについて解説をします。
注: 「完全に理解した」とはインターネット上のミームの方で、真に完全に理解するような深堀り・網羅性はありません。
...]]></description><link>https://zenn.dev/taiki45/articles/aws-lambda-with-go-and-rust</link><guid isPermaLink="true">https://zenn.dev/taiki45/articles/aws-lambda-with-go-and-rust</guid><pubDate>Wed, 15 May 2024 09:26:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vI3MXDAj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%258C%25E5%2585%25A8%25E7%2590%2586%25E8%25A7%25A3%253A%2520AWS%2520Lambda%2520with%2520Go%2520and%2520Rust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taiki45%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc4NTFiZjgwMjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taiki45</dc:creator></item><item><title><![CDATA[ChaCha20をRustで実装してみた]]></title><description><![CDATA[
 はじめに
暗号シリーズ
今回は疑似乱数で一番有名なChaCha20を解説していく
以下のような人向け

ChaCha20ってなに
ChaCha20は知っているけどアルゴリズムは知らない
疑似乱数の基本を知りたい

Rustで実装していく。
ソースコードはここ
https://github.com/watason/angou-rs

 ChaCha20とは
djb作共通鍵暗号アルゴリズムSalsa20の後継。
普通に共通鍵暗号として使用されることはほとんどなく
（..多分ないけど有ったら教えてほしい）、
実用上では疑似乱数アルゴリズムとして使用されている。
追記：SSHやTLS、IPS...]]></description><link>https://zenn.dev/watason/articles/03163a9c27a5f2</link><guid isPermaLink="true">https://zenn.dev/watason/articles/03163a9c27a5f2</guid><pubDate>Wed, 15 May 2024 06:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1TcQgSzj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChaCha20%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:w4tson%252F%25E3%2583%25AF%25E3%2583%2588%25E3%2582%25BD%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WlBQOHJWRUN1NnZrSmVtanViX3MxWlNJVm1YdEpMNHNRTUtLWEI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>w4tson/ワトソン</dc:creator></item><item><title><![CDATA[コマンドラインからCargo.tomlを編集：cargo-editメモ [blessed.rsシリーズ7]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-editについてです。

 cargo-editとは
Cargoを拡張し、コマンドラインからCargo.tomlを修正して、依存関係を追加、削除、アップグレードすることができるようにするツール

 わかりやすい記事
https://zenn.dev/shinyay/articles/hello-rust-day070

 install
https://github.com/killercup/cargo-edit?tab=readme-ov-file
以...]]></description><link>https://zenn.dev/kotabrog/articles/221f77517df425</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/221f77517df425</guid><pubDate>Mon, 13 May 2024 11:44:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HRnag-MW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%258B%25E3%2582%2589Cargo.toml%25E3%2582%2592%25E7%25B7%25A8%25E9%259B%2586%25EF%25BC%259Acargo-edit%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA7%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[実用Rustアプリケーション開発]]></title><description><![CDATA[実世界のRustアプリケーションを効率良く開発するための実用的な知見集

仕事などで実世界のRustアプリケーションを書く時に実用的な知見やtipsがまとまっていたらいいなと思ったことはありませんか？

この本では、アプリケーションを書く時に悩むポイントや便利crateを素早くアプリケーションに組み込む際のポイントを紹介します。本の内容をスリムにするため、自分が学び始める前に知りたかったものに絞りつつ要所を紹介・解説します。Rustの言語仕様のメジャーどころやよく利用されているcrateはドキュメントが豊富なので、わからないところや詳しく知りたい部分はドキュメントを読んだりLLMに聞いてみたりしてください。

想定読者: "The Rust Programming Language" の要所を読み終えたくらいのこれからRustでアプリケーションコードを書いていく、または今まさにアプリケーションコードを書きながらRustを学んでいる方。

また、この本はCLIアプリケーションやwebアプリケーションにフォーカスした内容になっています。
]]></description><link>https://zenn.dev/taiki45/books/pragmatic-rust-application-development</link><guid isPermaLink="true">https://zenn.dev/taiki45/books/pragmatic-rust-application-development</guid><pubDate>Sun, 12 May 2024 23:31:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d5H1gDSc--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci80NTU5NzIxOTE4LnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>taiki45</dc:creator></item><item><title><![CDATA[bitflagsを用いたRustの簡単なフラグ管理メモ]]></title><description><![CDATA[
スクラップにメモしていたシリーズです。bitflagsクレートで複数のboolフラグを取り扱う方法を調べた結果のメモです。[bitflags "2.5.0"]

 前提

Cargo.toml
[dependencies]
bitflags = "2.5.0"


 サンプルコード
use bitflags::bitflags;

fn main() {
    bitflags! {
        #[derive(Debug, Default)]
        struct Fruits: u8 {
            const APPLE  = 0b00000001;
...]]></description><link>https://zenn.dev/scirexs/articles/a045821b7d89df</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/a045821b7d89df</guid><pubDate>Sun, 12 May 2024 21:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pvy8rxKz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:bitflags%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259FRust%25E3%2581%25AE%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25B0%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[「The Rust Programming Language 日本語版」を読んだ備忘録④]]></title><description><![CDATA[https://zenn.dev/matcha22/articles/1f5bdb36237150
の続き

 13.イテレータとクロージャ
クロージャ：変数に保存できる関数に似た文法要素
「The Rust Programming Language」の補助資料として、下記の動画を参考にした
参考：https://www.youtube.com/watch?v=tw2WCjBTgRM&amp;t=11265s
難しい部分を嚙み砕いて説明してくれているのでとてもありがたい動画
fn main(){

fn add_one_v1 (x:u32) -&gt; u32{
    x+1
}

l...]]></description><link>https://zenn.dev/matcha22/articles/bbe838d5fd5142</link><guid isPermaLink="true">https://zenn.dev/matcha22/articles/bbe838d5fd5142</guid><pubDate>Sun, 12 May 2024 16:54:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gJ7itkly--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CThe%2520Rust%2520Programming%2520Language%2520%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E7%2589%2588%25E3%2580%258D%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E2%2591%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matcha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MTA1OWFmZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matcha</dc:creator></item><item><title><![CDATA[RustでECDSA公開鍵からETHアドレスを生成]]></title><description><![CDATA[
 はじめに
2024年4月からブロックチェーン公開講座を受講しています。今までなんとなく漠然と理解していたことを知識として体系的に整理できて、とてもありがたい講座です。
5月7日(火)の第5回は『イーサリアム』ではECDSA公開鍵からEthereumのアドレスを生成する方法についても学びましたので、復習のためRustで試してみました。
あくまでもRustとBlockchainの学習を目的として書いたものですので、実運用では信頼できるライブラリをお使いください。

 アルゴリズム

ECDSA公開鍵(512bit)をKeccak256でハッシュ化する
1の末尾20bytesを取り出しHE...]]></description><link>https://zenn.dev/halifax/articles/rust_crypto_03_eth_address</link><guid isPermaLink="true">https://zenn.dev/halifax/articles/rust_crypto_03_eth_address</guid><pubDate>Sun, 12 May 2024 16:45:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u0mX1urM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7ECDSA%25E5%2585%25AC%25E9%2596%258B%25E9%258D%25B5%25E3%2581%258B%25E3%2582%2589ETH%25E3%2582%25A2%25E3%2583%2589%25E3%2583%25AC%25E3%2582%25B9%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:halifax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNWUxM2Q5YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>halifax</dc:creator></item><item><title><![CDATA[Backend CanisterでHTTP応答を返す (Rust)]]></title><description><![CDATA[
 はじめに
Internet Computer（IC）と呼ばれる分散クラウド環境で動作するCanisterをRust言語で開発するために調査した内容をまとめています。
前回の『はじめてのCanister開発 (Rust)』では、dfx newコマンドを実行してBackend CanisterとFrontend Canisterが生成されることを解説しました。生成されたHelloサンプルでは、Backend CanisterにCandidと呼ばれるIDL定義に対応した公開インタフェースを用意し、静的Webホスティングとして機能するFrontend Canister（Asset Canis...]]></description><link>https://zenn.dev/halifax/articles/ic_rust_02_http_handle</link><guid isPermaLink="true">https://zenn.dev/halifax/articles/ic_rust_02_http_handle</guid><pubDate>Sun, 12 May 2024 16:45:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zSE-Q-gv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Backend%2520Canister%25E3%2581%25A7HTTP%25E5%25BF%259C%25E7%25AD%2594%25E3%2582%2592%25E8%25BF%2594%25E3%2581%2599%2520%2528Rust%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:halifax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNWUxM2Q5YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>halifax</dc:creator></item><item><title><![CDATA[WASMに環境変数を渡す方法]]></title><description><![CDATA[
 はじめに
DioxusやYewなどwasmをフロントで利用するアプリを開発しているとき環境変数を渡すのに少し工夫が必要です。
以下の記事を試してみたのですが、ちょっと違う方法もあったので記事にしてみます。
How to pass environment variables to a Rust WASM application like Yew, Dioxus and Leptos as a TypeScript Developer

 結論
参考記事とほぼ同じですが、ビルドスクリプトを利用するとファイルを出力せずに環境変数をwasmファイルから読み込めます。
参考

 build.r...]]></description><link>https://zenn.dev/fabomb/articles/15501256943e9e</link><guid isPermaLink="true">https://zenn.dev/fabomb/articles/15501256943e9e</guid><pubDate>Sun, 12 May 2024 06:58:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4QF-x5gE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WASM%25E3%2581%25AB%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592%25E6%25B8%25A1%25E3%2581%2599%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:FaBomb%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZlVjSlNId3JLalBqOTczT2lqN2lmQ09OS2lnMmdrNmkyU0p6T0Racy1UYWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FaBomb</dc:creator></item><item><title><![CDATA[df-pnアルゴリズムをRustで実装して公開しました]]></title><description><![CDATA[やねうら王さんの記事が話題になっていたので、便乗して以前 Rust で実装した df-pn アルゴリズムの実装を整理して公開しました。
試しに 15 手詰めを解かせたところ 3 秒程度で解けているのでそこそこ優秀なんじゃないでしょうか。（もちろん問題によるでしょうが）
リポジトリはこちらです。
正直、個人的に C++や Python のコードはとても追いづらくて辛いので Rust で書いた df-pn の実装が誰かの理解に役立てば幸いです。

 使い方
READMEにも書いた通りですが、将棋の盤面を AA で書いたファイルを引数に渡すと詰み盤面を探索します。
詰みの全パターンを網羅して出...]]></description><link>https://zenn.dev/malt03/articles/9fa37b6bf812f0</link><guid isPermaLink="true">https://zenn.dev/malt03/articles/9fa37b6bf812f0</guid><pubDate>Sat, 11 May 2024 17:51:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i3mq06Lw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:df-pn%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B4%25E3%2583%25AA%25E3%2582%25BA%25E3%2583%25A0%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:malt03%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwMTJkOWYwYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>malt03</dc:creator></item><item><title><![CDATA[[Rust] 静的ディスパッチ(Enum)と動的ディスパッチ(dyn Trait)はどちらが速いのか？]]></title><description><![CDATA[ある時、 Rust で動的ポリモーフィズムを実現するには、 Enum は dyn Trait より遅いという主張を見ました。 dyn Trait は仮想関数テーブルのルックアップがある分、遅いはずだと思っていたので、これは確かめてみようと思いました。
ただし、このようなマイクロベンチマークは話半分ぐらいに思っておいた方が良いです。実際のコードではオプティマイザがかなり仕事をするので、本当にスピードが問題になる局面では実際のコードでプロファイルを取った方が良いです。
この記事では rustc -O を使って最適化を適用しています。

 Enum の実装
実用的には(平均的には) 5 種類ぐ...]]></description><link>https://zenn.dev/msakuta/articles/d83e0f80e20022</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/d83e0f80e20022</guid><pubDate>Sat, 11 May 2024 05:22:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M6YagCwD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E9%259D%2599%25E7%259A%2584%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25B9%25E3%2583%2591%25E3%2583%2583%25E3%2583%2581%2528Enum%2529%25E3%2581%25A8%25E5%258B%2595%25E7%259A%2584%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25B9%25E3%2583%2591%25E3%2583%2583%25E3%2583%2581%2528dyn%2520Trait%2529%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%25A1%25E3%2582%2589%25E3%2581%258C%25E9%2580%259F%25E3%2581%2584%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[cargo-zigbuildメモ [blessed.rsシリーズ6]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモの共有です。
内容はまとめておらず、順番もぐちゃぐちゃ。あくまでメモになります。
また、網羅的にメモしているわけではなく、自分が必要だと思ったもののみメモしているため、内容が偏っているかもしれません。
今回はcargo-zigbuildについてです。

 cargo-zigbuildとは
リンカとしてzigを使用してクロスコンパイルを行うツール

 install
https://github.com/rust-cross/cargo-zigbuild?tab=readme-ov-fil...]]></description><link>https://zenn.dev/kotabrog/articles/021af38c7e4bb4</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/021af38c7e4bb4</guid><pubDate>Fri, 10 May 2024 14:21:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b8V1-nEZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-zigbuild%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA6%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[「The Rust Programming Language 日本語版」を読んだ備忘録③]]></title><description><![CDATA[https://zenn.dev/matcha22/articles/03b4b3097a8bd0
の続き

 11.自動テスト
テスト関数が行う3つの動作
1.必要なデータや状態をセットアップする。
2.テスト対象のコードを走らせる。
3.結果が想定通りであることを断定（以下、アサーションという）する。
テストの例
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2 + 2, 4);
    }
}
fn main() {}

// $ cargo test
//    Com...]]></description><link>https://zenn.dev/matcha22/articles/1f5bdb36237150</link><guid isPermaLink="true">https://zenn.dev/matcha22/articles/1f5bdb36237150</guid><pubDate>Fri, 10 May 2024 12:24:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--77zW612H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CThe%2520Rust%2520Programming%2520Language%2520%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E7%2589%2588%25E3%2580%258D%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E2%2591%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matcha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MTA1OWFmZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matcha</dc:creator></item></channel></rss>