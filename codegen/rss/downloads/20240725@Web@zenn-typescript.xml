<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 25 Jul 2024 04:36:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Github CopilotみたいなAIアシスト日記エディターを作る]]></title><description><![CDATA[
 はじめに
Github Copilotって便利ですよね。コードを一部分だけ打っても、内容を予測して続きを予測して保管してくれます。
例えば日記のようなコード以外の文章を打つときでも文章を補完してくれるエディタがあればいいのにな、と思いたち、自分で作成してみました。
技術的な学びについて解説を加えていきます。
なお、Claudeを使いながら作成しているため不自然なコードが含まれている可能性があります。ご注意ください。

 作ったもの
文字を入力すると、予測した続きの文章がグレーで表示されます。Tabキーを押すと確定します。


 コード
コード

src/app/api/route.t...]]></description><link>https://zenn.dev/k_zumi_dev/articles/37aa04f584d7df</link><guid isPermaLink="true">https://zenn.dev/k_zumi_dev/articles/37aa04f584d7df</guid><pubDate>Thu, 25 Jul 2024 03:08:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uFXjQUDH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Github%2520Copilot%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AAAI%25E3%2582%25A2%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2588%25E6%2597%25A5%25E8%25A8%2598%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k_zumi_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiMTRjZTg1MTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k_zumi_dev</dc:creator></item><item><title><![CDATA[事実、LLM の API は違いすぎる！]]></title><description><![CDATA[事実、LLM の API は違いすぎる！
どういうことかというと、LLM のプロバイダ間で API の互換性がないということです。
そう思いませんか？

 CrossLM
私は作っている PoC のライブラリです。
さまざまな LLM API のプロバイダの API の差異を吸収してくれるラッパーです。
deno add @pnsk-lab/crosslm # Deno
bunx jsr add @pnsk-lab/crosslm # Bun
pnpm dlx jsr add @pnsk-lab/crosslm # pnpm
でインストールし、
import { CrossLM } fr...]]></description><link>https://zenn.dev/nakasyou/articles/llm_api_merge</link><guid isPermaLink="true">https://zenn.dev/nakasyou/articles/llm_api_merge</guid><pubDate>Thu, 25 Jul 2024 03:00:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NV-OvW0r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BA%258B%25E5%25AE%259F%25E3%2580%2581LLM%2520%25E3%2581%25AE%2520API%2520%25E3%2581%25AF%25E9%2581%2595%25E3%2581%2584%25E3%2581%2599%25E3%2581%258E%25E3%2582%258B%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakasyou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NTAyNDNlNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakasyou</dc:creator></item><item><title><![CDATA[無名関数にジェネリック型を追加する方法]]></title><description><![CDATA[
 ジェネリック型の必要性
特にデータのコレクション（配列など）を扱う場合、任意のタイプのデータを変換できる関数を持つことが一般的です。この種の関数を汎用的に保ち、型を維持するためには、ジェネリック型を使用する必要があります。

 ジェネリック型を持つ無名関数の書き方
無名関数がジェネリック型で動作するためには、ジェネリック型のシグネチャで始める必要があります。
&lt;T&gt;() =&gt; {}
これを踏まえて、型Tの配列を受け取り、そのコレクションに対して何らかの操作を行い、型Tの配列を返す関数を書くことができます。

 ジェネリック型を使用した例
例えば、配列から最初のn要素...]]></description><link>https://zenn.dev/nomikazu_x/articles/typescript-add-generic-type-to-function</link><guid isPermaLink="true">https://zenn.dev/nomikazu_x/articles/typescript-add-generic-type-to-function</guid><pubDate>Wed, 24 Jul 2024 23:17:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2RVEFsSl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2584%25A1%25E5%2590%258D%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AB%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25AF%25E5%259E%258B%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nomikazu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5Zjg3ZDg5NmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nomikazu</dc:creator></item><item><title><![CDATA[FirestoreでGROUP BYを実現するObject.groupBy]]></title><description><![CDATA[
 状況
firestoreからのデータ取得時はGROUP BY句と同等の機能が存在しません。
Remixとfirebaseを使ってtodoリストを作成していて、firestoreからのデータ読み出し時にtodoをグループに分類して管理したいと思った時の話です。
データ取得後にfilterメソッドなどを使ってグループごとにまとめ直すしかないのか、と思って探していたら、JavaScriptのObject.groupByを見つけました。
しかし、TypeScriptを使っていたのでVSCode上でTypeScriptの型エラーが出て困ったり、出力方法を悩んだり勉強になったので備忘録です。

...]]></description><link>https://zenn.dev/nofi/articles/3983b1aabdc1ab</link><guid isPermaLink="true">https://zenn.dev/nofi/articles/3983b1aabdc1ab</guid><pubDate>Wed, 24 Jul 2024 23:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OsV-4e3S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Firestore%25E3%2581%25A7GROUP%2520BY%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258BObject.groupBy%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nofi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzYTc3YjFlMmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nofi</dc:creator></item><item><title><![CDATA[Svelte5で可変複数個のSnippetを受取るTabsコンポーネント作成メモ]]></title><description><![CDATA[
Svelte5で学習用Webアプリを作成している中でTabsコンポーネントが欲しくなったので作成しました。基礎ライブラリとしての各コンポーネントはできるだけ他のコンポーネントファイルに依存してほしくない事と、HTMLライクで直感的な構造記述の両立が悩ましかったです。まだ妥協できるラインのものができたので、スタイリング等を除いた基本機能部分を備忘メモとして残しておきます。

 作成したコンポーネント

 REPL
https://svelte-5-preview.vercel.app/#H4sIAAAAAAAACq1UTW_bMAz9K4Q2DDFg2Gt7S21jO2_YinXDDlE...]]></description><link>https://zenn.dev/scirexs/articles/e6062fc318ab55</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/e6062fc318ab55</guid><pubDate>Wed, 24 Jul 2024 21:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H6w4DFjp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Svelte5%25E3%2581%25A7%25E5%258F%25AF%25E5%25A4%2589%25E8%25A4%2587%25E6%2595%25B0%25E5%2580%258B%25E3%2581%25AESnippet%25E3%2582%2592%25E5%258F%2597%25E5%258F%2596%25E3%2582%258BTabs%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E4%25BD%259C%25E6%2588%2590%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[TSの条件型の条件部に型パラメータが突っ込まれたときの挙動]]></title><description><![CDATA[TypeScriptの条件型は、このような見た目をした型です。
type IsString&lt;T&gt; = T extends string ? string : never;
この型は、型パラメータTがstring型に割り当て可能な型であればstring型を返し、そうでなければnever型を返します。では、Tの位置に与えられた型がまた型パラメータを含む場合はどうなるのでしょうか？
そもそものシチュエーションが想像しにくいと思うので、具体例を見ながら説明していきましょう。
type Conditional&lt;T&gt; = T extends Record&lt;string,...]]></description><link>https://zenn.dev/mshaka/articles/6eb705821c7c32</link><guid isPermaLink="true">https://zenn.dev/mshaka/articles/6eb705821c7c32</guid><pubDate>Wed, 24 Jul 2024 12:33:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3uXpsvj_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TS%25E3%2581%25AE%25E6%259D%25A1%25E4%25BB%25B6%25E5%259E%258B%25E3%2581%25AE%25E6%259D%25A1%25E4%25BB%25B6%25E9%2583%25A8%25E3%2581%25AB%25E5%259E%258B%25E3%2583%2591%25E3%2583%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%258C%25E7%25AA%2581%25E3%2581%25A3%25E8%25BE%25BC%25E3%2581%25BE%25E3%2582%258C%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BB%25E3%2581%25A8%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MGMxZmFkMjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ほとけ</dc:creator></item><item><title><![CDATA[【Cloudflare D1】テーブルをdirzzle-kitを使って作成するか、wranglerを使って作成するか]]></title><description><![CDATA[
 まえがき

 記事の内容
通常、Cloudflare D1でテーブルを作成するには、wranglerを使います。
そして、drizzle-ormを使ってデータベースを管理すると、dirzzle-kitを使ってテーブルを作成できます。
両方の方法を備忘録として残しておきます。
備忘録なので、まとまっていないかもしれませんが、誰かの役に立てば幸いです。

 データベース名
データベース名はtodo-dbとします。

 wranglerを使って、テーブルを作成
https://orm.drizzle.team/kit-docs/config-reference

 drizzle.conf...]]></description><link>https://zenn.dev/arafipro/articles/2024-07-24-drizzle-d1-table</link><guid isPermaLink="true">https://zenn.dev/arafipro/articles/2024-07-24-drizzle-d1-table</guid><pubDate>Wed, 24 Jul 2024 04:55:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aBpD0hRn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Cloudflare%2520D1%25E3%2580%2591%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AB%25E3%2582%2592dirzzle-kit%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2581%258B%25E3%2580%2581wrangler%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:arafipro%2528HIROKI%2520CH...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MkV5bG4zYzRDaTR3UldhS01Ba3hQMDdvSUVNTHMxS0pub211T089czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>arafipro(HIROKI CHIYODA)</dc:creator></item><item><title><![CDATA[ts-fix で足りない import を自動で追加してみる]]></title><description><![CDATA[
 はじめに
TypeScript を書いていて大規模な置換などを行うと
足りない import が大量発生したときに手動で対応すると大変です。
VSCode などを使っていると知っているかもしれませんが
TypeScript の本体には足りない import を追加する機能があります。
これを tsserver などから叩くこともできると思うのですが…私には難しかったです。
別の手段を探してみました。

 ts-fix が便利そう
Microsoft のエンジニアさんが作ったと思われる下記の ts-fix という CLI ツールを使えば
TypeScript の codefix を C...]]></description><link>https://zenn.dev/rithmety/articles/20240724-add-import-with-ts-fix-74384dd3ecbd04</link><guid isPermaLink="true">https://zenn.dev/rithmety/articles/20240724-add-import-with-ts-fix-74384dd3ecbd04</guid><pubDate>Wed, 24 Jul 2024 04:54:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--p9TLEiga--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ts-fix%2520%25E3%2581%25A7%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%2584%2520import%2520%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rithmety%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3MmNiNTI5YzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rithmety</dc:creator></item><item><title><![CDATA[Svelte5のSnippet引数型付けと動的生成についてメモ]]></title><description><![CDATA[
Tabsコンポーネントを作るために色々とSnippetについて調べましたが、結局活用できませんでした。調べた内容で忘れそうなところをメモとして残しておきます。

 Snippetの型付けと活用

 型付け
Snippet引数の型はタプル[T, U, ...]として表現する。

Example.svelte
&lt;script context="module" lang="ts"&gt;
  import type { Snippet } from "svelte";
  export type Props = {
    foo: Snippet&lt;[number]&gt;,
 ...]]></description><link>https://zenn.dev/scirexs/articles/82be7e26142bca</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/82be7e26142bca</guid><pubDate>Tue, 23 Jul 2024 21:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--afw22XkG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Svelte5%25E3%2581%25AESnippet%25E5%25BC%2595%25E6%2595%25B0%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25A8%25E5%258B%2595%25E7%259A%2584%25E7%2594%259F%25E6%2588%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[React.lazyとは一体？？]]></title><description><![CDATA[
 はじめに
今までReact.lazy使ったことなかったんですけど、パフォーマンスの重要に対して意識を持つようになってから、React.lazyが役立つって知りました。なので今回学んだことをまとめてみました！

 React.lazyは何をしているのか
React.lazyを使うと、初回のレンダリング負担を軽減できます。どういうことかというと、必要なときにだけコンポーネントを読み込むんです。これによって、最初にアプリがロードされるときのスピードが上がり、ユーザー体験が向上します。
また、React.lazyは、アプリのパーツを分けて、それぞれ必要なときにだけ読み込む「コードスプリッティ...]]></description><link>https://zenn.dev/gemcook/articles/66eb923e761a90</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/66eb923e761a90</guid><pubDate>Tue, 23 Jul 2024 09:20:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ebfXieBV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React.lazy%25E3%2581%25A8%25E3%2581%25AF%25E4%25B8%2580%25E4%25BD%2593%25EF%25BC%259F%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25A6%25E3%2582%2593%25E3%2582%2580%25E3%2581%2599%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pDOVl3NGNrMndZZXFVWWE1eWZrdkpHUURmNFJCNGFwN1FIUGVLPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てんむす</dc:creator></item><item><title><![CDATA[WEBコンポ―ネントでデザインシステム構築した感想（Vite・Vue3）]]></title><description><![CDATA[
 WEBコンポ―ネントでデザインシステム構築した感想

 はじめに
自社内で使いまわしできるデザインシステムをWEBコンポーネントで制作しました。

 目的

メンバー間の技術力に大きな偏りがある中で円滑に保守管理を行う
業務の効率化（共通のUI・UXをすぐに利用できる）
品質の保持（デザインの統一性やアクセシビリティの共通化など）


 事情
なぜWEBコンポーネントという結論になったのかという点については、社内の独特するぎる事情が複雑にあるためここでは割愛させていただきます。
とにかく、この方法しかないという結論に至り決行しました。

 技術

 おもな開発環境

Vite
Vue...]]></description><link>https://zenn.dev/shu_saginoya/articles/c50c216d04221e</link><guid isPermaLink="true">https://zenn.dev/shu_saginoya/articles/c50c216d04221e</guid><pubDate>Tue, 23 Jul 2024 08:08:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gZVkoRWA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WEB%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E2%2580%2595%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%259F%25E6%2584%259F%25E6%2583%25B3%25EF%25BC%2588Vite%25E3%2583%25BBVue3%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shu-saginoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MjRhU1czaC1GWk5xQThjWmRUN2xhRXhmc09Lc1U5N3duU1dCek09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shu-saginoya</dc:creator></item><item><title><![CDATA[Firebase Genkit入門]]></title><description><![CDATA[Firebase Genkit は、開発者がAI搭載のアプリケーションを作成するのを支援するオープンソースフレームワークです。
このチュートリアルでは、Firebase Genkitの基本原理を探り、開発プロセスをどのように向上させるかを説明します。
備考: 以下英語記事の翻訳版なので、日本語として言い回し変なところあるかもですが、ご了承ください(´・ω・｀)汗
https://medium.com/@yukinagae/your-first-guide-to-getting-started-with-firebase-genkit-6948d88e8a92

 急いでいる人のためのクイ...]]></description><link>https://zenn.dev/cureapp/articles/ab5382ce510c8c</link><guid isPermaLink="true">https://zenn.dev/cureapp/articles/ab5382ce510c8c</guid><pubDate>Tue, 23 Jul 2024 04:04:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--36FfgNz_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Firebase%2520Genkit%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yukinagae%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1MThkMWZlMzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:CureApp%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dJaGJ0cmVPNThxQ2UyVnd5S3lRTC02MTEtejJaUDVsTUQwVkpNMUE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukinagae</dc:creator></item><item><title><![CDATA[[memo]Netflixのクローンを作るチュートリアル過程で気になったことを雑に残しておく]]></title><description><![CDATA[
 前提
こちらの記事を参考にNetflixのクローンアプリを作成しています。
その際に個人的に気になったことのメモになります。
後々丁寧に書き直せたらと思っています..(ｱｸﾏﾃﾞｶﾞﾝﾎﾞｳﾃﾞｽ)
https://zenn.dev/gunners6518/books/4c4672f32dd100

 Chapter02 1章 TMDBの下準備
TMDBの設定が変わっていてAPI KEYを取得するために、アプリURLとかが必要になっていました。
そのため、先に下記を行っておくといいかもしれないです。

Chapter03 2章 環境構築　を参考に、以下を実施。

教材にあるリポジトリ...]]></description><link>https://zenn.dev/kon_kon_nok/articles/1a6ed5ad191acf</link><guid isPermaLink="true">https://zenn.dev/kon_kon_nok/articles/1a6ed5ad191acf</guid><pubDate>Tue, 23 Jul 2024 00:53:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BE8B38g7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bmemo%255DNetflix%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E9%2581%258E%25E7%25A8%258B%25E3%2581%25A7%25E6%25B0%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E9%259B%2591%25E3%2581%25AB%25E6%25AE%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NOK%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzOGRjOTRmMzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NOK</dc:creator></item><item><title><![CDATA[TypeScriptにてgRPC Clientのメソッドへpromisifyを適用する]]></title><description><![CDATA[こんにちは。エンジニアのYです。
データ連携（バッチ取り込み）機能のGA版ではバッチの設定を管理するWeb APIを開発しました。Web APIはgRPCサーバーをバックエンドとするBFFサーバーにより構成されています。BFFサーバーはTypeScriptにより実装されており、スキーマから自動生成されたgRPC Clientを通じてgRPCメソッドを呼び出しています。gRPC Clientのメソッドコールはコールバックによる非同期処理が実装されているため、そのまま使用すると可読性の低いコードになってしまいます。
今回はutil.promisifyを用いてasync/awaitを用いたgR...]]></description><link>https://zenn.dev/sprocket/articles/171eba8e6c7d7b</link><guid isPermaLink="true">https://zenn.dev/sprocket/articles/171eba8e6c7d7b</guid><pubDate>Tue, 23 Jul 2024 00:22:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L9yKYTOX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AB%25E3%2581%25A6gRPC%2520Client%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25B8promisify%25E3%2582%2592%25E9%2581%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Sprocket%2520Zenn%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA1ZWQxMjFmN2UuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Sprocket%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMyY2UxY2ZlNWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sprocket Zenn</dc:creator></item><item><title><![CDATA[namespaceを使って、コンポーネントのインポートを整理する]]></title><description><![CDATA[
 はじめに
Typescript の独自構文、namespaceはご存知でしょうか？
https://www.typescriptlang.org/docs/handbook/namespaces.html
過去に.を使って関数コンポーネントの型であるReact.FCを参照する機会あるかと思います。
ドット記法をで型を参照するのはnamespaceの機能です。

 一般的なやり方
以下は一般的なやり方かと思います。

src/components/button.tsx
import * as React from "react";

export type ButtonProps = ...]]></description><link>https://zenn.dev/mylifeasjosh/articles/24b9f728f6fb38</link><guid isPermaLink="true">https://zenn.dev/mylifeasjosh/articles/24b9f728f6fb38</guid><pubDate>Tue, 23 Jul 2024 00:09:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a_TcF5mZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:namespace%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:josh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMzMyZjFhMDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>josh</dc:creator></item><item><title><![CDATA[Rust の中で TypeScript を書くには]]></title><description><![CDATA[
 はじめに
先日ユニークビジョン株式会社の UV Study というイベントで Rust に関する LT 登壇を行いました。
https://uniquevision.connpass.com/event/323686/
この記事はそれを zenn 用にまとめ直したものです。
当日の発表は 10 分と短かったため、当日の発表で話せなかったところも補足しています。

 作ったもの
https://github.com/hotwatermorning/poc-rust-ts-block

 FFI は面倒
あるプログラミング言語で書かれたプログラムの中から、別のプログラミング言語で書かれた...]]></description><link>https://zenn.dev/labbase/articles/bc5be6e5f01920</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/bc5be6e5f01920</guid><pubDate>Mon, 22 Jul 2024 03:03:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CJwsr__v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%25A7%2520TypeScript%2520%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25AB%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hotwatermorning%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxNTdjYTY2ZGIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hotwatermorning</dc:creator></item><item><title><![CDATA[neovim-lspconfig + Biome で保存時に import の整理をする]]></title><description><![CDATA[
 3行まとめ

neovim-lspconfig で Biome の LSP Proxy を起動できる

textDocument/codeAction で source.organizeImports と source.fixAll を実行することで、import の整理が可能
codeAction の同期実行は gopls のドキュメントを参考にする


 前提1: Biome と import
Biome には import に関連する機能が2つ存在する。

Analyzer の Imports Sorting

import をいい感じに並び替えてくれる機能


eslint-...]]></description><link>https://zenn.dev/izumin/articles/b8046e64eaa2b5</link><guid isPermaLink="true">https://zenn.dev/izumin/articles/b8046e64eaa2b5</guid><pubDate>Mon, 22 Jul 2024 02:43:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1mJmIznZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:neovim-lspconfig%2520%252B%2520Biome%2520%25E3%2581%25A7%25E4%25BF%259D%25E5%25AD%2598%25E6%2599%2582%25E3%2581%25AB%2520import%2520%25E3%2581%25AE%25E6%2595%25B4%25E7%2590%2586%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masayuki%2520Izumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pLQnhYeEszZEtUbG80dkZXU04zbWNpU0lvNlRFckpid1M3WUdoeFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masayuki Izumi</dc:creator></item><item><title><![CDATA[TypeScript コーディングテクニック #3 【関数編その1】]]></title><description><![CDATA[
 はじめに
TypeScript のコーディングテクニックを紹介するシリーズの第 3 回です。
前回で内容を予告していたのですが、ほぼ半年ぶりの投稿になってしまいました。またゆっくり投稿していこうと思います。
想定する読者は、プログラミングをある程度経験したうえでさらにコード品質を高めたい方です。初心者向けではないと思います。
第 3 回は、関数でどのようなことができるかを整理していきます。TypeScript と題していますが、 TypeScript に限らずあらゆるプログラミング言語に通ずる考え方だと思います。

 関数でできること

 処理の抽象化
一連の処理を関数にまとめて名前...]]></description><link>https://zenn.dev/somnicattus/articles/9c1ac15f9a9589</link><guid isPermaLink="true">https://zenn.dev/somnicattus/articles/9c1ac15f9a9589</guid><pubDate>Mon, 22 Jul 2024 01:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uLSpRcYu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2520%25233%2520%25E3%2580%2590%25E9%2596%25A2%25E6%2595%25B0%25E7%25B7%25A8%25E3%2581%259D%25E3%2581%25AE1%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:somnicattus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlNvNXE3eXJhZTY5OHVBWGpCN05EYTVOZVRxanpMQ2hBakhaek85RmZSPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>somnicattus</dc:creator></item><item><title><![CDATA[Supabaseでリアルタイムチャットアプリを作る]]></title><description><![CDATA[SupabaseにはRealtime APIがあります。接続しているクライアントとのメッセージを送受信できるAPIになります。
このAPIを使用して簡単なリアルタイムチャットアプリを作ってみました。
コード全体はこちらを参考にしてください。
https://github.com/k-logic563/supabase-chat-app
使用モジュールのバージョンは以下の通りです。
主要なモジュールのみ載せていますので、その他はリポジトリのpackage.jsonを参考にしてください。
"vite": "^5.3.4"
"vue": "^3.4.31"
"typescript": "^5....]]></description><link>https://zenn.dev/k_log24/articles/1912d857cc54f3</link><guid isPermaLink="true">https://zenn.dev/k_log24/articles/1912d857cc54f3</guid><pubDate>Sun, 21 Jul 2024 23:47:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EaIpt8T4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Supabase%25E3%2581%25A7%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kohei.com%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FhYTBhMmFjNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kohei.com</dc:creator></item><item><title><![CDATA[React × TypeScriptでポートフォリオを作った。]]></title><description><![CDATA[
 はじめに
2023年10月ごろから本格的にプログラマー転職を考え、ドットインストールにてHTML、CSS、JavaScriptを学んだのち、YoutubeやZennの記事、そしてドキュメントを通してReactを勉強しました。
何かポートフォリオを作成したく、好きな写真家さんである石田真澄さんのポートフォリオサイトを模倣したサイトを作成しようと考え、作り終えたはいいものの何かレガシーとして文章化した方が、就活や今後のために良いだろうと思い、ブログ化することにしました。文章を書くのはとても好きな作業なので、今まではObsidianで疑問点の解決方法などをアウトプットしていましたが、ローカ...]]></description><link>https://zenn.dev/interprecord/articles/f0b7f3711a8766</link><guid isPermaLink="true">https://zenn.dev/interprecord/articles/f0b7f3711a8766</guid><pubDate>Sun, 21 Jul 2024 17:17:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1NDC4tah--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25C3%2597%2520TypeScript%25E3%2581%25A7%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AA%25E3%2582%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:glycerin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MzVkYTUzOWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glycerin</dc:creator></item></channel></rss>