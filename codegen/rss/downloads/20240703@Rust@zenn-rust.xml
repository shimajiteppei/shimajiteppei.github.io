<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 03 Jul 2024 07:24:30 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rustで自作言語ために構文解析器を作った話]]></title><description><![CDATA[https://zenn.dev/smartcamp/articles/a498830e010e18
この記事の続きです。
軸解析と構文解析を一緒の記事すると長くなりそうなので分けました。

 リポジトリ
https://github.com/garebareDA/koto

 構文解析器(parser)とは
軸解析の結果から木構造を生成してインタプリタに渡すものです。
例えば下記のトークンの定義とトークン列がありパースを行うと。
const a = 1


constは変数定義のキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列...]]></description><link>https://zenn.dev/smartcamp/articles/076b673e2782d6</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/076b673e2782d6</guid><pubDate>Wed, 03 Jul 2024 01:02:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D26LqDuK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E6%25A7%258B%25E6%2596%2587%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Rustで自作言語ために字句解析器を作った話]]></title><description><![CDATA[
 リポジトリ
https://github.com/garebareDA/koto

 字句解析器(Lexer)とは
文字をトークンの列に変換を行う機構のものです。
たとえば下記のトークンの定義があり、


constはキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列で4と定義する

const a = 1
上記ののプログラムをトークンの列に変更すると
[1, 2, 3, 4]
このようになります(実際はすべてが数列に置き換わるわけではありません)。
こうすることにより構文解析という次の処理により適した形にすることができます。...]]></description><link>https://zenn.dev/smartcamp/articles/a498830e010e18</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/a498830e010e18</guid><pubDate>Mon, 01 Jul 2024 15:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9xDd6EsL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%25AD%2597%25E5%258F%25A5%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[自作スタック言語 Rustack では再帰呼び出しが for 文より強力]]></title><description><![CDATA[今回は拙著「Rustで作るプログラミング言語」の発売を記念して、宣伝を兼ねたちょっとした小ネタです。
https://www.amazon.co.jp/dp/4297141922

この本では Rust を使用して自分でプログラミング言語を自作する手順をステップバイステップで紹介しているのですが、そこで出来上がる言語には Rustack と Ruscal という２つがあります。ここでは、その一つ目である Rustack の、本では紹介しきれなかった、ちょっとした特性を紹介したいと思います。

 スタックベース言語 Rustack
詳しくは書籍を参照していただければと思いますが、 Rust...]]></description><link>https://zenn.dev/msakuta/articles/7f1bf1fc92aefb</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/7f1bf1fc92aefb</guid><pubDate>Mon, 01 Jul 2024 14:44:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lh49uRxi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E8%25A8%2580%25E8%25AA%259E%2520Rustack%2520%25E3%2581%25A7%25E3%2581%25AF%25E5%2586%258D%25E5%25B8%25B0%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%258C%2520for%2520%25E6%2596%2587%25E3%2582%2588%25E3%2582%258A%25E5%25BC%25B7%25E5%258A%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Quickwit を利用してサーバーレスなログ全文検索ツールを作る]]></title><description><![CDATA[Quickwit は Rust 製の検索エンジンです。
Quickwit の利用用途として挙げられているのは、アプリケーションなどのログを検索したいケースなど、下記のようなデータ・ユースケースの検索に適したツールとなります。

データ自体が immutable
レイテンシを気にしない

Quickwit のアーキテクチャではインデックスされたデータは S3 などのオブジェクトストレージに保管されるます。
また、まだ beta 段階ではありますが、Quickwit を Lambda で動かすこともできるため、サーバーレスな全文検索システムを低コストで構築することができます。

 Quick...]]></description><link>https://zenn.dev/labbase/articles/1cf65adf13bcb3</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/1cf65adf13bcb3</guid><pubDate>Mon, 01 Jul 2024 00:03:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yL8yl2dI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Quickwit%2520%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25AC%25E3%2582%25B9%25E3%2581%25AA%25E3%2583%25AD%25E3%2582%25B0%25E5%2585%25A8%25E6%2596%2587%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Takahiro%2520Yamada%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takahiro Yamada</dc:creator></item><item><title><![CDATA[Windows + MinGW + MSYS2でRust実装のPythonライブラリーを作る]]></title><description><![CDATA[
 はじめに
RustでPythonライブラリーを作成する手段としてPyO3があり、過去の記事「PyO3 + PoetryでPythonからRust実装を使う」でやり方を解説したが、暗黙的にLinuxやmacOSを対象としていた。
ライブラリーによってはWindows向けのWheel配布が必要なこともあるため、この記事ではGitHub Actionsを使ってWindows + MinGW + MSYS2環境でPyO3とRustを使ったPythonライブラリーのビルド方法について述べる。
この記事で利用するコードは下記のGitHubリポジトリーでまとめて公開している。

https://g...]]></description><link>https://zenn.dev/yyu/articles/3f83943960411f</link><guid isPermaLink="true">https://zenn.dev/yyu/articles/3f83943960411f</guid><pubDate>Sun, 30 Jun 2024 12:21:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JnKD6TJe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Windows%2520%252B%2520MinGW%2520%252B%2520MSYS2%25E3%2581%25A7Rust%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AEPython%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YOSHIMURA%2520Yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2laenQzajlqNGY3NFNiV2ppMUxoeGZNbE5PNmVhcXJLY2cza1JaTFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YOSHIMURA Yuu</dc:creator></item><item><title><![CDATA[aws-summit-download を Rust と thirtyfour で再実装してみた]]></title><description><![CDATA[
 【前書き】aws-summit-download とは
先日、「AWS Summitの資料を一括でDLするスクリプトを作成しました。」というポストを発見しました。
https://x.com/bondai_engineer/status/1805428579985232015
とても便利なツールなので、早速使わせていただきました！

このようなツールを OSS で公開してくださることに感謝です🙌✨

 Rewrite "aws-summit-download" In Rust
突然ですが、Rewriting It In Rust と言う言葉を聞いたことはあるでしょうか？

 Rewr...]]></description><link>https://zenn.dev/collabostyle/articles/6462bef3b5d44f</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/6462bef3b5d44f</guid><pubDate>Sun, 30 Jun 2024 07:51:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kSW6u_oC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:aws-summit-download%2520%25E3%2582%2592%2520Rust%2520%25E3%2581%25A8%2520thirtyfour%2520%25E3%2581%25A7%25E5%2586%258D%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[Rust の Yew アプリケーションを Amazon S3  へアップロードする]]></title><description><![CDATA[
 はじめに
以前、Rustのアプリケーションをコンパイルしてフロントエンドの実装を行うライブラリ Yewを紹介しました。
今回は、Yew で作ったアプリケーションを、Amazon S3に配置して、Web上からアクセスできるようにしてみたいと思います。
成果物は、Yewドキュメント通りのカウンターアプリケーションとしたいと思います。
🔻以前執筆した記事
https://zenn.dev/collabostyle/articles/2d87a6834ec989
🔻Yew Docs
https://yew.rs/ja/docs

 環境構築
まずは簡単ですが、環境を構築します。
以下コマンド...]]></description><link>https://zenn.dev/collabostyle/articles/18925793d36c00</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/18925793d36c00</guid><pubDate>Sun, 30 Jun 2024 05:33:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SBS19Gl7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%2520Yew%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%2520Amazon%2520S3%2520%2520%25E3%2581%25B8%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[Rust製のベンチマークツール：hyperfineメモ [blessed.rsシリーズ16]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はhyperfineについてです。
https://github.com/sharkdp/hyperfine#hyperfine

 hyperfineとは
Rust製のベンチマークツール

 Rust製のツール
こちらは（見逃していなければ）Rust内で使用するライブラリではなく、Rust製のツールである。

 登録が必要？
https://github.com/sharkdp/hyperfine?tab=readme-ov-file#sponsors
webページに...]]></description><link>https://zenn.dev/kotabrog/articles/d20a76a0e95382</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/d20a76a0e95382</guid><pubDate>Sat, 29 Jun 2024 01:18:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6N1LA96D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AE%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2581%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%259Ahyperfine%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA16%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[RustでクロスコンパイルにつまずいたときはOpenSSLでなくRustlsを使うといいかもしれない]]></title><description><![CDATA[
 背景
Rust製のDiscord BOTをRaspberry Pi Zero 2 W向けにCrossを使ってクロスコンパイルしようとした際、OpenSSL周りでエラーが発生し、コンパイルが進まない問題に直面しました。

 問題
reqwestクレートではデフォルトでOpenSSLを使用しますが、これがCrossでのクロスコンパイル時に問題を引き起こすようです。すでに同様の問題が報告されており（例: cross-rs/cross#400）、それはCrossでのOpenSSLのサポートが打ち切られたことに端を発するようです（cross-rs/cross#229）。

 解決策
reqwe...]]></description><link>https://zenn.dev/aivoicelab/articles/3b83b5e9cc7730</link><guid isPermaLink="true">https://zenn.dev/aivoicelab/articles/3b83b5e9cc7730</guid><pubDate>Fri, 28 Jun 2024 12:29:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sAHogVza--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%259A%25E3%2581%2584%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AFOpenSSL%25E3%2581%25A7%25E3%2581%25AA%25E3%2581%258FRustls%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2584%25E3%2581%258B%25E3%2582%2582%25E3%2581%2597%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sazanka_yuto%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5YjU1ZjQ0NDIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:AI%25E5%25A3%25B0%25E3%2581%25A5%25E3%2581%258F%25E3%2582%258A%25E6%258A%2580%25E8%25A1%2593%25E7%25A0%2594%25E7%25A9%25B6%25E4%25BC%259A%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxMjcwMjBlN2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sazanka_yuto</dc:creator></item><item><title><![CDATA[Rust 小ネタ: `clap::Parser` をモジュール内に隠蔽する]]></title><description><![CDATA[こんにちは。Fairy Devices株式会社 となんらかの関わりがある nogiro (Twitter (現 Twitter): @nogiro_iota) です。Fairy Devices の Slack にある、Rust 雑談チャンネルで話に出た小ネタを共有します。
clap で derive 機能を使ってコマンドライン引数を解析するとき、clap::Parser::parse() を呼ぶファイルで use clap::Parser as _; などして、トレイトをインポートする必要があります [1]。fn main() で use しがちですが、引数解析のための型を定義しているモ...]]></description><link>https://zenn.dev/fairydevices/articles/fa1f9bdf0ce6fc</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/fa1f9bdf0ce6fc</guid><pubDate>Fri, 28 Jun 2024 08:32:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ivaRSBi5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520%2560clap%253A%253AParser%2560%2520%25E3%2582%2592%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E5%2586%2585%25E3%2581%25AB%25E9%259A%25A0%25E8%2594%25BD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nogiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NGU1YjkxNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nogiro</dc:creator></item><item><title><![CDATA[Torの接続マネージャを作る with Tauri]]></title><description><![CDATA[
 はじめに
こんにちは。calloc134 です。
最近個人開発のネタを探しており、ちょうど作ってみたかったため、Tor の接続マネージャを作ってみました。
技術的にも色々なことを試すことができたため、ブログとしてまとめてみました。

 完成形
まずはじめに完成形を紹介します。
ローディング画面は以下の通りです。


アプリケーションとしてはシンプルな一画面のみです。
Tor の接続に必要なブリッジ情報とプロキシ情報を、既存の Tor の設定ファイルから読み込んでいます。
これを適切に設定して、接続ボタンを押すと Tor に接続されます。
接続の様子はリアルタイムでログに出力されます。...]]></description><link>https://zenn.dev/calloc134/articles/cc19e069f01e0f</link><guid isPermaLink="true">https://zenn.dev/calloc134/articles/cc19e069f01e0f</guid><pubDate>Fri, 28 Jun 2024 05:18:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yA-4De0Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tor%25E3%2581%25AE%25E6%258E%25A5%25E7%25B6%259A%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2520with%2520Tauri%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:calloc134%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0MGU4NGU1YjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>calloc134</dc:creator></item><item><title><![CDATA[sccacheでどのくらいRustのビルドを高速化できるのか (Windows)]]></title><description><![CDATA[
 背景
sccacheはMozillaが開発しているコンパイラー・キャッシング・ツールです。ccacheのようにコンパイラのラッパーとして使用することができます。Rustにも対応しています。
https://github.com/mozilla/sccache

 目的
sccacheを使用することでWindow上でのRustプロジェクトのビルドをどのくらい高速化できるのか検証します。

 環境

OS: Windows 11 Home (10.0.22631.0)
Powershell: 7.4.2
CPU: Core i7-12700
メモリ: DDR4-3200 16GBx2
ス...]]></description><link>https://zenn.dev/yuma14/articles/sccache-rust-benchmark</link><guid isPermaLink="true">https://zenn.dev/yuma14/articles/sccache-rust-benchmark</guid><pubDate>Wed, 26 Jun 2024 16:24:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kxg-ouDD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:sccache%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%25AE%25E3%2581%258F%25E3%2582%2589%25E3%2581%2584Rust%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2520%2528Windows%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuma14%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1YWZjOGQxYTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuma14</dc:creator></item><item><title><![CDATA[軽くて速いエディターLapce]]></title><description><![CDATA[
 Lapceとは
LapceはRust製のエディターです。Linux, Windows, Macに対応しています。
UIはFloemという自前のものを使っており、Wpguでレンダリングされます。
UI的にはVScodeに似ています。
何より軽い！


 インストール
インストールはgithubからインストーラーをダウンロードして行います。
https://github.com/lapce/lapce

 主な機能

 Modal editing
コマンドパレットからEnableにできるモードです。

Vimのようなモードでiでインサートモードescでノーマルモードになります。

 リモ...]]></description><link>https://zenn.dev/smartcamp/articles/052549ace48206</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/052549ace48206</guid><pubDate>Tue, 25 Jun 2024 15:02:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vlv2aJrI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25BB%25BD%25E3%2581%258F%25E3%2581%25A6%25E9%2580%259F%25E3%2581%2584%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2583%25BCLapce%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Rust ndarray並列化 躓きながら3倍高速化]]></title><description><![CDATA[ndarrayを使用して計算を数値計算など行っているなら、イテレータをrayonによる並列化関数に置き換えるだけで並列処理を行うことができる！
リソースのロックとか（よくわからないけど）全く考えることなく並列化による高速化の恩恵を受けることができるのはすごい。
今回はじめて並列化に取り組んだ。
rayon(レーヨン）を使用すると「簡単に」並列化ができると書いてあったが、うまくいかなかったので記録。

 結論
ndarray::parallel を使用する。
cargo.tomlに記載する依存関係で下記のようにfeaturesを記述することで使用できるようになる。
ndarray = {v...]]></description><link>https://zenn.dev/tricker/articles/c730b4dff2641d</link><guid isPermaLink="true">https://zenn.dev/tricker/articles/c730b4dff2641d</guid><pubDate>Tue, 25 Jun 2024 11:30:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uzxjiUZR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520ndarray%25E4%25B8%25A6%25E5%2588%2597%25E5%258C%2596%2520%25E8%25BA%2593%25E3%2581%258D%25E3%2581%25AA%25E3%2581%258C%25E3%2582%25893%25E5%2580%258D%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tricker%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k1Vjdtb2E1YWROLTc5VFA0V29peDVSQ1FaQkY2LTFkMldNT2hFS3J3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tricker</dc:creator></item><item><title><![CDATA[RustとWebAssemblyによるゲーム開発 ch.3]]></title><description><![CDATA[
の3章を読んだので気になった点をまとめます
3章では、実際にゲームループを実装しました
その際コードのまとめ方として階層アーキテクチャに則りました
コード沢山書いて楽しかったですが、あまり疑問に思うところがなかったのが残念
rustやwasmやブラウザやゲーム開発に詳しい（くなくても）みなさま〜
まさかり〜（くれ）

 復習

 ok()とok_or_else()

Result → Optionはok() Option → Resultはok_or_else()
ok()は有用なエラー情報が捨てられる　＝　エラー処理面倒な時に便利
ok_or_else()はエラーメッセージ沢山書く必...]]></description><link>https://zenn.dev/cp_r/articles/d105d81a41d028</link><guid isPermaLink="true">https://zenn.dev/cp_r/articles/d105d81a41d028</guid><pubDate>Tue, 25 Jun 2024 01:21:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gZTUssXj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8WebAssembly%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%2520ch.3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:9kv8xiyi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE1NjljYjFhZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>9kv8xiyi</dc:creator></item><item><title><![CDATA[思考のスピードでコードを書け！！Rust製の次世代エディタ「Zed」]]></title><description><![CDATA[
 はじめに
周りとは一味違ったツールを使いたくなるお年頃、皆さんも経験されたことがあるかと思います。
え、ない？
今回は「Code at the speed of thought(思考のスピードでコードを書く)」というキャッチコピーを掲げているエディタ「Zed」を発見したので紹介していこうと思います。
!
2024/07/01
Assistant Panel x Ollama のセットアップ方法について追記しました。


 Zed とは
!
この記事は 2024/06/24 時点での最新情報を掲載しています。
Zed は凄いスピードで開発が進んでいるので今閲覧している情報は古い可能性が...]]></description><link>https://zenn.dev/smartcamp/articles/c421e752119cee</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/c421e752119cee</guid><pubDate>Sun, 23 Jun 2024 13:01:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wTeuCC3i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%259D%25E8%2580%2583%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2594%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2591%25EF%25BC%2581%25EF%25BC%2581Rust%25E8%25A3%25BD%25E3%2581%25AE%25E6%25AC%25A1%25E4%25B8%2596%25E4%25BB%25A3%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2580%258CZed%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Ayuu%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hCRXRzOTYwTHZiRnpjamotQ2ZjLUZlQjRKNy1QaTZPc0FhZVZsPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ayuu</dc:creator></item><item><title><![CDATA[開発環境管理はとりあえずmiseで]]></title><description><![CDATA[Mac限定です(Windowsサポート外)
開発しているとpython, nodejs, ruby, perl, golang...といろいろな言語の実行環境が必要になると思います。
それぞれの言語環境に閉じて見れば、pyenvとかrbenvとか、色々な管理ツールがありますが、それぞれ当然別個のものなのでだんだん混乱してきます。
そしてそれすら使っていない場合は brew install で乱暴にインストールしてもはやカオスなローカル環境ができがちでした...
半年前くらいにasdfという開発環境管理ツールを見つけて適当に使っていたのですが、最近ではさらにasdfの課題も解消したmise...]]></description><link>https://zenn.dev/knziiy/articles/fa32a6e6a3aa63</link><guid isPermaLink="true">https://zenn.dev/knziiy/articles/fa32a6e6a3aa63</guid><pubDate>Sun, 23 Jun 2024 08:37:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UR5aScJL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25AF%25E3%2581%25A8%25E3%2582%258A%25E3%2581%2582%25E3%2581%2588%25E3%2581%259Amise%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:knziiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxMTFkYzlkZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>knziiy</dc:creator></item><item><title><![CDATA[egui を使って画像を差し替え、再描画させる]]></title><description><![CDATA[
 はじめに
本記事は前回の egui というクレートを使って外部の画像を表示させる記事の続編です。
Github 上の png ファイルを表示させ、さらにそれを再描画（他の画像に差し替える）をやっていければと思います。
https://zenn.dev/collabostyle/articles/54f81af6df6764

 下準備
ここは前回とほとんど同じですが、
今回は、ランダムな id を生成して、それを使用して再度画像を取得し、描画したいと思いますので、
randクレートを追加しておきます。

Cargo.toml
[dependencies]
eframe = "0.27...]]></description><link>https://zenn.dev/collabostyle/articles/90f87a5e096798</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/90f87a5e096798</guid><pubDate>Sun, 23 Jun 2024 07:19:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s3eFvv8S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:egui%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E5%25B7%25AE%25E3%2581%2597%25E6%259B%25BF%25E3%2581%2588%25E3%2580%2581%25E5%2586%258D%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[Hit&Blowで学ぶベイズ推定：理論から実装まで]]></title><description><![CDATA[
 はじめに
Hit&amp;Blowは、相手が秘密に設定した3桁の数字を当てるシンプルな推理ゲームです。最近の自分は、ベイズ推定のコードを書けるように、また他の題材に応用できるようになれたら嬉しいと思っています。Hit&amp;Blowを題材にベイズ推定について考えてみることで、知識を定着させます。
なお、Hit&amp;Blowについては探索木的なアプローチで最短手数を求める先行研究がいくつか見つかりました。ベイズ推定には興味がなく、Hit&amp;Blowにのみ興味がある人は、(確率分布を持ち込まず解く方がアプローチとして素直なので)そちらを参照してください。

 Hit&amp;...]]></description><link>https://zenn.dev/4eta/articles/072132e44e2075</link><guid isPermaLink="true">https://zenn.dev/4eta/articles/072132e44e2075</guid><pubDate>Sun, 23 Jun 2024 03:58:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O-X1u6wX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hit%2526Blow%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2599%25E3%2582%25A4%25E3%2582%25BA%25E6%258E%25A8%25E5%25AE%259A%25EF%25BC%259A%25E7%2590%2586%25E8%25AB%2596%25E3%2581%258B%25E3%2582%2589%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:4eta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmQ4NWp1bGRIUURYQmg4RmhpbEtHMldOd0phWmlHWlRJUmM0WTNhRURxTmYxbjlmQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>4eta</dc:creator></item><item><title><![CDATA[簡易的なHTMLパーサーをRustで自作]]></title><description><![CDATA[簡易的な自作ブラウザを作成した際にパーサーを実装したので考え方を共有したいと思います。

 htmlをパースするときの考え方
&lt;h1&gt; text &lt;/h1&gt;
例えばこのタグをパースする場合、カーソルを用意し頭から一文字ずつ確認して行きます。
&lt;h1&gt; text &lt;/h1&gt;
↑
一文字目が&lt;であればタグの始まりと認識させます。
&lt;h1&gt; text &lt;/h1&gt;
 ↑
一文字先をみて/で無ければ閉じタグではないので処理を続行させます。
&lt;h1&gt; text &lt;/h1&gt;
   ↑
そして&gt;が...]]></description><link>https://zenn.dev/smartcamp/articles/5a8ec55749df58</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/5a8ec55749df58</guid><pubDate>Sun, 23 Jun 2024 02:44:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vEPitfHd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B0%25A1%25E6%2598%2593%25E7%259A%2584%25E3%2581%25AAHTML%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2582%2592Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item></channel></rss>