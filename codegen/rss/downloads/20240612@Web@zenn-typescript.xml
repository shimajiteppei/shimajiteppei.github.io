<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 12 Jun 2024 04:28:05 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【TypeScript】オブジェクトのvalueの型を取得したユニオン型を作ってみる]]></title><description><![CDATA[最近、弊社のフロントエンドチームでは週に1度、ゆるTS勉強会と称して、ゆる〜くTypeScriptの社内勉強会を行っています。
Type Challengeやフロントエンドリーダーから出された問題を僕たちフロントエンドメンバーが解き、みんなに解説する、といったスタイルで実施しています。
https://github.com/type-challenges/type-challenges
問題自体は単純な型操作が大半ですが、それらを解説できるレベルまで理解し、理解が難しいジュニアには簡単に言い換えたり、例を出したり...。と、「ひとに伝えられるようになること」をゴールとして、型に対する理解...]]></description><link>https://zenn.dev/gemcook/articles/50de243d4dd24a</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/50de243d4dd24a</guid><pubDate>Wed, 12 Jun 2024 03:33:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TwnNGWsL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AEvalue%25E3%2581%25AE%25E5%259E%258B%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2597%25E3%2581%259F%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%25E5%259E%258B%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%259E%25E3%2581%25AE%25E3%2582%258A%25E3%2582%2587%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M3NzU3NTlmZWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぞのりょー</dc:creator></item><item><title><![CDATA[TypeScriptで余剰プロパティを禁止してみた]]></title><description><![CDATA[一般的なtypescript開発において、型の柔軟性は過剰なんじゃないか、余剰プロパティは一括で禁止していいんじゃないかと感じたので、本当に禁止してみました。結構困りました。

 余剰プロパティチェックとは
余剰プロパティチェック（excess property checking）とは、オブジェクトリテラルに対して行われる型チェックのことです。型定義に存在しないプロパティ（余剰プロパティ）がオブジェクトに存在すると、エラーが発生します。
type User = { name: string };
const user: User = { name: "taro", age: 20 }; ...]]></description><link>https://zenn.dev/kurashiki0ecma/articles/83097b7945201b</link><guid isPermaLink="true">https://zenn.dev/kurashiki0ecma/articles/83097b7945201b</guid><pubDate>Tue, 11 Jun 2024 22:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ir4d8vsk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E4%25BD%2599%25E5%2589%25B0%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2582%2592%25E7%25A6%2581%25E6%25AD%25A2%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2580%2589%25E6%2595%25B7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlM2RmNzA1NmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>倉敷</dc:creator></item><item><title><![CDATA[index]]></title><description><![CDATA[https://github.com/Un-ptitruc-en-plus-Streaming-Vf
https://github.com/Un-ptitruc-en-plus-StreamingVf
https://github.com/Un-ptitrucen-plus-Streaming-Vf
https://github.com/Un-ptitrucen-plus-StreamingVf
https://github.com/En-plus-Un-ptit-truc-Streaming-Vf
https://github.com/En-plus-Un-ptit-truc-Stre...]]></description><link>https://zenn.dev/kegelapan/articles/bf29f8446ad679</link><guid isPermaLink="true">https://zenn.dev/kegelapan/articles/bf29f8446ad679</guid><pubDate>Tue, 11 Jun 2024 19:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1NJjjL6H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:index%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:penguasakegelapan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSldkc1dyZW1BMkxrSE0wYlZjM05ib2IyWDNXNUFTaEpGZFZZYlJDaE93T2F3SFBBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>penguasakegelapan</dc:creator></item><item><title><![CDATA[Remixでroot.tsxに定義したloader関数を特定ページだけ処理しないようにする]]></title><description><![CDATA[
 はじめに
Remixでroot.tsxにloader関数を定義すると、どのページ遷移時でも必ず呼び出される共通処理的に実装することができます。
具体例を挙げると、_index（ルート）と/hogeという2つのページがあり、_index → /hogeと画面遷移すると、下記の順でloader関数が実行されます。

root.tsxのloader関数（_index.tsx 実行時）
root.tsxのloader関数（hoge.tsx 実行時）
hoge.tsxのloader関数


app/root.tsx
export function loader() {
  console.lo...]]></description><link>https://zenn.dev/daimyo404/articles/ac71cdb8b4d695</link><guid isPermaLink="true">https://zenn.dev/daimyo404/articles/ac71cdb8b4d695</guid><pubDate>Tue, 11 Jun 2024 16:10:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6GqZk6aj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Remix%25E3%2581%25A7root.tsx%25E3%2581%25AB%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2597%25E3%2581%259Floader%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E7%2589%25B9%25E5%25AE%259A%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25A0%25E3%2581%2591%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A0%25E3%2581%2584%25E3%2581%25BF%25E3%2582%2587%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WnpNc3FPZ2E4V3Q2b2JVLWxCVms4VGNBYkdLOVlxVGRUdk00SnlOZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>だいみょー</dc:creator></item><item><title><![CDATA[⚠️ bun は設定次第でビルド成果物に環境変数を埋め込みます]]></title><description><![CDATA[https://bun.build/
https://github.com/oven-sh/bun/blob/main/src/env_loader.zig#L285-L302

 条件


bun build --target bun または bun build --compile --target bun-darwin-arm64 などでビルドをしていて
ソースコード中で process.env を介した環境変数の参照 (process.env.HOME 等) を使っていて
参照されている環境変数がビルド時の環境変数に含まれるとき
bun はビルド成果物にその環境変数を文字列リテラル...]]></description><link>https://zenn.dev/unecochan/articles/b2377bef373c1e</link><guid isPermaLink="true">https://zenn.dev/unecochan/articles/b2377bef373c1e</guid><pubDate>Tue, 11 Jun 2024 16:09:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_z7dJG-y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520bun%2520%25E3%2581%25AF%25E8%25A8%25AD%25E5%25AE%259A%25E6%25AC%25A1%25E7%25AC%25AC%25E3%2581%25A7%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2588%2590%25E6%259E%259C%25E7%2589%25A9%25E3%2581%25AB%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592%25E5%259F%258B%25E3%2582%2581%25E8%25BE%25BC%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2583%25BC%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hMNW1SR0NQTlFkcVlJaGxYejJlUHNGd1RabWZjczIwUXNfU0xMT1prPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うーねこ</dc:creator></item><item><title><![CDATA[【Google Maps API】Markersが非推奨になったのでAdvanced Markersを使いましょう]]></title><description><![CDATA[
 この記事について
Google のMaps JavaScript APIに仕様変更に度々苦しめられている農業チームです。今回はMarkersに関することを仕様変更をまとめます。

 先に結論を３つ

Markerは地図上の特定の場所を示すために使用します。
アイコンや画像など様々な形で表現することが可能です。
2023年5月ごろからMarkersからAdvanced Markersにバージョンアップしました。これにより地図上のマーカーの見た目のカスタマイズが容易になるだけでなく、HTML および CSS を使った視覚的インパクトに優れるマーカーの作成に対応するようになり、柔軟性がアッ...]]></description><link>https://zenn.dev/p238049y/articles/d026f46b6c0eff</link><guid isPermaLink="true">https://zenn.dev/p238049y/articles/d026f46b6c0eff</guid><pubDate>Tue, 11 Jun 2024 15:45:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GIQq7a70--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Google%2520Maps%2520API%25E3%2580%2591Markers%25E3%2581%258C%25E9%259D%259E%25E6%258E%25A8%25E5%25A5%25A8%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7Advanced%2520Markers%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25BE%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A0%25E3%2583%25A9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4YjkzNTM5YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ムラ</dc:creator></item><item><title><![CDATA[NextAuth 型.Adapterを型.Adapterに割り当てることはできませんエラー]]></title><description><![CDATA[
 症状
Next.js14(App Router)とNextAuthを使ってGoogleとGitHubアカウントを利用したOAuthを実装したのち、セッション情報をDBを使って管理したいと思いました。
以下のAuth.jsの設定ファイル（自分の場合はapi/auth/[...nextauth]配下のroute.ts）に対してAdapterの情報を追加したところ、Adapterに赤波線を引かれてエラーが出てしまいました。

route.ts
import NextAuth from 'next-auth';
import GithubProvider from "next-auth/pr...]]></description><link>https://zenn.dev/somahc/articles/5669e5e7b7c733</link><guid isPermaLink="true">https://zenn.dev/somahc/articles/5669e5e7b7c733</guid><pubDate>Tue, 11 Jun 2024 14:56:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Uy3XpVKH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:NextAuth%2520%25E5%259E%258B.Adapter%25E3%2582%2592%25E5%259E%258B.Adapter%25E3%2581%25AB%25E5%2589%25B2%25E3%2582%258A%25E5%25BD%2593%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25AF%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Somahc%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2ZWY0YmYwNDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Somahc</dc:creator></item><item><title><![CDATA[TypeScriptの型と値とバリデーション]]></title><description><![CDATA[TypeScript は本質的に自分に型が付与されていると思っているだけの JavaScript です。
いくら型を付与しようが、それが実行時に影響を与えることはありません。
コードレビューをしているとここを誤解している人が本当に多いです。何度も解説しているのですが、なかなか浸透しないので、TypeScript におけるバリデーションという視点で記事を書くことにしました。
あと TS でバリデータ使って色々作ろうとしている友人と、プログラミング始めたてで zod と openapi を使っいる友人がいたので、彼らが想定読者です。

 型と値の名前空間
TypeScript 上での名前空間...]]></description><link>https://zenn.dev/mizchi/articles/typescript-type-value-validation</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/typescript-type-value-validation</guid><pubDate>Tue, 11 Jun 2024 13:06:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rGYgZ1nx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25A8%25E5%2580%25A4%25E3%2581%25A8%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[Next.js App router + TS で Auth0 handleAuth() の custom callback を動かす]]></title><description><![CDATA[https://supabase.com/partners/integrations/auth0
https://auth0.com/blog/using-nextjs-and-auth0-with-supabase/
この辺りを読んでて route.ts(route.js) が動かないよ〜と詰まった人向け。

 動作確認済みサンプル

 app/api/auth/[auth0]/route.ts
import {
  type AfterCallbackAppRoute,
  type Session,
  handleAuth,
  handleCallback,
} from '@...]]></description><link>https://zenn.dev/ism_k/articles/aea7df6226221c</link><guid isPermaLink="true">https://zenn.dev/ism_k/articles/aea7df6226221c</guid><pubDate>Tue, 11 Jun 2024 12:23:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9MKTDvSq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520App%2520router%2520%252B%2520TS%2520%25E3%2581%25A7%2520Auth0%2520handleAuth%2528%2529%2520%25E3%2581%25AE%2520custom%2520cal...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ism.msi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ism.msi</dc:creator></item><item><title><![CDATA[新卒未経験エンジニアが自社ホームページを作ってみた]]></title><description><![CDATA[
 自己紹介
こんにちは、コズム開発部の山田です。
今年から新卒エンジニアとしてコズムに入社し、普段は自社プロダクトなどのフロントエンド開発に携わっています。今回は入社して最初に携わったプロジェクトである、弊社ホームページ(コーポレートサイト)の制作についてレポートしたいと思います。

 プロジェクトの概要
私がコズムに入社したころに、元々あった弊社HPを大幅に刷新するというプロジェクトが走りだしていました。そこで実装を担うフロントエンドエンジニアとして白羽の矢が立ったのが、当時ペーペーエンジニアであった私でありました。
実装としては既存のソースコードを踏襲することなく新規に作ることにな...]]></description><link>https://zenn.dev/cosmcorp/articles/5d3309b174f521</link><guid isPermaLink="true">https://zenn.dev/cosmcorp/articles/5d3309b174f521</guid><pubDate>Tue, 11 Jun 2024 12:01:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rd_bVSvQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E5%258D%2592%25E6%259C%25AA%25E7%25B5%258C%25E9%25A8%2593%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E8%2587%25AA%25E7%25A4%25BE%25E3%2583%259B%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yamada-cosm%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2MWZmNjBmZjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25B3%25E3%2582%25BA%25E3%2583%25A0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBkZDExYzRkMjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamada-cosm</dc:creator></item><item><title><![CDATA[if文の条件式の中身は厳密に判定できる形にしよう]]></title><description><![CDATA[タイトルの通り、if文の条件式の中は厳密に判定できる形にすることで予期せぬバグを防ぐことができる、という話です。
例えば、ユーザーの名前をラベルとして表示する関数があるとして、名前が空文字の場合は「名無しさん」と表示したいとします。
function getLabel(name: string): string {
if (!name) {
return "名無しさん";
}
return `${name}さん`;
}
このように書いた場合、引数 name が false の場合、「名無しさん」と表示されることになり、例えば空文字以外にも falsy な値 (null や undefin...]]></description><link>https://zenn.dev/surume3/articles/da5844409cc8d3</link><guid isPermaLink="true">https://zenn.dev/surume3/articles/da5844409cc8d3</guid><pubDate>Tue, 11 Jun 2024 10:27:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t4bKlZWE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:if%25E6%2596%2587%25E3%2581%25AE%25E6%259D%25A1%25E4%25BB%25B6%25E5%25BC%258F%25E3%2581%25AE%25E4%25B8%25AD%25E8%25BA%25AB%25E3%2581%25AF%25E5%258E%25B3%25E5%25AF%2586%25E3%2581%25AB%25E5%2588%25A4%25E5%25AE%259A%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E5%25BD%25A2%25E3%2581%25AB%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:syumai3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4MzZlZGI2OWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>syumai3</dc:creator></item><item><title><![CDATA[GitHubのプルリクコメントにVitestのカバレッジレポートのSummaryを表示する]]></title><description><![CDATA[
 いきなり結論
こういう感じでGitHubのプルリクコメント上にカバレッジレポートを表示してくれます。

以下のように設定することで、Status列の表示が変わります。閾値が設定されていなければ青色に。
閾値が設定されており、それを上回っていれば緑の丸かつ、「🎯 80%」のように閾値を表示してくれます。

vitest.config.ts
import * as path from 'path';
import swc from 'unplugin-swc';
import { defineConfig } from 'vitest/config';

export default d...]]></description><link>https://zenn.dev/bs_kansai/articles/e822e7922d4b43</link><guid isPermaLink="true">https://zenn.dev/bs_kansai/articles/e822e7922d4b43</guid><pubDate>Tue, 11 Jun 2024 08:31:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Gukyid09--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AB%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25ABVitest%25E3%2581%25AE%25E3%2582%25AB%25E3%2583%2590%25E3%2583%25AC%25E3%2583%2583%25E3%2582%25B8%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AESummary%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kanon%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkyNTU3YjY1MDkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Kobe.ts%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MWQ5MmViYmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanon</dc:creator></item><item><title><![CDATA[[DDD in TS]: 意外と便利な「仕様」を理解する]]></title><description><![CDATA[自ブログからの引用です。

 概要
仕様はDDDの原典(エリックエヴァンスのドメイン駆動設計)に登場する概念なのですが、DDDを学習していてもあまり見かけることがありませんでした。しかし、原典の内容を読み直して見ると意外と利用できる場面も多いと感じました。
本記事では、仕様とは何か？を解説したあと、原典で紹介されている例をTypeScriptを使って解説をしていきたいと思います。

 「仕様」ってなに？
ドメインやユースケースを実装ていると、よく boolean を返すような関数を書くことがあります。例えば、Validationなどの事前条件の判定や、「この'商品'は軽減税率か？」といっ...]]></description><link>https://zenn.dev/hedrall/articles/2024-06-11-ddd-spec</link><guid isPermaLink="true">https://zenn.dev/hedrall/articles/2024-06-11-ddd-spec</guid><pubDate>Tue, 11 Jun 2024 07:15:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZOVbaR6d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BDDD%2520in%2520TS%255D%253A%2520%25E6%2584%258F%25E5%25A4%2596%25E3%2581%25A8%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E3%2580%258C%25E4%25BB%2595%25E6%25A7%2598%25E3%2580%258D%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hedrall%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1YjE2MzA5NzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hedrall</dc:creator></item><item><title><![CDATA[Node.js（TypeScript）で文字コードに入門する]]></title><description><![CDATA[文字コードが何もわからないのでNode.js（TypeScript）を使って手を動かしながら入門するメモです。
!
筆者は文字コードの専門家ではないため、間違いがあればご指摘ください。

文字コード全体の俯瞰としては

とほほの文字コード入門 - とほほのWWW入門

JSで文字コードを扱う方法は

文字列とUnicode · JavaScript Primer #jsprimer
JavaScript における文字コードの初歩 - 30歳からのプログラミング

がそれぞれわかりやすそうでした。上記資料を中心に読みながら進めていきます。

 string.codePointAt

.co...]]></description><link>https://zenn.dev/dyoshikawa/articles/nodejs-charset-introduction</link><guid isPermaLink="true">https://zenn.dev/dyoshikawa/articles/nodejs-charset-introduction</guid><pubDate>Tue, 11 Jun 2024 06:57:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FvpWoVD7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25EF%25BC%2588TypeScript%25EF%25BC%2589%25E3%2581%25A7%25E6%2596%2587%25E5%25AD%2597%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:d%2520yoshikawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjNWU1ODc1NjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>d yoshikawa</dc:creator></item><item><title><![CDATA[NestJSでDataLoaderをどこで初期化するか問題]]></title><description><![CDATA[ユビーではGraphQLのバックエンドサービスをNestJSでモジュラモノリスな構成で作っていますが、その中で得られたDataLoaderの知見について紹介します。

 背景
GraphQLでN+1を回避するにはDataLoaderを使うのが一般的なプラクティスですが、DataLoaderはインタフェースの都合上リクエスト毎に初期化をおこなう必要があります。この初期化をどこで行うかが悩みどころで、いくつかパターンがあるので今回はそれについて紹介します。

 DataLoaderの基本
このようなスキーマとResolverがあったとします。
type Query {
  posts: [P...]]></description><link>https://zenn.dev/ubie_dev/articles/f8561d0f3d263f</link><guid isPermaLink="true">https://zenn.dev/ubie_dev/articles/f8561d0f3d263f</guid><pubDate>Tue, 11 Jun 2024 06:32:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HReWWs9K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:NestJS%25E3%2581%25A7DataLoader%25E3%2582%2592%25E3%2581%25A9%25E3%2581%2593%25E3%2581%25A7%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2581%258B%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hokaccha%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlOWMzMWRhODMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Ubie%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lpYWctanVyZUl3Q21TY0ZpclkwaUo0eXppaGZYekxOc1RfejZNX3c9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hokaccha</dc:creator></item><item><title><![CDATA[【TS5.5】filter()で型が絞られる様になったありがたみを噛み締める。]]></title><description><![CDATA[こんにちは。
今回は、TS5.5にて追加される機能の一つである、inferred type predicates についてみていきながら、今まで行っていた面倒(かつ危険)なことから解放されるありがたみを再確認していきたいと思います。
https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-rc/

 いままで(~TS5.4)
さて、本記事の趣旨は「いままでを振り返り、これからをありがたがる」ことですので、まずは不要になる処理について改めてみていきましょう。
よりありがたみを感じたいので、最もシンプルな形((n...]]></description><link>https://zenn.dev/gemcook/articles/8345cabab5818a</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/8345cabab5818a</guid><pubDate>Tue, 11 Jun 2024 03:14:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MpzhHnRi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TS5.5%25E3%2580%2591filter%2528%2529%25E3%2581%25A7%25E5%259E%258B%25E3%2581%258C%25E7%25B5%259E%25E3%2582%2589%25E3%2582%258C%25E3%2582%258B%25E6%25A7%2598%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2582%25E3%2582%258A%25E3%2581%258C%25E3%2581%259F%25E3%2581%25BF%25E3%2582%2592%25E5%2599%259B%25E3%2581%25BF%25E7%25B7%25A0%25E3%2582%2581%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B2%25E3%2582%2587%25E3%2581%25B7%25E3%2581%25A6%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1MmQ2ODA0Y2UuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひょぷて</dc:creator></item><item><title><![CDATA[[JS]先頭を削除した配列をイミュータブルに取得する]]></title><description><![CDATA[配列の先頭を削除した配列をイミュータブル（破壊的な変更なし）に取得する方法です。
const array = ["a", "b", "c"];
const arrayWithoutFirstElement = array.filter((_, i) =&gt; i !== 0);
console.log(array): // ["a", "b", "c"]
console.log(arrayWithoutFirstElement); // ["b", "c"]
参考
https://developer.mozilla.org/ja/docs/Web/JavaScript/Referenc...]]></description><link>https://zenn.dev/purratto/articles/803dc123daa7ea</link><guid isPermaLink="true">https://zenn.dev/purratto/articles/803dc123daa7ea</guid><pubDate>Tue, 11 Jun 2024 02:56:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k-aSV524--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJS%255D%25E5%2585%2588%25E9%25A0%25AD%25E3%2582%2592%25E5%2589%258A%25E9%2599%25A4%25E3%2581%2597%25E3%2581%259F%25E9%2585%258D%25E5%2588%2597%25E3%2582%2592%25E3%2582%25A4%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2596%25E3%2583%25AB%25E3%2581%25AB%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:purratto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODdjNTc4MzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>purratto</dc:creator></item><item><title><![CDATA[LLM にコードを「差分」で書き換えさせるためのアイデア]]></title><description><![CDATA[
 既存の LLM コード生成の問題
LLM は行カウントやワードカウントが苦手。
例えば自分は SourceMap を扱うコードのテストを書かせようとしたが、モックデータの line:column がガバガバな位置を指してまともにテストにならない。行カウント/ワードカウントができないのはつまり diff がうまく生成できない。
これらの問題があって、コードを生成するパイプラインを組む場合、 全文出力が主流になっている。
ここで何が問題になるかというと、コードが膨らんで来た時に、(書き変える対象が一部だとしても)生成が顕著に遅くなる。うまく生成できなかった時にリトライを繰り返すと、問題が...]]></description><link>https://zenn.dev/mizchi/articles/better-llm-code-gen</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/better-llm-code-gen</guid><pubDate>Mon, 10 Jun 2024 18:19:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---DXFc9J3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LLM%2520%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2580%258C%25E5%25B7%25AE%25E5%2588%2586%25E3%2580%258D%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258D%25E6%258F%259B%25E3%2581%2588%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25A4%25E3%2583%2587%25E3%2582%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[「`typeof` 演算子でアタフタしたけど、これでバッチリ！具体例で完全攻略✨」]]></title><description><![CDATA[
 typeof 演算子の結果ってこうなる⁉ 具体例も一緒に確認してみよう！🚀
JavaScriptで typeof 演算子を使うと、値の型が分かるんだけど、実際どんな風に動くのか具体例を見てみたいよね。そこで、以下にいくつかの具体例をまとめてみたよ！

 typeof の結果に応じた型の一覧と具体例



型

typeof の結果
具体例




Undefined
"undefined"
let x; console.log(typeof x); // "undefined"


Null

"object" (reason)
let x = null; console.log(t...]]></description><link>https://zenn.dev/melwey/articles/aae0e952562a9f</link><guid isPermaLink="true">https://zenn.dev/melwey/articles/aae0e952562a9f</guid><pubDate>Mon, 10 Jun 2024 15:38:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DoYfZvQU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%2560typeof%2560%2520%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25A7%25E3%2582%25A2%25E3%2582%25BF%25E3%2583%2595%25E3%2582%25BF%25E3%2581%2597%25E3%2581%259F%25E3%2581%2591%25E3%2581%25A9%25E3%2580%2581%25E3%2581%2593%25E3%2582%258C%25E3%2581%25A7%25E3%2583%2590%25E3%2583%2583%25E3%2583%2581%25E3%2583%25AA%25EF%25BC%2581%25E5%2585%25B7%25E4%25BD%2593%25E4%25BE%258B%25E3%2581%25A7%25E5%25AE%258C%25E5%2585%25A8%25E6%2594%25BB%25E7%2595%25A5%2520%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%25E3%2582%258B%25E3%2581%2586%25E3%2581%2587%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnQ2WmZjNnNTOTgzY0o4UVpwR3BBWk1LTGZ0WDFYRjhFYTVkNy1VcVJRamZzYml3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>めるうぇい</dc:creator></item><item><title><![CDATA[【Docker】Viteを使ってReactとTypeScriptの環境構築]]></title><description><![CDATA[
 はじめに
そもそも簡単に構築できるReactですが、実行もDockerを用いてできたらもっと楽になるでしょう。
それを、vite使えたらもっといいだろうなと思ったので、それをメモしていこうと思います。
環境構築はできている前提です。

 手順
!
以下でviteのインストールバージョンを確認できる
npm show vite version



プロジェクトを格納するフォルダを作り、移動する

mkdir zenn-react
cd zenn-react

プロジェクトを作る
TypeScriptとReactを選んでいきます。

npm create vite

npm insta...]]></description><link>https://zenn.dev/haru330/articles/24aa98eb05306f</link><guid isPermaLink="true">https://zenn.dev/haru330/articles/24aa98eb05306f</guid><pubDate>Mon, 10 Jun 2024 14:37:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OtCl7hE9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E3%2580%2591Vite%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6React%25E3%2581%25A8TypeScript%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3NzQyOWFkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はる</dc:creator></item></channel></rss>