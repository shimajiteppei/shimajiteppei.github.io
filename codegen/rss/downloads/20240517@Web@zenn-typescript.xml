<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 17 May 2024 07:11:11 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TwoGate - エンタメ×テクノロジーの現場から]]></title><description><![CDATA[こんにちは。初めまして、TwoGateのチャン[1]です。RubyKaigi 2024が迫ってきている中[2]、TwoGateという会社を知ってもらいたいということで記事を書いています。TwoGateで行っていることは技術的に特色があって書けることには困らないし、書きたいこともたくさんあるので今まで書こうと思い続けていましたが、仕事にもまた困らない会社なので、書けずじまいでした。今回は張り切って各プロダクトのエンジニアで座談会を開いて、横断的にプロダクトの特長と技術的特色などを書こうと思っています！

 技術スタック
まずはTwoGateについて基本的な技術スタックの紹介をしましょう。R...]]></description><link>https://zenn.dev/twogate/articles/a269d157e7b0b0</link><guid isPermaLink="true">https://zenn.dev/twogate/articles/a269d157e7b0b0</guid><pubDate>Fri, 17 May 2024 06:50:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZCSY2Dn9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TwoGate%2520-%2520%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25A1%25C3%2597%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2581%25AE%25E7%258F%25BE%25E5%25A0%25B4%25E3%2581%258B%25E3%2582%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:chang%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY1ZjA4MGZkMTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TwoGate%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUtrZzg1T01Vb2NQSnFfM25KNzBpX2JybnhHTDhFN2hRMWhfamctY1p6SmdXYkpRPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chang</dc:creator></item><item><title><![CDATA[【最新版】もう迷わない！決済機能Stripeのサブスク実装方法(Next.js, TypeScript)]]></title><description><![CDATA[
 個人開発でStripeの実装がスムーズにいったので解説する
バージョンの違いやAPIの実装などで初心者の方は決済機能の実装がうまくいかないことが多々あると思います。自分も最初エラーが出まくったりしていたのですが、この記事の手順でやればほぼ無問題で実装からテストまでいけたので手順を追って解説したいと思います。
また、ユーザーの認証関係の解説は省いていますのでご了承ください。
また、DBはNeon、ORMはDrizzleを使用しています。
それぞれの参考記事
https://qiita.com/nuko-suke/items/e940ff8ccde35d09f668
https://qi...]]></description><link>https://zenn.dev/dragon1208/articles/898dbbeea10769</link><guid isPermaLink="true">https://zenn.dev/dragon1208/articles/898dbbeea10769</guid><pubDate>Fri, 17 May 2024 04:10:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kgzdHwc2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E6%259C%2580%25E6%2596%25B0%25E7%2589%2588%25E3%2580%2591%25E3%2582%2582%25E3%2581%2586%25E8%25BF%25B7%25E3%2582%258F%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%25E6%25B1%25BA%25E6%25B8%2588%25E6%25A9%259F%25E8%2583%25BDStripe%25E3%2581%25AE%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25B9%25E3%2582%25AF%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595%2528Next.js%252C%2520TypeScript%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nao8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiMzE3YTE0ODIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nao8</dc:creator></item><item><title><![CDATA[フロントエンドの関数単体テスト（Bun+Jest+TS）]]></title><description><![CDATA[
 はじめに
フロントエンド開発において、コードの品質を保つことは重要です。特に、ユーザーインターフェースの変更や機能の追加が頻繁に行われる現代のWeb開発では、予期しないバグが発生することを防ぐためにテストの導入が欠かせません。
しかし、過去にはフロントエンドテストがあまり重視されていなかった時代もありました。そのため、バグが発生しやすく、保守が困難なコードが多く存在していました。
この記事では、シンプルなフロントエンドテストに関する部分を書こうと思います。テストのレシピブックとしても使っていこうと思っているので、随時この記事を更新or新規記事作成していこうと思っています！
環境構築
...]]></description><link>https://zenn.dev/salvage0707/articles/007b53a374da24</link><guid isPermaLink="true">https://zenn.dev/salvage0707/articles/007b53a374da24</guid><pubDate>Fri, 17 May 2024 00:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qrEOyal---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E5%258D%2598%25E4%25BD%2593%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25EF%25BC%2588Bun%252BJest%252BTS%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%258B%25E3%2581%25B9%25E3%2581%2584%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxOGVmZTY1YzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まるべいじ</dc:creator></item><item><title><![CDATA[【備忘録】AWS GoogleOAuthをSAMテンプレで作った]]></title><description><![CDATA[
 SAMってAWSが公式にサポートしてるわりには、ネット上にまとまった知見が少ない気がする
そう思ったのが、本記事公開の背景になります。
特に自分みたいなAWS初学者にとってはcloudFormationとかServerlessとか情報が錯綜して死にかける。
今回、もがきながらなんとか環境を作ったので、少しでもAWS初学者に貢献したくて公開しました。
（その割には色々雑ですが、わからないことはググれば、私より100億倍わかりやすい説明がもらえますので。）

 前提


AWSについてやんわり知っている。以下の単語を知っている。

Lambda関数
APIGateway
SAM



G...]]></description><link>https://zenn.dev/antapp/articles/b30066d835d54e</link><guid isPermaLink="true">https://zenn.dev/antapp/articles/b30066d835d54e</guid><pubDate>Thu, 16 May 2024 16:54:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_RxHV_Vy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E3%2580%2591AWS%2520GoogleOAuth%25E3%2582%2592SAM%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kutsu-4ta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkYWE2ZmJlNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kutsu-4ta</dc:creator></item><item><title><![CDATA[TypeScript で Vue Router の route parameter を string 型に変換する方法]]></title><description><![CDATA[こんにちは。 SAW です。
最近、 水曜どうでしょう を Netflix で見始めました。
映像に時代を感じながら視聴しています (笑)
Nuxt のルーティングには、 Vue Router が利用されています。
Vue Router を利用すると、 URL 内に埋め込まれたパラメーター (以下 route parameter と表記) を Vue コンポーネントから取得できます。
以下の例では、 :id の部分にパラメーターの値が埋め込まれます。

route parameter の例
/users/:id

route parameter で取得できるパラメーターの型は strin...]]></description><link>https://zenn.dev/comm_vue_nuxt/articles/1de127dca24494</link><guid isPermaLink="true">https://zenn.dev/comm_vue_nuxt/articles/1de127dca24494</guid><pubDate>Thu, 16 May 2024 15:30:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1bxeMBTG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25A7%2520Vue%2520Router%2520%25E3%2581%25AE%2520route%2520parameter%2520%25E3%2582%2592%2520string%2520%25E5%259E%258B%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:SAW%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MTZlOWFlNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Vue%25E3%2583%25BBNuxt%2520%25E6%2583%2585%25E5%25A0%25B1%25E3%2581%258C%25E9%259B%2586%25E3%2581%25BE%25E3%2582%258B%25E5%25BA%2583%25E5%25A0%25B4%2520%252F%2520P...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxZTEzOTQxNjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SAW</dc:creator></item><item><title><![CDATA[useLocation: locationオブジェクトのプロパティ（React Router v5.1）]]></title><description><![CDATA[useLocation フックは バージョン5.1から導入された React Router ライブラリのフックの一つで、現在のURLの場所（location）に関する情報を提供する。URLのパス名、検索クエリ、ハッシュなどの情報に基づいてコンポーネントのレンダリングや動作を条件付きで制御できる。
useLocation が返す location オブジェクトに含まれるプロパティは、以下の通り。
例:
https://example.com/about?name=John&amp;age=30#team

 pathname
URLのパス部分を表す。上記の例では、pathname は /a...]]></description><link>https://zenn.dev/kkoisland/articles/6284de6a50c442</link><guid isPermaLink="true">https://zenn.dev/kkoisland/articles/6284de6a50c442</guid><pubDate>Thu, 16 May 2024 14:54:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B9fMYJsA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useLocation%253A%2520location%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25EF%25BC%2588React%2520Router%2520v5.1%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkoisland%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2MzIwYmQ0NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkoisland</dc:creator></item><item><title><![CDATA[VSCode拡張機能開発でpnpm workspace化をしようとしたら壁が高かった]]></title><description><![CDATA[私が開発している ts-type-expand という拡張機能では、以前は yarn workspace を使ったモノレポ構成を取っていましたが、今回 pnpm workspace に移行することにしました。
つまりどころが多かったので知見を共有します。

 基本的な移行方法
ロックファイルを移行するには以下のコマンドを使います。
$ pnpm import
これで、yarn.lock の内容を pnpm-lock.yaml に変換できます。
あとは

yarn の設定ファイルを削除
pnpm-workspace.yaml を作成し、ワークスペース指定を移す

等すればパッケージの依存管...]]></description><link>https://zenn.dev/kimuson/articles/vscode_extension_pnpm_workspace</link><guid isPermaLink="true">https://zenn.dev/kimuson/articles/vscode_extension_pnpm_workspace</guid><pubDate>Thu, 16 May 2024 12:07:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gtePTrPf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7pnpm%2520workspace%25E5%258C%2596%25E3%2582%2592%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E5%25A3%2581%25E3%2581%258C%25E9%25AB%2598%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2580%25E3%2581%259D%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I1NWE1MzY5MWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きむそん</dc:creator></item><item><title><![CDATA[OpenAI の開発者クイックスタートを実施]]></title><description><![CDATA[
 はじめに
OpenAI のクイックスタートには、cURL、Python，Node.js の利用方法が記載されています。ここではクイックスタートの Node.js + TypeScript の利用方法を試してみます。
https://platform.openai.com/docs/quickstart?context=node

 作業プロジェクトの準備
TypeScript の簡易プロジェクトを作成します。

 package.json を作成
まず、package.json を作成します。
$ mkdir -p node-openai
$ cd node-openai
$ pnp...]]></description><link>https://zenn.dev/hayato94087/articles/85378e1f7bc0e5</link><guid isPermaLink="true">https://zenn.dev/hayato94087/articles/85378e1f7bc0e5</guid><pubDate>Thu, 16 May 2024 11:13:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--flkb12jp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenAI%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2582%25AF%25E3%2582%25A4%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E6%2596%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hayato94087%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5ZTEyZGJjZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hayato94087</dc:creator></item><item><title><![CDATA[話題のChatGPTで生成されたアプリを作ってみた(TypeScriptを使ったToDoリストアプリ制作)]]></title><description><![CDATA[
 はじめに
こちらの記事は、プログラミング初学者が書いています。内容の保証性は確立していません。
また、ChatGPTで作成したコードを TypeScript 初学者がアウトプットするためのものです。

 この記事ではなくChatGPTを見つつ学びたい場合
以下の2つをChatGPTに質問し、返答を元に実行してください。

TypeScriptの学習のために簡単なアプリを作りたいのですが、どんな案がありますか？
ToDoリストアプリの作り方を教えてください。


 ChatGPTに従ってTo Doアプリの作成 〜制作編〜

 0.このチュートリアルに必要なもの
以下の4つが必要になりま...]]></description><link>https://zenn.dev/0o0zk/articles/589e3af07a9d89</link><guid isPermaLink="true">https://zenn.dev/0o0zk/articles/589e3af07a9d89</guid><pubDate>Thu, 16 May 2024 10:44:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oci8OfH8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A9%25B1%25E9%25A1%258C%25E3%2581%25AEChatGPT%25E3%2581%25A7%25E7%2594%259F%25E6%2588%2590%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528TypeScript%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259FToDo%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E5%2588%25B6%25E4%25BD%259C%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3M2M3NTI5MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazuki</dc:creator></item><item><title><![CDATA[モノレポのプロジェクトでhuskyを設定してみた]]></title><description><![CDATA[フロントエンドの静的テストとして、huskyとlint-stagedを用いてeslintとprettierを実行しようとしたところ、.gitとpackage.jsonのディレクトリが同一でないことで詰まったので備忘録。
ちなみに、ディレクトリの構造はこんな感じで、husky@9.0.11、lint-staged@15.2.2でのお話。
root/
|--.git  &lt;--
|--client
|  |--src
|  └--package.json &lt;--
|--server

 インストール
とにもかくにも、まずはインストール。
まずはhuskyのドキュメント通りやってみる...]]></description><link>https://zenn.dev/ryoooosk/articles/8901e8a3f25a38</link><guid isPermaLink="true">https://zenn.dev/ryoooosk/articles/8901e8a3f25a38</guid><pubDate>Thu, 16 May 2024 10:15:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1wg-hukH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AC%25E3%2583%259D%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25A7husky%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A3%25E3%2581%25A1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExZGZlZDk1MWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いどっっち</dc:creator></item><item><title><![CDATA[【オブジェクト指向,is関数,リファクタリングベストプラクティス】JavaScript,Go,TypeScript, Ruby,Python]]></title><description><![CDATA[
 前回のおさらい
前回: https://zenn.dev/llc_starhacks/articles/98cd2b28eab887

オブジェクト指向を取り入れると: 階層構造でオブジェクトを表現できるのでした

例 users[].followers[].remove(userId)

例 users[].medias[].likes[].push({ userId })

例 users[].medias[].comments[].push({ userId, text })



「フォローしているユーザー」は followUserではありません。

followUser: ...]]></description><link>https://zenn.dev/llc_starhacks/articles/e0890f52c443f2</link><guid isPermaLink="true">https://zenn.dev/llc_starhacks/articles/e0890f52c443f2</guid><pubDate>Thu, 16 May 2024 07:22:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--po25yGC9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%258C%2587%25E5%2590%2591%252Cis%25E9%2596%25A2%25E6%2595%25B0%252C%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%25E3%2580%2591JavaScript%252CGo%252CTypeScript...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:llc_starhacks%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4M2QxODAxZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>llc_starhacks</dc:creator></item><item><title><![CDATA[Type scriptのエラーハンドリング]]></title><description><![CDATA[TypeScriptでtry-catchブロックを書く方法は、JavaScriptと同様です。以下は基本的な構文
try {
    // ここに例外が発生する可能性のあるコードを書く
} catch (error) {
    // 例外が発生した場合の処理を書く
}
例外が発生する可能性のあるコードをtryブロックに置きます。もし例外が発生した場合は、その例外をキャッチして処理を行うためにcatchブロックが実行されます。catchブロックの引数errorには、発生した例外が渡されます。ただし、tryブロック内で定義された変数は、catchブロック内でアクセスできないことに注意してく...]]></description><link>https://zenn.dev/nyankonya/articles/a853703d075d75</link><guid isPermaLink="true">https://zenn.dev/nyankonya/articles/a853703d075d75</guid><pubDate>Thu, 16 May 2024 06:02:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nlsd-jXO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Type%2520script%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AB%25E3%2582%2583%25E3%2582%2593%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE1NmU0MTcwZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>にゃんこ</dc:creator></item><item><title><![CDATA[Result型 + Higher-Order FunctionでPromiseを使い易くする【TypeScript】]]></title><description><![CDATA[!
個人の思想を含みます。またrouterの部分は、vue-routerをベースとしています。


 Promiseの煩雑さ
(Node.jsの世界でも頻繁にPromiseは登場しますが)フロントエンドでは、画面の描画時やイベント時にAPIへのリクエスト〜レスポンスデータの取得、ルーターでの画面遷移などで頻繁にPromiseを扱います。
Promiseの状態解決をした後に.thenメソッド等で、後続処理を書いていくことになりますが、
手続き的に後続処理を書き繋ぐと際限なくネストが深くなり続け、Promise地獄になってしまうことがあります。(特にPromise.allなど)
.then(...]]></description><link>https://zenn.dev/eju_labs/articles/5d40f9daec7229</link><guid isPermaLink="true">https://zenn.dev/eju_labs/articles/5d40f9daec7229</guid><pubDate>Thu, 16 May 2024 05:43:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qs7Gn6PQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Result%25E5%259E%258B%2520%252B%2520Higher-Order%2520Function%25E3%2581%25A7Promise%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E6%2598%2593%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590TypeScript%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hanzzo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ejuLabs%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1OWY1NDcxZDguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hanzzo</dc:creator></item><item><title><![CDATA[サバイバルTypescript 試してみた]]></title><description><![CDATA[
 はじめに
こちらの記事は、プログラミング初学者が書いています。内容の保証は確立していません。
また、サバイバル TypeScript で学習したものを TypeScript 初学者がアウトプットするためのものです。

 作って学ぶTypeScript

 Reactでいいねボタンを作ろう

 参考
https://typescriptbook.jp/tutorials/react-like-button-tutorial

 冒頭の要約
Reactの3大特徴

仮想DOM (Virtual DOM)



通常のDOMはHTMLをJavaScriptから操作する仕組みで、リアルタイム...]]></description><link>https://zenn.dev/0o0zk/articles/ac65cca1f3b4bd</link><guid isPermaLink="true">https://zenn.dev/0o0zk/articles/ac65cca1f3b4bd</guid><pubDate>Thu, 16 May 2024 05:34:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JPHywQo---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B5%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2590%25E3%2583%25ABTypescript%2520%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3M2M3NTI5MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazuki</dc:creator></item><item><title><![CDATA[フロントエンドのテスト環境を作る（Bun+Jest）]]></title><description><![CDATA[
 はじめに
フロントエンド開発において、コードの品質を保つことは重要です。特に、ユーザーインターフェースの変更や機能の追加が頻繁に行われる現代のWeb開発では、予期しないバグが発生することを防ぐためにテストの導入が欠かせません。
しかし、過去にはフロントエンドテストがあまり重視されていなかった時代もありました。そのため、バグが発生しやすく、保守が困難なコードが多く存在していました。
この記事では、シンプルなフロントエンドテストに関する部分を書こうと思います。テストのレシピブックとしても使っていこうと思っているので、随時この記事を更新or新規記事作成していこうと思っています！

 環境に...]]></description><link>https://zenn.dev/salvage0707/articles/375b8994c1e05e</link><guid isPermaLink="true">https://zenn.dev/salvage0707/articles/375b8994c1e05e</guid><pubDate>Thu, 16 May 2024 00:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QhcCBhoa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25EF%25BC%2588Bun%252BJest%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%258B%25E3%2581%25B9%25E3%2581%2584%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxOGVmZTY1YzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まるべいじ</dc:creator></item><item><title><![CDATA[Next14 ページ移動の検知を行う方法]]></title><description><![CDATA[
 行いたい実装
Next.js 14でページ移動を検知してDialogを表示させたい
サイドバーなどが、layoutを使って実装しているため、page.tsxからpropsを渡すことができない。

 前提
Next14では、App Routerの導入やgetServerSideProps関数などを代表する様々なサーバーサイド処理向け関数の廃止や非推奨化になり、今までのNext.jsによる開発方法が使えなくなっています。
(https://nextjs.org/docs/app/api-reference/functions/use-router#migrating-from-nextr...]]></description><link>https://zenn.dev/keishi815/articles/0ef7bf12e68e6f</link><guid isPermaLink="true">https://zenn.dev/keishi815/articles/0ef7bf12e68e6f</guid><pubDate>Thu, 16 May 2024 00:19:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MjbLQmgt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next14%2520%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%25AE%25E6%25A4%259C%25E7%259F%25A5%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25A3%25E3%2581%25A1%25E3%2583%25BC%25E3%2581%25AEtech%2520blog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2Z0anpKTGlDbGVGbUt3UXJhMjhUWEwwZEx6cjM2UDlKai1oRDJPVjByM1c1ZkxfR1Y9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いっちーのtech blog</dc:creator></item><item><title><![CDATA[プログラミング初学者がTypeScriptで簡易的なカウンターアプリを作った]]></title><description><![CDATA[
 はじめに
こちらの記事は、プログラミング初学者が書いています。内容の保証性は確立していません。
また、サバイバル TypeScript で学習したものを TypeScript 初学者がアウトプットするためのものです。
https://typescriptbook.jp/tutorials/react-like-button-tutorial

 前提

Node.js のインストール
npm のインストール (サバイバル TypeScript では yarn を使用している)


 React のプロジェクトを作成
npm(Node Package Manager) を使用
npx ...]]></description><link>https://zenn.dev/nka21/articles/c0037b629b12ee</link><guid isPermaLink="true">https://zenn.dev/nka21/articles/c0037b629b12ee</guid><pubDate>Wed, 15 May 2024 15:32:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--47S7NqG8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E3%2581%258CTypeScript%25E3%2581%25A7%25E7%25B0%25A1%25E6%2598%2593%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:naoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmOGM3MWM5YTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>naoki</dc:creator></item><item><title><![CDATA[AWS Chatbot で予算アラートを Slack に通知する]]></title><description><![CDATA[
 はじめに
AWSをはじめ、クラウドサービスってほんとに便利ですよね。個人開発者にも優しい無料枠もたくさんあって嬉しい限り。ですが従量課金ゆえ、気をつけないといつだってクラウド破産と隣り合わせです。
今回はそんなクラウド破産を防ぐべく、設定した予算に到達したら通知をSlackに送ってもらえる予算アラートをAWS CDKを使って組んでいきたいと思います。

 対象読者

AWSを利用している方
AWSコストの監視をしたい方
Slackを利用している方
AWS CDKでインフラを管理したい方
Typescriptを使ったことがある方


 技術スタック

AWS CDK(Typescrip...]]></description><link>https://zenn.dev/t_o_m_o/articles/3be7ed5d09bc9b</link><guid isPermaLink="true">https://zenn.dev/t_o_m_o/articles/3be7ed5d09bc9b</guid><pubDate>Wed, 15 May 2024 14:20:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--j2qJgp5V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520Chatbot%2520%25E3%2581%25A7%25E4%25BA%2588%25E7%25AE%2597%25E3%2582%25A2%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%2520Slack%2520%25E3%2581%25AB%25E9%2580%259A%25E7%259F%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiZDBiNzc5MTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomo</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(後半)]]></title><description><![CDATA[
 前回の記事から
今回は2つの記事に分けることになりました。
こちらはデザインパターン備忘録(前半)からの続きになります。

 Chain of Responsibility（責任の連鎖）パターン

 メリット

柔軟なリクエスト処理

リクエストを処理するオブジェクトを動的に変更できるため、柔軟なリクエスト処理が可能です。

コードの分離

リクエストを処理する各オブジェクトを独立して設計できるため、責任を分離できます。

可読性と保守性の向上

処理ロジックをチェーン内の各オブジェクトに分散させることで、コードの可読性と保守性が向上します。

新しい処理の追加が容易

新しい処理を...]]></description><link>https://zenn.dev/kou_kawa/articles/36-design-pattern-02</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/36-design-pattern-02</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MQBCehL4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%25BE%258C%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item><item><title><![CDATA[デザインパターン備忘録(前半)]]></title><description><![CDATA[
 はじめに
ChatGPT-4oが使用できるようになりました。私も早速使ってみましたが、以前のバージョンに比べてスピードと精度の向上を実感しました。これを機に、デザインパターンについての記事を書いてみることにしました。この記事を通じて勉強にもなり、後で見返すための資料としても活用できるようにしたいと思います。サンプルコードには、Java、TypeScript、Pythonのプログラミング言語を使用しています。
今回は記事を2つに分けることになりました。
後半の記事はこちら

 デザインパターン一覧

生成に関するパターン

Abstract Factory（アブストラクトファクトリー）...]]></description><link>https://zenn.dev/kou_kawa/articles/35-design-pattern-01</link><guid isPermaLink="true">https://zenn.dev/kou_kawa/articles/35-design-pattern-01</guid><pubDate>Wed, 15 May 2024 13:47:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ihl2SnhW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2528%25E5%2589%258D%25E5%258D%258A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyNTU3ZTY0NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kou</dc:creator></item></channel></rss>