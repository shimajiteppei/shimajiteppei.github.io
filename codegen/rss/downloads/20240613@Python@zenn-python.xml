<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 13 Jun 2024 02:08:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Bash】Python、Ruby、PHP のワンライナーで標準入力を利用する]]></title><description><![CDATA[Python
echo -n "Hello World" | \
&gt; python3 -c "import sys; print(http://sys.stdin.read())";
Hello World
Ruby
echo -n "Hello World" | \
ruby -ne 'puts $_'
PHP
echo -n 'Hello World' | php -R 'var_dump($argi, $argn);'
int(1)
string(11) "Hello World"
]]></description><link>https://zenn.dev/masakielastic/articles/5dc062255326ae</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/5dc062255326ae</guid><pubDate>Wed, 12 Jun 2024 20:21:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aLGzKfNL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Bash%25E3%2580%2591Python%25E3%2580%2581Ruby%25E3%2580%2581PHP%2520%25E3%2581%25AE%25E3%2583%25AF%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25BC%25E3%2581%25A7%25E6%25A8%2599%25E6%25BA%2596%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[GIS × Python Tutorial Session9 ~ DTMの後処理 ~]]></title><description><![CDATA[この記事は「GIS × Python Tutorial」の関連記事です。


 はじめに

Session7 の記事では CSF による点群データ分類と DTM の作成を行いました。しかし作成した DTM は所々穴が開いていたり、その他に地表付近の地物が影響していたのか、ボコボコとした形になっていました。
この記事では、穴（欠損）を埋めしたり、データを滑らかにする為の後処理について解説します。


 今回使用するデータ

今回は前回の記事で作成した DTM を使用します。実際に動かしてみたい方は、以下のURLから始めて下さい。
https://zenn.dev/daidai_daitai...]]></description><link>https://zenn.dev/daidai_daitai/articles/6191169a0ef090</link><guid isPermaLink="true">https://zenn.dev/daidai_daitai/articles/6191169a0ef090</guid><pubDate>Wed, 12 Jun 2024 14:16:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ee9AAYb3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GIS%2520%25C3%2597%2520Python%2520Tutorial%2520Session9%2520%7E%2520DTM%25E3%2581%25AE%25E5%25BE%258C%25E5%2587%25A6%25E7%2590%2586%2520%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A9%2599%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MjJMLWoxUDdDS1dHZWJjbmh0YUxmV3BGRGNSTnBDQnZZTGYxYUpqQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>橙。</dc:creator></item><item><title><![CDATA[『ゼロから作るDeep Learning ❸』をRustに翻訳してみた : step3まで]]></title><description><![CDATA[
 はじめに
元々Zennで記事をはじめたコンセプト「機械学習の活用に役立つコンピュータサイエンスを学びたい」にしたがって、今後はDeep Learningをコンピュータサイエンスの観点で深掘りしたいと思っています。
その第一歩として『ゼロから作るDeep Learning ❸ ―フレームワーク編』で構築されているDeep LearningのフレームワークDeZeroをRustで実装し、フレームワークを一段レイヤーを下げて理解することを試みます。
上記の目的のため、Rustコードを示すだけでなく、pythonによる実装との差異について深掘りして、pythonがいい感じに勝手に捌いてくれて...]]></description><link>https://zenn.dev/bobtk/articles/853fe0c72e8be5</link><guid isPermaLink="true">https://zenn.dev/bobtk/articles/853fe0c72e8be5</guid><pubDate>Wed, 12 Jun 2024 12:38:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eAffpCOx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258E%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E4%25BD%259C%25E3%2582%258BDeep%2520Learning%2520%25E2%259D%25B8%25E3%2580%258F%25E3%2582%2592Rust%25E3%2581%25AB%25E7%25BF%25BB%25E8%25A8%25B3%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%253A%2520step3%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BC%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmE0SzgwSm1KVXMyRnZObHcwNjNUdkJVM3N2OGFXZHFpZ1VOVndvMmhMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぼぶ</dc:creator></item><item><title><![CDATA[LCEL記法のChainにMemoryを組み込む方法]]></title><description><![CDATA[!
本記事ではGroq APIを使用する前提で記載しております。


 概要
LangChainでは処理の流れを直感的に実装することが可能なLangChain Expression Language (LCEL) 記法での実装がおすすめされています。

LCEL makes it easy to build complex chains from basic components, and supports out of the box functionality such as streaming, parallelism, and logging.

LCELを用いるとprompt ...]]></description><link>https://zenn.dev/mizunny/articles/d974720d8acc6f</link><guid isPermaLink="true">https://zenn.dev/mizunny/articles/d974720d8acc6f</guid><pubDate>Wed, 12 Jun 2024 12:23:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aYE2b5iY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LCEL%25E8%25A8%2598%25E6%25B3%2595%25E3%2581%25AEChain%25E3%2581%25ABMemory%25E3%2582%2592%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2580%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2MGEyODIyYWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuchan</dc:creator></item><item><title><![CDATA[分割キーボードZSA Voyagerの設定（for Houdini）]]></title><description><![CDATA[
 Voyager is 何
こんなキーボード。

スペックなどは下記ブログにまとめているのでご参考されたし。
https://sizu.me/kickbase/posts/owab9smovkkx
本記事ではキーコンフィグの意図・設計の説明を踏まえたうえで、僕のメインツールであるHoudiniに最適化した流れを見ていきたい。
※ここで言うHoudiniはSideFX社の3Dツールを指します

 Layer0
メインとなるレイヤー。当然ここに最も使用頻度の高いキーを集めることとなる。下記の画像を見てみよう。

修飾キーなどは好みにあわせればいいと思うが、デフォルト設定から変更した個人的に...]]></description><link>https://zenn.dev/kickbase/articles/defe1231da7226</link><guid isPermaLink="true">https://zenn.dev/kickbase/articles/defe1231da7226</guid><pubDate>Wed, 12 Jun 2024 08:07:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Wt14yxDN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%2586%25E5%2589%25B2%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589ZSA%2520Voyager%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25EF%25BC%2588for%2520Houdini%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%25E3%2582%2593%25E3%2581%259F%25E3%2581%2584%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pvTlNrRXEtOVdEUlNaa2dKcFBxeFlFZGpZTm5TcGl3SzFUeXZOPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>めんたいこ</dc:creator></item><item><title><![CDATA[初心者のPython3レッスンーーPython3の基本データ型]]></title><description><![CDATA[
 Pythonの変数代入
Pythonで変数に値を代入するには、以下のように等号（=）を使用します：
変数名 = 値

普通の例：

x = 10
pi = 3.14
name = "Alice"
fruits = ["apple", "banana", "cherry"]

複数変数への同時代入：

a, b, c = 1, 2, 3
ここでは、変数aに1、bに2、cに3を同時に代入しています。

同じ値を複数の変数に代入：

x = y = z = 0
ここでは、変数x、y、z全てに0を代入しています。

 標準データ型
Python3には、いくつかの基本的なデータ型があります。こ...]]></description><link>https://zenn.dev/datasciencekun/articles/837bb12cf937f8</link><guid isPermaLink="true">https://zenn.dev/datasciencekun/articles/837bb12cf937f8</guid><pubDate>Wed, 12 Jun 2024 04:49:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9nMP1mW0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AEPython3%25E3%2583%25AC%25E3%2583%2583%25E3%2582%25B9%25E3%2583%25B3%25E3%2583%25BC%25E3%2583%25BCPython3%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B9%25E5%2590%259B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE1MTEwODMxZmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>データサイエンス君</dc:creator></item><item><title><![CDATA[Groq APIとLangChainで簡単な対話型AIを作ってみる]]></title><description><![CDATA[
 概要
Groq APIとLangChainを組み合わせてPythonで簡単な対話型AIを作ってみる記事です。
Groq APIを使うまでの準備はこちらの記事を参照ください。

 Groqを選んだ理由
大きく分けて二つの理由があります。

2024/06現在、無料でAPIを使用できるから（私にとってはこれが一番の理由です😂）
OpenAPIとCompatibleであると公式で語られており、今後他のAPIを使用することになっても実装は共通で使えると思われるから

LangChainのChatmodels ComponentsにGroq APIを使うためのパッケージChatGroqも準備さ...]]></description><link>https://zenn.dev/mizunny/articles/32985e2b225327</link><guid isPermaLink="true">https://zenn.dev/mizunny/articles/32985e2b225327</guid><pubDate>Wed, 12 Jun 2024 03:12:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FFHZ0ia7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Groq%2520API%25E3%2581%25A8LangChain%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E5%25AF%25BE%25E8%25A9%25B1%25E5%259E%258BAI%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2MGEyODIyYWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuchan</dc:creator></item><item><title><![CDATA[複数の動画を同一オプションでワンライナー処理するスクリプト]]></title><description><![CDATA[
 はじめに
FFmpegはコマンドラインで動画ファイルを処理できるので大変便利です。
しかし、同じような処理を複数の動画ファイルに対して適用するには、コマンドのパスの部分をファイルごとに変えなければなりません。
これは少し手間です。
以下のスクリプトは、その手間を省いてくれるPythonスクリプトです。
FFmpegを外部コマンドとして呼び出すだけなので、パッケージのインストールは不要です。

 コード
import re
import sys
from argparse import ArgumentParser
from pathlib import Path
from subpr...]]></description><link>https://zenn.dev/hotari/articles/e35f0b77aa56ca</link><guid isPermaLink="true">https://zenn.dev/hotari/articles/e35f0b77aa56ca</guid><pubDate>Tue, 11 Jun 2024 16:31:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--atIOnmm9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E5%258B%2595%25E7%2594%25BB%25E3%2582%2592%25E5%2590%258C%25E4%25B8%2580%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%25E3%2583%25AF%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25BC%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hotari%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMjlmZGI3YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hotari</dc:creator></item><item><title><![CDATA[yolov8を用いてmp4動画ファイルの物体検知をする]]></title><description><![CDATA[
 やること
yolov8を用いてmp4動画ファイルの物体検知を行う。

 前提

Python 3.9.6
mp4ファイルが手元にあること


 手順

以下のコマンドを実行

pip install ultralytics

以下のコードを実行

import cv2
from ultralytics import YOLO

# 動画ファイルのパス
video_path = '&lt;動画ファイルまでのパス&gt;'

# Yolov8モデルのロード
model = YOLO('yolov8n.pt')

# 動画ファイルの読み込み
cap = cv2.VideoCapture(v...]]></description><link>https://zenn.dev/headwaters/articles/b28114b2ff4b86</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/b28114b2ff4b86</guid><pubDate>Tue, 11 Jun 2024 15:10:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_Ru8GegU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:yolov8%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%25A6mp4%25E5%258B%2595%25E7%2594%25BB%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E7%2589%25A9%25E4%25BD%2593%25E6%25A4%259C%25E7%259F%25A5%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takekawa%2520tomoki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmODg5YTRhYzguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takekawa tomoki</dc:creator></item><item><title><![CDATA[無料で使えるLLM API Groqを使ってみた]]></title><description><![CDATA[
 概要
LLM APIを使ってみたいけど従量課金システムには抵抗があるという私でも気軽に使えるAPIを知ったので、本記事ではその使い方をまとめたいと思います。
!
2024/06現在、Groqはβ版のためAPIを無料で使用できます。今後利用条件が変わる可能性もありますのでお気を付けください。


 Groqとは
Groqは、Google出身のエンジニアが創業したスタートアップ企業によって開発された対話型生成AIです。レスポンスが非常に高速であることが特徴であり、Chat画面にも「Groq is Fast AI Inference」とあります。体感でもレスポンスが一瞬でした。
https...]]></description><link>https://zenn.dev/mizunny/articles/58be26d25f9589</link><guid isPermaLink="true">https://zenn.dev/mizunny/articles/58be26d25f9589</guid><pubDate>Tue, 11 Jun 2024 14:04:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aMycDksD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2584%25A1%25E6%2596%2599%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258BLLM%2520API%2520Groq%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2MGEyODIyYWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuchan</dc:creator></item><item><title><![CDATA[初心者のPython3レッスンーーPython3 基礎文法]]></title><description><![CDATA[
 Python実行環境
様々なPython環境を構築方法があるけど、初心者に対してGoogle Colabがおすすめです。
構築する必要がなくて、登録するとすぐに使えるようになります。
Google Colabのリンクは下記です。
https://colab.research.google.com/?hl=ja
Google Colabの使い方は他のブログに参照してください！
https://www.kikagaku.co.jp/kikagaku-blog/google-colab-howto/

 識別子
"Python識別子" は、Pythonプログラミング言語で変数、関数、クラス...]]></description><link>https://zenn.dev/datasciencekun/articles/3979d693d19fa7</link><guid isPermaLink="true">https://zenn.dev/datasciencekun/articles/3979d693d19fa7</guid><pubDate>Tue, 11 Jun 2024 13:28:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P2GJyhbD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AEPython3%25E3%2583%25AC%25E3%2583%2583%25E3%2582%25B9%25E3%2583%25B3%25E3%2583%25BC%25E3%2583%25BCPython3%2520%25E5%259F%25BA%25E7%25A4%258E%25E6%2596%2587%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B9%25E5%2590%259B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE1MTEwODMxZmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>データサイエンス君</dc:creator></item><item><title><![CDATA[FastAPIのディレクトリ構成/フォルダ構成]]></title><description><![CDATA[ここでは、FastAPI + SQLAlchemyを利用した場合のディレクトリ構成について説明します。

 ディレクトリ構成の完成系と概要
完成系は、以下のようになります。
app
├── api
│   ├── endpoints       # routerとパスオペレーション関数
│   ├── deps.py         # Depends()に含める関数
│   └── api.py          # endpointsのrouterをひとつにまとめる
├── core
│   ├── config.py       # 設定値
│   └── security.py ...]]></description><link>https://zenn.dev/noknmgc/articles/fastapi-directory-structure</link><guid isPermaLink="true">https://zenn.dev/noknmgc/articles/fastapi-directory-structure</guid><pubDate>Tue, 11 Jun 2024 08:29:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oeaO-vEw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FastAPI%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%252F%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2580%25E6%25A7%258B%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmZGMwNGUwYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ノック</dc:creator></item><item><title><![CDATA[dbt macroのロジックを自動でテストしたい]]></title><description><![CDATA[
 モチベーション
dbtで随所で使われるマクロがあると思います。
generate_schema_name[1]などは色々な企業で該当するのでは？と勝手に思っています。
(ヒアリングはしていないのであくまで個人的な感想です)
このように広く使われるマクロでバグや意図しない変更がデプロイされると影響範囲が大きく、バックフィルやデータ修正に大きく時間が取られることになります。
またテストが入ってないことで、動作確認や検証、レビューにも時間がかかり積極的に触りたくないマクロになります。
これを解決するために自動テストを導入して安定性を高められないか？と考えて、実装してみたのでこれを共有します...]]></description><link>https://zenn.dev/pixiv/articles/8b4fc2b870b8f9</link><guid isPermaLink="true">https://zenn.dev/pixiv/articles/8b4fc2b870b8f9</guid><pubDate>Tue, 11 Jun 2024 08:10:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fymsSt2L--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:dbt%2520macro%25E3%2581%25AE%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kashira%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhMDc3ZWRhZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:pixiv%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlZDBiNDVjOWMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kashira</dc:creator></item><item><title><![CDATA[macos(zsh)で特定ディレクトリで自動的にconda activateする]]></title><description><![CDATA[お試しで環境を変える際に、conda activateをいちいち打つのがめんどくさいので、conda 環境で特定ディレクトリ配下に移動すると自動的に仮想環境をアクティベートする方法(DevelopersIO)のzsh版を作成しました。基本的には引用記事の通りで、profileをzsh向けに変更しています。

 設定手順
任意の仮想環境へ切り替え用の任意の名前のディレクトリを作成します。
mkdir ~/new_proj
cd ~/new_proj
仮想環境名はnew_projと名付けて新規作成後、アクティベートします。既存の仮想環境を利用される場合はアクティベートだけ実行してください。
...]]></description><link>https://zenn.dev/baremetal/articles/69e611ea48fe68</link><guid isPermaLink="true">https://zenn.dev/baremetal/articles/69e611ea48fe68</guid><pubDate>Mon, 10 Jun 2024 16:41:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lcju143O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:macos%2528zsh%2529%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2581%25ABconda%2520activate%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:baremetal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZjODc2MjNjNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>baremetal</dc:creator></item><item><title><![CDATA[LangchainのStructured OutputとTool Callingを利用して構造化された形式で情報を抽出する]]></title><description><![CDATA[大規模言語モデル（LLM）の活用法の一つに「大量の文書の中から必要な情報を、指定した形式で抽出する」というものがあります。自然言語で回答してもらうのではなく、JSONスキーマなどであらかじめ指定した形式で回答をしてもらうことで、プログラム内での情報の活用につなげることができます。
この記事では、Langchainと主要なLLMのAPIを用いて、文章中から構造化データの形で必要な情報を抜き出す方法を試してみましたので紹介します。

 環境と使用するLLM
いつものように、Windows10上でPythonとLangchainを利用します。Pythonは3.11、Langchainのバージョ...]]></description><link>https://zenn.dev/khisa/articles/82e7d3d33f907d</link><guid isPermaLink="true">https://zenn.dev/khisa/articles/82e7d3d33f907d</guid><pubDate>Mon, 10 Jun 2024 14:44:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5yTRFIqn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Langchain%25E3%2581%25AEStructured%2520Output%25E3%2581%25A8Tool%2520Calling%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%25A7%258B%25E9%2580%25A0%25E5%258C%2596%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25A7%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B2%25E3%2581%2595%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHFKaUVHa1VQMkc5WGpIeHlTa3p4bld3Z3JNcHFhT19hUFVKcWEyQ2YxWUZFPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひさ</dc:creator></item><item><title><![CDATA[【Streamlit×Azure Document intelligence】OCRができるwebアプリを作ってみる]]></title><description><![CDATA[
 やること
Azure Document intelligenceとStreamlitでOCRができるwebアプリを作ってみる

 前提

Document intelligenceを構築済みであること


 参考資料
https://zenn.dev/headwaters/articles/7865873c67b0ec
https://zenn.dev/headwaters/articles/8e23a752096c1e
https://zenn.dev/headwaters/articles/43b7f61006117c
https://zenn.dev/headwaters/ar...]]></description><link>https://zenn.dev/headwaters/articles/549c86e65ea714</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/549c86e65ea714</guid><pubDate>Mon, 10 Jun 2024 13:18:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ncluT8Gb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Streamlit%25C3%2597Azure%2520Document%2520intelligence%25E3%2580%2591OCR%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258Bweb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takekawa%2520tomoki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmODg5YTRhYzguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takekawa tomoki</dc:creator></item><item><title><![CDATA[Flaskでアプリ開発に入門する]]></title><description><![CDATA[
 やること
アヤメデータの動的なグラフを表示するWEBアプリを開発する

 参考文献
今回アプリを開発するにあたり、以下の文献を参考にしました。
https://www.shoeisha.co.jp/book/detail/9784798175164

 前提

 Flaskとは
FlaskはDjangoと並んで用いられるPythonのフレームワークで、Djangoと比較して軽量、高速、学習コストが低いという利点があるため、近年台頭してきているようです。

 MVTとは
DjangoやFlaskを用いたアプリのアーキテクチャとしてはMVCやMVTがありますが、今回はMVTで全体の構成を...]]></description><link>https://zenn.dev/headwaters/articles/526d1a9588b754</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/526d1a9588b754</guid><pubDate>Mon, 10 Jun 2024 12:38:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zlGAK4Jj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Flask%25E3%2581%25A7%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:akihiro%2520nakamura%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5MjU4ZWEwY2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akihiro nakamura</dc:creator></item><item><title><![CDATA[［AtCoder］ABC-355｜A - Who Ate the Cake?]]></title><description><![CDATA[
 設問ページ

🔗ABC-355 A - Who Ate the Cake?



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    if a == b:
        print(-1)
    else:
        print(6 - (a + b))


if __name__ == "__main__":
    main()
]]></description><link>https://zenn.dev/hyperdb/articles/f99b09992825f2</link><guid isPermaLink="true">https://zenn.dev/hyperdb/articles/f99b09992825f2</guid><pubDate>Mon, 10 Jun 2024 10:36:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--25OYBrta--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%25BBAtCoder%25EF%25BC%25BDABC-355%25EF%25BD%259CA%2520-%2520Who%2520Ate%2520the%2520Cake%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2584%25E3%2581%25B1%25E3%2581%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhODJkODgwMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はいぱぁ</dc:creator></item><item><title><![CDATA[［AtCoder］ABC-355｜B - Piano 2]]></title><description><![CDATA[
 設問ページ

🔗ABC-355 B - Piano 2



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, m = getIntMap()
    a = getIntList()
    b = getIntList()

    c = dict()
    for i in a:
        c[i] = 'A'
    for i i...]]></description><link>https://zenn.dev/hyperdb/articles/ec5e753282761b</link><guid isPermaLink="true">https://zenn.dev/hyperdb/articles/ec5e753282761b</guid><pubDate>Mon, 10 Jun 2024 10:36:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C8_LGUHU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%25BBAtCoder%25EF%25BC%25BDABC-355%25EF%25BD%259CB%2520-%2520Piano%25202%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2584%25E3%2581%25B1%25E3%2581%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhODJkODgwMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はいぱぁ</dc:creator></item><item><title><![CDATA[［AtCoder］ABC-356｜B - Nutrients]]></title><description><![CDATA[
 設問ページ

🔗ABC-356 B - Nutrients



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    N, M = getIntMap()
    A = getIntL...]]></description><link>https://zenn.dev/hyperdb/articles/b5520afaff960e</link><guid isPermaLink="true">https://zenn.dev/hyperdb/articles/b5520afaff960e</guid><pubDate>Mon, 10 Jun 2024 10:36:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--StQ_Qml5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%25BBAtCoder%25EF%25BC%25BDABC-356%25EF%25BD%259CB%2520-%2520Nutrients%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2584%25E3%2581%25B1%25E3%2581%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhODJkODgwMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はいぱぁ</dc:creator></item></channel></rss>