<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/01c7f20365.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 27 Jun 2024 07:45:22 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dockerの基本講座]]></title><description><![CDATA[この講座では、Dockerの基本概念から始まり、実際の使用例やコマンドの解説まで、初めてDockerを使う方にもわかりやすく説明します。
コンテナ技術の基礎を学び、実際のプロジェクトで活用できるようになることを目指します。

 1. Dockerとは？
コンテナ技術の背景
コンテナ技術とは？ コンテナ技術は、アプリケーションの実行環境を隔離し、依存関係を一つのパッケージにまとめる手法です。これにより、アプリケーションがどの環境でも一貫して動作するようになります。
なぜコンテナが必要なのか？ 従来の仮想マシン（VM）と比較して、コンテナは軽量で高速です。VMは完全なオペレーティングシステム...]]></description><link>https://zenn.dev/jokota/articles/69939620623789</link><guid isPermaLink="true">https://zenn.dev/jokota/articles/69939620623789</guid><pubDate>Thu, 27 Jun 2024 05:39:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DEut8TPG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E8%25AC%259B%25E5%25BA%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jokota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M3OGIxOWU3ZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jokota</dc:creator></item><item><title><![CDATA[Firecrawlをローカルで動かしDifyと繋げてみる]]></title><description><![CDATA[
 概要

Dify v0.6.11で利用可能になったFirecrawlでWebサイトのナレッジ登録が可能に
SaaS版のFirecrawlは無料だと500回のリクエスト制限がある

https://www.firecrawl.dev/

OSS版のFirecrawlは無制限でリクエストが可能
この記事ではローカルでOSS版のFirecrawlを立ち上げDifyと繋げる方法を紹介


 前提

DockerやGitコマンドが使える
ローカル上にDifyが既に起動している


 OSS版Firecrawlをローカル起動

 クローン
OSS版Firecrawlは下記で活発に開発が行われてい...]]></description><link>https://zenn.dev/satto_sann/articles/d177f4cdc02755</link><guid isPermaLink="true">https://zenn.dev/satto_sann/articles/d177f4cdc02755</guid><pubDate>Wed, 26 Jun 2024 16:52:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lm6d3Pu8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Firecrawl%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597Dify%25E3%2581%25A8%25E7%25B9%258B%25E3%2581%2592%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2581%25A3%25E3%2581%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc5NzA4ZGUwNTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さっと</dc:creator></item><item><title><![CDATA[まだサーバー間リクエスト出来なくて沼ってるの？]]></title><description><![CDATA[と、煽っているが沼ったのは私です。
（備忘録クオリティでごめん）

 結論
エイリアスを使え！以上！

 ソースコード
実際のソースはこちら
backend.networksを見てくれ。

 やりたかったこと（ユースケース）

frontendサーバーからAPIを叩きたかった（SSR時）。
サーバー間でリクエストが飛ばせなくて困った。

version: '3.5'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      ...]]></description><link>https://zenn.dev/kjmboy/articles/38416ba125669a</link><guid isPermaLink="true">https://zenn.dev/kjmboy/articles/38416ba125669a</guid><pubDate>Wed, 26 Jun 2024 14:56:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lk3oaoZr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25BE%25E3%2581%25A0%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E9%2596%2593%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E5%2587%25BA%25E6%259D%25A5%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E6%25B2%25BC%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%258B%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%2598%25E3%2581%2593%25E3%2581%2598%25E3%2581%25BE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3FWcVpXYktUQjUyTm4taldPVnNtYVMyWkMwSl9RQWdPTjl2MU5aMHc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まじこじま</dc:creator></item><item><title><![CDATA[Dockerのマルチステージビルドで依存先を統一した回]]></title><description><![CDATA[
 挨拶
畑田です。
当社のプロジェクトにおいてNext.jsをECS on Fargateで実行する環境を構築しました。
その際にマルチステージビルドを採用したのですが、迅速なデリバリーを行うためにNext.jsが実行されるimageの依存先が少なくなるように工夫したので、ここに記録します。

 マルチステージビルド
まずはマルチステージビルドについて説明します。
説明するといっても公式ドキュメントが最も詳しいため、これを参照してください。
詳しくは上記ドキュメントに譲りますが、自分なりの解釈を述べておきます。
マルチステージビルドとは1つのDockerfileの中で複数のFROMステ...]]></description><link>https://zenn.dev/randd_inc/articles/5d954f2bfd46a4</link><guid isPermaLink="true">https://zenn.dev/randd_inc/articles/5d954f2bfd46a4</guid><pubDate>Wed, 26 Jun 2024 13:07:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Gtv8kuR4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25AE%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25A7%25E4%25BE%259D%25E5%25AD%2598%25E5%2585%2588%25E3%2582%2592%25E7%25B5%25B1%25E4%25B8%2580%25E3%2581%2597%25E3%2581%259F%25E5%259B%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Daiki-Hatada%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxZTNhMjllZmMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:R%2526D%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lKYURnclJlemVSd3hTZmNsOUlSMFBaZFpYSlVIRlhyNUhjT1FpNFE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki-Hatada</dc:creator></item><item><title><![CDATA[Docker のマルチステージビルドとは？]]></title><description><![CDATA[
 はじめに
Cloud Run でアプリを公開した時、 Dockerfile を作成した。
開発環境で見かける Dockerfile と異なり、 FROM 命令が多い印象を受けた。
なぜ FROM が多いのか？
https://zenn.dev/masayuki_0319/articles/056622534b4056
FROM node:20-alpine as base

# 作業ディレクトリを設定
WORKDIR /app

# 依存関係のインストール
FROM base as deps
COPY package.json yarn.lock ./
RUN yarn instal...]]></description><link>https://zenn.dev/masayuki_0319/articles/d214c099ee8635</link><guid isPermaLink="true">https://zenn.dev/masayuki_0319/articles/d214c099ee8635</guid><pubDate>Wed, 26 Jun 2024 10:23:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---kMDPdlq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25E3%2581%25AE%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:masayuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlBycEJKQk9JaGd6bTRrdjJPZ1YtOUhSTjhPRmd6SlFHMWt2ZnU4YVA3SU1RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>masayuki</dc:creator></item><item><title><![CDATA[Next.jsのstandaloneでのCI/CDについて考えてみる]]></title><description><![CDATA[https://youtu.be/3zLi0iNjmf8
Next.jsをミニマムかつコンテナでデプロイする方法について考えてみたので残しておきます。ステップバイステップの説明は動画を視聴していただけると幸いです。
とにかくソースを見たいという方は、以下に格納していますので合わせてご確認ください。
https://github.com/kenfdev/study-nextjs-turborepo-cicd

 はじめに
Next.jsの最適な本番環境へのデプロイには工夫が必要です。やり方はいろいろとありますし、使っているツール郡によっても微妙に気をつける点が違ってたりして試行錯誤が必要だ...]]></description><link>https://zenn.dev/kenfdev/articles/3c82912a21835a</link><guid isPermaLink="true">https://zenn.dev/kenfdev/articles/3c82912a21835a</guid><pubDate>Wed, 26 Jun 2024 08:15:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5QdlAeB3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25AEstandalone%25E3%2581%25A7%25E3%2581%25AECI%252FCD%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kenfdev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lnVUZOakM0OHNyRHBrdW03SXRrSi11UUg2ZFpvVUNkVUVfeHZsLVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kenfdev</dc:creator></item><item><title><![CDATA[【Python】Djangoでフォーム作成]]></title><description><![CDATA[
 完成イメージ

フォームと投稿一覧

初学者でも簡単に実装できます！


 開発環境：

windows 11
Vscode 1.87.2
Docker 26.1.1
Docker-compose 2.27.0
python

環境構築がまだの方はこちらから↓
https://zenn.dev/code_journey_ys/articles/ddd8ba305a2538

 1.フォルダ作成 ～ VScodeの起動

 1-1.ディレクトリ（フォルダ）を作成

コマンドプロンプトまたはWindows PowerShellにて実行（デスクトップ上にフォルダを作成）
mkdir tes...]]></description><link>https://zenn.dev/code_journey_ys/articles/adc10f57a8915b</link><guid isPermaLink="true">https://zenn.dev/code_journey_ys/articles/adc10f57a8915b</guid><pubDate>Tue, 25 Jun 2024 13:55:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fSriz2Nc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591Django%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxYmU5MTc2ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[【Docker】プロキシ環境からチュートリアルを実施する②]]></title><description><![CDATA[Dockerの公式ページにあるチュートリアルをプロキシ環境から実施したので、その手順を記します。
今回はPart3: アプリケーションの更新について説明します。
https://docs.docker.jp/get-started/toc.html
Part2の手順については以下の記事に記載していますので、気になる方はご覧ください。
https://zenn.dev/mmm_wak/articles/8c49ba3ab4a70f

 アプリケーションの更新

 ソースコードの更新
元々のアプリケーションでは、TODOリストに何も登録されていない場合「No Items yet! Add o...]]></description><link>https://zenn.dev/mmm_wak/articles/7521cada8c7358</link><guid isPermaLink="true">https://zenn.dev/mmm_wak/articles/7521cada8c7358</guid><pubDate>Tue, 25 Jun 2024 13:06:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FgkloiVY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E3%2580%2591%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25AD%25E3%2582%25B7%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%258B%25E3%2582%2589%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E5%25AE%259F%25E6%2596%25BD%25E3%2581%2599%25E3%2582%258B%25E2%2591%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2581%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlZGU2MTlkNmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>もえ</dc:creator></item><item><title><![CDATA[簡単なアプリを作って、Kubernetesで動かしてみる]]></title><description><![CDATA[簡単なREST API（言語はGo）を作って、ローカル環境で構築したKubernetesで実行までします。
KubernetesでHello worldしたい方や、アプリをカスタマイズしてKubernetesの検証をしたい人にとって、参考になれば幸いです。

 ゴール

簡単なREST APIのアプリを作成します
Dockerイメージを作成、実行します
Kubernetesに作成したアプリをデプロイします

https://github.com/d-zenju/web-service-gin

 環境

Golang v1.22.4
Rancher Desktop Version: 1....]]></description><link>https://zenn.dev/ozen/articles/6782af4952d98b</link><guid isPermaLink="true">https://zenn.dev/ozen/articles/6782af4952d98b</guid><pubDate>Tue, 25 Jun 2024 10:57:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EMUypL0u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581Kubernetes%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:d-zenju%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhMTRjOGQzN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>d-zenju</dc:creator></item><item><title><![CDATA[BigQueryを利用したアプリケーションのローカルテスト]]></title><description><![CDATA[BigQueryを利用するアプリケーションの開発時に、データベースの操作をどのようにテストするかが課題となります。その際の主な選択肢は下記となります。

BigQueryのモックを作成してローカルでテストする
テスト用のBigQuery環境を用意してGCP上でテストする

bigquery-emulatorを利用してローカルでテストする


 1. BigQueryのモックを作成してローカルでテストする

 概要
BigQueryの操作をモック化し、テスト時に実際のBigQueryに接続せずにテストを行う方法です。

 メリット

テストの実行が高速
外部サービスに依存しないため、安定し...]]></description><link>https://zenn.dev/carenet/articles/eeb5600b17c7d0</link><guid isPermaLink="true">https://zenn.dev/carenet/articles/eeb5600b17c7d0</guid><pubDate>Tue, 25 Jun 2024 08:59:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eexIul5w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:BigQuery%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kaz%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0MTRiZmIwZWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:CareNet%2520Engineers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJGOGFDT3NiNW5JTGRDSkVSUC1tNTJZZF9qNzRqUWJTemlGR0s9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kaz</dc:creator></item><item><title><![CDATA[DockerComposeでNginx+Django+MySQL環境の構築]]></title><description><![CDATA[
 概要
Ubuntu(20.04 LTS)でDjangoの開発環境をDocker-composeを利用して構築したのでその備忘録です。

Ubuntu:20.04LTS
Docker:26.1.4
Docker Compose:2.24.1
Nginx:1.27.0
MySQL:8.0
Python:3.12


 ディレクトリ構成
今回のディレクトリ構成は下記になります。
.
├── .gitignore
├── .env
├── docker-compose.yml
|
├── django/
|   ├── .env
|   ├── Dockerfile
|   └── requ...]]></description><link>https://zenn.dev/jinzzzz/articles/4e452fc5587e6a</link><guid isPermaLink="true">https://zenn.dev/jinzzzz/articles/4e452fc5587e6a</guid><pubDate>Tue, 25 Jun 2024 08:16:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1YeLJ8Yh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DockerCompose%25E3%2581%25A7Nginx%252BDjango%252BMySQL%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmZDljYmRkMmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jin</dc:creator></item><item><title><![CDATA[GoとDockerでGraceful Shutdown]]></title><description><![CDATA[
 はじめに
先日，某社のインターンシップの面接を受けたのですがその際に，メンターの方から「あなたの作ったプログラムは，サーバーを Graceful Shutdown していて良いですね～」(意訳)という声をかけていただきました．
Go の標準パッケージの場合，server.Shutdown を呼び出せはサーバーをシャットダウンすることができますが，これだけでは Graceful Shutdown できない場合もあります．
Graceful Shutdown したつもりができていなかったという悲劇が繰り返されないように，Graceful Shutdown のやり方を調べている・勉強してい...]]></description><link>https://zenn.dev/aqyuki/articles/94d398174aa9e7</link><guid isPermaLink="true">https://zenn.dev/aqyuki/articles/94d398174aa9e7</guid><pubDate>Tue, 25 Jun 2024 00:59:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EbszQoW4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Go%25E3%2581%25A8Docker%25E3%2581%25A7Graceful%2520Shutdown%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aqyuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0ZThiNWFjZjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aqyuki</dc:creator></item><item><title><![CDATA[【いらすとや図解】はじめてのEC2デプロイ]]></title><description><![CDATA[簡単なDockerfileをEC2にデプロイするだけの記事を書いてみました。
ビジネスで活用する場合はセキュリティ等も考慮した構成の構築をご検討ください。
※AWSのアカウントは作成済としてます

 ざっくりとした実装の流れ
1. AWS上でネットワークの箱を作る(VPC)
2. どの通信をOKにするか？のルール決める(セキュリティグループ)
3. 仮想サーバーを作り、VPCと関連付ける(EC2インスタンス作成)
4. 仮想サーバーの中に入る(SSHでEC2)
5. EC2サーバーの中でdockerとgitをインストールする
6. EC2サーバーの中で該当リポジトリをgit pullする...]]></description><link>https://zenn.dev/miumi/articles/f019f51c09d545</link><guid isPermaLink="true">https://zenn.dev/miumi/articles/f019f51c09d545</guid><pubDate>Mon, 24 Jun 2024 23:18:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gH7wdCJW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2581%2584%25E3%2582%2589%25E3%2581%2599%25E3%2581%25A8%25E3%2582%2584%25E5%259B%25B3%25E8%25A7%25A3%25E3%2580%2591%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25AEEC2%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259F%25E3%2582%25AB%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4YjgwZTkyZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ミカイ</dc:creator></item><item><title><![CDATA[Docker Rootless モードについて]]></title><description><![CDATA[恥の多い生涯を送って来ました。
日々Dockerにお世話になっているというのに、Rootlessモードというものが見当つかないのです。
そんな自分に嫌気が差しました。私はRootlessモードに向き合わなければならない。

 おことわり
LinuxでDockerを実行していることを前提とします。
MacやWindowsでDockerを実行している方は、VMのLinuxレイヤー以上の話とお考えください。
この記事ではDocker Rootlessモードの内部動作についてまとめます。
Rootlessモードのセットアップ方法などは公式ドキュメントをご参照ください。

 一般ユーザでのDock...]]></description><link>https://zenn.dev/yamahitsuji/articles/docker-rootless-mode</link><guid isPermaLink="true">https://zenn.dev/yamahitsuji/articles/docker-rootless-mode</guid><pubDate>Mon, 24 Jun 2024 13:24:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--24qApBcr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Rootless%2520%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yamahitsuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzMTRhMDRiOWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yamahitsuji</dc:creator></item><item><title><![CDATA[Dify + Discord botで運動を手軽に記録する試み]]></title><description><![CDATA[
 やりたいこと
Disocrdで雑に筋トレ内容をしゃべるといい感じにjsonで記録してくれる。

 背景
運動を記録するためのアプリをいちいち開くのが面倒だし、何の種目を何回とか入れるのも面倒
そもそも運動記録の目的は以下

モチベ―ション上げ（自分で見返したり人に見てもらって褒められたい）
トレーニング部位に偏りはないか（腕ばっかりやってたりとか）
どんくらいやればちょうどいいのか（筋肉痛ひどすぎて腕伸ばせないとかを避けたい）


 ユースケース図的な

 Difyで出来ることを調べる

 イメージ
Function Callingみたいなイメージ。チャットの返答結果をJsonなどの...]]></description><link>https://zenn.dev/omtkz/articles/fd5e5282e281f4</link><guid isPermaLink="true">https://zenn.dev/omtkz/articles/fd5e5282e281f4</guid><pubDate>Mon, 24 Jun 2024 10:19:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bCYmtSEP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dify%2520%252B%2520Discord%2520bot%25E3%2581%25A7%25E9%2581%258B%25E5%258B%2595%25E3%2582%2592%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E8%25A8%2598%25E9%258C%25B2%25E3%2581%2599%25E3%2582%258B%25E8%25A9%25A6%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kazan%2520Omata%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMTc3OTBjZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kazan Omata</dc:creator></item><item><title><![CDATA[DockerでGo製のアプリケーションを動かすならdistrolessを使おうというお話]]></title><description><![CDATA[
 はじめに
タイトルがあれですが，要は distroless と Go 製のアプリケーションは相性がいいっていうだけのお話です．

 distroless とは
distroless は，Google が開発している Debian ベースのイメージで最小限のファイルしか含まれていない[1]ためとても軽量という特徴があります．
https://github.com/GoogleContainerTools/distroless
最小限のファイルしか含まれていないというのは伊達でなくイメージにもよりますがglibc・libssl・opensslすら含まれていないです．
シェルやパッケージマ...]]></description><link>https://zenn.dev/aqyuki/articles/87be6171daf6b5</link><guid isPermaLink="true">https://zenn.dev/aqyuki/articles/87be6171daf6b5</guid><pubDate>Mon, 24 Jun 2024 08:37:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hFCh0ULU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7Go%25E8%25A3%25BD%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E3%2581%25AA%25E3%2582%2589distroless%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%258A%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E3%2581%258A%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aqyuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0ZThiNWFjZjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aqyuki</dc:creator></item><item><title><![CDATA[Docker compose で mysql:8.0 の初期化失敗]]></title><description><![CDATA[原因がわからんけど動いた、という感じの物。
docker compose 環境で mysql:8.0 を動かしたときに './ibdata1' could not be found in the doublewrite buffer. とか言われて動かなくなるヤツの対処。

 結論
docker-compose の場合、volume 名が volumes に書いた物ではなく、docker-compose.yaml のディレクトリ名 + volumes に書いた名前になる。削除するときは docker volume ls で確認すること。

 環境

ホスト: Mac OS Sonoma,...]]></description><link>https://zenn.dev/at_yasu/articles/0fe049bacb1ffd</link><guid isPermaLink="true">https://zenn.dev/at_yasu/articles/0fe049bacb1ffd</guid><pubDate>Mon, 24 Jun 2024 07:27:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Az9FFdFZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520compose%2520%25E3%2581%25A7%2520mysql%253A8.0%2520%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%25E5%25A4%25B1%25E6%2595%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:at%2520yasu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lXZTA2UnY4TGJzekdUaGxIcmN4V1pQV1JsTnhJaV9zT0ZSRHpBTnc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>at yasu</dc:creator></item><item><title><![CDATA[32ビットARMのエントリーモデルQNAPでInfluxDB2とGrafanaを動かす]]></title><description><![CDATA[
 やりたいこと
家庭で動かしているエントリーモデルのQNAPでGrafana+InfluxDB2による各種データの可視化を行いたい。

 制限

 QNAPのアーキテクチャ
QNAPはLinuxベースのNASだがCPUアーキテクチャがIntel/AMD64, ARM64/32ベースのものがあり、家庭・個人向けのエントリーモデルはARM32が多い？(現行製品はエントリーレベルも64bitになっているかも？)
https://www.qnap.com/ja-jp/product?product-group=home
私が使用しているTS-231Pはarm7l
$ cat /proc/cpu...]]></description><link>https://zenn.dev/hkato/articles/0996b9eb510956</link><guid isPermaLink="true">https://zenn.dev/hkato/articles/0996b9eb510956</guid><pubDate>Mon, 24 Jun 2024 01:59:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--99MpMKi2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:32%25E3%2583%2593%25E3%2583%2583%25E3%2583%2588ARM%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25ABQNAP%25E3%2581%25A7InfluxDB2%25E3%2581%25A8Grafana%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hkato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lzRFNjXzNhQTZ3VmJzNnB5aDctUTBvdmlfY3FsY1JKNG1VR3FsM2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hkato</dc:creator></item><item><title><![CDATA[WSL2上のDockerコンテナから`plt.show()`でグラフを表示するための設定]]></title><description><![CDATA[
 これはなに
WSL2（Ubuntu）上のDockerコンテナから、matplotlibで作成したグラフをshow()メソッドで表示するための設定のメモ。

 前提
Dockerコンテナからplt.show()でグラフを表示しようとすると、下記のようなエラーが発生して、グラフが表示されない。

error
$ /usr/local/bin/python /home/user/workspaces/src/main.py
/home/user/workspaces/src/main.py:9: UserWarning: FigureCanvasAgg is non-interactive...]]></description><link>https://zenn.dev/nakurei/articles/display-graph-from-within-docker-container-on-wsl2</link><guid isPermaLink="true">https://zenn.dev/nakurei/articles/display-graph-from-within-docker-container-on-wsl2</guid><pubDate>Sun, 23 Jun 2024 22:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b5PcgTXc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WSL2%25E4%25B8%258A%25E3%2581%25AEDocker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%258B%25E3%2582%2589%2560plt.show%2528%2529%2560%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NakuRei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwZjNjZmQ5ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NakuRei</dc:creator></item><item><title><![CDATA[【Docker】APIとReact/TypeScriptを同じコンテナで動かす【備忘録】]]></title><description><![CDATA[
 はじめに
今回の記事は、以下の過去記事3つを元に、APIと、TypeScriptを同じコンテナで動かすための備忘録です。

 過去記事
https://zenn.dev/haru330/articles/3840fcd5ff02f4
https://zenn.dev/haru330/articles/24aa98eb05306f
https://zenn.dev/haru330/articles/859d6a7982d06d

 ディレクトリ構成
以下のような構成にしていきます。
📁 your-project
├── 📁 api
│   ├── Dockerfile
│   └── ...]]></description><link>https://zenn.dev/haru330/articles/c4e2fb4a350a9f</link><guid isPermaLink="true">https://zenn.dev/haru330/articles/c4e2fb4a350a9f</guid><pubDate>Sun, 23 Jun 2024 08:55:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W6wfXV2h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E3%2580%2591API%25E3%2581%25A8React%252FTypeScript%25E3%2582%2592%25E5%2590%258C%25E3%2581%2598%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3NzQyOWFkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はる</dc:creator></item></channel></rss>