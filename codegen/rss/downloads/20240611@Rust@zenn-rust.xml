<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 11 Jun 2024 08:22:57 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rust製JavaScriptエンジン『Boa JS』を試してみた]]></title><description><![CDATA[主要なJavaScriptエンジンのTest262を毎日実行して結果を載せているtest262.fyiというサイトがあります。
（Test262とは最新のECMAScriptを実装できているかどうかのテストです。）
このサイトの、2024/6/5現在の実装率ランキングはこちらです。

test262.fyiの画面キャプチャ（2024/6/5）
V8(ChromeやNode.js、Deno等)、JavaScriptCore（SafariやBun等）、SpiderMonkey（Firefox等）という、大手エンジンとほぼ横並びで4位に食い込んでいるBoaとは何者でしょうか。
https://...]]></description><link>https://zenn.dev/itte/articles/5c8e5c191e386b</link><guid isPermaLink="true">https://zenn.dev/itte/articles/5c8e5c191e386b</guid><pubDate>Sun, 09 Jun 2024 22:30:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--et2KcGJf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BDJavaScript%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2580%258EBoa%2520JS%25E3%2580%258F%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakamura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhZmFmY2VlMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakamura</dc:creator></item><item><title><![CDATA[Rustで数独解いてみた（数独の基本ルール）]]></title><description><![CDATA[Rustの勉強のため、前回、深さ優先探索のアルゴリズムで、数独を解くプログラムをRustで書いてみました。
https://zenn.dev/kuredev/articles/31f6852f4c23cd
今回は、参考書籍（Rubyで数独 (AIプログラミング入門)）の第2章の「基本ルールで解く」の内容をRustで書いてみました。
成果物は↓
https://github.com/kuredev/sudoku_rust/blob/main/src/basic_rule.rs

 数独の基本ルール
書籍では数独において、あるセルの値が決定する際の基本ルールとして以下の2つが説明されています...]]></description><link>https://zenn.dev/kuredev/articles/e0681a0f4fda7f</link><guid isPermaLink="true">https://zenn.dev/kuredev/articles/e0681a0f4fda7f</guid><pubDate>Sun, 09 Jun 2024 15:27:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WbmVJqGW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E6%2595%25B0%25E7%258B%25AC%25E8%25A7%25A3%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2588%25E6%2595%25B0%25E7%258B%25AC%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aki%2520kure%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZWIyMjU5MzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aki kure</dc:creator></item><item><title><![CDATA[フロントエンジニアがRustのaxumでTODOアプリに入門するンゴ①]]></title><description><![CDATA[バックエンドも興味がある年頃なのですが、Rustを軽く入門したら「結構好きだなあ」って思ったのでTODOアプリから作成してみます。
僕は普段はwebサービスのフロントエンドを担当していて、天から降ってきたAPIからjsonを受け取って表示させている身ですが、APIがどういったものかについても解き明かせればと考えています。
途中だけどリポジトリはこちら↓
https://github.com/ask-nugey/rust_todo_app

 主な目的
ヌギーはフロントエンジニアだから、バックエンドの基礎的なことも学習することが目的！
個人的にはいわゆる "おまじない"は嫌い（というか気に...]]></description><link>https://zenn.dev/ask_nugey/articles/e888a4b92106f7</link><guid isPermaLink="true">https://zenn.dev/ask_nugey/articles/e888a4b92106f7</guid><pubDate>Sun, 09 Jun 2024 09:12:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GhpHkLO7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258CRust%25E3%2581%25AEaxum%25E3%2581%25A7TODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2599%25E3%2582%258B%25E3%2583%25B3%25E3%2582%25B4%25E2%2591%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%258C%25E3%2582%25AE%25E3%2583%25BC%2520%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA2ZGRjMWM1NGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヌギー 📺</dc:creator></item><item><title><![CDATA[Writing an OS in 1,000 Lines を Rust でやってみた]]></title><description><![CDATA[
 1000行でOSをつくってみる
Writing an OS in 1,000 Lines という1000行前後でOSをつくれるコンテンツがあります。
このコンテンツ自体はC言語を前提としているのですが、Rustでもシステムプログラミングが可能なので、今回はRustで挑戦してみました。
Rust で Writing an OS in 1,000 Lines をやってみるときのポイントをまとめておきます。

 RISC-V
このコンテンツでは RISC-V をターゲットアーキテクチャとしていて、RISC-V のOSを開発します。
RISC-V はオープンソースのRISC (Reduced...]]></description><link>https://zenn.dev/utouto97/articles/c87fb8936fdbad</link><guid isPermaLink="true">https://zenn.dev/utouto97/articles/c87fb8936fdbad</guid><pubDate>Sun, 09 Jun 2024 06:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FIxf6G58--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Writing%2520an%2520OS%2520in%25201%252C000%2520Lines%2520%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2586%25E3%2581%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlMzJlMDNlZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うとうと</dc:creator></item><item><title><![CDATA[Rustでスナップショットテスト：instaメモ [blessed.rsシリーズ13]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はinstaについてです。
https://insta.rs/

 instaとは
スナップショットテストを行うためのライブラリ

 スナップショットテストとは
https://lab.mo-t.com/blog/rust-snapshot-testing
こちらを参照
また、以下では、スナップショットテストのメリット・デメリットについて詳しく書かれている
https://www.mizdra.net/entry/2021/02/04/003728

 install方...]]></description><link>https://zenn.dev/kotabrog/articles/813b2dee0bde1b</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/813b2dee0bde1b</guid><pubDate>Sat, 08 Jun 2024 02:50:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1j568VsB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%258A%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25EF%25BC%259Ainsta%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA13%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[Rustでシェル自作した話]]></title><description><![CDATA[お久しぶりです。harukunです。
この記事を書き始めたのは2024年6月1日。
うちの大学は４学期制なのですが、2年１学期はコンピュータばかり触っていたら単位を全て落としてしまいました。オワタ＼(^o^)／
単位を犠牲にしながらファミコンエミュレータ作ったりセキュキャン申し込んだり（合否発表は6/3！！）したので、そのあたりもいつか記事にしたいですね。
!
セキュキャン落ちてました...
悔しいいいいい！！！


 作ったもの
さて今回はシェル自作です。
完成品はこんな感じ↓
https://github.com/noharu36/tush

シェルの名前はtushにしました。
タバ...]]></description><link>https://zenn.dev/haru_blog/articles/32f775bd86d886</link><guid isPermaLink="true">https://zenn.dev/haru_blog/articles/32f775bd86d886</guid><pubDate>Fri, 07 Jun 2024 00:05:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sdLwk0FL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:harukun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBjMjIzNzZjYjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>harukun</dc:creator></item><item><title><![CDATA[GeminiProにRust(WASM)で動くAgar.ioを作らせてみた（コードあり）]]></title><description><![CDATA[みなさん Google AI Studio 使っていますか？
テキスト、画像だけでなく動画や他のファイルを食わせて Gemini に質問したり指示したりできる優れたwebサービスです。
ただ、注目すべきは かなり長いプログラムのコードを食わせてそれを解析できる ということです。
以下は slither.io というブラウザゲームのjsファイルを丸ごと食わせて解説してもらった例

コードを全部読まなくても、Gemini に解析してもらってどういう処理があるとか、サーバーとどんな通信を行っているのかを聞くとかなり精度良く回答が帰ってきます。
つまり、コードの中身をほとんど読まなくてもだいたい...]]></description><link>https://zenn.dev/aespa/articles/c56be82f53231c</link><guid isPermaLink="true">https://zenn.dev/aespa/articles/c56be82f53231c</guid><pubDate>Thu, 06 Jun 2024 13:43:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nu-8pP-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GeminiPro%25E3%2581%25ABRust%2528WASM%2529%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258FAgar.io%25E3%2582%2592%25E4%25BD%259C%25E3%2582%2589%25E3%2581%259B%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2582%25E3%2582%258A%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yay%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkMzI2MzE1ZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yay</dc:creator></item><item><title><![CDATA[Rustはいいぞ: エラーハンドリング編]]></title><description><![CDATA[
 はじめに
Rustのいいところが分からない……という人のために、エラーハンドリングをいい感じに書けるよということを伝えます！！！！！

 対象読者 🐬

周囲にRustを触れと執拗に薦めてくる人がおり少し興味を持ったはいいがいったいRustの何がいいのか分からない

try-catch でエラーハンドリングする言語を使う人


 要約

try-catch によるエラーハンドリングは、つらい
Rust では、失敗するかもしれない処理の結果（戻り値）は Result 型で表される

Result 型のエラーハンドリングが行われていないと、コンパイラが怒ってくれるので、エラーハンドリング...]]></description><link>https://zenn.dev/0x/articles/5591cb490cebe5</link><guid isPermaLink="true">https://zenn.dev/0x/articles/5591cb490cebe5</guid><pubDate>Wed, 05 Jun 2024 16:37:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tqeg1V_S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2584%25E3%2581%259E%253A%2520%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2581%2595%25E3%2581%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiMzE0MmZlNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わさび</dc:creator></item><item><title><![CDATA[RustのDeep Learningフレームワークburnで足りない関数の実装例(onehot matrixを作る関数とか)]]></title><description><![CDATA[
 はじめに

この記事は2023/12月に記述したもので、最新の情報ではないので注意してください。

趣味でRustのDeep Learningフレームワークのburnを使用していて、burnに組み込まれていない関数が欲しいという状態になりました。
そこで実装に足りていなかった関数の実装方法をメモとして残します。
burnは2023年12月現在活発に開発されているフレームワークで、onnx形式のimportも実装中となっているのでonnxを読み込んでburnを使ったモデル定義のコードを自動生成するような仕組みもあります。
サポートされている関数などが限定されるので今後に期待です。
bu...]]></description><link>https://zenn.dev/soyukke/articles/c634a3669d7694</link><guid isPermaLink="true">https://zenn.dev/soyukke/articles/c634a3669d7694</guid><pubDate>Tue, 04 Jun 2024 18:57:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HOJr983v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEDeep%2520Learning%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AFburn%25E3%2581%25A7%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%2584%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E4%25BE%258B%2528onehot%2520matrix%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2582%2586%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MDU4YzBkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そゆっけ</dc:creator></item><item><title><![CDATA[Rust の CLI 作りに便利そうなクレート]]></title><description><![CDATA[
 はじめに
Rust でサクッと CLI を作ってみたいと考え、色々調べていたところ、
「なんか便利そう！」「これ面白い！」が結構出てきたので紹介させてください。
ゆるく3つほど紹介していければと思いますので、ぜひ。

 figlet-rs
https://github.com/yuanbohan/rs-figlet
文字を立体的に出力できるクレート。
use figlet_rs::FIGfont;

fn main() {
    let standard_font = FIGfont::standard().unwrap();
    let figure = standard_f...]]></description><link>https://zenn.dev/collabostyle/articles/ebd88b46be0f3a</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/ebd88b46be0f3a</guid><pubDate>Sun, 02 Jun 2024 03:06:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6NS2uUl0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%2520CLI%2520%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25AB%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AA%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[赤チャート(数学IA)の問題をpythonとRustで解いてみた①（順列）]]></title><description><![CDATA[数学IAの復習のために赤チャートを買ってみた。
自分が学んでいた頃とは、教育課程もかなり変わっているみたいなので、初見の部分と復習の部分があるが、基本的にほとんど忘れているので、一から勉強し直しながらその中の一部をプログラミングで解くことで数学の復習とプログラミングの勉強を併せてしていこうと思う。
基本的には、言語はPythonを使う予定。できればRustも交えていければ良いなという感じ。
問題は前からではなく、気になった問題を解いていく。

 第１問 順列
最初は、赤チャートI+A　P352　「同じものを含む順列について」
AtcoderだとABCのA問題かB問題くらいかな

 小問１...]]></description><link>https://zenn.dev/matcha22/articles/ce6fcd2a5c5a2c</link><guid isPermaLink="true">https://zenn.dev/matcha22/articles/ce6fcd2a5c5a2c</guid><pubDate>Sat, 01 Jun 2024 08:11:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Pl3jeo8d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B5%25A4%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25BC%25E3%2583%2588%2528%25E6%2595%25B0%25E5%25AD%25A6IA%2529%25E3%2581%25AE%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592python%25E3%2581%25A8Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E2%2591%25A0%25EF%25BC%2588%25E9%25A0%2586%25E5%2588%2597%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matcha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MTA1OWFmZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matcha</dc:creator></item><item><title><![CDATA[より進化したcargo test：cargo-nextestメモ [blessed.rsシリーズ12]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はcargo-nextestについてです。

 cargo-nextestとは
cargo testをより進化させたテストランナー

 install
https://nexte.st/book/installation
上記を参照
Linux x86_64であれば以下を実行
$ curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

 実行方法
h...]]></description><link>https://zenn.dev/kotabrog/articles/974468ac37639d</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/974468ac37639d</guid><pubDate>Sat, 01 Jun 2024 01:14:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RHR2sk_G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2588%25E3%2582%258A%25E9%2580%25B2%25E5%258C%2596%25E3%2581%2597%25E3%2581%259Fcargo%2520test%25EF%25BC%259Acargo-nextest%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA12%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[VscodeでBevyの動的リンクを使ったプロジェクトの作成]]></title><description><![CDATA[!
※この記事はBevy 0.13.2での環境です.

!
Rust Bevy Vscode 初心かつ，Zennへの投稿も初めての為，不備多々あるかもしれませんが，気付き次第ご教示いただきたく思っております．ぜひ勉強させてください．


 Bevyコンパイルの高速化
リンカには既存ものより高速なruat-lldを使用.
Dynamic_linking(動的にリンク)を使用．

 本記事での対象環境
OS:Windows11
Editor:Visualstudio Code
Bevy:0.13.2
Debugger:CodeLLDB

 ターミナルでの作業

 rust-lldの導入
ru...]]></description><link>https://zenn.dev/u7f8au7fbd/articles/8586812fa5a381</link><guid isPermaLink="true">https://zenn.dev/u7f8au7fbd/articles/8586812fa5a381</guid><pubDate>Wed, 29 May 2024 02:36:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FJ_2TcjP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vscode%25E3%2581%25A7Bevy%25E3%2581%25AE%25E5%258B%2595%25E7%259A%2584%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25BE%258A%25E7%25BE%25BD%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZElVdXlCU0xtQlpkMUxaN0UtdnhkQnRSdnBIdVpSdGJXREhHSkFxakEwYkE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>羊羽ちゃん</dc:creator></item><item><title><![CDATA[GPT-4o APIを叩くRust製ぬるぬるCLIアプリ]]></title><description><![CDATA[先日【Rust】✨CLIアプリ向けクレート4選✨ ~ clap, dialoguer, indicatif, console ~ #Rust - Qiitaという記事をQiitaに投稿しまして、その副産物としてChatGPT APIを叩くRust CLIアプリケーションを作成しましたので、折角ですから紹介したいと思います！

https://github.com/anotherhollow1125/chatgpt_cli
Rustに関係のない部分から初めて、Rustで工夫した部分をゆるく紹介できればと思います✨
!
APIキーの取得方法については割愛します。頑張れ💪
一応: https:...]]></description><link>https://zenn.dev/namn1125/articles/44a37d48adbcc8</link><guid isPermaLink="true">https://zenn.dev/namn1125/articles/44a37d48adbcc8</guid><pubDate>Tue, 28 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jTUnIig2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GPT-4o%2520API%25E3%2582%2592%25E5%258F%25A9%25E3%2581%258FRust%25E8%25A3%25BD%25E3%2581%25AC%25E3%2582%258B%25E3%2581%25AC%25E3%2582%258BCLI%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:namn1125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMTYxMjNiY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>namn1125</dc:creator></item><item><title><![CDATA[Rustでファイルを既定のアプリで開く(Windows限定)]]></title><description><![CDATA[
 Rust でファイルを既定のファイルで開く(Windows 限定)
Rust を使ってファイルを既定のアプリで開くのに Windows の API を使ってたんですが、もっと単純な方法に気付いたのでメモ。
use std::process::Command;
use std::path::Path;

fn open_file(file_path: &amp;str) -&gt; std::io::Result&lt;()&gt; {
    if !Path::new(file_path).exists() {
        return Err(std::io::Error::...]]></description><link>https://zenn.dev/dekunobo/articles/rust_openfile_for_windows</link><guid isPermaLink="true">https://zenn.dev/dekunobo/articles/rust_openfile_for_windows</guid><pubDate>Mon, 27 May 2024 14:58:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--690BTNZ9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E6%2597%25A2%25E5%25AE%259A%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25A7%25E9%2596%258B%25E3%2581%258F%2528Windows%25E9%2599%2590%25E5%25AE%259A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2587%25E3%2582%25AF%25E3%2583%258E%25E3%2583%259C%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YjQ0OGNjMjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>デクノボー</dc:creator></item><item><title><![CDATA[Rust製TypeScript Linterにおける型情報Lintルールの模索]]></title><description><![CDATA[Rust製TypeScript LinterであるBiome, Oxc, deno_lintなどは、TypeScriptの型情報を利用するLintルール（型情報Lintルール）[1]を持っていません。本記事では、その背景から、Rust製TypeScript Linterが型情報Lintルールを実現するための手段についてまとめます。
筆者のTSKaigi 2024で利用した下記登壇資料に情報を追加し、文章化したものです。

要約すると、以下になります。

Rust製TypeScript Linterは、安全性をさらに高めてくれるtypescript-eslintの型情報Lintルールが欲し...]]></description><link>https://zenn.dev/kirohi/articles/3c644b614977fe</link><guid isPermaLink="true">https://zenn.dev/kirohi/articles/3c644b614977fe</guid><pubDate>Mon, 27 May 2024 12:06:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G29kfO6E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BDTypeScript%2520Linter%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E5%259E%258B%25E6%2583%2585%25E5%25A0%25B1Lint%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E6%25A8%25A1%25E7%25B4%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:unvalley%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlNWU0YWY2ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>unvalley</dc:creator></item><item><title><![CDATA[AxumでのExtensionの使い方 - ミドルウェアとデータを共有する -]]></title><description><![CDATA[
 動作環境
本記事は以下の環境で動作確認を行なっています。
Rust, Axum共に最新の機能を使っているわけではないので、これよりもある程度古いバージョンでも動作すると思われます。

Rust 1.78.0
Axum 0.7.5


 Extension
axumには Extension という型があります。
ドキュメントに多くは書かれていないのですが、それには以下のようにあります。

Extractor and response for extensions.
https://docs.rs/axum/0.7.5/axum/struct.Extension.html

extens...]]></description><link>https://zenn.dev/techno_tanoc/articles/a295da5efcd494</link><guid isPermaLink="true">https://zenn.dev/techno_tanoc/articles/a295da5efcd494</guid><pubDate>Mon, 27 May 2024 10:24:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YYjhrlR6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%25E3%2581%25A7%25E3%2581%25AEExtension%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2520-%2520%25E3%2583%259F%25E3%2583%2589%25E3%2583%25AB%25E3%2582%25A6%25E3%2582%25A7%25E3%2582%25A2%25E3%2581%25A8%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%2585%25B1%25E6%259C%2589%25E3%2581%2599%25E3%2582%258B%2520-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techno-tanoC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlZTdjM2ZlYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techno-tanoC</dc:creator></item><item><title><![CDATA[KotlinでUnion Typeを使いこなそう]]></title><description><![CDATA[!
この記事は毎週必ず記事がでるテックブログ "Loglass Tech Blog Sprint"の41週目の記事です！ 1年間連続達成まで 残り 12 週 となりました！


 はじめに
こんにちは、株式会社ログラスでエンジニアをしています、Kyosukeです。
私は前職では主にTypescriptでフロントエンド・バックエンドのどちらも開発を行っていたのですが、ログラスではフロントエンドにTypescript、バックエンドにKotlinを使用しています。
そしてKotlinを書いていると、定期的にTypeScriptで言う、Union Typeを使いたくなることがあります。
そこで、...]]></description><link>https://zenn.dev/loglass/articles/46be7f140a60bd</link><guid isPermaLink="true">https://zenn.dev/loglass/articles/46be7f140a60bd</guid><pubDate>Mon, 27 May 2024 00:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c_yWO4WT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25A7Union%2520Type%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kyosuke%2520Awata%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNWQ4ZTRjZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzYmYxMDc5MDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyosuke Awata</dc:creator></item><item><title><![CDATA[Rust における文字列の所有権]]></title><description><![CDATA[
 はじめに
Rust で参照&amp;を利用するシーンは少なくないことですよね。
個人的に、Rust の学習において、所有権、所有権解放、メモリ等は理解しておかなければいけないところかなと感じています。
今回は文字列にフォーカスして、紹介していけたらと思います。

 文字列
参照はすでに知っている方もいらっしゃる方も少なくないかもしれません。
&amp;を付けることによって、所有権を保持することのない参照の値とすることができます。
fn main() {
    let name = "Rust".to_string();
    let rename = &amp;name;

  ...]]></description><link>https://zenn.dev/collabostyle/articles/b9f185729c934f</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/b9f185729c934f</guid><pubDate>Sat, 25 May 2024 15:23:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ovd4TUzZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item><item><title><![CDATA[SQLx を使って PostgreSQL にアクセスする]]></title><description><![CDATA[
 はじめに
今回は Rust の SQLx を使って、
マイグレーションファイルを作成し、PostgreSQLにアクセスするところまでやっていきたいと思います。
SQLx は様々なデーターベースサービスをサポートしていますので、良いですね。
PostgreSQL, MySQL, MariaDB, SQLite
▼SQLx
https://github.com/launchbadge/sqlx

 プロジェクトを作成
Rust を動かすディレクトリを作成します。
$ cargo new sqlx-sample
$ cd new sqlx-sample
これで一旦の準備は完了です。
このタ...]]></description><link>https://zenn.dev/collabostyle/articles/97a5069804b175</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/97a5069804b175</guid><pubDate>Sat, 25 May 2024 09:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Cgr7ytn4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SQLx%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520PostgreSQL%2520%25E3%2581%25AB%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Iseya%2520Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxOTFmZDljMTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Iseya Shota</dc:creator></item></channel></rss>