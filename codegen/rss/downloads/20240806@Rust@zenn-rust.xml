<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 06 Aug 2024 08:37:25 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RustBookを読んでRust言語のセンターピンは波括弧を抜けたらメモリ開放する所だと思った件]]></title><description><![CDATA[
 先にRustBook自体の感想（2024-08-05時点の感想）

英語版が最新っぽいが、それをGoogle翻訳すると日本語がおかしく混乱する場面があった
日本語版もあるがそちらはバージョンが古かった。だが、大きく英語版と違っているわけでもないし、変な翻訳で混乱しながら読むよりは良いと思った
Rustの説明としては冗長な記述が多く、全部読んだり実行したりするのはかなり時間がかかる

時間は少なくとも24時間くらいは掛かる気がする（理解度次第ではもっと）


冗長なだけで必要な情報は網羅してくれていると思った

最新で良質な日本語で学びたい場合、「プログラミングRust 第2版」などの...]]></description><link>https://zenn.dev/daijinload/articles/bfdcbf81a41020</link><guid isPermaLink="true">https://zenn.dev/daijinload/articles/bfdcbf81a41020</guid><pubDate>Tue, 06 Aug 2024 02:11:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vZAVLvyM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RustBook%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7Rust%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2594%25E3%2583%25B3%25E3%2581%25AF%25E6%25B3%25A2%25E6%258B%25AC%25E5%25BC%25A7%25E3%2582%2592%25E6%258A%259C%25E3%2581%2591%25E3%2581%259F%25E3%2582%2589%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E9%2596%258B%25E6%2594%25BE%25E3%2581%2599%25E3%2582%258B%25E6%2589%2580%25E3%2581%25A0%25E3%2581%25A8%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daijinload%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTVLVGMxQWhOTXo1cnhrSkFmYmdmRmF1SGwxRGFwX0o3NnpXQ1oxMHpTTGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daijinload</dc:creator></item><item><title><![CDATA[Rust使いの女性が集まれるコミュニティを作りました🦀]]></title><description><![CDATA[
 RustLadiesというコミュニティを作りました
タイトルの通りです！！多分日本初の女性Rustコミュニティです！！！！！
https://rustladies.connpass.com/
興味ある女性の方、お気軽に申請どうぞ！
今月末はハンズオンもやるよ！！

 RustLadiesとは？
女性Rustacean（Rustを使う人）を繋ぐために活動しています！
初心者・熟練者は問いません。 Rustを書いたことがない方でも、Rustに興味がある方はお気軽にご参加ください！初心者向けのハンズオンも行います。

 君は誰？

 ふみふみ、と申します。
都内でWebエンジニアとして働い...]]></description><link>https://zenn.dev/2323_code/articles/e9f5e51438adae</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/e9f5e51438adae</guid><pubDate>Mon, 05 Aug 2024 14:08:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AB4ZpQDJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25AE%25E5%25A5%25B3%25E6%2580%25A7%25E3%2581%258C%25E9%259B%2586%25E3%2581%25BE%25E3%2582%258C%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259F%25E3%2583%25A5%25E3%2583%258B%25E3%2583%2586%25E3%2582%25A3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZGFlNGU3NmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item><item><title><![CDATA[Crew CTF 2024 web writeup]]></title><description><![CDATA[
Crew CTF 2024も脆弱エンジニアで参加しまして、結果19位でした。並行してn00bzCTFとかTFC CTFが開催されていて、いつもより参加人数は少なかったですが、それでも結構いい成績だったと思います。

自分はあと一歩で二週連続全完だったのですが、惜しくも届かず、というところでした。
問題としては、rust、c++、java、コードなし、といつものpythonやjavascriptが無いので、ストレスではありましたが、難易度はそこそこといったようでした。非想定解が多すぎましたが、今回はPwn担当の人が作成したようで、まあしょうがないのかなと思いました。

 ✅Malkonk...]]></description><link>https://zenn.dev/tchen/articles/4549b744d2ba0f</link><guid isPermaLink="true">https://zenn.dev/tchen/articles/4549b744d2ba0f</guid><pubDate>Mon, 05 Aug 2024 04:29:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9W6Ifs96--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Crew%2520CTF%25202024%2520web%2520writeup%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-chen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSndGbmw3UUNSVkZRdDdIRXpZYm84alBZQW0xYzhXTXhUc0c2UkgzMXRjV3NsMll3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-chen</dc:creator></item><item><title><![CDATA[Rust で Go の WaitGroup っぽいものを手軽に用意する]]></title><description><![CDATA[現状 tokio 環境でしか試してないので以下 tokio 前提になりますが、tokio なしでも ( futures-channel など使ったり自作したりで ) 工夫すれば同じようにできるとは思います。

 概要
これです
https://twitter.com/kana_rus/status/1819756492201083265
つまり、

channel.rs
let (tx, rx) = tokio::sync::watch::channel(());

for _ in 0..3 {
    let rx = rx.clone();
    tokio::spawn(asy...]]></description><link>https://zenn.dev/kanal/articles/go-waitgroup-in-rust</link><guid isPermaLink="true">https://zenn.dev/kanal/articles/go-waitgroup-in-rust</guid><pubDate>Sun, 04 Aug 2024 10:57:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O5u6X4Qu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520Go%2520%25E3%2581%25AE%2520WaitGroup%2520%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25E3%2582%2582%25E3%2581%25AE%25E3%2582%2592%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E7%2594%25A8%25E6%2584%258F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kanarus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0ZTQ5YjRjOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kanarus</dc:creator></item><item><title><![CDATA[【Rust入門】char、&str、String型の違いについて]]></title><description><![CDATA[Rustに入門した中で、文字（列）の扱いについて少し混乱したのでメモ。
C++の復習にもなりますね。

 1. 文字（列）型の種類について


char
組み込み型（プリミティブ型）。
単一のUnicode文字を表現でき、スタック上に確保される。


str
これも組み込み型。
後述のString型への参照として使用されるので、固定値。別名string slice（文字列スライス）とも呼ばれる。
通常は参照付きの&amp;strとして使用されがち。
文字列データ自体は別の場所に存在し、それを参照する。
string sliceの先頭のバイトへのポインタとその長さから構成される、&amp;...]]></description><link>https://zenn.dev/ichimia111/articles/c54b782b12b988</link><guid isPermaLink="true">https://zenn.dev/ichimia111/articles/c54b782b12b988</guid><pubDate>Sun, 04 Aug 2024 01:35:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EFCV3d1g--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2591char%25E3%2580%2581%2526str%25E3%2580%2581String%25E5%259E%258B%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AB%25E3%2581%25AB%25E3%2582%2583%25E3%2581%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgxNmFiZjBlNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ににゃあ</dc:creator></item><item><title><![CDATA[ToolchainをインストールするGitHub Action：Rust Toolchainメモ [blessed.rsシリーズ23]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はRust Toolchainについてです。
https://github.com/dtolnay/rust-toolchain

 Rust Toolchainとは
rustup を使って簡単に Rust toolchain をインストールする GitHub Actions

 できること
https://github.com/dtolnay/rust-toolchain?tab=readme-ov-file#example-workflow
GitHub Actio...]]></description><link>https://zenn.dev/kotabrog/articles/e4506c6594efc7</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/e4506c6594efc7</guid><pubDate>Sat, 03 Aug 2024 23:34:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JQF8a_Rf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Toolchain%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258BGitHub%2520Action%25EF%25BC%259ARust%2520Toolchain%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[Rustでzopfliコマンドを作った話]]></title><description><![CDATA[zopfliコマンドのRust実装のrzopfliを開発しました。
https://github.com/sorairolake/rzopfli

 Zopfliとは
ZopfliはGoogleが開発したDEFLATE形式、gzip形式、zlib形式と互換性のある可逆データ圧縮アルゴリズムです。
https://github.com/google/zopfli
Zopfliはデータを圧縮するときにより多くの時間を使うことで他のDEFLATEやzlibの実装よりも高い圧縮率を実現しています。
Zopfliが生成するDEFLATEストリームは他のDEFLATEやzlibの実装が出力するDEF...]]></description><link>https://zenn.dev/sorairolake/articles/zopfli-command-written-in-rust</link><guid isPermaLink="true">https://zenn.dev/sorairolake/articles/zopfli-command-written-in-rust</guid><pubDate>Sat, 03 Aug 2024 04:14:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KUIt3w3w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7zopfli%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SorairoLake%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNjZhMGVjM2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SorairoLake</dc:creator></item><item><title><![CDATA[Rustの何が良いのか？PHPではダメなの？]]></title><description><![CDATA[
 背景
PHPで実装されている社内システムのリプレイスをRustで行うという話を聞いて。

 Rustの概要
2015年にリリースされた言語。
Rustは、スピードと安定性を言語に渇望する方向けですと公式ドキュメントに記載あり。
低水準の処理が可能で、例えばこれまでOSの開発はC言語/C++で行われてきたが、Rustによる開発も出てきている(関連記事)
主に以下の特徴があるとのこと。

実行速度がC言語/C++並に高速
「所有権」によるメモリ管理で高い安全性


 Rustの詳細

 実行速度
Rustは以下によってC言語/C++並の実行速度となっている

ネイティブコンパイラ言語

...]]></description><link>https://zenn.dev/kkyoka/articles/10645187ea8b79</link><guid isPermaLink="true">https://zenn.dev/kkyoka/articles/10645187ea8b79</guid><pubDate>Sat, 03 Aug 2024 04:04:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xks7hZux--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25BD%2595%25E3%2581%258C%25E8%2589%25AF%25E3%2581%2584%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259FPHP%25E3%2581%25A7%25E3%2581%25AF%25E3%2583%2580%25E3%2583%25A1%25E3%2581%25AA%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2587%25E3%2581%2586%25E3%2581%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhNmNhZjM2NmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きょうか</dc:creator></item><item><title><![CDATA[Rust の開発環境を Windows 11 で構築する(2024年8月)]]></title><description><![CDATA[
 はじめに
Windows 10 から Windows 11 に切り替えたところ環境構築の要素が変わっていたので、備忘録を記します。
2024年8月1日時点の情報ですので、ご参考になれば幸いです。

 Windows の仕様

エディション: Windows 11 Home
バージョン: 23H2


 1. Visual Studio Tools

コンパイラに関連するワークロードをインストールします。

.NET デスクトップ開発
C++ によるデスクトップ開発



 2. rustup

Rustのビルドツールをインストールします。
exeファイルを実行して1) Proceed...]]></description><link>https://zenn.dev/tremendous1192/articles/40f88456c5a67d</link><guid isPermaLink="true">https://zenn.dev/tremendous1192/articles/40f88456c5a67d</guid><pubDate>Thu, 01 Aug 2024 14:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aHUvloa9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%2520Windows%252011%2520%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25282024%25E5%25B9%25B48%25E6%259C%2588%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tremendous1192%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzYzhjN2QyOWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tremendous1192</dc:creator></item><item><title><![CDATA[Rust: 開発中に crate のコードの変更を反映する]]></title><description><![CDATA[
 要約
Cargo.toml の dependencies で、コードを変更した crate を local path で指定する。
[dependencies]
chrono-humanize = { path = "/Users/hiroki/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-humanize-0.2.3/" }

 経緯
OSS で Rust のコードを触っていたときに、print デバッグのために crate のコードを変更して実行したくなった。コードを変更して単純に cargo build するだけで...]]></description><link>https://zenn.dev/goldfish/articles/d88af3a96c2f00</link><guid isPermaLink="true">https://zenn.dev/goldfish/articles/d88af3a96c2f00</guid><pubDate>Wed, 31 Jul 2024 15:53:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RkKnSwI8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%253A%2520%25E9%2596%258B%25E7%2599%25BA%25E4%25B8%25AD%25E3%2581%25AB%2520crate%2520%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E3%2582%2592%25E5%258F%258D%25E6%2598%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2593%25E3%2581%258E%25E3%2582%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWlLaC15ckpFNVRpMWxPODF5dGhnSldhQS16QnFLeGREYkcwOG5INVJla1RrSWFPUmo9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きんぎょ</dc:creator></item><item><title><![CDATA[身近な人やパートナーにアプリを作るすゝめ]]></title><description><![CDATA[
 生きてるレポジトリ持っていますか？

 ここで言う生きてるレポジトリとは

定期的に更新されていること
利用者がいること（自分も含む）


 調査結果

持っている ... 5%
持っていない ... 95% （katayama調べ）


 なぜ生きているレポジトリを持つべきか

自分の試したいことが試せる

サンドボックス環境で試すのとは大きな違いがある


愛着が湧く
名刺代わりになる


 生きているレポジトリを作るためには

 個人でサービスを作る

使ってもらうハードルが高い
挫折率が高い


 ライブラリ等を作る

開発ハードルが高い

良い題材があればあり


ものにも...]]></description><link>https://zenn.dev/tattu/articles/app-for-wife34ixb5s</link><guid isPermaLink="true">https://zenn.dev/tattu/articles/app-for-wife34ixb5s</guid><pubDate>Wed, 31 Jul 2024 12:17:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Hsn9grai--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25BA%25AB%25E8%25BF%2591%25E3%2581%25AA%25E4%25BA%25BA%25E3%2582%2584%25E3%2583%2591%25E3%2583%25BC%25E3%2583%2588%25E3%2583%258A%25E3%2583%25BC%25E3%2581%25AB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2581%2599%25E3%2582%259D%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:katayama8000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmZmRhNTA5ZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>katayama8000</dc:creator></item><item><title><![CDATA[Rust のパッケージリポジトリ crates.io に CLI ツールを公開してみた]]></title><description><![CDATA[
 はじめに
先日、同僚と npm, jsr などのパッケージリポジトリについて雑談をしていました。
「こんな感じですぐ公開できるよ」という話に感銘を受け、Rust の crates.io という場所に公開してみたくなりました。
さらに追い打ちをかけるように、Rust で書いたそのプログラム、crates.io で公開してみれば？](https://qiita.com/satosystems/items/fdcd717414c584de5251) という記事も見つけてしまい、公開への拍車がかかってしまいました。
crates.io とは？のセクションもあり、非常に参考になりました！
そん...]]></description><link>https://zenn.dev/collabostyle/articles/c54fdd44938e9f</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/c54fdd44938e9f</guid><pubDate>Tue, 30 Jul 2024 22:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--j_23jUg---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25AA%25E3%2583%259D%25E3%2582%25B8%25E3%2583%2588%25E3%2583%25AA%2520crates.io%2520%25E3%2581%25AB%2520CLI%2520%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shota</dc:creator></item><item><title><![CDATA[#13　Trait in Rust]]></title><description><![CDATA[
 Introduction
If you have programmed before, probably you have ever used or heard interface. But what is interface? Well, an interface is a description of the actions that an object can do. In Object Oriented Programming(OOP), an Interface is a description of all functions that an object must ha...]]></description><link>https://zenn.dev/nxted_sapporo/articles/8ab30392bc9451</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/8ab30392bc9451</guid><pubDate>Tue, 30 Jul 2024 08:39:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3bPn5-nS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%252313%25E3%2580%2580Trait%2520in%2520Rust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Rust でデータを持つ列挙型(enum)のプロパティにアクセスする]]></title><description><![CDATA[
 はじめに
Rust のデータを持つ列挙型（enum）へのアクセスってどうやるんだ？となったので、学んだことをアウトプットします。
若干のメモ書きとなっていますが、迷っている方の救いとなれば幸いです。
▼参考
https://doc.rust-jp.rs/book-ja/ch06-01-defining-an-enum.html

 列挙型の中に構造体
以下のような列挙型+構造体の組み合わせのプロパティにアクセスしたいという前提がありました。
enum Members {
    Mike(Mike),
    Bob(Bob),
    John(John),
}

struct M...]]></description><link>https://zenn.dev/collabostyle/articles/71fc900f58faf6</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/71fc900f58faf6</guid><pubDate>Mon, 29 Jul 2024 22:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---FSz-7gP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A4%25E5%2588%2597%25E6%258C%2599%25E5%259E%258B%2528enum%2529%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25AB%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YjRyRXVYb0x2SGp5alRaelhENlBCRnZGTzhNTk0zLXlBTWZvM0Q9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shota</dc:creator></item><item><title><![CDATA[Rustプロジェクト上で、Nixを使用してビルド、チェック、cargo-llvm-covでのテストカバレッジを行なう方法]]></title><description><![CDATA[
 TL;DR
craneというRustプロジェクトをビルドするシステムにある、cargoLlvmCov関数ってスゴいよなぁという話。

 どんなflake.nixを書いたか
flake.nix in kosu project
{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    treefmt-nix.url = "github:numtide/treefmt-nix";
    rus...]]></description><link>https://zenn.dev/haruki7049/articles/95754b0f46ff7f</link><guid isPermaLink="true">https://zenn.dev/haruki7049/articles/95754b0f46ff7f</guid><pubDate>Sun, 28 Jul 2024 01:51:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iDgJfFLW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E4%25B8%258A%25E3%2581%25A7%25E3%2580%2581Nix%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2580%2581%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2580%2581cargo-llvm-cov%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25AB%25E3%2583%2590%25E3%2583%25AC%25E3%2583%2583%25E3%2582%25B8%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25AA%25E3%2581%2586%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JORkp2dG9zOUlTMFA0bDJibjVKWnRoVWN3MFotVE9pWE1NeTZTMnc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はるき</dc:creator></item><item><title><![CDATA[Rustプロジェクトのリリース作業をCIで自動化：Release-plzメモ [blessed.rsシリーズ22]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はRelease-plzについてです。
https://release-plz.ieni.dev/

 Release-plzとは
RustプロジェクトのCIでリリース用のプルリクエストを自動作成してくれるツール

 できること


conventional commits に基づくバージョン更新

git-cliff による変更履歴の更新。デフォルトでは keep a changelog フォーマットを使用

cargo-semver-checks によるAPIの変更...]]></description><link>https://zenn.dev/kotabrog/articles/b568dc1c5402eb</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/b568dc1c5402eb</guid><pubDate>Sat, 27 Jul 2024 01:50:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9zqizDWd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E4%25BD%259C%25E6%25A5%25AD%25E3%2582%2592CI%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25EF%25BC%259ARelease-plz%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA22%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[PostgreSQLだけでElasticsearchのようなキーワード検索！ParadeDB触ってみた]]></title><description><![CDATA[
 はじめに
こんにちは、エンジニアの長谷です。
最近社内でPostgreSQL拡張をRustで実装しているのですが、世の中でもRust製のPostgreSQL拡張がいろいろと開発されているようです。
今日はその中の1つParadeDBをご紹介します。

 ParadeDBとは
ParadeDBとはElasticsearchのような機能を持つPostgreSQL拡張で、Rustで実装されています。
似たような拡張としてはZomboDBがありますが、こちらはあくまでElasticsearchの導入が前提でPostgreSQLとElasticsearchを連携するような機能であるのに対し、P...]]></description><link>https://zenn.dev/forcia_tech/articles/20240717_hase_paradedb</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/20240717_hase_paradedb</guid><pubDate>Fri, 26 Jul 2024 04:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mhhk0ZIl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PostgreSQL%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7Elasticsearch%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AA%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E6%25A4%259C%25E7%25B4%25A2%25EF%25BC%2581ParadeDB%25E8%25A7%25A6%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[＃08　Ownership in Rust]]></title><description><![CDATA[
 Introduction
As I wrote in previous post, Rust has very unique features compared to other languages such as C, C++ and Java. Especially, ownership, which enables to make memory safety guarantees without needing a garbage collector. Thanks to this feature, programmer can write a code less care a...]]></description><link>https://zenn.dev/nxted_sapporo/articles/b360cccd53cd76</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/b360cccd53cd76</guid><pubDate>Fri, 26 Jul 2024 02:46:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iesmCnLk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%25EF%25BC%258308%25E3%2580%2580Ownership%2520in%2520Rust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[スライスにトレイトを実装する時の注意点]]></title><description><![CDATA[
 Take home message
スライスに何かしらのトレイトを実装しようとするのなら、[T]と&amp;[T]、&amp;mut [T]に実装しようってコトで一つ

 どういうこと?
例として以下のような想定としてConsoleにDumpするようなトレイトがあったとして
trait Dump{
    fn dump(&amp;self);
}
こいつをスライスに実装させようとする。このとき&amp;[T]にのみ実装した場合以下のようになる
impl&lt;T: Debug&gt; Dump for &amp;[T] {
	fn dump(&amp;self) {
		print...]]></description><link>https://zenn.dev/tokeiya3/articles/3ab510ccd57490</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/3ab510ccd57490</guid><pubDate>Thu, 25 Jul 2024 14:28:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c8nJVd4S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25B9%25E3%2581%25AB%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%25E6%2599%2582%25E3%2581%25AE%25E6%25B3%25A8%25E6%2584%258F%25E7%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[＃06　What is Rust lang?]]></title><description><![CDATA[
 Introduction
Do you know which programming language has been rated the most "loved" among developers for beyond five years? It's Rust!! The Rust programming language first debuted in 2010. Even though it is a fairly young language compared to C++, and C lang, the language has gained much attent...]]></description><link>https://zenn.dev/nxted_sapporo/articles/b19a942ba62fcf</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/b19a942ba62fcf</guid><pubDate>Thu, 25 Jul 2024 08:30:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d19zNF_x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%25EF%25BC%258306%25E3%2580%2580What%2520is%2520Rust%2520lang%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item></channel></rss>