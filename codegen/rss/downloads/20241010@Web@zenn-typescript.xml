<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 10 Oct 2024 05:08:02 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Prismaでモデルメソッドを実装する]]></title><description><![CDATA[こんにちはムーザルちゃんねるのzaruです。今回は、TypeScriptで書けるPrisma ORMでRailsのようなモデルメソッドとして実装する方法を紹介します。
Railsのようなモデルメソッドというのは、例えば User テーブルがあったときに、Rubyでいうクラスメソッドとして User.signup() という関数や、インスタンスメソッドとして User.findFirst().fullname といった感じでドットのメソッドチェーンで関数やプロパティを呼び出せることを指します。

 モデルメソッドの定義方法
モデルメソッドの定義方法は簡単で、PrismaClientに $e...]]></description><link>https://zenn.dev/moozaru/articles/6383935ef553fe</link><guid isPermaLink="true">https://zenn.dev/moozaru/articles/6383935ef553fe</guid><pubDate>Wed, 09 Oct 2024 23:40:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xbcN_NGq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25A7%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zaru%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNDkwNTdmZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25AD%25E3%2582%258B%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hTeWVOcHN2TEdOdTdPeUFlU1JEbDhUNkNOX1p3NHBXSHpIRHN2NlBFPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaru</dc:creator></item><item><title><![CDATA[fetch() で取得したレスポンスを読んでもいいのは1回だけ]]></title><description><![CDATA[!
備忘録


 結論から
タイトル通り。
-&gt; どうしても読み取る必要がある場合は clone() で複製したものを読み取ればいい。

 問題
fetch で取得したレスポンスを text() で一度読み取った後に、別の場所で改めて arrayBuffer() で読み取ろうとしたところエラーが発生し、解決策をググってもなかなかヒットせずややハマった。

 解決
MDN の fetch API に、ちょうど自分がやろうとしていることに関しての注意事項があった。

ロックされ妨害されたストリーム
（中略）
これは、同じレスポンス（またはリクエスト）本体を複数回読み取ることは不可能であ...]]></description><link>https://zenn.dev/toybox19/articles/0816e61e2a2381</link><guid isPermaLink="true">https://zenn.dev/toybox19/articles/0816e61e2a2381</guid><pubDate>Wed, 09 Oct 2024 15:35:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pUiqDICB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:fetch%2528%2529%2520%25E3%2581%25A7%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2597%25E3%2581%259F%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7%25E3%2582%2582%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25AF1%25E5%259B%259E%25E3%2581%25A0%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3OTUwYzEyNDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kai</dc:creator></item><item><title><![CDATA[Deno v2 が来たので何が変わったのか紹介]]></title><description><![CDATA[
 はじめに
遂に待望のDeno v2がリリースされました。
混乱の元となっていたwindowオブジェクトを削除し、Node.jsとの互換性を高めるためにprocessオブジェクトがグローバルに導入されるなど、多くのアップデートが施されました。
この記事では重要な変更からminorな変更までを追っていきます。
下記のコマンドで、v2にアップグレード出来ます。
$ deno upgrade


 大きな変更

 windowオブジェクトの削除と、processオブジェクトの導入
サーバーサイドであるのに、windowオブジェクトが定義されている影響で、ブラウザ環境と誤認してしまうなど、多く...]]></description><link>https://zenn.dev/ame_x/articles/d1742e77fa1351</link><guid isPermaLink="true">https://zenn.dev/ame_x/articles/d1742e77fa1351</guid><pubDate>Wed, 09 Oct 2024 14:32:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ANDUgQ0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520v2%2520%25E3%2581%258C%25E6%259D%25A5%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E4%25BD%2595%25E3%2581%258C%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%258B%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ame-x%2540amex2189%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzYjRiNTcyYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ame-x@amex2189</dc:creator></item><item><title><![CDATA[楽観的UI更新について]]></title><description><![CDATA[
 楽観的UIとは？
楽観的UIとは、ユーザーの操作が完了する前に、その結果を即座に画面に反映させる技術です。通常、データがサーバーと同期されるまでの待ち時間を短縮し、ユーザー体験を向上させることが目的です。操作後にすぐフィードバックを得られるため、特にレスポンスの遅いAPIや不安定なネットワーク下でも快適なユーザー体験を提供できます。
Reactで楽観的UIを実装する際、以下の流れで進めます。

ローカル状態を即座に更新
APIリクエストを送信
レスポンスに基づき最終的な状態を確定

では、具体的にどのように楽観的UIを実装するのか、シンプルな例で見ていきましょう。

 例：タスク管理...]]></description><link>https://zenn.dev/ryohei0509/articles/154a40e84daec1</link><guid isPermaLink="true">https://zenn.dev/ryohei0509/articles/154a40e84daec1</guid><pubDate>Wed, 09 Oct 2024 13:49:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hSjXn7VR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25A5%25BD%25E8%25A6%25B3%25E7%259A%2584UI%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hukuryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0M2JhYWM4YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hukuryo</dc:creator></item><item><title><![CDATA[Vuetifyのv-tooltipでのメモリリークの対策方法を考える]]></title><description><![CDATA[以前 Vue と Vuetify で制作した 自宅環境観測ダッシュボード を数日間表示していたところ、Out of Memory でページごとクラッシュすることが複数回ありました。巨大なデータの扱いはなく、意図せず何らかの原因でメモリリークが発生しているのではないかと考えました。
根本原因には到達できなかったものの、回避方法を考えたのでそれに至るまでの過程を記録しておきます。

 前提

Vue: 3.5.11
Vuetify: 3.7.2


 発生した事象
ダッシュボードの Vue コンポーネント を表示させ続けると5日から10日ほどののち、Out of Memory でページがクラ...]]></description><link>https://zenn.dev/nanase_t/articles/11d492ffd9065c</link><guid isPermaLink="true">https://zenn.dev/nanase_t/articles/11d492ffd9065c</guid><pubDate>Wed, 09 Oct 2024 10:42:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ir_BNnU2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vuetify%25E3%2581%25AEv-tooltip%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E5%25AF%25BE%25E7%25AD%2596%25E6%2596%25B9%25E6%25B3%2595%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25B8%2583%25E7%2580%25AC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JmZDc4M2MzOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>七瀬</dc:creator></item><item><title><![CDATA[TS使っている人のRust 0から勉強日記1]]></title><description><![CDATA[こんにちは！普段TypeScriptを使ってフロントエンド開発をしている人です🙌
最近、上司に「TypeScript(ちょっとは)書けるようになったからRustやってみようか^^」と言われ、言われるがままやってみたものの何をやっているんだ状態…
ZennにはたくさんのRustの基礎となる部分の記事や本があったため、同じような内容にはなりますが、この記事の内容は基礎の基礎(+TypeScriptとの比較？)で自分の勉強の記録用に書いています。


 Rustってなんだ
そもそもRustってなんなんだから始まったので、とりあえずドキュメントを。
https://www.rust-lang.o...]]></description><link>https://zenn.dev/maru_contents/articles/rust_initial</link><guid isPermaLink="true">https://zenn.dev/maru_contents/articles/rust_initial</guid><pubDate>Wed, 09 Oct 2024 06:22:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vNZCS0z3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TS%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%25AERust%25200%25E3%2581%258B%25E3%2582%2589%25E5%258B%2589%25E5%25BC%25B7%25E6%2597%25A5%25E8%25A8%25981%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyZDVlZjUxOGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maru</dc:creator></item><item><title><![CDATA[サクッと始めるウェブアプリ開発【Next.js / TypeScript】]]></title><description><![CDATA[この本では、初心者・入門者の方に向けて、Next.jsの知識や使い方を体系的にまとめました。
 
 【概要】
 ・内容：HTML・CSS・JavaScriptとは？、Next.jsとは？、アプリを作る上での環境を整えよう！、Next.jsのプロジェクトを作ろう！、チャットアプリのパーツを作ろう！、オウム返しAPIを作ろう！、MUIを使ってリッチにしよう！、Vercelにデプロイしよう！、【余談】Joy.uiによるUIの変更
 ・所要時間：約3時間
 ・必須条件：HTMLの知識、CSSの知識、JavaScriptの知識
 ・推奨OS：macOS / windows(WSL2)
 ・レベル：★★☆☆☆
 ]]></description><link>https://zenn.dev/umi_mori/books/next-js-typescript</link><guid isPermaLink="true">https://zenn.dev/umi_mori/books/next-js-typescript</guid><pubDate>Wed, 09 Oct 2024 06:10:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3lCoDJ92--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8wZDk4NWMxYmJkLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ますみ / 生成AIエンジニア</dc:creator></item><item><title><![CDATA[Next.jsでのSSGサイト開発体験を爆上げする]]></title><description><![CDATA[SSGサイトを作るとき、大体がgetStaticPropsでWordPressやmicroCMSなどのCMSからデータを取ってくる形になると思うが、返却値に型を付けるのが結構面倒。
そこで今回、ビルド時はCMSを参照せず、ビルド前に生成したJSONファイル元にビルドするようにしたら開発体験がめちゃくちゃ良くなったので紹介したい。
今回はNext.jsで作ったが、Astroなど他の言語でも使えるはず。

 この記事でできること
CMSからの返却値のフィールド名と型が全てわかるようになる！

イメージとしてはこんな感じ。

ビルドする前にCMSから必要なデータを全てJSON形式で取ってくる
...]]></description><link>https://zenn.dev/gini/articles/55a016e37b68af</link><guid isPermaLink="true">https://zenn.dev/gini/articles/55a016e37b68af</guid><pubDate>Wed, 09 Oct 2024 01:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0-GzgVSa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E3%2581%25AESSG%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E9%2596%258B%25E7%2599%25BA%25E4%25BD%2593%25E9%25A8%2593%25E3%2582%2592%25E7%2588%2586%25E4%25B8%258A%25E3%2581%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:matip%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YWNhY2JlMDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:gini%25E3%2581%25AE%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlOWJjMWRjYWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matip</dc:creator></item><item><title><![CDATA[気楽にWebGLへ入門しよう！〜 自作WebGLライブラリGlakuの紹介]]></title><description><![CDATA[
 はじめに

 この記事の目的

コードを実際に動かしながら次の WebGL の基本概念を理解する

2種類のシェーダ： 頂点シェーダ / フラグメントシェーダ
3種類の変数： attribute / uniform / varying


上記解説に付随して自作の WebGL ライブラリ「Glaku」を紹介

https://glaku.vercel.app

 WebGL って何だ？
WebGL の要点を一言で表現すると、「頂点シェーダで頂点の位置を指定し、フラグメントシェーダでピクセルごとの色を指定する」ことです。
例えば、 WebGL を使って「青い三角形を画面に表示する」プロ...]]></description><link>https://zenn.dev/mu826/articles/7279de34d74e30</link><guid isPermaLink="true">https://zenn.dev/mu826/articles/7279de34d74e30</guid><pubDate>Tue, 08 Oct 2024 18:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2_eSXZEo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25B0%2597%25E6%25A5%25BD%25E3%2581%25ABWebGL%25E3%2581%25B8%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25E3%2580%259C%2520%25E8%2587%25AA%25E4%25BD%259CWebGL%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AAGlaku%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmNWUyOWRhMjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mu</dc:creator></item><item><title><![CDATA[開発もコードレビューも最後には「優しさに溢れたコメント」だよね、という話]]></title><description><![CDATA[
 はじめに
皆さんはちゃんとコメント残していますか？
新しくコードを追加した時、自分だけはその意味をよく分かっているため、よほど意識的にならないと「客観的にこのコード見たらどうか？」ということに考えが至らない場合が多いです。
熟練のエンジニアでも陥りがちですから、新人は言わずもがなでしょう。
コメントを残す主なメリットは次の通りです。

他の人の理解にかかる時間を短縮する（自分も含む）
誤解を防ぎ、人為的なミスを減らす
心理的安全性の向上

ここに過去の自分が知っておきたかった「新人が知っておくべきコメント」について3つを紹介しておきます。
※ 普段フロントエンドエンジニアをやっている...]]></description><link>https://zenn.dev/oimo/articles/7c141304dd387c</link><guid isPermaLink="true">https://zenn.dev/oimo/articles/7c141304dd387c</guid><pubDate>Tue, 08 Oct 2024 13:49:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OBNiT9W5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otfw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OimO%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODY5NmM1ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OimO屋</dc:creator></item><item><title><![CDATA[Next.js は React の型情報をどのように拡張しているのか]]></title><description><![CDATA[
 はじめに
Next.js 14 では React 19 で搭載予定の新機能がすでにサポートされており React 19 でなくとも利用することができます。
たとえば、useTransition フックは新しく非同期関数も扱えるようになりました。使い方はこちらの記事にて紹介しています。
https://zenn.dev/k0rosuke/articles/eab514e4920778#usetransition-フックを利用して処理中状態を管理する
この新機能自体は Next.js がサポートしてるので正常に動作するのはわかるのですが、型情報はどうでしょうか？
useTransitio...]]></description><link>https://zenn.dev/k0rosuke/articles/5895ff34364604</link><guid isPermaLink="true">https://zenn.dev/k0rosuke/articles/5895ff34364604</guid><pubDate>Tue, 08 Oct 2024 10:06:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wUwZOEVv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25AF%2520React%2520%25E3%2581%25AE%25E5%259E%258B%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E6%258B%25A1%25E5%25BC%25B5%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:korosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmODcxM2MxMTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>korosuke</dc:creator></item><item><title><![CDATA[バーチャルスクロールの限界を突破する]]></title><description><![CDATA[
 はじめに
私は今、CSVエディタ SmoothCSV 3 を開発しています。フレームワークとして Tauri を採用しており、レンダラーにはWebの技術（React + TypeScript）を使っています。
CSVエディタは大量の行・セルを表示する必要がありますが、Webの技術ではこのようなシーンではバーチャルスクロールを使うのが定石です。
SmoothCSVでもバーチャルスクロールを使っていましたが、どうやらこのバーチャルスクロールにも限界があるらしく、数百万行のような極端に大量のデータを表示する場合に最後まで表示しきれない問題に遭いました。
ここではバーチャルスクロールの基本と...]]></description><link>https://zenn.dev/kohii/articles/50e0bf572aac0b</link><guid isPermaLink="true">https://zenn.dev/kohii/articles/50e0bf572aac0b</guid><pubDate>Tue, 08 Oct 2024 09:21:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5vS5eMCu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%25BC%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E9%2599%2590%25E7%2595%258C%25E3%2582%2592%25E7%25AA%2581%25E7%25A0%25B4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kohii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkYTgyMjQxN2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kohii</dc:creator></item><item><title><![CDATA[Jestで SyntaxError: Unexpected token 'export' というエラーが出て困った話]]></title><description><![CDATA[
 環境情報
- Node.js: 16.20.0
- jest@26.6.3
- ts-jest@26.5.6
- babel-jest@29.7.0
※利用しているバージョンが低いので、最新バージョンであればこのあたりの解決方法が適用できそうです。

 エラー内容
 FAIL  src/hoge.test.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    This usually means that you are trying to import a file which ...]]></description><link>https://zenn.dev/taroman_zenn/articles/95db03d8185fe5</link><guid isPermaLink="true">https://zenn.dev/taroman_zenn/articles/95db03d8185fe5</guid><pubDate>Tue, 08 Oct 2024 01:27:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PaPZWRQW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jest%25E3%2581%25A7%2520SyntaxError%253A%2520Unexpected%2520token%2520%2527export%2527%2520%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2581%25A6%25E5%259B%25B0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%2585%25A2%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMjQwZDE3ZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>酢ろう</dc:creator></item><item><title><![CDATA[【実務向け】Playwrightで複数アカウントを切り替える方法]]></title><description><![CDATA[実務にあるような管理者や一般ユーザのようなアカウントを、Playwrightのテストケース内で即座に切り替える実践的な方法をご紹介します。

 📔 結論
公式にある Testing multiple roles with POM fixtures の方法を使用します。
例えば実務でありそうな以下のテストケースを想定してみます。

 テストケース例



前提
期待値




管理者でログインし、ボード一覧を表示する

ボードを作成 ボタンが表示されている


管理者でログインし、ボード一覧を表示する

ボードがありません。新しいボードを作りましょう が表示されている


一般ユーザでログ...]]></description><link>https://zenn.dev/potents/articles/1e3560482a94c0</link><guid isPermaLink="true">https://zenn.dev/potents/articles/1e3560482a94c0</guid><pubDate>Mon, 07 Oct 2024 16:31:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lV87OEFj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%25AE%259F%25E5%258B%2599%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Playwright%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Potents%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwODVhZjhkNWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Potents</dc:creator></item><item><title><![CDATA[Deno と JSR がもたらす OSS の民主化という妄想]]></title><description><![CDATA[
 はじめに
Deno 2.0 のリリースが目前に迫っているこのタイミングで、「Deno と JSR が OSS の民主化をもたらす」という期待を込めた妄想を書きます。
!
これは Automattic と WP Engines の係争の件を眺めながら、「はあ、OSS ははやっぱり限界なのだろうか」とか落ち込んでいたときに、Deno 2.0 の RC と JSR を触っていたらなんだか元気になってきたので、その辺で思っていたことを取り留めなく書き綴ったものです。ごくごく主観的な内容になります。


 Deno が TypeScript をネイティブにサポートするということ
Deno の公...]]></description><link>https://zenn.dev/5t111111/articles/deno-and-jsr-democratize-oss</link><guid isPermaLink="true">https://zenn.dev/5t111111/articles/deno-and-jsr-democratize-oss</guid><pubDate>Mon, 07 Oct 2024 07:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O_VcnHVb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520%25E3%2581%25A8%2520JSR%2520%25E3%2581%258C%25E3%2582%2582%25E3%2581%259F%25E3%2582%2589%25E3%2581%2599%2520OSS%2520%25E3%2581%25AE%25E6%25B0%2591%25E4%25B8%25BB%25E5%258C%2596%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E5%25A6%2584%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hirofumi%2520Wakasugi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0NjI2ZDE4MTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hirofumi Wakasugi</dc:creator></item><item><title><![CDATA[Slackの画像等のファイルを含めたメッセージをGitHubのIssueコメントとして同期する]]></title><description><![CDATA[開発に関する重要な会話でもSlackでやりとりがされがちですが、GitHubに連携したいという気持ちがあります。
もちろん、GitHubになるべく書いてください、といって解決すればよいですが、Slackのほうが距離が近いとか、そもそも開発者以外と会話するということもあります。
そのときに、SlackのポストをうまくGitHubに同期する方法を持っておけば、色々工夫できます。この記事では、その同期の部分のみに着目しますが、実際はさらにそれをどう活用するかというのを考える必要があります。例えば、既存のスレッドに !gh-link 123 としたらそこから先のメッセージが Issue 123 ...]]></description><link>https://zenn.dev/optimind/articles/slack-images-and-files-to-github-sync</link><guid isPermaLink="true">https://zenn.dev/optimind/articles/slack-images-and-files-to-github-sync</guid><pubDate>Mon, 07 Oct 2024 06:32:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1LG3b-JQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Slack%25E3%2581%25AE%25E7%2594%25BB%25E5%2583%258F%25E7%25AD%2589%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2581%25E3%2581%259F%25E3%2583%25A1%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592GitHub%25E3%2581%25AEIssue%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E5%2590%258C%25E6%259C%259F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:luma%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjY2ZmM2Q5YzIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:OPTIMIND%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lnRFRSQVhGMGJ1cUs3cXg4NGdUYlVNU3RlZnVVekdiN0p0Q0hWRFE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>luma</dc:creator></item><item><title><![CDATA[Playwrightで複数ユーザーを切り替えるE2Eテストの実装方法]]></title><description><![CDATA[
 はじめに
この記事ではPlaywrightを使ってE2Eテストを実装する際に複数ユーザーの切り替えを容易にする方法を紹介します。
この手法を使うことでテストのパフォーマンスやメンテナンス性向上が期待できると思います。

 Playwrightとは？
Playwrightは、ブラウザ自動化ツールであり、クロスブラウザテストやE2E（エンドツーエンド）テストを容易に実現できるライブラリです。
詳しくは公式ドキュメントを参照してください。

 動機
E2Eテスト対象のアプリケーションでロールベースの認可が行われているケースは少なくないと思います。
例えば「一般ユーザーと管理者」、「組織オー...]]></description><link>https://zenn.dev/sert/articles/56dd881273686d</link><guid isPermaLink="true">https://zenn.dev/sert/articles/56dd881273686d</guid><pubDate>Mon, 07 Oct 2024 05:09:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--amyLP-8N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Playwright%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2582%2592%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258BE2E%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2581%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ4YjQ3YzllNzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さと</dc:creator></item><item><title><![CDATA[CSSの動的型付けについて]]></title><description><![CDATA[!
この記事では、前回の記事で触れたCSSの動的型付けについて、
さらに詳しく解説していきます。前回の記事ではその背景を説明しましたが、
今回はPostCSSプラグインを使って、より効果的なアプローチを紹介したいと思います。


 はじめに
ウェブアプリケーションのスタイリング手法は様々ですが、個人的なプロジェクトでは、いまだにCSSを愛用しています。CSSを使うことで、JSバンドルのサイズを小さく抑え（例えばCSS-in-JSと比較して）、ロジックとスタイリングを分離を実現できる点が、私にとって大きなメリットです。
とはいえ、最近のスタイリング手法には魅力的な点もいくつかあります。CS...]]></description><link>https://zenn.dev/sun_asterisk/articles/40c0414c67978c</link><guid isPermaLink="true">https://zenn.dev/sun_asterisk/articles/40c0414c67978c</guid><pubDate>Mon, 07 Oct 2024 03:31:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TtnllehN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CSS%25E3%2581%25AE%25E5%258B%2595%25E7%259A%2584%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2587%25E3%2583%25AB%25E3%2583%2593%25E3%2583%25B3%2520%25E3%2582%25A2%25E3%2583%25AB%25E3%2583%2581%25E3%2583%25A7%25E3%2583%25A0%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1YTU0ZjZiM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Sun%252A%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRkNTVlY2IwMTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>デルビン アルチョム</dc:creator></item><item><title><![CDATA[PrismaのTypedSQLでMySQLに配列を渡す方法]]></title><description><![CDATA[
 はじめに
プレビューとなったPrismaのTypedSQLは便利な機能ですが、MySQLで配列を直接引数として渡せないという制限があります。(2024/10月現在)
PostgreSQLではANY演算子を使って実現できますが、MySQLでは異なるアプローチが必要となります。
この記事では、Json型を使ってMySQLでTypedSQLに配列を渡す方法を紹介します！

 問題点
シンプルなUserテーブルを例に考えます。IDの配列を受け取り、該当するユーザーを取得したいとします。

prisma/sql/findUsersByIds.sql
SELECT id, email FROM ...]]></description><link>https://zenn.dev/levtech/articles/cb61dd09c60477</link><guid isPermaLink="true">https://zenn.dev/levtech/articles/cb61dd09c60477</guid><pubDate>Mon, 07 Oct 2024 02:28:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xYTRSE1O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25AETypedSQL%25E3%2581%25A7MySQL%25E3%2581%25AB%25E9%2585%258D%25E5%2588%2597%25E3%2582%2592%25E6%25B8%25A1%25E3%2581%2599%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:jminami%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY1YzcxZDY5NDkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25AC%25E3%2583%2590%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E9%2596%258B%25E7%2599%25BA%25E9%2583%25A8%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhM2VhOWU1OTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jminami</dc:creator></item><item><title><![CDATA[[React Native] Instagramのリール風のUIを作りたい]]></title><description><![CDATA[スワイプしてピタッと止まるようなInstagramのリール風のUIの作り方がわからなかったので記事にしました。
コードをGitHubで公開しているので、この記事では必要な部分だけを切り出して説明します。
https://github.com/zackerms/expo-instagram-reel-playground

 10秒でわかる要約

Instagramのリールのようにスワイプすると１ページごとめくれるUIを作りたい
FlatListにpagingEnabled={true}を指定すると、ピタッと止まるようになる
要素とFlatListの大きさが異なるときは、snapToInt...]]></description><link>https://zenn.dev/dev_zacker/articles/edb633685c10fa</link><guid isPermaLink="true">https://zenn.dev/dev_zacker/articles/edb633685c10fa</guid><pubDate>Mon, 07 Oct 2024 02:03:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Javl4s1B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BReact%2520Native%255D%2520Instagram%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25AB%25E9%25A2%25A8%25E3%2581%25AEUI%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zacker%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyYzIzN2U4ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zacker</dc:creator></item></channel></rss>