<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 30 May 2024 04:07:47 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[JavaでSpring AIやLangChain4jのLLMアプリを作る "JHipster LLM"]]></title><description><![CDATA[
 はじめに
この記事は、以下の記事の続編です。

JavaでローカルLLMを動かす
OpenAI API互換サーバをJHipsterで実装
Spring AIとpgvectorとJHipsterを使ってRAGを実装

前回までは、JHipsterというコード生成ツールを使って、Javaで簡単にLLMアプリケーションを開発する手順について書いてきましたが、今回はそのノウハウをまとめ（注：RAG実装はまだ...）、素早くLLMアプリが作れるツール、JHipster LLMを作ってみたので紹介します。
https://github.com/hide212131/generator-jhips...]]></description><link>https://zenn.dev/hide212131/articles/078748ece57bcc</link><guid isPermaLink="true">https://zenn.dev/hide212131/articles/078748ece57bcc</guid><pubDate>Wed, 29 May 2024 16:36:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mLJKDTlV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25A7Spring%2520AI%25E3%2582%2584LangChain4j%25E3%2581%25AELLM%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2520%2522JHipster%2520LLM%2522%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hideyuki%2520Kagami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WU80RF9taDhWRW9qNlJKQ0pwWHVqOUFVdTdEY01tYzAtMTVpWDNJUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hideyuki Kagami</dc:creator></item><item><title><![CDATA[protobufのStructがJSONデータの変換に便利な話]]></title><description><![CDATA[protobuf とても便利ですよね。主に gRPC を使う時に利用しますが、単にコンポーネント間の中間データの定義やフォーマットとして使うだけでも有用性が高いです。
型がしっかり決まる protobuf 、それでも Map や、なんなら JSON データをゆるく持たせたくなる時がありませんか？既存システムからの移行や、やんごとなき事情でそういうこともあるでしょう。
というわけでこの記事では、 protobuf のデータに JSON データを持たせる時に Struct を利用すると便利だよという紹介をします。
Struct はあらかじめ protobuf 公式に定義された型です。
htt...]]></description><link>https://zenn.dev/innossh/articles/7002081435b60a</link><guid isPermaLink="true">https://zenn.dev/innossh/articles/7002081435b60a</guid><pubDate>Wed, 29 May 2024 12:57:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--okorMhfl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:protobuf%25E3%2581%25AEStruct%25E3%2581%258CJSON%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E5%25A4%2589%25E6%258F%259B%25E3%2581%25AB%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:innossh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U3MTIyN2YzNWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>innossh</dc:creator></item><item><title><![CDATA[例外処理]]></title><description><![CDATA[
 概要
「Java SE 11 Programmer II (1Z0-816-JPN) 試験」の出題範囲「例外処理」の自己学習メモになります

 例外クラス

 checked例外とunchecked例外

Errorクラスおよびそのサブクラス(unchecked例外)
RuntimeExceptionクラスおよびそのサブラクラス(unchecked例外)
RuntimeExceptionクラス以外のExceptionのサブクラス(checked例外)


 独自例外クラスの作成

 構文
[修飾子] class クラス名 extends Exception {}

 主な例外クラス
...]]></description><link>https://zenn.dev/greenwakame/articles/63e8abf663d1a9</link><guid isPermaLink="true">https://zenn.dev/greenwakame/articles/63e8abf663d1a9</guid><pubDate>Tue, 28 May 2024 12:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C80ra-tR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%25E4%25BE%258B%25E5%25A4%2596%25E5%2587%25A6%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:greenwakame%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pmWkJvR1pwQS1NblhzT0d3UTdRRHhPcTd3QkpIQkFuRnVjcUZnMUh3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>greenwakame</dc:creator></item><item><title><![CDATA[OSSのデザインパターン解説シリーズ：Adapter(Wrapper)パターンの活用と悪いコード例]]></title><description><![CDATA[
 1. はじめに
このシリーズでは、オープンソースソフトウェア（OSS）のソースコードを通じて、GoF（Gang of Four）デザインパターンの活用方法を解説します。
特に悪い例と良い例を見ることで、デザインパターンのメリットを考えていきます。
なお、OSSやデザインパターンの詳しい解説は書きません。
最小限のコード例と解説を書いていきます。

 2. Adapterパターンとは
Adapterパターンとは、既にある機能を別の場所/用途/インターフェースでも使えるようにするパターンです。
既存のコードを別のコードに適用するので、Adapterパターンと言います。
実装では、既存のク...]]></description><link>https://zenn.dev/neko_student/articles/d2f9e6abe8727a</link><guid isPermaLink="true">https://zenn.dev/neko_student/articles/d2f9e6abe8727a</guid><pubDate>Tue, 28 May 2024 00:28:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xw2jfqna--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA%25EF%25BC%259AAdapter%2528Wrapper%2529%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%25A8%25E6%2582%25AA%25E3%2581%2584%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:neko%2520student%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2ZnQzBseWZlcFJjSXIwMUJqQnFxVWZsZm5RZ1lNUUN0d1N6blA5VE8tTUE0TEtjQlAzdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>neko student</dc:creator></item><item><title><![CDATA[Singletonパターンにご注意を]]></title><description><![CDATA[
 Singletonパターンとは
Singleton(シングルトン)パターンは多くの問題の解決に役立つパターンです。
このパターンでは、クラスのインスタンスは必ず1つしか生成されません。そのインスタンスは使用前に必ず初期化され、シングルトンをグローバルアクセスポイントとすることで、設計をシンプルにできます。
こう書いていくと良いことずくめのようですが、この「古典的な」デザインパターンに何か短所はあるのでしょうか。

 Singletonにご注意を
実はたくさんあります。
確かにシングルトンパターンは魅力的ですが、実はこのパターンには利点よりも弊害の方が多いと言えます。
まずテストの妨げ...]]></description><link>https://zenn.dev/sadaizin/articles/4f04741cd9a783</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/4f04741cd9a783</guid><pubDate>Mon, 27 May 2024 11:01:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BscCsOEw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Singleton%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AB%25E3%2581%2594%25E6%25B3%25A8%25E6%2584%258F%25E3%2582%2592%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoichiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoichiro</dc:creator></item><item><title><![CDATA[アノテーション]]></title><description><![CDATA[
 概要
「Java SE 11 Programmer II (1Z0-816-JPN) 試験」の出題範囲「アノテーション」の自己学習メモになります

 よく使用されるJavaアノテーション



アノテーション名
説明




@Override
スーパークラスのメソッドをオーバーライドすることを示す


@FunctionalInterface
関数型インターフェースであることを示す


@Deprecated
非推奨の要素であることを示す


@SuppressWarnings
コンパイラの警告を無効にする


@SafeVarargs
安全でない可変長引数に対する警告を無効にする...]]></description><link>https://zenn.dev/greenwakame/articles/a00623289fa197</link><guid isPermaLink="true">https://zenn.dev/greenwakame/articles/a00623289fa197</guid><pubDate>Mon, 27 May 2024 04:39:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZvVFwxLI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2583%258E%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:greenwakame%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pmWkJvR1pwQS1NblhzT0d3UTdRRHhPcTd3QkpIQkFuRnVjcUZnMUh3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>greenwakame</dc:creator></item><item><title><![CDATA[[Java]Streamでの文字列結合・集計・グループ分けのCollectorsを使った簡単な説明とサンプル]]></title><description><![CDATA[Java 11で利用可能なjava.util.stream.Collectorsには、コレクション操作を簡潔にするための便利なメソッドがいくつかあり、これらを使って書くと読みやすく書けます。
本記事ではその中から、Collectors.toList(), Collectors.joining(), Collectors.summingInt(), Collectors.groupingBy(), Collectors.partitioningBy()といった比較的分かりやすい5つのメソッドを紹介し、それぞれの使用例をお伝えします。

 Collectors.toList()
このメソッド...]]></description><link>https://zenn.dev/hrimfaxi_tpw/articles/c498186d94b68e</link><guid isPermaLink="true">https://zenn.dev/hrimfaxi_tpw/articles/c498186d94b68e</guid><pubDate>Sun, 26 May 2024 23:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZsPd8a8T--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255DStream%25E3%2581%25A7%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E7%25B5%2590%25E5%2590%2588%25E3%2583%25BB%25E9%259B%2586%25E8%25A8%2588%25E3%2583%25BB%25E3%2582%25B0%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E5%2588%2586%25E3%2581%2591%25E3%2581%25AECollectors%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%25A8%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2580%25E3%2581%25B5%25E3%2581%2581%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NGZhZjY3ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りむふぁくし</dc:creator></item><item><title><![CDATA[デザインパターン: Singletonパターン -たった一つのインスタンス-]]></title><description><![CDATA[
 はじめに
GoFの23のデザインパターンがまとめられている「Java言語で学ぶデザインパターン入門」を読んでアウトプットとしてデザインパターンを1つずつ記事としてアウトプットしていきます。
原則的にJavaで実装コード例などを記述していきますが、気になったことや改善点、感想等ありましたらぜひコメントくださると嬉しいです！
23のパターン一覧はこちらから　※随時更新中
1.Iteratorパターン
2.Adapterパターン
3.Template Methodパターン
4.Factory Methodパターン
5.Singletonパターン
6.Prototypeパターン
7.Buil...]]></description><link>https://zenn.dev/sadaizin/articles/4c5624c79ab4dd</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/4c5624c79ab4dd</guid><pubDate>Sun, 26 May 2024 10:45:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--utchEyNT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%253A%2520Singleton%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2520-%25E3%2581%259F%25E3%2581%25A3%25E3%2581%259F%25E4%25B8%2580%25E3%2581%25A4%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoichiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoichiro</dc:creator></item><item><title><![CDATA[Spring Data RESTの要点と利用方法]]></title><description><![CDATA[
 はじめに
Spring Data RESTというライブラリを仕事で利用することになりそうで、色々手を動かして調べた要点や利用方法についてまとめました。
!
Qiita側にある自分の記事を転載しています。
https://qiita.com/umiushi_1/items/b369f659bbd94576b8f4


 Spring Data RESTとは
Spring Data RESTはSpring Dataのライブラリの一つであり、Spring Data RESTは、Spring Dataで作成したリポジトリをRESTfulなエンドポイントとして自動的に公開します。Spring ...]]></description><link>https://zenn.dev/maro0123/articles/07e02bc5d5d598</link><guid isPermaLink="true">https://zenn.dev/maro0123/articles/07e02bc5d5d598</guid><pubDate>Sat, 25 May 2024 17:51:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DrZedFoE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Data%2520REST%25E3%2581%25AE%25E8%25A6%2581%25E7%2582%25B9%25E3%2581%25A8%25E5%2588%25A9%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:umiushi_1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKempHNExPOXdXc0NvMWNVRU11UWp1aTJPTEhhbjdaNmJjZ3NHOU09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>umiushi_1</dc:creator></item><item><title><![CDATA[デザインパターン: Factory Methodパターン -インスタンス作成をサブクラスにまかせる-]]></title><description><![CDATA[
 はじめに
GoFの23のデザインパターンがまとめられている「Java言語で学ぶデザインパターン入門」を読んでアウトプットとしてデザインパターンを1つずつ記事としてアウトプットしていきます。
原則的にJavaで実装コード例などを記述していきますが、気になったことや改善点、感想等ありましたらぜひコメントくださると嬉しいです！
23のパターン一覧はこちらから　※随時更新中
1.Iteratorパターン
2.Adapterパターン
3.Template Methodパターン
4.Factory Methodパターン
5.Singletonパターン
6.Prototypeパターン
7.Buil...]]></description><link>https://zenn.dev/sadaizin/articles/a41bd6f73c2d50</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/a41bd6f73c2d50</guid><pubDate>Sat, 25 May 2024 08:39:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jTy71v9C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%253A%2520Factory%2520Method%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2520-%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E4%25BD%259C%25E6%2588%2590%25E3%2582%2592%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25BE%25E3%2581%258B%25E3%2581%259B%25E3%2582%258B-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoichiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoichiro</dc:creator></item><item><title><![CDATA[Java switch文のアロー演算子を用いた構文ついて]]></title><description><![CDATA[
 switch文でのアロー構文
switch文でアロー演算子を用いたコードを初めて見たのでメモとして残しておく。
アロー演算子「-&gt;」を使うことでswitch文の「：」と[break;]を省略することができる。
{}でブロックを作れば複数行の処理も書ける。
String　str = "B";
switch(str){
case "A" -&gt; System.out.println("A");
case "B" -&gt; System.out.println("B");
case "C" -&gt; {System.out.println("C");
　　　　　 System...]]></description><link>https://zenn.dev/sadaizin/articles/52eacf767b543d</link><guid isPermaLink="true">https://zenn.dev/sadaizin/articles/52eacf767b543d</guid><pubDate>Sat, 25 May 2024 07:48:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qiEoeYy2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520switch%25E6%2596%2587%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E6%25A7%258B%25E6%2596%2587%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoichiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNWFjZmRmNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoichiro</dc:creator></item><item><title><![CDATA[Javaクラスの基礎]]></title><description><![CDATA[
 概要
「Java SE 11 Programmer II (1Z0-816-JPN) 試験」の出題範囲「Javaの基礎」の自己学習メモになります

 final修飾子とstatic修飾子

 final修飾子



適用箇所
説明




クラス
final指定されたクラスを元に、サブクラスは作成できない


メソッド
final指定されたメソッドを元に、オーバーライドできない


変数
final指定された変数は、定数




 構文
クラスに適用
[アクセス修飾子] final class class名{ }
メソッドに適用
[アクセス修飾子] final 戻り値の型 メソッド名...]]></description><link>https://zenn.dev/greenwakame/articles/1749ecd5cff5ae</link><guid isPermaLink="true">https://zenn.dev/greenwakame/articles/1749ecd5cff5ae</guid><pubDate>Thu, 23 May 2024 14:55:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zo8b69cs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:greenwakame%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pmWkJvR1pwQS1NblhzT0d3UTdRRHhPcTd3QkpIQkFuRnVjcUZnMUh3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>greenwakame</dc:creator></item><item><title><![CDATA[エンジニアになる際に言語はどれが適切か？]]></title><description><![CDATA[いろいろな意見がありそうなテーマですが、
私はJavaを選択して正解だったというお話を簡単にしたいと思います。
言語に悩む人の参考になれば幸いです。

 Javaのシェア率が圧倒的
Javaは非常に多くのシステムで使われており改修案件が非常に多いです。
新規のプロジェクトで選択されることはあまりないのですが、改修案件が多いので初心者が参入しやすい案件が多いためおすすめです。

 言語シフトもしやすい
Javaで3年以上の開発経験であれば未経験でもPythonの案件OKです。などの案件もあるので最初からPythonをやっていなくてもよいのでは？という考えです。実際私も未経験で別言語の案件に...]]></description><link>https://zenn.dev/ysk_aup/articles/bd0413cbd007c1</link><guid isPermaLink="true">https://zenn.dev/ysk_aup/articles/bd0413cbd007c1</guid><pubDate>Thu, 23 May 2024 08:19:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K5YN4Kb0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AB%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AF%25E3%2581%25A9%25E3%2582%258C%25E3%2581%258C%25E9%2581%25A9%25E5%2588%2587%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25B3%25A2%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwMTZlZTFjNjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>賢一</dc:creator></item><item><title><![CDATA[OSSのデザインパターン解説シリーズ：Iteratorパターンの活用と悪いコード例]]></title><description><![CDATA[
 1. はじめに
このシリーズでは、オープンソースソフトウェア（OSS）のソースコードを通じて、GoF（Gang of Four）デザインパターンの活用方法を解説します。
特に悪い例と良い例を見ることで、デザインパターンのメリットを考えていきます。
なお、OSSやデザインパターンの詳しい解説は書きません。
最小限のコード例と解説を書いていきます。

 2. Iteratorパターンとは
Iteratorパターンとは、「"ものの集まり"の要素を全てたどること」を抽象化することです。
Javaの場合、"ものの集まり"に当たるクラスは以下が挙げられます：

配列
ArrayList
Link...]]></description><link>https://zenn.dev/neko_student/articles/5e9849afcdef0d</link><guid isPermaLink="true">https://zenn.dev/neko_student/articles/5e9849afcdef0d</guid><pubDate>Wed, 22 May 2024 23:58:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g25kD5NI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA%25EF%25BC%259AIterator%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%25A8%25E6%2582%25AA%25E3%2581%2584%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:neko%2520student%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2ZnQzBseWZlcFJjSXIwMUJqQnFxVWZsZm5RZ1lNUUN0d1N6blA5VE8tTUE0TEtjQlAzdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>neko student</dc:creator></item><item><title><![CDATA[エラーを起こしてバグを減らそう]]></title><description><![CDATA[
 はじめに
みなさんはエラーは好きですか？
大抵の人は嫌いなのではないでしょうか。
プログラミングをしていると多くのエラーが発生し、修正に苦労します。
そもそもエラーとは何なのでしょうか？
何の為にあるのか考えたことはあるでしょうか？
この記事でエラーの本質と向き合ってみましょう。
※JavaやPHPでは言語仕様上「エラー」と「例外」は明確に区分されますが、ここでは話の便宜上、「例外」の事も「エラー」と表現する場合があります。

 エラーは安全装置
たとえば、崖に沿った道路を走っていたら、ガードレールにぶつかって車が凹んでしまったとします。
じゃあ、ガードレールなんてない方が良かったの...]]></description><link>https://zenn.dev/k_tabuchi/articles/9fa03edd956f8a</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/9fa03edd956f8a</guid><pubDate>Wed, 22 May 2024 16:30:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D3by958Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E8%25B5%25B7%25E3%2581%2593%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2590%25E3%2582%25B0%25E3%2582%2592%25E6%25B8%259B%25E3%2582%2589%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[Internet Explorer EOL - Chrome Enterpriseユーザーにとっての意味]]></title><description><![CDATA[
2022年6月、Microsoftは長寿ブラウザであるInternet Explorerのメインストリームサポートを終了する意向であり、Windows 11上のIE11デスクトップアプリケーションは無効になる。
しかし、一部のアプリケーション、特にJavaアプレットに基づくアプリケーションは、Internet Explorerでのみ確実に動作し、Chrome Enterpriseユーザーは、Googleのレガシーブラウザサポー（LBS）を介してこのコンテンツにアクセスします。
IEの無効化は、これらのアプリケーションへのアクセスを維持する必要がある企業のワークフローに大きな変化をもたら...]]></description><link>https://zenn.dev/leaning_tech_jp/articles/2c220815d74f7e</link><guid isPermaLink="true">https://zenn.dev/leaning_tech_jp/articles/2c220815d74f7e</guid><pubDate>Wed, 22 May 2024 14:25:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7YcD0HSG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Internet%2520Explorer%2520EOL%2520-%2520Chrome%2520Enterprise%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25A8%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AE%25E6%2584%258F%25E5%2591%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leaning%2520Technologi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MmNjYWUyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leaning Technologies Japan (リーニングテクノロジー)</dc:creator></item><item><title><![CDATA[SpringでDIした実装クラスの実行順序を制御する]]></title><description><![CDATA[https://s-kugel.com/blog/controlling-execution-order-spring
]]></description><link>https://zenn.dev/silber_kugel/articles/6fb638897fc737</link><guid isPermaLink="true">https://zenn.dev/silber_kugel/articles/6fb638897fc737</guid><pubDate>Tue, 21 May 2024 15:48:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MNE689Bf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2581%25A7DI%25E3%2581%2597%25E3%2581%259F%25E5%25AE%259F%25E8%25A3%2585%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E9%25A0%2586%25E5%25BA%258F%25E3%2582%2592%25E5%2588%25B6%25E5%25BE%25A1%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:i-zacky%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3EwcVpjcWE1eElrZkhTVlEySDdSQnU4cEZUdmZGMEJ5RXNfSVQxPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>i-zacky</dc:creator></item><item><title><![CDATA[JavaBeanを軽くまとめました。]]></title><description><![CDATA[
 JavaBeanとは?
Java Beanは再利用可能なソフトウェアコンポーネントを意味します。
Java Beansは特別な要求事項を満たすJavaオブジェクトであり、主にグラフィックユーザーインターフェース(GUI)で使用されたり、エンタープライズアプリケーションでデータモデルとして活用されています。
簡単に言うと、特定の情報(id, password, name, job...)などを持っているクラスを表現する一つの規則であり、データを表現するための目的を持っています。
この規則を持つクラスをJava Beanと言います。

 JavaBeanの規約

クラスをpublicで指...]]></description><link>https://zenn.dev/hyung8/articles/b0743d6f872f98</link><guid isPermaLink="true">https://zenn.dev/hyung8/articles/b0743d6f872f98</guid><pubDate>Tue, 21 May 2024 06:57:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8wyzjIKh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaBean%25E3%2582%2592%25E8%25BB%25BD%25E3%2581%258F%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hyung8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3Mjk5MDVhOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hyung8</dc:creator></item><item><title><![CDATA[静的解析ライブラリのSpoonを使って、コード規約を遵守させる]]></title><description><![CDATA[
 概要
Javaの静的解析ライブラリであるSpoonを使い、コード規約に違反するコードを検知するテストを書きました。パイプラインでのテスト実行時にこれらのテストを実行することで、規約に違反したコードがコードベースにマージされることを防ぐことができます。
今回は下記のようなコード規約が存在すると仮定し、規約違反するコードを検知するためのテストを実装していきます。

メソッドの長さが50行を超える場合は分割すること
フィールド数が20を超える場合はクラスを分割すること
値オブジェクトのクラス名はチームで運用しているユビキタス言語の一覧にあるものを使うこと（ない場合はユビキタス言語のリストを...]]></description><link>https://zenn.dev/hsaitooo/articles/spoon-code-analysis</link><guid isPermaLink="true">https://zenn.dev/hsaitooo/articles/spoon-code-analysis</guid><pubDate>Mon, 20 May 2024 13:26:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZcZk1Xy3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%2599%25E7%259A%2584%25E8%25A7%25A3%25E6%259E%2590%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AESpoon%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E8%25A6%258F%25E7%25B4%2584%25E3%2582%2592%25E9%2581%25B5%25E5%25AE%2588%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:saito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5ZTM0M2Y5MDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saito</dc:creator></item><item><title><![CDATA[【Java】クラス解説38・ローカルクラス]]></title><description><![CDATA[
 ローカルクラス
ローカルクラスとは、内部クラスのうち、ブロック内に定義されるクラスです。主にメソッドブロック内で定義されることが多いです。
ローカルクラスは、以下の種類に分けられます。

通常クラス
列挙型
レコードクラス

今回は、通常クラスについて解説します。
また、ローカルクラスにprivate、protected及びprivateを付与することはできません。

 ローカルクラスをインスタンス化するコード例
public class Main {
    public static void main(String... args) {
        Fuzi fz = ne...]]></description><link>https://zenn.dev/goriki/articles/076-local-class</link><guid isPermaLink="true">https://zenn.dev/goriki/articles/076-local-class</guid><pubDate>Mon, 20 May 2024 07:29:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--thzCZ_0z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E8%25A7%25A3%25E8%25AA%25AC38%25E3%2583%25BB%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2597%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZTBkYWY1NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>藤</dc:creator></item></channel></rss>