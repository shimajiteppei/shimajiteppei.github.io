<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 12 May 2024 03:22:09 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TSKaigi2024の資料まとめ]]></title><description><![CDATA[
 はじめに
2024年5月11日に行われたTSKaigiの資料まとめです。
https://tskaigi.org/talks

 Track1

フロントエンドもバックエンドもインフラも… 全てをTypeScriptで統一したらこうなった！
TypeScript化の旅: Helpfeelが辿った試行錯誤と成功の道のり
新サービス Progate Path の演習で TypeScript を採用して見えた教材観点からの利点と課題
PMF達成の立役者！Full TypeScript Architecture の選定背景と構成
TypeScript 関数型バックエンド開発のリアル
Type...]]></description><link>https://zenn.dev/stray/articles/05449d6b423c7f</link><guid isPermaLink="true">https://zenn.dev/stray/articles/05449d6b423c7f</guid><pubDate>Sat, 11 May 2024 14:47:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4C6Ez6dd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TSKaigi2024%25E3%2581%25AE%25E8%25B3%2587%25E6%2596%2599%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:stray%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxZGRhOWVlODMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>stray</dc:creator></item><item><title><![CDATA[TSKaigi 2024 Prettierの未来を考える スピーカーノート]]></title><description><![CDATA[TSKaigi 2024 で話した「Prettier の未来を考える」という発表のスピーカーノートです。スライドは

こんにちは、今日は「Prettierの未来を考える」というタイトルでお話させていただきたいと思います。
鈴木 颯介と言います。ユビー株式会社でプロダクト開発エンジニアとして働きながら、筑波大学でパソコンの勉強をしています。オープンソースソフトウェアが好きで、今日お話するPrettierのメンテナーをしたり、トランスパイラのBabelのコミッターをしたりしています。最近はWebKitのJSエンジンにたくさんパッチを投げたりしています。
私が働いているユビーは、TSKaigi...]]></description><link>https://zenn.dev/sosukesuzuki/articles/756e04848885bd</link><guid isPermaLink="true">https://zenn.dev/sosukesuzuki/articles/756e04848885bd</guid><pubDate>Sat, 11 May 2024 08:13:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MnAqaLkW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TSKaigi%25202024%2520Prettier%25E3%2581%25AE%25E6%259C%25AA%25E6%259D%25A5%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2520%25E3%2582%25B9%25E3%2583%2594%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sosuke%2520Suzuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kzVm5WZHo2MC1CT3lMTS1VVnZaNmdNSDJlTlp1T0lTa1owT3lyNnc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sosuke Suzuki</dc:creator></item><item><title><![CDATA[TypeScript で EventTarget を継承する方法]]></title><description><![CDATA[
 実際のコード
TypeScript において EventTarget を継承したクラスを作成するコードは以下のように書くことができます。
/**
 * @file Pure Typed EventTarget Example
 * @license Unlicense
 */

declare class TypedEventTarget&lt;EventMap extends Record&lt;string, Event&gt;&gt;
  extends EventTarget {
  addEventListener&lt;Type extends keyof EventMa...]]></description><link>https://zenn.dev/reosablo/articles/2c3624697ebe8d</link><guid isPermaLink="true">https://zenn.dev/reosablo/articles/2c3624697ebe8d</guid><pubDate>Sat, 11 May 2024 06:52:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EuPPe1Fi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25A7%2520EventTarget%2520%25E3%2582%2592%25E7%25B6%2599%25E6%2589%25BF%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AC%25E3%2582%25AA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0ZybVlYLVkyZDZZdUJkRzIxMW1XUkNvRDJvaEJYWk91amtpVWtvTWJPVEEwPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>レオ</dc:creator></item><item><title><![CDATA[TypeScriptとGraphQLで実現する型安全なAPI実装]]></title><description><![CDATA[この記事はTSKaigi2024での以下の私の発表内容を書き下ろしたものです。
https://speakerdeck.com/hokaccha/tskaigi-2024

 なぜAPIに型をつけたいのか
現代のWebのシステム開発において、クライアント・サーバーともに型のある言語で開発されることが増えてきました。静的な型検査はコードの堅牢性やよりよいメンテナンス性の向上をもたらします。
プログラミング内部だけで型検査をするだけでも十分メリットはありますが、外部I/Oに対する型付けが不十分だとそのメリットを最大限に発揮してるとは言えません。外部I/Oとは、例えばWebフロントエンドだとL...]]></description><link>https://zenn.dev/hokaccha/articles/6415a5deee6e18</link><guid isPermaLink="true">https://zenn.dev/hokaccha/articles/6415a5deee6e18</guid><pubDate>Sat, 11 May 2024 06:22:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3ZSrJmC7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A8GraphQL%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAAPI%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hokaccha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lpYWctanVyZUl3Q21TY0ZpclkwaUo0eXppaGZYekxOc1RfejZNX3c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hokaccha</dc:creator></item><item><title><![CDATA[AWS Lambda + HonoでGitHub Trendingを毎朝Slack通知する]]></title><description><![CDATA[
 はじめに
OSSなどのコードを読みたくなることはありませんか？そんなとき、自分含め、GitHub Trendingで盛り上がっているリポジトリを漁る方もいらっしゃると思います。
そこで、興味のあるリポジトリに出会える機会を増やすため、毎日GitHub Trendingのリポジトリ情報をSlackに流すようにしました。
https://github.com/nashiusagi/gihub-trending-slack-bot/tree/master

 機能要件
GitHub Trendingで見られるリポジトリ情報はAPI提供がされていないため、スクレイピングで抽出する必要がありま...]]></description><link>https://zenn.dev/nashiusagi/articles/b964d0bdec1031</link><guid isPermaLink="true">https://zenn.dev/nashiusagi/articles/b964d0bdec1031</guid><pubDate>Sat, 11 May 2024 05:38:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gjB7zQms--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520Lambda%2520%252B%2520Hono%25E3%2581%25A7GitHub%2520Trending%25E3%2582%2592%25E6%25AF%258E%25E6%259C%259DSlack%25E9%2580%259A%25E7%259F%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NashiUsagi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MzUzZDM1OGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NashiUsagi</dc:creator></item><item><title><![CDATA[Remix + Conform で動的に増減する複数フィールドフォームのバリデーション]]></title><description><![CDATA[
 はじめに
Web アプリケーションを開発していると、ユーザーから複数の連絡先情報を入力してもらうようなフォームを実装する場面がしばしばあります。例えば、以下のようにグループ登録の際に複数人の名前や電話番号、メールアドレスを一度に入力するケースなどです。

このようなフォームでは、入力フィールドの数が動的に増減できることが求められます。ユーザーがボタンをクリックすることで、新しい連絡先を追加したり、不要な連絡先を削除したりできる必要があるでしょう。さらに、それぞれの連絡先情報は名前、電話番号、メールアドレスなどの複数のフィールドを持つため、ネストしたデータ構造を扱う必要もあります。こう...]]></description><link>https://zenn.dev/coji/articles/remix-conform-nested-array</link><guid isPermaLink="true">https://zenn.dev/coji/articles/remix-conform-nested-array</guid><pubDate>Sat, 11 May 2024 03:50:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k5S86bU7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Remix%2520%252B%2520Conform%2520%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E5%25A2%2597%25E6%25B8%259B%25E3%2581%2599%25E3%2582%258B%25E8%25A4%2587%25E6%2595%25B0%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Coji%2520Mizoguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pWY2RrNjcwV2NIdGs0anBHa2FGTDAxcERVUVlIX0JYdWE5aDRVNVE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Coji Mizoguchi</dc:creator></item><item><title><![CDATA[React × Typescript  型定義（見返し用）]]></title><description><![CDATA[
 型定義の方法
各場面の型定義の方法。

 エイリアスを使った型定義

 ステートへ型定義
//オブジェクトのエイリアスを定義
type TodoType = {
  "userId": number,
  "id": number,
  "title": string,
  "completed": boolean
}

//定義したエイリアスをStateに設定
const [todos, setTodos] = useState&lt;Array&lt;TodoType&gt;&gt;([]);


 フェッチデータ取得時の型定義
//オブジェクトのエイリアスを定義
type To...]]></description><link>https://zenn.dev/shohei_1010/articles/faa48bf1f71c0d</link><guid isPermaLink="true">https://zenn.dev/shohei_1010/articles/faa48bf1f71c0d</guid><pubDate>Fri, 10 May 2024 15:07:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0Ydu3WdP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25C3%2597%2520Typescript%2520%2520%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25EF%25BC%2588%25E8%25A6%258B%25E8%25BF%2594%25E3%2581%2597%25E7%2594%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shouhei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JmYTI5YTZhZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shouhei</dc:creator></item><item><title><![CDATA[俺の denols/tsserver(vtsls) 共存術 for Neovim 2024]]></title><description><![CDATA[!
この記事はVim 駅伝の 5/10 の記事です。


 はじめに
NeovimのLSPでDenoのLSP(denols) と tsserver(vtsls)を共存させる試みはこれまで幾度となく行われてきました。
LSPって何？とか問題意識を詳しく知りたい、という方は以下の記事を参照してください。
https://zenn.dev/kawarimidoll/articles/2b57745045b225
https://zenn.dev/mochi/articles/e6b2735108157c
https://zenn.dev/vim_jp/articles/69d26e3f7b0e...]]></description><link>https://zenn.dev/vim_jp/articles/10b408bc0cf077</link><guid isPermaLink="true">https://zenn.dev/vim_jp/articles/10b408bc0cf077</guid><pubDate>Fri, 10 May 2024 09:42:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k-iF4-ZH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BF%25BA%25E3%2581%25AE%2520denols%252Ftsserver%2528vtsls%2529%2520%25E5%2585%25B1%25E5%25AD%2598%25E8%25A1%2593%2520for%2520Neovim%25202024%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ryoppippi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1YzllYzNiYzAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:vim-jp%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzNDU0MTQ1MTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryoppippi</dc:creator></item><item><title><![CDATA[[App Router]Route Handlersを利用してサーバーサイドで動的なエンドポイントへfetchする]]></title><description><![CDATA[App RouterでRoute Handlersの実装を行った際に、書き方のお作法が分からず苦戦しました。
ユースケースと共に解説し、皆様の一助になれば幸いです。
なお、参考サイトはnextの公式ドキュメントから引用していますが、古い情報がある場合は教えていたでけると嬉しいです。

 ユースケース


リモートで鍵の開閉を行うサービス（Akerun API）を利用して、鍵の開閉を行いたい
鍵を開けるフローが二段階ある

鍵の解錠をリクエスト ⇒ 成功すると job_id が返ってくる

job_id を利用して、解錠ステータスを取得する



job_id は解錠リクエストごとに異なる...]]></description><link>https://zenn.dev/m_suzuki/articles/55e284daf2bf71</link><guid isPermaLink="true">https://zenn.dev/m_suzuki/articles/55e284daf2bf71</guid><pubDate>Fri, 10 May 2024 08:37:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--baoHAm5I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BApp%2520Router%255DRoute%2520Handlers%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2589%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25B8fetch%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:max%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeVVZaUN2Y3J4QWVTc3dIb2xQeDJFTE03NFlUeENhMlNZYUJjSTU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>max</dc:creator></item><item><title><![CDATA[マイベストで経験した1年とこれから]]></title><description><![CDATA[株式会社マイベストに24新卒で入社したucchiiiです！
僭越ながら、mybest BlogKaigi 2024 の17日目を担当します。
先日無事マイベストに入社した私ですが、2023年5月より内定者インターンとしてお世話になっていました。今回は、私がその約1年間の内定者インターンにおいて経験したことをお話しできればと思います。

 mybest GPTにおけるHallucination対策
マイベストは今年1月に、ChatGPTのGPTsとして「mybest GPT」をリリースしました。mybest GPTは、画像のようにChatGPTにおすすめの商品を聞くと、マイベストのデータベ...]]></description><link>https://zenn.dev/mybest_dev/articles/8ae0d664b8f526</link><guid isPermaLink="true">https://zenn.dev/mybest_dev/articles/8ae0d664b8f526</guid><pubDate>Fri, 10 May 2024 08:06:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fuoVlCsl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259E%25E3%2582%25A4%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A7%25E7%25B5%258C%25E9%25A8%2593%25E3%2581%2597%25E3%2581%259F1%25E5%25B9%25B4%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258C%25E3%2581%258B%25E3%2582%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2586%25E3%2581%25A3%25E3%2581%25A1%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxMmM4NTBlYTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%259E%25E3%2582%25A4%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxOTY0YWViMmMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うっちー</dc:creator></item><item><title><![CDATA[OpenAPI定義を用いて型安全にFormDataを扱いたい！]]></title><description><![CDATA[こんにちは、エンジニアの籏野です。
フォルシアの API 開発では OpenAPI 定義を利用し、TypeScript の型定義や各種ソースコードを自動で生成していることがあります。
最近は型の生成にopenapi-typescript、フロントエンドで利用する API クライアントにopenapi-fetchを利用する機会が増えてきました。
openapi-fetch を利用する場合、クエリ/パスパラメータ―や JSON.stringify できるようなボディパラメーターについては特に気にすることなく利用が可能なのですが、ファイルのアップロードを行う場合にどのようにすればよいかがわから...]]></description><link>https://zenn.dev/forcia_tech/articles/2024_hatano_openapi_formdata</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/2024_hatano_openapi_formdata</guid><pubDate>Fri, 10 May 2024 04:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QruKrJwC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenAPI%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%25A6%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25ABFormData%25E3%2582%2592%25E6%2589%25B1%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[JavaScriptでパスワード生成するワンライナー]]></title><description><![CDATA[アルファベットと数字と記号を利用して12文字で生成したい場合
((chars, len) =&gt; [...crypto.getRandomValues(new Uint32Array(len))].map(v =&gt; ((c) =&gt; crypto.getRandomValues(new Uint32Array(1)) % 2 === 0 ? c : c.toUpperCase())(chars.charAt(v % chars.length))).join(""))("abcdefghijklmnopqrstuvwxyz0123456789-_/*+.,!#$%&amp;(...]]></description><link>https://zenn.dev/oubakiou/articles/e4e27a05cc7d28</link><guid isPermaLink="true">https://zenn.dev/oubakiou/articles/e4e27a05cc7d28</guid><pubDate>Fri, 10 May 2024 03:36:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--luCB6tdV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AF%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:oubakiou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWMzYzAwNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>oubakiou</dc:creator></item><item><title><![CDATA[Next.jsとTypeScriptを使ったTODOアプリのフロントエンド開発]]></title><description><![CDATA[サクッと作れる Laravel 11 で超簡単な RESTful API を実装!! のフロントエンドです。
https://zenn.dev/0bookbook/articles/11b168c2c228d7

 types

types\TodoTypes.ts
export type TodoTypes = {
  id: string;
  title: string;
};

export type TodoActionParams = {
  todos: TodoTypes[];
  setTodos: (todos: TodoTypes[]) =&gt; void;
};...]]></description><link>https://zenn.dev/0bookbook/articles/7481f2917be723</link><guid isPermaLink="true">https://zenn.dev/0bookbook/articles/7481f2917be723</guid><pubDate>Fri, 10 May 2024 02:41:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--om3ohes_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A8TypeScript%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259FTODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nao%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmMTk2YmVkYTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nao</dc:creator></item><item><title><![CDATA[Yup フォーム・バリデーションの実装におけるデバッグ Tips]]></title><description><![CDATA[!
この記事は毎週必ず記事が出るテックブログ "Loglass Tech Blog Sprint" の 38 週目の記事です！
1 年間連続達成まで 残り 15 週 となりました！


Web アプリケーションでフォームの入力値バリデーションを実装するとき、Yup は強力で柔軟性が高いツールの一つです。
Yup を利用すると、スキーマベースのアプローチで入力値のバリデーションを簡潔かつ効率的に行うことができます。
https://github.com/jquense/yup
しかし、複雑なフォームの実装になるとスキーマ定義の実装時、特に TypeScript を併用している環境では、型エ...]]></description><link>https://zenn.dev/loglass/articles/7360b2109221f7</link><guid isPermaLink="true">https://zenn.dev/loglass/articles/7360b2109221f7</guid><pubDate>Thu, 09 May 2024 21:49:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nvApg8UP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Yup%2520%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25BB%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%2520Tips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:shioyang%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNWQ4ZTRjZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p2M3ljel9lUjE4NVhReExEaTV0QXk3UWhmZ3Flbm1SakljU2pNWmc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shioyang</dc:creator></item><item><title><![CDATA[個人ブログ(powered by Notion API)にリンクカード機能をつける]]></title><description><![CDATA[個人ブログを持っておりまして、リポジトリも公開しています。
https://github.com/0si43/shetommy.com
Notionで記事書いて、それをVercelデプロイ時にNotion API経由でレンダリングしてHTMLにする、ということをやっています。
2021年に公開して、そこからちょこちょこ機能追加していったんですが、長年やりたくてできていなかったことが2つありました。
それが下記2つです。

リンクカード機能
目次機能

今時のブログなら、絶対ある機能ですよね。
ようやく2つとも対応できたので、対応内容を書こうと思います。
この記事ではとりあえずリンクカード...]]></description><link>https://zenn.dev/st43/articles/fe0e0a32b2a248</link><guid isPermaLink="true">https://zenn.dev/st43/articles/fe0e0a32b2a248</guid><pubDate>Thu, 09 May 2024 10:47:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--piPECyUC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2580%258B%25E4%25BA%25BA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2528powered%2520by%2520Notion%2520API%2529%25E3%2581%25AB%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%2589%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2594%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzMGMyNDExMGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>蔀</dc:creator></item><item><title><![CDATA[【TypeScript】動的なパスを生成するための便利関数の紹介]]></title><description><![CDATA[
 概要
Next.jsやHonoを使用しているプロジェクトなどで、動的なパスの生成はよくある課題の一つです。
今回紹介する便利関数は、型安全を保ちながらURLの生成を簡単かつ効率的に行う方法を提供します。この関数は、静的ルートから複雑なパラメータを含む動的ルートまで、様々なURLパターンを柔軟に扱うことができます。
const PATH = {
  ROOT: "/",
  GROUP_USER: "/group/[group_id]/user/[user_id]",
  FAQ: "/faq",
} as const;

type ExtractBracketParams&lt;T ...]]></description><link>https://zenn.dev/kubo_programmer/articles/1965ecc259c41e</link><guid isPermaLink="true">https://zenn.dev/kubo_programmer/articles/1965ecc259c41e</guid><pubDate>Thu, 09 May 2024 10:37:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2ccFf8d1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AA%25E3%2583%2591%25E3%2582%25B9%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E4%25BE%25BF%25E5%2588%25A9%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%259C%25E5%25A4%25AA%25E9%2583%258E%2520%257C%2520Kubota%2520Hideya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwNzFmOWEyZGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クボ太郎 | Kubota Hideya</dc:creator></item><item><title><![CDATA[[個人開発]大学生のために履修プランを共有するアプリを作成してみた]]></title><description><![CDATA[
 はじめに
初めまして！現在大学3年生のRyoと申します！
先日、大学生の履修プランを共有するサービス「ClassPlannner」をリリースしました。
初めて個人開発を行い自分の納得のいくところまで完成させることができたので、実装と合わせて紹介させていただきます！
【プロダクトURL】

【Github URL】


 開発の背景
私の所属する学部の卒業要件は非常に複雑なため、卒業までに何を履修すべきか把握するのが難しいです。具体的には、学部内に2つのコースが設けられており、卒業までに4つのプログラムを達成する必要があります。2つのコースでは必修授業が異なり、4つのプログラムごとに必...]]></description><link>https://zenn.dev/ryohei08/articles/629de87a464298</link><guid isPermaLink="true">https://zenn.dev/ryohei08/articles/629de87a464298</guid><pubDate>Thu, 09 May 2024 05:42:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--j9MuQmBx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%255D%25E5%25A4%25A7%25E5%25AD%25A6%25E7%2594%259F%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%25B1%25A5%25E4%25BF%25AE%25E3%2583%2597%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%2592%25E5%2585%25B1%25E6%259C%2589%25E3%2581%2599%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ryohei%2520Kamei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxMDZhMjYzYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ryohei Kamei</dc:creator></item><item><title><![CDATA[TypeError: XXX is not a constructor でちょっとハマった]]></title><description><![CDATA[次のようなエラーが出たのだ。
TypeError: CustomerServiceImpl is not a constructor
      9| export const customerService: CustomerService = new CustomerServiceI
       |                                                 ^

 結論
モジュールの呼び出し先より下に定義された別のモジュールを、呼び出されるモジュールが使用していたのが原因だったのだ。

 詳しく
CustomerServiceImpl のあるメ...]]></description><link>https://zenn.dev/harineko/articles/adc9fb6f9cefcc</link><guid isPermaLink="true">https://zenn.dev/harineko/articles/adc9fb6f9cefcc</guid><pubDate>Thu, 09 May 2024 04:12:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--umdeidHH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeError%253A%2520XXX%2520is%2520not%2520a%2520constructor%2520%25E3%2581%25A7%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Harineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2h3Yzl4MTJyWFFvbGR0dE9vYXBiNHBDQmNZcE5FZlAza0E4NWtNZWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Harineko</dc:creator></item><item><title><![CDATA[【初学者向け】TypeScript 型定義集]]></title><description><![CDATA[
 はじめに
TypeScriptの型定義について、
初学者がまずおぼえるべき型を一覧でまとめました。

 型定義

 string型（文字列）
let variant: string = "a"

 number型（数値）
let variant: number = 1

 boolean型（true / false）
let variant: boolean = true(false)

 リテラル型
const variant = "a"  // リテラル型（"a"）
//型注釈
let variant: 1  // リテラル型（1）
variant = 2  // NG
!

 ...]]></description><link>https://zenn.dev/kao126/articles/2b26ae20bc9a0d</link><guid isPermaLink="true">https://zenn.dev/kao126/articles/2b26ae20bc9a0d</guid><pubDate>Thu, 09 May 2024 04:05:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1aXAYfia--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591TypeScript%2520%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E9%259B%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzOGRmOThkNzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かお</dc:creator></item><item><title><![CDATA[ファイル名をindexにするとディレクトリ構成が綺麗になる話]]></title><description><![CDATA[こんにちは！
フロントエンドの開発中に、ファイル名をindexにするとtestのファイルやstoriesのファイルなどコンポーネントに関連するファイルをいい感じにまとめることができるという話をしたいと思います。

 ディレクトリ構成
例えば、button コンポーネントを作成して、それらに関連するファイルをまとめると以下のようなディレクトリ構成になります。
# Good
components/
  button/
    index.tsx
    index.test.tsx
    index.stories.tsx

# Bad
components/
  button/
    ...]]></description><link>https://zenn.dev/shouta0715/articles/a170ab2dcfc2b3</link><guid isPermaLink="true">https://zenn.dev/shouta0715/articles/a170ab2dcfc2b3</guid><pubDate>Wed, 08 May 2024 12:20:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G9gc96cd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E5%2590%258D%25E3%2582%2592index%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%25E3%2581%258C%25E7%25B6%25BA%25E9%25BA%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shouta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0NGEwYzcxNjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shouta</dc:creator></item></channel></rss>