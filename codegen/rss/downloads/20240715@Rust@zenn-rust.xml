<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 15 Jul 2024 07:39:37 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[S3 Selectをaws-sdk-rustで行う]]></title><description><![CDATA[
 S3を準備

 S3 Bucketを作成
CloudFormationを用いて以下を作成します。

S3 Bucket
作成したS3からデータを取得するためのIAMユーザー

AWSTemplateFormatVersion: "2010-09-09"
Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
 ...]]></description><link>https://zenn.dev/monjara/articles/17f00f0cab4ef1</link><guid isPermaLink="true">https://zenn.dev/monjara/articles/17f00f0cab4ef1</guid><pubDate>Mon, 15 Jul 2024 02:53:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Oyimcce---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:S3%2520Select%25E3%2582%2592aws-sdk-rust%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:monjara%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwZTlkOTQwZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>monjara</dc:creator></item><item><title><![CDATA[RustでHatena APIのClientを作った]]></title><description><![CDATA[公式ドキュメントにない言語で実装したので，知見として残しておきます．Basic認証で使うのであれば他の言語でも参考になるかと思います．

 はてなブログのAPIを利用する方法
公式ドキュメントによるとOAuthかWSSEまたは，Basic認証が必要とのことでした．

はてなブログAtomPub を利用するために、クライアントは OAuth 認証、WSSE認証、Basic認証のいずれかを行う必要があります。

https://developer.hatena.ne.jp/ja/documents/blog/apis/atom/#ブログエントリの一覧取得
公式ドキュメントにはPerl，Rub...]]></description><link>https://zenn.dev/shundeveloper/articles/d1cf7752da0e98</link><guid isPermaLink="true">https://zenn.dev/shundeveloper/articles/d1cf7752da0e98</guid><pubDate>Sun, 14 Jul 2024 09:54:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ILOEIqlW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Hatena%2520API%25E3%2581%25AEClient%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shunsock%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3Y2U4NzUxNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shunsock</dc:creator></item><item><title><![CDATA[Positron で R パッケージ中の C/C++ や Rust のコードをデバッグする]]></title><description><![CDATA[
 デモ
こういうのができます。
https://x.com/yutannihilation/status/1812300168563450281

 背景
先週やってた UseR! 2024 で Posit 社の Lionel Henry 氏[1]が ark について発表してました。動画はまだないですが、スライドはすでに公開されています。
https://lionel-.github.io/slidedecks/2024-07-11-ark/
ark は Positron の裏側で動いている、R のプロセスをラップしていろいろ便利に使えるようにしてくれるもの、です。いろいろ便利に、とい...]]></description><link>https://zenn.dev/yutannihilation/articles/115cacb9d5e89c</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/115cacb9d5e89c</guid><pubDate>Sun, 14 Jul 2024 02:59:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nJZqI5xe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Positron%2520%25E3%2581%25A7%2520R%2520%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E4%25B8%25AD%25E3%2581%25AE%2520C%252FC%252B%252B%2520%25E3%2582%2584%2520Rust%2520%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[「RustとWebAssemblyによるゲーム開発」の長い音楽の再生を行ったときのコンパイルエラーに対処したメモ]]></title><description><![CDATA[
 概要
前回から続けてRustとWebAssemblyによるゲーム開発を写経していて７章で本で触れられていないエラーがでたのでメモ。
デプロイ先
ソースコード

 環境

webpack: 5.93.0
webpack-dev-server: 5.0.4


 発生したエラー
WARNING
asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).
This can impact web performance.
Assets: 
  background_song.mp3...]]></description><link>https://zenn.dev/hibo/articles/1a13deff76ef76</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/1a13deff76ef76</guid><pubDate>Fri, 12 Jul 2024 23:59:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1w5zZNBw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CRust%25E3%2581%25A8WebAssembly%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%25E3%2580%258D%25E3%2581%25AE%25E9%2595%25B7%25E3%2581%2584%25E9%259F%25B3%25E6%25A5%25BD%25E3%2581%25AE%25E5%2586%258D%25E7%2594%259F%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E5%25AF%25BE%25E5%2587%25A6%25E3%2581%2597%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[Rustのヒープ解析ができるクレート：dhatメモ [blessed.rsシリーズ18]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はdhatについてです。
https://docs.rs/dhat/latest/dhat/

 dhatとは
ヒープ解析ができるクレート

 設定
以下で依存関係を追加。
$ cargo add dhat
また、加えてCargo.tomlに以下の設定をすることが推奨されている。
[profile.release]
debug = 1
https://docs.rs/dhat/latest/dhat/#configuration-profiling-and-testin...]]></description><link>https://zenn.dev/kotabrog/articles/81eb961a64533c</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/81eb961a64533c</guid><pubDate>Fri, 12 Jul 2024 10:55:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kbrvO_EA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2592%25E3%2583%25BC%25E3%2583%2597%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259Adhat%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA18%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[Stable Structures]]></title><description><![CDATA[
 はじめに
分散型クラウド環境『Internet Computer（IC）』で動作するCanisterをRust言語で開発するために参考となる情報をまとめています。
本記事では、Stable Structuresと呼ばれるライブラリを用いてCanister内のデータを管理する方法について解説します。

 Heap MemoryとStable Memory
Canisterのデータ記憶領域にはHeap MemoryとStable Memoryの2種類があります。
Heap Memoryは一般的なアプリケーションの実行環境におけるメモリーに相当するものですので、扱いやすくアクセスコストも低...]]></description><link>https://zenn.dev/halifax/articles/ic_rust_03_stable_memory</link><guid isPermaLink="true">https://zenn.dev/halifax/articles/ic_rust_03_stable_memory</guid><pubDate>Wed, 10 Jul 2024 16:25:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ePRm-U18--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:Stable%2520Structures%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:halifax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNWUxM2Q5YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>halifax</dc:creator></item><item><title><![CDATA[flutter_rust_bridgeのResult型]]></title><description><![CDATA[
 はじめに
flutter_rust_bridgeでRustを呼び出す方法を勉強中です。
今回は、RustでResult型を返すとFlutter側ではどうなるか、を調べました。

Windows 11

Flutter 3.22.2
Dart 3.4.3
rustc 1.76.0




 プロジェクト作成
cargo install flutter_rust_bridge_codegen &amp;&amp; flutter_rust_bridge_codegen create my_app &amp;&amp; cd my_app &amp;&amp; flutter run

&...]]></description><link>https://zenn.dev/thed/articles/1307aa4e6ae064</link><guid isPermaLink="true">https://zenn.dev/thed/articles/1307aa4e6ae064</guid><pubDate>Tue, 09 Jul 2024 15:39:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tOeibxgo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:flutter_rust_bridge%25E3%2581%25AEResult%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:thed%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YVdTMFFzUGhPMEtlekl0ZlZZQlhLbFZybEhKUTBpMkc5a09WX3A9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>thed</dc:creator></item><item><title><![CDATA[RustからC/C++のDLLを呼び出してDLLにアタッチ]]></title><description><![CDATA[
 はじめに
RustからVisual Studio 2022で作成したDLLを呼び出す設定と、Visual Studio 2022からC/C++のDLLにアタッチしてデバッグするまでの手順を記載します。
記事を書こうと思ったのは、デバッグしてみたら思わぬ現象(良い方)に出くわしたのがきっかけです。
Windows 11

Rust

Visual Studio Code(VSCode)


C++

Visual Studio Community 2022 (以下VS2022)



ソース
https://github.com/the-de/win_rust_cdll/tree/ma...]]></description><link>https://zenn.dev/thed/articles/00212a395f338f</link><guid isPermaLink="true">https://zenn.dev/thed/articles/00212a395f338f</guid><pubDate>Mon, 08 Jul 2024 14:35:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fMD0GUV8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%258B%25E3%2582%2589C%252FC%252B%252B%25E3%2581%25AEDLL%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6DLL%25E3%2581%25AB%25E3%2582%25A2%25E3%2582%25BF%25E3%2583%2583%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:thed%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YVdTMFFzUGhPMEtlekl0ZlZZQlhLbFZybEhKUTBpMkc5a09WX3A9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>thed</dc:creator></item><item><title><![CDATA[Rust製タイムゾーン変換ツール「Timezone Translator」をリリースしました 🎉]]></title><description><![CDATA[仕事や趣味でGoogle Cloudを使っている時に，スケジュールや日付範囲をTimezoneをUTCで入力する機会がありました．時間の指定のミスは，間違っていたとしても動いてしまうが故に検知しにくく，できるだけ避けたいです．そこで，CLIでタイムゾーンを変換するツールを作成しました．

 GitHub
モチベーションにつながるので，⭐️ 押していってくださいー！Pull Requestも大歓迎です！
https://github.com/shunsock/timezone_translator

 インストール

 Install (Binary)
sudo curl -L -o /u...]]></description><link>https://zenn.dev/shundeveloper/articles/06ca1e0cda8755</link><guid isPermaLink="true">https://zenn.dev/shundeveloper/articles/06ca1e0cda8755</guid><pubDate>Sun, 07 Jul 2024 16:10:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lo15RocK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25BE%25E3%2583%25BC%25E3%2583%25B3%25E5%25A4%2589%25E6%258F%259B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258CTimezone%2520Translator%25E3%2580%258D%25E3%2582%2592%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shunsock%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3Y2U4NzUxNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shunsock</dc:creator></item><item><title><![CDATA[Rust sea ormでusecase単位でのtransaction処理]]></title><description><![CDATA[こんにちは
最近rustを触り始めました。
個人的にsea-ormの使い心地が良かったので普段やっているusecaseでのtransaction管理についてやっていこうと思い備忘録がてら記事にします
https://github.com/SeaQL/sea-orm
今回の記事ではレイヤードアーキテクチャの構成のusecase単位でのtransactionの処理について書いていきます
一連の操作がすべて成功した時のみ結果を反映したい,汎用的に使えるような構成にしたい場合に有効かなと思います
この記事ではclean architectureに関しての説明は行いません
個人的に好きなのは
ht...]]></description><link>https://zenn.dev/tomoka7060/articles/391f5e68a31a20</link><guid isPermaLink="true">https://zenn.dev/tomoka7060/articles/391f5e68a31a20</guid><pubDate>Sun, 07 Jul 2024 08:48:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q7HlSt3q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520sea%2520orm%25E3%2581%25A7usecase%25E5%258D%2598%25E4%25BD%258D%25E3%2581%25A7%25E3%2581%25AEtransaction%25E5%2587%25A6%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomika7060%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE3NjdmZTc3ODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomika7060</dc:creator></item><item><title><![CDATA[「RustとWebAssemblyによるゲーム開発」のGithubActionsのビルド時間を4分から2分に削ったメモ]]></title><description><![CDATA[
 概要
RustとWebAssemblyによるゲーム開発のデプロイについてGitHub Actionsが古かったのでRustにおけるGitHub Actionsベストプラクティスにならって修正したメモ
ソースコード
デプロイ先

 問題点
本に記載されているままのActionsは最終更新が5年前のコードで、
permissionのエラーなど出ていた*。あと実行に4分ほどかかってストレス。
 actions-rs/install@v0.1.2
...
Error: Resource not accessible by integration

 対応
actions-rsの廃止対応後のソ...]]></description><link>https://zenn.dev/hibo/articles/54376a0246e7bc</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/54376a0246e7bc</guid><pubDate>Sat, 06 Jul 2024 14:46:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c86oplXA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CRust%25E3%2581%25A8WebAssembly%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%25E3%2580%258D%25E3%2581%25AEGithubActions%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2599%2582%25E9%2596%2593%25E3%2582%25924%25E5%2588%2586%25E3%2581%258B%25E3%2582%25892%25E5%2588%2586%25E3%2581%25AB%25E5%2589%258A%25E3%2581%25A3%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[Rust+WebAssemblyでHello Worldを行ったメモ]]></title><description><![CDATA[
 概要
RustとWebAssemblyによるゲーム開発を進めるにあたって、環境構築で少し詰まったのでメモ
ソースコード

 環境

Windows 11 Home 23H2 22631.3810


 実行環境構築

 Rustのインストール
choco install rustup.install -y 
インストール後、cargoが利用できるようにする。
rustup update

 cmakeのインストール
rust入門
Rustのコンパイルに使うのでC++のビルド環境を設定する。
choco visualstudio2022buildtools visualstudio20...]]></description><link>https://zenn.dev/hibo/articles/47cedc2085b0cf</link><guid isPermaLink="true">https://zenn.dev/hibo/articles/47cedc2085b0cf</guid><pubDate>Sat, 06 Jul 2024 14:37:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---IFG2B3P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%252BWebAssembly%25E3%2581%25A7Hello%2520World%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hibo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hibo</dc:creator></item><item><title><![CDATA[AxumでHandlerが自動実装出来ない時]]></title><description><![CDATA[
 この記事の対象者と目標

対象者

Axumを使い始めたばかりの方
Handlerトレイト自動実装ができなくて困っている方


目標
Handlerトレイト自動実装の条件を理解する


 handlerとは
RustでAxumを使っていく上で、ハンドラーは重要な要素の一つです。
Routerと合わせて使用することで、アプリケーションを構築していくことができます。

 Handlerトレイト実装条件と注意点

 実装条件
Handlerトレイトは基本的には自動的に実装されます。
条件は以下のようになります。

非同期関数であること
0～16個のextractorsを引数を取る関数

I...]]></description><link>https://zenn.dev/ryo_nakaya/articles/6b4768cd510466</link><guid isPermaLink="true">https://zenn.dev/ryo_nakaya/articles/6b4768cd510466</guid><pubDate>Sat, 06 Jul 2024 07:38:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VY0O5-XQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axum%25E3%2581%25A7Handler%25E3%2581%258C%25E8%2587%25AA%25E5%258B%2595%25E5%25AE%259F%25E8%25A3%2585%25E5%2587%25BA%25E6%259D%25A5%25E3%2581%25AA%25E3%2581%2584%25E6%2599%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakaryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MDVhNjgyY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakaryo</dc:creator></item><item><title><![CDATA[Rustのフレームグラフ・ジェネレータ：flamegraphメモ [blessed.rsシリーズ17]]]></title><description><![CDATA[
 概要
https://blessed.rs/crates
こちらのリストにあるものを見て書いたメモになります。
今回はflamegraphについてです。
https://github.com/flamegraph-rs/flamegraph#cargo-flamegraph

 flamegraphとは
Rust製のフレームグラフ・ジェネレータ。

 フレームグラフとは？
https://deeeet.com/writing/2016/05/29/go-flame-graph/
こちらが参考になった。
また、flamegraphのリポジトリ内では以下で説明がある。
https://g...]]></description><link>https://zenn.dev/kotabrog/articles/aa56ab2cca57a7</link><guid isPermaLink="true">https://zenn.dev/kotabrog/articles/aa56ab2cca57a7</guid><pubDate>Sat, 06 Jul 2024 02:44:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gsaDIc5n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2583%25BB%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25EF%25BC%259Aflamegraph%25E3%2583%25A1%25E3%2583%25A2%2520%255Bblessed.rs%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA17%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pndUZyRTdIcS13U3dMRHFoT05pbjFKWVZHOVFZcjBEWXQ2SVZ3WWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kota</dc:creator></item><item><title><![CDATA[勉強目的でRustで簡単なMLPの実装]]></title><description><![CDATA[
 はじめに
Deep Learningを触る機会があったので、両方の勉強目的を含めて
Rustで簡単なMLP(Multi Layer Perceptron)の実装をしてみました。
基本的には実装アルゴリズは有名なオライリーのお魚本を参考にしています。

 実装ポイント
layerを一つずつ設定できるようにしています。
有名なPythonライブラリの例でいくと、sklearnよりはPytorchの方に近い感じです。
let mut layers = Vec::new();
let layer1 = Layer::new(input_size, hidden_size, activatio...]]></description><link>https://zenn.dev/nikekukuri/articles/e20fff6fa34e00</link><guid isPermaLink="true">https://zenn.dev/nikekukuri/articles/e20fff6fa34e00</guid><pubDate>Fri, 05 Jul 2024 14:24:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Qxu8KpK9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258B%2589%25E5%25BC%25B7%25E7%259B%25AE%25E7%259A%2584%25E3%2581%25A7Rust%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AAMLP%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nikekukuri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YWVoenY2aE1SWDhSS0xMM2RINDhtclg3UGQxUVhJUTIzYmxuQnE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nikekukuri</dc:creator></item><item><title><![CDATA[Rustで自作言語のインタプリタを作った話]]></title><description><![CDATA[
 リポジトリ
https://github.com/garebareDA/koto

 前提
字句解析、構文解析を理解または記事を読んでいることを前提として話します。
そしてインタプリタに関してはウェブの情報を下に作成した独自のものなのでおそらく本来イメージするものではないと思われます。Rustにメモリを生やすというわけ変わらん実装になってます。

 字句解析器
https://zenn.dev/smartcamp/articles/a498830e010e18

 構文解析器
https://zenn.dev/smartcamp/articles/076b673e2782d6

 イ...]]></description><link>https://zenn.dev/smartcamp/articles/fb1b3ff6798497</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/fb1b3ff6798497</guid><pubDate>Thu, 04 Jul 2024 13:13:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nbuRji_p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Hit&Blowで学ぶ最適化part2　相互情報量]]></title><description><![CDATA[
 はじめに
前回記事では、Hit&amp;Blowをテーマにベイズ推定の考え方を追っていき、ランダムな方法と比べて少ない手数（平均5.27手）で数を当てることに成功しました。
一方で、前回記事の最後で触れたように、単純に現時点で最も答えの確率が高い数字を宣言していくという戦略には改善の余地がありそうです。本記事では、より良いHit&amp;Blowの戦略として、相互情報量について扱います。(いきなり相互情報量が出てきたのはなぜかというと、AtCoder Heulistic Contest 030で使えるらしいからです。）
なお、前回記事と同様に、Hit&amp;Blowについては探索木...]]></description><link>https://zenn.dev/4eta/articles/c00fcfd07e0238</link><guid isPermaLink="true">https://zenn.dev/4eta/articles/c00fcfd07e0238</guid><pubDate>Wed, 03 Jul 2024 14:18:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9ng_HoT6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hit%2526Blow%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596part2%25E3%2580%2580%25E7%259B%25B8%25E4%25BA%2592%25E6%2583%2585%25E5%25A0%25B1%25E9%2587%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:4eta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmQ4NWp1bGRIUURYQmg4RmhpbEtHMldOd0phWmlHWlRJUmM0WTNhRURxTmYxbjlmQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>4eta</dc:creator></item><item><title><![CDATA[2項演算子の優先度と結合性だけで作るパーサ]]></title><description><![CDATA[「Rustで作るプログラミング言語」関連のトピック、第2弾です。
前回は Rustack の話題でしたが、今回は Ruscal の構文解析の中で紹介できなかったトピックです。
Ruscalについては、拙著「Rustで作るプログラミング言語」で作り方を説明していますので、興味のある方は是非買って読んでみてください！（宣伝）
https://www.amazon.co.jp/dp/4297141922
本書では再帰下降パーサを構文解析に使っていますが、再帰下降パーサには複数のマッチする構文の候補を繰り返し適用し、失敗したらバックトラックするという無駄があります。これは現代のCPUでは現実的な...]]></description><link>https://zenn.dev/msakuta/articles/82dce9d55417a3</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/82dce9d55417a3</guid><pubDate>Wed, 03 Jul 2024 12:15:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ITgLNAxy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2%25E9%25A0%2585%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AE%25E5%2584%25AA%25E5%2585%2588%25E5%25BA%25A6%25E3%2581%25A8%25E7%25B5%2590%25E5%2590%2588%25E6%2580%25A7%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Rustで自作言語ために構文解析器を作った話]]></title><description><![CDATA[https://zenn.dev/smartcamp/articles/a498830e010e18
この記事の続きです。
軸解析と構文解析を一緒の記事すると長くなりそうなので分けました。

 リポジトリ
https://github.com/garebareDA/koto

 構文解析器(parser)とは
軸解析の結果から木構造を生成してインタプリタに渡すものです。
例えば下記のトークンの定義とトークン列がありパースを行うと。
const a = 1


constは変数定義のキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列...]]></description><link>https://zenn.dev/smartcamp/articles/076b673e2782d6</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/076b673e2782d6</guid><pubDate>Wed, 03 Jul 2024 01:02:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D26LqDuK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E6%25A7%258B%25E6%2596%2587%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item><item><title><![CDATA[Rustで自作言語ために字句解析器を作った話]]></title><description><![CDATA[
 リポジトリ
https://github.com/garebareDA/koto

 字句解析器(Lexer)とは
文字をトークンの列に変換を行う機構のものです。
たとえば下記のトークンの定義があり、


constはキーワードで1と定義する

aは変数名でキーワード以外は2と定義する

=は演算子で3と定義する

1は数列で4と定義する

const a = 1
上記ののプログラムをトークンの列に変更すると
[1, 2, 3, 4]
このようになります(実際はすべてが数列に置き換わるわけではありません)。
こうすることにより構文解析という次の処理により適した形にすることができます。...]]></description><link>https://zenn.dev/smartcamp/articles/a498830e010e18</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/a498830e010e18</guid><pubDate>Mon, 01 Jul 2024 15:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9xDd6EsL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%25AD%2597%25E5%258F%25A5%25E8%25A7%25A3%25E6%259E%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25AC%25E3%2583%25AC%25E3%2583%2590%25E3%2583%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3ZWYwOTllZjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガレバレ</dc:creator></item></channel></rss>