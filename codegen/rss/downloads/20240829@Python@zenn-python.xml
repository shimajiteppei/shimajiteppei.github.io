<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 29 Aug 2024 11:00:40 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Sparkでヒストグラムを作る]]></title><description><![CDATA[Sparkで処理したデータフレームのデータをヒストグラムにして表示したい。
短いファイルであればto_pandas()しても良いが、
大きなparquetファイルからヒストグラムに集計するにはsparkを使いたい。
今回は、

sparkでヒストグラムデータを作る。
matplotlibでヒストグラムを作る。
Jupyter notebookで表示

の手順でやってみた。

 pysparkでヒストグラムを作る
Spark でヒストグラムを作る関数は用意されていないので自分で用意する。
機械学習用の pyspark.ml.features モジュールにある Bucketizerというのが...]]></description><link>https://zenn.dev/rin_yokoyama/articles/ce61737f4a8018</link><guid isPermaLink="true">https://zenn.dev/rin_yokoyama/articles/ce61737f4a8018</guid><pubDate>Thu, 29 Aug 2024 09:46:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vWWar5PF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spark%25E3%2581%25A7%25E3%2583%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzBYWlVIcEZaNHhRWTM1STNmTFJaTnQ1VVRMaUd5N1l4T05fMVVwNWR6d2VMaWN3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りん</dc:creator></item><item><title><![CDATA[Datadog トレーサーで OpenTelemetry 仕様のスパンを受け取る]]></title><description><![CDATA[
 はじめに
Datadog で分散トレースをしたいとき、Datadog が提供しているトレーサーを使ってアプリを計装できます（Python の場合は、dd-trace-py）。表題や下記ドキュメントにあるように Datadog のトレーサーは OpenTelemetry 仕様のスパンを受け取ることができます。この記事ではこの仕様がどういうことか、どういったケースで役立ちそうかを簡単に解説していきます。
https://docs.datadoghq.com/ja/tracing/trace_collection/custom_instrumentation/otel_instrument...]]></description><link>https://zenn.dev/k6s4i53rx/articles/ddtrace-supports-otel-api</link><guid isPermaLink="true">https://zenn.dev/k6s4i53rx/articles/ddtrace-supports-otel-api</guid><pubDate>Thu, 29 Aug 2024 09:34:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gUf-6opN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Datadog%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2581%25A7%2520OpenTelemetry%2520%25E4%25BB%2595%25E6%25A7%2598%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2591%25E3%2583%25B3%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E5%258F%2596%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%2580%2586%25E4%25BA%2595%2528%25E3%2581%2595%25E3%2581%258B%25E3%2581%2595%25E3%2581%2584%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FDTlBFdTkxSUU2NExXeGFLUm9DeEUxM1FKeWp6NTRVdFlPeW1ZanJuOFQ1PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>逆井(さかさい)</dc:creator></item><item><title><![CDATA[abstract class for unittest]]></title><description><![CDATA[
 背景・目的

書籍「単体テストの考え方・使い方」を読んで、より良いユニットテストのために抽象化すべきパターンを学んだ。
実際に応用してみたので、具体の方法や感想を共有できれば。


 元々知ってた抽象化

同様の振る舞い（機能要件）であるが詳細実装は異なるケースに対する抽象化。
モジュール同士の密結合を避ける（依存性逆転）用途で用いられる。
すでに実務や個人開発で積極的に利用していた。

class Animal(ABC):
    def __init__(self, name):
        self.name = name

    @abstractmethod
    ...]]></description><link>https://zenn.dev/tsugumisys/articles/0ec75dbe2f5d73</link><guid isPermaLink="true">https://zenn.dev/tsugumisys/articles/0ec75dbe2f5d73</guid><pubDate>Thu, 29 Aug 2024 06:26:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4fEuqBKI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:abstract%2520class%2520for%2520unittest%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsugumi-sys%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjZGU4NDM0N2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsugumi-sys</dc:creator></item><item><title><![CDATA[Pythonにおける例外処理のベストプラクティス]]></title><description><![CDATA[
 はじめに
効果的な例外処理コードを書くことは、堅牢でメンテナンスしやすいアプリケーションを作成するために重要です。
以下に、Pythonで例外処理コードを書く際のベストプラクティスを紹介します。

 1. 処理可能な例外のみをキャッチする
特定の例外をキャッチし、広範なexcept句を避けましょう。これにより、予期しており、対応可能な例外のみがキャッチされるようになります。
try:
    # 例外が発生する可能性のあるコード
except ValueError as e:
    print(f"値のエラーが発生しました: {e}")

 2. 無条件のexcept句を避ける
e...]]></description><link>https://zenn.dev/kyonaka/articles/7224c826dff629</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/7224c826dff629</guid><pubDate>Thu, 29 Aug 2024 06:18:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pop8_GeT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E4%25BE%258B%25E5%25A4%2596%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2MTZhOWZhNzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[Python 3 エンジニア認定基礎試験とその学び]]></title><description><![CDATA[
 はじめに
こんにちは。株式会社ペライチのエンジニアの栗原です。
先日、Python 3 認定基礎試験を受験してきましたので、学習方法や僕が学んだPythonの書き方を記事にしたいと思います。
この記事がどなたかのお役に立てれば幸いです。

 Python 3 エンジニア認定基礎試験とは？
まず、Python 3 エンジニア認定基礎試験とは何かというと、一般社団法人Pythonエンジニア育成推進協会が運営しているPythonの文法基礎を問われる資格試験になります。
テストセンターにて受験するCBT方式で出題形式は選択問題です。40問中28問（正答率70%）以上で合格となります。試験時間...]]></description><link>https://zenn.dev/peraichi_blog/articles/01j678cedqmwh3gcr0gbq15kmr</link><guid isPermaLink="true">https://zenn.dev/peraichi_blog/articles/01j678cedqmwh3gcr0gbq15kmr</guid><pubDate>Thu, 29 Aug 2024 02:11:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--55X9pOZf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25203%2520%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E8%25AA%258D%25E5%25AE%259A%25E5%259F%25BA%25E7%25A4%258E%25E8%25A9%25A6%25E9%25A8%2593%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E5%25AD%25A6%25E3%2581%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259A%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2581%2520Tech%2520blog%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxYjViYzkwZTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%259A%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2581%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM1YThiYTg0MmEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ペライチ Tech blog</dc:creator></item><item><title><![CDATA[python uv での Python 環境構築のメモ]]></title><description><![CDATA[uvが良いので今日から暫く使ってみます
https://qiita.com/moritalous/items/569e0910413e0835520c
ありがとうございます.
普段は (mini)conda で conda activate で環境切り替え, python -m pip でパッケージインストールする運用していますが, uv を試してみます.

 手順
他のサイトでいろいろ解説されているので割愛します.
とりあえずは
$ uv venv -p &lt;PYTHON_VERSION&gt;
で Python version 指定して仮想環境つくり,
source .venv/...]]></description><link>https://zenn.dev/syoyo/articles/a806a45c0ab4b9</link><guid isPermaLink="true">https://zenn.dev/syoyo/articles/a806a45c0ab4b9</guid><pubDate>Wed, 28 Aug 2024 20:48:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y5qJmNoE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:python%2520uv%2520%25E3%2581%25A7%25E3%2581%25AE%2520Python%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:syoyo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiZTYxMTY5ZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>syoyo</dc:creator></item><item><title><![CDATA[HTMLをJSONに変換する方法]]></title><description><![CDATA[
 やること
HTMLからJSONへの変換を自動化する

 前提
インデックスを作成する方法は主にインデクサーを使うかPythonでAzure SDKを使うかの２パターンあると思います。後者の場合はJSON形式のデータが必要となるので（ただしLangChainならその限りではない）、HTMLを簡単にJSONに変換したいというのが主旨です。
今回はサンプルとして、Pythonの公式ドキュメントをJSONに変換してみたいと思います。
https://docs.python.org/ja/3/tutorial/controlflow.html

 依存ライブラリ
pip install bea...]]></description><link>https://zenn.dev/headwaters/articles/d5c0e43a179f9b</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/d5c0e43a179f9b</guid><pubDate>Wed, 28 Aug 2024 08:03:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sufv1aYk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTML%25E3%2582%2592JSON%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:akihiro%2520nakamura%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5MjU4ZWEwY2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akihiro nakamura</dc:creator></item><item><title><![CDATA[キーボードの配列と最適化問題への入門（その2: LLMでひらがなデータの準備）]]></title><description><![CDATA[前回の記事の続きです。この記事だけでも一つの独立した話題になっています。
https://zenn.dev/saka1/articles/83e293b6c5e93e
前回の記事のレイアウト最適化は、あくまで英文を対象にしていました。次の発展として、ローマ字入力による日本語入力について検討したいと考えました。漢字変換の部分は取り扱わないことにすると、ひらがなに対するキー入力の系列を考えることになります。
英文と日本語では違いがいくつかありますが、日本語の方が考慮すべき点が多く準備が大変です。

データセットの問題: 何を使うべきなのだろうか？
ローマ字入力の多様性: ローマ字入力はひらが...]]></description><link>https://zenn.dev/saka1/articles/b9c95f5a414a76</link><guid isPermaLink="true">https://zenn.dev/saka1/articles/b9c95f5a414a76</guid><pubDate>Wed, 28 Aug 2024 07:33:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fICgfU0D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E9%2585%258D%25E5%2588%2597%25E3%2581%25A8%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25B8%25E3%2581%25AE%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2588%25E3%2581%259D%25E3%2581%25AE2%253A%2520LLM%25E3%2581%25A7%25E3%2581%25B2%25E3%2582%2589%25E3%2581%258C%25E3%2581%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E6%25BA%2596%25E5%2582%2599%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:saka1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0OGU0Njk0ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saka1</dc:creator></item><item><title><![CDATA[Spark を使った実験データ解析]]></title><description><![CDATA[これまでC/C++でCERN ROOTを使って実験データの解析をしてきた筆者が、Sparkで解析をやってみてよく行う操作の例をいくつか挙げてみる
全体的にSQL関数を上手く使えるとROOTでは面倒だった操作がとても楽にできることが分かった。
Sparkの設定については過去の記事を参照


 検出器のキャリブレーション
以前の記事でも使ったtest.parquetファイルには
&gt;&gt;&gt; df = spark.read.parquet("hdfs:///test/test.parquet")
&gt;&gt;&gt; df.show(10)
+---+------------...]]></description><link>https://zenn.dev/rin_yokoyama/articles/7ac803db788cf1</link><guid isPermaLink="true">https://zenn.dev/rin_yokoyama/articles/7ac803db788cf1</guid><pubDate>Wed, 28 Aug 2024 04:13:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--J56-quas--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spark%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25AE%259F%25E9%25A8%2593%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E8%25A7%25A3%25E6%259E%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzBYWlVIcEZaNHhRWTM1STNmTFJaTnQ1VVRMaUd5N1l4T05fMVVwNWR6d2VMaWN3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りん</dc:creator></item><item><title><![CDATA[uv から始まる Python 開発環境構築]]></title><description><![CDATA[
 0. はじめに
株式会社ディー・エヌ・エーに入社し，MLOps エンジニアをやっている @a5chin です．

 0.1. 背景
2024/08/20 に Astral 社から以下のブログが発表されました．
Python のランタイム・パッケージングを uv 一つで置き換えることができるという発表でした．

Today, we're announcing a series of features that extend uv beyond a pip alternative, and into an end-to-end solution for managing Python p...]]></description><link>https://zenn.dev/dena/articles/python_env_with_uv</link><guid isPermaLink="true">https://zenn.dev/dena/articles/python_env_with_uv</guid><pubDate>Wed, 28 Aug 2024 03:20:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dujfEY8C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:uv%2520%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2581%25BE%25E3%2582%258B%2520Python%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:a5chin%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ViMjg2MTZiZGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DeNA%2520Engineers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dBNXBkb2hrNGRoWFUzQ0ZXYmNhNHRBZktpTy1xcE5vdUtDRmtBeWc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>a5chin</dc:creator></item><item><title><![CDATA[Zenn記事をスクレイピングしてみる - Google Colabで]]></title><description><![CDATA[Google Colabでスクレイピングを試してみました。
Pythonだと「BeautifulSoup」を使うと良く情報がとれるっぽい。
import requests
from bs4 import BeautifulSoup
# スクレイピング対象のURL
url = "https://zenn.dev/acntechjp/articles/ef0f4221965505"
def scrape_zenn_article(url):
    # URLからHTMLコンテンツを取得
    response = requests.get(url)
    response.raise_...]]></description><link>https://zenn.dev/acntechjp/articles/143f7ce9f21fa3</link><guid isPermaLink="true">https://zenn.dev/acntechjp/articles/143f7ce9f21fa3</guid><pubDate>Tue, 27 Aug 2024 22:30:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bfZZ4pYj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E8%25A8%2598%25E4%25BA%258B%25E3%2582%2592%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2520-%2520Google%2520Colab%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Masanori%2520Yoshida%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2ZDA4MDY5ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Accenture%2520Japan%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MzkwNDBmYjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masanori Yoshida</dc:creator></item><item><title><![CDATA[AWS LambdaをChaliceとhatchとpytestでテストする]]></title><description><![CDATA[この記事はAWS Lambdaの品質を高めるために、pytestでテストを実施し、Chaliceとhatchでまとめていきます。

Chaliceはflask APIを描くノリでLambdaを書いて、デプロイすることができるライブラリです。
hatchはpyproject.tomlを使ったPythonプロジェクト管理を担います。
hatchにより Python UnitTestを使っても、pytestを使っても、hatch testのコマンドでテストを実行することができたり、hatch run *** で任意のコマンドを実行することができるようになるので、Pythonプロジェクトの暗黙知...]]></description><link>https://zenn.dev/tk_hamaguchi/articles/b631a6b9f1fc05</link><guid isPermaLink="true">https://zenn.dev/tk_hamaguchi/articles/b631a6b9f1fc05</guid><pubDate>Tue, 27 Aug 2024 16:41:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KBCUF8AI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520Lambda%25E3%2582%2592Chalice%25E3%2581%25A8hatch%25E3%2581%25A8pytest%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tk_hamaguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lIb3g3cVdUTDcyQ25MTHFwOVA5Z2lYeW83SGtFdlZoMy11c09BWEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tk_hamaguchi</dc:creator></item><item><title><![CDATA[pythonのlist内包表記の使い方]]></title><description><![CDATA[
 python list内包表記の使い方
リスト内包表記を使うとコードが短くなるだけでなく実行効率も上がる
ということでその使い方
使いどころは、
あるシーケンスや iterableのそれぞれの要素に対してある操作を行った結果を要素にしたリストを作ったり、ある条件を満たす要素だけからなる部分シーケンスを作成する
ところ

 簡単な例
    # 0から9のリストを作る
    numbers = []

    for x in range(10):
        numbers.append(x)

    # numbers
    # [0, 1, 2, 3, 4, 5, 6,...]]></description><link>https://zenn.dev/ryy_d/articles/f6f4971fc328a6</link><guid isPermaLink="true">https://zenn.dev/ryy_d/articles/f6f4971fc328a6</guid><pubDate>Tue, 27 Aug 2024 13:26:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QGb2x_89--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:python%25E3%2581%25AElist%25E5%2586%2585%25E5%258C%2585%25E8%25A1%25A8%25E8%25A8%2598%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ryy_d%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS1FJT2ZlQ0RWaHpwTVlwVnRhVjlZcG9QX2UteVcwSk1wR1QxWlgyTUVQdVpmdW81eWo9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryy_d</dc:creator></item><item><title><![CDATA[Apache Sparkでデータフレームの解析する環境を整える]]></title><description><![CDATA[
 Apache Spark
Apache Spark は大規模データ処理のための分散フレームワークなので、複数のマシンを使って並列処理をさせることができる。Sparkを使えばデータフレームの解析を簡単に分散処理させることができる。また、Apache Kafka などのデータソースと連携できる、機械学習ライブラリが使える、AWS(Amazon Web Service)などのクラウドコンピューティングサービス上で使えるなど様々な拡張性がある。また、Scala, Java, Python, SQLなどを使って処理を記述することができる。

 Sparkをとりあえずローカルにインストールする
...]]></description><link>https://zenn.dev/rin_yokoyama/articles/148d0012ff632a</link><guid isPermaLink="true">https://zenn.dev/rin_yokoyama/articles/148d0012ff632a</guid><pubDate>Tue, 27 Aug 2024 07:57:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k80IikiY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Apache%2520Spark%25E3%2581%25A7%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%2599%25E3%2582%258B%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzBYWlVIcEZaNHhRWTM1STNmTFJaTnQ1VVRMaUd5N1l4T05fMVVwNWR6d2VMaWN3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りん</dc:creator></item><item><title><![CDATA[Pydanticではミュータブルでもdefault, default_factoryのどっちでもよさそう]]></title><description><![CDATA[
 結論
pydanticではdefaultもdefault_factoryも同等の結果を返却しそう。

 始めに
小ネタ記事。Pythonではデフォルト引数にミュータブルな値を指定したうえで、ミュータブルな操作を行うと、同じインスタンスを共有してしまいます。
def default_param(param: str, result:List[str]=[]) -&gt; List[str]:
    result.append(param)
    return result

_ = default_param("1")
result = default_param("2")

pr...]]></description><link>https://zenn.dev/kirimaru/articles/6648257e51831d</link><guid isPermaLink="true">https://zenn.dev/kirimaru/articles/6648257e51831d</guid><pubDate>Tue, 27 Aug 2024 03:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eB8msTEC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pydantic%25E3%2581%25A7%25E3%2581%25AF%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2596%25E3%2583%25AB%25E3%2581%25A7%25E3%2582%2582default%252C%2520default_factory%25E3%2581%25AE%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A1%25E3%2581%25A7%25E3%2582%2582%25E3%2582%2588%25E3%2581%2595%25E3%2581%259D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%258A%25E4%25B8%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きり丸</dc:creator></item><item><title><![CDATA[GUIE（Google Universal Image Embedding）の学習済みモデルを使用して類似画像検索を行う]]></title><description><![CDATA[
 概要
GUIE（Google Universal Image Embedding）の学習済みモデルを使用して類似画像検索を行うサンプルプログラムを作成しました。以下からノートブックにアクセスいただけます。
https://colab.research.google.com/github/nakamura196/000_tools/blob/main/guie_sample.ipynb

 参考
以下のノートブックの出力ファイルであるモデルを利用しています。
https://www.kaggle.com/code/francischen1991/tf-baseline-v2-submi...]]></description><link>https://zenn.dev/nakamura196/articles/ebf7d3923df9df</link><guid isPermaLink="true">https://zenn.dev/nakamura196/articles/ebf7d3923df9df</guid><pubDate>Mon, 26 Aug 2024 23:28:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WDsRWvxo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GUIE%25EF%25BC%2588Google%2520Universal%2520Image%2520Embedding%25EF%25BC%2589%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E6%25B8%2588%25E3%2581%25BF%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E9%25A1%259E%25E4%25BC%25BC%25E7%2594%25BB%25E5%2583%258F%25E6%25A4%259C%25E7%25B4%25A2%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakamura196%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pkd3BpX1gzTWIzV3VqTnVnV2tPTlJlU3VsNFNTN1BNMWlPQm9LRm5JPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakamura196</dc:creator></item><item><title><![CDATA[JavaScript で Python の range みたいなやつ]]></title><description><![CDATA[
 主題
JavaScript には Python の range みたいなやつが標準で存在しない。Python で以下のように書けるコードは

Python
print(list(map(lambda x: x * 2, range(5))))
# [0, 2, 4, 6, 8]

JavaScript で愚直に書くと、以下のようになってしまう。

JavaScript
const start = 0;
const stop = 5;
const step = 1;
const length = Math.floor((stop - start) / step);
const a = ...]]></description><link>https://zenn.dev/paalon/articles/d59819b8e786e9</link><guid isPermaLink="true">https://zenn.dev/paalon/articles/d59819b8e786e9</guid><pubDate>Mon, 26 Aug 2024 12:53:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JJYfI5FS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%25E3%2581%25A7%2520Python%2520%25E3%2581%25AE%2520range%2520%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2582%2584%25E3%2581%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Paalon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4ZWViZDI3YTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Paalon</dc:creator></item><item><title><![CDATA[時系列の外れ値検出【季節分解+Sliding Window】]]></title><description><![CDATA[
 これはなに？
時系列データの外れ値検出として、季節分解とTime Sliding Windowを組み合わせた手法を試してみました。背景として、飲食店で開催されるイベントやプロモーション日を、売上データから見つけることはできないか、というところで試してみました。

 季節分解
季節分解はいつかの記事でも書いたのですが、時系列データを、以下の3成分に分けることです。

季節成分
時系列データの季節性を表す成分
トレンド成分
時系列データの長期的な傾向を表す成分
残差成分
上記2成分で表せられなかった成分、ノイズや外れ値(イベント等も含む)

今回、季節分解をおこなった結果の残差成分は、元...]]></description><link>https://zenn.dev/goals_techblog/articles/5b703b569985eb</link><guid isPermaLink="true">https://zenn.dev/goals_techblog/articles/5b703b569985eb</guid><pubDate>Mon, 26 Aug 2024 08:32:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4x8099ER--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%25E3%2581%25AE%25E5%25A4%2596%25E3%2582%258C%25E5%2580%25A4%25E6%25A4%259C%25E5%2587%25BA%25E3%2580%2590%25E5%25AD%25A3%25E7%25AF%2580%25E5%2588%2586%25E8%25A7%25A3%252BSliding%2520Window%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ryongyong%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0ZmMzNjliMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Goals%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzMTlkMjgyOTIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryongyong</dc:creator></item><item><title><![CDATA[[Next.js]NoteのRSSフィードを活用してブログ一覧を表示する方法]]></title><description><![CDATA[
 はじめに
今回は、Next.jsのAppルーターとRSSフィードを利用して、Noteの記事一覧をWebサイトに表示する方法を紹介します。
RSSフィードから記事情報を取得し、ブログセクションにサムネイル付きで表示するまでの流れを見ていきます。

 目次

そもそもRSSフィードとは何か？

RSSフィードとスクレイピングの違い

スクレイピングとは？
RSSフィードとの違い



RSSフィードのメリットとデメリット

メリット
デメリット


今回の実装目標
手順1: RSSフィードを解析するための準備
手順2: RSSフィードの解析用APIを作成
手順3: フロントエンドでブログ...]]></description><link>https://zenn.dev/haruki1009/articles/c05617a1b224d2</link><guid isPermaLink="true">https://zenn.dev/haruki1009/articles/c05617a1b224d2</guid><pubDate>Mon, 26 Aug 2024 05:39:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a43UZuZQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNext.js%255DNote%25E3%2581%25AERSS%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E4%25B8%2580%25E8%25A6%25A7%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Haruki%2520Inoue%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5MGI2YjhmZWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Haruki Inoue</dc:creator></item><item><title><![CDATA[自作でintでenumを継承しなくても、IntEnumが標準化されてた]]></title><description><![CDATA[
 始めに
過去にPythonのenumはint等のプリミティブ型を継承すると便利という記事を投稿していました。
その後、Python3.11にてIntEnumやStrEnumが標準化されていることを知ったので共有します。

 環境

Python

3.12.4




 実装
intEnumの使用方法は次のとおりです。
from enum import IntEnum

class IntInheritEnum(IntEnum):
    ID = 1


# 列挙型ではなく、intとして振舞うため1にアクセスできる
IntInheritEnum.ID

# 本来のアクセス方法
In...]]></description><link>https://zenn.dev/kirimaru/articles/50cacb8efcaee2</link><guid isPermaLink="true">https://zenn.dev/kirimaru/articles/50cacb8efcaee2</guid><pubDate>Mon, 26 Aug 2024 03:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rbeAJ9CZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%25A7int%25E3%2581%25A7enum%25E3%2582%2592%25E7%25B6%2599%25E6%2589%25BF%25E3%2581%2597%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E3%2582%2582%25E3%2580%2581IntEnum%25E3%2581%258C%25E6%25A8%2599%25E6%25BA%2596%25E5%258C%2596%25E3%2581%2595%25E3%2582%258C%25E3%2581%25A6%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%258A%25E4%25B8%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きり丸</dc:creator></item></channel></rss>