<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/01c7f20365.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 09 Jul 2024 00:30:08 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[docker compose での環境変数切り替えは .env ファイルではなく environment に直接記述した方が分かりやすいんじ]]></title><description><![CDATA[
 docker compose  の例
次のように書いておけば、何かと使いやすい気がする


XXX_ENV=yeah docker compose up のようにコマンドレベルで環境変数指定が出来る
local (ホスト端末) で 環境変数指定なしで docker compose up した場合の固定値も指定できる

version: '3.8'
services:
  xxx_service:
    ...
    environment:
      # docker compose up 実行時に環境変数指定できるもの
      # ブレースの中は ${localで指定可能...]]></description><link>https://zenn.dev/yumainaura/articles/qiita-2024-07-08t11_51_17-09_00</link><guid isPermaLink="true">https://zenn.dev/yumainaura/articles/qiita-2024-07-08t11_51_17-09_00</guid><pubDate>Mon, 08 Jul 2024 14:54:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pKiBEKRr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%2520compose%2520%25E3%2581%25A7%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2581%25AF%2520.env%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AF%25E3%2581%25AA%25E3%2581%258F%2520environment%2520%25E3%2581%25AB%25E7%259B%25B4%25E6%258E%25A5%25E8%25A8%2598...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A8%25B2%25E6%25B5%25A6%25E6%2582%25A0%25E9%25A6%25AC%2520%2528%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2586%25E3%2582%2589%25E3%2582%2586%25E3%2581%2586%25E3%2581%25BE%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BPSm80MUYydFUxV05wb0owWGNCOTBiUGp1MVdxUmtEWjduWmRhSTlZPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>稲浦悠馬 (いなうらゆうま)</dc:creator></item><item><title><![CDATA[Dockerネットワークとは？]]></title><description><![CDATA[Dockerで使用されるネットワークのこと。
composeファイルでネットワークの設定がありdockerを立ち上げた際にエラーが発生したので、調べてみました。

 デフォルトネットワーク
Dockerをインストールした時に三つのDocker Networkがインストールされる。

 Noneネットワークについて
ネットワーク接続を必要としないコンテナを作成する場合に使用。

 Host
Hostネットワークは、Dockerホストと同じネットワークにスタックするドライバでDockerホストマシンと同じネットワークインターフェース、IPアドレスを持つ。

 Bridge
Linux bri...]]></description><link>https://zenn.dev/yukiyuki1126/articles/a9ff359b846e19</link><guid isPermaLink="true">https://zenn.dev/yukiyuki1126/articles/a9ff359b846e19</guid><pubDate>Mon, 08 Jul 2024 11:52:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--T9cgqKJm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukiyuki1126%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeFhfcjVVM3JqUjJ0WHRwTndZM20wM2J0ejdCSXc0dGcxMUFOcXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukiyuki1126</dc:creator></item><item><title><![CDATA[Docker + Laravel でアプリケーションログを Docker logs に出力する]]></title><description><![CDATA[
 環境

Docker (Nginxの公式イメージ nginx:bookworm)
PHP-FPM (PHP8.3)

Docker compose は未使用
Nginx イメージに直接 apt install した


Laravel(11.x)


 何もしないとどうなるか？

Webアプリに接続すると、Docker logs はアクセスログを出力する

多分 nginx の access_log


Webアプリ(Laravel)内で logger('debug') や Log::notice('notice') を実行しても、Docker logs には何も出力されない


 ...]]></description><link>https://zenn.dev/301/articles/ce2e1834e0c62c</link><guid isPermaLink="true">https://zenn.dev/301/articles/ce2e1834e0c62c</guid><pubDate>Mon, 08 Jul 2024 11:30:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uZtyhruR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%252B%2520Laravel%2520%25E3%2581%25A7%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592%2520Docker%2520logs%2520%25E3%2581%25AB%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2523301%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZTY3elMtajUtMm1rUnhXQjdtYVIxV3dGUHFvUjJaVG5LaGFLdUpWQ0FKQkxrPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>#301</dc:creator></item><item><title><![CDATA[Laravel Sail ( Docker compose ) で作った phpmyadmin のアップロード制限の上限をあげたい！]]></title><description><![CDATA[
 はじめに
こんにちは！この記事では記事のタイトル通りLaravel sail、というかDocker composeでphpmyadminのイメージを使った場合にデータをインポートしようとしたが、phpのupload limitのせいでデータをインポートすることができなかった時に、その上限を上げる方法をメモしておきます！

 対象読者
Dockerでphpmyadminのイメージを使って構築したphpmyadminでupload limitのエラーが出てしまった方。

 結論
docker-compose.ymlのphpmyadminのenvironmentにMEMORY_LIMIT、...]]></description><link>https://zenn.dev/loc_m1/articles/034a9032999a29</link><guid isPermaLink="true">https://zenn.dev/loc_m1/articles/034a9032999a29</guid><pubDate>Mon, 08 Jul 2024 05:45:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4_0KL0_A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Laravel%2520Sail%2520%2528%2520Docker%2520compose%2520%2529%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2520phpmyadmin%2520%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E5%2588%25B6%25E9%2599%2590...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Loc%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNclJ0ZGc2b3F3eWwwUHRGb0gzSXJmcjI2eUdaUEZBU3Y1TkEzckE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Loc</dc:creator></item><item><title><![CDATA[NestJS + Prisma + Docker + EC2 + GitHub Actionsで作るモダンなCI/CDパイプライン]]></title><description><![CDATA[
 1. はじめに
本記事では、NestJS、Prisma、Docker、Amazon EC2、GitHub Actions を使用して、CI/CD パイプラインを構築する方法を紹介します。初めてのデプロイということで問題アリアリだと思いますがどうぞ大目に見てください。

 対象読者

NestJS と Prisma を使用したバックエンド開発者
Docker コンテナ化に興味がある開発者
AWS EC2 でのデプロイを検討している方
GitHub Actions を用いた CI/CD 構築を学びたい方


 2. 環境設定

 2.1 EC2 インスタンスの準備
まず、適切な EC2 ...]]></description><link>https://zenn.dev/dw3624/articles/4f4c86def230ed</link><guid isPermaLink="true">https://zenn.dev/dw3624/articles/4f4c86def230ed</guid><pubDate>Mon, 08 Jul 2024 02:27:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DqvDseDx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:NestJS%2520%252B%2520Prisma%2520%252B%2520Docker%2520%252B%2520EC2%2520%252B%2520GitHub%2520Actions%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%25A2%25E3%2583%2580%25E3%2583%25B3%25E3%2581%25AACI%252F...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2527_%2527%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YXdNT2N3T04tOWRGNWNtQnY4MEo0ZWk2M1hHaDBMNDdiQVQwMEVzUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>&apos;_&apos;</dc:creator></item><item><title><![CDATA[WSL上のSSH鍵認証永続をSSH-AgentからKeychainに]]></title><description><![CDATA[
 シェル変えたらキーパス打つのがちょっと
今更感あるけど、忘備録的に。
AWSでの開発環境でAWSインスタンスにログインして、
そこからGithubに繋ぐ的な状態が発生すると、
SSH秘密鍵をどうするのかが問題になる。
インスタンス上に秘密鍵を置くって手もなくはないが。
(･ω･) 秘密にしときたい
そこでSSH-Agentをローカル環境に常駐させるという方法があるが、
設定が面倒なうえにシェル変えたらパスフレーズ再度打ち込みなんてことも。
(;´･ω･) もうちょっとどうにかならんかな。
これを解決するにはKeychainを使う方法がある。
AppleさんところのやつではなくLinu...]]></description><link>https://zenn.dev/dozo/articles/56772965947fb1</link><guid isPermaLink="true">https://zenn.dev/dozo/articles/56772965947fb1</guid><pubDate>Mon, 08 Jul 2024 00:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SCuo7uui--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WSL%25E4%25B8%258A%25E3%2581%25AESSH%25E9%258D%25B5%25E8%25AA%258D%25E8%25A8%25BC%25E6%25B0%25B8%25E7%25B6%259A%25E3%2582%2592SSH-Agent%25E3%2581%258B%25E3%2582%2589Keychain%25E3%2581%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dozo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dozo</dc:creator></item><item><title><![CDATA[WSL2上のDockerコンテナから音を再生する]]></title><description><![CDATA[
 これはなに
WSL2上のDockerコンテナ内から音を鳴らすときに必要な設定のメモ。

 解決したい問題
何も設定せずにWSL2上のDockerコンテナ内から音を鳴らそうとすると、下記のようなエラーが発生する。
$ aplay /usr/share/sounds/alsa/Front_Center.wav
ALSA lib confmisc.c:855:(parse_card) cannot find card '0'
ALSA lib conf.c:5180:(_snd_config_evaluate) function snd_func_card_inum returned er...]]></description><link>https://zenn.dev/nakurei/articles/sound-in-docker-container-on-wsl2</link><guid isPermaLink="true">https://zenn.dev/nakurei/articles/sound-in-docker-container-on-wsl2</guid><pubDate>Sun, 07 Jul 2024 22:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I714JYPY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WSL2%25E4%25B8%258A%25E3%2581%25AEDocker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%258B%25E3%2582%2589%25E9%259F%25B3%25E3%2582%2592%25E5%2586%258D%25E7%2594%259F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NakuRei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwZjNjZmQ5ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NakuRei</dc:creator></item><item><title><![CDATA[Go で書かれたアプリをマルチプラットフォームイメージにする]]></title><description><![CDATA[
 はじめに
Go を使って書いたアプリをコンテナイメージにすると言うことは割と良くあるのではないかと思う。また、コンテナイメージを作成する場合にそれをマルチプラットフォームイメージにすると言う事も割と良くあるのではないかと思う。
これらが良くある、と言うのはみんな思っているようで、実は公式ドキュメントにもやり方がちょっとだけ書いてある。書いてはあるんだが、公式ドキュメントの記述は golang のベースイメージを使ってるにもかかわらず go によるビルドそのものについては書かれていないし、そもそも英語で書かれているので読む気がかなり削がれる[1]。
と言う訳で、Go で書かれたアプリを...]]></description><link>https://zenn.dev/kariya_mitsuru/articles/93cb7668d2be6d</link><guid isPermaLink="true">https://zenn.dev/kariya_mitsuru/articles/93cb7668d2be6d</guid><pubDate>Sun, 07 Jul 2024 18:35:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vqHxeT4B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258B%25E3%2582%258C%25E3%2581%259F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2583%2597%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258A%25E3%2582%2584%25E3%2581%25BF%25E3%2581%25A4%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かりやみつる</dc:creator></item><item><title><![CDATA[KeycloakのDockerコンテナにヘルスチェックを設定する]]></title><description><![CDATA[
 シチュエーション

KeycloakのDockerイメージでコンテナの状態がHealthyか確認したい
Keycloakをdockerイメージで利用

versionは21.1.2


docker composeを利用


 躓きポイントと調査

 ファーストミート
keycloakのイメージにヘルスチェックが定義されていない

compose.yaml
services:
  app:
    # 省略
    depends_on:
      keycloak:
        condition: service_healty
  keycloak:
    image: ...]]></description><link>https://zenn.dev/yut_kt/articles/41ea4095699ece</link><guid isPermaLink="true">https://zenn.dev/yut_kt/articles/41ea4095699ece</guid><pubDate>Sun, 07 Jul 2024 15:52:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NlEt9nFb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Keycloak%25E3%2581%25AEDocker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AB%25E3%2583%2598%25E3%2583%25AB%25E3%2582%25B9%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yut-kt%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkyYTQxMWIwMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yut-kt</dc:creator></item><item><title><![CDATA[docker処理のフロー]]></title><description><![CDATA[!
いつも忘れてしまうので、イメージしやすいようにシーケンス図をchatGPTで作成。


 docker runを実行して起動までのシーケンス

 docker startを実行して起動までのシーケンス

 docker build実行のシーケンス
]]></description><link>https://zenn.dev/takaz/articles/c2a2ecf16fe7dd</link><guid isPermaLink="true">https://zenn.dev/takaz/articles/c2a2ecf16fe7dd</guid><pubDate>Sun, 07 Jul 2024 14:19:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R56TwJS0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takaz%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dUbGR1ajFsaURESmhXeGFrWUtiaTJycWwtRUdxSlpFeXBEMzJIPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takaz</dc:creator></item><item><title><![CDATA[Dockerfile の ENV と ARG はどっちも環境変数を設定する]]></title><description><![CDATA[
 はじめに
Dockerfile には環境変数を設定するための ENV と言うまんまの名前の命令があるが、実は ARG 命令も環境変数を設定する。
これは割と良く知られた話だと思っていたんだが、世の中の Dockerfile を見ていると実は思ったほど知られていないんじゃないかと思うことが度々あったので、極めて基本的な事ではあるが記事としてまとめておこうと思う。

 ENV と ARG はどっちも環境変数を設定する
論より証拠。まずは ENV で試してみる。Dockerfile はこんな感じ。

Dockerfile.env
FROM alpine
ENV MSG=message
RU...]]></description><link>https://zenn.dev/kariya_mitsuru/articles/5e9237ce1d4b53</link><guid isPermaLink="true">https://zenn.dev/kariya_mitsuru/articles/5e9237ce1d4b53</guid><pubDate>Sun, 07 Jul 2024 02:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h9hoUyBv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%2520%25E3%2581%25AE%2520ENV%2520%25E3%2581%25A8%2520ARG%2520%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2582%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258A%25E3%2582%2584%25E3%2581%25BF%25E3%2581%25A4%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かりやみつる</dc:creator></item><item><title><![CDATA[Testcontainers for NodeJS を Docker in Dokcer環境でRedisやPrismaを試す]]></title><description><![CDATA[
 Testcontainers とは
https://testcontainers.com/

Testcontainersは、統合テストやエンドツーエンドテストのために、データベース、メッセージブローカー、ウェブブラウザなどの軽量で使い捨てのDockerコンテナインスタンスを提供するオープンソースフレームワークです。


 Testcontainers for NodeJS
https://node.testcontainers.org/
Testcontainersは色んな言語に対応しています。今回はその中のNodeJSを試してみたいと思います。

 Docker in Docke...]]></description><link>https://zenn.dev/slowhand/articles/3bc1da7ed5e698</link><guid isPermaLink="true">https://zenn.dev/slowhand/articles/3bc1da7ed5e698</guid><pubDate>Sat, 06 Jul 2024 21:24:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YPrNT8CM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Testcontainers%2520for%2520NodeJS%2520%25E3%2582%2592%2520Docker%2520in%2520Dokcer%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7Redis%25E3%2582%2584Pris...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:slowhand%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwY2YzMGUzMDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>slowhand</dc:creator></item><item><title><![CDATA[アップデートされたWSL2を使用して、WSL2上のDocker-CEは快適になるか]]></title><description><![CDATA[
 はじめに
ライセンス変更の話からずいぶん経ち、Docker Desktop の話題も落ち着いたように見えます。仕事で使っている場合には色々と大変だったと思いますが、今も個人で利用する範囲では Docker Desktop を無料で使えます。
本記事ではDocker Desktopを使わずに、WSL2 (Windows Subsystem for Linux 2)を使用して環境を作ります。何番煎じだろうかという話でもありますが、WSL2に入った新機能などで従来よりも使い勝手がよくなったのかを確認してみました。個人的に、当時の制約から解放されて便利になったのではという期待がありました

...]]></description><link>https://zenn.dev/techmadot/articles/wsl2-docker-env-2024</link><guid isPermaLink="true">https://zenn.dev/techmadot/articles/wsl2-docker-env-2024</guid><pubDate>Sat, 06 Jul 2024 07:40:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TYm1H-Yg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2595%25E3%2582%258C%25E3%2581%259FWSL2%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581WSL2%25E4%25B8%258A%25E3%2581%25AEDocker-CE%25E3%2581%25AF%25E5%25BF%25AB%25E9%2581%25A9%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2581%25A3%25E3%2581%258F%25E3%2581%25BE.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlpxVEo0c3J4M01zWWVnbzM3V3VBMEN5bmRrTkpOMGk4MExIeFk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てっくま.</dc:creator></item><item><title><![CDATA[Dockerで開発したGoアプリケーションをRenderでデプロイする]]></title><description><![CDATA[
 はじめに
こんにちは！mizukoです！
先日PaPutという個人開発のサービスをβ版としてリリースしました！
バックエンドのリリースにRenderを利用しているのですが、意外とGo&amp;Dockerのruntimeでデプロイしている情報が少なかったので、せっかくならアウトプットしていきたいと思います！
PaPutについてはぜひこちらをご覧いただけますと幸いです🤗

 この記事で扱わないこと

Renderの基本的な使い方

Blueprintでのデプロイ方法など




 render.yaml
いきなり結論ですが、以下Blueprintの構成になります。
version: "...]]></description><link>https://zenn.dev/mizuko_dev/articles/b44ccf3b088c40</link><guid isPermaLink="true">https://zenn.dev/mizuko_dev/articles/b44ccf3b088c40</guid><pubDate>Sat, 06 Jul 2024 05:00:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xM_KzHDy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%259FGo%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592Render%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljOGMwOTFlZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuko</dc:creator></item><item><title><![CDATA[【初学者向け】Dockerネットワークの基礎]]></title><description><![CDATA[
 はじめに
今回は、Dockerのネットワークについて説明します。
!
もし誤解や間違いがあれば、ぜひコメントなどでご指摘していただけると助かります。


 私の動作環境

Docker Desktop 4.30.0 (149282)
Docker Engine 26.1.1
Docker Compose v2.27.0-desktop.2
MacOS Sonoma 14.5


 Dockerコマンド一覧
Dockerのコマンド一覧は、以下のサイトに記載されています。このサイトは、Docker公式ドキュメントを有志の方々が日本語に翻訳してくれているものです。
https://docs...]]></description><link>https://zenn.dev/joho0724/articles/sankaku0724-newcreate20</link><guid isPermaLink="true">https://zenn.dev/joho0724/articles/sankaku0724-newcreate20</guid><pubDate>Sat, 06 Jul 2024 03:02:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lD2zQEjg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Docker%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2582%2593%25E3%2581%258B%25E3%2581%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JkODI3MDRjMmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さんかく</dc:creator></item><item><title><![CDATA[Linux 使いになりたい人向けの Intel N100 ミニ PC で構築する開発環境（１１）- Docker]]></title><description><![CDATA[
 はじめに
これは、Linux 使いになりたい人向けに Intel N100 ミニ PC を使って開発環境を構築する方法を解説する記事の第１１弾です。第１弾はLinux 使いになりたい人向けの Intel N100 ミニ PC で構築する開発環境（１） - 構築する開発環境について にあり、そこから第２弾へと続いています。そちらからご覧ください。
ここで使用する Intel N100 ミニ PC の仕様は次のものを前提とします。



項目
内容




OS
Windows 11 Pro


CPU
Intel N100


メモリ
16GB


ストレージ
SSD 512 GB

...]]></description><link>https://zenn.dev/hiro345/articles/n100_11_20240630</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/n100_11_20240630</guid><pubDate>Sat, 06 Jul 2024 00:10:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ltTXrKvg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%2520%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E4%25BA%25BA%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AE%2520Intel%2520N100%2520%25E3%2583%259F%25E3%2583%258B%2520PC%2520%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25EF%25BC%2588%25EF%25BC%2591%25EF%25BC%2591%25EF%25BC%2589-%2520Docker%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[M2 MacでビルドしたDockerコンテナをAWS App Runnerにデプロイすると失敗する]]></title><description><![CDATA[
 はじめに
タイトルの通り、Docker化したNode.jsサーバをローカルでビルドし、ECRにプッシュ。その後そのイメージをApp Runnerにデプロイしようとしたところ失敗しました。

 結論
DockerイメージとApp Runnerのプラットフォームでアーキテクチャのズレがあったのが原因でした。
私の使用しているM2 MacbookのCPUアーキテクチャはlinux/arm64で、何も指定せずdocker buildを行うとlinux/arm64でビルドされます。
かたや、App Runnerのアーキテクチャはlinux/amd64にしか対応していないそうです。
このアーキテ...]]></description><link>https://zenn.dev/ymgcst/articles/38ef95fe4ef1bf</link><guid isPermaLink="true">https://zenn.dev/ymgcst/articles/38ef95fe4ef1bf</guid><pubDate>Fri, 05 Jul 2024 16:28:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XCDLMcnz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:M2%2520Mac%25E3%2581%25A7%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%2597%25E3%2581%259FDocker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%2592AWS%2520App%2520Runner%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E5%25A4%25B1%25E6%2595%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2590%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXFYa2EtMG1lSXpvN2t6Zjduc0JmS2V0SktaOUpzZjE1NGRzOUs2bUliZ1RWYT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぐ</dc:creator></item><item><title><![CDATA[LangChain、FastAPI、Next.jsを使用してシンプルなチャットボットを作成する（1回目）]]></title><description><![CDATA[LangChain、FastAPI、Reactを使用してシンプルなチャットボットを作成しながら、APIやReactの実践的な使い方を学びましょう。
この記事では、フロントエンドのUIをNext.jsのApp Routerで構築し、チャットボットのロジックを実行するサーバーをPythonのFastAPIとDockerを使用して構築する方法を詳しく解説します。

 今回作成するアプリ


ソースコード：[ソースコードのURL]

今回作成するアプリは、二つの入力フィールドを持つシンプルなチャットボットです。一つのフィールドにはOpenAIのAPIキーを入力し、もう一つのフィールドにはプロンプ...]]></description><link>https://zenn.dev/onikarubi/articles/4712175afeecd3</link><guid isPermaLink="true">https://zenn.dev/onikarubi/articles/4712175afeecd3</guid><pubDate>Fri, 05 Jul 2024 08:31:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7W_Y73PI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangChain%25E3%2580%2581FastAPI%25E3%2580%2581Next.js%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2583%259C%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25EF%25BC%25881%25E5%259B%259E%25E7%259B%25AE%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:onikarubi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkYTlkNTc3YzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>onikarubi</dc:creator></item><item><title><![CDATA[【Go】環境毎の設定値運用戦略]]></title><description><![CDATA[
 はじめに
こんにちは！mizukoです！
先日PaPutという個人開発のサービスをβ版としてリリースしました！
その際、今後の個人開発ライフのために、基盤作りを行ったのですが、
環境毎の設定値運用の戦略も検討したので、アウトプットしていきたいと思います！
PaPutについてはぜひこちらをご覧いただけますと幸いです🤗

 戦略
環境毎の設定値を運用するにあたり、以下方針で運用していきます。

.envやtomlを使わず、環境変数を利用する
ローカル開発では.envrcを使う
本番環境では、ホスティングサービスやIaaSで環境変数を扱えるサービスを選ぶ
デプロイはGithubと連携し自動...]]></description><link>https://zenn.dev/mizuko_dev/articles/1021ad55cfb4dc</link><guid isPermaLink="true">https://zenn.dev/mizuko_dev/articles/1021ad55cfb4dc</guid><pubDate>Fri, 05 Jul 2024 06:55:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Mo9YsttR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Go%25E3%2580%2591%25E7%2592%25B0%25E5%25A2%2583%25E6%25AF%258E%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E5%2580%25A4%25E9%2581%258B%25E7%2594%25A8%25E6%2588%25A6%25E7%2595%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizuko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljOGMwOTFlZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizuko</dc:creator></item><item><title><![CDATA[Docker: dind]]></title><description><![CDATA[Docker について。
Docker-in-Docker ( dind ) の container 内から Host への接続について残す。毎回、何だっけ？となるため。
泥水をすするような仕事を繰り返すのは避けたい。

 tl;dr


--network="host" コンテナ内でホスト側ネットワーク・スタックを使用する。 [1]



 Create a dind
# example
docker run --name mysql-container-4 --network="host" -e MYSQL_ROOT_PASSWORD=rootpassword -d mysql:la...]]></description><link>https://zenn.dev/dannya/articles/4d6b774a8fb46c</link><guid isPermaLink="true">https://zenn.dev/dannya/articles/4d6b774a8fb46c</guid><pubDate>Fri, 05 Jul 2024 06:33:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zKpApGYD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:Docker%253A%2520dind%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daisuke%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiNDY0NzBmMTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daisuke Yamamoto</dc:creator></item></channel></rss>