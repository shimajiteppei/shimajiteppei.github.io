<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 18 Sep 2025 05:01:13 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[React プロジェクト構成について考えてみた]]></title><description><![CDATA[最近フロントエンドの技術を勉強していて、プロジェクトのフォルダ構成について自分なりに整理してみました。
まだ実務経験は浅く、一人で試行錯誤しながら進めているので「本当にこれでいいのかな？」という不安もあります。もし間違った考え方や実務ではあまりやらないやり方があれば、ぜひコメントで教えていただけると嬉しいです 🙏

 React プロジェクト構成
project-root/
├── public/                    # 静的アセット (アイコン、画像、フォント)
├── src/
│   ├── pages/                 # ルーティングに対応する...]]></description><link>https://zenn.dev/tetsufromtw/articles/2cb553fec5e1f3</link><guid isPermaLink="true">https://zenn.dev/tetsufromtw/articles/2cb553fec5e1f3</guid><pubDate>Thu, 18 Sep 2025 04:14:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--y_CjA6mt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2586%25E3%2583%2584%25E3%2583%2587%25E3%2582%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSW9jcWlMOFlUQ0JHbjlfbnpqaFo2ZmhoekdLb3pMMHlkbUlEdERQRUZvS2tKNEx3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>テツデス</dc:creator></item><item><title><![CDATA[neverthrowで実践する型安全エラーハンドリング]]></title><description><![CDATA[!
タイトルにもあるように本記事はエラーハンドリングに重きを置いています。
neverthrow に関する tips や関数型で記述する良さについてはまた別の機会に紹介するつもりです。


 はじめに
satto workspaceのプロダクトエンジニアをしている 滝口（@s_takiguchi）です。
早速ですが、TypeScriptでエラーハンドリングを行う際、try-catchを使うことが一般的である一方、これには以下のような課題があります。

エラーの型が不明確で、どんなエラーが発生するか関数シグネチャから読み取れない
エラーハンドリングの漏れが実行時まで発見できない
エラーの伝...]]></description><link>https://zenn.dev/satto_workspace/articles/a5fab3c95f9c93</link><guid isPermaLink="true">https://zenn.dev/satto_workspace/articles/a5fab3c95f9c93</guid><pubDate>Thu, 18 Sep 2025 03:06:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S2dV0Sli--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:neverthrow%25E3%2581%25A7%25E5%25AE%259F%25E8%25B7%25B5%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E6%25BB%259D%25E5%258F%25A3%2520%25E7%259F%25A5%25E5%25BF%2597%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZTE1NGYxYTQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25BD%25E3%2583%2595%25E3%2583%2588%25E3%2583%2590%25E3%2583%25B3%25E3%2582%25AF%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE_satto%25E9%2596%258B%25E7%2599%25BA%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzZDZmNWZlODQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>滝口 知志</dc:creator></item><item><title><![CDATA[Redux入門：状態管理の基本と使い方]]></title><description><![CDATA[
 はじめに
Reactでアプリを開発していると、コンポーネント間で状態を共有するのが複雑になるという問題に直面します。
この課題を解決するために登場したのが Redux です。
本記事では、Reduxの基本的な考え方と使い方を解説します。

 Reduxとは
Reduxは JavaScriptアプリケーションの状態管理ライブラリ です。
状態(state)を一元的に管理し、どのコンポーネントからでもアクセス・更新できるようにします。
https://redux.js.org/

 Reduxを使うメリット


状態が一元管理される → どのデータがどこにあるか分かりやすい

動作が明確...]]></description><link>https://zenn.dev/ket8/articles/03d7678cbd5b54</link><guid isPermaLink="true">https://zenn.dev/ket8/articles/03d7678cbd5b54</guid><pubDate>Thu, 18 Sep 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qOiVqMMF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Redux%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:KET8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkZWE4MmFjMWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KET8</dc:creator></item><item><title><![CDATA[プロフィール作成画面の作成]]></title><description><![CDATA[
 はじめに
この記事では、Vue.js + Nuxt.js + Firebase + Vuetifyを使用してプロフィール作成画面を実装する方法を詳しく解説します。ユーザーがニックネーム、年齢、性別を入力し、Firebase Firestoreに保存する機能を構築していきます。

 実装する機能

プロフィール情報の入力フォーム（ニックネーム、年齢、性別）
リアルタイムバリデーション
Firebase Firestoreへのデータ保存
エラーハンドリング
ローディング状態の管理


 技術スタック


フロントエンド: Vue.js 3 + Nuxt.js 3

UI フレームワーク:...]]></description><link>https://zenn.dev/shunsuke_stack/articles/bbfd2ad60eea32</link><guid isPermaLink="true">https://zenn.dev/shunsuke_stack/articles/bbfd2ad60eea32</guid><pubDate>Thu, 18 Sep 2025 02:47:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pDgQ1rqi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E4%25BD%259C%25E6%2588%2590%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakajima.js%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhZmNlYzMzOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakajima.js</dc:creator></item><item><title><![CDATA[React Router(rolldown-vite)とNext.js(turbo-pack)のビルド速度と比較する]]></title><description><![CDATA[
 rolldown-vite とは
rolldown-vite は、Vite に Rust 製のバンドラー Rolldown を統合した実験的パッケージです。React Routerのように Vite ベースのバンドラを使用している環境では、簡単に差し替えを行えます。対して、Next.jsでは Turbopack という Rust ベースのバンドラが使用可能です。それぞれ Rust 製ということもあり、その速度に興味が湧くところですが、ビルド速度を比較した情報を見かけないので、実際にやってみることにしました。

 ビルドに使うリポジトリ
ちょうどマークダウンエディタの作り方を解説する記...]]></description><link>https://zenn.dev/sora_kumo/articles/react-router-next-build-speed</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/react-router-next-build-speed</guid><pubDate>Thu, 18 Sep 2025 02:44:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5-EVBTfC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Router%2528rolldown-vite%2529%25E3%2581%25A8Next.js%2528turbo-pack%2529%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E9%2580%259F%25E5%25BA%25A6%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[技術記事のキャッチアップをPodcastから行うための技術]]></title><description><![CDATA[
 はじめに
みなさんはテクノロジーのキャッチアップはどのように行っていますか？このたび、ラジオ形式で聴くことで日々の技術ニュースをキャッチアップできる機能をこのたび公開しました！

前日のZennやhackernewsなどの人気ニュースを、「Webフロントエンド」「データベース」のように特定の職種やテーマごとに、Podcast形式で視聴することができます！
https://x.com/adsholoko/status/1963377756622000178
現時点では下記のテーマごとにPodcastを生成しております。

Webフロントエンド
Webバックエンド
モバイル開発
セキュリ...]]></description><link>https://zenn.dev/adsholoko/articles/researchly-podcast</link><guid isPermaLink="true">https://zenn.dev/adsholoko/articles/researchly-podcast</guid><pubDate>Thu, 18 Sep 2025 02:18:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KWrEU2Dm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%258A%2580%25E8%25A1%2593%25E8%25A8%2598%25E4%25BA%258B%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2581%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592Podcast%25E3%2581%258B%25E3%2582%2589%25E8%25A1%258C%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shogo%2520Arakawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzYzBkNGI1YjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shogo Arakawa</dc:creator></item><item><title><![CDATA[最高の TypeScript 開発環境を最速で作っていくよ 2025 秋]]></title><description><![CDATA[この記事では、TypeScript の開発環境を最速で整えます。単に動く環境ではなく、最低限必要なツールも一通りそろえていきます。(2025 年秋時点の情報です)

 この記事で作る開発環境について

 この記事のゴール


bun run コマンドで TypeScript ファイルを実行できる

bun repl コマンドで REPL を起動して TypeScript を実行できる

bun tsc --noEmit コマンドで（厳しい）型チェックができる
TypeScript Language Server でコード補完と型チェックができる

bun biome コマンドでフォーマッ...]]></description><link>https://zenn.dev/somnicattus/articles/3c1f3756aec24a</link><guid isPermaLink="true">https://zenn.dev/somnicattus/articles/3c1f3756aec24a</guid><pubDate>Thu, 18 Sep 2025 00:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0nAROl_H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%2580%25E9%25AB%2598%25E3%2581%25AE%2520TypeScript%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%259C%2580%25E9%2580%259F%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2581%258F%25E3%2582%2588%25202025%2520%25E7%25A7%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:somnicattus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiMTUyZWZmZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>somnicattus</dc:creator></item><item><title><![CDATA[TeamsBotでユーザコンテキストを取得する]]></title><description><![CDATA[
 背景
Bot Frameworkを利用したチャットボットやアプリケーションで、ユーザごとのコンテキスト情報（氏名、メールアドレス、所属など）を取得したいケースは多くあります。
本記事では、Bot FrameworkのTurnContextから取得できるaadObjectIdをキーとして、Microsoft Graph APIを用いてユーザごとのコンテキスト情報を取得する方法をまとめます。

 環境



項目
バージョン




OS
Windows11 Pro


ランタイム
Node.js v22.14.0


主要ライブラリ
"@azure/identity"=="4.8.0"...]]></description><link>https://zenn.dev/serio/articles/0e56d8ff3c1df7</link><guid isPermaLink="true">https://zenn.dev/serio/articles/0e56d8ff3c1df7</guid><pubDate>Wed, 17 Sep 2025 23:39:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---rM_NQXN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TeamsBot%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%258F%25E3%2581%2598%25E3%2582%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4OGEyY2UyNGQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25BB%25E3%2583%25AA%25E3%2582%25AA%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くじら</dc:creator></item><item><title><![CDATA[duckdb-wasmで扱うCSVにzodでそれなりのtype-safeで安寧を得るまで]]></title><description><![CDATA[DuckDB-WASMをブラウザで使ってCSVデータを扱う際、色々と困りごとに当たったので、それをまとめていく。
今回クエリビルダーやORMでDuckDBで使えそうな適切なものがなかったので、そのあたりナシの生SQLで扱いつつ、Zodでそれなりに型もついてる状態をゴールとする。
ちなみに今回は駅データ.jpにて配布されているCSVをサンプルに取り扱ったので、サンプルコードもそれに沿った形となっている

 1. CSV読み込みはall_varchar=trueで全部文字列にしてしまう
DuckDBでread_csvでCSVを読み込む際、通常はそれぞれのフィールドを読み取って自動で型を決定し...]]></description><link>https://zenn.dev/terrierscript/articles/2025-09-17-duckdb-wasm-csv</link><guid isPermaLink="true">https://zenn.dev/terrierscript/articles/2025-09-17-duckdb-wasm-csv</guid><pubDate>Wed, 17 Sep 2025 06:58:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jbekxqOT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:duckdb-wasm%25E3%2581%25A7%25E6%2589%25B1%25E3%2581%2586CSV%25E3%2581%25ABzod%25E3%2581%25A7%25E3%2581%259D%25E3%2582%258C%25E3%2581%25AA%25E3%2582%258A%25E3%2581%25AEtype-safe%25E3%2581%25A7%25E5%25AE%2589%25E5%25AF%25A7%25E3%2582%2592%25E5%25BE%2597%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:terrierscript%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhNzJjMjE0Y2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>terrierscript</dc:creator></item><item><title><![CDATA[モダンフレームワークSvelteKitでのコロケーションができるようになったので紹介する]]></title><description><![CDATA[こんにちは、株式会社エクスプラザの@_mkazutakaです。
今回は、SvelteKitを使ったコロケーションの実現方法について紹介します。

 背景
2025年の8月にSvelteKit v2.27.でRemoteFunctionがリリースされました。
https://svelte.dev/blog/whats-new-in-svelte-august-2025
https://github.com/sveltejs/kit/releases/tag/%40sveltejs%2Fkit%402.27.0
これは簡単にいうと、あらゆるコンポーネントからサーバサイド上の関数を呼ぶことがで...]]></description><link>https://zenn.dev/explaza/articles/ccdce0c1cefe13</link><guid isPermaLink="true">https://zenn.dev/explaza/articles/ccdce0c1cefe13</guid><pubDate>Wed, 17 Sep 2025 03:02:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--v7p5jF1q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A2%25E3%2583%2580%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AFSvelteKit%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25AD%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E7%25B4%25B9%25E4%25BB%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:_mkazutaka%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzOWQzZGM0MGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A8%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B6%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhN2E3MjYzNDkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>_mkazutaka</dc:creator></item><item><title><![CDATA[React 用 Markdown エディタと unified の Plugin 作成]]></title><description><![CDATA[
 React での Markdown エディタの実装
テキストエディット部分には Monaco エディタ、Markdown パーサには unified を使用します。その際に必要になる Plugin の作り方も合わせて紹介します。
※ 今回の記事で使用しているソースコード

Next.js 板

https://github.com/SoraKumo001/next-unified

React Router 板

https://github.com/SoraKumo001/react-router-markdown

動作イメージ



 unified を扱う上で知っておいたほう...]]></description><link>https://zenn.dev/sora_kumo/articles/markdown-react</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/markdown-react</guid><pubDate>Wed, 17 Sep 2025 03:00:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LEEIdzIg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E7%2594%25A8%2520Markdown%2520%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2581%25A8%2520unified%2520%25E3%2581%25AE%2520Plugin%2520%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[Axiosの概要]]></title><description><![CDATA[
 Axiosとは
AxiosはTypeScriptやJavaScriptで使えるHTTPクライアントライブラリです。
PromiseベースのAPIを提供しており非同期処理が扱いやすく、JSONデータの自動変換も行ってくれるため、レスポンスデータの処理がしやすくなっています。
https://axios-http.com/ja/

 インストール方法
まずはAxiosをプロジェクトにインストールします。
npm install axios
# または
yarn add axios

 基本的な使い方
Axiosを使うと、シンプルにHTTPリクエストを送ることができます。

 GETリクエ...]]></description><link>https://zenn.dev/ket8/articles/7b8fabaecf2c23</link><guid isPermaLink="true">https://zenn.dev/ket8/articles/7b8fabaecf2c23</guid><pubDate>Wed, 17 Sep 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xLuwpyLw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Axios%25E3%2581%25AE%25E6%25A6%2582%25E8%25A6%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:KET8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkZWE4MmFjMWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KET8</dc:creator></item><item><title><![CDATA[JSの弱点から学ぶTypeScriptの安全性]]></title><description><![CDATA[
 はじめに
現在フロントエンド開発のインターンでReact+TypeScriptでの開発を行っています。
「TypeScript」さえ書ければそれでいいと思っていませんか？
JavaScript を学ぶと、その柔軟さの裏にある弱点がわかり、コンパイル元の言語であるTypeScriptの設計がなぜこうなっているのかがわかります。
ここでは、クラス設計を中心に両者の違いを簡潔にまとめます。
要点：JavaScriptでのクラス内の変数は定義の仕方によっては安全でない(バグの温床になる)。TypeScriptはどのような方法を取っているかがわかる。
2025/9/17 追記　TypeScri...]]></description><link>https://zenn.dev/kumakuma_it/articles/d710b27d0f8920</link><guid isPermaLink="true">https://zenn.dev/kumakuma_it/articles/d710b27d0f8920</guid><pubDate>Wed, 17 Sep 2025 01:56:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ikJ6OCvO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%25E3%2581%25AE%25E5%25BC%25B1%25E7%2582%25B9%25E3%2581%258B%25E3%2582%2589%25E5%25AD%25A6%25E3%2581%25B6TypeScript%25E3%2581%25AE%25E5%25AE%2589%25E5%2585%25A8%25E6%2580%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%2586%258A%25E7%2586%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwOTFkYmU4NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>熊熊</dc:creator></item><item><title><![CDATA[オールドスクールな私は Drizzle (drizzle-orm) の夢を見るか？]]></title><description><![CDATA[
 はじめに
Node/TypeScriptのORMとしてTypeORMしか使ったことがなかったオールドスクールな私が Prismaデビューしたところ、「Drizzleもあるよ」と通りすがりの親切な方が教えてくれたので、見てみました。
結論から言うと、「Prismaは抽象化しすぎていて複雑なSQLを書こうと思うと結局生SQLになりそうで、ちょっとな、、」と思っていたオールドスクールな私にとって、Drizzle はちょうどよい塩梅な気がしています。
ちなみに、オールドスクールな私が ORMに求める主なものは以下です。

型安全なクエリーが書ける
なるべく SQL Like なシンタックス
...]]></description><link>https://zenn.dev/duckdevv/articles/3c4a204c15ecc4</link><guid isPermaLink="true">https://zenn.dev/duckdevv/articles/3c4a204c15ecc4</guid><pubDate>Wed, 17 Sep 2025 00:30:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yZC7pFPN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AA%25E7%25A7%2581%25E3%2581%25AF%2520Drizzle%2520%2528drizzle-orm%2529%2520%25E3%2581%25AE%25E5%25A4%25A2%25E3%2582%2592%25E8%25A6%258B%25E3%2582%258B%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:duckdevv%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk3MTNlN2IxZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>duckdevv</dc:creator></item><item><title><![CDATA[ESLint 9へのアップデートとFlat Config移行の実践記録]]></title><description><![CDATA[
 はじめに
ESLint 9 がリリースされ、新しい Flat Config 形式が標準となりました。
この記事では、モノレポ環境での ESLint 8 から 9 へのアップデート作業と、従来の.eslintrc.yml形式から Flat Config 形式への移行について、実際に遭遇した問題と解決方法を含めて記録します。

 ESLint 9のメリット
ESLint 9 への移行には以下のメリットがあります。


パフォーマンスの向上: 設定の解析が高速化

依存関係の簡素化: 多くのプラグインが統合され、設定が簡単に


 移行前の状況
移行前は以下の環境でした。

ESLint ...]]></description><link>https://zenn.dev/ptpadan/articles/eslint-update-9</link><guid isPermaLink="true">https://zenn.dev/ptpadan/articles/eslint-update-9</guid><pubDate>Tue, 16 Sep 2025 18:06:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g4aGO_Kr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ESLint%25209%25E3%2581%25B8%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A8Flat%2520Config%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%25AE%25E5%25AE%259F%25E8%25B7%25B5%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yasushi.kobayashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2paSXpCVVZFUTgtTXY4VG4xMzBoYXR4RmN6TXYzV1A3dWhzRFlka19RPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yasushi.kobayashi</dc:creator></item><item><title><![CDATA[GoogleAppsScriptで作るモダンなWebアプリ開発]]></title><description><![CDATA[GoogleAppsScript（GAS）を活用し、GAS完結のモダンなWebアプリの開発を共に行いましょう！
 GASのHtmlServiceを利用したホスティングを行いますので、Webアプリの公開のためにサーバーやホスティングサービスを用意する必要もありません✨
 
 Webアプリ（フロントエンド）・GAS（バックエンド）ともにフルスタックTypeScriptでの開発です 
 Vitestを用いたテスト方法や、バンドルファイルをGAS-HtmlServiceへホスティングするケース「ならでは」の解説も含まれます ]]></description><link>https://zenn.dev/luth/books/gas-with-frontend</link><guid isPermaLink="true">https://zenn.dev/luth/books/gas-with-frontend</guid><pubDate>Tue, 16 Sep 2025 16:24:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d69yVrkw--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9lNTQ2NmIyOWRlLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>luth</dc:creator></item><item><title><![CDATA[Upyo 0.3.0 リリース：マルチプロバイダー対応と耐障害性の強化]]></title><description><![CDATA[
 Upyo とは
Upyoは、Node.js、Deno、Bun、エッジ関数など、複数のJavaScriptランタイムで動作する統一的なメールライブラリです。SMTP、Mailgun、SendGrid、Amazon SESなどの様々なメールプロバイダーを同じインターフェースで扱えるため、プロバイダーを変更してもアプリケーションコードの修正が不要です。TypeScriptファーストで設計されており、型安全性とゼロ依存性を特徴としています。名前の由来は韓国語の「郵票（ウピョ）」で、これは「切手」を意味します。切手がどの郵便システムでも郵便を届けられるように、Upyo はどのランタイムでもメー...]]></description><link>https://zenn.dev/hongminhee/articles/9e67fbb08f30f2</link><guid isPermaLink="true">https://zenn.dev/hongminhee/articles/9e67fbb08f30f2</guid><pubDate>Tue, 16 Sep 2025 07:15:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ePpy4pRj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Upyo%25200.3.0%2520%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25EF%25BC%259A%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2580%25E3%2583%25BC%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25A8%25E8%2580%2590%25E9%259A%259C%25E5%25AE%25B3%25E6%2580%25A7%25E3%2581%25AE%25E5%25BC%25B7%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B4%25AA%2520%25E6%25B0%2591%25E6%2586%2599%25EF%25BC%2588%25E3%2583%259B%25E3%2583%25B3%25E3%2583%25BB%25E3%2583%259F%25E3%2583%25B3%25E3%2583%2592%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4Yzk5ZDE5YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>洪 民憙（ホン・ミンヒ）</dc:creator></item><item><title><![CDATA[音声系AIサービス「ElevenLabs」使ってみた！]]></title><description><![CDATA[!
この記事は人間が作成しています。
一応フロントエンドエンジニアです。


 はじめに
ChatGPTをはじめとする生成AIによる文章系のサービスがありふれてきた昨今、音声でのやり取りができるAIサービスはまだまだ物珍しい存在です。今回は、リアルタイム音声AI機能を提供する「ElevenLabs」を実際に使ってみたので、その感想と技術的な特徴をまとめてみました。
日本だとあまり話題になっていない（?）ようですが、使ってみると素晴らしいサービスでしたので、早速記事にしてみます。

 ElevenLabsとは？
ElevenLabsは、高品質な音声合成と音声認識を提供するAIサービスです。...]]></description><link>https://zenn.dev/bltsdc/articles/8a4dec8a46d760</link><guid isPermaLink="true">https://zenn.dev/bltsdc/articles/8a4dec8a46d760</guid><pubDate>Tue, 16 Sep 2025 01:47:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qOfzuvMp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259F%25B3%25E5%25A3%25B0%25E7%25B3%25BBAI%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2580%258CElevenLabs%25E3%2580%258D%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:wakaaa%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5NDcyMGM5YTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BLT%2520SDC%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSU5zOG9QZWMya0dlVS0tcG00Y3lZaTExZ1k3aTRIV3hkZERmdUkwclFGX0dZTVQ1UHE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakaaa</dc:creator></item><item><title><![CDATA[git rebaseが難しすぎたので、自動化CLI作った]]></title><description><![CDATA[
 はじめに
!
修正や追加等はコメントまたはGitHubで編集リクエストをお待ちしております。


 git rebase、怖くないですか？
開発を進めていると、ブランチの歴史をきれいに保つために git rebase を使いたくなる場面がよくあります。フィーチャーブランチを main や develop の最新状態に追従させたいときなどです。
しかし、git rebase は強力な反面、多くの開発者にとって悩みの種でもあります。


大量のコンフリクト: rebaseを実行したら、大量のコンフリクトが発生してしまい、1つ1つ解決するのが大変...

どのコミットで問題が起きたかわから...]]></description><link>https://zenn.dev/riya_amemiya/articles/c080705b331456</link><guid isPermaLink="true">https://zenn.dev/riya_amemiya/articles/c080705b331456</guid><pubDate>Tue, 16 Sep 2025 01:36:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OnVW5w0k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:git%2520rebase%25E3%2581%258C%25E9%259B%25A3%25E3%2581%2597%25E3%2581%2599%25E3%2581%258E%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596CLI%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Riya%2520Amemiya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIyOTk0YWYxZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Riya Amemiya</dc:creator></item><item><title><![CDATA[Vueで大規模プロジェクトを想定したcomponentsディレクトリ構成の考え方]]></title><description><![CDATA[
 前置き
法人向けのWebサイトをVueで新規構築するにあたり、Vueのcomponentsディレクトリ構成について改めて整理・検討することになりました。
現在の要件としては、Atomic Designをベースにコンポーネントを設計する方針です。

 環境


Vue3


Vue2と比べて大きく進化しており、とくに&lt;script setup&gt;構文が推奨されるようになっています。
▶️ https://github.com/vuejs




Vite


Webpackの代替となるバンドラー。Vue3で推奨されており、作者のエヴァン・ユー氏が開発。
高速なビルド性能を持ち...]]></description><link>https://zenn.dev/kimmaru/articles/4636c67aab1aca</link><guid isPermaLink="true">https://zenn.dev/kimmaru/articles/4636c67aab1aca</guid><pubDate>Mon, 15 Sep 2025 14:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CpVcX514--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue%25E3%2581%25A7%25E5%25A4%25A7%25E8%25A6%258F%25E6%25A8%25A1%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E6%2583%25B3%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259Fcomponents%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AE%25E8%2580%2583%25E3%2581%2588%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2586%25E3%2582%25BD%25E3%2583%2586%25E3%2582%25BD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTlMZlV6dGRPMFZXaHU3Qjl1OG9xSE5JUnJqMFhNMW9Ja3Fua0FrUjZQcVBkaEdXUTU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>テソテソ</dc:creator></item></channel></rss>