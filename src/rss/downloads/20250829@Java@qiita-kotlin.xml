<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-29T15:42:50+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073372</id>
    <published>2025-08-29T15:42:50+09:00</published>
    <updated>2025-08-29T16:24:32+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/d988e4e3a0e56dc39b69"/>
    <url>https://qiita.com/nozomi2025/items/d988e4e3a0e56dc39b69</url>
    <title>【デザインパターン】 ファサードパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ファサード（Facade）パターン は、
複雑なサブシステムにシンプルな統一インターフェースを提供する デザインパターンです。

解決する問題

複雑な処理（多くのクラスや API 呼び出し）が絡んでおり、クライアントから扱いにくい
クライアントがサ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073250</id>
    <published>2025-08-29T10:42:33+09:00</published>
    <updated>2025-08-29T10:42:33+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/22ef8acd0d107f2a3695"/>
    <url>https://qiita.com/majoLibrary/items/22ef8acd0d107f2a3695</url>
    <title>KotlinでのCoroutineScopeの設計指針</title>
    <content type="text">結論
スコープは呼び出し元の寿命に合わせて極小化すべき

説明

アプリ全体 -&amp;gt; ApplicationScope

目的：プロセス横断の見張り（最小限だけ）。WorkManagerで足りるならそっちが筋
キャンセルできる分だけGlobalScopeよりはマシ

cla...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073028</id>
    <published>2025-08-28T18:49:27+09:00</published>
    <updated>2025-08-28T18:49:27+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/59acacfca24ed405d54d"/>
    <url>https://qiita.com/nozomi2025/items/59acacfca24ed405d54d</url>
    <title>【デザインパターン】 デコレータパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
デコレータ（Decorator）パターン は、
既存のオブジェクトに動的に機能を追加できるようにする デザインパターンです。

解決する問題

継承で機能を拡張するとクラス数が爆発する
オブジェクトごとに「必要な機能だけ」柔軟に追加したい
動的に入れ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071740</id>
    <published>2025-08-28T09:19:58+09:00</published>
    <updated>2025-08-28T09:19:59+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tomori-ry/items/a971a383e3128f0f055f"/>
    <url>https://qiita.com/tomori-ry/items/a971a383e3128f0f055f</url>
    <title>【Android】MediaRecorderで録音機能を実装する</title>
    <content type="text">はじめに
Androidで簡易的な録音アプリの作り方を解説します。
録音機能を実装するには、Androidの標準クラスであるMediaRecorderかAudioRecordを利用します。
MediaRecorderは録音からファイル保存までをまとめて処理できる高レベルA...</content>
    <author>
      <name>tomori-ry</name>
    </author>
  </entry>
</feed>
