<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 19 Jun 2025 09:29:02 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[人間中身が重要なんていうけれど。Ts、君の中身を見せてくれ]]></title><description><![CDATA[誰と結婚したい？
誰と付き合いたい？
なんて話になると、私のネガティブ根性がここぞとばかりに顔を出し。
「僕みたいな人には選ぶ権利ないよ。顔もかっこよくないし」
すると、鬼の首を取ったかのように、
「いや、結局中身よ。それこそ30代とかになると顔じゃなくて人柄が重要になるから大丈夫」
いや、僕まだ全然20代
いや、これ遠回しに悪口？
いや、自分で卑下してるんだからそれを相手に受容されるのは当たり前か
いや、そもそもノリ悪くネガティブ発言したのが原因ですねこれ
いや、ごめんなさい
なんてことを考えてるとふと思いました。
TypeScriptってJsに型というエッセンスを入れた言語だよね？
...]]></description><link>https://zenn.dev/5dai5/articles/c76dc641c71d5c</link><guid isPermaLink="true">https://zenn.dev/5dai5/articles/c76dc641c71d5c</guid><pubDate>Thu, 19 Jun 2025 08:17:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CzvtLOKA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BA%25BA%25E9%2596%2593%25E4%25B8%25AD%25E8%25BA%25AB%25E3%2581%258C%25E9%2587%258D%25E8%25A6%2581%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A6%25E3%2581%2584%25E3%2581%2586%25E3%2581%2591%25E3%2582%258C%25E3%2581%25A9%25E3%2580%2582Ts%25E3%2580%2581%25E5%2590%259B%25E3%2581%25AE%25E4%25B8%25AD%25E8%25BA%25AB%25E3%2582%2592%25E8%25A6%258B%25E3%2581%259B%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:5dai5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTJsZGNuYXV1ZEc2MVUybDhmQlVkdGhreHpabXdnbGVqblZXMHdwTTZOLVhLZmxBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>5dai5</dc:creator></item><item><title><![CDATA[【今からReact #2】まずは「動かす」までやってみた！]]></title><description><![CDATA[
 はじめに
ピュアなJavaScriptではターミナルを使用して作業することはありませんでしたが、
Reactを勉強してみるとnpm installやらnpx create-react-appなど、ターミナルでの操作が前提のように話が始まります。
私は大学時代にC言語でトラウマを負ったタイプです。
黒い画面（＝ターミナル）に長文のエラーに心が折れ、
いつしかプログラミング＝難しい・苦手という意識が染みついてしまいました。
でも、JavaScriptはエラーが出ても割と優しくて、画面はなんとなく動くし、
HTMLに&lt;script&gt;タグを貼ってブラウザを開くだけでOK！
そんな...]]></description><link>https://zenn.dev/akky709/articles/d5bea1e3df1504</link><guid isPermaLink="true">https://zenn.dev/akky709/articles/d5bea1e3df1504</guid><pubDate>Thu, 19 Jun 2025 08:10:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wRieTOe3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E4%25BB%258A%25E3%2581%258B%25E3%2582%2589React%2520%25232%25E3%2580%2591%25E3%2581%25BE%25E3%2581%259A%25E3%2581%25AF%25E3%2580%258C%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E3%2580%258D%25E3%2581%25BE%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akky%2Cx_90%2Cy_121/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akky</dc:creator></item><item><title><![CDATA[フォーカス移動で開いているコンポーネントを自動で閉じる実装と解説]]></title><description><![CDATA[
 目的
開いているアコーディオンやメニューなど、特定のコンポーネント以外に
フォーカスが移動したとき、自動で閉じるようにする。
キーボード操作やスクリーンリーダー対応のためのアクセシビリティ向け制御。


 コード
handleFocusBound = this.handleFocus.bind(this);

document.addEventListener('focusin', this.handleFocusBound);

handleFocus(event: FocusEvent) {
  const target = event.target as HTMLElement...]]></description><link>https://zenn.dev/yyoshioka/articles/63309312107d65</link><guid isPermaLink="true">https://zenn.dev/yyoshioka/articles/63309312107d65</guid><pubDate>Thu, 19 Jun 2025 07:53:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--506BiFcG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25AB%25E3%2582%25B9%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%25A7%25E9%2596%258B%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E9%2596%2589%25E3%2581%2598%25E3%2582%258B%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25A8%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2582%2587%25E3%2581%2586%25E3%2581%2598%25E3%2582%2587%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxYjkxZTg3NzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みょうじょう</dc:creator></item><item><title><![CDATA[@praha/byethrowの全機能リファレンス]]></title><description><![CDATA[
 はじめに
前回の記事で@praha/byethrowについて紹介しましたが、本記事ではこのライブラリの全機能についてより詳しく紹介したいと思います。
@praha/byethrowは、JavaScript/TypeScript向けの軽量でシンプルなエラーハンドリングライブラリです。Result型を用いることで、関数の成功と失敗を明示的に表現し、try/catchに頼らない型安全なエラーハンドリングを実現できます。
以下では、Resultモジュールに含まれる全ての関数について、用途 (何をする関数か)、引数, 戻り値, 使用例コードの順で解説します。まだこのライブラリを知らない方でも分...]]></description><link>https://zenn.dev/praha/articles/7e1cd6ad0aa49b</link><guid isPermaLink="true">https://zenn.dev/praha/articles/7e1cd6ad0aa49b</guid><pubDate>Thu, 19 Jun 2025 01:36:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ppcQReZm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540praha%252Fbyethrow%25E3%2581%25AE%25E5%2585%25A8%25E6%25A9%259F%25E8%2583%25BD%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiZDIyMmFjMTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[FunctionCallingを試してみた]]></title><description><![CDATA[
 背景
社内でAIチャットボットを作る際にMCPを使う運びとなりました。
MCPクライアントを作る際、Function Callingという機能を使って、MCPサーバの呼び出しをしているようです。
本記事では、Function Callingとは何か　を確認してみます。


 対象読者

LLM初心者



 環境



項目
バージョン




OS
Windows 10


ランタイム
Node.js:22.04 + JavaScript


LLM
Azure OpenAI:2024-12-01-preview





 事前準備

Node.jsのインストール
Azure O...]]></description><link>https://zenn.dev/fourclover09/articles/43acf6ddb7cab8</link><guid isPermaLink="true">https://zenn.dev/fourclover09/articles/43acf6ddb7cab8</guid><pubDate>Thu, 19 Jun 2025 00:46:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fVPOM6Qz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FunctionCalling%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakane%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4MDM1NDQ5YzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakane</dc:creator></item><item><title><![CDATA[Amazon Q Developer CLIで妙なローカルルールのリバーシゲームを作る]]></title><description><![CDATA[
 abstract
Amazon Q Developer CLIを利用してゲームを作成した。
ゲームの内容はリバーシの改造版。
AWSのTシャツをもらう。
AWS公式のキャンペーン記事は以下。
https://aws.amazon.com/jp/blogs/news/build-games-with-amazon-q-cli-and-score-a-t-shirt/

 開発環境
Windows11 PC。WSL2でUbuntu22.04LTS。ここでAmazon Q Developer CLIを動作させる。
モデルはClaude Sonnet 4に変更。


 実装
今回はオセロリバ...]]></description><link>https://zenn.dev/mieses/articles/8d33afdcdb8ba9</link><guid isPermaLink="true">https://zenn.dev/mieses/articles/8d33afdcdb8ba9</guid><pubDate>Wed, 18 Jun 2025 14:58:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZDZNF3uS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Amazon%2520Q%2520Developer%2520CLI%25E3%2581%25A7%25E5%25A6%2599%25E3%2581%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B7%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:n%25E7%2595%25AA%25E7%2585%258E%25E3%2581%2598%25E3%2581%25AE%25E3%2581%258A%25E5%258B%2589%25E5%25BC%25B7%25E8%25A8%2598%25E4%25BA%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjNENE84YzVlTlM4eGw0MlYwbFBObkdVZXhVWFdhT3cwVVZ5TldIb0pJQW00LWFmST1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>n番煎じのお勉強記事</dc:creator></item><item><title><![CDATA[【JavaScript】parseInt と Number の違いと使い分けを解説]]></title><description><![CDATA[
 はじめに
JavaScriptで文字列を数値に変換する際によく使われるのが parseInt() と Number() です。
一見似ていますが、動作には明確な違いがあり、目的に応じて使い分ける必要があります。
本記事では parseInt と Numberの違いや使い分けについて、例を交えて解説します。

 1. parseInt() の基本
parseInt('123');     // 123
parseInt('123px');   // 123
parseInt('12.34');    // 12
parseInt('abc');      // NaN

文字列の 先頭...]]></description><link>https://zenn.dev/fd2025/articles/14a44c260412e2</link><guid isPermaLink="true">https://zenn.dev/fd2025/articles/14a44c260412e2</guid><pubDate>Wed, 18 Jun 2025 12:33:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lhaWM2YZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591parseInt%2520%25E3%2581%25A8%2520Number%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fd2025%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzMzVlNTI5MmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fd2025</dc:creator></item><item><title><![CDATA[React で状態管理を学ぶ前の案内【導入編】]]></title><description><![CDATA[
 はじめに
先日、React の勉強会で、状態管理について取り上げました 🫐
React を学ぶ中で、切っても切り離せない概念の１つが、「状態管理」です。
その際、状態管理を学習する前に、
そもそもの必要性や、web 技術の推移を確認しておくことが、理解を深める助けになると思います！
なので今回は、React で状態管理を学ぶ前に知っておきたい背景について調査したので、基礎的な内容をまとめました！
時間の節約になれば、嬉しいです 🙌

 状態管理とは？
https://ja.react.dev/learn/adding-interactivity
公式の見出しを引用すると、
「インタラ...]]></description><link>https://zenn.dev/b13o/articles/about-state-management</link><guid isPermaLink="true">https://zenn.dev/b13o/articles/about-state-management</guid><pubDate>Wed, 18 Jun 2025 11:58:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UFeXA7Sl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E3%2581%25A7%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%25E5%2589%258D%25E3%2581%25AE%25E6%25A1%2588%25E5%2586%2585%25E3%2580%2590%25E5%25B0%258E%25E5%2585%25A5%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kazzyfrog%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkYWE3NjM3NGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:b13o%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwMzRmZDk1NTIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazzyfrog</dc:creator></item><item><title><![CDATA[dockerでviteを使ったreact環境を作ってみる]]></title><description><![CDATA[dockerでviteを使ったreactの環境を作成したのでメモ。
node.jsをインストールする必要があります。

 最終的なファイル構造
最終的な構造は以下の通り
└── react
    ├── docker-compose.yml
    ├── Dockerfile
    ├── eslint.config.js
    ├── index.html
    ├── node_modules
    ├── package-lock.json
    ├── package.json
    ├── public
    ├── README.md
    ├── src...]]></description><link>https://zenn.dev/amethyst/articles/c1fa2e8ff574bd</link><guid isPermaLink="true">https://zenn.dev/amethyst/articles/c1fa2e8ff574bd</guid><pubDate>Wed, 18 Jun 2025 11:03:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ohCDJ6Sx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%25E3%2581%25A7vite%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259Freact%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B4%25AB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzYTAyNjNlN2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>紫</dc:creator></item><item><title><![CDATA[RecoilからJotaiに移行してみた：注意点と実装Tipsまとめ]]></title><description><![CDATA[こんにちは！
株式会社カンリーでカンリー福利厚生の開発チームに所属しているaoyyです。
カンリー福利厚生ではフロントエンドの状態管理ライブラリとしてRecoilを使用していましたが、最近Jotaiに移行しました。
折角なので移行時の諸々をまとめていこうと思います！

 背景
Recoilは元々2023年4月からアップデートがなかったのですが、2025年1月に正式に開発停止となりました。そのため、Reactのバージョンアップに対応されない、今後バグが見つかった際に修正が入らないなど問題となる可能性がありました。（実際React19では正常に動作しません）
チーム内ではある程度容易に移行可...]]></description><link>https://zenn.dev/canly/articles/edd0d4d94c97a7</link><guid isPermaLink="true">https://zenn.dev/canly/articles/edd0d4d94c97a7</guid><pubDate>Wed, 18 Jun 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wAC4yCQ_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Recoil%25E3%2581%258B%25E3%2582%2589Jotai%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%259A%25E6%25B3%25A8%25E6%2584%258F%25E7%2582%25B9%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585Tips%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:aoyy%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYjI3NWVjYTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25AB%25E3%2583%25B3%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZTJkMmVkMDUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aoyy</dc:creator></item><item><title><![CDATA[サーバからファイルを受け取る (Blazor Server)]]></title><description><![CDATA[
 はじめに
この記事は、以下を下敷きにしています。
https://zenn.dev/tetr4lab/articles/6b1a70ca7800ed
以降で挙げるコードの詳細は、次のリポジトリをご参照ください。
https://github.com/tetr4lab/Novels

 やりたいこと
サーバ側で動的に生成されたファイルを受け取りたいです。
サーバに渡す場合は以下をどうぞ。
https://zenn.dev/tetr4lab/articles/5b875f53d04e3a

 実装

 実装例
この例のファイルは比較的小さいので、URLを割り当てず、ストリームからダウンロ...]]></description><link>https://zenn.dev/tetr4lab/articles/d69583796163b4</link><guid isPermaLink="true">https://zenn.dev/tetr4lab/articles/d69583796163b4</guid><pubDate>Wed, 18 Jun 2025 07:38:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gDzhhKPH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%258B%25E3%2582%2589%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E5%258F%2596%25E3%2582%258B%2520%2528Blazor%2520Server%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2586%25E3%2583%2588%25E3%2583%25A9%25E3%2583%25A9%25E3%2583%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5OGIzNTMwNzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>テトララボ</dc:creator></item><item><title><![CDATA[JavaScript (Node.js) にはセミコロンをつけよう！]]></title><description><![CDATA[
 セミコロンをつけないとエラーになることがある
JavaScript ではセミコロンを省略できます。以下のコードは正しく動作します。

greet.js
function greet() {
  return 'hello'
}

let hello = ''

hello = greet()

console.log(hello)


Shell
node greet.js


Result
hello

ところが以下のコードはうまく動きません。

greet.js
function greet() {
  return ['hello', 'world']
}

let hello...]]></description><link>https://zenn.dev/noraworld/articles/javascript-semicolon</link><guid isPermaLink="true">https://zenn.dev/noraworld/articles/javascript-semicolon</guid><pubDate>Wed, 18 Jun 2025 06:57:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c0jiQ97z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%2528Node.js%2529%2520%25E3%2581%25AB%25E3%2581%25AF%25E3%2582%25BB%25E3%2583%259F%25E3%2582%25B3%25E3%2583%25AD%25E3%2583%25B3%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kosuke%2520Aoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dtSnRsM0J6RVROZXhta2p1Rk9EYzRYbXZabVpqalVGX2tZVEdGPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kosuke Aoki</dc:creator></item><item><title><![CDATA[TypeScriptで作る “重複しない” シャッフル再生ロジック]]></title><description><![CDATA[
 ランダムなのに偏りゼロ？CV再生ロジックを作ってみた話

 TypeScriptで作る “重複しない” シャッフル再生ロジック
CV(キャラクターボイス)をランダムに再生する機能を JavaScript で実装していたところ、「無駄な 2 重ランダム」 が潜んでいました。
リストをシャッフルしランダムな並びのリストを作成。
↓
その配列から毎回ランダムで取り出す。
とかいう意味のない処理。。。
かなり端折りましたが問題の部分はこんな感じのコードでした、、、
const cvList = ["1.wav", "2.wav", "3.wav"];
const shuffledList =...]]></description><link>https://zenn.dev/fuwafuwa_fox/articles/56314aa005d901</link><guid isPermaLink="true">https://zenn.dev/fuwafuwa_fox/articles/56314aa005d901</guid><pubDate>Wed, 18 Jun 2025 05:33:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UyJ-WHyE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520%25E2%2580%259C%25E9%2587%258D%25E8%25A4%2587%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E2%2580%259D%2520%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2595%25E3%2583%25AB%25E5%2586%258D%25E7%2594%259F%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2582%258F%25E3%2581%25B5%25E3%2582%258F%25E3%2582%25AD%25E3%2583%2584%25E3%2583%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzOTA0NDJlOTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふわふわキツネ</dc:creator></item><item><title><![CDATA[JetBrains Plugin Developer Conf 2025に登壇しませんか？]]></title><description><![CDATA[

 🧩 JetBrains公式のプラグイン開発者向けカンファレンスが今年も開催
JetBrains が主催する 「JetBrains Plugin Developer Conference 2025」 の登壇者募集（Call for Speakers）がスタートしました。
このカンファレンスは、JetBrains製品のエコシステムを拡張する プラグイン開発者のための国際的イベント です。

📅 開催日： 2025年11月（具体的な日付は後日発表）
🌍 開催形式： オンライン（世界中から参加可能）
📌 応募締切： 2025年7月10日



 そこのアナタっ！登壇できるかもしれませんね～...]]></description><link>https://zenn.dev/nattosystem_jp/articles/1b71b58a65ba15</link><guid isPermaLink="true">https://zenn.dev/nattosystem_jp/articles/1b71b58a65ba15</guid><pubDate>Wed, 18 Jun 2025 02:03:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eI_tsVsy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JetBrains%2520Plugin%2520Developer%2520Conf%25202025%25E3%2581%25AB%25E7%2599%25BB%25E5%25A3%2587%25E3%2581%2597%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25AD%25E3%2581%25B0%25E3%2581%25AD%25E3%2581%25B0%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RiYWQxMDhjNTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BENATTOSYSTEM%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvbi5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ねばねば</dc:creator></item><item><title><![CDATA[TreeShakableなResultライブラリを作りました]]></title><description><![CDATA[
 はじめに
JavaScriptでは、throwを使ってエラーを明示的に投げることで、処理を中断する「大域脱出」が可能です。しかし、TypeScriptではこのthrowによって発生するエラーの型を記述できないため、型安全性が損なわれてしまいます。
この問題を解決するために、関数の成功・失敗を明示的に扱えるResult型が有用です。
TypeScriptでResult型を利用する場合、neverthrowやeffect-ts、fp-tsなどのライブラリがよく挙げられます。
しかし、それぞれ一長一短があり、neverthrowは比較的シンプルで使いやすいものの、現在は活発なメンテナンスが...]]></description><link>https://zenn.dev/praha/articles/9310a5d58b84a5</link><guid isPermaLink="true">https://zenn.dev/praha/articles/9310a5d58b84a5</guid><pubDate>Tue, 17 Jun 2025 23:21:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Wcz3kB8r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TreeShakable%25E3%2581%25AAResult%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiZDIyMmFjMTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[ChatGPTでVOICEROID2の作業を効率化するWebアプリを作ってみた～その2 実装編～]]></title><description><![CDATA[
 🧪 ChatGPTでVOICEROID2の作業を効率化するWebアプリを作ってみた～その2 実装編～
前回の記事では、ChatGPTを活用して「VOICEROID2をWebアプリから制御する」構想とChatGPTを活用して環境構築をしてく過程を紹介しました。
今回はいよいよ、実際にアプリを構築して動かすまでの過程をまとめます。
開発中はChatGPTと会話しながら進めたリアルな記録を元にしているので、同じように構築してみたい方にも参考になるはずです。

 🚀 今回の実装手順まとめ（全体の流れ）


PythonでFlaskサーバーを構築
　→ VueからPOSTリクエストを受け取るA...]]></description><link>https://zenn.dev/pwrengineer/articles/3315387c142ab5</link><guid isPermaLink="true">https://zenn.dev/pwrengineer/articles/3315387c142ab5</guid><pubDate>Tue, 17 Jun 2025 21:51:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ue-2Mkr_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGPT%25E3%2581%25A7VOICEROID2%25E3%2581%25AE%25E4%25BD%259C%25E6%25A5%25AD%25E3%2582%2592%25E5%258A%25B9%25E7%258E%2587%25E5%258C%2596%25E3%2581%2599%25E3%2582%258BWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BD%259E%25E3%2581%259D%25E3%2581%25AE2%2520%25E5%25AE%259F%25E8%25A3%2585%25E7%25B7%25A8%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:PWR%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5MTM5YzVkZWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>PWR</dc:creator></item><item><title><![CDATA[Reactで始めるモダンフロントエンド開発]]></title><description><![CDATA[
 はじめに
!
📝 この記事はZenn公開練習用のサンプル記事です
この記事は、Zennでの記事公開の流れを確認するためのテスト記事として作成されました。

こんにちは！今回は、Reactを使ったモダンなフロントエンド開発について解説します。
Reactは、Facebookが開発したJavaScriptライブラリで、UIを構築するための強力なツールです。コンポーネントベースのアプローチにより、再利用可能で保守しやすいコードを書くことができます。

 なぜReactを選ぶのか？

 1. コンポーネントベースの設計
Reactの最大の特徴は、UIを小さなコンポーネントに分割して開発できる...]]></description><link>https://zenn.dev/ktsushima/articles/sample-first-article</link><guid isPermaLink="true">https://zenn.dev/ktsushima/articles/sample-first-article</guid><pubDate>Tue, 17 Jun 2025 17:33:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NCNY0a22--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E3%2583%25A2%25E3%2583%2580%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ktsushima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHh5X05oZ1RQRUtaUmxmZEZfRzRIYzUxRkZOc25Qc09SZGRpZFY0SGktTDZQazRjZmY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ktsushima</dc:creator></item><item><title><![CDATA[Node.jsでCPUバウンドな処理を書く際は注意！！]]></title><description><![CDATA[
 はじめに
エックスポイントワンでリードエンジニアをしているRenです。
本記事ではNode.jsのアーキテクチャを解説しながら、なぜCPUバウンドな処理を書く際は注意する必要があるかを紐解いていきます。

 Node.jsとは
Node.jsは大量の同時接続をさばけるアプリケーションの構築を目的に設計されたJavaScript環境です。その根幹にあるのが「シングルスレッド」で動作する「イベントループ」です。

 シングルスレッドとマルチスレッド
プログラムの中で命令を実行する最小の作業単位を「スレッド（Thread）」と呼びます。
スレッドには大きく分けてシングルスレッドとマルチスレ...]]></description><link>https://zenn.dev/x_point_1/articles/123d60d9333e85</link><guid isPermaLink="true">https://zenn.dev/x_point_1/articles/123d60d9333e85</guid><pubDate>Tue, 17 Jun 2025 14:14:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zkSkmN8Y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25A7CPU%25E3%2583%2590%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AA%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E9%259A%259B%25E3%2581%25AF%25E6%25B3%25A8%25E6%2584%258F%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ren%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3YzY4ZjI4ZDcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25B3%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5OGQwOGYzYTIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ren</dc:creator></item><item><title><![CDATA[【React】Componentsについて]]></title><description><![CDATA[Reactのコンポーネントについて自分の考えをまとめるための記事になります。
最近、Reactをフロントに使用してバックにJavaを使って開発する機会が多いです。
Reactはコンポーネントを作ってそれを組み合わせて使うことが多いフレームワークだと感じていますのでこの概念についてはしっておいて損はないかと思います

 なぜComponentをする必要があるのか
アプリの管理のしやすさやコードの可読性を向上させるために使用します。
部品（Component）を分割して記載することでわざわざどこにその部品となった機能のプログラムがあるかを探し出す必要がなくなります。
また、将来的に機能の追加...]]></description><link>https://zenn.dev/hosoya_ren/articles/710c31b03cf834</link><guid isPermaLink="true">https://zenn.dev/hosoya_ren/articles/710c31b03cf834</guid><pubDate>Tue, 17 Jun 2025 13:56:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mdE-UJ-C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591Components%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hosoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0JfWGxNdE5wRVlwTm5GUENGWV9DZ0RPYjZ4d3k3TnhtNWRpcDVTbHNIWGtyWllYND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hosoya</dc:creator></item><item><title><![CDATA[🕒 JavaScriptでストップウォッチを作ってみた｜スタート・ストップ・リセット機能付き]]></title><description><![CDATA[ストップウォッチは一見シンプルなツールに見えるかもしれませんが、JavaScriptで正確なタイマー機能を実装するには、意外と多くの学びがあります。
イベント処理、時間の計算、UIの更新方法、そしてsetIntervalのドリフト問題など、さまざまな課題に直面しました。
この記事では、**JavaScript（バニラJS）**だけで構築したストップウォッチの作り方を、ソースコード付きで解説します。

🔧 ストップウォッチの基本構造（HTML）
まずは最もシンプルな構造から始めます。必要なのは、時間を表示するエリアと3つのボタン（スタート・ストップ・リセット）だけです。
html
Copy...]]></description><link>https://zenn.dev/hinatatachibana/articles/1c465bc740bab0</link><guid isPermaLink="true">https://zenn.dev/hinatatachibana/articles/1c465bc740bab0</guid><pubDate>Tue, 17 Jun 2025 04:53:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OE3KxeVL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520JavaScriptw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hinatatachibana%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUJvMEJIMzFZekZyTnNpVGZYUFptSm5TVm5WVlhiRlpwN2pvdnA1S2RUOEttNFFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hinatatachibana</dc:creator></item></channel></rss>