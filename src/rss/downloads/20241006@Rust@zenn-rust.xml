<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 06 Oct 2024 00:05:07 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[[rust] 1. Two Sum/60 questions to solve]]></title><description><![CDATA[Leet Codeのおすすめされていた60問を解いた自己学習メモです。
Leet Codeのリスト機能
https://leetcode.com/list/xo2bgr0r
おすすめされていた元記事
https://1kohei1.com/leetcode/

 1. Two Sum
https://leetcode.com/problems/two-sum/description/?envType=problem-list-v2&amp;envId=xo2bgr0r

 一言まとめ
同じリストに対して2回以上ループを回すときは、HashMapに登録しておくと、2回目以降のループの際の効...]]></description><link>https://zenn.dev/yut_wq/articles/8b7199ad27333b</link><guid isPermaLink="true">https://zenn.dev/yut_wq/articles/8b7199ad27333b</guid><pubDate>Sat, 05 Oct 2024 21:26:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RZVm-Wcx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Brust%255D%25201.%2520Two%2520Sum%252F60%2520questions%2520to%2520solve%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YT%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHhoaTdpLUpwaHdzY21VRFRSMGh0ZzFGd1ZXMDA1S3IyeV9RVzZFWXZNNEU2YndxVjg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YT</dc:creator></item><item><title><![CDATA[[Rust] 引数の有無で read 対象(ファイル・標準入力)を切り替える]]></title><description><![CDATA[

 概要
Rustで作成したプログラムの動作を、以下のようにしたかった。

引数にファイルが指定されている場合、ファイルの内容を読み込む。
引数にファイルが指定されていない場合、標準入力の内容を読み込む。

上記の動作を実現した方法を記載します。

 使用するプログラム
説明では、ファイルの内容を表示し、行頭に行数を表示するプログラムを使用します。
説明で使用するプログラムのソースコードは、以下にあります。
https://github.com/shu-kitamura/BufRead_sample
プログラムの引数にファイル名が指定されている場合、ファイルの内容を表示します。
$ c...]]></description><link>https://zenn.dev/shu_kitamura/articles/a2491733fb43f1</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/a2491733fb43f1</guid><pubDate>Sat, 05 Oct 2024 15:31:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5uPhZWW6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AE%25E6%259C%2589%25E7%2584%25A1%25E3%2581%25A7%2520read%2520%25E5%25AF%25BE%25E8%25B1%25A1%2528%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2583%25BB%25E6%25A8%2599%25E6%25BA%2596%25E5%2585%25A5%25E5%258A%259B%2529%25E3%2582%2592%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[【Rust】スマートポインタ/ボックス について]]></title><description><![CDATA[
 要点

 概要

スタックではなくヒープにデータを格納することができる
スタックに残るのは、 ヒープデータへのポインタである

スタック                ヒープ
+-----------+         +-------------------+
| Box&lt;T&gt;    |  -----&gt; | データ（ヒープ）     |
| ポインタ   |         | 例えば、大きな構造体  |
+-----------+         +-------------------+

 使い所

コンパイル時にはサイズを知ることができない型があり、正確な...]]></description><link>https://zenn.dev/nekoninaritai/articles/71401318e59f44</link><guid isPermaLink="true">https://zenn.dev/nekoninaritai/articles/71401318e59f44</guid><pubDate>Sat, 05 Oct 2024 13:27:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C8x9gsUd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%252F%25E3%2583%259C%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:svun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2ODg0YTdhNTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>svun</dc:creator></item><item><title><![CDATA[tauri-store-plugin 2.0.0 正式版アップデート後の静的解析エラー解消]]></title><description><![CDATA[
 2.0.0 正式版アップデートで発生した静的解析エラー
私の場合、tauri-store-pluginを2.0.0-rc.3から2.0.1にアップデートした際、最初に静的解析でエラーが発生しました。以前のバージョンで使用していたいくつかのメソッドが、2.0.1では動作しなくなっていたためです。特に、ストアの値を更新する際に使っていたinsertメソッドや、ストアの初期化方法に変更が加えられていました。
最初はコードのロジックに問題があるのではと考えましたが、実際にはAPIの変更が原因でした。さらに、これらの変更がドキュメント(crates.io)にまだ明確に記載されていなかったため、...]]></description><link>https://zenn.dev/takisato/articles/378f8140a4e2b2</link><guid isPermaLink="true">https://zenn.dev/takisato/articles/378f8140a4e2b2</guid><pubDate>Sat, 05 Oct 2024 07:14:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4rk2hQpp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tauri-store-plugin%25202.0.0%2520%25E6%25AD%25A3%25E5%25BC%258F%25E7%2589%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%25E5%25BE%258C%25E3%2581%25AE%25E9%259D%2599%25E7%259A%2584%25E8%25A7%25A3%25E6%259E%2590%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E8%25A7%25A3%25E6%25B6%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takisato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0NWE1NWQwZWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takisato</dc:creator></item><item><title><![CDATA[TauriとLeptosで作るデスクトップアプリ（4）イベントを送受信する]]></title><description><![CDATA[
 はじめに
TauriとLeptosでデスクトップアプリを作っていきます。今回は、LeptosフロントエンドとTauriバックエンドの間でイベントを送受信します。
関連記事
https://zenn.dev/daizutabi/articles/tauri-leptos-01
https://zenn.dev/daizutabi/articles/tauri-leptos-02
https://zenn.dev/daizutabi/articles/tauri-leptos-03

環境

Windows 11 Home
Rust 1.81
Tauri 2.0.1

https://t...]]></description><link>https://zenn.dev/daizutabi/articles/tauri-leptos-04</link><guid isPermaLink="true">https://zenn.dev/daizutabi/articles/tauri-leptos-04</guid><pubDate>Sat, 05 Oct 2024 02:51:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vvb22Mqd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2581%25A8Leptos%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25EF%25BC%25884%25EF%25BC%2589%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E9%2580%2581%25E5%258F%2597%25E4%25BF%25A1%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daizutabi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmMTMzM2MwY2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daizutabi</dc:creator></item><item><title><![CDATA[ESP32向けRust開発環境をNixで構築する]]></title><description><![CDATA[
 急いでいる方向け
次の手順で構築からビルドまで可能です(direnvを導入している必要があります)
nix flake new -t github:turtton/flake-templates#esp32-idf &lt;appname&gt;
作成されたフォルダ内でDirenvを有効にしてから(direnv allow)、以下を実行します
cargo generate --init esp-rs/esp-idf-template cargo # See: https://github.com/esp-rs/esp-idf-template
Build environmentに入り...]]></description><link>https://zenn.dev/watagame/articles/esp32-rust-nix</link><guid isPermaLink="true">https://zenn.dev/watagame/articles/esp32-rust-nix</guid><pubDate>Fri, 04 Oct 2024 23:27:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NHn_PzIy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ESP32%25E5%2590%2591%25E3%2581%2591Rust%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592Nix%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:turtton%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxMDFjODE1ZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>turtton</dc:creator></item><item><title><![CDATA[Rust で正規表現エンジンを実装した話 その④]]></title><description><![CDATA[
 概要
その①でVM型の正規表現エンジンは以下の3つの処理を行っていると説明しました。

パターンをパースし、抽象構文木(AST)を生成する
ASTから命令列を生成する
文字列がパターンと一致するか評価する

今回、解説するのは「3. 文字列がパターンと一致するか評価する」処理です。
evaluator モジュール(evaluator.rs)に命令列と文字列を受け取り、評価を実施する関数を定義します。
また、実際にパターンマッチする関数をmain.rsに定義して、実行するところも記載します。

 evaluator の実装
evaluator モジュールの中に、evaluate関数を定...]]></description><link>https://zenn.dev/shu_kitamura/articles/09f068b8193141</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/09f068b8193141</guid><pubDate>Fri, 04 Oct 2024 16:42:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--A40SWf3f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2520%25E3%2581%259D%25E3%2581%25AE%25E2%2591%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rust で正規表現エンジンを実装した話 その③]]></title><description><![CDATA[
 概要
その①でVM型の正規表現エンジンは以下の3つの処理を行っていると説明しました。

パターンをパースし、抽象構文木(AST)を生成する
ASTから命令列を生成する
文字列がパターンと一致するか評価する

今回、解説するのは「2. ASTから命令列を生成する」処理です。
compiler モジュール(compiler.rs)に 命令列を表す型と、AST から命令列を生成する関数を実装します。

 命令列と処理順所
compiler モジュールでは、ASTを解析して、命令の実行位置を示すプログラムカウンタと命令列を生成します。
命令には以下の４種類があります。

Char : 文字列...]]></description><link>https://zenn.dev/shu_kitamura/articles/600bf6de8e0a70</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/600bf6de8e0a70</guid><pubDate>Fri, 04 Oct 2024 16:41:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zBDKpVpm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2520%25E3%2581%259D%25E3%2581%25AE%25E2%2591%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rust で正規表現エンジンを実装した話 その②]]></title><description><![CDATA[
 概要
その①でVM型の正規表現エンジンは以下の3つの処理を行っていると説明しました。

パターンをパースし、抽象構文木(AST)を生成する
ASTから命令列を生成する
文字列がパターンと一致するか評価する

今回、解説するのは「1. パターンをパースし、抽象構文木(AST)を生成する」処理です。
parser モジュール(parser.rs)に AST を表す型と、ASTを生成する関数を実装します。

 parser の実装
parserはパターンから、以下のAST型オブジェクトを生成します。
pub enum AST {
    Char(char),             //...]]></description><link>https://zenn.dev/shu_kitamura/articles/54792867937bba</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/54792867937bba</guid><pubDate>Fri, 04 Oct 2024 16:41:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8uqFZefW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2520%25E3%2581%259D%25E3%2581%25AE%25E2%2591%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rust で正規表現エンジンを実装した話 その①]]></title><description><![CDATA[
 概要
以下の2点から、Rustで正規表現エンジンを実装しました。

Rustを学ぶ
正規表現の仕組みを理解する

知識の整理をかねて、実装したコードの解説を記載します。
ソースコードは以下のリポジトリに含まれています。
本記事で使用するコードは、正規表現エンジンの処理を解説のしやすさを優先して、エラー処理を考慮していません。

 正規表現エンジンの種類
正規表現エンジンには、以下の2種類の実装があります。

VM型
DFA型

今回実装したエンジンはVM型です。
2種類のエンジンの違いや、メリットなどに興味がある方は以下の本を読むことをお勧めします。
正規表現技術入門

 処理の流れ...]]></description><link>https://zenn.dev/shu_kitamura/articles/0f6a69c343e08a</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/0f6a69c343e08a</guid><pubDate>Fri, 04 Oct 2024 16:40:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aeYW8TVx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2520%25E3%2581%259D%25E3%2581%25AE%25E2%2591%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rustのクレート分け]]></title><description><![CDATA[
 Cargoとクレートについて

 Cargo
Cargoとは、Rustのプロジェクトにおける依存関係管理やパッケージ管理を担うツールで、ビルドやテスト、デバッグ、ドキュメント生成など、開発サイクルのあらゆる場面で活躍します。他の言語で言えば、Pythonのpipや、C++のCMakeに相当する役割を持っていますが、Cargoはこれらの機能を一つのツールに統合しているため、開発が非常にスムーズに進められます。
個人的にはテスト駆動開発用のツールなどの含まれているのが好印象

 クレート
クレートはRustにおける最小単位のパッケージで、モジュール化されたコードの集まりです。
クレートは...]]></description><link>https://zenn.dev/tikuwabu/articles/55b41433db87e3</link><guid isPermaLink="true">https://zenn.dev/tikuwabu/articles/55b41433db87e3</guid><pubDate>Fri, 04 Oct 2024 10:04:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YkHdXB65--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E5%2588%2586%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMjdmZjRiODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわぶ</dc:creator></item><item><title><![CDATA[[Rust] コンパイラ最適化 - 定数畳み込み]]></title><description><![CDATA[Rust で作るプログラミング言語シリーズです。
https://www.amazon.co.jp/dp/4297141922
コンパイラによる最適化というと、実行バイナリを高速化する技術であり、程度の差こそあれ、事実上すべてのネイティブコンパイル言語に備わっている機能です。
書籍では紙面の都合で紹介できなかったのですが、要望もあったので補足しておきます。
一口に最適化と言っても、それが適用されるタイミングによって様々な手法があり、実際にはそれを組み合わせたものになります。例えば：

AST最適化

定数畳み込み・伝搬
ループの展開
インライン展開


中間コード最適化
機械語コードの最...]]></description><link>https://zenn.dev/msakuta/articles/ea6bcc8be03a76</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/ea6bcc8be03a76</guid><pubDate>Thu, 03 Oct 2024 13:42:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JTHrMoBC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25A9%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%2520-%2520%25E5%25AE%259A%25E6%2595%25B0%25E7%2595%25B3%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Engineの設計方針]]></title><description><![CDATA[
 エンジン設計方針

 ECS（Entity Component System）
ECSを採用し、コンポーネントごとに機能を分けることで柔軟性とパフォーマンスを両立。オブジェクトの状態管理を効率化し、大規模プロジェクトにも対応可能な設計を目指します。

 マルチプラットフォーム対応
異なるプラットフォームでも同じコードベースで動作できるように設計。これにより、PC、モバイル、コンソールなど多様なデバイスでのゲーム開発がスムーズになります。

 IPC（プロセス間通信）
エディタとランタイム間でのIPCを活用し、データ共有や同期を円滑に。リアルタイムのフィードバックやデバッグが容易になり...]]></description><link>https://zenn.dev/tikuwabu/articles/435d19e3c35208</link><guid isPermaLink="true">https://zenn.dev/tikuwabu/articles/435d19e3c35208</guid><pubDate>Thu, 03 Oct 2024 08:51:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KpdVY3Ww--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Engine%25E3%2581%25AE%25E8%25A8%25AD%25E8%25A8%2588%25E6%2596%25B9%25E9%2587%259D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxMjdmZjRiODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわぶ</dc:creator></item><item><title><![CDATA[RustでAWS公式のsdkを使ってMinioを操作する.md]]></title><description><![CDATA[
 1. 結論
今回の開発では、RustでAWS SDKを使用してMinioに接続し、S3互換のバケット操作を行うことに成功しました。resolver を利用してMinioのエンドポイントを指定し、非同期プログラミングのためにTokioを使用しています。
以下は、Minioに接続してバケットを作成する際の重要なコードです。
use aws_sdk_s3::{Client, Credentials, Region};
use aws_sdk_s3::config::Builder;
use aws_sdk_s3::endpoint::{Endpoint, ResolveEndpoint, ...]]></description><link>https://zenn.dev/rururu/articles/536330e23e2f8a</link><guid isPermaLink="true">https://zenn.dev/rururu/articles/536330e23e2f8a</guid><pubDate>Wed, 02 Oct 2024 22:27:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DeAd_LeB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7AWS%25E5%2585%25AC%25E5%25BC%258F%25E3%2581%25AEsdk%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Minio%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B.md%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuunag1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlY2E4N2JhNWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuunag1</dc:creator></item><item><title><![CDATA[Safetensors のヘッダーを読む]]></title><description><![CDATA[
 Safetensors とは
Safetensors は HuggingFace が開発している、主にテンソルを安全・高速に読み書きできるファイルフォーマットと、それを扱うためのライブラリです。
https://github.com/huggingface/safetensors
提供されている Python ライブラリでは、PyTorch や Tensorflow などとの互換性があるほか、pickle 形式のような任意のコードを実行する機能がなく比較的安全なため、最近の深層学習系のモデルはこの形式で配布されることが多くなりました。

 構造

Safetensorsのファイル構造...]]></description><link>https://zenn.dev/platina/articles/e65c73cb01a900</link><guid isPermaLink="true">https://zenn.dev/platina/articles/e65c73cb01a900</guid><pubDate>Wed, 02 Oct 2024 11:24:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CIGmC82I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Safetensors%2520%25E3%2581%25AE%25E3%2583%2598%25E3%2583%2583%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Plat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0MWUzM2RiMjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Plat</dc:creator></item><item><title><![CDATA[Amazon SQS を AWS SDK for Rust で操作してみる]]></title><description><![CDATA[
 記事の概要
こんにちは！
ファスト株式会社の yutak です。
今回はAWSが提供しているマネージド型メッセージキューサービスのAmazon SQSをRustから操作していきたいと思います。
クレートに関しては、AWSが提供しているAWS SDK for Rustを利用していきます。

 前提条件
前提条件は以下です。

Rustとcargoがインストールされていること
AWSのアクセスキーやシークレットなどのクレデンシャルが作成されていること


 動作環境
今回は、以下の環境で動作させました。

Rustバージョン: 1.81.0

利用するクレートは以下です。

aws-sd...]]></description><link>https://zenn.dev/fast/articles/0b0199f403b521</link><guid isPermaLink="true">https://zenn.dev/fast/articles/0b0199f403b521</guid><pubDate>Wed, 02 Oct 2024 04:43:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2ulPTOny--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Amazon%2520SQS%2520%25E3%2582%2592%2520AWS%2520SDK%2520for%2520Rust%2520%25E3%2581%25A7%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yutak%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzNjBmNTJkYmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yutak</dc:creator></item><item><title><![CDATA[GStreamerの概要とRustでの呼び出し方]]></title><description><![CDATA[GStreamerは、オープンソースのマルチメディアフレームワークであり、音声や動画のストリーミング、編集などを柔軟に行うことができます。噛み砕いて言うと「プログラマブルなFFmpeg」みたいな感じです。
8月に弊社で開催された開発合宿というイベントにて、AI対話ボットを作成するために利用しました。近いうちにAI対話ボットについてもご紹介できればと思っています。
本稿では、GStreamerの概要、Rustでの呼び出し方を紹介します。
環境はmacOS@12.7.4、GStreamer@1.24.6、Rust@1.79.0です。

 インストール
!
Homebrew経由だとwebrtc...]]></description><link>https://zenn.dev/micin/articles/2024-10-02_rikson_gstreamer-for-rustacean</link><guid isPermaLink="true">https://zenn.dev/micin/articles/2024-10-02_rikson_gstreamer-for-rustacean</guid><pubDate>Wed, 02 Oct 2024 02:12:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8vz08lN6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GStreamer%25E3%2581%25AE%25E6%25A6%2582%25E8%25A6%2581%25E3%2581%25A8Rust%25E3%2581%25A7%25E3%2581%25AE%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Riku%2520Takeuchi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmZDEzMmY4YTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BEMICIN%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxYzNlZGUwNTYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Riku Takeuchi</dc:creator></item><item><title><![CDATA[ド・モルガンの法則を Rust で証明してみた - const 編]]></title><description><![CDATA[ド・モルガンの法則を Rust で証明してみた の続編というか補足です。元記事
https://zenn.dev/mutex_inc/articles/de-morgan-ts
の冒頭に挙げられている、実行結果をもって証明とするコード：

TypeScript
const booleans = [true, false]

booleans.forEach(
  p =&gt;
    booleans.forEach(
      q =&gt; {
        console.assert(!(p || q) === !p &amp;&amp; !q)
        conso...]]></description><link>https://zenn.dev/kanal/articles/de-morgan-rust-const</link><guid isPermaLink="true">https://zenn.dev/kanal/articles/de-morgan-rust-const</guid><pubDate>Tue, 01 Oct 2024 21:34:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aXDsXhQo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2589%25E3%2583%25BB%25E3%2583%25A2%25E3%2583%25AB%25E3%2582%25AC%25E3%2583%25B3%25E3%2581%25AE%25E6%25B3%2595%25E5%2589%2587%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E8%25A8%25BC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520-%2520const%2520%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kanarus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0ZTQ5YjRjOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kanarus</dc:creator></item><item><title><![CDATA[言語処理系のツボ：制御フロー (WIP)]]></title><description><![CDATA[!
未完成記事です　残しておかないと存在を忘れてしまう……

『コンパイラ 原理・技法・ツール（第 2 版）』の、制御フローに関する部分の基本をおさえた以下の短いコードについて、説明する記事を書きます（予定）
fn main() {
    let input = "
      a b c
      if x
        d e
      else
        f g
      end
      h i j
      if y
        k l
        if z
          m
        else
          n o
       ...]]></description><link>https://zenn.dev/toga/articles/control-flow</link><guid isPermaLink="true">https://zenn.dev/toga/articles/control-flow</guid><pubDate>Tue, 01 Oct 2024 13:07:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tzTC5yrw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A8%2580%25E8%25AA%259E%25E5%2587%25A6%25E7%2590%2586%25E7%25B3%25BB%25E3%2581%25AE%25E3%2583%2584%25E3%2583%259C%25EF%25BC%259A%25E5%2588%25B6%25E5%25BE%25A1%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25BC%2520%2528WIP%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2581%258C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q1NTBlNjIzOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>とが</dc:creator></item><item><title><![CDATA[[Rust] sqlxで再利用可能なクエリを使う]]></title><description><![CDATA[
 はじめに
Sqlxはとても柔軟性が高く、細かい要件が必要な場合等にとても重宝します
（生SQLを書くのだから当たり前）
しかしながら、Sqlxにもいくつか問題点があります。
今回はsqlxを導入後１年程度経って顕在化してきた問題とその解決策について書いていきます。
sqlxを使う場合、sqlx::query!マクロ、あるいはsqlx::query_as!マクロを使うのが一般的です。
このマクロを使うことでクエリをコンパイル時に検証し、強力な型チェックを利用することができます。
しかしながらプロジェクトの成長に伴って行数、関わる人数が増えてきたときにこのマクロによって以下の問題が発生し...]]></description><link>https://zenn.dev/sakura/articles/bf5c8f818c6f39</link><guid isPermaLink="true">https://zenn.dev/sakura/articles/bf5c8f818c6f39</guid><pubDate>Mon, 30 Sep 2024 22:56:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Pj9xR89X--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520sqlx%25E3%2581%25A7%25E5%2586%258D%25E5%2588%25A9%25E7%2594%25A8%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjMTBmYTE3YTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakura</dc:creator></item></channel></rss>