<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 18 Dec 2024 10:02:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ゲーム開発における複合的なクエストの開始条件を表現するためにZodのRecursive Typeを利用してみる]]></title><description><![CDATA[RPGなどのゲームにおいて条件を満たしたら何かができるというような条件判定を行うことがしばしばあります。例えばクエストをクリアするためにはほかのクエストをクリアしてなければならないなどです。
そうしたときに条件を以下のようなExpression(式)を組み合わせたJSONで記述できるとうれしいです。
export const quests: Quest[] = [
  // ...
  {
    id: 3,
    name: "宝がある廃墟の炭鉱の島を攻略しろ",
    clearCondition: {
      kind: AND_KIND, // argumentsの条件...]]></description><link>https://zenn.dev/rmake_blog/articles/e083cd554d3c87</link><guid isPermaLink="true">https://zenn.dev/rmake_blog/articles/e083cd554d3c87</guid><pubDate>Wed, 18 Dec 2024 03:34:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hGmT89Rc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E8%25A4%2587%25E5%2590%2588%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E9%2596%258B%25E5%25A7%258B%25E6%259D%25A1%25E4%25BB%25B6%25E3%2582%2592%25E8%25A1%25A8%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25ABZod%25E3%2581%25AERecursive%2520Type%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:dycoon%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4NWY4NjhhOTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Rmake%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pwbnA2bGplV2I2UkJYOGZTMk5DbU9XOGljU0tVUTZCdlVucndvbkE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dycoon</dc:creator></item><item><title><![CDATA[React Nativeのユニットテストを理解する]]></title><description><![CDATA[この記事はReact Native 全部俺 Advent Calendar 18目の記事です。
https://adventar.org/calendars/10741

 このアドベントカレンダーについて
このアドベントカレンダーは @itome が全て書いています。
基本的にReact NativeおよびExpoの公式ドキュメントとソースコードを参照しながら書いていきます。誤植や編集依頼はXにお願いします。

 React Nativeのユニットテストを理解する
React Nativeアプリケーションのテストは、一般的なReactアプリケーションと同様にJestを使って書くことがで...]]></description><link>https://zenn.dev/woodstock_tech/articles/9b1da2aafdc9c4</link><guid isPermaLink="true">https://zenn.dev/woodstock_tech/articles/9b1da2aafdc9c4</guid><pubDate>Wed, 18 Dec 2024 02:15:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ROjTbBX2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Native%25E3%2581%25AE%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Takeshi%2520Tsukamoto%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MTQzNDllZDIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:woodstock.club%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmMDM0ODM0YzMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takeshi Tsukamoto</dc:creator></item><item><title><![CDATA[Remix v2 と組み合わせて Ladle を使ってみる]]></title><description><![CDATA[
 はじめに
この記事は「コネヒト Advent Calender 2024」の17日目の記事です。
https://adventar.org/calendars/10480

 Ladle とは？
Storybookにインスパイアされたコンポーネントカタログのライブラリで、ReactベースのJavaScript / TypeScriptのプロジェクト上で使用することができます。
Storybookと同じような書き味のstoriesファイルを用いてコンポーネントのカタログを作成できるほか、Viteなどのビルドツールにも対応しており、MSWやPlaywrightを用いたスナップショットテス...]]></description><link>https://zenn.dev/takfjp/articles/a0d4a512dd1c16</link><guid isPermaLink="true">https://zenn.dev/takfjp/articles/a0d4a512dd1c16</guid><pubDate>Wed, 18 Dec 2024 01:58:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6dK63Fib--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Remix%2520v2%2520%25E3%2581%25A8%25E7%25B5%2584%25E3%2581%25BF%25E5%2590%2588%25E3%2582%258F%25E3%2581%259B%25E3%2581%25A6%2520Ladle%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takfjp%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjMDlkM2ViNjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takfjp</dc:creator></item><item><title><![CDATA[実例 ExtractKeyOf / TypeScript一人カレンダー]]></title><description><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 (@okunokentaro) です。本記事はTypeScript 一人 Advent Calendar 2024の8日目です。昨日は『StrictOmit』を紹介しました。

 Extractの弱点とキー操作
昨日はOmit&lt;T, K&gt;型について、その弱点とStrictOmit型による克服を紹介しましたが、同様の問題はExtract&lt;T, U&gt;型にも潜んでいます。Extract&lt;T, U&gt;は、共通する部分（交差部分）を取り出すためのユーティリティですが、Omit型がキーに特化しているのに対し、Extrac...]]></description><link>https://zenn.dev/okunokentaro/articles/01jf78zf9dj9zmtr0rr0v9c1xr</link><guid isPermaLink="true">https://zenn.dev/okunokentaro/articles/01jf78zf9dj9zmtr0rr0v9c1xr</guid><pubDate>Wed, 18 Dec 2024 00:58:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kPFMRk_o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259F%25E4%25BE%258B%2520ExtractKeyOf%2520%252F%2520TypeScript%25E4%25B8%2580%25E4%25BA%25BA%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okunokentaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyY2RlNDNmOWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okunokentaro</dc:creator></item><item><title><![CDATA[StrictOmit / TypeScript一人カレンダー]]></title><description><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 (@okunokentaro) です。本記事はTypeScript 一人 Advent Calendar 2024の7日目です。昨日は『DeepReadonly』を紹介しました。

 Omit&lt;T, K&gt;の弱点
2年前のカレンダーでは、Omit&lt;T, K&gt;型を紹介したことがあります。Omit&lt;T, K&gt;は、Tから指定したキーKを除外した新たな型を返す便利なユーティリティです。ところが、Omit&lt;T, K&gt;には弱点があります。
Pick&lt;T, K&gt;が指定したキーKが存在しない場合にエラ...]]></description><link>https://zenn.dev/okunokentaro/articles/01jf78zf9dg81gk5p03nh5b4ht</link><guid isPermaLink="true">https://zenn.dev/okunokentaro/articles/01jf78zf9dg81gk5p03nh5b4ht</guid><pubDate>Wed, 18 Dec 2024 00:58:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FCtTyIDV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:StrictOmit%2520%252F%2520TypeScript%25E4%25B8%2580%25E4%25BA%25BA%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okunokentaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyY2RlNDNmOWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okunokentaro</dc:creator></item><item><title><![CDATA[こう変わった！App Router時代のフォーム開発]]></title><description><![CDATA[こんにちは！令和トラベル FrontendエンジニアのFukudaが、App Routerでのフォーム開発ついてご紹介します。ぜひ最後までご覧ください！
フォーム開発において、Next.jsのApp Routerは大きな可能性を広げました。特に、Server Actionsや新しい便利なフックの追加により、フォーム送信や状態管理、バリデーションが格段にシンプルで強力になっています。Pages Routerと比べて何が変わったのか、そしてどのように実装が進化したのか、実例を交えて見ていきましょう。

 フォーム開発における新機能

 1. Server Actions
Server Act...]]></description><link>https://zenn.dev/reiwatravel/articles/f1cf596c61f61b</link><guid isPermaLink="true">https://zenn.dev/reiwatravel/articles/f1cf596c61f61b</guid><pubDate>Wed, 18 Dec 2024 00:50:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--de5n6YMs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2593%25E3%2581%2586%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25EF%25BC%2581App%2520Router%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:akt_111%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1ZWFiNjc3MGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25BB%25A4%25E5%2592%258C%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hRQU04eWZWblJRVDJEYVozNHhyUnJ2UFFvY05ZYkdUeFV4Vi11S2c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akt_111</dc:creator></item><item><title><![CDATA[Tauri(Rust)、Qwik、Bunを使って爆速なクロスプラットフォームアプリ（デスクトップ、スマホ、Web）を作る（環境構築編）]]></title><description><![CDATA[
 はじめに
今回はTauri、Qwik、Bunを使って爆速なクロスプラットフォームアプリ（デスクトップ、スマホ、Web）を作るための環境構築方法を紹介する。

 今回の技術スタック

 Rustとは
ブラウザのFirefoxを開発しているMozillaが開発したプログラミング言語。
所有権システムなど独特な方法でメモリ安全性を保証しつつ処理を高速化するための機能が備わっている。
バックエンドとしてLLVMを使っているため、さまざまなプラットフォームに対応でき、ビルド時に高度な最適化が可能である。

 TypeScriptとは
JavaScriptの構文を拡張し、より高度な記述ができるよ...]]></description><link>https://zenn.dev/varubogu/articles/tauri-qwik-bun</link><guid isPermaLink="true">https://zenn.dev/varubogu/articles/tauri-qwik-bun</guid><pubDate>Tue, 17 Dec 2024 19:31:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FyUjmQDp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%2528Rust%2529%25E3%2580%2581Qwik%25E3%2580%2581Bun%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E7%2588%2586%25E9%2580%259F%25E3%2581%25AA%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25EF%25BC%2588%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2580%2581%25E3%2582%25B9%25E3%2583%259E%25E3%2583%259B%25E3%2580%2581Web%25EF%25BC%2589...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25B4%25E3%2582%25A1%25E3%2583%25AB%25E3%2583%259C%25E3%2583%25BC%25E3%2582%25B0%2540toyosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqUWptMkNsYkdRV21tdzk1UElEVkRpUmRzUU1Ec3lfcEEtX0ZOMGc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヴァルボーグ@toyosuke</dc:creator></item><item><title><![CDATA[残余プロパティの命名は 「...rest」 に統一しませんか？]]></title><description><![CDATA[
 はじめに
今回はタイトルにあるように、命名に関する話を簡単に書こうと思います。JavaScriptやTypeScriptには、分割代入という構文があります。これはとても便利で、多くの開発現場で利用されているでしょう。例えば、Reactコンポーネントでpropsを扱う際によく用いられるのがオブジェクトの分割代入です。特定のプロパティ（例えばhoge）だけを抜き出し、残りのプロパティをまとめて扱いたいときに、以下のようなコードを書くことができます。
const MyComponent = (props) =&gt; {
    const { hoge, ...rest } = prop...]]></description><link>https://zenn.dev/ackndev/articles/052fdaab6a8bfc</link><guid isPermaLink="true">https://zenn.dev/ackndev/articles/052fdaab6a8bfc</guid><pubDate>Tue, 17 Dec 2024 15:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WCn5SxP2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AE%258B%25E4%25BD%2599%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25AE%25E5%2591%25BD%25E5%2590%258D%25E3%2581%25AF%2520%25E3%2580%258C...rest%25E3%2580%258D%2520%25E3%2581%25AB%25E7%25B5%25B1%25E4%25B8%2580%25E3%2581%2597%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:a2c%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4OGUzNjE0MzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>a2c</dc:creator></item><item><title><![CDATA[長期的な運用を見据えたリッチテキストエディタの選定]]></title><description><![CDATA[この記事は、[ispec] 医療に向き合う技術者集団の戦録 Advent Calendar 2024 の17日目の記事です！
https://adventar.org/calendars/10776

 はじめに
こんにちは！
最近、リッチテキストエディタの選定と実装を行う機会がありました。そこで今回は、どのような点を考慮して選定を行ったのか、当時作成したADR (Architecture Decision Record) を元にご紹介していきます！✌️

 開発環境

 フロントエンド

React
Remix (現在の React Router)


 バックエンド

Kotlin
...]]></description><link>https://zenn.dev/ispec_inc/articles/selecting-rich-text-editor</link><guid isPermaLink="true">https://zenn.dev/ispec_inc/articles/selecting-rich-text-editor</guid><pubDate>Tue, 17 Dec 2024 14:38:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ApmhnOdE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2595%25B7%25E6%259C%259F%25E7%259A%2584%25E3%2581%25AA%25E9%2581%258B%25E7%2594%25A8%25E3%2582%2592%25E8%25A6%258B%25E6%258D%25AE%25E3%2581%2588%25E3%2581%259F%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2581%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2581%25AE%25E9%2581%25B8%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Masaharu%2520Hori%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmN2Y5YzE4ZTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ispec%2520inc.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsMTBYY3R4TlFyTVZlODUyXzd4ZUtRNEJOR19PaVI2VU1nQlhlaGc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaharu Hori</dc:creator></item><item><title><![CDATA[node.jsを使って簡単なAPIサーバーを構築する方法(Express + TypeScript + Vite)]]></title><description><![CDATA[この記事はRUNTEQアドベントカレンダー シーズン3 の 15日目の記事です。
https://qiita.com/advent-calendar/2024/runteq

 はじめに
現在フロントエンドエンジニアとして働いているゆず (@yuzunosk55)と申します。
RUNTEQ AdventCalendar 2024 に参加させていただきました。
最近はNode.jsを使ったバックエンド開発の学習を進めているので、今回の記事では簡単なAPIサーバーの構築方法について学んだことをまとめていこうと思います。
まだまだ未熟者のため、構築内容の不備や間違っている箇所など多数あると思い...]]></description><link>https://zenn.dev/yuzunosk55/articles/fecce3c722a1bf</link><guid isPermaLink="true">https://zenn.dev/yuzunosk55/articles/fecce3c722a1bf</guid><pubDate>Tue, 17 Dec 2024 14:21:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EmFCa8bb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:node.js%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AAAPI%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2528Express%2520%252B%2520TypeScript%2520%252B%2520Vite%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%259A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MjIzZjAxZWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆず</dc:creator></item><item><title><![CDATA[Spotifyの再生トースト風UIを作ってみる - day2 -]]></title><description><![CDATA[以下の記事の続きです。
https://zenn.dev/shunsuke108m/articles/a1845c81215324
1日1UI。
習慣化のために小さい一部分から始めて、徐々に大きなものを早く正確に作れるようにしていきたいです。
まずは小さく、普段使っているSpotifyの再生トーストを作ってみます


 今日やりたいこと

スクロールバーの解決

props問題じゃなくて普通にCSSミスってる気がしてきた


isPlayingがtrueだったら再生秒数を経過させてスクロールバーにも反映させる挙動作る
styled-componentちゃんと勉強する
useEffectを...]]></description><link>https://zenn.dev/shunsuke108m/articles/d1a8adcdf95007</link><guid isPermaLink="true">https://zenn.dev/shunsuke108m/articles/d1a8adcdf95007</guid><pubDate>Tue, 17 Dec 2024 14:18:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PM36Dlja--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spotify%25E3%2581%25AE%25E5%2586%258D%25E7%2594%259F%25E3%2583%2588%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E9%25A2%25A8UI%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2520-%2520day2%2520-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%25AE%25E7%2594%25B0%25E5%25B3%25BB%25E8%25BC%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG9Jdy1QSHNvSW1WVGpKTmxFbkhnZkRyZ0pBVlRSQzhIaWMweDVJUmZLS3hlUjZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宮田峻輔</dc:creator></item><item><title><![CDATA[Node.js で Google Drive API を使うときのつまづきポイントなどメモ]]></title><description><![CDATA[
 はじめに
ゆるいです。
どこに書くか迷いましたが、見返しやすいのが一番ということでここに。

 Node.js と npm
TypeScript で検索すると npm が出てきて、npm で検索すると Node.js が出てきて、結局はじめは何をしないといけないのか、ちょっと迷いました。結論としては、はじめに以下 Node.js の公式サイトからファイルをダウンロードしてきて、インストールします。ダウンロードページにちゃんと「Node.js includes npm」と書いてありました。困ったときは公式サイトをよく読もう。

Node.js — Run JavaScript Ever...]]></description><link>https://zenn.dev/k586/articles/cc1c517cb4223f</link><guid isPermaLink="true">https://zenn.dev/k586/articles/cc1c517cb4223f</guid><pubDate>Tue, 17 Dec 2024 14:00:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3oF7_mdz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520%25E3%2581%25A7%2520Google%2520Drive%2520API%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%25A5%25E3%2581%258D%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AA%25E3%2581%25A9%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwNTgyNTgzMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k586</dc:creator></item><item><title><![CDATA[Jotai のステートってどこに定義するべき？]]></title><description><![CDATA[普段 React でアプリ開発をしており、Jotai ライブラリを用いています。
https://jotai.org/
Jotai では atom を用いて、グローバルな状態管理を始めとした色々なことができます。
（ Jotai そのものについての詳細は公式サイトや他記事を参考にしてください 🙏 ）
const countAtom = atom(0);
さて早速ですが本題です。☝️この定義、どのディレクトリにあるどのファイルに定義すればよいのでしょうか？
私はなんとなく、 atom 定義専用のディレクトリを作りたいです……この気持ちは一体何なんでしょう。これを掘り下げて自分なりに納得した...]]></description><link>https://zenn.dev/noalone1111/articles/f922b2ce544706</link><guid isPermaLink="true">https://zenn.dev/noalone1111/articles/f922b2ce544706</guid><pubDate>Tue, 17 Dec 2024 13:46:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kcl33kcX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jotai%2520%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25A9%25E3%2581%2593%25E3%2581%25AB%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258D%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ktym%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5MDIxYjdjMWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ktym</dc:creator></item><item><title><![CDATA[Typescript型ガード（Object編）]]></title><description><![CDATA[Typescriptに触れた最初のころから「型ガード」という言葉は知っていましたが、なんとなくで利用していました。
最近になって汎用的な型ガードの使い方を見つけたので、備忘録としてブログに残します。

 型ガードって
型ガード=ある値が特定の型であることを保証するものです。
特定の型の場合は○○を、そうでなければ××のように制御したい時ってありますよね？
型ガードはこの制御を助けます。

 Objectの判定
まずはよくあるユースケースは、その値が〇〇型かどうかを判定するケースです。
例えば下記のPerson型の例で考えてみましょう。
type Person = {
    name: ...]]></description><link>https://zenn.dev/aki_chan_desu/articles/e292bca02efcb9</link><guid isPermaLink="true">https://zenn.dev/aki_chan_desu/articles/e292bca02efcb9</guid><pubDate>Tue, 17 Dec 2024 13:29:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hUgBaPSa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%25E5%259E%258B%25E3%2582%25AC%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Object%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25A2%25E3%2582%25AD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA0NTNhNzU0NWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>アキ</dc:creator></item><item><title><![CDATA[Recoil が React 19 で動かないらしいので Jotai に移行した]]></title><description><![CDATA[
 背景
先日 SNS で 「React 19 で Recoil が動かないので剥がしている」 という情報を目にしました。
https://x.com/kiririLee/status/1866843717086437603
私が関わっているプロジェクトで Recoil を使用しているものがあるのですが、React 19 で動かないというのはこの資料を見て初めて知ったので驚きました。
実際に React 19 にアップグレードしてみたところ、確かに画面が真っ白になってしまい、コンソールを見ると Uncaught TypeError: Cannot destructure property...]]></description><link>https://zenn.dev/genda_jp/articles/0084de27e23ab2</link><guid isPermaLink="true">https://zenn.dev/genda_jp/articles/0084de27e23ab2</guid><pubDate>Tue, 17 Dec 2024 10:52:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NlYv5Pav--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Recoil%2520%25E3%2581%258C%2520React%252019%2520%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%2520Jotai%2520%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:shinnoki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNiM2M1MjhkNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:GENDA%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pnSzV4VGRiLUY3REh5XzM5eTdwQ2J6QVd3eGtacTYtMTVIZnZpVGc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shinnoki</dc:creator></item><item><title><![CDATA[infer の使い方を理解する]]></title><description><![CDATA[
 なぜ
フロントで swagger の json からレスポンスとクエリの型を取得するさいに infer を使用して型安全に実装したが、 infer の使用方法で理解不足だった箇所をまとめることにより理解を深める。

 各場所での記述のバラツキ

openpapi.d.ts
type paths = {
  "/api/user": {};
  "/api/posts": {};
};


api.ts
const API_PAHT ={
  USER: 'api/user',
  CORP: 'api/corp'
}


 実装

 失敗例
swagger の方に不要な / が付いて...]]></description><link>https://zenn.dev/t_hashi/articles/17d97a99a3ac9f</link><guid isPermaLink="true">https://zenn.dev/t_hashi/articles/17d97a99a3ac9f</guid><pubDate>Tue, 17 Dec 2024 08:40:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uK1m1pW7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:infer%2520%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t_hashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JyLVk0Wll5NGd0Z0ljbFhFVUtYX2N4ZlNTaHZFd0NUcldlVkZHSWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t_hashi</dc:creator></item><item><title><![CDATA[自作Raycast Extensionで日常業務を効率化するヒント]]></title><description><![CDATA[
 はじめに
この記事は、Raycast Advent Calendar 2024の17日目の記事です。
昨日は @ys64 さんによるホットキーでアプリをアクティブにする方法でした。
Raycastは、macOS上でさまざまな操作を素早く実行できるランチャーアプリです。しかし、標準機能やStoreで入手できるExtensionだけでは「もう少しこうしたい！」と思う場面もあるかもしれません。そんなときは、自分でExtensionを作成してしまうのが、最も手っ取り早い解決策です。
この記事では、自作のRaycast Extensionを活用して、日常業務の手間を軽減する一例をご紹介します。...]]></description><link>https://zenn.dev/smasato/articles/dca85f18dd96ef</link><guid isPermaLink="true">https://zenn.dev/smasato/articles/dca85f18dd96ef</guid><pubDate>Tue, 17 Dec 2024 07:47:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qle0AxUf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CRaycast%2520Extension%25E3%2581%25A7%25E6%2597%25A5%25E5%25B8%25B8%25E6%25A5%25AD%25E5%258B%2599%25E3%2582%2592%25E5%258A%25B9%25E7%258E%2587%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2583%2592%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masato%2520Sugiyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1ZmFiNzc3YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masato Sugiyama</dc:creator></item><item><title><![CDATA[DeepReadonly / TypeScript一人カレンダー]]></title><description><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 (@okunokentaro) です。本記事はTypeScript 一人 Advent Calendar 2024の6日目です。昨日は『実例 neverUsed(), $()』を紹介しました。

 DeepReadonlyを求める理由
2年前のカレンダーでReadonly型について紹介したことがあります。筆者はReadonly型を好んでおり、特殊なアルゴリズム処理や複雑なリクエスト生成の処理を除けば、ほぼ全てのオブジェクトは不変であってほしいと感じており、積極的にReadonlyを指定しています。基本的に、データ構造に再代入やミューテーション...]]></description><link>https://zenn.dev/okunokentaro/articles/01jf78zf9decb4k3zt7ferhyhn</link><guid isPermaLink="true">https://zenn.dev/okunokentaro/articles/01jf78zf9decb4k3zt7ferhyhn</guid><pubDate>Tue, 17 Dec 2024 05:26:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GgHmG8f8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DeepReadonly%2520%252F%2520TypeScript%25E4%25B8%2580%25E4%25BA%25BA%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okunokentaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyY2RlNDNmOWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okunokentaro</dc:creator></item><item><title><![CDATA[実例 neverUsed(), $() / TypeScript一人カレンダー]]></title><description><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 (@okunokentaro) です。本記事はTypeScript 一人 Advent Calendar 2024の5日目です。昨日は『文字列や配列の最大長が決まっていないときの対策』を紹介しました。

 valibot利用上のさらなる工夫
昨日に続き、valibotを使う上で役立つちょっとした工夫を紹介します。今回取り上げるのはneverUsed()と$()という2つのユーティリティです。

 neverUsed(): 使用しないプロパティを明示する
大規模なアプリケーションを開発していると、社内外の多種多様なシステムと接続する場面に遭遇し...]]></description><link>https://zenn.dev/okunokentaro/articles/01jf78zf9dak8hhe9bn0mye00z</link><guid isPermaLink="true">https://zenn.dev/okunokentaro/articles/01jf78zf9dak8hhe9bn0mye00z</guid><pubDate>Tue, 17 Dec 2024 05:26:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---Pa2FIjX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259F%25E4%25BE%258B%2520neverUsed%2528%2529%252C%2520%2524%2528%2529%2520%252F%2520TypeScript%25E4%25B8%2580%25E4%25BA%25BA%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okunokentaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyY2RlNDNmOWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okunokentaro</dc:creator></item><item><title><![CDATA[文字列や配列の最大長が決まっていないときの対策 / TypeScript一人カレンダー]]></title><description><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 (@okunokentaro) です。本記事はTypeScript 一人 Advent Calendar 2024の4日目です。昨日は『応用編 Valid branded types』を紹介しました。

 スキーマ記述と不明確な上限値の問題
前回までの記事ではvalibotを使った型定義とランタイムバリデーションの一元化や、Branded typesの応用について紹介してきました。こうしたアプローチでは、TypeScriptの型システム上で明確な制約を提示するために、string()やnumber()、pipe()やbrand()、そしてmi...]]></description><link>https://zenn.dev/okunokentaro/articles/01jf78zf9d3ctzwdmbyg4sbsga</link><guid isPermaLink="true">https://zenn.dev/okunokentaro/articles/01jf78zf9d3ctzwdmbyg4sbsga</guid><pubDate>Tue, 17 Dec 2024 05:26:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TU2vCYEe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2584%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AE%25E6%259C%2580%25E5%25A4%25A7%25E9%2595%25B7%25E3%2581%258C%25E6%25B1%25BA%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%25AF%25BE%25E7%25AD%2596%2520%252F%2520TypeScript%25E4%25B8%2580%25E4%25BA%25BA%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okunokentaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyY2RlNDNmOWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okunokentaro</dc:creator></item></channel></rss>