<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/75b80a5922.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 16 Feb 2025 09:01:24 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rescale の Docker で NVIDIA NGC を使う: NVIDIA Modulus Getting Started を例に]]></title><description><![CDATA[
 この記事について
Rescale の計算ノードにインストールされた Docker を使用して, NVIDIA NGC からコンテナを持ってきて実行する方法を示します。実行する題材として, NVIDIA Modulus Getting Started の a quick installation check をやってみます

 事前準備: Docker の有効化
Rescale のジョブ設定時のソフトウェア一覧に Docker がありますが、デフォルトではグレーアウトされています

グレーアウトされている Docker のアイコンをクリックして, Software Request を送...]]></description><link>https://zenn.dev/cloudyfluid/articles/da1764ae1f6040</link><guid isPermaLink="true">https://zenn.dev/cloudyfluid/articles/da1764ae1f6040</guid><pubDate>Sun, 16 Feb 2025 04:06:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YLtbS8OL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rescale%2520%25E3%2581%25AE%2520Docker%2520%25E3%2581%25A7%2520NVIDIA%2520NGC%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%253A%2520NVIDIA%2520Modulus%2520Getting...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cloudyfluid%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3M2I2MzU3NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cloudyfluid</dc:creator></item><item><title><![CDATA[Difyで作ったLLM ApplicationをAzure Kubernetes Serviceにデプロイする方法]]></title><description><![CDATA[

 はじめに
Dify はみなさまご存知でしょうか。
https://dify.ai/jp
LLM のアプリケーションがノーコード(ローコード)で簡単に作れるツールです。
このツールを使っている方が最近増えてきており、且つ Azure 上で動かしたいというご要望をいただいたので、今回は Dify を Azure Kubernetes Service(AKS)にデプロイして本番環境で使う手順をご紹介します。

 Dify 環境構築
まずは Dify を Web 上ではなく、ローカルで動かすために Docker を使って環境構築を行います。
以下のサイトへアクセスして、Dify のリポジト...]]></description><link>https://zenn.dev/microsoft/articles/dify_on_azure</link><guid isPermaLink="true">https://zenn.dev/microsoft/articles/dify_on_azure</guid><pubDate>Sat, 15 Feb 2025 05:21:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HLhVvOeO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dify%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259FLLM%2520Application%25E3%2582%2592Azure%2520Kubernetes%2520Service%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yusuke%2520Satake%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzZDNiN2I3OGYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Microsoft%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczMjQwNDhhMDkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke Satake</dc:creator></item><item><title><![CDATA[Docker環境にMongoDBを構築する方法]]></title><description><![CDATA[ご覧いただきありがとうございます。Furuyaです。
今回は、Docker環境にMongoDBを構築する方法についてまとめます。

 環境
PC：MacBook Pro 13-inch, 2020, Four Thunderbolt 3 ports
macOS：Sonoma 14.6.1
Shell: zsh

 MongoDBのDockerコンテナ環境構築

 1. ディレクトリ構成
まず、以下のようなディレクトリ構成で作業を進めます。
project-root/
├── .docker/
│   ├── Dockerfile
├── docker-compose.yml
├── ch...]]></description><link>https://zenn.dev/k0y0k0y0/articles/article_20250208</link><guid isPermaLink="true">https://zenn.dev/k0y0k0y0/articles/article_20250208</guid><pubDate>Sat, 15 Feb 2025 02:57:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--evRvfcrP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25ABMongoDB%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takuma%2520Furuya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2YTg5YjIwNjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takuma Furuya</dc:creator></item><item><title><![CDATA[Autonome+Agent Kitを使ってCrypto AI Agentを作成する]]></title><description><![CDATA[
 AutonomeでAgent Kitを使う
この記事は2025年2月時点の情報です。
最近話題の「AIエージェント」を手軽にデプロイできる
プラットフォームとして注目されるのが**Autonome（オートノーム）**です。
本記事では、Autonome上でAgent Kitを利用して
AIエージェントを作成し、デプロイする方法を解説します。

 Autonomeとは
AutonomeはAltLayer社が提供する
自律型AIエージェントの作成とデプロイのための
プラットフォームです。
Web上のダッシュボードから簡単にエージェントを起動でき、
インフラ構築の手間が不要です。
Auto...]]></description><link>https://zenn.dev/bull/articles/how-to-integrate-agentkit-to-autonome</link><guid isPermaLink="true">https://zenn.dev/bull/articles/how-to-integrate-agentkit-to-autonome</guid><pubDate>Sat, 15 Feb 2025 01:39:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CSUy8h-i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Autonome%252BAgent%2520Kit%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Crypto%2520AI%2520Agent%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bull%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g2MllRUHZOMXdGR25zMmFxNEpvOWI0VW96UTY4b3NfdlBOOFFqZUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bull</dc:creator></item><item><title><![CDATA[Ansible で Docker をインストールしてみる]]></title><description><![CDATA[
 環境
Ansible実行環境は、Raspberry Pi上のDockerコンテナ上のAmazonLinux 2023
$ ansible --version
ansible [core 2.15.13]
  config file = None
  configured module search path = ['/home/docker/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/local/lib/python3....]]></description><link>https://zenn.dev/mnod/articles/c2d4fef799b22a</link><guid isPermaLink="true">https://zenn.dev/mnod/articles/c2d4fef799b22a</guid><pubDate>Fri, 14 Feb 2025 20:53:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5QAupHhR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ansible%2520%25E3%2581%25A7%2520Docker%2520%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mnod%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyOTA1NTFiNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mnod</dc:creator></item><item><title><![CDATA[React + Dockerのホットリロード（Vite)]]></title><description><![CDATA[3ステップで進めます。
手順

vite.config.tsファイルの修正
Dockerfileの作成
docker-compose.ymlの作成

これで作ったと思われます。
npx create-vite@latest frontend --template react-ts
cd frontend
npm install

 ディレクトリ構成
.
├── backend/
│   └── ## Go言語の予定
├── frontend/
│   ├── node_modules
│   ├── public
│   ├── src/
│   │   ├── ## この中に処理ファイ...]]></description><link>https://zenn.dev/shuji0425/articles/eddae9d3b0c47c</link><guid isPermaLink="true">https://zenn.dev/shuji0425/articles/eddae9d3b0c47c</guid><pubDate>Fri, 14 Feb 2025 16:52:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tu5qZx9c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520Docker%25E3%2581%25AE%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Vite%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWpMMHlaQk1VM0ZWM29lOWJvMy1pZXRRWW9ZNXQ5aFU5Tl9adVpKZjd0bDNySHR3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>シュージ</dc:creator></item><item><title><![CDATA[Dockerfileセキュリティ完全ガイド ｜脆弱性を防ぐ10のベストプラクティス]]></title><description><![CDATA[
 はじめに
Dockerをよく使う方なら避けては通れない道、Dockerコンテナのセキュリティについてまとめると同時に、Dockerfileのベストプラクティスに焦点を当てていこうと思います！

 Dockerのセキュリティとは
Dockerのセキュリティとは、Dockerコンテナのビルド、ランタイム、オーケストレーションに関する側面を指します。
これには、Dockerベースイメージのセキュリティ対策、ユーザー権限の管理、Dockerデーモンの設定、コンテナのCPU制御など、ランタイムにおけるセキュリティ対策が含まれます。
さらに、大規模なDockerコンテナのオーケストレーションに関...]]></description><link>https://zenn.dev/fuuji/articles/426a8ca994607b</link><guid isPermaLink="true">https://zenn.dev/fuuji/articles/426a8ca994607b</guid><pubDate>Fri, 14 Feb 2025 16:10:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_zeGTFvK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2520%25EF%25BD%259C%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2582%2592%25E9%2598%25B2%25E3%2581%259010%25E3%2581%25AE%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Fuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRhYTQ2NzZjNDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Fuji</dc:creator></item><item><title><![CDATA[Go言語＋Dockerのホットリロード（Air）]]></title><description><![CDATA[ホットリロードをしたかったので、Airを使ってやってみました。
3ステップで進みます。

Airを入れる
Dockerfileを記述する
docker-compose.ymlを書く


 ディレクトリ構成
ホットリロードのときはディレクトリ構成が重要なので最初に記載します。
参考にしてください。
フロントエンドをReact、バックエンドをGoにしたくて下記構成にしています。
.
├── backend/
│   ├── Dockerfile
│   ├── tmp/
│   │   └── main ## air コマンドでtmpとmainは勝手に作られる
│   ├── .air.to...]]></description><link>https://zenn.dev/shuji0425/articles/69e8bcd04be429</link><guid isPermaLink="true">https://zenn.dev/shuji0425/articles/69e8bcd04be429</guid><pubDate>Fri, 14 Feb 2025 14:52:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8-Eu9yZr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%25E8%25A8%2580%25E8%25AA%259E%25EF%25BC%258BDocker%25E3%2581%25AE%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Air%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWpMMHlaQk1VM0ZWM29lOWJvMy1pZXRRWW9ZNXQ5aFU5Tl9adVpKZjd0bDNySHR3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>シュージ</dc:creator></item><item><title><![CDATA[Docker Desktopを利用してPytorch環境の構築するメモ]]></title><description><![CDATA[環境を構築するための簡単なメモです。Dockerの仕組みなどの解説は省略します。

 STEP1:GPUドライバをインストール
https://www.nvidia.com/ja-jp/drivers/
「ドライバーの手動検索」より使用するGPUを検索し手順にしたがいドライバーのインストーラーをダウンロードする。基本的には、最新版をダウンロードで問題ない。
インストーラーを実行しドライバーをインストールする。完了後、コマンドプロンプトを起動し以下のコマンドを実行し情報が表示されているとドライバーが問題なくインストールされている。右上の「CUDA Version」が「このCUDAのバージョ...]]></description><link>https://zenn.dev/faceshiba/articles/a82d309aa4f1d9</link><guid isPermaLink="true">https://zenn.dev/faceshiba/articles/a82d309aa4f1d9</guid><pubDate>Fri, 14 Feb 2025 03:08:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F-GrnIo9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Desktop%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6Pytorch%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BA%25BA%25E9%259D%25A2%25E6%259F%25B4%25E7%258A%25AC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FhNmQxMTQwYWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>人面柴犬</dc:creator></item><item><title><![CDATA[コンテナ内でuvicorn経由でfastAPIを動かす場合のメモ]]></title><description><![CDATA[
 概要
docker内でuvicorn経由でfastAPIを動かす場合のメモです。
loggingの設定や、環境に応じた切り替えなどを考慮して、uvicornの起動をmain.pyから行うようにしました。

 構成
構成は以下の通りです。
app
 ┣ src
 ┃ ┣ main.py
 ┣ Dockerfile
 ┣ docker-compose.yaml
 ┣ log_config.yaml
 ┗ requirements.txt
Dockefileは以下の通りです。
main.pyからuvicornを起動するようにしているので、単純なコマンドになっています。
# ベースイメージと...]]></description><link>https://zenn.dev/kicchan/articles/0006_llyssm_docker_and_uvicorn</link><guid isPermaLink="true">https://zenn.dev/kicchan/articles/0006_llyssm_docker_and_uvicorn</guid><pubDate>Fri, 14 Feb 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vO0iXSAK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E5%2586%2585%25E3%2581%25A7uvicorn%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7fastAPI%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kicchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0NmExYWE4YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kicchan</dc:creator></item><item><title><![CDATA[【Error】exec: "rails": executable file not found in $PATH の修正方法]]></title><description><![CDATA[
 エラー内容
Docker環境でRailsのマイグレーションを実行しようとすると、以下のようなエラーメッセージが表示される場合があります。
OCI runtime exec failed: exec failed: unable to start container process: exec: "rails": executable file not found in $PATH: unknown
このエラーは、コンテナ内部で rails コマンドが見つからず、実行できなかったことを示しています。
原因としては、コンテナの PATH に Rails の実行ファイルが含まれていないか、...]]></description><link>https://zenn.dev/take_tech/articles/73466656ef5bea</link><guid isPermaLink="true">https://zenn.dev/take_tech/articles/73466656ef5bea</guid><pubDate>Thu, 13 Feb 2025 20:27:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--whe8dQAT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Error%25E3%2580%2591exec%253A%2520%2522rails%2522%253A%2520executable%2520file%2520not%2520found%2520in%2520%2524PATH%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Take%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyNThiNDQ2YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Take</dc:creator></item><item><title><![CDATA[Jetson AGX Orin に JetPack をインストールして初期設定をする]]></title><description><![CDATA[この記事は Jetson AGX Orin の使い方を書いていく の一部です。
基本的には公式ドキュメントを見れば初期設定方法はわかるので、本記事はあくまでも「私の場合はこうしている」という参考程度に公開します。
https://developer.nvidia.com/embedded/learn/get-started-jetson-agx-orin-devkit

 sudo をパスワード不要にする
セキュリティ上の懸念が無い利用環境では sudo のパスワードを不要にする。
$ sudo visudo
- %sudo   ALL=(ALL:ALL) ALL
+ %sudo   A...]]></description><link>https://zenn.dev/19931/articles/05e457498e2864</link><guid isPermaLink="true">https://zenn.dev/19931/articles/05e457498e2864</guid><pubDate>Thu, 13 Feb 2025 11:09:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DhsRYFsT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jetson%2520AGX%2520Orin%2520%25E3%2581%25AB%2520JetPack%2520%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ippei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhYTViMjM2ZWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ippei</dc:creator></item><item><title><![CDATA[Visual Studio CodeでTypeScriptのデバッグを行う方法]]></title><description><![CDATA[
 はじめに
本記事では、Visual Studio Code（VS Code）を使用してTypeScriptのデバッグを行う方法を紹介します。特に、docker-composeを使用してnginxコンテナ上で動作する環境で、VS CodeからChromeを起動し、TypeScriptファイルにブレークポイントを設定してデバッグする手順を詳しく説明します。

 フォルダ構成
以下のようなフォルダ構成でプロジェクトを構築しました。
.
├── docker-compose.yaml
├── nginx
│   ├── Makefile
│   ├── conf.d
│   │   └── ...]]></description><link>https://zenn.dev/tryeverything/articles/a0020_vscode_docker_typescript</link><guid isPermaLink="true">https://zenn.dev/tryeverything/articles/a0020_vscode_docker_typescript</guid><pubDate>Thu, 13 Feb 2025 10:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XXJuNdNy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Visual%2520Studio%2520Code%25E3%2581%25A7TypeScript%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2582%2593%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2NDc5YTUwMzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たんさん</dc:creator></item><item><title><![CDATA[Docker環境でWordPressのアップロード制限2MBを解除する最適な方法]]></title><description><![CDATA[DockerでWordPress環境を構築すると、デフォルトでファイルのアップロード制限が2MBに設定されています。
この制限を解除する具体的な手順を、Docker初心者や久しぶりに触る方にもわかりやすいように説明します。


 はじめに
まず、Dockerで稼働中のコンテナを確認し、WordPressコンテナのIDを特定します。
$ docker ps
以下のような出力が得られるはずです：
CONTAINER ID   IMAGE              COMMAND                  CREATED        STATUS         PORTS     ...]]></description><link>https://zenn.dev/daichirouesaka/articles/25214137dbdd1b</link><guid isPermaLink="true">https://zenn.dev/daichirouesaka/articles/25214137dbdd1b</guid><pubDate>Thu, 13 Feb 2025 05:51:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H3arSrAn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7WordPress%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E5%2588%25B6%25E9%2599%25902MB%25E3%2582%2592%25E8%25A7%25A3%25E9%2599%25A4%25E3%2581%2599%25E3%2582%258B%25E6%259C%2580%25E9%2581%25A9%25E3%2581%25AA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25B8%258A%25E5%259D%2582%25E3%2583%2580%25E3%2582%25A4%25E3%2583%2581%25E3%2583%25AD%25E3%2582%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiMmUxOWU1ZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>上坂ダイチロウ</dc:creator></item><item><title><![CDATA[【Dcoker】Docker, Dockerfile, Docker Compose, Kubernetesの簡潔なまとめ]]></title><description><![CDATA[Docker関連の情報を整理します。

 1. Docker


概要:
環境を「コンテナ」という単位でパッケージ化し、環境依存性を解消するためのプラットフォーム


役割:


一貫性の提供: 開発、テスト、本番環境で同じコンテナを利用することで、環境間の差異をなくすことができる。

グローバル環境保護: グローバル環境をクリーンに保ち、干渉を防ぐ。




 2. Dockerfile


概要:
Dockerイメージをビルドするための命令を記述するテキストファイル。

役割:


環境構築の自動化: 必要なソフトや手順を自動で実行する

再現性: 一度定義したDockerfileか...]]></description><link>https://zenn.dev/yuto_mo/articles/edefc530f9d501</link><guid isPermaLink="true">https://zenn.dev/yuto_mo/articles/edefc530f9d501</guid><pubDate>Thu, 13 Feb 2025 02:43:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P5X0GEbl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Dcoker%25E3%2580%2591Docker%252C%2520Dockerfile%252C%2520Docker%2520Compose%252C%2520Kubernetes%25E3%2581%25AE%25E7%25B0%25A1%25E6%25BD%2594...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkZTU2N2E0NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuto</dc:creator></item><item><title><![CDATA[【仮想環境】venv系とDocker系の使い分け]]></title><description><![CDATA[venv系とDocker系の特徴と使い分けについてまとめます。

 1. venv系統(Pythonのvenv、Rubyのrbenv/rvmなど)
特徴

依存関係の隔離
　ライブラリやパッケージの依存関係を管理、また別環境で再現できる
簡潔なセットアップ
　コンテナに比べセットアップが簡単
環境汚染
　グローバル環境の汚染によるライブラリ同士の干渉を防ぐ

まとめ
手軽にライブラリなどの依存関係を管理できる

 2. Docker系統(Docker、Podmanなど)
特徴

OS上の設定含めて環境を構築できる
　ライブラリのみでなく、OSにインストールするソフトウェア等含めて環境を管...]]></description><link>https://zenn.dev/yuto_mo/articles/6d2a4608b7e34e</link><guid isPermaLink="true">https://zenn.dev/yuto_mo/articles/6d2a4608b7e34e</guid><pubDate>Thu, 13 Feb 2025 02:24:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GXPW_Xss--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E4%25BB%25AE%25E6%2583%25B3%25E7%2592%25B0%25E5%25A2%2583%25E3%2580%2591venv%25E7%25B3%25BB%25E3%2581%25A8Docker%25E7%25B3%25BB%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkZTU2N2E0NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuto</dc:creator></item><item><title><![CDATA[【Docker × Rails】rails-erd で ER 図をサクッと作成する方法 📊]]></title><description><![CDATA[
 背景
プロダクト開発に途中参加した際、ER 図が更新されていない、あるいは存在しないケースがあります。特に Docker 環境では、ローカル開発環境を統一しつつ ER 図を生成することが求められます。
そこで、rails-erd を活用し、Docker プロジェクト内で手軽に ER 図を作成してデータ構造を可視化する方法を紹介します。

 Rails ERD とは
rails-erd は、Rails の Active Record モデルを元に ER 図を自動生成する Gem のことです。

Rails ERD is a gem that allows you to easily g...]]></description><link>https://zenn.dev/take_tech/articles/8ce0bf035eb6dc</link><guid isPermaLink="true">https://zenn.dev/take_tech/articles/8ce0bf035eb6dc</guid><pubDate>Tue, 11 Feb 2025 20:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YVNcy-8j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%2520%25C3%2597%2520Rails%25E3%2580%2591rails-erd%2520%25E3%2581%25A7%2520ER%2520%25E5%259B%25B3%25E3%2582%2592%25E3%2582%25B5%25E3%2582%25AF%25E3%2583%2583%25E3%2581%25A8%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Take%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyNThiNDQ2YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Take</dc:creator></item><item><title><![CDATA[QNAP NASへのimmichインストール]]></title><description><![CDATA[
 はじめに
Googleフォトが有料化になって早n年
有料化に伴いQNAPのNASを購入し、写真や動画はすべてNASに保存するようにしていました。
QNAPにも写真閲覧アプリのQueMagieが存在しますが、Googleフォトの比べると劣っている感は否めません。
https://www.qnap.com/ja-jp/software/qumagie
先日Qiitaの記事を読んでいたらimmichというセルフホストで実行するOSSの、Googleフォト代替ツールがあることを知りました。
https://qiita.com/katori_m/items/8c7555339b59f14c6d...]]></description><link>https://zenn.dev/ysktake/articles/e8aeefa3d09468</link><guid isPermaLink="true">https://zenn.dev/ysktake/articles/e8aeefa3d09468</guid><pubDate>Tue, 11 Feb 2025 18:23:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9I5sbFfK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:QNAP%2520NAS%25E3%2581%25B8%25E3%2581%25AEimmich%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:take%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSktnVWV1Z2hMbTVFLVJlUVByb1FHRzlWYVFhV2xZdWxBbGNrWkl0a3dlN1h6bTVRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>take</dc:creator></item><item><title><![CDATA[Docker Desktop起動時「“com.docker.vmnetd”にはマルウェアが含まれているため開けませんでした」を解消する]]></title><description><![CDATA[
 結論
下記記事の手順に従って実行したところ解消しました。
https://www.dockerstatus.com/pages/incident/533c6539221ae15e3f000031/677dd6e2108ba105c8d0258c

 環境

MacBook Air
Apple M2
macOS Sequoia バージョン15.3.1
Docker Desktop 4.38.0


 方法
以降は先述のページを見ながら行います。
細かい内容については、リンク先をご覧ください。


アクティビティモニタを開き、docker で検索します。全てのプロセスが実行されていないこ...]]></description><link>https://zenn.dev/2323_code/articles/464aafd7b01d70</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/464aafd7b01d70</guid><pubDate>Tue, 11 Feb 2025 14:16:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FOkwEAkh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Desktop%25E8%25B5%25B7%25E5%258B%2595%25E6%2599%2582%25E3%2580%258C%25E2%2580%259Ccom.docker.vmnetd%25E2%2580%259D%25E3%2581%25AB%25E3%2581%25AF%25E3%2583%259E%25E3%2583%25AB%25E3%2582%25A6%25E3%2582%25A7%25E3%2582%25A2%25E3%2581%258C%25E5%2590%25AB%25E3%2581%25BE%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E9%2596%258B%25E3%2581%2591%25E3%2581%25BE%25E3%2581%259B...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyZGQ3OTI1ODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item><item><title><![CDATA[Rootless DockerでIPv6を使いたい]]></title><description><![CDATA[
 はじめに
Rootless Dockerのコンテナ内からIPv6でホスト外にアクセスするための設定方法について紹介します。
デフォルトで使われるネットワークドライバであるslirp4netnsやvpnkitはIPv6に対応していないため、代わりにpastaを使います。

 環境
説明で利用するOSはUbuntu 24.04 LTSです。それ以外のOSでも動くと思いますが、pastaを手動インストールする必要があるかもしれません。
もちろんホストがIPv6ネットワークで外にアクセスできる状態になっていることが前提です。ping6 www.google.com等で確認しておきましょう。
...]]></description><link>https://zenn.dev/ozaki_r/articles/099abe54200764</link><guid isPermaLink="true">https://zenn.dev/ozaki_r/articles/099abe54200764</guid><pubDate>Tue, 11 Feb 2025 13:01:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--497_26-j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rootless%2520Docker%25E3%2581%25A7IPv6%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ozaki-r%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4NWRmMjhkZGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ozaki-r</dc:creator></item></channel></rss>