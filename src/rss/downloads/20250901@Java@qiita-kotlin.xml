<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-01T16:25:13+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2074653</id>
    <published>2025-09-01T16:25:13+09:00</published>
    <updated>2025-09-01T16:29:41+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/7e636cf9cc25c86774fd"/>
    <url>https://qiita.com/nozomi2025/items/7e636cf9cc25c86774fd</url>
    <title>【デザインパターン】プロキシパターン解説（Flutter/Android 実例付き）</title>
    <content type="text">1. パターンの意図
プロキシ（Proxy)パターンは、
本物のオブジェクト（RealSubject)へのアクセスを代理するオブジェクトを提供するデザインパターンです。

解決する問題

オブジェクトの生成やアクセスにコストが高い（遅延生成したい）
セキュリティーのためア...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2074520</id>
    <published>2025-09-01T11:08:38+09:00</published>
    <updated>2025-09-01T11:08:38+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/421ebe3791b10a4c2169"/>
    <url>https://qiita.com/majoLibrary/items/421ebe3791b10a4c2169</url>
    <title>UI破棄を越えるデータ保持の設計──Bundle・SavedStateHandle・DataStore・DB・クラウド同期</title>
    <content type="text">結論
「UI破棄後も残すべきか」は、寿命 × 再現コスト で決めます。そこに サイズ / 安全性 / 通信整合性 / UX を重ねて使用するもの（Bundle / Intent / SavedState / DataStore / DB / クラウド同期）を割り当てれば迷...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073828</id>
    <published>2025-08-30T20:37:52+09:00</published>
    <updated>2025-08-30T20:37:52+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/mikan0000/items/51bff294693c5182a65d"/>
    <url>https://qiita.com/mikan0000/items/51bff294693c5182a65d</url>
    <title>NASA APIを使って簡単なアプリ作ってみた③</title>
    <content type="text">今回は②の続きで今日の天文台画面の作成を記録する。
（異常系は考慮しない）

①NASA APIを使って簡単なアプリ作ってみた①
②NASA APIを使って簡単なアプリ作ってみた②　
③NASA APIを使って簡単なアプリ作ってみた③ ←こちら
④NASA APIを使って簡...</content>
    <author>
      <name>mikan0000</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073741</id>
    <published>2025-08-30T15:30:54+09:00</published>
    <updated>2025-08-30T15:32:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/c3366ee253964f0e498d"/>
    <url>https://qiita.com/nozomi2025/items/c3366ee253964f0e498d</url>
    <title>【デザインパターン】 フライウェイトパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
フライウェイト（Flyweight）パターン は、
オブジェクトの共通部分を共有し、メモリ使用量を削減する デザインパターンです。

解決する問題

同じようなオブジェクトを大量に生成するとメモリを圧迫する
共通の情報は 共有（intrinsic s...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
