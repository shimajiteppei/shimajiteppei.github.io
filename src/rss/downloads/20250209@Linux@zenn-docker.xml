<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/75b80a5922.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 09 Feb 2025 08:58:52 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ローカルサーバーをhttps化してスマホからもアクセスする]]></title><description><![CDATA[Dockerを使って既にlocalhost:3000でアクセスできるサーバーがあり、
それをhttps化してスマホからもアクセスできるようにする。
ドメインはnip.ioを使います。

 証明書の作成
まずはmkcertを使って証明書を作成する。
$ brew install mkcert
$ mkcert -install
$ mkcert hoge.127.0.0.1.nip.io
hoge部分は任意のものを入れる。
発行されたものを任意のディレクトリに格納。ここではconfig/sslに配置。

 コンテナの設定
httpsでアクセスしても既存のlocalhost:3000にアクセ...]]></description><link>https://zenn.dev/raihara3/articles/20250209_6bf901662b097c</link><guid isPermaLink="true">https://zenn.dev/raihara3/articles/20250209_6bf901662b097c</guid><pubDate>Sun, 09 Feb 2025 06:44:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---j5EWMqK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592https%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B9%25E3%2583%259E%25E3%2583%259B%25E3%2581%258B%25E3%2582%2589%25E3%2582%2582%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:raihara3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlMGVjYTdhZTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>raihara3</dc:creator></item><item><title><![CDATA[Dockerでバインドマウントするのやめません？もうCompose Watchでいいでしょ？]]></title><description><![CDATA[
 はじめに
Dockerを使用してVueやReactなどの開発を行う方は多いかと思いますが、その際結構ハマるのがnode_modulesあたりではないでしょうか？沢山の賛同の声ありがとうございます。そうですよね！(🤔)

 1. node_modulesをバインドマウントする時の罠
Docker Compose Watchの説明をする前にnode_modulesをバインドマウントすると何が問題なのか順を追って説明していきます。

 1-1. コードを確認してみよう
簡単なコードを使ってnode_modulesのバインドマウントの罠について解説していきます。
例えば以下のようなReact...]]></description><link>https://zenn.dev/kei/articles/50e01d9bdfbe8e</link><guid isPermaLink="true">https://zenn.dev/kei/articles/50e01d9bdfbe8e</guid><pubDate>Sat, 08 Feb 2025 08:56:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ym5HesKd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E3%2583%2590%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259E%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2582%2584%25E3%2582%2581%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25EF%25BC%259F%25E3%2582%2582%25E3%2581%2586Compose%2520Watch%25E3%2581%25A7%25E3%2581%2584%25E3%2581%2584%25E3%2581%25A7%25E3%2581%2597%25E3%2582%2587%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%258C%25AB%25E3%2581%25AE%25E5%25A5%25B4%25E9%259A%25B7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczNjJmYjM4YTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>猫の奴隷</dc:creator></item><item><title><![CDATA[Supabase CLIでDocker Imageが見つからないときの対処法]]></title><description><![CDATA[
 動作環境

macOS：Sonoma 14.7.1
Homebrew v4.4.20-101-g1f5a84a
Node.js v20.10.0
pnpm v9.15.4
supabase-cli v2.9.6


 やろうとしていたこと

supabase cli経由でローカルにSupabase環境を構築しようとした


 エラーの内容


supabase startコマンドを打つと、以下のエラーが発生した

% supabase start
failed to pull docker image: Error response from daemon: manifest for...]]></description><link>https://zenn.dev/dencyu/articles/b948d34534848b</link><guid isPermaLink="true">https://zenn.dev/dencyu/articles/b948d34534848b</guid><pubDate>Sat, 08 Feb 2025 07:51:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zWB2qLZt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Supabase%2520CLI%25E3%2581%25A7Docker%2520Image%25E3%2581%258C%25E8%25A6%258B%25E3%2581%25A4%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A7%25E3%2582%2593%25E3%2581%25A1%25E3%2582%2585%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiMzc4NjQ0NjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>でんちゅー</dc:creator></item><item><title><![CDATA[Docker + ESA SNAP Python で干渉SARを計算する]]></title><description><![CDATA[
 概要
DockerでESA SNAP Pythonの環境を作成し、Sentinel-1 SLCを使って干渉SARを計算する。esa-snap-insarのコードを使用する。

 環境

Ubuntu 24.04.1 LTS
Docker 27.5.1


 データ
2023年9月10日に噴火したハワイ島のキラウエア火山の前後の画像として、以下のデータを使用する。

S1A_IW_SLC__1SDV_20230921T043101_20230921T043131_050421_061248_FE11.SAFE
S1A_IW_SLC__1SDV_20230909T043101_20230...]]></description><link>https://zenn.dev/room_208/articles/4f675ed7aa0e5f</link><guid isPermaLink="true">https://zenn.dev/room_208/articles/4f675ed7aa0e5f</guid><pubDate>Sat, 08 Feb 2025 05:53:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fPH7tp6z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%252B%2520ESA%2520SNAP%2520Python%2520%25E3%2581%25A7%25E5%25B9%25B2%25E6%25B8%2589SAR%25E3%2582%2592%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:room_208%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MmRkNTEzN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>room_208</dc:creator></item><item><title><![CDATA[Malware Blocked. “com.docker.socket” was not opened because it contain]]></title><description><![CDATA[2025年に入って、Docker を起動する度に次のエラーが表示されるようになりました。

Malware Blocked. “com.docker.socket” was not opened because it contains malware. this action did not harm your Mac.

解決方法が Issueに書いてありました。

Docker Desktopを終了し、アクティビティモニターでdockerプロセスが実行されていないことを確認します。
そして以下のshellを実行し、Docker Desktop を再起動します。

#!/bin/bas...]]></description><link>https://zenn.dev/1000_x_t30/articles/d69dc75349ead6</link><guid isPermaLink="true">https://zenn.dev/1000_x_t30/articles/d69dc75349ead6</guid><pubDate>Sat, 08 Feb 2025 04:48:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IginS8mZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Malware%2520Blocked.%2520%25E2%2580%259Ccom.docker.socket%25E2%2580%259D%2520was%2520not%2520opened%2520becau...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taka%2540ngtmtkyk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkNjk2NzYzNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taka@ngtmtkyk</dc:creator></item><item><title><![CDATA[SadServers No.22 解説 "Venice": Am I in a container?]]></title><description><![CDATA[https://ja.wikipedia.org/wiki/ヴェネツィア

 問題概要

 シナリオ
私はコンテナの中にいますか？

 問題詳細
コンテナ（たとえばDockerのようなもの）の内部にいるか、または仮想マシン（他のシナリオのように）の内部にいるかを見極めてください。

 解決判定
このシナリオにテストはありません（したがって、check my solutionもありません）。
 

 ヒント
一部、SadServers公式のヒントを改変しています。
ヒント
もしも今の環境がコンテナであるならば、initプロセスの環境変数に、コンテナに関するものが存在するかもしれません。
i...]]></description><link>https://zenn.dev/comf_nakamura/articles/sadservers_expl_venice</link><guid isPermaLink="true">https://zenn.dev/comf_nakamura/articles/sadservers_expl_venice</guid><pubDate>Sat, 08 Feb 2025 01:28:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RDyuHW2D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SadServers%2520No.22%2520%25E8%25A7%25A3%25E8%25AA%25AC%2520%2522Venice%2522%253A%2520Am%2520I%2520in%2520a%2520container%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25BE%25E3%2583%25BC%25E3%2583%25B3%25E4%25B8%25AD%25E6%259D%2591%25EF%25BD%259C%25E6%2596%25B0%25E4%25BA%25BA%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A6%25E3%2583%2589...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1OGFjNDI2M2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>コンフォートゾーン中村｜新人クラウドエンジニア</dc:creator></item><item><title><![CDATA[SadServers No.21 解説 "Salta":Docker container won't start.]]></title><description><![CDATA[https://ja.wikipedia.org/wiki/サルタ

 問題概要

 シナリオ
Dockerコンテナが開始されません

 問題詳細
/home/admin/appディレクトリにDocker化されたNode.jsウェブアプリケーションがあります。Dockerコンテナを作成することで、そのWEBアプリケーションにポート番号「:8888」でcurlでアクセスできるようにしようとしています。解決策と判定されるためには、実行中のDockerコンテナが1つだけである必要があります。

 解決判定
Check My Solutionボタンをクリックしてください。
解答が正解かどうか、コ...]]></description><link>https://zenn.dev/comf_nakamura/articles/sadservers_expl_salta</link><guid isPermaLink="true">https://zenn.dev/comf_nakamura/articles/sadservers_expl_salta</guid><pubDate>Sat, 08 Feb 2025 01:27:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dUroDgur--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SadServers%2520No.21%2520%25E8%25A7%25A3%25E8%25AA%25AC%2520%2522Salta%2522%253ADocker%2520container%2520won%2527t%2520start.%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25BE%25E3%2583%25BC%25E3%2583%25B3%25E4%25B8%25AD%25E6%259D%2591%25EF%25BD%259C%25E6%2596%25B0%25E4%25BA%25BA%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A6%25E3%2583%2589...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1OGFjNDI2M2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>コンフォートゾーン中村｜新人クラウドエンジニア</dc:creator></item><item><title><![CDATA[【Python】無精プログラマー入門]]></title><description><![CDATA[最小労力で最大効果を得る方法をご提案します

 即時スタート方法：

Google Colab 活用
ブラウザを開く
"Python Google Colab" で検索
新規ノートブックを開く
→ これだけで Python 環境の完成


 最小限の Docker 環境

Docker Desktop をダウンロード
インストーラーを実行
再起動
→ これだけでコンテナ環境の完成


 実践的な学習

 コピペ駆動開発

Stack Overflow から解決策をコピー
動作確認
必要に応じてカスタマイズ
→ 理解は後からついてくる


 最小コマンドセット
bashCopy# Pyth...]]></description><link>https://zenn.dev/cai3/articles/81d16f58dfc931</link><guid isPermaLink="true">https://zenn.dev/cai3/articles/81d16f58dfc931</guid><pubDate>Sat, 08 Feb 2025 00:17:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KtjtVjya--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591%25E7%2584%25A1%25E7%25B2%25BE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259E%25E3%2583%25BC%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cai3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRkYzYyYjNmODMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cai3</dc:creator></item><item><title><![CDATA[Docker Swarmモードを試す]]></title><description><![CDATA[
 概要
Docker Swarmモードを試します。
参考
https://docs.docker.com/engine/swarm/

 環境
Raspberry Pi 上の KVM で Docker12 を動かし、その中で Docker を動かす。
Dockerのインストール等の準備については割愛。

 Manager node
マネージャーノードを動かす。
自分のIPアドレスを指定して初期化する。
$ sudo docker swarm init --advertise-addr 192.168.11.11
Swarm initialized: current node (sbcs...]]></description><link>https://zenn.dev/mnod/articles/4fb411388e6f6b</link><guid isPermaLink="true">https://zenn.dev/mnod/articles/4fb411388e6f6b</guid><pubDate>Fri, 07 Feb 2025 22:53:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UtxaSAsP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Swarm%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mnod%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyOTA1NTFiNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mnod</dc:creator></item><item><title><![CDATA[Ook!言語：Brainfuckベースの難解言語をDockerで実行]]></title><description><![CDATA[
 🐵 はじめに
みなさんは「Ook!」というプログラミング言語をご存知でしょうか？
これは Brainfuck をベースにした難解プログラミング言語（esolang） で、「Ook.」「Ook?」「Ook!」 の3つの単語だけを組み合わせてコードを書きます。
一見するとオランウータンの鳴き声にしか見えませんが、実はきちんと動作し、「Hello World!」 を出力することも可能です。
今回、Docker環境で Ook! を実行できる仕組みを作成しました。
👉 ソースコードはこちら → ook-lang-playground (GitHub)
以下では、Ook! 言語の概要と実行方法を...]]></description><link>https://zenn.dev/busaiku0084/articles/20250208-aeahj8mx</link><guid isPermaLink="true">https://zenn.dev/busaiku0084/articles/20250208-aeahj8mx</guid><pubDate>Fri, 07 Feb 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rbiM07au--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ook%2521%25E8%25A8%2580%25E8%25AA%259E%25EF%25BC%259ABrainfuck%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E9%259B%25A3%25E8%25A7%25A3%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592Docker%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BD%25E3%2581%25BE%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwMDcyZDI2YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぽまろ</dc:creator></item><item><title><![CDATA[DockerでWordpress構築ハンズオン | 42 Inception]]></title><description><![CDATA[
 はじめに
42のカリキュラムにあるDockerを用いてWordpressをセットアップする課題を取り組むにあたって，ミニマムな構成でのWordpressセットアップ方法についての記事です．
※ 課題の仕様とは異なる点が多くあるので，参考程度にしてください．課題へのヒントの範疇超えず補助的な立ち位置の記事になるようにできるだけ，ミニマムな構成にしています．
※ 課題の要件にあるSSL/TLSやネットワーク等について取り上げないです．

 対象

何から初めればいいのか分からない，Dockerがどういうものかわかったけど，課題にどう取り組めばいいか分からない人向けに実際に動かしてイメージ...]]></description><link>https://zenn.dev/justhiro/articles/c454cc1fbc784e</link><guid isPermaLink="true">https://zenn.dev/justhiro/articles/c454cc1fbc784e</guid><pubDate>Fri, 07 Feb 2025 09:22:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vL-JG5a_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7Wordpress%25E6%25A7%258B%25E7%25AF%2589%25E3%2583%258F%25E3%2583%25B3%25E3%2582%25BA%25E3%2582%25AA%25E3%2583%25B3%2520%257C%252042%2520Inception%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hhagiwar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiN2NjOWFiOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hhagiwar</dc:creator></item><item><title><![CDATA[Apache AGE PostgresSQL GraphDB拡張]]></title><description><![CDATA[FROM apache/age:dev_snapshot_master

# 必要に応じて追加の設定やパッケージのインストールを行う
# 例:
# RUN apt-get update &amp;&amp; apt-get install -y your-package

# 環境変数の設定
ENV POSTGRES_USER=postgresUser
ENV POSTGRES_PASSWORD=postgresPW
ENV POSTGRES_DB=postgresDB

# ポートの公開
EXPOSE 5432

# コンテナ起動時に実行するコマンド
CMD ["postgres"]
]]></description><link>https://zenn.dev/yunosuke068/articles/44253d3103a185</link><guid isPermaLink="true">https://zenn.dev/yunosuke068/articles/44253d3103a185</guid><pubDate>Fri, 07 Feb 2025 04:56:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aIzHDavh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Apache%2520AGE%2520PostgresSQL%2520GraphDB%25E6%258B%25A1%25E5%25BC%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yunosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZUxYNl83dzZHbUdMY2pqcTF6OFNxa2ZTQmJVWWJmcXdlcGdSczV5eEZucXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yunosuke</dc:creator></item><item><title><![CDATA[Dockerとは何か？]]></title><description><![CDATA[
 Dockerとは？

コンテナ仮想化技術を使って、アプリケーションを開発・配置・実行するための隔離された環境を提供するツールのこと。

 コンテナとは？

パソコンやサーバ上で隔離され、干渉されない環境のこと。
コンテナにソフトウェアをインストールすることで他の環境に干渉されない環境を作ることが出来る。ソフトウェアならなんでも入れることが可能。
コンテナの中に小さなパソコンがあるイメージ。
コンテナは単体では動くことが出来ず、ホストマシン（ホストOS）が必要。
例えば、下記の環境で開発したい場合

Ubuntu Linux
Python
MySQL

コンテナなら一括で再現することが...]]></description><link>https://zenn.dev/kw_develop/articles/5469a91f634d3d</link><guid isPermaLink="true">https://zenn.dev/kw_develop/articles/5469a91f634d3d</guid><pubDate>Thu, 06 Feb 2025 11:51:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EfeojVJS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258F%25E3%2581%2590%25E3%2581%25A1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlk1OTgyLTBHX3ZKcUxVVHQxVU4yS3JQWEpFQWJnakJIYjdFcUhaRVZGVXJSOE9Pcz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かわぐち</dc:creator></item><item><title><![CDATA[Visual Studio CodeでGoコンテナのデバッグとホットリロードを実現する方法]]></title><description><![CDATA[
 はじめに
Windows環境でフォルダ構成が複雑な状況でも、Visual Studio Code (VSCode)を用いてGoのコンテナデバッグとホットリロードを実現できるようになりました。設定にはかなり苦労しましたが、その過程と設定手順を詳しく解説します。
開発環境をスムーズに構築するためには、適切なフォルダ構成、Dockerの設定、ホットリロードの設定、そしてVSCodeでのデバッグ設定が重要です。本記事では、それぞれのポイントを順を追って説明します。

 フォルダ構成
プロジェクトのフォルダ構成は以下のようになっています。
$ tree
.
├── .vscode
│   ├─...]]></description><link>https://zenn.dev/tryeverything/articles/a0018_vscode_docker_go</link><guid isPermaLink="true">https://zenn.dev/tryeverything/articles/a0018_vscode_docker_go</guid><pubDate>Thu, 06 Feb 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AGMXiOZI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Visual%2520Studio%2520Code%25E3%2581%25A7Go%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%25A8%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2582%2593%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2NDc5YTUwMzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たんさん</dc:creator></item><item><title><![CDATA[【ソース有】【チュートリアル】ECSでlaravel(11)をSQLiteでとり急ぎ動作させる(改訂版) 〜 イメージの作成まで]]></title><description><![CDATA[https://zenn.dev/catatsumuri/articles/258db6b60594f1
基本的には前回の続き。ただし今回一応サラの環境で出来るようにするから、前のものを読まなくても大丈夫なようにしたい。

 必要なこと

laravelの動作を単体で確認できる環境を作る
dockerイメージを作る

dockerイメージの出来をローカルで確認する


dockerイメージをECRに転送する
タスク定義作る
ECS Farget (サービス)でよきにはからう

今回は 2. まで行う

 作成環境
EC2のt4g.small。まあまあ容量食うのでボリュームは20Gほど用意...]]></description><link>https://zenn.dev/catatsumuri/articles/ae372649d86149</link><guid isPermaLink="true">https://zenn.dev/catatsumuri/articles/ae372649d86149</guid><pubDate>Thu, 06 Feb 2025 08:31:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KGhafq7P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E6%259C%2589%25E3%2580%2591%25E3%2580%2590%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2580%2591ECS%25E3%2581%25A7laravel%252811%2529%25E3%2582%2592SQLite%25E3%2581%25A7%25E3%2581%25A8%25E3%2582%258A%25E6%2580%25A5%25E3%2581%258E%25E5%258B%2595%25E4%25BD%259C%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2528%25E6%2594%25B9%25E8%25A8%2582%25E7%2589%2588%2529%2520%25E3%2580%259C%2520%25E3%2582%25A4%25E3%2583%25A1...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25EF%25BE%2593%25EF%25BD%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlMzM1YzM5ZjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ﾓｯ</dc:creator></item><item><title><![CDATA[RailsアプリにRedisを導入し、クエリ結果をキャッシュすることで処理時間を97％削減]]></title><description><![CDATA[こんにちは。大学生エンジニアの豆太郎です。
本日は、RailsにRedisを導入し、クエリ結果をキャッシュすることでアプリのパフォーマンスを改善した話について書こうと思います。

 キャッシュとは？
キャッシュとは、リクエストやレスポンスで送受信したデータを、メモリ上に保存しておき、次回に同じような通信を行ったときに保存したデータを活用することを指します。
このようにキャッシュの仕組みを活かして、データの再利用をすることで、通信量や回数の削減を行うことができ、通信の処理を高速化したり、サーバの負荷を削減することができます。
ここで、キャッシュが読み取ることができるデータとしては以下の例が...]]></description><link>https://zenn.dev/mametaro/articles/redis-performance0203</link><guid isPermaLink="true">https://zenn.dev/mametaro/articles/redis-performance0203</guid><pubDate>Wed, 05 Feb 2025 12:16:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BJRe0el3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rails%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25ABRedis%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2597%25E3%2580%2581%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25A7%25E5%2587%25A6%25E7%2590%2586%25E6%2599%2582%25E9%2596%2593%25E3%2582%259297%25EF%25BC%2585%25E5%2589%258A%25E6%25B8%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25B1%2586%25E5%25A4%25AA%25E9%2583%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBjMzQyZmQwYTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>豆太郎</dc:creator></item><item><title><![CDATA[【Docker再入門】～Dockerデータ管理偏～]]></title><description><![CDATA[
 はじめに
こんにちは。championです。
普段は、Google CloudやAWSを中心としたクラウドインフラの設計～保守運用を行なっています。
前回の記事では、Docker環境のネットワークについて解説しました。
https://zenn.dev/hi_ka_ru/articles/docker-network-20250202
今回は、Dockerでのデータ管理について解説します。

 Docker Storage

 Dockerでのデータ管理方法
Dockerコンテナ内で作成されたファイル等のデータは、コンテナが削除されると一緒に消えてしまいます。これはLinuxの名前空...]]></description><link>https://zenn.dev/hi_ka_ru/articles/docker-storage-20250202</link><guid isPermaLink="true">https://zenn.dev/hi_ka_ru/articles/docker-storage-20250202</guid><pubDate>Tue, 04 Feb 2025 21:34:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YxlllzQ8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E5%2586%258D%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2591%25EF%25BD%259EDocker%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E7%25AE%25A1%25E7%2590%2586%25E5%2581%258F%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hikaru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hikaru</dc:creator></item><item><title><![CDATA[HuggingFace SpaceをAPIサーバーとして使う その1]]></title><description><![CDATA[
 前提
この記事では、HuggingFace SpaceをappとしてではなくAPIサーバーとして使う方法を扱う。
もともとインターンでHuggingFace Inference Endpointsを使ってモデルのAPI提供を行っていたのだが、エンドポイントを起動するたびに０からビルドしなくてはならず時間がかかっていたためビルドキャッシュが残るHuggingFace SpaceのDockerSDKを使ったAPIサーバーの構築に着手した。
https://huggingface.co/docs/hub/spaces-sdks-docker

 必要知識

HuggingFace Spac...]]></description><link>https://zenn.dev/yutapon_juice/articles/f22ecb7bc0025e</link><guid isPermaLink="true">https://zenn.dev/yutapon_juice/articles/f22ecb7bc0025e</guid><pubDate>Tue, 04 Feb 2025 16:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PU8ww_fK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HuggingFace%2520Space%25E3%2582%2592API%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2586%2520%25E3%2581%259D%25E3%2581%25AE1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutapon_juice%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjM2Q1ZDM1MTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutapon_juice</dc:creator></item><item><title><![CDATA[[Docker] LiteLLM + Langfuse をローカルにDockerで立ち上げる]]></title><description><![CDATA[
 はじめに(モチベーション)
最近、Cline等のAIを用いたエージェント型のツールが賑わっていますが、利用している内に以下の点が気になり始めました。

AIとの通信内容の可視化
利用量の統計的な把握と分析
長期的なデータの保存と活用

これらの要件を満たすため、LiteLLMを中心としたプロキシ構成を採用し、各種AIツールからの通信を集約して情報を収集する方式を検討しました。この方式であれば、将来的なツールの移行にも柔軟に対応できます。

 記事の目的
この記事では、Docker Compose（Docker Desktop）を用いて、ローカル環境にLiteLLM + Langfus...]]></description><link>https://zenn.dev/yakan_k/articles/7a8b6b9a2f66f8</link><guid isPermaLink="true">https://zenn.dev/yakan_k/articles/7a8b6b9a2f66f8</guid><pubDate>Tue, 04 Feb 2025 15:54:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MfpKX1VD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BDocker%255D%2520LiteLLM%2520%252B%2520Langfuse%2520%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25ABDocker%25E3%2581%25A7%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%2592%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2596%25AC%25E7%25BC%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MVY0WmE2OW5hUVJ1QTJhZWJEVlJsRVE1dVVBWkdvQVZOQUtkeUtlUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>薬缶</dc:creator></item><item><title><![CDATA[Djangoでデバッグ時「Error: That port is already in use.」が出た時の対処の流れ【おそらく基礎の話】]]></title><description><![CDATA[docker-compose.ymlで設定したポートと、
VSCodeのlaunch.jsonで設定したポートが競合している、
ということが原因でした。
こんにちは、
ワニかず@40歳 出戻りエンジニアです。

 環境

VSCodeでDockerの環境を構築
ブラウザでページを表示できるようになった段階


 問題の設定ファイル

 VS Codeのデバッガーの設定ファイル
「launch.json」が

launch.json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name":...]]></description><link>https://zenn.dev/40_comeback_eng/articles/63c05434f82cca</link><guid isPermaLink="true">https://zenn.dev/40_comeback_eng/articles/63c05434f82cca</guid><pubDate>Tue, 04 Feb 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ga5-ik_i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E6%2599%2582%25E3%2580%258CError%253A%2520That%2520port%2520is%2520already%2520in%2520use.%25E3%2580%258D%25E3%2581%258C%25E5%2587%25BA%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E3%2581%25AE...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AF%25E3%2583%258B%25E3%2581%258B%25E3%2581%259A%254040%25E6%25AD%25B3%2520%25E5%2587%25BA%25E6%2588%25BB%25E3%2582%258A%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg3ZGNhZmRmOGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ワニかず@40歳 出戻りエンジニア</dc:creator></item></channel></rss>