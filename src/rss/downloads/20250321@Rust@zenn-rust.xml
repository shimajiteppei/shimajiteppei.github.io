<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 21 Mar 2025 12:04:13 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Shuttle／Axum／Yew】Rust製WebサイトでZennRSSを公開する]]></title><description><![CDATA[
 ほぼRustだけで自分のサイトを作る
そもそもZennには、ユーザー毎にRSSがあるようです。https://zenn.dev/ユーザー名/feedで取得することができます。即ち私(ユーザー名：amenaruya)のRSSはhttps://zenn.dev/amenaruya/feedです。
より詳しい仕様はこちらにあります。せっかくならばと、上のURLに?all=1と続け、全てのRSSを取得することにしました。
https://zenn.dev/zenn/articles/zenn-feed-rss
ところでRSSを取得できるとはいうものの、XML型式のデータが取得できるだけです。...]]></description><link>https://zenn.dev/amenaruya/articles/76011b6a31541b</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/76011b6a31541b</guid><pubDate>Fri, 21 Mar 2025 01:43:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JAhEmoOF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Shuttle%25EF%25BC%258FAxum%25EF%25BC%258FYew%25E3%2580%2591Rust%25E8%25A3%25BDWeb%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7ZennRSS%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[RustのAsync/Await入門ガイド]]></title><description><![CDATA[

 Rust の非同期プログラミングにおける async/.await
async/.await は Rust に組み込まれた言語機能であり、同期コードのように記述しながら非同期処理を行うことができます。
それでは、async/.await の使い方を例を通じて学びましょう。始める前に、futures クレートを追加する必要があります。Cargo.toml ファイルを編集し、以下の内容を追加してください。
[dependencies]
futures = "0.3"

 async を使って非同期 Future を作成する
簡単に言えば、async キーワードは次のような Future...]]></description><link>https://zenn.dev/leap_adam/articles/2f11f272bf8e40</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/2f11f272bf8e40</guid><pubDate>Thu, 20 Mar 2025 20:39:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UgESmI-k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEAsync%252FAwait%25E5%2585%25A5%25E9%2596%2580%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【Rust】構造体を理解する]]></title><description><![CDATA[Rsutの構造体(Struct)は複数の関連する値をひとつのデータ型を名前をつけて独自のデータ型として扱うための仕組みです。
この記事では、構造体の使い方、種類、設計のポイントについて解説します。

 構造体とは
構造体(Struct)は複数の関連する値をひとつのデータ型を名前をつけて独自のデータ型として管理する仕組みです。他のプログラミング言語の「クラス」に似ていますが、Rustの構造体は単なるデータの集まりを表すだけであり、メソッドを直接持つことはできません。しかし、impl を使うことで、構造体に関連するメソッドを定義できます。

 構造体の種類
Rustでは3種類の構造体が用意さ...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/8d5c463f3a150e</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/8d5c463f3a150e</guid><pubDate>Thu, 20 Mar 2025 17:02:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oaAZV-t5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[DuckDB Local UI みたいな拡張を Rust で書いてみようとしたときのメモ（v1.2.1 時点）]]></title><description><![CDATA[え、DuckDB の拡張って Rust で書けんの？？、という人は、以下の記事に状況をまとめたのでそっちを読んでください。ここではもっと細かい話をします。
https://zenn.dev/yutannihilation/articles/663c879b74343c

 DuckDB Local UI
MotherDuck の UI みたいなやつが表示できる拡張です。CALL start_ui() とやると、ウェブブラウザが立ち上がってブラウザ上からいろいろできるようになります。
https://duckdb.org/2025/03/12/duckdb-ui.html
私がこれを見て思...]]></description><link>https://zenn.dev/yutannihilation/articles/60ba80ea71dbe9</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/60ba80ea71dbe9</guid><pubDate>Thu, 20 Mar 2025 14:32:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xnk1Ub8V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DuckDB%2520Local%2520UI%2520%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%25EF%25BC%2588v1.2.1%2520%25E6%2599%2582%25E7%2582%25B9%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[Rust× Envoy を活用したマイクロサービス実装入門]]></title><description><![CDATA[
 概要

Rust で gRPC サーバーを構築し、Envoy を API ゲートウェイとして組み合わせたマイクロサービスの基盤を作成しました。本記事では、その設計・実装・課題・今後の展望について詳しく解説します。
また、本記事では図解もふんだんに載せておりますので、流し見でも大枠はつかめるかと思います。

 はじめに


なぜ Rust なのか？
Rust言語はgRPCを用いたマイクロサービスアーキテクチャを構築する場合に以下のような利点があります。

🔸高速性とメモリ安全性
C++に勝るとも劣らない実行スピード、そしてメモリリークの起きにくい

🔸強力な型システムによるバグ防止
多...]]></description><link>https://zenn.dev/kazuma0606/articles/819da6b9fce6fa</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/819da6b9fce6fa</guid><pubDate>Thu, 20 Mar 2025 10:56:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6K1qQfA0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25C3%2597%2520Envoy%2520%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E5%25AE%259F%25E8%25A3%2585%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[【Rust】sqlxでコンパイルエラーが発生する]]></title><description><![CDATA[
 はじめに
sqlxでDB接続する処理があってローカルではDBを起動していたのでビルドも通っていました。
Github Actionでビルドして問題ないかチェックするようにしていたのですが、以下のようなエラーが発生してしまいました。
🏗️
error: error communicating with database: Connection refused (os error 111)
  --&gt; src/infrastructure/report_repository.rs:87:20
   |
87 |           let rows = sqlx::query!(
...]]></description><link>https://zenn.dev/devtatsu/articles/rust-sqlx-compile-error</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/rust-sqlx-compile-error</guid><pubDate>Thu, 20 Mar 2025 04:18:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nB3KyAb3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591sqlx%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E7%2599%25BA%25E7%2594%259F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item><item><title><![CDATA[【Rust】RustのVecと仲良くなる]]></title><description><![CDATA[Rustの Vec&lt;T&gt; (ベクタ）は、動的な配列としてよく使われるコレクション型です。
Rubyなどのインタプリタ言語を普段使ってる方からすると、動的に自動拡張する配列は当たり前かもしれませんが、CやRustのようなコンパイラ言語では、配列は基本的に固定長であり、動的に要素数を変更できるデータ構造は別の仕組みとして提供されます。Rustでは、この役割を果たすのが標準ライブラリの Vec&lt;T&gt; です。
この記事では、Vecの基本から、所有権や借用、イテレータの活用方法を解説し、Vecと仲良くなることを目的としています。

 Vecとは？
https://doc.r...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/7592102e4dc7bf</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/7592102e4dc7bf</guid><pubDate>Thu, 20 Mar 2025 03:04:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IMOqUbKq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Rust%25E3%2581%25AEVec%25E3%2581%25A8%25E4%25BB%25B2%25E8%2589%25AF%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[nova_vmのバイトコード処理のコードリーディング]]></title><description><![CDATA[最近Novaで実装したい機能のためにbytecode_compiler.rsとその周辺をを読んでいるのでメモがてら書く。
本当にただのメモなので、多分読んでも面白くない。

 内容
そもそもバイトコードとは、高級言語のコードを仮想マシン向けに変換した中間コードのこと。NovaのVMでは、このバイトコードを解釈・実行することでJavaScriptを処理する。
今回は以下のコマンドを実行した時の動作を想定して、コードを読んでいく。
ここではコマンドの詳細は省く。
cargo run --features typescript eval index.ts
まず一番トップはnova_cliから始...]]></description><link>https://zenn.dev/yuto76/articles/0361c985197b48</link><guid isPermaLink="true">https://zenn.dev/yuto76/articles/0361c985197b48</guid><pubDate>Tue, 18 Mar 2025 23:38:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ge0iUbM2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:nova_vm%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A6%25E3%2582%25A6%25E3%2583%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4NzFiYTNmNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ユウト</dc:creator></item><item><title><![CDATA[IT技術解説③：なぜ、組み込み業界ではRustが流行らず、未だC言語が主流なのか？]]></title><description><![CDATA[
 はじめに
組み込みソフトウェア開発の世界では、プログラミング言語の選択が製品の品質、開発効率、そして長期保守性に大きな影響を与えます。近年、メモリ安全性や並行処理の安全性を強みとするRust言語が様々な分野で注目を集め、採用が進んでいます。Webバックエンド、システムプログラミング、そしてLinuxカーネルのような重要なプロジェクトでもRustの導入が進んでいるにもかかわらず、組み込み開発の現場では依然としてC言語が主流であり続けています。本稿では、最新の安全な言語であるRustが、なぜ組み込み開発において広く採用されず、数十年の歴史を持つC言語が今なお主要な選択肢であり続けているの...]]></description><link>https://zenn.dev/pdfractal/articles/c16508c4fbba29</link><guid isPermaLink="true">https://zenn.dev/pdfractal/articles/c16508c4fbba29</guid><pubDate>Tue, 18 Mar 2025 17:18:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YaN1KqI1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IT%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%25E2%2591%25A2%25EF%25BC%259A%25E3%2581%25AA%25E3%2581%259C%25E3%2580%2581%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E6%25A5%25AD%25E7%2595%258C%25E3%2581%25A7%25E3%2581%25AFRust%25E3%2581%258C%25E6%25B5%2581%25E8%25A1%258C%25E3%2582%2589%25E3%2581%259A%25E3%2580%2581%25E6%259C%25AA%25E3%2581%25A0C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%258C%25E4%25B8%25BB%25E6%25B5%2581%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pdfractal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5MjFkMjlhMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pdfractal</dc:creator></item><item><title><![CDATA[ABC397:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 397のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc397/tasks/abc397_a
解説
X の値に応じて、1~3のいずれかを出力します。


X が38.0以上の場合は、1を出力

X が37.5以上の場合は、2を出力

X が37.5未満の場合は、3を出力

コード

ABC397a.rs
use proconio::input;
fn main() {
    // 入力
    input!{
        x: f64,
    }...]]></description><link>https://zenn.dev/nakst_hide/articles/c9f8d735da4457</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/c9f8d735da4457</guid><pubDate>Tue, 18 Mar 2025 12:02:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9mrK1WtU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC397%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[RustでApache Parquetの読み書きをしてみた]]></title><description><![CDATA[
 目的
CSVの代替としてApache Paquetを扱う話がでてきたので、Rustで簡単な読み書きをやってみます。

 Apache Parquet
本家サイトApache Parquetによれば、
「Apache Parquetは、効率的なデータの保存と取得のために設計された、オープンソースの列指向データファイル形式です。複雑なデータを一括処理するための高性能な圧縮およびエンコードスキームを提供し、多くのプログラミング言語や分析ツールでサポートされています。」
とのことです。
自分の理解だと検索のパフォーマンスが良くて、サイズも小さくて、汎用性もあって使い勝手の良いベターCSVとい...]]></description><link>https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</guid><pubDate>Tue, 18 Mar 2025 10:40:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m1YbQ-fk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Apache%2520Parquet%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E6%259B%25B8%25E3%2581%258D%25E3%2582%2592%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[[Rust] Iterator トレイトで自分がよく使うメソッドまとめ]]></title><description><![CDATA[
 一覧



メソッド名
役割




all
全ての要素が条件を満たすかの確認


any
条件を満たす要素が１つでもあるかの確認


cloned
イテレータの各要素をクローンして、新しいイテレータを作成する。


collect
イテレータをコレクションに変換する


count
要素数（ただし、イテレータを消費する）


filter
条件を満たす要素のみで、新たにイテレータを作成する


filter_map
filterとmapの機能を組み合わせたもの


find
条件を満たす最初の要素を返す


find_map
findとmapの機能を組み合わせたもの


map
各...]]></description><link>https://zenn.dev/dio0550/articles/a5a2367923b10c</link><guid isPermaLink="true">https://zenn.dev/dio0550/articles/a5a2367923b10c</guid><pubDate>Mon, 17 Mar 2025 12:28:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9n4jbsqX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Iterator%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E3%2581%258C%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dio%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzU3UEdJY0o5Tmx1MjBwWHZFY183MmZ1Z3djbFBQZVRsRUtFdDMtU0RSMmpSNUl3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dio</dc:creator></item><item><title><![CDATA[RustからMSEdgeDriverを操作するサンプル]]></title><description><![CDATA[こんにちは　あいおんです。
RustからMSEdgeDriverを操作するサンプルを作ったので公開します。

 背景
JTCをはじめ、社内だとChromeではなく、Edgeを使っているケースもあるんじゃないかなと思います。
そんな会社向けの記事です。（ただし、そんな会社がRustを使えるようになっているかというのは…）
また、Pythonとかでやればいいじゃん、というのはごもっともです。（が、いいんです。Rustでやりたかったんです。）

 実装
作ったものは以下です。
https://github.com/aion0721/Rust-Msedgedriver-sample/tree/m...]]></description><link>https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</link><guid isPermaLink="true">https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</guid><pubDate>Mon, 17 Mar 2025 10:11:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--So1JN_bu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%258B%25E3%2582%2589MSEdgeDriver%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aion%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmODNlYzkzYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aion</dc:creator></item><item><title><![CDATA[jemallocでRustのパフォーマンスを最適化する]]></title><description><![CDATA[

 jemalloc とは？
jemalloc は、もともと Jason Evans によって FreeBSD 向けに開発された現代的なメモリアロケータです。従来の malloc と比較して、jemalloc はメモリフラグメンテーションの削減とマルチスレッドアプリケーションのパフォーマンス向上に重点を置いて設計されました。細粒度のメモリ管理とスレッドキャッシュ機構により、迅速かつ効率的なメモリ割り当てを実現しています。
jemalloc の主な特徴は次のとおりです：


高効率な並列処理：各スレッドに独立したメモリキャッシュを提供し、スレッド間の競合を削減。

メモリフラグメンテーシ...]]></description><link>https://zenn.dev/leap_adam/articles/c8561fedd1e171</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/c8561fedd1e171</guid><pubDate>Sun, 16 Mar 2025 21:25:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PsuItVfE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jemalloc%25E3%2581%25A7Rust%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[[marmite]最も簡単なブログの作り方]]></title><description><![CDATA[
 静的サイト作るの煩雑すぎ問題
Static Site Generator(SSG)でブログを作成しようと思うと、やることが多すぎます。
SSGのリストを見てみると、どれも初心者に対してあまり優しくないように感じます。初見殺しの罠が多すぎて投げ出してしまう人もいるのではないでしょうか？
ちゃんと調べればいいじゃないか、知識が足りていないだけなんじゃないか、という正論もありますが、ブログを作るだけなのにCI/CDパイプラインを構築して自動的に変更内容がデプロイされるようにする、といったことをやりたいでしょうか？やりたくはないですが現実問題やることになります。
ブログを更新してあとはボタン...]]></description><link>https://zenn.dev/omini/articles/26ca9305d7deeb</link><guid isPermaLink="true">https://zenn.dev/omini/articles/26ca9305d7deeb</guid><pubDate>Sun, 16 Mar 2025 21:15:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rym624wl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bmarmite%255D%25E6%259C%2580%25E3%2582%2582%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[【Rust】Yew公式サイトの日本語対応が進むらしい＋チュートリアルを試す]]></title><description><![CDATA[
 YewがNextバージョンに変わろうとしている
!
本記事で用いるYewのバージョンは0.21です。
それ以上のバージョンは執筆現在で未リリースです。

https://yew.rs/ja/
YewはRustに於ける「Webアプリケーションフレームワーク」として知られるものです。Webの中でも画面を作ることに特化(？)したもので、かつJavaScriptではなくWebAssemblyを使います。
そんなYewですが、ドキュメントだけでなく公式サイトが存在します。しかしこのサイト、言語として日本語を選ぶことができるにもかかわらず、実際には殆ど対応していませんでした。

日本語トップ画面...]]></description><link>https://zenn.dev/amenaruya/articles/9f632a57a367c6</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/9f632a57a367c6</guid><pubDate>Sun, 16 Mar 2025 20:15:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SnNcR5RG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Yew%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AE%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%258C%25E9%2580%25B2%25E3%2582%2580%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25EF%25BC%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[自作Rust製CLIコマンドランチャー「qcl」の紹介]]></title><description><![CDATA[
 🚀 覚えない・間違えない CLI！コマンドスニペットランチャー「qcl」を作りました

 はじめに
みなさん、ターミナルでよく使うコマンドを 覚えきれない とか
「これって引数なんだっけ？」って毎回ググっていませんか？
私は docker exec や ssh、kubectl など、  ちょっとしたコマンドを毎回

履歴を探す
コピペする
引数ミスってやり直す
を繰り返していました。

docker exec -itまで打って、コンテナIDなんだっけ？ってdocker psし直したり・・・
それを解決するために作ったのが、
「qcl (Quick Command Launcher)」...]]></description><link>https://zenn.dev/nakkiy/articles/12b5e2a6691430</link><guid isPermaLink="true">https://zenn.dev/nakkiy/articles/12b5e2a6691430</guid><pubDate>Sun, 16 Mar 2025 13:42:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O7UaPX8J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CRust%25E8%25A3%25BDCLI%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25BC%25E3%2580%258Cqcl%25E3%2580%258D%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakkiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDRQblR4S1NRMWFmaGVudU0yT1MyNUdYNmtrQnUxY1RFMEZyNW1kZkNVR1haQTRBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakkiy</dc:creator></item><item><title><![CDATA[効果的なRustソースコード読解ガイド]]></title><description><![CDATA[

 1. 基本モジュールから始める
これらのモジュールはほぼすべてのRustプログラムで使用されるため、理解することがRust標準ライブラリを学ぶ基礎となります。


std::option::Option と std::result::Result


Option は値が None である可能性がある場合に使用され、Result はエラーハンドリングに使用されます。これらの列挙型の実装を理解することは非常に重要であり、Rustにおいて null 参照を回避し、エラーを捕捉するための核心的なメカニズムです。

学習方法：これらのモジュールのドキュメントを確認し、ソースコードの具体的な...]]></description><link>https://zenn.dev/leap_adam/articles/496c6a4a12bb9b</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/496c6a4a12bb9b</guid><pubDate>Sun, 16 Mar 2025 13:31:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VfY8bJhD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258A%25B9%25E6%259E%259C%25E7%259A%2584%25E3%2581%25AARust%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%25AD%25E8%25A7%25A3%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[TypeScriptからRustのコードを呼び出す]]></title><description><![CDATA[以前の記事でTypeScriptからC++のコードを呼び出す方法を紹介しました．しばらくしてRustで書いたコードをViteで管理しているWebアプリから呼び出す機会があったため，今回はTypeScriptからRustのコードを呼び出す方法をまとめました．

 サンプル
今回の記事で実装したコードは以下のリポジトリにまとめています．
https://github.com/rerrahkr/rust-wasm-example

 呼び出すコード
今回は以下のクレートをライブラリーrust_wasmとして準備しました．

rust_wasm/src/lib.rc
pub struct Sup...]]></description><link>https://zenn.dev/rerrah/articles/162b7f469a5dba</link><guid isPermaLink="true">https://zenn.dev/rerrah/articles/162b7f469a5dba</guid><pubDate>Sun, 16 Mar 2025 12:15:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--txIjlA_6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%258B%25E3%2582%2589Rust%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rerrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2cweTZjdnlzVVVibTYyamhnZ1N5M1pzMGl6Q1ZvU25KRTVTSF9acFFQOVJyRmx1dz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rerrah</dc:creator></item><item><title><![CDATA[axumでCORSを解決する方法]]></title><description><![CDATA[
 はじめに
APIサーバをaxumで実装していた際にCORS問題で詰まったので、備忘録として残します。

 CORS設定
axumが入っている前提となります。
以下のようにCORS設定をするだけで終わりです。
※Cargo.tomlで他に必要なcrateは省略しています。

Cargo.toml
[dependencies]
axum = "0.8.1"
tower-http={version="0.6.2", features=["cors"]}


main.rs
use axum::{http::HeaderValue, routing::get, Router};
use to...]]></description><link>https://zenn.dev/devtatsu/articles/cors-axum-rust</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/cors-axum-rust</guid><pubDate>Sun, 16 Mar 2025 11:57:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--y60ebC-M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axum%25E3%2581%25A7CORS%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item></channel></rss>