<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 31 Jul 2025 00:52:46 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Kubernetes リソースに対して SQL のクエリを実行するツールを作りました]]></title><description><![CDATA[
 概要

kuqu は Kubernetes クラスタ内のリソースに対して SQL 構文でクエリを実行できる Rust 製のコマンドラインツールです。Apache DataFusion を活用し、動的スキーマ推論によって Kubernetes リソースをテーブルデータとして扱い、複雑な条件検索、集約、結合操作を SQL で実行します。
以下に、実行例を示します。
$ kuqu "SELECT metadata.name AS pod, status.phase AS phase
     FROM 'pod/kube-system' WHERE status.phase = 'Runn...]]></description><link>https://zenn.dev/miscellaneous/articles/da57a0211926b5</link><guid isPermaLink="true">https://zenn.dev/miscellaneous/articles/da57a0211926b5</guid><pubDate>Wed, 30 Jul 2025 03:10:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---k69TuT3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kubernetes%2520%25E3%2583%25AA%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6%2520SQL%2520%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ynqa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzODIxZDZmYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ynqa</dc:creator></item><item><title><![CDATA[贋作Sudachi.go : Claude CodeでRustのコードを移植できるか]]></title><description><![CDATA[
 はじめに
「Claude Code って知ってますか？」とナイツのネタみたいな問いを投げてしまいますが、ほんと衝撃的でした。こんなにちゃんとしたコードが機械によって書かれる日が来るとは思ってませんでした。しかも、Claude Codeは、適当にコンソールを使って、適当なツールを組み合わせて、grep したり、sed したり、シェルスクリプトを作って検証し出したり、プログラマがやりそうなことはおおむねやってくれます。
デバッグコードを仕込んで printf デバッグし始めたときはほんとひっくり返りそうになりました。
そんなわけで、Claude Code でどのくらいのことが出来るだろう...]]></description><link>https://zenn.dev/ikawaha/articles/20250729-adc274796100fa</link><guid isPermaLink="true">https://zenn.dev/ikawaha/articles/20250729-adc274796100fa</guid><pubDate>Tue, 29 Jul 2025 13:55:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0CuqCXSS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B4%258B%25E4%25BD%259CSudachi.go%2520%253A%2520Claude%2520Code%25E3%2581%25A7Rust%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%25A7%25BB%25E6%25A4%258D%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ikawaha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZTZmYTNhMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ikawaha</dc:creator></item><item><title><![CDATA[Kubernetes オペレーターの形式検証]]></title><description><![CDATA[Kubernetes オペレーターは、ユーザーがコントローラーを独自に開発してアプリケーションやクラスターを制御するための拡張パターンです。カスタムリソースや外部アプリケーションのエンティティを非同期的に操作する必要があるため、オペレーターの開発は慎重に行う必要があります。
複雑なアプリケーションをバグなく開発するために、形式手法のアプローチがしばしば取り入れられます。Anvil は、Sun らが USENIX OSDI'24 で提案した、Kubernetes オペレーターに形式手法を取り入れたフレームワークです。論文や公開された GitHub リポジトリをもとに調査してみました。
元ネ...]]></description><link>https://zenn.dev/ajalab/articles/formally-verifying-kubernetes-controllers</link><guid isPermaLink="true">https://zenn.dev/ajalab/articles/formally-verifying-kubernetes-controllers</guid><pubDate>Tue, 29 Jul 2025 12:15:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Obilaj4v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kubernetes%2520%25E3%2582%25AA%25E3%2583%259A%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%25AE%25E5%25BD%25A2%25E5%25BC%258F%25E6%25A4%259C%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:koki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3JXNDNncWxWV0NFZTU2M3J5bUVoamlScXREVGJCREFuV2FRbkR5VFRvd0FnNWJOV1U9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>koki</dc:creator></item><item><title><![CDATA[【Rust】クロージャと関数ポインタ]]></title><description><![CDATA[今回の記事はRustのクロージャについて。他の多くの言語と同様、Rustにもクロージャや関数ポインタを扱うための構文が用意されています。ただし、Rustには所有権やトレイトなどの独自の機能が存在するため、これらとの関わりも理解する必要があるでしょう。
この記事ではRustにおけるクロージャ・関数ポインタの構文から、これらが内部ではどのように動作しているかを含めて解説していきます。

 クロージャ
Rustでは以下のような構文でクロージャを作成することができます。
let double = |a| a * 2;

let sub = |a, b| {
    a - b
};
|と|で囲わ...]]></description><link>https://zenn.dev/nuskey/articles/rust-closure-function-pointer</link><guid isPermaLink="true">https://zenn.dev/nuskey/articles/rust-closure-function-pointer</guid><pubDate>Tue, 29 Jul 2025 09:17:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OU6_Su4S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2581%25A8%25E9%2596%25A2%25E6%2595%25B0%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nuskey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkZTM4NWZlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nuskey</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC416 A ~ E)]]></title><description><![CDATA[AtCoder Beginner Contest 416のA-E問題を緑コーダーが分かりやすく解説をまとめました。参考になりましたら幸いです。

 ABC416-A
問題
https://atcoder.jp/contests/abc416/tasks/abc416_a
文字列 S の指定された区間 [L, R] が全て o かどうかを判定する問題です。
解説
指定された区間 [L, R] に含まれる文字を順に確認し、1つでも x が含まれていれば No 、全て o であれば、 Yes を出力します。
コード

abc416a.rs
use proconio::{input, marke...]]></description><link>https://zenn.dev/nakst_hide/articles/448c466f7953c8</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/448c466f7953c8</guid><pubDate>Mon, 28 Jul 2025 13:01:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6G1S4eFv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC416%2520A%2520%7E%2520E%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[【Bevy 0.16.1】初心者がクリックできる画像をつくるのに右往左往した話]]></title><description><![CDATA[
 はじめに
今回はRustで構築された驚くほどシンプルなデータ駆動型ゲームエンジン【Bevy】についてです！
最新バージョン(2025/7/27現在) Bevy 0.16.1において、画像をクリックして遊べる超簡単なゲームをつくってみました！

 １：インストールとBevyのECSについて
まずはBevyのインストールですが、これは簡単にできます。
初めてBevyに触るならこちらの方が初期設定やBevyの概要を理解する上でとても参考になります。
https://www.youtube.com/watch?v=5k66KB6DisI
もうひとつ、バージョンは古い(0.10)ですが、ゲーム...]]></description><link>https://zenn.dev/drmonkybrain/articles/2e941436ff634b</link><guid isPermaLink="true">https://zenn.dev/drmonkybrain/articles/2e941436ff634b</guid><pubDate>Mon, 28 Jul 2025 10:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Qwwj1jpq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Bevy%25200.16.1%25E3%2580%2591%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258C%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258B%25E3%2581%25AE%25E3%2581%25AB%25E5%258F%25B3%25E5%25BE%2580%25E5%25B7%25A6%25E5%25BE%2580%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%25A7%25E3%2582%258A%25E3%2583%25BC%25E3%2583%259A%25E3%2583%25B3%25E3%2582%25AE%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyMTU3MmQ5YzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あでりーペンギン</dc:creator></item><item><title><![CDATA[Rustの借用を影分身の術(NARUTO)で説明してみた]]></title><description><![CDATA[こんにちは、うずまきナルトだってばよ！！
どもども、southan（サウサン）です！
今回はタイトル通り、Rustの所有権をNarutoの『影分身の術』で（かなり無理やり）説明してみます。
自分の中ではしっくりきたのですが、皆さんには『余計に分からんってばよ！』と思わせてしまうかもしれません…。
もし分かりにくい部分があっても、どうかお手柔らかにお願いします！」
対象読者

Rustの学習を始めたばかりの方
Narutoをご存知の方（影分身の術が使えると尚良し）

になります。

 そもそも「影分身の術」と「借用」とは？

 影分身の術とは？
主人公うずまきナルトの得意忍術
術者のチャク...]]></description><link>https://zenn.dev/southan/articles/388c1fd18829d4</link><guid isPermaLink="true">https://zenn.dev/southan/articles/388c1fd18829d4</guid><pubDate>Sun, 27 Jul 2025 11:38:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0b2ol5yO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E5%2580%259F%25E7%2594%25A8%25E3%2582%2592%25E5%25BD%25B1%25E5%2588%2586%25E8%25BA%25AB%25E3%2581%25AE%25E8%25A1%2593%2528NARUTO%2529%25E3%2581%25A7%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B5%25E3%2582%25A6%25E3%2582%25B5%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1N2IzYmJkZDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>サウサン</dc:creator></item><item><title><![CDATA[Claude Code不要！プロンプトエンジニアリングでどこまで開発できる？]]></title><description><![CDATA[
 はじめに
「Claude Codeを使ってみたいけど、追加料金が...」
「プロンプトエンジニアリングだけで、どこまで実用的な開発ができるの？」
そんな疑問を抱えている個人開発者の方、いらっしゃいませんか？
私は普段AWSインフラエンジニアとして働きながら、プライベートではRustでのOSS開発に挑戦しています。これまでPythonでのスクリプト実装が中心でしたが、今年からRustとGoの学習に力を入れています。
今回、月額$20のClaude Proのみを使い、プロンプトエンジニアリングだけで実用的なRust CLIツールを開発するという検証プロジェクトを開始しました。
この記事で...]]></description><link>https://zenn.dev/kyonaka/articles/520cbfb5960c90</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/520cbfb5960c90</guid><pubDate>Sat, 26 Jul 2025 09:52:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JuGD6Gop--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%2520Code%25E4%25B8%258D%25E8%25A6%2581%25EF%25BC%2581%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%2593%25E3%2581%25BE%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NzcxODk2ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[RustのworkspaceをGitHub Actionsでキャッシュする（checksum-freshnessがくるまで）]]></title><description><![CDATA[Rustのプロジェクトでworkspace内に多数のcrates（補助ライブラリやCLI群など）を配置する場合、それらのビルド結果も GitHub Actions のキャッシュの対象にしたくなります。毎回workspace内のすべてのcratesを変更することはないからです。しかしこれをするときのハマり所があります。
Rustプロジェクトでよく使われるGitHub Actions用アクションの Swatinem/rust-cache にも cache-workspace-crates オプションがありますが、これを有効にするだけでは、キャッシュは保存されるものの、実際には使われません。s...]]></description><link>https://zenn.dev/mierune/articles/2af7b9e447712a</link><guid isPermaLink="true">https://zenn.dev/mierune/articles/2af7b9e447712a</guid><pubDate>Thu, 24 Jul 2025 01:24:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EGBGqmwT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEworkspace%25E3%2582%2592GitHub%2520Actions%25E3%2581%25A7%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2588checksum-freshness%25E3%2581%258C...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ciscorn%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNDdjMTQzMmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:MIERUNE%25E3%2581%25AEZenn%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2YWYyNzI0M2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ciscorn</dc:creator></item><item><title><![CDATA[LinuxコマンドをRustで再現してみた！～AIによる再現！これこそ現代の力！～]]></title><description><![CDATA[
 はじめに
はい。。前回から２週間ほど経ってしまいました。。。
意気込みを語り、、【Linuxコマンド同等のものをRustで作る！】と宣言していました！
で、あれからすぐにGemini CLIに頼り、、 「あれ？これで良いんだっけ？」 となりまして。
その後もGeminiと話しているうちに、Git管理？ナニソレオイシイノ？
ワタシ、バックアップファイルヲサクセイシテタヨ。となったり、
GitHubへアップロード？なんか、めんどくさい。。という風にやる気が落ちたりしてました！
簡潔に言います！
自分が知らないことを今からやるのは嫌だ！ って感じですね。。笑
エンジニアとしてどうなんだ？と...]]></description><link>https://zenn.dev/maromaron88/articles/26038adc968cc4</link><guid isPermaLink="true">https://zenn.dev/maromaron88/articles/26038adc968cc4</guid><pubDate>Tue, 22 Jul 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mvw6X6EO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592Rust%25E3%2581%25A7%25E5%2586%258D%25E7%258F%25BE%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%25EF%25BD%259EAI%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E5%2586%258D%25E7%258F%25BE%25EF%25BC%2581%25E3%2581%2593%25E3%2582%258C%25E3%2581%2593%25E3%2581%259D%25E7%258F%25BE%25E4%25BB%25A3%25E3%2581%25AE%25E5%258A%259B%25EF%25BC%2581%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Maromaron88%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2ZGVjNDJlYzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maromaron88</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC415 A ~ E)]]></title><description><![CDATA[AtCoder Beginner Contest 415のA-E問題を緑コーダーが分かりやすく解説をまとめてみました。参考になりましたら幸いです。

 ABC415-A
問題
https://atcoder.jp/contests/abc415/tasks/abc415_a
値 X が整数列 A に含まれるかを判定する問題です。
解説
整数列 A を順番に調べ、 X と一致する値が見つかった場合は Yes を出力し、見つからなかった場合は No を出力します。
コード

abc415a.rs
use proconio::input;

fn main() {
    // 入力
    ...]]></description><link>https://zenn.dev/nakst_hide/articles/44969d8eae7e3a</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/44969d8eae7e3a</guid><pubDate>Mon, 21 Jul 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uOMAPZgk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC415%2520A%2520%7E%2520E%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rustのbackonを使ってみた]]></title><description><![CDATA[
 概要
処理に失敗した場合のリトライ処理を特定のステータスコードで実行したい場合など、細かい制御を柔軟に設計したい場合にbackon crateが便利だったので、今回はそちらを紹介したいと思います。

 リトライ戦略について
ここでは、リトライ戦略として使われる指数関数バックオフ（Exponential Backoff） と ジッター（Jitter）について説明します。

 指数関数バックオフ
サーバーやリソースが一時的に過負荷になっている場合、リクエストを再送する間隔を徐々に長くすることで、全体の負荷を下げ、成功率を高めるための手法です。具体的には、再試行ごとに待機時間を倍々に増やし...]]></description><link>https://zenn.dev/bamboo_nova/articles/765d404ff34a15</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/765d404ff34a15</guid><pubDate>Sun, 20 Jul 2025 06:00:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RDWOjxz2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEbackon%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[脆弱性を探しに行って見つけた話]]></title><description><![CDATA[
 はじめに
no starch pressからFrom Day Zero to Zero Day[1]という本が出たので読んでいました。
第3章まで読んだので一旦実践してみようと思い自分で未知の脆弱性を探していたところ、運良く一個見つけたのでそこに至るまでの過程を書いていきたいと思います。

 ターゲットを探す
本には

Familiarity
Availability
Impact

を意識してターゲットを探すとよいというようなことが書いてあったので、まず自分の得意なRustで作られているOSSから脆弱性を探すことにしました。

 既知の脆弱性を探す
3章 Variant analy...]]></description><link>https://zenn.dev/hatoo/articles/66f9a9e4d65bc4</link><guid isPermaLink="true">https://zenn.dev/hatoo/articles/66f9a9e4d65bc4</guid><pubDate>Sat, 19 Jul 2025 06:23:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eB4QFQkb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2582%2592%25E6%258E%25A2%25E3%2581%2597%25E3%2581%25AB%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%25A6%25E8%25A6%258B%25E3%2581%25A4%25E3%2581%2591%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hatoo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMzRhZWY1YjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hatoo</dc:creator></item><item><title><![CDATA[文字とコードポイントを相互変換するコマンドを作成する]]></title><description><![CDATA[文字とコードポイントを相互変換する処理はシェル芸のよくある題材です。テストケースでこれらの相互変換をよく使うので Bash、Python、Rust でコマンドとして作成してみました。

 Bash での実装
ord と chr ファイルを用意して次のコードを記載します。

ord
input="$1"
echo -n "$input" \
  | grep -oP . \
  | while IFS= read -r char; do
      printf '%X ' "'$char"
    done
echo


chr
for cp in "$@"; do
  printf '...]]></description><link>https://zenn.dev/masakielastic/articles/20250718-chr-and-ord</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250718-chr-and-ord</guid><pubDate>Fri, 18 Jul 2025 22:55:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ABQ4P-Wv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E7%259B%25B8%25E4%25BA%2592%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[Booleanとは何なのかをRuby, Rust, Pythonで掘り下げる]]></title><description><![CDATA[
 はじめに
私のソフトウェアのエンジニアとしての入りはC言語でした。次にPythonを触り、Booleanを見たときに衝撃を覚えたのを思い出します。
今回は、普段使用しているBooleanをRuby, Rust, Pythonで掘り下げてみます。

 マシンスペック
MacBook Air M2 arm64
Docker上で実施

 準備

 Dockerの起動
mkdir bool_deepdive &amp;&amp; cd $_
mkdir -p ruby python rust
vim Dockerfile
# =================================...]]></description><link>https://zenn.dev/ka_kan/articles/21754a7a41738f</link><guid isPermaLink="true">https://zenn.dev/ka_kan/articles/21754a7a41738f</guid><pubDate>Fri, 18 Jul 2025 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EQJE0pYZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Boolean%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25E3%2582%2592Ruby%252C%2520Rust%252C%2520Python%25E3%2581%25A7%25E6%258E%2598%25E3%2582%258A%25E4%25B8%258B%25E3%2581%2592%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlOGJhYTMxOGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanda</dc:creator></item><item><title><![CDATA[Rust製のターミナル上で動くシンプルなオーディオプレイヤー『Neiro』]]></title><description><![CDATA[Windowsで動作するシンプルなオーディオプレイヤー『Neiro』を作成しました。内部的にはcpalライブラリがサポートしていればどの環境でも動くはず。
https://github.com/c0b23092db/neiro

 Neiro（ねゐろ）

タイトル通り、ターミナル上でオーディオファイルを再生できるコマンドです。日本語で『ねゐろ』です。
ファイラー機能はyazi経由での起動を想定しているので導入していません。yaziと合わせてお使いください。
ちなみにrodioを使った音声再生なので、tplayやascii-termのようにffmpeg、openCV、vcpkgを入れなくて...]]></description><link>https://zenn.dev/yuhi_ili/articles/40c0430e11a862</link><guid isPermaLink="true">https://zenn.dev/yuhi_ili/articles/40c0430e11a862</guid><pubDate>Fri, 18 Jul 2025 12:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--clprieFk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E4%25B8%258A%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258F%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AA%25E3%2583%2597%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25A4%25E3%2583%25BC%25E3%2580%258ENeiro%25E3%2580%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25A4%2595%25E6%2597%25A5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzOTk2NzgwZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>夕日</dc:creator></item><item><title><![CDATA[RustとWASMでフロントエンド開発してみたら、意外と現実的だった話]]></title><description><![CDATA[最近Redditでこんなコメントを見かけました：

“I hate JS. I’ve done the HTML and CSS, but I’m stuck. I want to use Rust instead.”

正直、すごく共感しました。長年JavaScriptを使ってきて、特に大規模な開発では「型がない」「ツール壊れる」「謎エラー多い」と疲れることもしばしば…。
そこでふと考えました。
Rust + WASM（WebAssembly）でフロントエンド開発って、現実的に使えるのか？
この記事では、実際に小さなプロジェクトで試してみた体験と、よかった点・つらかった点をシェアします...]]></description><link>https://zenn.dev/zoe_nichika/articles/31335ea05be794</link><guid isPermaLink="true">https://zenn.dev/zoe_nichika/articles/31335ea05be794</guid><pubDate>Fri, 18 Jul 2025 10:03:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q81GEdi0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8WASM%25E3%2581%25A7%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2582%2589%25E3%2580%2581%25E6%2584%258F%25E5%25A4%2596%25E3%2581%25A8%25E7%258F%25BE%25E5%25AE%259F%25E7%259A%2584%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NichikaP%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiMDI5ZjQ1YmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NichikaP</dc:creator></item><item><title><![CDATA[cargo alias を使ってタスク登録したかった]]></title><description><![CDATA[つまり私には合わなかったということです.

Cargo には alias を使って独自のコマンドを定義することができます[1].
これを使えば Cargo を npm-scripts のようにタスクランナーとして利用することができます. 正直 cargo clippy -- -D warnings ですらめんどくさいので, cargo lint ぐらい簡単に使いたいです. というか npm-scripts はそれくらい気軽に使ってますよね.
具体的には .cargo/config.toml をプロジェクトディレクトリに配置するか, $CARGO_HOME/config.toml を配置す...]]></description><link>https://zenn.dev/toms74209200/articles/use-cargo-alias-task-runner</link><guid isPermaLink="true">https://zenn.dev/toms74209200/articles/use-cargo-alias-task-runner</guid><pubDate>Thu, 17 Jul 2025 15:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--z2bDAUmY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo%2520alias%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E7%2599%25BB%25E9%258C%25B2%25E3%2581%2597%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:toms%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTVLV3Rva3h5eWFxT0M5ajlpQXhVQjF1NVlndDV3QUprRjVEc0lXcEVDNnVoUD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>toms</dc:creator></item><item><title><![CDATA[[Rust] プロシージャル生成向け非同期・並列タスクランナーの実装]]></title><description><![CDATA[新しい Rust プロジェクトで地形生成をするときに、並列処理でパフォーマンスを向上させたくなりました。
先に結果から提示すると、次のようにズームやパンによって視界に入った部分の地形を順次生成していくのが見て取れると思います。
https://youtu.be/Dk_N4domMHU
これが並列化前だと次のようになります。順次処理されていく様子が見て取れ、前の動画よりも明らかに遅いことが分かると思います。
https://youtu.be/s1nbg-eHYaY
GitHub リポジトリは以下ですが、開発中のため内容はまとまっていません。どんなアプリケーションなのかは別の記事でまとめたい...]]></description><link>https://zenn.dev/msakuta/articles/rust-parallel-task-runner</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/rust-parallel-task-runner</guid><pubDate>Thu, 17 Jul 2025 13:31:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vMciaoWF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B7%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25AB%25E7%2594%259F%25E6%2588%2590%25E5%2590%2591%25E3%2581%2591%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2583%25BB%25E4%25B8%25A6%25E5%2588%2597%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%258A%25E3%2583%25BC%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[RustでのWinAPI叩きの勘所]]></title><description><![CDATA[こんにちは。Povoです。
今回はrustでwinAPIを叩く方法について話します。
Windows-rs自体の特徴以外も書いていたりしますが目をつぶっていてください。
（rust初心者なので当たり前のことを威張り腐って説明してるかもしれないです）

 使用するクレート

windows-rs
winAPIを叩くためのMicrosoft公式が出しているクレートです。
winAPIというクレートもあるらしいですが、直で触りすぎてコードが乱雑になりやすいのと、アップデートも最近減ってるらしいのでwindows-rsのほうがおすすめです。
↓GitHub
https://github.com/...]]></description><link>https://zenn.dev/povo/articles/d905c47ed5970b</link><guid isPermaLink="true">https://zenn.dev/povo/articles/d905c47ed5970b</guid><pubDate>Thu, 17 Jul 2025 11:41:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--45M_dgAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%25AEWinAPI%25E5%258F%25A9%25E3%2581%258D%25E3%2581%25AE%25E5%258B%2598%25E6%2589%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Povo43%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxNGM2MjM3ZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Povo43</dc:creator></item></channel></rss>