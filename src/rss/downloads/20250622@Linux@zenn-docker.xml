<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/75b80a5922.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 22 Jun 2025 05:02:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RAGの精度が出ない...は卒業。グラフDBで 文脈の時系列 を捉える高機能RAGバックエンド「local-RAG-backend」]]></title><description><![CDATA[AI活用、特に自社データを使った生成AIの実現において、RAG（Retrieval-Augmented Generation）はもはや標準的なアプローチになりました。
しかし、いざRAGを構築しようとすると、多くの開発者が共通の課題に直面します。


多様なドキュメントへの対応: PDF, Word, PowerPointなど、社内に散在する多様なファイル形式を、どうやって効率的にテキスト化し、取り込むか？

精度が出ないチャンキング: 単純な文字数やトークン数での分割（チャンキング）では、文章の重要な文脈が失われ、検索精度が上がらずに頭を抱える。

ブラックボックスなベクトル検索: ど...]]></description><link>https://zenn.dev/suwash/articles/local_rag_backend_20250622</link><guid isPermaLink="true">https://zenn.dev/suwash/articles/local_rag_backend_20250622</guid><pubDate>Sat, 21 Jun 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pt1EFvwz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RAG%25E3%2581%25AE%25E7%25B2%25BE%25E5%25BA%25A6%25E3%2581%258C%25E5%2587%25BA%25E3%2581%25AA%25E3%2581%2584...%25E3%2581%25AF%25E5%258D%2592%25E6%25A5%25AD%25E3%2580%2582%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595DB%25E3%2581%25A7%2520%25E6%2596%2587%25E8%2584%2588%25E3%2581%25AE%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%2520%25E3%2582%2592%25E6%258D%2589%25E3%2581%2588%25E3%2582%258B%25E9%25AB%2598%25E6%25A9%259F%25E8%2583%25BDRAG%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2580%258Clocal-RAG...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suwa-sh%2520%252F%2520%25E8%25AB%258F%25E8%25A8%25AA%25E7%259C%259F%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlQ0cjdIdGJrWG10aG42OE53dmlHWXBLcGI5VWQ5N3hnRS1aQnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suwa-sh / 諏訪真一</dc:creator></item><item><title><![CDATA[Spring Boot × React アプリを AWS に本番デプロイ！後編：ALB × Auto Scalingで構築してみた]]></title><description><![CDATA[
 はじめに
これまで、Spring Boot + React を使って「イベント予約管理アプリ」を開発してきました。
ローカル環境で Docker を使って動かせるようにしたり、React で画面を作ったりと、一歩一歩成長を実感できる開発の連続でした。
そして今回は、いよいよ「アプリを本番環境へ」ということで、
AWS の Auto Scaling と Application Load Balancer（ALB）を使って、スケーラブルで安定した構成にチャレンジしてみました。
この記事では、

サーバー起動時に Docker コンテナが自動で起動するように設定
AMI を作成
Auto ...]]></description><link>https://zenn.dev/hiruma_devlog/articles/a40c21cbcc9050</link><guid isPermaLink="true">https://zenn.dev/hiruma_devlog/articles/a40c21cbcc9050</guid><pubDate>Sat, 21 Jun 2025 14:16:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WcrZIW-9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%25C3%2597%2520React%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%2520AWS%2520%25E3%2581%25AB%25E6%259C%25AC%25E7%2595%25AA%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25EF%25BC%2581%25E5%25BE%258C%25E7%25B7%25A8%25EF%25BC%259AALB%2520%25C3%2597%2520Auto%2520Scalin...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiruma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiZDhjN2U2NjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiruma</dc:creator></item><item><title><![CDATA[Docker環境でのnote_post.ymlテストとデバッグ（開発日記 No.107）]]></title><description><![CDATA[!
この記事は gemini-2.0-flash-001 によって自動生成されています。


 関連リンク

前回の開発日記


 はじめに
昨日は、GitHub Issue #3 を作成し、Docker 環境での note_post.yml のテストとデバッグを行う必要性を提起しました。今日は、その Issue に基づいて、実際に Docker 環境を構築し、パイプラインのデバッグを進めていきます。

 背景と目的
現在、note_post.yml パイプラインが失敗していますが、ローカルの WSL2 環境では OASIS ライブラリが正常に動作せず、テスト自体が困難な状況です。そこで...]]></description><link>https://zenn.dev/centervil/articles/2025-06-15_107_dev-diary</link><guid isPermaLink="true">https://zenn.dev/centervil/articles/2025-06-15_107_dev-diary</guid><pubDate>Sat, 21 Jun 2025 05:20:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mgru429X--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7%25E3%2581%25AEnote_post.yml%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A8%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25EF%25BC%2588%25E9%2596%258B%25E7%2599%25BA%25E6%2597%25A5%25E8%25A8%2598%2520No.107%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:centervil%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YlVZNXZiN0NvbG1TN0tPQmhqQ2M5V3lIRXYwVVhwZ2YyY2wxYTc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>centervil</dc:creator></item><item><title><![CDATA[[Docker] Dockerのコマンド逆引きとか]]></title><description><![CDATA[
 はじめに
これは自分用です。
わかりにくいかもしれませんがご了承ください。

 基本コマンド

 コンテナをビルドする
docker build [OPTIONS] &lt;PATH(Dockerfileがあるディレクトリ)&gt;


-t "&lt;イメージ名&gt;:&lt;タグ&gt;" \cdots タグはなくてもいい

--ssh default=$SSH_AUTH_SOCK --mount=type=ssh のときに使う


 動いているコンテナを取得

docker ps
docker container ls
docker container list
docker...]]></description><link>https://zenn.dev/anmoti/articles/1727a43d20706c</link><guid isPermaLink="true">https://zenn.dev/anmoti/articles/1727a43d20706c</guid><pubDate>Sat, 21 Jun 2025 02:20:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--90PogX_t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BDocker%255D%2520Docker%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E9%2580%2586%25E5%25BC%2595%25E3%2581%258D%25E3%2581%25A8%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:anmoti%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YmYzNTlkMWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>anmoti</dc:creator></item><item><title><![CDATA[【TypeScript】自社UIコンポーネントにMCPサーバーを作った話]]></title><description><![CDATA[
 はじめに
最近 Zenn の記事投稿をサボってたたくみです。
最近 Claude Code がやたら流行ってますね。この AI ブームに乗りたいと思い、自社 UI コンポーネントである「Kurage UI」の MCP サーバーを作って AI 導入の一歩を踏み出しました。
!
実装方法については後述していますが、初心者向けなので玄人の皆さんは読み飛ばすなりしてください


 背景
現在、弊社ユニフォームネクストでの新規 SaaS プロダクトでは Next.js（React）を使用しています。
以前は UI コンポーネントに Material UI を使用していましたが、機能の豊富さやデ...]]></description><link>https://zenn.dev/uniformnext/articles/kurage-ui-mcp</link><guid isPermaLink="true">https://zenn.dev/uniformnext/articles/kurage-ui-mcp</guid><pubDate>Sat, 21 Jun 2025 00:52:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dp02Z6ck--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E8%2587%25AA%25E7%25A4%25BEUI%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25ABMCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takumi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjMTE2MTQ2NWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%258D%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%2588%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzYjM5OWJmOGMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi</dc:creator></item><item><title><![CDATA[[Arch&Docker] "The legacy builder is deprecated" を消したい]]></title><description><![CDATA[
 TL;DR
sudo pacman -S docker-buildx

 環境

Windows 11
Arch Linux on WSL2


 事象
Arch on WSLにDockerをインストールして使おうと思ったら以下のエラーが出た。
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            ht...]]></description><link>https://zenn.dev/anmoti/articles/858d67ba541577</link><guid isPermaLink="true">https://zenn.dev/anmoti/articles/858d67ba541577</guid><pubDate>Fri, 20 Jun 2025 22:26:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aHawanUE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BArch%2526Docker%255D%2520%2522The%2520legacy%2520builder%2520is%2520deprecated%2522%2520%25E3%2582%2592%25E6%25B6%2588%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:anmoti%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YmYzNTlkMWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>anmoti</dc:creator></item><item><title><![CDATA[初心者向け Docker & Docker Compose ガイド]]></title><description><![CDATA[
 アプリ開発・テスト・デプロイを効率化するコンテナ入門


 目次

はじめに
Docker&nbsp;Desktopのインストール
Dockerとは？
Docker&nbsp;Composeとは？
Docker&nbsp;Composeの基本
まとめ



 はじめに
Dockerは コンテナ 技術を用いて、アプリケーションとその依存関係を一つのパッケージにまとめ、どこでも・誰でも・同じように 動かせるようにするプラットフォームです。本ガイドでは Docker の最低限押さえておきたい基礎をさらっと確認したあと、現場で最も出番の多い Docker&nbsp;Compose を中心に解...]]></description><link>https://zenn.dev/utokyo_aido/articles/20250227-121938</link><guid isPermaLink="true">https://zenn.dev/utokyo_aido/articles/20250227-121938</guid><pubDate>Fri, 20 Jun 2025 02:40:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BCmqmA4z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%2520Docker%2520%2526%2520Docker%2520Compose%2520%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:AIdo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhYWFkMWNkMzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>AIdo</dc:creator></item><item><title><![CDATA[ローカルでのコンテナを使った Keycloakでのトークン検証で失敗する原因]]></title><description><![CDATA[ローカル→コンテナkeycloak へ
http://localhost:8080/realms/master/protocol/openid-connect/token
で access_tokenを取得
コンテナapp→コンテナkeycloak へ
http://keycloak:8080/realms/master/protocol/openid-connect/token/introspect
で、上記 access_tokenを検証すると "active": false となり失敗する

原因
取得時と検証時のホスト名が一致していなければならない。

/etc/hosts に
...]]></description><link>https://zenn.dev/96wver/articles/cc6814f92112ac</link><guid isPermaLink="true">https://zenn.dev/96wver/articles/cc6814f92112ac</guid><pubDate>Thu, 19 Jun 2025 09:25:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i71NwiiL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%2520Keycloak%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%25B3%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%25A7%25E5%25A4%25B1%25E6%2595%2597%25E3%2581%2599%25E3%2582%258B%25E5%258E%259F%25E5%259B%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25A6%25E3%2583%2590%25E3%2583%25BC%2520%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjMGJiZDU4OWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クロウバー💻😺</dc:creator></item><item><title><![CDATA[dockerでviteを使ったreact環境を作ってみる]]></title><description><![CDATA[dockerでviteを使ったreactの環境を作成したのでメモ。
node.jsをインストールする必要があります。

 最終的なファイル構造
最終的な構造は以下の通り
└── react
    ├── docker-compose.yml
    ├── Dockerfile
    ├── eslint.config.js
    ├── index.html
    ├── node_modules
    ├── package-lock.json
    ├── package.json
    ├── public
    ├── README.md
    ├── src...]]></description><link>https://zenn.dev/amethyst/articles/c1fa2e8ff574bd</link><guid isPermaLink="true">https://zenn.dev/amethyst/articles/c1fa2e8ff574bd</guid><pubDate>Wed, 18 Jun 2025 11:03:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ohCDJ6Sx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%25E3%2581%25A7vite%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259Freact%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B4%25AB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzYTAyNjNlN2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>紫</dc:creator></item><item><title><![CDATA[Dockerfileに追記してDooD可能にする]]></title><description><![CDATA[
 TL;DR
/var/run/docker.sockをマウントして、docker-ce-cliをインストールして、ホストのdockerグループに所属するユーザーで触ればいい

 背景
Docker outside of docker、通称doodしたくなることがあった。でも、すでにalmalinux-9をベースイメージにすることを決めていたので、よくあるようにdocker公式イメージにするわけにはいかなかった。

 例
$ ls
Dockerfile
$ docker image build \
    --build-arg UID=`id -u` \
    --build-ar...]]></description><link>https://zenn.dev/hideki1217/articles/bd11c75c55c01e</link><guid isPermaLink="true">https://zenn.dev/hideki1217/articles/bd11c75c55c01e</guid><pubDate>Wed, 18 Jun 2025 05:25:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ijtzy95K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%25E3%2581%25AB%25E8%25BF%25BD%25E8%25A8%2598%25E3%2581%2597%25E3%2581%25A6DooD%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:h1de_n_n%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MWI5NzMyZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>h1de_n_n</dc:creator></item><item><title><![CDATA[Spring Boot × React アプリを AWS に本番デプロイ！前編：EC2 + RDS + Dockerで構築してみた]]></title><description><![CDATA[
 はじめに
本記事では、Spring Boot ＆ React で開発したイベント予約アプリを AWS 本番環境にデプロイする手順を紹介します。
構成は Auto Scaling と ALB（Application Load Balancer）を組み合わせ、アクセス集中にもある程度耐えられる環境を構築しました。
セキュリティ設定についてはまだ課題が多く、今回は「とにかく AWS 上でアプリを動かす」ことを優先しています。
AWS 上でアプリケーションを動かしてみたい方や、Auto Scaling・ALB の構成を試してみたい方に向けた記事となっています。
※記事の内容が多くなってしまっ...]]></description><link>https://zenn.dev/hiruma_devlog/articles/600a54bb8c6d1a</link><guid isPermaLink="true">https://zenn.dev/hiruma_devlog/articles/600a54bb8c6d1a</guid><pubDate>Tue, 17 Jun 2025 13:55:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FwU64ng0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%25C3%2597%2520React%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%2520AWS%2520%25E3%2581%25AB%25E6%259C%25AC%25E7%2595%25AA%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25EF%25BC%2581%25E5%2589%258D%25E7%25B7%25A8%25EF%25BC%259AEC2%2520%252B%2520RDS%2520%252B%2520Docke...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiruma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiZDhjN2U2NjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiruma</dc:creator></item><item><title><![CDATA[Dockerfileとdocker-compose.yml完全ガイド：初心者から上級者まで]]></title><description><![CDATA[
 Dockerfileとdocker-compose.yml完全ガイド：初心者から上級者まで

 はじめに
DockerとDocker Composeは現代の開発において欠かせないツールです。この記事では、Dockerfileとdocker-compose.ymlの基礎から応用まで、実践的な例を交えながら解説します。

 目次

Dockerfile基礎編
Dockerfile応用編
docker-compose.yml基礎編
docker-compose.yml応用編
ベストプラクティス
トラブルシューティング


 Dockerfile基礎編

 Dockerfileとは
Dock...]]></description><link>https://zenn.dev/ryoushin/articles/7a1c74b11eea92</link><guid isPermaLink="true">https://zenn.dev/ryoushin/articles/7a1c74b11eea92</guid><pubDate>Tue, 17 Jun 2025 13:07:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8JE03JNp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%25E3%2581%25A8docker-compose.yml%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25EF%25BC%259A%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258B%25E3%2582%2589%25E4%25B8%258A%25E7%25B4%259A%25E8%2580%2585%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A2%2581%25E9%259C%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlkZGE1ZGRlZGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>梁震</dc:creator></item><item><title><![CDATA[【Docker基本】Docker + Nginx Reverse Proxy 解説]]></title><description><![CDATA[
 🔰 Proxy サーバーとは？

クライアントがインターネット上のサービスに直接アクセスするのではなく、中継として動作するサーバーです。


 ✔️ 主な目的：

セキュリティ向上（内部サーバーを隠す）
キャッシュによる高速化
アクセス制御



 🧩 フォワードプロキシ（Forward Proxy）

内部のクライアント → 外部インターネットへのリクエストを中継
よく使うデータをキャッシュして高速化も可能
社内環境でWebアクセス制限に使われることも多い



 🧩 リバースプロキシ（Reverse Proxy）

外部からのアクセスを代理で内部に転送
ロードバランシングやセキュ...]]></description><link>https://zenn.dev/cruway/articles/f22f131d11d8e5</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/f22f131d11d8e5</guid><pubDate>Tue, 17 Jun 2025 11:21:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uJHJzuaI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E5%259F%25BA%25E6%259C%25AC%25E3%2580%2591Docker%2520%252B%2520Nginx%2520Reverse%2520Proxy%2520%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[n8n を Docker Compose で構築し、ワークフローで AWS Bedrock を利用する]]></title><description><![CDATA[
 はじめに
プログデンスの圓佛です。 n8n (エヌ・エイト・エヌ) はワークフローを使って作業を自動化することが出来るソフトウェアです。 「n8n」という名前は「nodemation = n + odematio (8 文字) + n」の略称だそうです。
Docker Installation で説明されていますが、n8n は Docker を使って手軽に始めることができます。 今回は以下の方針で n8n を構築する手順を説明します。

環境構築方針

Ubuntu 24.04 LTS 上にセルフホスト版を構築する
n8n は Docker コンテナで起動する
n8n は無料ライセン...]]></description><link>https://zenn.dev/progdence/articles/8895b9ea6c0178</link><guid isPermaLink="true">https://zenn.dev/progdence/articles/8895b9ea6c0178</guid><pubDate>Mon, 16 Jun 2025 07:32:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RtMZrCF7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:n8n%2520%25E3%2582%2592%2520Docker%2520Compose%2520%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2580%2581%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25BC%25E3%2581%25A7%2520AWS%2520Bedrock%2520%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:enbutsu%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNTg2NWZiY2IuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%2587%25E3%2583%25B3%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enbutsu</dc:creator></item><item><title><![CDATA[【Docker基本】Docker内部完全初期化]]></title><description><![CDATA[
 🐳 Docker 初期化方法まとめ
Dockerの環境を初期状態に戻すには、目的に応じて以下の手順を実行します。


 🧹 1. Dockerのキャッシュ・不要リソースの一括削除

 ✅ 未使用のすべてのデータをクリーンアップ
docker system prune -a --volumes


-a：未使用のすべてのイメージを削除

--volumes：未使用のボリュームも含めて削除
⚠️ ネットワーク、イメージ、コンテナ、ボリュームが削除されるため、注意して使用




 📦 2. すべてのコンテナの停止と削除
# コンテナをすべて停止
docker stop $(docker ...]]></description><link>https://zenn.dev/cruway/articles/07a3ac6aac9f95</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/07a3ac6aac9f95</guid><pubDate>Mon, 16 Jun 2025 05:46:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tzo1qaD0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E5%259F%25BA%25E6%259C%25AC%25E3%2580%2591Docker%25E5%2586%2585%25E9%2583%25A8%25E5%25AE%258C%25E5%2585%25A8%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[[Frontend Replace] インフラ設計篇]]></title><description><![CDATA[こんにちは。FE チームの MiyukiP です。
これまでFrontendリプレイスプロジェクトのエコシステムやアーキテクチャについてお伝えしました。
本稿では、それらを配信するインフラや開発環境について紹介していきます。

 前提
元々、スニーカーダンクはFrontend/API一体のモノリスをECSの単一serviceにデプロイして、ユーザーに配信していました。
今回のリプレイスにあたって、従来のserver serviceの他に、新たにfrontend serviceを作成して、そのservice内の前段にNginxをリバースプロキシとして設置して、段階的なページごとのリプレイス...]]></description><link>https://zenn.dev/team_soda/articles/9989-frontend-replace-infra</link><guid isPermaLink="true">https://zenn.dev/team_soda/articles/9989-frontend-replace-infra</guid><pubDate>Mon, 16 Jun 2025 00:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--id6ttVAn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BFrontend%2520Replace%255D%2520%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25A9%25E8%25A8%25AD%25E8%25A8%2588%25E7%25AF%2587%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:MiyukiP%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmYTM5ODQ3MWIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SODA%2520Engineering%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxZjQ5NDZmOGYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>MiyukiP</dc:creator></item><item><title><![CDATA[🚀 Lambda × コンテナ運用 × Terraformでやってみた！]]></title><description><![CDATA[
 📝 概要
コンテナが主流になりつつある現在、
「Lambdaもコンテナで動かすことでメリットがあるのでは？」
と感じることが増えてきました。
本記事では以下の内容を扱います👇

Lambdaをコンテナイメージでデプロイするメリット・デメリット
Terraform＋Dockerでの実装ハンズオン


 1. Lambda × コンテナのメリット

 🚫 ランタイム制限からの解放！
Lambdaの公式がサポートする言語・バージョンに依存せず、
独自のランタイムやライブラリが使えます。
💡 例：最新のPython / Go / Node.jsが使える → IaCとの相性もUP！

 🧩 I...]]></description><link>https://zenn.dev/railgun0402/articles/27f62973302750</link><guid isPermaLink="true">https://zenn.dev/railgun0402/articles/27f62973302750</guid><pubDate>Sun, 15 Jun 2025 15:03:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R0STcTLN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520Lambda%2520%25C3%2597%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E9%2581%258B%25E7%2594%25A8%2520%25C3%2597%2520Terraform%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%2581%25E3%2581%2597%25E3%2581%25B0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjMmIxMzk5NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まめしば</dc:creator></item><item><title><![CDATA[【コンテナ】コンテナオーケストレーションサービスについてざっくりまとめる]]></title><description><![CDATA[
 はじめに
コンテナの管理に使用されるコンテナオーケストレーションについてざっくりまとめます。
クラウドサービスはAWSを中心に記します。
※本当にざっくりまとめています。間違いなどがあればご指摘ください。

 コンテナオーケストレーションサービスとは

コンテナのアプリの操作を行えるサービス

コンテナの管理
コンテナアプリのデプロイ
スケーリング




 Kubernetesとは

Googleが開発したコンテナオーケストレーションサービス
様々なクラウドサービスとの互換性があり、汎用性が高い
学習コストが結構高いっぽい


 AWSのコンテナオーケストレーションサービス


E...]]></description><link>https://zenn.dev/kiku09020/articles/about-container-orchestration-kkp</link><guid isPermaLink="true">https://zenn.dev/kiku09020/articles/about-container-orchestration-kkp</guid><pubDate>Sun, 15 Jun 2025 13:22:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e4Wp5sXD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%25AA%25E3%2583%25BC%25E3%2582%25B1%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2581%258F%25E3%2581%25B4%25E3%2581%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNThZOWUtZXltSkFrR2VJV0pfc3NkVjlvOVRxeWtOOWhEN2Zqc3JoS2M9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きくぴぃ</dc:creator></item><item><title><![CDATA[GitHub Container Registryを使ってDockerイメージを管理する]]></title><description><![CDATA[
 はじめに
GitHub Container Registry（ghcr.io）使用したDockerイメージ管理とActionsの組み込みについて触れている記事です。
本記事では、手動でのイメージ管理から GitHub Actions での自動化まで段階的に進めていきます。

 GitHub Container Registry
GitHubの公式ドキュメントによると、GitHub Container Registry（以下GHCR）は以下のように定義されています

The Container registry stores container images within your o...]]></description><link>https://zenn.dev/tetoteto/articles/github-container-registory-first</link><guid isPermaLink="true">https://zenn.dev/tetoteto/articles/github-container-registory-first</guid><pubDate>Sun, 15 Jun 2025 06:26:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rsXqXItG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%2520Container%2520Registry%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Docker%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TetoTeto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXlIN1NhY21HVFFmR3hWQ1d2R01nX29ETVR0WU82UXJ6WGg1Z3dZOUs4VWRJPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TetoTeto</dc:creator></item><item><title><![CDATA[ISUCON練習問題private-isuの環境構築でハマったことと、初回ベンチマーク結果]]></title><description><![CDATA[
ISUCONの参考過去問"private-isu"をLocalに環境構築しようとした時にハマったことメモ

夏祭り2023↓のハンズオンでやろうとしたけどハマって時間内に終わらず...



./2023-08-27-isucon-summer-fes-2023-handson
private-isuのリポジトリはこちら
https://github.com/catatsuy/private-isu#docker-compose
試したLocalPCのスペック


MacBook Pro(13-inch, 2017)


OS: macOS Ventura バージョン13.4


チッ...]]></description><link>https://zenn.dev/kannna5296/articles/2023-08-27-private-isu-troubles</link><guid isPermaLink="true">https://zenn.dev/kannna5296/articles/2023-08-27-private-isu-troubles</guid><pubDate>Sun, 15 Jun 2025 04:26:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e3UZlhSD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ISUCON%25E7%25B7%25B4%25E7%25BF%2592%25E5%2595%258F%25E9%25A1%258Cprivate-isu%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A7%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25A8%25E3%2580%2581%25E5%2588%259D%25E5%259B%259E%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2581%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E7%25B5%2590%25E6%259E%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B1%25B1%25E6%25A0%25B9%25E6%25AD%25A3%25E5%25A4%25A7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeVMwU0lxM0NjOGlsbG5XLXg2c1BOc1JQRUdjazU1OHJBNHBsejU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山根正大</dc:creator></item></channel></rss>