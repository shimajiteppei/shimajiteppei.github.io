<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 29 Jun 2025 09:24:50 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Java業務チェックロジックに革命を──ラベルブロックという正攻法]]></title><description><![CDATA[
 Java業務チェックロジックに革命を──ラベルブロックという正攻法
Javaには"知ってはいるが使われていない"構文がいくつもあります。
その中でも特に「ラベル付きブロック」は、構文としては初期（Java 1.0）から存在しながら、
for文やwhile文の多重ループの脱出以外には活用されてきませんでした。
今回、私はこの構文を業務アプリにおけるチェックロジックに応用し、
設計・実装・保守のすべてにおいて大幅な改善をもたらす構造を提案します。


 💡 業務画面のチェックロジックが抱える課題
業務系アプリでは入力値に対するバリデーションが欠かせません。
しかし、以下のような課題が頻発...]]></description><link>https://zenn.dev/menimani/articles/9b9fecbf01ac07</link><guid isPermaLink="true">https://zenn.dev/menimani/articles/9b9fecbf01ac07</guid><pubDate>Sun, 29 Jun 2025 07:23:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g8-OX-J_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E6%25A5%25AD%25E5%258B%2599%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E9%259D%25A9%25E5%2591%25BD%25E3%2582%2592%25E2%2594%2580%25E2%2594%2580%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E6%25AD%25A3%25E6%2594%25BB%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:menimani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MWM5YzcyOTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>menimani</dc:creator></item><item><title><![CDATA[自作サービスをもとにSOLID原則について学んでみた]]></title><description><![CDATA[
 １. はじめに
この記事では、私が開発した映画レコメンドアプリ「MoviReco」を題材に、オブジェクト指向設計の原則「SOLID」について振り返ってみたいと思います。
MoviReco
SOLID原則は理解するのが難しいと言われがちですが、自分のコードに当てはめてみることで、一気に実感が湧きました。この記事では、各原則をMoviRecoの設計に照らし合わせながら、実際にどのように意識・適用したかをご紹介します。

 ２. SOLID原則とは？
SOLIDとは、以下の5つの設計原則の頭文字を取ったものです。

S: 単一責任の原則（Single Responsibility Prin...]]></description><link>https://zenn.dev/devtkms/articles/54fedeb23ae592</link><guid isPermaLink="true">https://zenn.dev/devtkms/articles/54fedeb23ae592</guid><pubDate>Sun, 29 Jun 2025 01:12:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aKNGDQtJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A8%25E3%2581%25ABSOLID%25E5%258E%259F%25E5%2589%2587%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A7%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2583%25BC%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVUwMjBPWjJyd3hIT25EY2RCaGdqYWFreGNINGlTXzlPdzNIUDlmUVQyZDlWZjNBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スーさん</dc:creator></item><item><title><![CDATA[【リーダブルコード】コード分量を減らす]]></title><description><![CDATA[
 🚫 無理に機能を実装しようとしない
新しいプロジェクトが始まると、テンションが上がって拡張性を意識した「すごい設計」をしようとしてしまいがちです。
しかし、実際には必要な機能を過大評価しがちで、またその実装にかかる手間を過小評価する傾向があります。
その結果、将来の修正で副作用（サイドエフェクト）が発生し、かえって保守が難しくなってしまいます。
最初から拡張性を完璧に考えるよりも、まず機能を実装 → 結果を確認 → 改善（リファクタリング）という流れの方が、集中しやすく成果も見えやすくなります。
public class FeatureBuilder {
    public voi...]]></description><link>https://zenn.dev/cruway/articles/e8f3e31cd29d44</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/e8f3e31cd29d44</guid><pubDate>Sun, 29 Jun 2025 00:35:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kJ3o_FAl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2588%2586%25E9%2587%258F%25E3%2582%2592%25E6%25B8%259B%25E3%2582%2589%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[Javaあれこれ #1]]></title><description><![CDATA[こんにちは、はじめまして。駆け出しエンジニアのオリザです。
スッキリわかるJava入門実践編（インプレス社）の練習問題にて、解答とは異なるコードで上手くいったため、覚え書きです。

 問題文
練習2-1 以下の仕様に従った金庫をStrongBoxクラスとして定義してください。

金庫クラスに格納するインスタンスの型は、開発時には未定である。
金庫には、1つのインスタンスを保存できる必要がある。
put()でインスタンスを保存し、get()でインスタンスを取得できる。
get()で取得する際、キャストを使わなくても格納前の方に代入できる。

練習2-2 作成したStrongBoxクラスに鍵...]]></description><link>https://zenn.dev/azure_blue/articles/20db946bf784fe</link><guid isPermaLink="true">https://zenn.dev/azure_blue/articles/20db946bf784fe</guid><pubDate>Sat, 28 Jun 2025 05:08:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOKHWMot--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%25E3%2581%2582%25E3%2582%258C%25E3%2581%2593%25E3%2582%258C%2520%25231%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AA%25E3%2583%25AA%25E3%2582%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSU5VSk5CZy1STmVHbFlzbi1xWk5qRy04Wld0X2hmYkp5d1IwLV9qWm5DcUZhUmFGMD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>オリザ</dc:creator></item><item><title><![CDATA[技術調査 - Gudu SQLFlow Lite]]></title><description><![CDATA[データエンジニアやデータアナリストにとって、複雑に絡み合ったSQLが「どのテーブルのどのカラムからデータを取得し、どこへ流しているのか」を正確に追跡する「データリネージ」は、データ品質の保証や影響範囲の調査に不可欠です。しかし、手作業での追跡はしばしば悪夢のような作業になりがちです。
https://zenn.dev/suwash/articles/stored_procedure_analysis_20250625
この記事では、前回紹介した製品の中から「Gudu SQLFlow」の無償版「Gudu SQLFlow Lite」の情報を整理します。

 ■概要
Gudu SQLFlowは...]]></description><link>https://zenn.dev/suwash/articles/gudu_sqlflow_lite_20250627</link><guid isPermaLink="true">https://zenn.dev/suwash/articles/gudu_sqlflow_lite_20250627</guid><pubDate>Fri, 27 Jun 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ph7UZBj2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%258A%2580%25E8%25A1%2593%25E8%25AA%25BF%25E6%259F%25BB%2520-%2520Gudu%2520SQLFlow%2520Lite%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suwa-sh%2520%252F%2520%25E8%25AB%258F%25E8%25A8%25AA%25E7%259C%259F%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlQ0cjdIdGJrWG10aG42OE53dmlHWXBLcGI5VWQ5N3hnRS1aQnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suwa-sh / 諏訪真一</dc:creator></item><item><title><![CDATA[JJUG CCC 2025 SpringでスポンサーLTに登壇しました]]></title><description><![CDATA[こんにちは、Omiaiのサーバーチームの青野です。
2025年6月7日に開催された JJUG CCC 2025 Spring にて、Omiaiはスポンサーとしてブースを出展し、同僚の井櫻と2名で スポンサーLT枠で登壇 しました。
この記事では、登壇内容のサマリーと当日の様子をお届けします！

 🎤 スポンサーLT「10年選手のOmiaiの今」
登壇資料はこちらです。

登壇では、以下のような内容をお話ししました。

 Omiaiのこれまで

国内マッチングアプリのパイオニア（2012年2月〜）
Javaで構築された10年超のモノリスを運用・改善
技術的負債と日々格闘しながらの開発


...]]></description><link>https://zenn.dev/omiai_techblog/articles/d8e360a1ac8a17</link><guid isPermaLink="true">https://zenn.dev/omiai_techblog/articles/d8e360a1ac8a17</guid><pubDate>Fri, 27 Jun 2025 09:13:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mGzZd7Ix--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JJUG%2520CCC%25202025%2520Spring%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BCLT%25E3%2581%25AB%25E7%2599%25BB%25E5%25A3%2587%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:awonosuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1OGM1ZjI5N2QuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Omiai%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJhMjljMWI3NWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>awonosuke</dc:creator></item><item><title><![CDATA[例外クラスのポリモーフィズム[Java入門]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方


 目次
1. 例外クラスのポリモーフィズム
2. catchブロックを複数記述する場合
3. マルチキャッチの場合
4. throwsが宣言さ...]]></description><link>https://zenn.dev/wakinoza/articles/e999fdfffe27eb</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/e999fdfffe27eb</guid><pubDate>Fri, 27 Jun 2025 08:04:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iwE7Lyfk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%258B%25E5%25A4%2596%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E3%2583%259D%25E3%2583%25AA%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A3%25E3%2582%25BA%25E3%2583%25A0%255BJava%25E5%2585%25A5%25E9%2596%2580%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[【リーダブルコード】考えをコードにする]]></title><description><![CDATA[
 🧠 はじめに：考えをコードに落とし込む

“難しいことを解決できることと、難しいことをわかりやすく説明できることは別物である”


 ✨ 良いコードとは？
「良いコード」とは、読む人が理解しやすいコードのことを意味します。単に動作するコードではなく、「何をしようとしているのか」が自然と伝わるコードこそが理想です。
読みやすいコードを実現するためには、以下の要素が重要です：

明確な変数名・関数名
意図を表現するコメント
大きなロジック単位の整理（オブジェクト構成）
曖昧な代名詞の排除（例：「それ」、「このコード」など）



 💬 抽象から具体へ：論理を明確に説明する
複雑なロジック...]]></description><link>https://zenn.dev/cruway/articles/34de18832a934e</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/34de18832a934e</guid><pubDate>Thu, 26 Jun 2025 11:51:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2GHCanim--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2580%2591%25E8%2580%2583%25E3%2581%2588%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[例外処理の基本<後編＞[Java入門]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaの例外処理について知りたい方


 目次
1. try-with-resources
2. throws
3. throw

 本文

 ...]]></description><link>https://zenn.dev/wakinoza/articles/7ca11a9ece7156</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/7ca11a9ece7156</guid><pubDate>Wed, 25 Jun 2025 07:36:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--06K7J9PP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%258B%25E5%25A4%2596%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%253C%25E5%25BE%258C%25E7%25B7%25A8%25EF%25BC%259E%255BJava%25E5%2585%25A5%25E9%2596%2580%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[Apache Rollerとはなんなのか？]]></title><description><![CDATA[今回はApache Rollerについて調べてみました。 今回も以下のツールを使って対象プロジェクトを決めました！
https://zenn.dev/akasan/articles/7e30ad266c02c4
※ 本企画に関する記事の目的は、それぞれのプロジェクトを本格的に深ぼるのではなく、プロジェクト名⇆どんな内容かをパッと思い出せるようにすることを目指します！
※ とはいえ深ぼってみたいプロジェクトがあればどんどん複数連載になると思います。

 Apache Rollerとは？
公式ページによると、

Apache Roller is a Java-based, full-feat...]]></description><link>https://zenn.dev/akasan/articles/ae458c49fb7c76</link><guid isPermaLink="true">https://zenn.dev/akasan/articles/ae458c49fb7c76</guid><pubDate>Tue, 24 Jun 2025 11:57:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4uQHFZ4H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Apache%2520Roller%25E3%2581%25A8%25E3%2581%25AF%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akasan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJfNDFtel9OY3dPYUtMRE1vc09tbVB6YmxHM0V5N3lNZzI3QWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Akasan</dc:creator></item><item><title><![CDATA[JavaSilver取りたい]]></title><description><![CDATA[「JavaSilver取りたい！」の記録]]></description><link>https://zenn.dev/taiyok/books/4651d2a053300f</link><guid isPermaLink="true">https://zenn.dev/taiyok/books/4651d2a053300f</guid><pubDate>Tue, 24 Jun 2025 09:46:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZTay8OKO--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9mYzAyN2E0NjcxLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>Sol@SE</dc:creator></item><item><title><![CDATA[【Java】 列挙型について]]></title><description><![CDATA[Java Goldを取得しようと最近学習をしております。
学んだことをアウトプットしていきたいと思いこの場で行おうと思います！
少しでも参考になれば幸いです。なにか間違い等あれば優しく指摘をしてくれますと嬉しいです😁

 列挙型
列挙型と言う名のクラスに値を保持するためのものだと思っています。
例えば、「信号」という別のクラスファイルが有りそこで「赤・黄・青」という値を使う場面がありその他のクラスファイルでは「ステータスの管理」をするものがありそこでは色で「未実行・実行中・完了」としています。
そんなときにすでに定義されている３色の値があればそれを呼び出すだけでよくなるのでとても便利です...]]></description><link>https://zenn.dev/hosoya_ren/articles/dbb111ed9258f6</link><guid isPermaLink="true">https://zenn.dev/hosoya_ren/articles/dbb111ed9258f6</guid><pubDate>Mon, 23 Jun 2025 04:16:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eCj1YZdi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%2520%25E5%2588%2597%25E6%258C%2599%25E5%259E%258B%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hosoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0JfWGxNdE5wRVlwTm5GUENGWV9DZ0RPYjZ4d3k3TnhtNWRpcDVTbHNIWGtyWllYND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hosoya</dc:creator></item><item><title><![CDATA[[Java]throw/throws とは （備忘録）]]></title><description><![CDATA[
 １．throw とは
・意図的に例外を発生させて、例外処理を行うことができます。
・意図的に例外を発生させるとは、ある条件と一致する場合に例外を発生させ、エラーメッセージを返すという意味です。
※例外が分からない場合、こちらを確認してください。

throwの書き方
// new 例外クラス名 により例外オブジェクトが生成
throw new 例外クラス名(表示するメッセージ内容);


 ２．throws とは
・メソッドにおいて、指定した例外が発生することを宣言する為に使用します。
・メソッド内で例外が発生した場合、呼び出し元に例外処理を投げることができます。
!
重要：
例外処...]]></description><link>https://zenn.dev/yama_kawa/articles/797680d5f6ab15</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/797680d5f6ab15</guid><pubDate>Sun, 22 Jun 2025 09:29:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0Yc0ZcXd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255Dthrow%252Fthrows%2520%25E3%2581%25A8%25E3%2581%25AF%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[値渡し、ポインタ渡し、オブジェクト渡し、参照渡しの言語別対応表と用語説明]]></title><description><![CDATA[関数の実引数に変数を指定したとき、仮引数にどんな渡し方ができるかの言語別対応表と、関連用語の説明を書いてみました。
値渡しと参照渡しの理解の助けになりましたら幸いです。
!
タイトルにある「オブジェクト渡し」(call by object) は、Wikipediaにある「参照の値渡し」で記載しています。


 言語別対応表



＼ 渡し方　 ＼言語　＼

値渡し(値コピー)&nbsp;

ポインタ渡し(ポインタ値コピー値共有)

参照の値渡し(参照値コピーオブジェクト共有)

参照渡し(コピーなし変数共有)




C#
できる(int arg)
できる(int *arg)
できる(O...]]></description><link>https://zenn.dev/shiracamus/articles/7d0b9e65e92e67</link><guid isPermaLink="true">https://zenn.dev/shiracamus/articles/7d0b9e65e92e67</guid><pubDate>Sat, 21 Jun 2025 23:29:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EXucpA4v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2580%25A4%25E6%25B8%25A1%25E3%2581%2597%25E3%2580%2581%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E6%25B8%25A1%25E3%2581%2597%25E3%2580%2581%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%25B8%25A1%25E3%2581%2597%25E3%2580%2581%25E5%258F%2582%25E7%2585%25A7%25E6%25B8%25A1%25E3%2581%2597%25E3%2581%25AE%25E8%25A8%2580%25E8%25AA%259E%25E5%2588%25A5%25E5%25AF%25BE%25E5%25BF%259C%25E8%25A1%25A8%25E3%2581%25A8%25E7%2594%25A8%25E8%25AA%259E%25E8%25AA%25AC%25E6%2598%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shiracamus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shiracamus</dc:creator></item><item><title><![CDATA[Spring Boot × React アプリを AWS に本番デプロイ！後編：ALB × Auto Scalingで構築してみた]]></title><description><![CDATA[
 はじめに
これまで、Spring Boot + React を使って「イベント予約管理アプリ」を開発してきました。
ローカル環境で Docker を使って動かせるようにしたり、React で画面を作ったりと、一歩一歩成長を実感できる開発の連続でした。
そして今回は、いよいよ「アプリを本番環境へ」ということで、
AWS の Auto Scaling と Application Load Balancer（ALB）を使って、スケーラブルで安定した構成にチャレンジしてみました。
この記事では、

サーバー起動時に Docker コンテナが自動で起動するように設定
AMI を作成
Auto ...]]></description><link>https://zenn.dev/hiruma_devlog/articles/a40c21cbcc9050</link><guid isPermaLink="true">https://zenn.dev/hiruma_devlog/articles/a40c21cbcc9050</guid><pubDate>Sat, 21 Jun 2025 14:16:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WcrZIW-9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%25C3%2597%2520React%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%2520AWS%2520%25E3%2581%25AB%25E6%259C%25AC%25E7%2595%25AA%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25EF%25BC%2581%25E5%25BE%258C%25E7%25B7%25A8%25EF%25BC%259AALB%2520%25C3%2597%2520Auto%2520Scalin...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiruma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiZDhjN2U2NjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiruma</dc:creator></item><item><title><![CDATA[Java Gold 合格体験記]]></title><description><![CDATA[
 はじめに
先日、Java Gold（Oracle Certified Java Programmer, Gold SE 11）に合格しました。
私が実際に行った学習方法や試験当日の所感、使った教材などをまとめます。
これから受験される方の参考になれば幸いです。

 受験の目的

資格手当がもらえるため
SESで働いているため、面談時に少しでもアピールになると思った
Javaの理解をより深めたいと思ったため


 使用した教材・ツール

黒本（徹底攻略 Java SE 11 Gold 認定資格試験 対応問題集）
ChatGPT（不明点の解消、理解の補助）


 学習内容

 勉強期間と...]]></description><link>https://zenn.dev/wakame_atsushi/articles/5c3051c314652c</link><guid isPermaLink="true">https://zenn.dev/wakame_atsushi/articles/5c3051c314652c</guid><pubDate>Sat, 21 Jun 2025 07:47:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LTj8_2sO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Gold%2520%25E5%2590%2588%25E6%25A0%25BC%25E4%25BD%2593%25E9%25A8%2593%25E8%25A8%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2581%258B%25E3%2582%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NDI2MjM3MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わかめ</dc:creator></item><item><title><![CDATA[【リーダブルコード】一度に一つだけ ― コードを「脱フラグメント」せよ]]></title><description><![CDATA[
 ✅ 一度に複数のことをやるコードは読みにくい
「オブジェクトの初期化」「入力の解析」「ビジネスロジックの適用」「データの検証」など、ひとつのコードブロックに多くの処理を詰め込むと、読む人にとって非常に理解しづらいものになります。
著者はこれを「コードの断片化」と呼び、それを解消することを「脱フラグメント（defragmenting）」としています。


 📘 読みやすいコードの基準とは？
コードが短ければ読みやすいというわけではありません。「一目で何をしているかわかること」が本質です。
そのためには、ひとつのコードブロックがひとつの目的だけを持つべきです。


 🎯 小さな作業でも分...]]></description><link>https://zenn.dev/cruway/articles/e15a20b8d9e286</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/e15a20b8d9e286</guid><pubDate>Sat, 21 Jun 2025 05:38:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vy-8wpwx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2580%2591%25E4%25B8%2580%25E5%25BA%25A6%25E3%2581%25AB%25E4%25B8%2580%25E3%2581%25A4%25E3%2581%25A0%25E3%2581%2591%2520%25E2%2580%2595%2520%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2580%258C%25E8%2584%25B1%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25B0%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2580%258D%25E3%2581%259B%25E3%2582%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[JJUG CCC 2025 Springにブース出展しました！]]></title><description><![CDATA[こんにちは、エニトグループでHRを担当している平賀です。
2025年6月7日（土）にベルサール新宿グランドで開催された「JJUG CCC 2025 Spring」に、Omiaiとして初めてブーススポンサーとして参加しました！
本記事では、当日のブースの様子や、現場での学び・気づきをまとめてお届けします。


 なぜJJUGにブース出展したのか？
JJUG CCCは、日本最大級のJava技術者向けカンファレンス。
Javaに関心のあるエンジニアが一堂に会する、熱量の高いコミュニティイベントです。
Omiaiでは、バックエンドの主要なAPI群をJavaで開発しています。
今回のブース出展は、...]]></description><link>https://zenn.dev/omiai_techblog/articles/2e2737cbda98df</link><guid isPermaLink="true">https://zenn.dev/omiai_techblog/articles/2e2737cbda98df</guid><pubDate>Fri, 20 Jun 2025 07:45:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6_rjNcQf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JJUG%2520CCC%25202025%2520Spring%25E3%2581%25AB%25E3%2583%2596%25E3%2583%25BC%25E3%2582%25B9%25E5%2587%25BA%25E5%25B1%2595%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:K1744%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1OGM1ZjI5N2QuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Omiai%2520Tech%2520Blog%2Cx_220%2Cy_160/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>K1744</dc:creator></item><item><title><![CDATA[例外処理の基本＜前編＞[Java入門]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaの例外について知りたい方


 目次
1. 不具合と例外
2. 例外インスタンスのメソッド
3. try-catch-finally

 ...]]></description><link>https://zenn.dev/wakinoza/articles/218665d7c33031</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/218665d7c33031</guid><pubDate>Fri, 20 Jun 2025 07:44:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r1yi487B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%258B%25E5%25A4%2596%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25EF%25BC%259C%25E5%2589%258D%25E7%25B7%25A8%25EF%25BC%259E%255BJava%25E5%2585%25A5%25E9%2596%2580%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[Java開発者のための静的解析とプリコミットフックについての備忘録]]></title><description><![CDATA[
 Java開発者のための静的解析とプリコミットフックについての備忘録

 はじめに
Javaでプログラミングをしている皆さん、コミット前の静的解析やコードフォーマットで困ったことはありませんか？

ターミナルでコマンドを叩くのが面倒
エラーが出ても詳細がわからない
EclipseやIntelliJ IDEAとの設定が大変（毎回忘れる）
pre-commitフックが無言で失敗する（そもそもpre-commitフックって何？０

今回のテーマは、
これらの課題を解決する「静的解析とプリコミットフック」の仕組みを考えてみた話です

 背景と課題

 プロジェクトの要件


IDE: Ecli...]]></description><link>https://zenn.dev/madaozaku/articles/02b2e0e14efd57</link><guid isPermaLink="true">https://zenn.dev/madaozaku/articles/02b2e0e14efd57</guid><pubDate>Thu, 19 Jun 2025 14:19:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X_ljOEI9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E9%259D%2599%25E7%259A%2584%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%25A8%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B3%25E3%2583%259F%25E3%2583%2583%25E3%2583%2588%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:madaozaku%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZiNzRjODhjOTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>madaozaku</dc:creator></item></channel></rss>