<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 26 Jul 2025 10:40:44 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【筋トレ × Web開発】PPL-tracker を作った話｜記録で伸ばす筋トレ習慣]]></title><description><![CDATA[
 💡 PPL-tracker を作ったきっかけ
筋トレの記録、紙やメモアプリじゃ物足りない…。
そんな悩みを解決すべく、PPL法に特化したトレーニング記録アプリを開発しました！
この記事ではアプリの特徴や、開発で意識したポイントを紹介します。
URL
https://ppl-tracker3-fszn.vercel.app/
GitHub
https://github.com/yoscodes/ppl-tracker3


 🏋️‍♂️ PPL-tracker とは？

PPL-trackerはPush（胸・肩・三頭）／Pull（背中・二頭）／Leg（脚）**という3つのカテゴリに分け...]]></description><link>https://zenn.dev/4o7i1/articles/9f3441c92dda14</link><guid isPermaLink="true">https://zenn.dev/4o7i1/articles/9f3441c92dda14</guid><pubDate>Sat, 26 Jul 2025 08:59:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RI-XMEAF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E7%25AD%258B%25E3%2583%2588%25E3%2583%25AC%2520%25C3%2597%2520Web%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591PPL-tracker%2520%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%25EF%25BD%259C%25E8%25A8%2598%25E9%258C%25B2%25E3%2581%25A7%25E4%25BC%25B8%25E3%2581%25B0%25E3%2581%2599%25E7%25AD%258B%25E3%2583%2588%25E3%2583%25AC%25E7%25BF%2592%25E6%2585%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yosei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2NDRlNGYxM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosei</dc:creator></item><item><title><![CDATA[Cocos2dx-js v3でのSpiderMonkeyのVMの再起動のコツ]]></title><description><![CDATA[
 感想
正しいスレッドを使うことメモリ解放は人類には早すぎる。

 これなんですか
昔に作ったCocos2dx-jsアプリをメンテナンスしよとしているなかでActivityの再起動問題に対応しようとしている少数の人の向け。
最近、AndroidでAPI Level 35あたりからアクティビティの再起動への対応を促すため警告などが増た。Level 37あたりからはカテゴリーがゲーム以外は大画面での再起動対応が必須になるようだ。
アクティビティの再起動が起こるとGLTreadが変わり、そうするとJavascript EngineであるSpiderMonkeyの再起動が必要になる。しないとち...]]></description><link>https://zenn.dev/nekomimimi/articles/a67bb6c006853d</link><guid isPermaLink="true">https://zenn.dev/nekomimimi/articles/a67bb6c006853d</guid><pubDate>Sat, 26 Jul 2025 03:19:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F1FFGj2N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cocos2dx-js%2520v3%25E3%2581%25A7%25E3%2581%25AESpiderMonkey%25E3%2581%25AEVM%25E3%2581%25AE%25E5%2586%258D%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nekomimimi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJjNjEyMjg4NzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nekomimimi</dc:creator></item><item><title><![CDATA[JavaScriptでよく使う配列メソッド【要素の検索・判定｜構文・使用例・注意点】]]></title><description><![CDATA[
 🚀 JavaScript 配列メソッド — 要素の検索・判定 編
JavaScript では、配列の要素を検索したり、条件に一致するかを簡単に判定できる
便利なメソッドが豊富に用意されています。
ここでは、その中でも特によく使われる基本の検索・判定メソッドを紹介します。


 📌 includes(): 配列に要素が含まれているか判定
includes() は、配列に特定の要素が含まれているかを判定し、真偽値（true / false） を返します。
非破壊的メソッド で、検索は厳密等価（===）で行われます。
単純な存在確認をしたい場合に便利で、特定の値が含まれているかをすぐに調べ...]]></description><link>https://zenn.dev/hhh/articles/b817e4a4284f6a</link><guid isPermaLink="true">https://zenn.dev/hhh/articles/b817e4a4284f6a</guid><pubDate>Fri, 25 Jul 2025 22:47:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---s9IvJTZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E9%2585%258D%25E5%2588%2597%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2580%2590%25E8%25A6%2581%25E7%25B4%25A0%25E3%2581%25AE%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%25BB%25E5%2588%25A4%25E5%25AE%259A%25EF%25BD%259C%25E6%25A7%258B%25E6%2596%2587%25E3%2583%25BB%25E4%25BD%25BF%25E7%2594%25A8%25E4%25BE%258B%25E3%2583%25BB%25E6%25B3%25A8%25E6%2584%258F%25E7%2582%25B9%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hhh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNiM2FkYTFlMjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hhh</dc:creator></item><item><title><![CDATA[文字列を区切ると空文字が生成される]]></title><description><![CDATA[const text = 'なんかのエラーです。もう一度懲りずにやり直してください。';
const sentence = text.split('。');
console.log(sentence);
// (3) ['なんかのエラーです', 'もう一度懲りずにやり直してください', '']
最後に空文字ができるの、なぜなのかよく分からず...
日本語が原因なのかと思いましたが、関係ないようです
const text = 'nankanoeradesu.mouichidokorizuniyarinaoshitekudasai.';
const sentence = text.split...]]></description><link>https://zenn.dev/tanaa/articles/e48a460fb8c699</link><guid isPermaLink="true">https://zenn.dev/tanaa/articles/e48a460fb8c699</guid><pubDate>Fri, 25 Jul 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CwKd4UmS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E5%258C%25BA%25E5%2588%2587%25E3%2582%258B%25E3%2581%25A8%25E7%25A9%25BA%25E6%2596%2587%25E5%25AD%2597%25E3%2581%258C%25E7%2594%259F%25E6%2588%2590%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tana%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxNWJiOGQ5NTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tana</dc:creator></item><item><title><![CDATA[怖すぎるコードから学ぶ認証でやっちゃいけないことn選]]></title><description><![CDATA[
 怖すぎるコード
Twitter(旧X)に投稿された怖すぎるコードの何が”怖すぎる”のか言語化してみます。

 引用元
https://x.com/kenn/status/1948381902232268956

 コードの文字起こし
該当のコードは以下の通りです。
&lt;!-- todo: put this in a different file!!! --&gt;
&lt;script&gt;
function authenticateUser(username, password) {
    var accounts = apiService.sql(
        "SE...]]></description><link>https://zenn.dev/kyokasuigetu/articles/8dfa62f8277470</link><guid isPermaLink="true">https://zenn.dev/kyokasuigetu/articles/8dfa62f8277470</guid><pubDate>Fri, 25 Jul 2025 07:23:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E4QuqmTm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%2596%25E3%2581%2599%25E3%2581%258E%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%258B%25E3%2582%2589%25E5%25AD%25A6%25E3%2581%25B6%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2583%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E3%2581%2593%25E3%2581%25A8n%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2590%2588%25E5%2590%258C%25E4%25BC%259A%25E7%25A4%25BE%25E6%25A1%259C%25E8%258A%25B1%25E6%25B0%25B4%25E6%259C%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2ZDYyNjFmZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>合同会社桜花水月</dc:creator></item><item><title><![CDATA[Next.js と Serwist でオフラインアプリを構築する]]></title><description><![CDATA[LocallyTools がリリースされてしばらく経ちました。製品はブラウザの機能を利用してローカルでデータを処理していますが、ユーザーからは常に信頼性について疑問を持たれていました。「本当にファイルがアップロードされないのですか？」「データが漏洩しないことをどう証明できますか？」
これらの疑問により、完全なオフライン機能の実装を決意しました。考え方はシンプルです：アプリがインターネットから切断された状態で正常に動作すれば、データがユーザーのデバイスから離れないことを確実に証明できます。
実装過程で、オフライン化がもたらす利点は予想をはるかに超えていることがわかりました：
ユーザーの信頼...]]></description><link>https://zenn.dev/chrisdev/articles/897d5861069faf</link><guid isPermaLink="true">https://zenn.dev/chrisdev/articles/897d5861069faf</guid><pubDate>Fri, 25 Jul 2025 05:52:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pp-IV8Rk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25A8%2520Serwist%2520%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Chris%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwMDI0ZWUyYzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Chris</dc:creator></item><item><title><![CDATA[(JS/TS) 「動き」を表現するための基本計算まとめ_基礎]]></title><description><![CDATA[
 動きを構成する3つの要素


位置 (Position)：物体が存在する座標

速度 (Velocity)：物体が動く速さと方向

加速度 (Acceleration)：速度が変化する度合



 ① 一定速度での移動
物体が一定の速度で動く場合、位置の変化量（距離）は次の式で求められます。

距離 = 速度 × 時間

📌 例：毎秒5mの速度で3秒動く場合

5 × 3 = 15m



 ② 重力による落下（等加速度運動）
現実世界では「重力」という加速度が働くため、物体が落下する際は以下の式を使います。

移動距離 = 初速度 × 時間 + \frac{1}{2} × 加速度 ...]]></description><link>https://zenn.dev/hyoni/articles/93ee3b10f2ba49</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/93ee3b10f2ba49</guid><pubDate>Fri, 25 Jul 2025 04:31:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MsOqj1Bl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2528JS%252FTS%2529%2520%25E3%2580%258C%25E5%258B%2595%25E3%2581%258D%25E3%2580%258D%25E3%2582%2592%25E8%25A1%25A8%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581_%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[行同士の依存関係を考える]]></title><description><![CDATA[
 tl;dr
コードを書くとき、自分には矢印が見えています。
それは、ある行が他の行に依存していることを意味する矢印で、変数の定義、関数の呼び出し、副作用など、すべてがどこかに矢印を伸ばしています。
この矢印の数や長さ、複雑さをなるべく減らすようにすると、コードは格段に読みやすく、壊れにくくなります。

 行と行のあいだの矢印
たとえば以下のようなコードを見てみましょう。
const a = 3;
const b = a + 1;
const c = b * 2;
console.log(c);
このコードの行や変数には、明確な依存関係があります。


b は a に依存しています

...]]></description><link>https://zenn.dev/unhappychoice/articles/ca9a78234bc7bc</link><guid isPermaLink="true">https://zenn.dev/unhappychoice/articles/ca9a78234bc7bc</guid><pubDate>Fri, 25 Jul 2025 02:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cCswiaaw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A1%258C%25E5%2590%258C%25E5%25A3%25AB%25E3%2581%25AE%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuji%2520Ueki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2htc0V1eUFJV0pMZjZCTGdTM1VweG5INnU5N0RCTHlrRkhXZmg5Q2t3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuji Ueki</dc:creator></item><item><title><![CDATA[JavaScriptでよく使う配列メソッド【要素の追加・削除まとめ｜構文・使用例・注意点】]]></title><description><![CDATA[
 🚀 JavaScript 配列メソッド — 要素の追加・削除 編
JavaScript では、配列の要素を簡単に追加・削除できるメソッドが豊富に用意されています。
ここでは、その中でも特によく使われる基本メソッドを紹介します。

 📌 push(): 配列の末尾に要素を追加
push() は 1 つまたは複数の要素を配列の末尾に追加し、新しい長さを返します。
元の配列を直接変更する 破壊的メソッド です。
📜 構文：
array.push(element1, ..., elementN)
📎 戻り値: 新しい配列の長さ
📎 引数: 追加する要素（複数可）


 🌟 例：1つ追加
co...]]></description><link>https://zenn.dev/hhh/articles/c73a4113176d5f</link><guid isPermaLink="true">https://zenn.dev/hhh/articles/c73a4113176d5f</guid><pubDate>Thu, 24 Jul 2025 03:41:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qUjunuEE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E9%2585%258D%25E5%2588%2597%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2580%2590%25E8%25A6%2581%25E7%25B4%25A0%25E3%2581%25AE%25E8%25BF%25BD%25E5%258A%25A0%25E3%2583%25BB%25E5%2589%258A%25E9%2599%25A4%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25EF%25BD%259C%25E6%25A7%258B%25E6%2596%2587%25E3%2583%25BB%25E4%25BD%25BF%25E7%2594%25A8%25E4%25BE%258B%25E3%2583%25BB%25E6%25B3%25A8%25E6%2584%258F%25E7%2582%25B9%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hhh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNiM2FkYTFlMjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hhh</dc:creator></item><item><title><![CDATA[Google ChatでユーザーIDを取得する方法]]></title><description><![CDATA[
 はじめに
この記事を読むことで、以下のことができるようになります。

Google Chatでbotがメンションに必要なユーザーIDを簡単に取得する方法を理解できる
Chrome開発者コンソールを使った効率的な情報収集技術を身につけられる
Google Chat APIを活用したbot開発の基礎知識を得られる

今回はChromeブラウザーで操作を行います。
Google Chatのbotがユーザーにメンションするには、そのユーザーのUSER_IDを調べて、テキストメッセージに次のコマンドを埋め込む必要があります。
&lt;users/USER_ID&gt;

 Step 1: Go...]]></description><link>https://zenn.dev/sento_group/articles/google-chat-userid-console-script-20250717</link><guid isPermaLink="true">https://zenn.dev/sento_group/articles/google-chat-userid-console-script-20250717</guid><pubDate>Thu, 24 Jul 2025 03:24:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hea9LTyS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%2520Chat%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BCID%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sento%2520tech%2520blog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1Y2ZjOGE4OTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sento tech blog</dc:creator></item><item><title><![CDATA[5.4K Star Bluetooth通信革命！GitHubで話題沸騰の分散型通信ツールBitChatがオープンソース化！]]></title><description><![CDATA[5.4K Star bitchat Bluetooth通信革命！GitHubで話題沸騰の分散型通信ツールBitChatがオープンソース化！
従来の通信はインターネットとサーバーに依存しており、プライバシー漏洩や検閲のリスクが存在します。
本日ご紹介するのは、オープンソース化直後に大注目を浴びた通信ツールです。このツールは、従来のインターネット依存型通信方式を根本から打破し、完全にBluetoothに依存。周辺デバイスで自律的に「Bluetoothリレーネットワーク」を構築し、ポイントツーポイントのエンドツーエンド暗号化チャットを実現します。
その名も：BitChat app。Swiftで...]]></description><link>https://zenn.dev/brookszd/articles/28435008018656</link><guid isPermaLink="true">https://zenn.dev/brookszd/articles/28435008018656</guid><pubDate>Thu, 24 Jul 2025 01:08:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C_loNNZc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:5.4K%2520Star%2520Bluetooth%25E9%2580%259A%25E4%25BF%25A1%25E9%259D%25A9%25E5%2591%25BD%25EF%25BC%2581GitHub%25E3%2581%25A7%25E8%25A9%25B1%25E9%25A1%258C%25E6%25B2%25B8%25E9%25A8%25B0%25E3%2581%25AE%25E5%2588%2586%25E6%2595%25A3%25E5%259E%258B%25E9%2580%259A%25E4%25BF%25A1%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25ABBitChat%25E3%2581%258C%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25B3%25E3%2582%25BD...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:brookszd%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjVRR1NSa21UU0N6OXhCcXJCQVZVbGlvdmdVM1JxZ09jXy1kOGc3Q2RVclFNVEZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>brookszd</dc:creator></item><item><title><![CDATA[Promiseとモナド： then と async/await の選び方]]></title><description><![CDATA[何度目の議論かという感じですが、全員がこうすべきという主張ではなく、あくまで自分の意見を残すためのドキュメントです。

 tl;dr
async/await と then は表面的には等価ですが、設計や保守の観点では明確なトレードオフがあります。
制約が強いほど安全性が高く、予期せぬ副作用を避けやすくなります。
そのため、原則として関数合成（then）を採用し、どうしても中間変数が必要な箇所のみ async によるdo記法を用いるべきだと考えています。

 Promise とモナド：then と async/await の選び方
Promise や一般的なモナドを扱う際、主に2種類の記法...]]></description><link>https://zenn.dev/unhappychoice/articles/b46ee85439beb1</link><guid isPermaLink="true">https://zenn.dev/unhappychoice/articles/b46ee85439beb1</guid><pubDate>Wed, 23 Jul 2025 23:03:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LmCT3sEN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Promise%25E3%2581%25A8%25E3%2583%25A2%25E3%2583%258A%25E3%2583%2589%25EF%25BC%259A%2520then%2520%25E3%2581%25A8%2520async%252Fawait%2520%25E3%2581%25AE%25E9%2581%25B8%25E3%2581%25B3%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuji%2520Ueki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2htc0V1eUFJV0pMZjZCTGdTM1VweG5INnU5N0RCTHlrRkhXZmg5Q2t3PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuji Ueki</dc:creator></item><item><title><![CDATA[魚眼カメラに顔がどう映るか考える]]></title><description><![CDATA[
 魚眼カメラの映り方
有限会社フィットの記事を見ると、天球上の被写体が映像にどう映るかが分かります。
今回は等距離射影を考えます。カメラの中心軸と角度Θをなす方向にあるは点は中心からfΘの位置に投影されるようです。
実際のカメラ映像全体のシミュレーションは骨が折れるので、顔がどう映るかというテーマで簡単なシミュレーションを行います。

 仮定

被写体は顔の画像で模擬します。すなわち顔がまったいらということにします。
魚眼カメラの画角は水平垂直方向ともに180°とします

3次元空間に顔の画像を配置したとします。画像上のあるピクセルの３次元的な位置がx,y,zで分かっているとし、下の図...]]></description><link>https://zenn.dev/079aefdf/articles/faf8dca4e83638</link><guid isPermaLink="true">https://zenn.dev/079aefdf/articles/faf8dca4e83638</guid><pubDate>Tue, 22 Jul 2025 13:25:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mHm66FVU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%25AD%259A%25E7%259C%25BC%25E3%2582%25AB%25E3%2583%25A1%25E3%2583%25A9%25E3%2581%25AB%25E9%25A1%2594%25E3%2581%258C%25E3%2581%25A9%25E3%2581%2586%25E6%2598%25A0%25E3%2582%258B%25E3%2581%258B%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daidai-orange%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBhZmViMTkxMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daidai-orange</dc:creator></item><item><title><![CDATA[JavaScriptで日時の差分を計算する方法とISO形式の扱い方]]></title><description><![CDATA[
 初めに
jsのDate()オブジェクトについて色々調べたのでまとめます。

 Date()について
const d : Date = new Date();
console.log(d) // 出力； Sun Jul 20 2025 20:00:08 GMT+0900 (日本標準時)
Dateインスタンスを出力すると、Sun Jul 20 2025 20:00:08 GMT+0900 (日本標準時)のように表示されます。
これはローカルな環境での現在時刻をdateString形式で出力しているからです。

 どうやって取得しているのか
console.log(d.getTime())...]]></description><link>https://zenn.dev/amethyst/articles/d9d19dfd8c03a6</link><guid isPermaLink="true">https://zenn.dev/amethyst/articles/d9d19dfd8c03a6</guid><pubDate>Tue, 22 Jul 2025 03:16:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JrIfoFQG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E6%2597%25A5%25E6%2599%2582%25E3%2581%25AE%25E5%25B7%25AE%25E5%2588%2586%25E3%2582%2592%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8ISO%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25AE%25E6%2589%25B1%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B4%25AB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzYTAyNjNlN2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>紫</dc:creator></item><item><title><![CDATA[event.preventDefault()は何をしているのか]]></title><description><![CDATA[
 はじめに
JSを使っているとちょくちょく出てくるevent.preventDefault()、一体なんのためにやっているのでしょうか？これまでなんとなくで使っていたので調べてみました。

 event.preventDefault()は何をしているのか
ドキュメントでは以下のような説明がされています。

preventDefault() は Event インターフェイスのメソッドで、ユーザーエージェントに、このイベントが明示的に処理されない場合に、その既定のアクションを通常どおりに行うべきではないことを伝えます。

うーん、どういうことだろう
https://developer.mo...]]></description><link>https://zenn.dev/rihitonnnu/articles/88449d4e9d036d</link><guid isPermaLink="true">https://zenn.dev/rihitonnnu/articles/88449d4e9d036d</guid><pubDate>Mon, 21 Jul 2025 10:23:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FO8uotBy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:event.preventDefault%2528%2529%25E3%2581%25AF%25E4%25BD%2595%25E3%2582%2592%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rihitonnnu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKekV3Y0FzbVR0eW1oMzdwbEZqVm5HbV91aGRPbmxzRDRqM2UyN2o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rihitonnnu</dc:creator></item><item><title><![CDATA[JavaScriptのクラスとモジュールとは？ AI Q&A まとめ]]></title><description><![CDATA[
 はじめに
Javaなどクラスベースの言語に慣れていると、JavaScriptの柔軟な設計思想に戸惑うことがあります。「何でもクラスにすべき？」「モジュールって何？」そんな疑問を解消するために、結論から逆引きできるQ&amp;A形式で、モダンJSのコード整理術をまとめました。

 結論から先に
時間が無い人向けに、まず結論です。
JavaScriptにおけるモダンなコードの整理術は、以下の考え方が基本形となります。


モジュール 📦 (ファイル)
一番大きな「入れ物」です。「責務（役割）」ごとにファイルを分け、関連するコードをまとめます。（例: api-client.js, dom-...]]></description><link>https://zenn.dev/wyuma/articles/dbea80548ebd6b</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/dbea80548ebd6b</guid><pubDate>Mon, 21 Jul 2025 09:00:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tPz9EsLD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25A8%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2520AI%2520Q%2526A%2520%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fanda.dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fanda.dev</dc:creator></item><item><title><![CDATA[ja-JP-u-ca-japaneseの旧暦の開始期間が間違っている]]></title><description><![CDATA[
 説明
タイトルのとおりですが元になっているファイル(supplementalData.xml)にコメントが追加されていて既知のようでした。

Warning: these historical eras are known to use incorrect start dates

2025/05のcommit: CLDR-11375 Fix Meiji start date

直そうとしたPRもあるようですがCloseされているようです。
何かしらコントリビュートできれば良いのですがWikipediaで年号の記事を参照するくらいしか知識を持ち合わせていない……。
現状(2025/0...]]></description><link>https://zenn.dev/misogohei/articles/83a94a8d026d60</link><guid isPermaLink="true">https://zenn.dev/misogohei/articles/83a94a8d026d60</guid><pubDate>Mon, 21 Jul 2025 02:20:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t2NtNeD3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ja-JP-u-ca-japanese%25E3%2581%25AE%25E6%2597%25A7%25E6%259A%25A6%25E3%2581%25AE%25E9%2596%258B%25E5%25A7%258B%25E6%259C%259F%25E9%2596%2593%25E3%2581%258C%25E9%2596%2593%25E9%2581%2595%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:misogohei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDVKMi15bkZJNDBaU0ZpcnBCRmlTV2dTR2JkbWFTVFRNN2gtVFVaVlh4WFNJX3ZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>misogohei</dc:creator></item><item><title><![CDATA[Three.jsで画像に収束するパーティクルアニメーションを作る方法]]></title><description><![CDATA[以下のようなアニメーションを作成する方法をまとめました。


 1. テクスチャ読み込み
threejsでテクスチャを読み込みます。

sim.js
  const loader = new THREE.TextureLoader();
  loader.load('../assets/images/image-01.jpg', (texture) =&gt; {
    const width = texture.image.width;
    const height = texture.image.height;
  }


 2. canvasから画像データ取得
!
2. 3....]]></description><link>https://zenn.dev/harasho_404/articles/49fb5619937b10</link><guid isPermaLink="true">https://zenn.dev/harasho_404/articles/49fb5619937b10</guid><pubDate>Sun, 20 Jul 2025 13:25:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C1OxGCdo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Three.js%25E3%2581%25A7%25E7%2594%25BB%25E5%2583%258F%25E3%2581%25AB%25E5%258F%258E%25E6%259D%259F%25E3%2581%2599%25E3%2582%258B%25E3%2583%2591%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25AF%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:harasho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY5NzlhNjEzOTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>harasho</dc:creator></item><item><title><![CDATA[OpenTelemetryでフロントエンドのトレースを取得する]]></title><description><![CDATA[
 はじめに
こんにちは、Lapi（@dragoneena12）です。
趣味で制作しているwebアプリケーションのパフォーマンス改善のため、OpenTelemetryでフロントエンドのトレーシングをしてみました。
あまりOtelを使ったフロントエンドのトレースについての記事がなかったので参考になると幸いです。

 Otelを使ったフロントエンドトレーシングについて
https://opentelemetry.io/docs/languages/js/getting-started/browser/
基本的には上記の公式ドキュメントに書いてあります。まだExperimental扱いなのでご...]]></description><link>https://zenn.dev/lapi/articles/2025-07-20-otel-frontend</link><guid isPermaLink="true">https://zenn.dev/lapi/articles/2025-07-20-otel-frontend</guid><pubDate>Sun, 20 Jul 2025 10:22:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YId3MWsw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenTelemetry%25E3%2581%25A7%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Lapi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOGNhNTJjNDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Lapi</dc:creator></item><item><title><![CDATA[【Blob/localStorage】バレーボールの得点割合アプリを作る02]]></title><description><![CDATA[
 前回からのアップデート

得点の管理をセットごとに管理するようにしました。
インタフェースを改良しました。具体的には自分たちのプレーにのみ集中できるように相手の加点処理を自チームのミスとして処理するようにしました。これによりミスも分析できるようになります。
ocalStorageで選手情報を保存できるようにしました
加点/失点処理の時に選手の背番号を選択するようにしました。
試合情報をjsonファイルとして保存できるようにしました。
cssを書きました。


 結論
以下のようになりました。


 やったこと

 得点管理の変更
AチームとBチームの得点のみを保持するように変数を宣言...]]></description><link>https://zenn.dev/cfjp/articles/92c628e3d7415a</link><guid isPermaLink="true">https://zenn.dev/cfjp/articles/92c628e3d7415a</guid><pubDate>Sun, 20 Jul 2025 07:46:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JuHgcmKD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Blob%252FlocalStorage%25E3%2580%2591%25E3%2583%2590%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E5%25BE%2597%25E7%2582%25B9%25E5%2589%25B2%25E5%2590%2588%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B02%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1Y2RmMjkxMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daka</dc:creator></item></channel></rss>