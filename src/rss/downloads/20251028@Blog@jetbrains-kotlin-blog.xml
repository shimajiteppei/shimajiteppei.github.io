<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>Kotlin : A concise multiplatform language developed by JetBrains | The JetBrains Blog</title>
	<atom:link href="https://blog.jetbrains.com/kotlin/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.jetbrains.com</link>
	<description>Developer Tools for Professionals and Teams</description>
	<lastBuildDate>Tue, 28 Oct 2025 14:56:09 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-32x32.png</url>
	<title>Kotlin : A concise multiplatform language developed by JetBrains | The JetBrains Blog</title>
	<link>https://blog.jetbrains.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Evaluating Kotlin in Real Projects</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/evaluating-kotlin-in-real-projects/</link>
		
		<dc:creator><![CDATA[Alyona Chernyaeva]]></dc:creator>
		<pubDate>Tue, 28 Oct 2025 14:56:06 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-7.png</featuredImage>		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=653509</guid>

					<description><![CDATA[Guest post by Urs Peter, Senior Software Engineer and JetBrains-certified Kotlin Trainer. For readers who’d like a more structured way to build Kotlin skills, Urs also leads the&#160;Kotlin Upskill Program at Xebia Academy. This is the second post in The Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment, a series that follows how [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><em>Guest post by <a href="https://www.linkedin.com/in/urs-peter-70a2882/" target="_blank" data-type="link" data-id="https://bit.ly/urs-peter-linked-in" rel="noreferrer noopener">Urs Peter</a>, Senior Software Engineer and JetBrains-certified Kotlin Trainer. For readers who’d like a more structured way to build Kotlin skills, Urs also leads the&nbsp;</em><a href="https://academy.xebia.com/upskilling/kotlin-academy/" target="_blank" rel="noreferrer noopener"><em>Kotlin Upskill Program</em></a><em> at Xebia Academy.</em></p>



<p><em>This is the second post in </em><strong><em>The Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment</em></strong><em>, a series that follows how Kotlin adoption grows among real teams, from a single developer’s curiosity to company-wide transformation.</em></p>



<p>Read the first part: <a href="https://blog.jetbrains.com/kotlin/2025/10/getting-started-with-kotlin-for-java-developers/" target="_blank" rel="noreferrer noopener">Getting Started With Kotlin for Java Developers</a></p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>The Evaluation Stage: Beyond Kotlin as a Playground</strong></h2>



<p>Once you&#8217;re comfortable with Kotlin in tests, it&#8217;s time for a more substantial evaluation. You have two main approaches:</p>



<ol>
<li><a href="#1.-build-a-new-microservice/application-in-kotlin" data-type="link" data-id="https://blog.jetbrains.com/#1.-build-a-new-microservice/application-in-kotlin">Build a new microservice / application in Kotlin</a></li>



<li><a href="#2.-extend/convert-an-existing-java-application" data-type="link" data-id="https://blog.jetbrains.com/#2.-extend/convert-an-existing-java-application">Extend / convert an existing Java application</a></li>
</ol>



<h3 class="wp-block-heading" id="1.-build-a-new-microservice/application-in-kotlin"><strong>1. Build a new microservice/application in Kotlin</strong></h3>



<p>Starting fresh with a new application or microservice provides the full Kotlin experience without the constraints of legacy code. This approach often provides the best learning experience and showcases Kotlin&#8217;s strengths most clearly.</p>



<div class="wp-block-columns is-layout-flex wp-container-3 wp-block-columns-is-layout-flex">
<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow" style="flex-basis:66.66%">
<p><strong>Pro tip</strong>: Get expert help during this stage. While developers are naturally confident in their abilities, avoiding early mistakes in the form of Java-ish Kotlin and a lack of Kotlin-powered libraries can save months of technical debt. </p>
</div>



<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow" style="flex-basis:33.33%">
<figure class="wp-block-image size-full"><img decoding="async" fetchpriority="high" width="600" height="400" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-5.png" alt="" class="wp-image-646384"/></figure>
</div>
</div>



<p>This is how you can avoid common pitfalls when using Kotlin from a Java background:</p>



<p><em>Pitfall: Choosing a different framework from the one you use in Java.</em></p>



<p>Tip: <strong>Stick to your existing framework</strong>.&nbsp;</p>



<p>Most likely, you were using Spring Boot with Java, so use it with Kotlin too. Spring Boot Kotlin support is first-class, so there is no additional benefit in using something else. Moreover, you are forced to learn not only a new language but also a new framework, which only adds complexity without providing any advantage.<br><br><strong>Important</strong>: Spring interferes with Kotlin’s ‘inheritance by design’ principle, which requires you to explicitly mark classes open in order to extend them.<br><br>In order to avoid adding the open keyword to all Spring-related classes (like <code>@Configuration</code>, etc.), use the following build plugin: <a href="https://kotlinlang.org/docs/all-open-plugin.html#spring-support" target="_blank" rel="noreferrer noopener">https://kotlinlang.org/docs/all-open-plugin.html#spring-support</a>. If you create a Spring project with the well-known online <a href="https://start.spring.io/" target="_blank" rel="noreferrer noopener">Spring initializr tool</a>, this build plugin is already configured for you.</p>



<p><em>Pitfall: Writing Kotlin in a Java-ish way, relying on common Java APIs rather than Kotlin’s standard library:</em><em>&nbsp;</em></p>



<p>This list can be very long, so let’s focus on the most common pitfalls:</p>



<h4 class="wp-block-heading"><em>Pitfall 1: Using Java Stream rather than Kotlin Collections</em></h4>



<p>Tip: <strong>Always use Kotlin Collections.</strong></p>



<p>Kotlin Collections are fully interoperable with Java Collections, yet equipped with straightforward and feature-rich higher-order functions that make Java Stream obsolete.&nbsp;</p>



<p>As follows is an example that aims to pick the top 3 products by revenue (price * sold) grouped by product category:</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">record Product(String name, String category, double price, int sold){}

List&lt;Product> products = List.of(
           new Product("Lollipop", "sweets", 1.2, 321),
           new Product("Broccoli", "vegetable", 1.8, 5);

Map&lt;String, List&lt;Product>> top3RevenueByCategory =
       products.stream()
          .collect(Collectors.groupingBy(
                Product::category,
                Collectors.collectingAndThen(
                    Collectors.toList(),
                    list -> list.stream()
                              .sorted(Comparator.comparingDouble(
                                  (Product p) -> p.price() * p.sold())
                                   .reversed())
                                   .limit(3)
                                   .toList()
                       		)
          )
);</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val top3RevenueByCategory: Map&lt;String, List&lt;Product>> =
   products.groupBy { it.category }
       .mapValues { (_, list) ->
           list.sortedByDescending { it.price * it.sold }.take(3)
       }</pre>



<p>Kotlin Java interop lets you work with Java classes and records as if they were native Kotlin, though you could also use a Kotlin (data) class instead.</p>



<h4 class="wp-block-heading"><em>Pitfall 2: Keeping on using Java’s Optional.</em></h4>



<p>Tip: <strong>Embrace Nullable types</strong>.&nbsp;</p>



<p>One of the key reasons Java developers switch to Kotlin is for Kotlin’s built-in nullability support, which waves NullPointerExceptions goodbye. Therefore, try to use Nullable types only, no more Optionals. Do you still have Optionals in your interfaces? This is how you easily get rid of them by converting them to Nullable types:</p>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//Let’s assume this repository is hard to change, because it’s a library you depend on
class OrderRepository {
      //it returns Optional, but we want nullable types
      fun getOrderBy(id: Long): Optional&lt;Order> = …
}

//Simply add an extension method and apply the orElse(null) trick
fun OrderRepository.getOrderByOrNull(id: Long): Order? = 
                                    getOrderBy(id).orElse(null)

//Now enjoy the safety and ease of use of nullable types:

//Past:
 val g = repository.getOrderBy(12).flatMap { product ->
     product.goody.map { it.name }
}.orElse("No goody found")

//Future:
 val g = repository.getOrderByOrNull(12)?.goody?.name ?: "No goody found"</pre>



<h4 class="wp-block-heading"><em>Pitfall 3: Continuing to use static wrappers.</em></h4>



<p>Tip: <strong>Embrace Extension methods</strong>.&nbsp;</p>



<p>Extension methods give you many benefits:</p>



<ul>
<li>They make your code much more fluent and readable than wrappers.</li>



<li>They can be found with code completion, which is not the case for wrappers.</li>



<li>Because Extensions need to be imported, they allow you to selectively use extended functionality in a specific section of your application.</li>
</ul>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//Very common approach in Java to add additional helper methods
public class DateUtils {
      public static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER = 
           DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

      public String formatted(LocalDateTime dateTime, 
		              DateTimeFormatter formatter) {
         return dateTime.format(formatter);
      }

      public String formatted(LocalDateTime dateTime) {
         return formatted(dateTime, DEFAULT_DATE_TIME_FORMATTER);
      }
}

//Usage
 formatted(LocalDateTime.now());
</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val DEFAULT_DATE_TIME_FORMATTER: DateTimeFormatter = 
DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")

//Use an extension method, including a default argument, which omits the need for an overloaded method. 
fun LocalDateTime.asString(
   formatter: DateTimeFormatter = DEFAULT_DATE_TIME_FORMATTER): String = 
      this.format(formatter)

//Usage
LocalDateTime.now().formatted()</pre>



<p>Be aware that Kotlin offers top-level methods and variables. This implies that we can simply declare e.g. the <em><code>DEFAULT_DATE_TIME_FORMATTER</code></em> top level without the need to bind to an object like is the case in Java.</p>



<h4 class="wp-block-heading"><em>Pitfall 4: Relying on (clumsily) Java APIs</em></h4>



<p>Tip: <strong>Use Kotlin’s slick counterpart.&nbsp;</strong></p>



<p>The Kotlin standard library uses extension methods to make Java libraries much more user-friendly, even though the underlying implementation is still Java. Almost all major third-party libraries and frameworks, like Spring, have done the same.</p>



<p><strong>Example standard library:</strong></p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">String text;
try (
       var reader = new BufferedReader(
                  new InputStreamReader(new FileInputStream("out.txt"), 
            StandardCharsets.UTF_8))) {
   text = reader
            .lines()
            .collect(Collectors.joining(System.lineSeparator()));
}
System.out.println("Downloaded text: " +  text + "\n");</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//Kotlin has enhanced the Java standard library with many powerful extension methods, like on java.io.*, which makes input stream processing a snap due to its fluent nature, fully supported by code completion

val text = FileInputStream("path").use {
             it.bufferedReader().readText()
           }
println("Downloaded text: $text\n");</pre>



<p><strong>Example Spring:</strong><br><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">final var books =  RestClient.create()
       .get()
       .uri("http://.../api/books")
       .retrieve()
       .body( new ParameterizedTypeReference&lt;List&lt;Book>>(){}); // ⇦ inconvenient ParameterizedTypeReference</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import org.springframework.web.client.body
val books = RestClient.create()
   .get()
   .uri("http://.../api/books")
   .retrieve()
   .body&lt;List&lt;Book>>() //⇦ Kotlin offers an extension that only requires the type without the need for a ParameterizedTypeReference</pre>



<h4 class="wp-block-heading"><em>Pitfall 5: Using a separate file for each public class</em></h4>



<p>Tip: <strong>Combine related public classes in a single file.&nbsp;</strong></p>



<p>This allows you to get a good understanding of how a (sub-)domain is structured without having to navigate dozens of files.<br><br><strong>Java</strong></p>



<figure class="wp-block-image size-full"><img decoding="async" width="1114" height="934" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-15.png" alt="" class="wp-image-647331"/></figure>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//For domain classes consider data classes - see why below
data class User(val email: String,
            //Use nullable types for safety and expressiveness
           val avatarUrl: URL? = null, 
           var isEmailVerified: Boolean)

data class Account(val user:User,
              val address: Address,
              val mfaEnabled:Boolean,
              val createdAt: Instant)

data class Address(val street: String,
              val city: String,
              val postalCode: String)</pre>



<h4 class="wp-block-heading"><em>Pitfall 6: Relying on the mutable programming paradigm</em></h4>



<p>Tip: <strong>Embrace immutability – the default in Kotlin</strong></p>



<p>The trend across many programming languages – including Java – is clear: immutability is winning over mutability.&nbsp;</p>



<p>The reason is straightforward: immutability prevents unintended side effects, making code safer, more predictable, and easier to reason about. It also simplifies concurrency, since immutable data can be freely shared across threads without the risk of race conditions.</p>



<p>That’s why most modern languages – Kotlin among them – either emphasize immutability by default or strongly encourage it. In Kotlin, immutability is the default, though mutability remains an option when truly needed.</p>



<p>Here’s a quick guide to Kotlin’s <strong>immutability power pack</strong>:</p>



<p>1. Use <code>val</code> over <code>var</code></p>



<p>Prefer <code>val</code> over <code>var</code>. IntelliJ IDEA will notify you if you used a <code>var</code>, for which a <code>val</code> could be used.&nbsp;</p>



<p>2. Use (immutable) data classes with <code>copy(...)</code></p>



<p>For domain-related classes, use <code>data</code> classes with <code>val</code>. Kotlin <code>data</code> classes are often compared with Java <code>records</code>. Though there is some overlap, <code>data</code> classes offer the killer feature <code>copy(...)</code>, whose absence makes transforming <code>record</code> – which is often needed in business logic – so tedious:</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//only immutable state
public record Person(String name, int age) {
   //Lack of default parameters requires overloaded constructor
   public Person(String name) { 
       this(name, 0);
   }
   //+ due to lack of String interpolation
  public String sayHi() {
       return "Hello, my name is " + name + " and I am " + age + " years old.";
   }
}

//Usage
final var jack = new Person("Jack", 42);
jack: Person[name=Jack, age=5]

//The issue is here: transforming a record requires manually copying the identical state to the new instance ☹️
final var fred = new Person("Fred", jack.name);</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//also supports mutable state (var)
data class Person(val name: String,
                  val age: Int = 0) {
  //string interpolation
  fun sayHi() = "Hi, my name is $name and I am $age years old."
}
val jack = Person("Jack", 42)
jack: Person(name=Jack, age=42)

//Kotlin offers the copy method, which, due to the ‘named argument’ feature, allows you to only adjust the state you want to change 😃
val fred = jack.copy(name = "Fred")
fred: Person(name=Fred, age=42)</pre>



<p>Moreover, use data classes for domain-related classes whenever possible. Their immutable nature ensures a safe, concise, and hassle-free experience when working with your application’s core.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>



<p>Tip: <strong>Prefer Immutable over Mutable Collections</strong></p>



<p>Immutable Collections have clear benefits regarding thread-safety, can be safely passed around, and are easier to reason about. Although Java collections offer some immutability features for Collections, their usage is dangerous because it easily causes exceptions at runtime:</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">List.of(1,2,3).add(4); ❌unsafe 😬! .add(...) compiles, but throws UnsupportedOperationException</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//The default collections in Kotlin are immutable (read-only)
listOf(1,2,3).add(4);  //✅safe: does not compile

val l0 = listOf(1,2,3) 
val l1 = l0 + 4 //✅safe: it will return a new list containing the added element
l1 shouldBe listOf(1,2,3,4) //✅</pre>



<p>The same applies for using <code>Collections.<em>unmodifiableList(...)</em></code><em>, </em>which is not only unsafe, but also requires extra allocation:</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class PersonRepo {
   private final List&lt;Person> cache = new ArrayList&lt;>();
   // Java – must clone or wrap every call
   public List&lt;Person> getItems() {
       return Collections.unmodifiableList(cache);   //⚠️extra alloc
   }
}

//Usage
personRepo.getItems().add(joe) ❌unsafe 😬! .add(...) can be called but throws UnsupportedOperationException</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class PersonRepo {

//The need to type ‘mutable’ for mutable collections is intentional: Kotlin wants you to use immutable ones by default. But sometimes you need them:

   private val cache: MutableList&lt;Person> = mutableListOf&lt;Person>()

   fun items(): List&lt;Person> = cache //✅safe: though the underlying collection is mutable, by returning it as its superclass List&lt;...>, it only exposes the read-only interface

}

//Usage
personRepo.items().add(joe) //✅safe:😬! Does not compile</pre>



<p>When it comes to concurrency, immutable data structures, including collections, should be preferred. In Java, more effort is required with special Collections that offer a different or limited API, like <code>CopyOnWriteArrayList</code>. In Kotlin, on the other hand, the read-only <code>List&lt;...&gt;</code> does the job for almost all use cases.&nbsp;</p>



<p>If you need mutable, Thread-Safe Collections, Kotlin offers Persistent Collections (<code>persistentListOf(...)</code>, <code>persistentMapOf(...)</code>), which all share the same powerful interface.</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">ConcurrentHashMap&lt;String, Integer> persons = new ConcurrentHashMap&lt;>();
persons.put("Alice", 23);
persons.put("Bob",   21);

//not fluent and data copying going on
Map&lt;String, Integer> incPersons = new HashMap&lt;>(persons.size());
persons.forEach((k, v) -> incPersons.put(k, v + 1));

//wordy and data copying going on
persons
   .entrySet()
   .stream()
   .forEach(entry -> 
      entry.setValue(entry.getValue() + 1));</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">persistentMapOf("Alice" to 23, "Bob" to 21)
         .mapValues { (key, value) -> value + 1 } //✅same rich API like any other Kotlin Map type and not data copying going on</pre>



<h4 class="wp-block-heading"><em>Pitfall 7: Keeping on using builders (or even worse: trying to use Lombok)&nbsp;</em></h4>



<p>Tip: <strong>Use named arguments.</strong></p>



<p>Builders are very common in Java. Although they are convenient, they add extra code, are unsafe, and increase complexity. In Kotlin, they are of no use, as a simple language feature renders them obsolete: named arguments.&nbsp;</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public record Person(String name, int age) {

   // Builder for Person
   public static class Builder {
       private String name;
       private int age;

       public Builder() {}

       public Builder name(String name) {
           this.name = name;
           return this;
       }

       public Builder age(int age) {
           this.age = age;
           return this;
       }

       public Person build() {
           return new Person(name, age);
       }
   }
}

//Usage
new JPerson.Builder().name("Jack").age(36).build(); //compiles and succeeds at runtime

new JPerson.Builder().age(36).build(); //❌unsafe 😬: compiles but fails at runtime.</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">data class Person(val name: String, val age: Int = 0)

//Usage - no builder, only named arguments.
Person(name = "Jack") //✅safe: if it compiles, it always succeeds at runtime
Person(name = "Jack", age = 36) //✅</pre>



<h3 class="wp-block-heading" id="2.-extend/convert-an-existing-java-application"><strong>2. Extend/convert an existing Java application</strong></h3>



<p>If you have no greenfield option for trying out Kotlin, <a href="https://www.jetbrains.com/help/idea/get-started-with-kotlin.html#add-kotlin-dependency" target="_blank" rel="noreferrer noopener">adding new Kotlin features or whole Kotlin modules to an existing Java codebase </a>is the way to go. Thanks to Kotlin&#8217;s seamless Java interoperability, you can write Kotlin code that looks like Java to Java callers. This approach allows for:</p>



<ul>
<li>Gradual migration without big-bang rewrites</li>



<li>Real-world testing of Kotlin in your specific context</li>



<li>Building team confidence with production Kotlin code</li>
</ul>



<p>Rather than starting <em>somewhere</em>, consider these different approaches:</p>



<p><strong>Outside-in:</strong></p>



<p>Start in the “leaf” section of your application, e.g. controller, batch job, etc. and then work your way towards the core domain. This will give you the following advantages:&nbsp;</p>



<ul>
<li><strong>Compile-time isolation</strong>: Leaf classes rarely have anything depending <em>on them</em>, so you can flip them to Kotlin and still build the rest of the system unchanged.</li>



<li><strong>Fewer ripple edits.</strong> A converted UI/controller can call existing Java domain code with almost no changes thanks to seamless interop.</li>



<li><strong>Smaller PRs, easier reviews.</strong> You can migrate file-by-file or feature-by-feature.</li>
</ul>



<p><strong>Inside-out:</strong></p>



<p>Starting at the core and then moving to the outer layers is often a riskier approach, as it compromises the advantages of the outside-in approach mentioned above. However, it is a viable option in the following cases:</p>



<ul>
<li><strong>Very small or self-contained core.</strong> If your domain layer is only a handful of POJOs and services, flipping it early may be cheap and immediately unlock idiomatic constructs (data class, value classes, sealed hierarchies).</li>



<li><strong>Re-architecting anyway.</strong> If you plan to refactor invariants or introduce DDD patterns (value objects, aggregates) while you migrate, it’s sometimes cleaner to redesign the domain in Kotlin first.</li>



<li><strong>Strict null-safety contracts.</strong> Putting Kotlin at the center turns the domain into a “null-safe fortress”; outer Java layers can still send null, but boundaries become explicit and easier to police.<br></li>
</ul>



<p><strong>Module by module</strong></p>



<ul>
<li>If your architecture is organized by functionality rather than layers, and the modules have a manageable size, converting them one by one is a good strategy.</li>
</ul>



<p><strong>Language features for converting Java to Kotlin</strong></p>



<p>Kotlin offers a variety of features – primarily annotations – that allow your Kotlin code to behave like native Java. This is especially valuable in hybrid environments where Kotlin and Java coexist within the same codebase.<br><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Person @JvmOverloads constructor(val name: String,
                          var age: Int = 0) {
  companion object {

  @JvmStatic
  @Throws(InvalidNameException::class)
  fun newBorn(name: String): Person = if (name.isEmpty()) 
       throw InvalidNameException("name not set")
     else Person(name, 0)

   @JvmField
   val LOG = LoggerFactory.getLogger(KPerson.javaClass)
  }
}</pre>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//thanks to @JvmOverloads an additional constructor is created, propagating Kotlin’s default arguments to Java
var john =  new Person("John");

//Kotlin automatically generates getters (val) and setters (var) for Java
john.setAge(23);
var name = ken.getName();

//@JvmStatic and @JvmField all accessing (companion) object fields and methods as statics in Java

//Without @JvmStatic it would be: Person.Companion.newBorn(...)
var ken =  Person.newBorn("Ken"); 

//Without @JvmField it would be: Person.Companion.LOG
Person.LOG.info("Hello World, Ken ;-)");

//@Throws(...) will put the checked Exception in the method signature 
try {
  Person ken =  Person.newBorn("Ken");
} catch (InvalidNameException e) {
  //…
}</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@file:JvmName("Persons")
package org.abc

@JvmName("prettyPrint")

fun Person.pretty() =
      Person.LOG.info("$name is $age old")</pre>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">//@JvmName for files and methods makes accessing static fields look like Java: without it would be: PersonKt.pretty(...)
Persons.prettyPrint(ken)</pre>



<p><strong>IntelliJ IDEA’s Java to Kotlin Converter</strong></p>



<p>IntelliJ IDEA offers a Java to Kotlin Converter, so theoretically, the tool can do it for you. However, the resulting code is far from perfect, so use it only as a starting point. From there, convert it to a more Kotlin-esque representation. More on this topic will be discussed in the final section of this blog post series:<em> Success Factors for Large-Scale Kotlin Adoption.</em></p>



<p>Taking Java as a starting point will most likely make you write Java-ish Kotlin, which gives you some benefits, but will not unleash the power of Kotlin’s potential. Therefore, writing a new application is the approach I prefer.&nbsp;</p>



<h3 class="wp-block-heading">Next in the series</h3>



<p>This installment in our <em>Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment</em> series of blog posts demonstrated how Kotlin experiments can evolve into production code. Our next post focuses on the human side of adoption: convincing your peers. It explains how to present clear, code-driven arguments, guide new developers, and create a small but lasting Kotlin community within your team.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/a3f7-400o400o1-QYUavRYyARnAVJLCpM1m8M.webp" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Urs Peter</h4>
                                                <p>Urs is a seasoned software engineer, solution architect, conference speaker, and trainer with over 20 years of experience in building resilient, scalable, and mission-critical systems, mostly involving Kotlin and Scala.</p>
<p>Besides his job as a consultant, he is also a passionate trainer and author of a great variety of courses ranging from language courses for Kotlin and Scala to architectural trainings such as Microservices and Event-Driven Architectures.</p>
<p>As a people person by nature, he loves to share knowledge and inspire and get inspired by peers on meetups and conferences. Urs is a JetBrains certified Kotlin trainer.</p>
                    </div>
                            </div>
        </div>
    </div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Kodee’s Kotlin Roundup: Finally Back with News</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/kodees-kotlin-roundup-october-edition/</link>
		
		<dc:creator><![CDATA[Kodee]]></dc:creator>
		<pubDate>Mon, 27 Oct 2025 13:19:53 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-featured.png</featuredImage>		<category><![CDATA[news]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=653032</guid>

					<description><![CDATA[It’s been a while since you last heard from me – I know, I’ve been a busy bee! Between releases and launches, time just flew by. But I’ve got plenty of updates to share with you. Let’s start with some of the biggest highlights from September and October, and if you’re curious, scroll down for [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>It’s been a while since you last heard from me – I know, I’ve been a busy bee! Between releases and launches, time just flew by. But I’ve got plenty of updates to share with you. Let’s start with some of the biggest highlights from September and October, and if you’re curious, scroll down for more goodies you might’ve missed.</p>


            <div class="newsletter">
                            <h2>Kodee-Approved Spotlight</h2>
                                                            <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/2.2.21-video.jpg" alt="What's new in Kotlin 2.2.21 (and 2.2.20!)">
                                                                            <div class="newsletter__post-text">
                                                            <h3>What&#8217;s New in Kotlin 2.2.21 (and 2.2.20!)</h3>
                                                        <p>Sebastian Aigner prepared a great video overview of <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.20" target="_blank" rel="noopener">Kotlin 2.2.20</a> and <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.21" target="_blank" rel="noopener">Kotlin 2.2.21</a> – and wow, there’s a lot to unpack! New dataflow checks allow more flexible when expressions than before, and contracts are getting an overhaul. Kotlin Multiplatform is promoting Kotlin for WebAssembly to the Beta stage, and Swift Export is now available out of the box in your KMP projects. Pretty impressive, right? Sit back, relax, and enjoy!</p>
                                                            <a href="https://youtu.be/QWpp5-LlTqA?si=f3NUtMM2RWXD92-V" class="btn" target="_blank" rel="noopener">Watch now</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogSocialShare-1280x720-1-1.png" alt="The Kotlin AI Stack: Build AI Agents With Koog, Code Smarter With Junie, and More">
                                                                            <div class="newsletter__post-text">
                                                            <h3>The Kotlin AI Stack: Build AI Agents With Koog, Code Smarter With Junie</h3>
                                                        <p>I know – everyone is talking about AI a lot these days, but hear me out, this one is worth the hype! Kotlin helps you build AI-powered apps and boosts your developer workflow with smart AI tools. Curious? Check out our blog post about the Kotlin AI stack.</p>
                                                            <a href="https://blog.jetbrains.com/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/" class="btn" target="_blank">Explore the Kotlin AI stack</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/KT-social-BlogSocialShare-1280x720-1-1.png" alt="From Python to Kotlin: A Transition Worth Making">
                                                                            <div class="newsletter__post-text">
                                                            <h3>From Python to Kotlin: A Transition Worth Making – by Marcin Moskała</h3>
                                                        <p>Python is great for quick scripts and data analysis, but large codebases can be, well, tricky. The JVM, one of the fastest runtime platforms, makes Java nearly as efficient as C, but Java can feel a bit verbose at times. Kotlin, built on the same foundation, brings the speed, safety, and clarity modern developers love. Interested? Learn more in our latest blog post by Marcin Moskała, Kotlin instructor and founder of Kt. Academy, an official JetBrains partner.</p>
                                                            <a href="https://blog.jetbrains.com/kotlin/2025/10/from-python-to-kotlin-a-transition-worth-making/" class="btn" target="_blank">Read more</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Social-share-1280x720-1-2.png" alt="Getting Started With Kotlin for Java Developers">
                                                                            <div class="newsletter__post-text">
                                                            <h3>Getting Started With Kotlin for Java Developers – by Urs Peter</h3>
                                                        <p>Ever wondered how to bring Kotlin into a Java-heavy world? This guest post by Urs Peter, Senior Software Engineer and JetBrains-certified Kotlin Trainer, kicks off <i>The Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment</i>. The series follows real teams on their Kotlin adoption journeys – from one curious developer to a company-wide shift. This first post is about where it all begins: that first spark and the small wins that make a big difference.</p>
                                                            <a href="https://blog.jetbrains.com/kotlin/2025/10/getting-started-with-kotlin-for-java-developers/" class="btn" target="_blank">Start your journey</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Wolt-case.jpg" alt="Wolt: A Kotlin for Server-Side Case Study">
                                                                            <div class="newsletter__post-text">
                                                            <h3>Wolt: A Kotlin for Server-Side Case Study</h3>
                                                        <p>Yes, that Wolt, operating in 30 countries with over 50 million users. In this new case study, Andrei Nevedomskii, Kotlin Competence Lead at Wolt, shares how Kotlin became a core part of their engineering culture. With over 150 engineers and just as many repositories, Wolt uses Ktor and Spring for flexibility, speed, and productivity. Want to see how they launch new services in mere minutes?</p>
                                                            <a href="https://youtu.be/puBXoKkQInE?si=vxocy6TirN0b57YA" class="btn" target="_blank" rel="noopener">Watch the full video</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogSocialShare-1280x720-2x.png" alt="Compose Multiplatform for web goes Beta">
                                                                            <div class="newsletter__post-text">
                                                            <h3>Compose Multiplatform for Web Goes Beta</h3>
                                                        <p>Big news for the Kotlin Multiplatform ecosystem – Compose Multiplatform for web is now in Beta. It’s no longer experimental, but ready for real-world use by early adopters. I’m so excited that you can now bring your existing Compose skills and coding patterns to the web with minimal effort, creating new apps or extending ones from mobile and desktop.</p>
                                                            <a href="https://blog.jetbrains.com/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/" class="btn" target="_blank">Learn more</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/KM-social-BlogSocialShare-1280x720-1.png" alt="Kotlin Multiplatform Survey 2025">
                                                                            <div class="newsletter__post-text">
                                                            <h3>We Are Running Our Yearly Kotlin Multiplatform Survey </h3>
                                                        <p>Our yearly Kotlin Multiplatform survey is live! And no, it’s not just another survey – it gives us vital insights into how you use Kotlin Multiplatform and how recent updates affect your workflow. So, Kotlin devs, please take a few minutes to share your thoughts. You’ll not only make one purple fluffy creature very happy, but also help the team focus on what matters most.</p>
                                                            <a href="https://surveys.jetbrains.com/s3/KMP-Survey-2025-KN" class="btn" target="_blank" rel="noopener">Take the survey</a>
                                                    </div>
                    </article>
                                    <article class="newsletter__post">
                                                                                    <img decoding="async" class="newsletter__post-img" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-2.png" alt="Crafting Your KotlinConf Proposal: Expert Tips to Help You Stand Out">
                                                                            <div class="newsletter__post-text">
                                                            <h3>Crafting Your KotlinConf Proposal: Expert Tips to Help You Stand Out</h3>
                                                        <p>We’re looking for talent! The KotlinConf 2026 Call for Speakers is in full swing, and if you haven’t submitted your session yet, now’s the time. Standing out can be tricky, so why not learn from those who actually review the proposals? 😉 We’ve gathered best practices and insider advice from JetBrains speakers, KotlinConf program committee members, and seasoned presenters.</p>
                                                            <a href="https://blog.jetbrains.com/kotlin/2025/10/crafting-your-kotlinconf-proposal-expert-tips/" class="btn" target="_blank">Learn from the experts</a>
                                                    </div>
                    </article>
                                    </div>
    


<h2 class="wp-block-heading">Where You Can Learn More:</h2>



<ul>
<li><a href="https://blog.jetbrains.com/kotlin/2025/09/ktor-roadmap-2025/" target="_blank" rel="noreferrer noopener">Ktor Roadmap and Previews</a></li>



<li><a href="https://blog.jetbrains.com/ai/2025/10/koog-0-5-0-is-out-smarter-tools-persistent-agents-and-simplified-strategy-design/" target="_blank" rel="noreferrer noopener">Koog 0.5.0 Is Out: Smarter Tools, Persistent Agents, and Simplified Strategy Design</a></li>



<li><a href="https://blog.jetbrains.com/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/" target="_blank" rel="noreferrer noopener">Koog × A2A: Building Connected AI Agents in Kotlin </a></li>



<li><a href="https://blog.jetbrains.com/kotlin/2025/10/kotlin-multiplatform-contest-2026/" target="_blank" rel="noreferrer noopener">Build a Kotlin Multiplatform Project and Win a Trip to KotlinConf 2026 </a></li>



<li><a href="https://blog.jetbrains.com/amper/2025/10/amper-update-october-2025/" target="_blank" rel="noreferrer noopener">Amper Update, October 2025 – Compose Hot Reload and UX Improvements </a></li>
</ul>



<h2 class="wp-block-heading">YouTube Highlights:</h2>



<ul>
<li><a href="https://youtu.be/1zY4_iDyFco?si=2ILixUSs9PxxH3Sb" target="_blank" rel="noreferrer noopener">Discussing Kotlin Coroutines with Marcin Moskała | Talking Kotlin 141</a></li>



<li><a href="https://youtu.be/3IxDICQTutw?si=uPhFxR7cmDNqP7Xn" target="_blank" rel="noreferrer noopener">How Kotlin Server-Side Development Delivers Real Business Results for Worldline</a></li>



<li><a href="https://youtu.be/RpvP6k_YQto?si=8NcT2I3YuG7Bdhug" target="_blank" rel="noreferrer noopener">From Junior Developer to CEO: A Conversation with JetBrains CEO | KotlinConfersations&#8217;25</a></li>



<li><a href="https://youtu.be/TAtU7joTGaA?si=KgRAXhVD2HurwADX" target="_blank" rel="noreferrer noopener">Your First AI Agent in Kotlin | Tutorial</a></li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Getting Started With Kotlin for Java Developers</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/getting-started-with-kotlin-for-java-developers/</link>
		
		<dc:creator><![CDATA[Alyona Chernyaeva]]></dc:creator>
		<pubDate>Thu, 23 Oct 2025 10:51:33 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-6.png</featuredImage>		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=652284</guid>

					<description><![CDATA[Guest post by Urs Peter, Senior Software Engineer and JetBrains-certified Kotlin Trainer. For readers who’d like a more structured way to build Kotlin skills, Urs also leads the&#160;Kotlin Upskill Program at Xebia Academy. This post opens The Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment, a series that follows how Kotlin adoption grows [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><em>Guest post by <a href="https://www.linkedin.com/in/urs-peter-70a2882/" target="_blank" data-type="link" data-id="https://bit.ly/urs-peter-linked-in" rel="noreferrer noopener">Urs Peter</a>, Senior Software Engineer and JetBrains-certified Kotlin Trainer. For readers who’d like a more structured way to build Kotlin skills, Urs also leads the&nbsp;</em><a href="https://academy.xebia.com/upskilling/kotlin-academy/" target="_blank" rel="noreferrer noopener"><em>Kotlin Upskill Program</em></a><em> at Xebia Academy.</em></p>



<p><em>This post opens </em><strong><em>The Ultimate Guide to Successfully Adopting Kotlin in a Java-Dominated Environment</em></strong><em>, a series that follows how Kotlin adoption grows among real teams, from a single developer’s curiosity to company-wide transformation.</em></p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p class="has-text-align-left">                  “<em>You don’t flip a switch to ‘go Kotlin’.</em></p>



<p class="has-text-align-left">                  <em>You de-risk, you measure, you celebrate the wins,</em></p>



<p class="has-text-align-left">                   <em>and only then do you double down.</em>”</p>



<p>Adopting Kotlin in an established Java environment isn&#8217;t just a technical decision – it&#8217;s a journey that requires careful planning, strategic thinking, and most importantly, winning the hearts and minds of your peers.&nbsp;</p>



<p>After training over 1,000 developers and helping numerous organizations successfully transition to Kotlin, I&#8217;ve seen what works and what doesn&#8217;t. This guide will walk you through successful recipes for adopting Kotlin, which I have collected over time, from your first experimental playground to large-scale organizational transformation.</p>



<p>This is the journey this series will take you through:</p>



<ul>
<li><a href="#it-always-starts-with-a-spark,-initiated-by-you" data-type="link" data-id="https://blog.jetbrains.com/#it-always-starts-with-a-spark,-initiated-by-you">It Always Starts With a Spark, Initiated by You!</a></li>



<li><a href="#the-play-around-stage-start-small-–-with-tests">The Play Around Stage: Start Small – With Tests</a></li>



<li>The Evaluation Stage: Beyond Kotlin as a Playground</li>



<li>Spread the Word: Win the Hearts &amp; Minds of Your Fellow Developers</li>



<li>Persuading Management: Building the Business Case for Kotlin</li>



<li>Success Factors for Large-Scale Kotlin Adoption</li>



<li>To Kotlin or Not to Kotlin: What Kind of Company Do You Want to Be?</li>
</ul>



<h2 class="wp-block-heading"><strong>It Always Starts With a Spark, Initiated by You!</strong></h2>



<figure class="wp-block-image size-full"><img decoding="async" width="1586" height="526" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-12.png" alt="It Always Starts With a Spark, Initiated by You!" class="wp-image-647072"/></figure>



<p><em>Why take the effort to switch to Kotlin? Why not just stick with Java and move on?&nbsp;</em></p>



<p>The answer depends on numerous factors. While the data clearly shows Kotlin&#8217;s advantages across multiple domains, the decision isn&#8217;t purely technical. Subjectivity (“I like my language because I like it”) and skepticism towards something new, which is generally a good thing, play an important role.&nbsp;</p>



<p>However, the evolution of programming languages shows that our preferences and needs change over time. Crucially, each new generation of languages incorporates fresh paradigms – (null)-safety, concise and light-weight syntax, functions as first class citizens, rich standard library, async concurrency, multiplatform support, generative-AI friendly, etc. – that give developers and organizations a decisive advantage.&nbsp;</p>



<p>Without this natural progression, we’d still be coding everything in COBOL or another archaic language, unable to meet today’s demands. Evolution is therefore not optional; it’s built into the history of our industry.</p>



<p>For this evolution to take root inside a company, though, it takes more than technical merit. It requires enablers – people willing to explore, advocate, and show the value of these new paradigms in practice. In my experience, three types of engineers typically become these catalysts for Kotlin adoption:</p>



<ol>
<li><strong>The pragmatic, productivity-focused Java Engineer</strong>: Experienced developers who see Java as a tool, not a religion. They&#8217;re always looking for better ways to get the job done faster.</li>



<li><strong>The quality-minded, modern language enthusiast</strong>: Engineers who prioritize readable, concise, and maintainable code. These are often the same people who would have moved to Scala in the past.</li>



<li><strong>Junior Developers</strong>: Juniors who ask the simple but powerful question: &#8220;Why should I use Java if I can use Kotlin?&#8221; Without the baggage of years of Java experience, Kotlin is often a no-brainer for them.</li>
</ol>



<p>To which group do you belong?&nbsp;</p>



<p>These early adopters ignite the first stage. But how do you start? Read on… ;-)&nbsp;</p>



<h2 class="wp-block-heading"><strong>The Play Around Stage: Start Small – With Tests</strong></h2>



<p>You&#8217;ve heard about Kotlin and want to give it a try without committing to it immediately.&nbsp;</p>



<p>So the first thing you need is a developer tool where your very first Kotlin seeds can be planted. Here are some options:</p>



<ul>
<li><a href="https://play.kotlinlang.org/" target="_blank" rel="noreferrer noopener">https://play.kotlinlang.org/</a> is a great online playground, simply type and run Kotlin code not only on the JVM but also for various other platforms (JS, WASM, etc.).<img decoding="async" loading="lazy" class="wp-image-647084" style="width: 650px;" width="1462" height="660" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-13.png" alt="Kotlin Playground"> </li>
</ul>



<ul>
<li><a href="https://kotlinlang.org/docs/kotlin-notebook-overview.html" target="_blank" rel="noreferrer noopener">Kotlin Notebook</a> is a powerful feature for IntelliJ IDEA that allows you to easily import dependencies, execute code, and even work with data, draw graphs, etc. Here is an example that shows how easy it is to do a REST call with Spring’s RestClient:<img decoding="async" loading="lazy" class="wp-image-647095" style="width: 650px;" width="1600" height="1035" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-11.png" alt="Kotlin Notebook"></li>
</ul>



<ul>
<li>IntelliJ IDEA has first-class support for Kotlin. This is no surprise, since JetBrains is the maker of Kotlin, and a large portion of IntelliJ IDEA is written in it. So, to start using Kotlin in <a href="https://www.jetbrains.com/help/idea/get-started-with-kotlin.html#add-kotlin-dependency" target="_blank" rel="noreferrer noopener">IntelliJ IDEA</a> – even in your existing Java project – is a breeze:
<ul>
<li>For <a href="https://kotlinlang.org/docs/maven.html" target="_blank" rel="noreferrer noopener">Maven</a>, simply configure the <code>kotlin-maven-plugin</code> and the Kotlin standard library <code>kotlin-stdlib</code>.</li>



<li>For <a href="https://kotlinlang.org/docs/gradle-configure-project.html" target="_blank" rel="noreferrer noopener">Gradle</a>, you configure the kotlin plugin.</li>
</ul>
</li>
</ul>



<p>…and off you go!</p>



<figure class="wp-block-image size-full is-resized"><img decoding="async" loading="lazy" width="498" height="444" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/unnamed-14.png" alt="" class="wp-image-647106" style="aspect-ratio:1.1216216216216217;width:320px;height:auto"/></figure>



<ul>
<li>And there’s more! JetBrains recently released the Kotlin Language Server, bringing a full-featured Kotlin development experience to other IDEs beyond IntelliJ IDEA – such as VS Code. Check it out: <a href="https://github.com/Kotlin/kotlin-lsp" target="_blank" rel="noreferrer noopener">https://github.com/Kotlin/kotlin-lsp</a>&nbsp;</li>
</ul>



<p>Now, you can write Kotlin in your favorite development environment. How can you evaluate the language in a real-world context with minimal impact and maximal insights? In the test suite of an existing Java project!&nbsp;</p>



<p>This safe and realistic approach to experimenting with Kotlin offers several advantages:</p>



<ul>
<li><strong>Low Risk</strong>: Tests don&#8217;t affect production code.</li>



<li><strong>Learning Opportunity</strong>: You can explore the language features in a familiar context.</li>



<li><strong>Gradual Introduction</strong>: Team members can get comfortable with Kotlin syntax without pressure.</li>
</ul>



<h3 class="wp-block-heading"><strong>Tips</strong></h3>



<ol>
<li>Try Kotest + MockK: to immediately feel the expressiveness of Kotlin’s testing DSLs (Domain-Specific Language), like the feature-rich assertions (<code>shouldHaveSize(...)</code>, infix (<code>value shouldBe 1</code>), etc.</li>



<li>Use the concise and powerful Kotlin Collections rather than Java Streams.</li>



<li>Play with various language features like Nullable types, destructuring, immutability (<code>val</code>, <code>data classes</code>), expression constructs (<code>when</code>, <code>try-catch</code>, <code>if else</code>), and many more.</li>
</ol>



<p>This is what you get:</p>



<p><strong>Java</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Test
void shouldGetAverageRating() {
   when(productRepository.findAll()).thenReturn(products);

   Map&lt;String, Double> ratings = productService.averageRatings();

   assertAll(
           () -> assertThat(ratings).hasSize(4),
           () -> assertEquals(ratings, products
                   .stream()
                   .collect(Collectors.groupingBy(
                           Product::getName,
                           Collectors.flatMapping(
                                   p -> p.getRatings()
                                    .stream()
                                    .mapToDouble(Integer::doubleValue)
                                    .boxed(),   
                              Collectors.averagingDouble(Double::doubleValue)
                           )))
           )
   );
   verify(productRepository).findAll();

}
</pre>



<p><strong>Kotlin</strong></p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Test
fun `should get average rating`() { //descriptive tests using ``
   every { productRepository.findAll() } returns products

   val ratings = productService.averageRatings()

   assertSoftly(ratings) { 		//powerful testing DSLs (Kotest)
       shouldHaveSize(4)
       this shouldBe productRepository.findAll()
           .groupBy { it.name }   			//concise collections
           .mapValues { (_, products) -> 		//destructuring
                  products.flatMap { it.ratings }.average() }
   }
    verify { productRepository.findAll() }
}</pre>



<h3 class="wp-block-heading">Next in the series</h3>



<p>Kotlin adoption usually starts with one person exploring and a few tests proving useful. Those first moments of discovery naturally lead to something larger: evaluating Kotlin in a real project.</p>



<p>The next post in this series will describe that stage and explain how to test Kotlin in production environments.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/a3f7-400o400o1-QYUavRYyARnAVJLCpM1m8M.webp" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Urs Peter</h4>
                                                <p>Urs is a seasoned software engineer, solution architect, conference speaker, and trainer with over 20 years of experience in building resilient, scalable, and mission-critical systems, mostly involving Kotlin and Scala.</p>
<p>Besides his job as a consultant, he is also a passionate trainer and author of a great variety of courses ranging from language courses for Kotlin and Scala to architectural trainings such as Microservices and Event-Driven Architectures.</p>
<p>As a people person by nature, he loves to share knowledge and inspire and get inspired by peers on meetups and conferences. Urs is a JetBrains certified Kotlin trainer.</p>
                    </div>
                            </div>
        </div>
    </div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>From Python to Kotlin: A Transition Worth Making</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/from-python-to-kotlin-a-transition-worth-making/</link>
		
		<dc:creator><![CDATA[Alina Dolgikh]]></dc:creator>
		<pubDate>Wed, 22 Oct 2025 11:29:44 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/KT-social-BlogFeatured-1280x720-1-2.png</featuredImage>		<category><![CDATA[industry-trends]]></category>
		<category><![CDATA[kotlin]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[news]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=594572</guid>

					<description><![CDATA[This article was written by an external contributor. When it comes to writing short scripts or CRUDs, Python is a great choice. With its rich ecosystem and broad adoption, it can be easily used to scrape some data or to perform data analysis. However, maintaining a large codebase in Python can be very problematic. Python&#8217;s [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><em>This article was written by an external contributor.</em></p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/image-96.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Marcin Moskała</h4>
                                                <p>Marcin is a highly experienced developer and Kotlin instructor, founder of Kt. Academy, an official JetBrains partner specializing in Kotlin training. He is also a Google Developers Expert and a well-known contributor to the Kotlin community. Marcin is the author of several widely recognized books, including <em data-start="450" data-end="468">Effective Kotlin</em>, <em data-start="470" data-end="489" data-is-only-node="">Kotlin Coroutines</em>, <em data-start="491" data-end="510">Functional Kotlin</em>, <em data-start="512" data-end="529">Advanced Kotlin</em>, <em data-start="531" data-end="550">Kotlin Essentials</em>, and <em data-start="556" data-end="589">Android Development with Kotlin</em>.</p>
<p><a href="https://kt.academy/" target="_blank" rel="noopener">Website</a></p>
                    </div>
                            </div>
        </div>
    </div>



<p>When it comes to writing short scripts or CRUDs, Python is a great choice. With its rich ecosystem and broad adoption, it can be easily used to scrape some data or to perform data analysis. However, maintaining a large codebase in Python can be very problematic.</p>



<p>Python&#8217;s dynamic typing and mutable nature, while offering flexibility for rapid development, may present additional considerations in larger codebases. Event-loop-based coroutines can be tricky and may lead to<a href="https://www.reddit.com/r/Kotlin/comments/1lsnytm/from_python_to_kotlin_why_we_rewrote_our_scraping/" target="_blank" data-type="link" data-id="https://www.reddit.com/r/Kotlin/comments/1lsnytm/from_python_to_kotlin_why_we_rewrote_our_scraping/" rel="noreferrer noopener"> subtle issues in practice</a> . Finally, the single-threaded and dynamically typed nature of this language makes Python code significantly less efficient than most of its modern competitors.&nbsp;</p>



<p>JVM is one of the fastest runtime platforms, making Java nearly as efficient as C. <a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/python.html" target="_blank" data-type="link" data-id="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/python.html" rel="noreferrer noopener">Most benchmarks show that Python code is 10 to 100 times slower than Java code</a>. One <a href="https://greenlab.di.uminho.pt/wp-content/uploads/2017/10/sleFinal.pdf" target="_blank" data-type="link" data-id="https://greenlab.di.uminho.pt/wp-content/uploads/2017/10/sleFinal.pdf" rel="noreferrer noopener">big research paper</a> compared the performance of multiple languages and showed that Python code is 74x more CPU-expensive than code in C, where Java code is only 1.8x more expensive. However, due to its long-standing commitment to backward compatibility, Java can feel verbose for certain tasks. Kotlin, building on that same ecosystem and offering the same efficiency, gives you access to a powerful typesystem, with modern language features focused on performance and developer ergonomics.&nbsp;</p>



<p>Those are the key reasons we can hear from companies or teams that decide to switch from Python to Kotlin. The Kotlin YouTube channel recently published <a href="https://youtu.be/puBXoKkQInE?si=wt32jWKXBy9eXbFw" target="_blank" data-type="link" data-id="https://www.youtube.com/watch?v=puBXoKkQInE" rel="noreferrer noopener">Wolt’s success story</a>, but that is only one voice among many. Kotlin is an all-around sensible choice for a range of projects, as it shares many similarities with Python. At the same time, Kotlin offers better performance, safety, and a much more powerful concurrency model. Let’s see those similarities and differences in practice.&nbsp;</p>



<h2 class="wp-block-heading">Similarities between Python and Kotlin</h2>



<p>When teaching Kotlin to both Python and Java developers, I was often surprised to discover that many Kotlin features are more frequently reported as intuitive by Python developers than their Java counterparts. Both languages offer concise syntax. Let&#8217;s compare some very simple use cases in both languages:</p>



<h4 class="wp-block-heading"></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val language = "Kotlin"
println("Hello from $language")
// prints "Hello from Kotlin"

val list = listOf(1, 2, 3, 4, 5)
for (item in list) {
  println(item)
}
// prints 1 2 3 4 5 each in a new line

fun greet(name: String = "Guest") {
  println("Hello, $name!")
}
greet() // prints "Hello, Guest!"</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">language = "Python"
print(f"Hello from {language}")
# prints "Hello from Python"

list = [1, 2, 3, 4, 5]
for item in list:
  print(item)
# prints 1 2 3 4 5 each in a new line

def greet(name="Guest"):
  print(f"Hello, {name}!")
greet()  # prints "Hello, Guest!"</pre>



<p>At first glance, there are only minor syntactic differences. Kotlin presents features well-known to Python developers, like string interpolation, concise loops, and default parameters. However, even in this simple example, we can see some advantages that Kotlin has over Python. All properties are statistically typed, so <code>language</code> is of type <code>String</code>, and <code>list</code> is of type <code>List&lt;Int&gt;</code>. That not only allows for low-level optimizations, but it also brings enhanced safety and better IDE support. All variables in the code above are also defined as immutable, so we cannot accidentally change their values. To change them, we would need to use <code>var</code> instead of <code>val</code>. The same goes for the list I used in this snippet – it is immutable, so we cannot accidentally change its content. To create a mutable list, we would need to use <code>mutableListOf</code> and type it as<code> MutableList&lt;Int&gt;</code>. This strong distinction between mutable and immutable types is a great way to avoid accidental changes, which are often the source of bugs in Python programs.</p>



<p>There are other advantages of Kotlin over Python that are similarly apparent in the above example. Python&#8217;s default arguments are static, so changing them influences all future calls. This is a well-known source of very sneaky bugs in Python programs. Kotlin&#8217;s default arguments are evaluated at each call, so they are safer.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun test(list: MutableList&lt;Int> = mutableListOf()) {
  list.add(1)
  println(list)
}
test() // prints [1]
test() // prints [1]
test() // prints [1]</pre>



<h4 class="wp-block-heading">Python</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def test(list=[]):
  list.append(1)
  print(list)

test()  # prints [1]
test()  # prints [1, 1]
test()  # prints [1, 1, 1]</pre>



<p>Let&#8217;s talk about classes. Both languages support classes, inheritance, and interfaces. To compare them, let&#8217;s look at a simple data class in both languages:</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">data class Post(
  val id: Int,
  val content: String,
  val publicationDate: LocalDate,
  val author: String? = null
)
val post = Post(1, "Hello, Kotlin!", LocalDate.of(2024, 6, 1))
println(post) // prints Post(id=1, content=Hello, Kotlin!, publicationDate=2024-06-01, author=null)</pre>



<h4 class="wp-block-heading">Python</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@dataclass
class Post:
  id: int
  content: str
  publication_date: date
  author: Optional[str] = None
    
post = Post(1, "Hello, Python!", datetime.date(2024, 6, 1))
print(post)  # prints Post(id=1, content='Hello, Python!', publication_date=datetime.date(2024, 6, 1), author=null)</pre>



<p>Kotlin has built-in support for data classes, which automatically allows such objects to be compared by value, destructured, and copied. Python requires an additional decorator to achieve similar functionality. This class is truly immutable in Kotlin, and thanks to static typing, it requires minimal memory. Outside of that, both implementations are very similar. Kotlin has built-in support for nullability, which in Python is expressed with the <code>Optional</code> type from the <code>typing</code> package.</p>



<p>Now, let&#8217;s define a repository interface and its implementation in both languages. In Kotlin, we can use Spring Data with coroutine support, while in Python, we can use SQLAlchemy with async support. Notice that in Kotlin, there are two kinds of properties: Those defined inside a bracket are constructor parameters, while those defined within braces are class properties. So in <code>SqlitePostRepository</code>, <code>crud</code> is expected to be passed in the constructor. The framework we use will provide an instance of <code>PostCrudRepository</code>, which is generated automatically by Spring Data.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">interface PostRepository {
  suspend fun getPost(id: Int): Post?
  suspend fun getPosts(): List&lt;Post>
  suspend fun savePost(content: String, author: String): Post
}

@Service
class SqlitePostRepository(
  private val crud: PostCrudRepository
) : PostRepository {
  override suspend fun getPost(id: Int): Post? = crud.findById(id)

  override suspend fun getPosts(): List&lt;Post> = crud.findAll().toList()

  override suspend fun savePost(content: String, author: String): Post =
      crud.save(Post(content = content, author = author))
}

@Repository
interface PostCrudRepository : CoroutineCrudRepository&lt;Post, Int>

@Entity
data class Post(
  @Id @GeneratedValue val id: Int? = null,
  val content: String,
  val publicationDate: LocalDate = LocalDate.now(),
  val author: String
)</pre>



<h4 class="wp-block-heading">Python</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class PostRepository(ABC):
  @abstractmethod
  async def get_post(self, post_id: int) -> Optional[Post]:
      pass

  @abstractmethod
  async def get_posts(self) -> List[Post]:
      pass

  @abstractmethod
  async def save_post(self, content: str, author: str) -> Post:
      pass
    
class SqlitePostRepository(PostRepository):
  def __init__(self, session: AsyncSession):
      self.session = session

  async def get_post(self, post_id: int) -> Optional[Post]:
      return await self.session.get(Post, post_id)  

  async def get_posts(self) -> List[Post]:
      result = await self.session.execute(select(Post))
      return result.scalars().all()

  async def save_post(self, content: str, author: str) -> Post:
      post = Post(content=content, author=author)
      self.session.add(post)
      await self.session.commit()
      await self.session.refresh(post)
      return post

class Post(Base):
  __tablename__ = "posts"
  id: Mapped[int] = Column(Integer, primary_key=True, index=True)
  content: Mapped[str] = Column(String)
  publication_date: Mapped[date] = Column(Date, default=date.today)
  author: Mapped[str] = Column(String)</pre>



<p>Those implementations are very similar in many ways, and the key differences between them result from choices made by the frameworks, not the languages themselves. Python, due to its dynamic nature, encourages the use of untyped objects or dictionaries; however, such practices are generally discouraged in modern times. Both languages provide numerous tools for libraries to design effective APIs. On the JVM, these languages often depend on annotation processing, whereas in Python, decorators are more common. Kotlin leverages a mature and well-developed Spring Boot ecosystem, but it also offers lightweight alternatives such as Ktor or Micronaut. Python has Flask and FastAPI as popular lightweight frameworks, and Django as a more heavyweight framework.</p>



<p>In a backend application, we also need to implement services, which are classes that implement business logic. They often do some collection or string processing. Kotlin provides a comprehensive standard library with numerous useful functions for processing collections and strings. All those functions are named and called in a very consistent way. In Python, we can make nearly all transformations available in Kotlin, but to do so, we need to use many different kinds of constructs. In the code below, I needed to use top-level functions, methods on lists, collection comprehensions, or even classes from the <code>collections</code> package. Those constructs are not very consistent, some of them are not very convenient, and are not easily discoverable. You can also see that complicated notation for defining lambda expressions in Python harms collection processing APIs. Collection and string processing in Kotlin is much more pleasant and productive.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class PostService(
  private val repository: PostRepository
) {
  suspend fun getPostsByAuthor(author: String): List&lt;Post> =
      repository.getPosts()
          .filter { it.author == author }
          .sortedByDescending { it.publicationDate }

  suspend fun getAuthorsWithPostCount(): Map&lt;String?, Int> =
      repository.getPosts()
          .groupingBy { it.author }
          .eachCount()

  suspend fun getAuthorsReport(): String =
      getAuthorsWithPostCount()
          .toList()
          .sortedByDescending { (_, count) -> count }
          .joinToString(separator = "n") { (author, count) ->
              val author = author ?: "Unknown"
              "$author: $count posts"
          }
          .let { "Authors Report:n$it" }
}</pre>



<h4 class="wp-block-heading">Python</h4>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class PostService:
  def __init__(self, repository: "PostRepository") -> None:
      self.repository = repository

  async def get_posts_by_author(self, author: str) -> List[Post]:
      posts = await self.repository.get_posts()
      filtered = [post for post in posts if post.author == author]
      sorted_posts = sorted(
          filtered,
          key=lambda p: p.publication_date,
          reverse=True
      )
      return sorted_posts

  async def get_authors_with_post_count(self) -> Dict[Optional[str], int]:
      posts = await self.repository.get_posts()
      counts = Counter(p.author for p in posts)
      return dict(counts)

  async def get_authors_report(self) -> str:
      counts = await self.get_authors_with_post_count()
      items = sorted(counts.items(), key=lambda kv: kv[1], reverse=True)
      lines = [
          f"{(author if author is not None else 'Unknown')}: {count} posts"
          for author, count in items
      ]
      return "Authors Report:n" + "n".join(lines)</pre>



<p>Before we finish our comparison, let’s complete our example backend application by defining a controller that exposes our service through HTTP. Until now, I have used Spring Boot, which is the most popular framework for Kotlin backend development. This is how it can be used to define a controller:</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Controller
@RequestMapping("/posts")
class PostController(
   private val service: PostService
) {
   @GetMapping("/{id}")
   suspend fun getPost(@PathVariable id: Int): ResponseEntity&lt;Post> {
       val post = service.getPost(id)
       return if (post != null) {
           ResponseEntity.ok(post)
       } else {
           ResponseEntity.notFound().build()
       }
   }

   @GetMapping
   suspend fun getPostsByAuthor(@RequestParam author: String): List&lt;Post> =
       service.getPostsByAuthor(author)

   @GetMapping("/authors/report")
   suspend fun getAuthorsReport(): String =
       service.getAuthorsReport()
}</pre>



<p>However, we noticed that many Python developers prefer a lighter and simpler framework, and their preferred choice for such functionality is Ktor. Ktor allows users to define a working application in just a couple of lines of code. This is a complete Ktor Server application that implements a simple in-memory text storage (it requires no other configuration or dependencies except Ktor itself):</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun main() = embeddedServer(Netty, port = 8080) {
   routing {
       var value = ""
       get("/text") {
           call.respondText(value)
       }
       post("/text") {
           value = call.receiveText()
           call.respond(HttpStatusCode.OK)
       }
   }
}.start(wait = true)
</pre>



<p>I hope that this comparison helped you see both the key similarities and differences between Python and Kotlin. As we’ve seen, Kotlin has many features that are very intuitive for Python developers. At the same time, Kotlin offers many improvements over Python, especially in terms of safety. It has a powerful static type system that prevents many common bugs, built-in support for immutability, and a very rich and consistent standard library.</p>



<p>To summarize, I believe it’s fair to say that both languages are very similar in many ways, but Kotlin brings a number of improvements – some small, some big. In addition, Kotlin offers some unique features that are not present in Python, the biggest one probably being a concurrency model based on coroutines.</p>



<h2 class="wp-block-heading">kotlinx.coroutines vs. Python asyncio</h2>



<p>The most modern approach to concurrency in Kotlin and Python is based on coroutines. In Python, the most popular library for this purpose is <code>asyncio</code>, while in Kotlin, there is the Kotlin <code>kotlinx.coroutines</code> library. Both libraries can start lightweight asynchronous tasks and await their completion. However, there are some important differences between them.</p>



<p>Let&#8217;s start with the hallmark feature of <code>kotlinx.coroutines</code>: first-class support for structured concurrency. Let&#8217;s say that you implement a service like SkyScanner, which searches for the best flight offers. Now, let&#8217;s suppose a user makes a search, which results in a request or the opening of a WebSocket connection to our service. Our service needs to query multiple airlines to return the best offers. Let&#8217;s then suppose that this user left our page soon after searching. All those requests to airlines are now useless and likely very costly, because we have a limited number of ports available to make requests. However, implementing explicit cancellation of all those requests is very hard. Structured concurrency solves that problem. With kotlinx.coroutines, every coroutine started by a coroutine is its child, and when the parent coroutine is cancelled, all its children are cancelled too. This way, our cancellation is automatic and reliable.</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1240" height="1174" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/image-7.png" alt="" class="wp-image-647589"/><figcaption class="wp-element-caption">Once the user leaves the screen, all processes and ports get cancelled. For the above graphic, I used the free icons <a href="https://www.flaticon.com/free-icon/close-eyes_18543033" data-type="link" data-id="https://www.flaticon.com/free-icon/close-eyes_18543033" target="_blank" rel="noreferrer noopener">Close eyes by Iconic Panda</a> and <a href="https://www.flaticon.com/free-icon/landing-page_8901502" data-type="link" data-id="https://www.flaticon.com/free-icon/landing-page_8901502" target="_blank" rel="noreferrer noopener">Landing page by Design Circle</a></figcaption></figure>



<p>However, structured concurrency goes even further. If getting a resource requires loading two other resources asynchronously, an exception in one of those two resources will cancel the other one too. This way, kotlinx.coroutines ensures that we use our resources in the most efficient way. In Python, <code>asyncio</code> introduced <code>TaskGroup</code> in version 3.11, which offers some support for structured concurrency, but it is far from what kotlinx.coroutines offer, and it requires explicit usage.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">suspend fun fetchUser(): UserData = coroutineScope {
  // fetchUserDetails is cancelled if fetchPosts fails
  val userDetails = async { api.fetchUserDetails() }
  // fetchPosts is cancelled if fetchUserDetails fails
  val posts = async { api.fetchPosts() }
  UserData(userDetails.await(), posts.await())
}</pre>



<p>The second important difference is thread management. In Python, <code>asyncio</code> runs all tasks on a single thread. Notice that this is not utilizing the power of multiple CPU cores, and it is not suitable for CPU-intensive tasks. Using kotlinx.coroutines, coroutines can typically run on a thread pool (by default as big as the number of CPU cores). This way, coroutines better utilize the power of modern hardware. Of course, coroutines can also run on a single thread if needed, which is quite common in client applications.</p>



<p>Another big advantage of coroutines is their testing capabilities. kotlinx.coroutines provides built-in support for testing asynchronous code over a predetermined simulated timeframe, removing the need to wait while the code is tested in real time. This way, we can test asynchronous code in a deterministic way, without any flakiness. We can also easily simulate all kinds of scenarios, like different delays from dependent services. In Python, testing asynchronous code is possible using third-party libraries, but this method is not as powerful and convenient as with coroutines.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Test
fun `should fetch data asynchronously`() = runTest {
  val api = mockk&lt;Api> {
      coEvery { fetchUserDetails() } coAnswers {
          delay(1000)
          UserDetails("John Doe")
      }
      coEvery { fetchPosts() } coAnswers {
          delay(1000)
          listOf(Post("Hello, world!"))
      }
  }
  val useCase = FetchUserDataUseCase(api)
  val userData = useCase.fetchUser()
  assertEquals("John Doe", userData.user.name)
  assertEquals("Hello, world!", userData.posts.single().title)
  assertEquals(1000, currentTime)
}</pre>



<p>Finally, kotlinx.coroutines offer powerful support for reactive streams through the <code>Flow</code> type. It is perfect for representing websockets or streams of events. <code>Flow</code> processing can be easily transformed using operators consistent with collection processing. It also supports backpressure, which is essential for building robust systems. Python has <code>async generators</code>, which can be used to represent streams of data, but they are not as powerful and convenient as <code>Flow</code>.</p>



<h4 class="wp-block-heading"><strong>Kotlin</strong></h4>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun notificationStatusFlow(): Flow&lt;NotificationStatus> =
  notificationProvider.observeNotificationUpdate()
      .distinctUntilChanged()
      .scan(NotificationStatus()) { status, update ->
          status.applyNotification(update)
      }
      .combine(
          userStateProvider.userStateFlow()
      ) { status, user ->
          statusFactory.produce(status, user)
      }</pre>



<h2 class="wp-block-heading">Performance comparison</h2>



<p>One of the key benefits of switching from Python to Kotlin is performance. Python applications can be fast when they use optimized native libraries, but Python itself is not the fastest language. As a statically typed language, Kotlin can be compiled to optimized bytecode that runs on the JVM platform, which is a highly optimized runtime. In consequence, Kotlin applications are typically faster than Python applications.</p>



<figure class="wp-block-image size-full is-resized"><img decoding="async" loading="lazy" width="800" height="792" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/performance-languages-for.gif" alt="" class="wp-image-647819" style="aspect-ratio:1.0101010101010102;width:840px;height:auto"/><figcaption class="wp-element-caption">Benchmark comparing different languages performing the same nested loop iterations made by Ben Dicken and published on https://benjdd.com/languages/.</figcaption></figure>



<figure class="wp-block-image size-full is-resized"><img decoding="async" loading="lazy" width="800" height="807" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/performance-languages-naive-fib.gif" alt="" class="wp-image-647853" style="aspect-ratio:0.9913258983890955;width:840px;height:auto"/><figcaption class="wp-element-caption">Benchmark comparing different languages performing the same Naive Fibonacci calculation made by Ben Dicken and published on https://benjdd.com/languages/.</figcaption></figure>



<p>Kotlin applications also use fewer resources. One reason for this is Kotlin’s more efficient memory management (a consequence of static typing). Another reason is structured concurrency, which ensures that resources are cancelled when they are no longer needed.&nbsp;</p>



<h2 class="wp-block-heading">Interoperability</h2>



<p>Kotlin is fully interoperable with Java. This means that Kotlin applications can use everything from the rich Java ecosystem. Everything that can be used in Java can easily be used in Kotlin as well (see <a href="https://kotlinlang.org/docs/mixing-java-kotlin-intellij.html" target="_blank" data-type="link" data-id="https://kotlinlang.org/docs/mixing-java-kotlin-intellij.html" rel="noreferrer noopener">interoperability guide</a>).&nbsp;</p>



<p>It is also possible to bridge between Kotlin and Python using libraries like JPype or Py4J. Nowadays, some libraries support further interoperability, like <a href="https://github.com/guimauvedigital/zodable" target="_blank" data-type="link" data-id="https://github.com/guimauvedigital/zodable" rel="noreferrer noopener">zodable</a>, which allows generating Zod schemas from Kotlin data classes.</p>



<h2 class="wp-block-heading">Summary</h2>



<p>I love Kotlin and I love Python. I’ve used both languages extensively throughout my career. In the past, Python had many clear advantages over Kotlin, such as a richer ecosystem, more libraries, and scripting capabilities. In some domains, like artificial intelligence, I still find Python to be a better choice. However, for backend development, Kotlin is clearly the better option today. It offers similar conciseness and ease of use as Python, but it is faster, safer, and scales better. If you consider switching from Python to Kotlin for your backend development, it is a transition worth making.</p>



<style>
  /*.enlighter-l-kotlin { background: #fff !important; }*/
  /* Let Gutenberg Columns handle layout; no floats */
  /*.EnlighterJSRAW.float-left,
  .EnlighterJSRAW.float-right { float: none !important; }*/
</style>
<style>.enlighter-l-kotlin {
    background: #fff !important;
}
body .is-layout-flex {
    align-items: flex-start;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}
body .is-layout-flex>div {
    height: 100%;
}
body .is-layout-flex>div>div {
    height: 100%;
}

@media (max-width: 1024px){
	body .is-layout-flex {
		display: block;
	}
}
</style>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Koog 0.5.0 Is Out: Smarter Tools, Persistent Agents, and Simplified Strategy Design</title>
		<link>https://blog.jetbrains.com/ai/2025/10/koog-0-5-0-is-out-smarter-tools-persistent-agents-and-simplified-strategy-design/</link>
		
		<dc:creator><![CDATA[Daniela Bentrup]]></dc:creator>
		<pubDate>Fri, 17 Oct 2025 07:19:48 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/JB-social-BlogFeatured-1280x720-1-6.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[ai-agents]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=ai&#038;p=651225</guid>

					<description><![CDATA[We recently released Koog 0.5.0, introducing full Agent2Agent (A2A) protocol support, which makes it easier than ever to build systems of interconnected AI agents in Kotlin. But A2A is just the beginning. Koog 0.5.0 brings a host of improvements that make agents more persistent, tools smarter, and strategy design more intuitive. Let’s dive into the [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>We recently released<a href="https://github.com/JetBrains/koog/releases/tag/0.5.0" target="_blank" rel="noopener"> Koog 0.5.0</a>, introducing full <a href="https://blog.jetbrains.com/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/">Agent2Agent (A2A) protocol support</a>, which makes it easier than ever to build systems of interconnected AI agents in Kotlin.</p>



<p>But A2A is just the beginning. Koog 0.5.0 brings a host of improvements that make agents more persistent, tools smarter, and strategy design more intuitive. Let’s dive into the highlights.</p>



<h2 class="wp-block-heading">💡 Non-graph API for strategies</h2>



<p>Koog 0.5.0 introduces a <a href="https://github.com/JetBrains/koog/pull/560" target="_blank" rel="noopener">non-graph API</a> for defining agent strategies. You can now create and modify agent strategies directly in Kotlin, without working with graphs. The new non-graph API keeps most of Koog’s core features, including state management and history compression, so you can prototype custom strategies faster.&nbsp;</p>



<p>You can now streamline your development cycle. Start simple with the out-of-the-box AIAgent using the default strategy. Then, experiment with the non-graph API to quickly test and find the best configuration for your task through straightforward code. Once you’re ready, scale it into a graph workflow to take full advantage of persistence for maximum reliability, as well as nested event tracing for deeper insights to build and test strategies more efficiently.</p>



<h2 class="wp-block-heading">🔁 Agent persistence and checkpointing improvements</h2>



<p>Complex AI workflows often depend on <a href="https://github.com/JetBrains/koog/pull/856" target="_blank" rel="noopener">persistence</a> – the ability to save and restore state without losing context or causing unintended side effects. Since we introduced persistence in Koog 0.4.0, we’ve <a href="https://github.com/JetBrains/koog/pull/856" target="_blank" rel="noopener">continued to build on it</a> to make agent state management much more reliable and flexible.</p>



<p>The new RollbackToolRegistry enables agents to undo side effects from tool calls when checkpointing, ensuring that rollbacks don’t leave your environment in an inconsistent state.</p>



<p>You can now also toggle between full state-machine persistence and message history persistence, giving you control over how much of the agent’s internal state to preserve.</p>



<h2 class="wp-block-heading">⚒️ Tool API enhancements</h2>



<p>Tools are the backbone of Koog’s agent capabilities. This release refines the <a href="https://github.com/JetBrains/koog/pull/791" target="_blank" rel="noopener">Tool API</a> to make tool development and integration smoother.</p>



<p>Tool descriptors are now automatically generated for class-based tools across all platforms. With this update, defining tools on multiplatform works just as smoothly as on the JVM, removing redundant setup and keeping your Tool API definitions concise and consistent.</p>



<p>With improvements to subgraphWithTask and subgraphWithVerification, finishTools is no longer required, and neither is the SubgraphResult type. You can now specify any input type, output type (including primitive types), task, tools, and models, and everything works automatically. There’s no more boilerplate – Koog infers and generates it all for you.</p>



<h2 class="wp-block-heading">👋 Introducing AIAgentService</h2>



<p>Managing multiple agents is now easier with the new AIAgentService. It allows you to run and manage multiple AI agents as single-use, state-managed services.</p>



<h2 class="wp-block-heading">🧑‍⚖️ New components and smarter interactions</h2>



<p>Koog 0.5.0 also introduces new components that enhance reasoning and control in agent systems.&nbsp;</p>



<p><a href="https://github.com/JetBrains/koog/pull/866" target="_blank" rel="noopener">LLM as a judge</a> is a new component that uses large language models to evaluate outputs or guide decision-making processes.</p>



<p>In version 0.5.0, we’ve added a <a href="https://github.com/JetBrains/koog/pull/829" target="_blank" rel="noopener">strategy</a> for iterative tool calling with structured outputs. This makes it much easier to obtain typed results from any agent without having to write custom code.&nbsp;</p>



<p><a href="https://github.com/JetBrains/koog/pull/747" target="_blank" rel="noopener">Streaming now supports tool calls</a>, allowing the use of tools while receiving results from an LLM on the fly. With this update, front-end integrated agents can now stream partial outputs to the user interface while still invoking tools as needed.</p>



<h2 class="wp-block-heading">Wrapping up</h2>



<p>Koog 0.5.0 isn’t just about connecting agents – it’s about empowering them to be smarter, more persistent, and easier to design. Whether you’re experimenting with lightweight strategies, managing long-lived agent sessions, or creating sophisticated toolchains, this release brings significant improvements across the board.</p>



<h2 class="wp-block-heading">✨ Try Koog 0.5.0</h2>



<p>If you’re building agents that need to be more connected, persistent, and easier to design, Koog 0.5.0 is the right choice. Explore the <a href="https://docs.koog.ai/" target="_blank" rel="noopener">docs</a>, build systems of multiple AI agents, and experiment faster while still benefiting from Koog’s advanced features.</p>



<h2 class="wp-block-heading">🤝 Your contributions make a difference</h2>



<p>We’d like to take this opportunity to extend a huge thank-you to the entire community! Your feedback, issue reports, and pull requests have been invaluable for the development of Koog!</p>



<p>A special shoutout to this release’s top contributors:</p>



<ul>
<li><a href="https://github.com/dosier" target="_blank" rel="noopener">Stan</a> – refactored the streaming API to support tool calls.</li>



<li><a href="https://github.com/siarhei-luskanau" target="_blank" rel="noopener">Siarhei Luskanau</a> – added the iOS target and enabled web support for demo-compose-app.</li>



<li><a href="https://github.com/ptitjes" target="_blank" rel="noopener">Didier Villevalois</a> – added an option to dynamically adjust context window sizes for Ollama.</li>



<li><a href="https://github.com/rubencagnie" target="_blank" rel="noopener">Ruben Cagnie</a> – implemented support for the tool-calling strategy in structured output.</li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Build a Kotlin Multiplatform Project and Win a Trip to KotlinConf 2026</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/kotlin-multiplatform-contest-2026/</link>
		
		<dc:creator><![CDATA[Ksenia Shneyveys]]></dc:creator>
		<pubDate>Thu, 09 Oct 2025 13:29:03 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-3.png</featuredImage>		<category><![CDATA[education]]></category>
		<category><![CDATA[news]]></category>
		<category><![CDATA[contest]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=647355</guid>

					<description><![CDATA[This year’s Kotlin Multiplatform Contest for students and recent graduates is open. Build a project using KMP, and it could take you to KotlinConf 2026 in Munich, Germany! Whether you are already exploring Kotlin Multiplatform or just curious about how far you can take shared Kotlin code, seize the chance to challenge yourself, stand out, [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>This year’s <a href="https://jb.gg/f7vo0v" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform Contest</a> for students and recent graduates is open. Build a project using KMP, and it could take you to KotlinConf 2026 in Munich, Germany!</p>



<p>Whether you are already exploring Kotlin Multiplatform or just curious about how far you can take shared Kotlin code, seize the chance to challenge yourself, stand out, and be part of the Kotlin community’s biggest event.</p>



<p align="center"><a class="ek-link jb-download-button" title="Join the contest" href="https://jb.gg/f7vo0v" target="_blank" rel="noopener">Join the contest</a></p>



<p>Kotlin Multiplatform lets you create apps for Android, iOS, desktop, web, and server – all from a single codebase. We’ll support you in a <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">dedicated Slack channel</a> where you can ask questions, share progress, and meet fellow participants.</p>



<p>This year, you can explore Kotlin for AI-powered apps and optionally add intelligent features to your projects. Check out our <a href="https://kotlinlang.org/docs/kotlin-ai-apps-development-overview.html" target="_blank" rel="noreferrer noopener">Kotlin AI examples</a> to see how.</p>



<h2 class="wp-block-heading">Prizes</h2>



<ul>
<li>The creators of the top three projects will win a trip to KotlinConf 2026 in Munich, Germany, taking place May 21–22, 2026. This will include travel, accommodation, exclusive swag, and a spotlight on the KotlinConf, Kotlin, and Kotlin Foundation social media and public channels, as well as at the event itself.</li>



<li>All authors of valid entries will receive Kotlin souvenirs and a warm welcome to the community.</li>



<li>All prizes are proudly sponsored by the <a href="https://kotlinfoundation.org" target="_blank" rel="noreferrer noopener">Kotlin Foundation</a>.</li>
</ul>



<h2 class="wp-block-heading">Dates</h2>



<p>Contest opens: September 15, 2025</p>



<p>Submission deadline: January 12, 2026</p>



<p>Winners announced: January 22, 2026</p>



<h2 class="wp-block-heading">How to enter</h2>



<ol>
<li>Join the <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">#kotlin-multiplatform-contest</a> channel on the Kotlinlang Slack workspace.<br>Stay up to date, ask questions, and get support from the community and Kotlin experts.</li>



<li><a href="https://kotlinconf.com/contest-rules/" target="_blank" rel="noreferrer noopener">Review the rules</a> and eligibility criteria. Make sure your submission meets the eligibility and technical requirements.</li>



<li>Build your project using Kotlin Multiplatform.</li>



<li>Submit your entry:
<ul>
<li>Upload your project to GitHub, including a detailed README with installation instructions and feature descriptions for all supported platforms.</li>



<li>Consider including a short screencast (three to five minutes long) demonstrating your project’s main features in action. This will help the jury quickly understand your project and evaluate its functionality and creative merit.</li>
</ul>
</li>
</ol>



<p align="center"><a class="ek-link jb-download-button" title="Submit your project" href="https://jb.gg/z1tir1" target="_blank" rel="noopener">Submit your project</a></p>



<h2 class="wp-block-heading">Resources</h2>



<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform official documentation</a></p>



<p><a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmyL2O0OaTYPfmOwODlLIeX9" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform Hits</a> – YouTube playlist</p>



<p><a href="https://www.youtube.com/watch?v=5_W5YKPShZ4" target="_blank" rel="noreferrer noopener">Compose Multiplatform</a> – video tutorial</p>



<p><a href="https://github.com/joreilly/PeopleInSpace" target="_blank" rel="noreferrer noopener">PeopleInSpace</a> – sample KMP projects</p>



<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-samples.html" target="_blank" rel="noreferrer noopener">More samples of multiplatform projects</a></p>



<h2 class="wp-block-heading">Previous years’ winners</h2>



<p>Meet the developers who impressed us in previous years with their creativity and skill. Check out <a href="https://youtube.com/playlist?list=PLlFc5cFwUnmzJm4IRyfainQpYhpZ9kvYP&amp;si=xPqo_NANLlVOE-zx" target="_blank" rel="noreferrer noopener">this video playlist</a> featuring interviews with the previous winners from 2024 and 2023.</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="KMP Contest" width="500" height="281" src="https://www.youtube.com/embed/videoseries?list=PLlFc5cFwUnmzJm4IRyfainQpYhpZ9kvYP" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<h2 class="wp-block-heading">Join the community</h2>



<p>Participating in the Kotlin Multiplatform Contest is a chance to learn and connect. Join the <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">Slack channel</a> to meet other students and Kotlin experts.</p>



<p>Take the leap – show us what you can do!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Crafting Your KotlinConf Proposal: Expert Tips to  Help You Stand Out</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/crafting-your-kotlinconf-proposal-expert-tips/</link>
		
		<dc:creator><![CDATA[Daria Voronina]]></dc:creator>
		<pubDate>Wed, 08 Oct 2025 16:26:27 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-2.png</featuredImage>		<category><![CDATA[news]]></category>
		<category><![CDATA[events]]></category>
		<category><![CDATA[kotlinconf]]></category>
		<category><![CDATA[tips]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=647268</guid>

					<description><![CDATA[Thinking about sharing your Kotlin expertise on the big stage? KotlinConf is the premier event for all things Kotlin, and getting a talk accepted for inclusion in the conference is a fantastic way to contribute to the community and elevate your profile. However, submitting a talk proposal, especially for the first time, can feel daunting. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Thinking about sharing your Kotlin expertise on the big stage? <a href="https://kotlinconf.com/" target="_blank" data-type="link" data-id="https://kotlinconf.com/" rel="noreferrer noopener">KotlinConf</a> is the premier event for all things Kotlin, and getting a talk accepted for inclusion in the conference is a fantastic way to contribute to the community and elevate your profile. However, submitting a talk proposal, especially for the first time, can feel daunting. With so many brilliant minds around, how do you give your proposal the best shot at being accepted?</p>



<p>In this post, we’ll share some ways to make your submission stand out, combining best practices for conference proposals with insider advice from JetBrains speakers, KotlinConf program committee members, and experienced presenters.</p>



<p>The tips are tailored to KotlinConf in particular, but most of these ideas are applicable to any developer conference.</p>



<h2 class="wp-block-heading">1. Make sure your title is clear and compelling</h2>



<p>You never get a second chance to make a first impression, and your talk’s title is your earliest opportunity to capture attention. Reviewers and attendees alike may decide whether to read further based solely on those first few words.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Untitled-design-2.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Pamela Hill. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/pamelaahill" target="_blank">X</a>, <a href="https://bsky.app/profile/pamelaahill.bsky.social" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/pamelaahill/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">A carefully-selected title can make all the difference! Audience members often lack the time or attention span to read more than the title when deciding whether to attend a talk. Prefer clarity over a catchy or fun title that doesn’t give a good idea of what the talk is about in a nutshell.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Choose a title that communicates your topic in plain terms, hints at the level, and makes the benefit to the audience obvious.</p>



<div style="background-color: #f1f6fe; margin-bottom: 2px; padding: 5px; margin-right: 0%; text-align: left; min-height: px;">
<p><i><a href="https://www.youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noreferrer noopener"><em>Your Voice Belongs Here: Creating Compelling KotlinConf Proposals</em></a></i> is a supportive and practical livestream for people from underrepresented groups in tech – whether you&#8217;re preparing for your first talk or have speaking experience and want to take the next step onto a bigger stage like KotlinConf. Join Pamela Hill and Cheuk Ting Ho, seasoned speakers, CFP writers, and friendly program committee members, as they share what makes a proposal stand out, how to shape your Kotlin journey into a strong submission, and what reviewers are really looking for. Watch the livestream recording.</p>
</div>
<p></p>



<p align="center"><a class="ek-link jb-download-button" title="Watch now" href="https://www.youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noopener">Watch now</a></p>



<h2 class="wp-block-heading">2. Tell a story with your abstract – with the audience in mind</h2>



<p>Crafting a great talk is not just about presenting information – it’s also about storytelling. Think of your proposal as a promise to provide a valuable learning experience wrapped in a story that makes it engaging.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U014J262P1A-41f465128ee6-512.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Sebastian Sellmair. Software Developer, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/Sellmair" target="_blank">X</a>, <a href="https://bsky.app/profile/sellmair.dev" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.youtube.com/@s.sellmair" target="_blank" rel="noopener">YouTube</a></p>
<p><i><span style="font-weight: 400;">Talking at KotlinConf is a great experience and a huge achievement for any Kotlin developer. While choosing a great title, having highly polished animations, and curating high-quality memes might enhance your talk, the most important thing is having a story worth telling. Do you have something novel and technically interesting to present? Can you break down a topic in a way that is engaging and truly fun? Can you inspire fellow developers?</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Your abstract should explain what you’ll cover, what the attendees will gain, and why your talk matters. Reviewers don’t need a full script, but they do need a clear, detailed impression of your talk.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Márton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">While we don’t need a full script for your talk as the abstract, we’re also unlikely to accept a talk where the abstract is just a single sentence. Two or three paragraphs are usually enough to provide meaningful detail.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Think of your abstract as a preview, not a transcript – just enough detail to show the value and flow of your talk.</p>



<p align="center"><a class="ek-link jb-download-button" title="Submit your session" href="https://jb.gg/l1dymy" target="_blank" rel="noopener">Submit your session</a></p>



<h2 class="wp-block-heading">3. Start with the problem and build anticipation</h2>



<p>When writing your proposal, set the stage by outlining the challenge or pain point your talk addresses. Create curiosity before giving the solution. This builds anticipation and helps the audience connect with your topic.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U03B9EX5MNY-68f44def26a8-512.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Jodie Burchell. Developer Advocate and Data Scientist</h4>
                                                <p><a href="https://www.linkedin.com/in/jodieburchell/" target="_blank" rel="noopener">LinkedIn</a>, <a href="https://fosstodon.org/@t_redactyl" target="_blank" rel="noopener">Mastodon</a>, <a href="https://bsky.app/profile/t-redactyl.bsky.social" target="_blank" rel="noopener">Bluesky</a></p>
<p><i><span style="font-weight: 400;">Hook your audience by telling them the problem you&#8217;re going to be solving. People love mystery books for a reason, and that&#8217;s because they build up a bit of suspense before they jump into the solution. A great proposal will do the same thing.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<h2 class="wp-block-heading">4. Think like an attendee: What&#8217;s their takeaway?</h2>



<p>The best proposals start with the audience. Instead of asking, <em>“</em>What do I want to present?<em>”</em>, consider what the attendees will learn and why they will find it valuable.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/1FqLye0HTHxz.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Svetlana Isakova. Team Lead in Kotlin Developer Advocacy, KotlinConf Program Committee member, KotlinConf speaker </h4>
                                                <p><a href="https://x.com/sveta_isakova" target="_blank">X</a></p>
<p><i><span style="font-weight: 400;">When submitting a talk, think like an attendee: Would you want to sit through this? What’s in it for the audience? That’s why we ask about key takeaways. What do you want people to learn, try, do, or feel inspired by?</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Be precise with key takeaways. Avoid vague statements like “You’ll learn best practices.” Instead, be concrete and specific.</p>



<p>Here are a few examples from KotlinConf 2025 talks:</p>



<ul>
<li>“Learn how native dependencies interact, how they are loaded, and the unexpected complexities of the native world.” (<a href="https://youtu.be/n0LpCCv3VEY?si=UJ1zXMJx7FwSniWL" target="_blank" rel="noreferrer noopener"><em>Dependencies and Kotlin/Native</em></a> | Tadeas Kriz).</li>
</ul>



<ul>
<li>“You&#8217;ll learn how to effectively use built-in tools, recognize problematic patterns, and implement proven optimization strategies.” (<a href="https://youtu.be/QTX5_JV4TVU?si=7kpUPi3wopjC7HLV" target="_blank" rel="noreferrer noopener"><em>Taming Asynchronous Beasts: Debugging and Performance Tuning in a Coroutine World</em></a> | Marcin Moskała).</li>
</ul>



<ul>
<li>“We&#8217;ll learn how KMP provides a unified framework for code sharing and execution across various platforms to solve the challenge of different codebases targeting different runtimes.” (<a href="https://youtu.be/OuX5325yq_I?si=LpT4Cs3aF7mwRMy9" target="_blank" rel="noreferrer noopener"><em>Kotlin Multiplatform&#8217;s Cross-Platform Brilliance at Norway&#8217;s 377-Year-Old National Postal Service</em></a> | Anshika Koul)</li>
</ul>



<p>Specific takeaways not only strengthen your proposal for reviewers but also make your talk more attractive to attendees when the schedule is published.</p>



<h2 class="wp-block-heading">5. Make it Kotlin-centric</h2>



<p>KotlinConf focuses on Kotlin itself and its ecosystem. Reviewers look for proposals that highlight Kotlin’s features, multiplatform capabilities, or language design, or relevant tools from the ecosystem.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Márton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Keep in mind that your talk should be related to Kotlin! For example, not every Android talk is necessarily a good fit for the KotlinConf audience. Or talks about Jetpack Compose often cover things that work the exact same way with Compose Multiplatform, and the latter is much more likely to be accepted at KotlinConf!</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>If your talk covers a popular theme, put your own unique spin on it. A case study, a personal experience, or a surprising insight can make your submission stand out.</p>



<h2 class="wp-block-heading">6. Showcase your speaking skills</h2>



<p>Even the most brilliant idea can fall short without effective delivery. The KotlinConf program committee wants to see that you can engage the audience.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/1FqLye0HTHxz.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Svetlana Isakova. Team Lead in Kotlin Developer Advocacy, KotlinConf Program Committee member, KotlinConf speaker </h4>
                                                <p><a href="https://x.com/sveta_isakova" target="_blank">X</a></p>
<p><i><span style="font-weight: 400;">Examples of your talks help us make better choices. If you’re a first-time speaker and don’t have recordings, no worries! You can simply record yourself (even just part of your proposed talk) on your laptop and share the link. We would really appreciate it.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>The KotlinConf Call for Speakers form includes a <em>Recordings of previous talks</em> field, which is a fantastic opportunity to demonstrate your presentation style and energy. If you&#8217;re new to speaking, a short, self-recorded video can make a huge difference.</p>



<p>If you don’t have formal recordings, consider including links to blog posts, open-source projects, or short demo videos related to your topic.</p>



<h2 class="wp-block-heading">7. Polishing matters: Make your proposal shine</h2>



<p>A strong proposal isn’t just about content; presentation matters too. Typos, inconsistent formatting, or vague writing can work against you.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Márton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Your submission should show that you’ve put some thought and energy into preparing it. Check your submission for formatting issues and typos, and please don’t submit abstracts that were generated by LLMs.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Reviewers want to see that you’ve taken care in preparing your proposal. A polished submission suggests you’ll bring the same care to your talk.</p>



<h2 class="wp-block-heading">8. Consider different formats and feel free to submit more than one talk</h2>



<p>If your topic doesn’t quite fit a full-length slot, consider proposing a lightning talk instead.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Márton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Don’t forget that we also accept lightning talks! If you feel like your content would have to be padded to fill a regular session, it might be more enjoyable as a lightning talk.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>And here’s another strategic tip: Submitting multiple proposals increases your chances of being selected.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Untitled-design-2.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Pamela Hill. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/pamelaahill" target="_blank">X</a>, <a href="https://bsky.app/profile/pamelaahill.bsky.social" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/pamelaahill/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Submit more than one talk! It gives you more chances to join in on the KotlinConf fun.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<h2 class="wp-block-heading">9. Don’t be afraid to get creative</h2>



<p>There&#8217;s always room for talks that are purely fun or explore unexpected aspects of Kotlin. If you have an amazing side project or discovered something truly surprising about the language, don&#8217;t hesitate to submit it!</p>



<p>The KotlinConf&#8217;26 Call for Speakers is opem! Share your Kotlin expertise with the world – server-side, web, desktop, mobile, AI/ML, and more! Submit your proposal and get a chance to speak at the year&#8217;s biggest Kotlin event!</p>



<p align="center"><a class="ek-link jb-download-button" title="Submit your session" href="https://jb.gg/l1dymy" target="_blank" rel="noopener">Submit your session</a></p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Getting a talk accepted to a prestigious conference like KotlinConf is a significant achievement. It’s an opportunity to share your insights, experiences, or even fun discoveries with the Kotlin community. However, the competition is stiff, and each year, many good proposals don’t make the cut.</p>



<p>Don’t get discouraged if your submission isn’t accepted. Keep refining your ideas, practice your presentation skills, and continue to engage with the Kotlin community. Every submission is a learning experience and valuable practice. With preparation and care, the next KotlinConf stage could be yours.</p>



<p>Good luck preparing your submission for KotlinConf&#8217;26!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Amper Update, October 2025 – Compose Hot Reload and UX Improvements</title>
		<link>https://blog.jetbrains.com/amper/2025/10/amper-update-october-2025/</link>
		
		<dc:creator><![CDATA[Joffrey Bion]]></dc:creator>
		<pubDate>Fri, 03 Oct 2025 16:55:44 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/05/AMP-social-BlogFeatured-2560x1440-1.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=amper&#038;p=644436</guid>

					<description><![CDATA[Amper 0.8.0 is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see the release notes for the full list of changes and bug fixes. To get support for Amper’s [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><a href="https://github.com/JetBrains/amper/releases/tag/v0.8.0" target="_blank" rel="noopener">Amper 0.8.0</a> is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see <a href="https://github.com/JetBrains/amper/releases/tag/v0.8.0" target="_blank" rel="noopener">the release notes</a> for the full list of changes and bug fixes.</p>



<p><em>To get support for Amper’s latest features, use </em><a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener"><em>IntelliJ IDEA 2025.3 EAP</em></a><em> (or newer).</em></p>



<h2 class="wp-block-heading">Compose Hot Reload support</h2>



<p>You can now use <a href="https://github.com/JetBrains/compose-hot-reload" target="_blank" rel="noopener">Compose Hot Reload</a> to automatically load code changes without having to restart your application:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/compose-hot-reload.mp4"></video></figure>



<p>To do so, make sure your module has a JVM (desktop) target. Then, in IntelliJ IDEA, use the<em> Run with Compose Hot Reload</em> button wherever it is possible to run your application:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img decoding="async" loading="lazy" width="922" height="324" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/run-with-compose-hot-reload.png" alt="Dialog with multiple &quot;run&quot; options, with &quot;Run with Compose Hot Reload&quot; highlighted" class="wp-image-644606" style="aspect-ratio:2.845679012345679;object-fit:contain;width:500px" /></figure></div>


<p>Read more <a href="https://github.com/JetBrains/amper/blob/HEAD/docs/Documentation.md#compose-hot-reload-experimental" target="_blank" rel="noopener">in the documentation</a>.</p>


                    <div class="alert ">
            <p><strong>Note:</strong> In 0.8.0, Amper required some special configuration to enable Compose Hot Reload. With the latest 0.8.1 patch release, this setting was removed and Compose Hot Reload is enabled by default in all compatible modules.</p>
        </div>
    






<h2 class="wp-block-heading">Custom Kotlin compiler version support</h2>



<p>If you’re eager to try new Kotlin compiler versions before the next Amper release, you can now customize the Kotlin compiler version with a simple setting:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">settings:
  kotlin:
    version: 2.2.20-rc</pre>



<p><em>Note: only versions 2.0.0 and above are supported</em>.</p>



<h2 class="wp-block-heading">Simplified single-platform experience</h2>



<p>If you are not using multi-platform modules, choosing between the <code>src</code> and <code>src@jvm</code> directories might be confusing.</p>



<p>In Amper 0.8.0, <code>jvm/app</code> and <code>android/app</code> modules have been simplified to only support <code>src</code>, and the <code>@jvm</code> qualifier is no longer permitted in their <code>module.yaml</code> files. We also introduced the new, dedicated product type <code>jvm/lib</code> for JVM-only libraries, which offers the same benefits and better conveys your intent.</p>



<h2 class="wp-block-heading">JavaScript and Wasm targets support</h2>



<p>Amper now supports the <code>js</code>, <code>wasmJs</code>, and <code>wasmWasi</code> target platforms. You can use them in your multiplatform library modules or via one of our new application product types: <code>js/app</code>, <code>wasmJs/app</code>, and <code>wasmWasi/app</code>.</p>



<p>These application product types are very basic for now. Amper simply produces an executable JavaScript or Wasm file, but it cannot run it with <code>./amper run</code> because it doesn’t currently install any JavaScript runtime or browser.&nbsp;</p>



<p>We are eager to hear what you need in terms of tooling support for these product types – please let us know in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack’s #amper channel</a>.</p>



<h2 class="wp-block-heading">Maven-local dependency resolution</h2>



<p>Previously, Amper only used the Maven local repository to optimize the downloads of artifacts, but never trusted its data. We always verified the artifact’s checksums against the remote repositories to ensure their integrity. This effectively prevented using this repository for artifacts that were locally built and never published to a remote repository.</p>



<p>Now, you can ask Amper to consider the Maven local repository as a regular repository to resolve from so you can depend on your local artifacts. To add this repository, use the special <code>mavenLocal</code> URL like this:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">repositories:
  - url: mavenLocal
    resolve: true</pre>



<h2 class="wp-block-heading">IDE improvements</h2>



<h3 class="wp-block-heading">Adding dependencies from unresolved code</h3>



<p>When your code references a symbol from a library that your existing sources don’t currently depend on, you can now use a quick-fix to add the relevant dependency.</p>



<p>You might recall from our <a href="https://blog.jetbrains.com/amper/2025/05/amper-update-may-2025/#adding-dependencies-for-unresolved-references">previous blog post</a> that we added this quick-fix in 0.7.0, but back then it only allowed users to add dependencies on local modules. Now, this feature also works for third-party maven dependencies that are already used in another module of your project:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/add-dependency-qf-coroutines.mov"></video></figure>



<p>For some specific symbols, it even works if the corresponding library isn&#8217;t in your project at all (we&#8217;ll support more in the future!):</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/add-dependency-qf-spring.mov"></video></figure>



<h3 class="wp-block-heading">Add Spring starter dependencies from inlay hints</h3>



<p>After enabling Spring Boot with <code>springBoot: enabled</code>, the <code>dependencies</code> section of the module file now offers a link to add the Spring Boot starters you may need:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/spring-starters-hint.mp4"></video></figure>



<h3 class="wp-block-heading">Updated <em>New Directory</em> popup</h3>



<p>When creating new directories in a new Amper module, you can now choose from several predefined options depending on your platforms:</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img decoding="async" loading="lazy" width="520" height="467" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/new-directory-popup.png" alt="" class="wp-image-644617" style="aspect-ratio:1.113490364025696;object-fit:cover;width:340px" /></figure>



<h2 class="wp-block-heading">CLI improvements</h2>



<h3 class="wp-block-heading">Dependency insights</h3>



<p>A new CLI command, <code>./amper show dependencies</code>, allows you to view the dependency graph of a module:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/show-dependencies-1.mp4"></video></figure>



<h3 class="wp-block-heading">Custom working directory in ./amper run</h3>



<p>When using <code>./amper run</code>, Amper now respects your current working directory by default, even if you specify <code>--root my/project/is/elsewhere</code>.</p>



<p>You can also choose to run your applications in any working directory with the new CLI option <code>--working-dir</code>.</p>



<h3 class="wp-block-heading">Removal of Gradle-based Amper</h3>



<p>Amper used to be available as a Gradle plugin, where it acted as a façade that allowed configuring the project with Amper files while still running the build with Gradle.</p>



<p>As was <a href="https://blog.jetbrains.com/amper/2025/05/amper-update-may-2025/#the-future-of-standalone-amper-and-gradle-based-amper">announced previously</a>, we are phasing out Gradle-based Amper. The last release of Amper as a Gradle plugin was 0.7.0, and there will be no further releases of this plugin in this form.</p>



<p>We are aware that Gradle-based Amper allows users to integrate with plugins or to configure their builds in ways that are not yet possible in the standalone version of Amper. This is why one of our highest priorities is to provide a prototype of Amper extensibility to enable more use cases. We’re also striving to cover the most important use cases directly out of the box. If something you need is not supported yet, feel free to share your suggestions in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack’s #amper channel</a> or open a <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noopener">YouTrack issue</a>.</p>



<h2 class="wp-block-heading">Updated default versions</h2>



<p>We updated our default versions for toolchains and frameworks:</p>



<ul>
<li>Kotlin 2.2.10</li>



<li>KSP 2.2.10-2.0.2</li>



<li><code>kotlinx.serialization</code> 1.9.0</li>



<li>Ktor 3.2.3</li>



<li>Spring Boot 3.5.5</li>



<li>Compose 1.8.2</li>



<li>Android API level 36</li>
</ul>



<h2 class="wp-block-heading">Try Amper 0.8.0</h2>



<p>To update an existing project, use the update command:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">./amper update</pre>



<p>To get started with Amper, take a look at the <a href="https://github.com/JetBrains/amper/tree/HEAD/examples" target="_blank" rel="noopener">sample projects</a> in the repository.</p>



<p>To enjoy full support for the latest Amper features, use <a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener">IntelliJ IDEA 2025.3 EAP</a> (or newer).</p>


    <div class="buttons">
        <div class="buttons__row">
                                                <a href="https://github.com/JetBrains/amper" class="btn" target="" rel="noopener">Try Amper</a>
                                                    </div>
    </div>







<h2 class="wp-block-heading">Share your feedback</h2>



<p>Amper is still experimental and under active development. You can provide feedback about your experience by joining the discussion in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack’s #amper channel</a> or sharing your suggestions and ideas in a <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noopener">YouTrack issue</a>. Your input and use cases help shape the future of Amper!</p>



<h2 class="wp-block-heading">What’s next?</h2>



<h3 class="wp-block-heading">Extensibility prototype</h3>



<p>We’re actively working on our prototype for Amper’s extensibility and are almost done with the first iteration. In the next release, you’ll be able to try implementing your own local plugin.</p>



<h3 class="wp-block-heading">Libraries publication</h3>



<p>We know that Maven publication is a critical missing feature for library authors, and we’ve heeded your requests. The publication of JVM libraries to Maven repositories has been unofficially supported for some time (and used to publish Amper itself!), but we are working on providing official support for this.</p>



<p>We will also work on streamlining Maven Central publication out of the box and plan to add support for multiplatform libraries publication.</p>
]]></content:encoded>
					
		
		
		<media:content url="https://blog.jetbrains.com/wp-content/uploads/2024/02/amper_vc_1.mp4" medium="video" width="1600" height="1000">
			<media:player url="https://blog.jetbrains.com/wp-content/uploads/2024/02/amper_vc_1.mp4" />
			<media:title type="plain">Amper | The Amper Blog</media:title>
			<media:description type="html"><![CDATA[Amper 0.8.0 is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see the release notes for the full list of changes and bug fixes.]]></media:description>
			<media:thumbnail url="https://blog.jetbrains.com/wp-content/uploads/2025/05/AMP-social-BlogFeatured-2560x1440-1.png" />
			<media:rating scheme="urn:simple">nonadult</media:rating>
		</media:content>
	</item>
		<item>
		<title>Koog × A2A: Building Connected AI Agents in Kotlin</title>
		<link>https://blog.jetbrains.com/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</link>
		
		<dc:creator><![CDATA[Andrey Bragin]]></dc:creator>
		<pubDate>Thu, 02 Oct 2025 14:48:45 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/Blog-Featured-1280x720-2-1.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[ai-agents]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=ai&#038;p=645319</guid>

					<description><![CDATA[If you’ve ever tried building a system of multiple AI agents, you’ve probably run into the problem. It starts simple enough: You’ve got one agent writing blog posts, another proofreading them, and maybe a third suggesting or generating images. Individually, they’re effective. But getting them to work together? That&#8217;s where things might start falling apart. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>If you’ve ever tried building a system of multiple AI agents, you’ve probably run into <em>the problem</em>. It starts simple enough: You’ve got one agent writing blog posts, another proofreading them, and maybe a third suggesting or generating images. Individually, they’re effective. But getting them to work together? That&#8217;s where things might start falling apart.</p>



<p>Each agent speaks its own &#8220;language&#8221;: One uses a different API interface, another has its own message format, and they all might come with specific authentication requirements. Making them communicate means writing custom integration code for every single connection. Instead of focusing on making your agents smarter, faster, or more useful, you&#8217;re stuck building bridges between them.</p>



<h2 class="wp-block-heading">What A2A does: The cross-agent communication layer</h2>



<p><strong>This is where the </strong><a href="https://a2a-protocol.org/latest/" target="_blank" rel="noopener"><strong>Agent2Agent (A2A) Protocol</strong></a><strong> takes over.</strong></p>



<p>With A2A, your agents can communicate directly through a standardized protocol, working as a universal translator for your AI ecosystem. Your blog-writing agent seamlessly passes content to your proofreader, which triggers your image generator, while the proofreader loops back with corrections and the image generator requests style clarifications. All orchestrated through a single, unified communication layer.</p>



<p>Instead of managing dozens of point-to-point connections, A2A provides:</p>



<ul>
<li><strong>Plug-and-play connectivity</strong>: Agents automatically discover and connect with each other.</li>



<li><strong>Standardized messaging</strong>: Unified format, clear protocol, and zero translation headaches.</li>



<li><strong>Built-in orchestration:</strong> Define workflows once, and let A2A handle the coordination.</li>



<li><strong>Scalability without complexity</strong>: Add or reuse agents without rewriting existing connections.</li>
</ul>



<p>What is the result? You spend time improving your agents&#8217; capabilities, not debugging their conversations. And the best part – you can implement your agents using any language or framework you like. For JVM users, Koog is a top choice, and as of version 0.5.0, it integrates seamlessly with the A2A ecosystem.</p>



<h2 class="wp-block-heading">What Koog does: The internal orchestration engine</h2>



<p><a href="https://www.jetbrains.com/koog/" target="_blank" rel="noopener">Koog</a> is a Kotlin-based framework for building AI agents targeting JVM, Android, iOS, WebAssembly, and in-browser applications. It excels at:</p>



<ul>
<li><strong>Complex workflow management</strong>: Design graph-based strategies with support for loops, branches, fallbacks, and parallel branch execution.</li>



<li><strong>Ready-to-use components</strong>: Benefit from its built-in nodes for calling LLMs and external tools, summarizing message history, and executing entire strategies.</li>



<li><strong>Tool orchestration</strong>: Turn any function in your code into a tool your AI agent can use, whether sequentially or even in parallel</li>



<li><strong>Native MCP integration</strong>: Connect seamlessly to any MCP server using the Kotlin MCP SDK.</li>



<li><strong>Memory and storage support</strong>: Built-in support for agent memory and RAG (retrieval-augmented generation) workflows with efficient context management.</li>



<li><strong>Fault tolerance</strong>: Built-in retries, checkpointing, recovery mechanisms, and state persistence to ensure reliable execution.</li>



<li><strong>Observability</strong>: Full agent event handling, logging, and support for OpenTelemetry with built-in integrations with Langfuse and W&amp;B Weave.</li>
</ul>



<p>In short, Koog is great for building reliable AI agents.</p>



<h2 class="wp-block-heading">Why pair Koog with A2A</h2>



<p>Koog and A2A cover different layers of the AI agent stack. When used together, they complement each other and fill the gaps.</p>



<p><strong>Koog already handles the hardest parts </strong>of AI orchestration needed for real-world enterprise use.</p>



<p><strong>A2A adds the missing piece: </strong>It enables your Koog agents to communicate with any other A2A-compatible agents in your ecosystem. Instead of building custom integrations for each external service, your Koog AI workflows can automatically discover and use other agents.</p>



<p><strong>The result is a perfect match</strong>: Koog’s advanced workflows become A2A tasks that any agent can request, while your Koog agents tap into the full power of the A2A ecosystem. And since Koog runs on backend, on-device, and in-browser environments, you can deliver inter-connected AI more broadly and effectively than ever before.</p>



<p>How is this possible? Let’s see!</p>



<h2 class="wp-block-heading">A2A protocol</h2>



<p>The A2A protocol defines the essential building blocks for agent-to-agent communication:</p>



<ul>
<li><strong>Agent discovery</strong> through standardized agent cards (JSON documents that describe capabilities).</li>



<li><strong>Message formats</strong> for requests and responses with consistent schemas.</li>



<li><strong>Task lifecycle</strong> management with clear states: submitted → working → completed/failed.</li>



<li><strong>Transport layers</strong> such as JSON-RPC, gRPC, and REST.</li>



<li><strong>Security schemes</strong> using standard OAuth2, API keys, and JWT tokens.</li>



<li><strong>Error handling</strong> with standardized error codes.</li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1008" height="752" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-50.png" alt="" class="wp-image-645498"/></figure>



<h3 class="wp-block-heading">Agent cards: Digital business cards</h3>



<p>Every agent in the A2A ecosystem publishes its capabilities through an &#8220;agent card&#8221; – a standardized JSON file hosted at some URL, e.g. <em>/.well-known/agent-card.json</em>, on the agent&#8217;s domain. The agent card acts as a digital business card, allowing other agents to discover the services it provides.</p>



<p>An agent card typically contains:</p>



<ul>
<li><strong>Basic information: </strong>Such as agent name, description, and version.</li>



<li><strong>Skills</strong>: What the agent can do (e.g. draft documents, proofread text, analyze data, and generate images).</li>



<li><strong>Endpoints</strong>: How to reach the agent.&nbsp;</li>



<li><strong>Other optional information: </strong>Enabled capabilities, authentication, and more.</li>
</ul>



<p>This discovery mechanism eliminates the need for manual integration work. When an agent needs a specific skill, it simply checks the relevant agent card to understand how to interact with that service.</p>



<p>In Koog, agent cards are defined using Kotlin data classes:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentCard = AgentCard(
    name = "Blog Writer",
    description = "AI agent that creates high-quality blog posts and articles",
    url = "https://api.blog-writer.com/a2a/v1",
    version = "1.0.0",
    capabilities = AgentCapabilities(streaming = true),
    defaultInputModes = listOf("text/plain"),
    defaultOutputModes = listOf("text/markdown"),
    skills = listOf(
        AgentSkill(
            id = "write-post",
            name = "Blog Post Writing",
            description = "Generate engaging blog posts on any topic",
            tags = listOf("writing", "content", "blog"),
            examples = listOf("Write a post about AI trends")
        )
    )
)</pre>



<h3 class="wp-block-heading">Universal messaging: One simple pattern</h3>



<p>A2A uses a single, standardized message format for all inter-agent communication. This simplicity is powerful – instead of learning dozens of different APIs, agents only need to understand one communication pattern.</p>



<p>Every interaction follows the same flow:</p>



<ol>
<li><strong>Send a message</strong> with the task request and parameters.</li>



<li><strong>Receive </strong>either immediate results or a task for tracking.</li>



<li><strong>Get updates</strong> via real-time channels for longer operations.</li>
</ol>



<p>This universal approach means adding new agent capabilities doesn&#8217;t require changing communication protocols. Whether you&#8217;re asking an agent to summarize text or generate a complex report, the message structure remains consistent.</p>



<p>In Koog, creating and sending a message is straightforward using already implemented objects and protocols:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val message = Message(
    role = Role.User,
    parts = listOf(
        TextPart("Write a blog post about the future of AI agents")
    ),
    contextId = "blog-project-456"
)

val request = Request(
    data = MessageSendParams(
        message = message,
        configuration = MessageConfiguration(
            blocking = false, // Get first response
            historyLength = 5 // Include context
        )
    )
)

val response = client.sendMessage(request)</pre>



<p>The message format supports rich content through different <em>Part</em> types, including TextPart for plain text content, FilePart for file attachments and DataPart for structured JSON data.</p>



<p>This unified structure means your Koog agents can seamlessly communicate with any A2A-compatible agent, whether it&#8217;s for text processing, file analysis, or complex data transformations.</p>



<h3 class="wp-block-heading">Task lifecycle: Smart workflows</h3>



<p>A2A intelligently manages different types of work based on complexity and duration:</p>



<p><strong>Immediate messages</strong>: Simple operations like text formatting or quick calculations return results directly in the AI’s response. No waiting, no tracking needed.</p>



<p><strong>Long-running tasks</strong>: Complex operations like document analysis or multi-step workflows are scheduled and return a task. The requesting agent can then monitor progress and retrieve the task results once ready.</p>



<p><strong>Real-time updates</strong>: For time-consuming operations, Server-Sent Events (SSE) provide live progress updates. This keeps agents informed without requiring constant polling.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class BlogWriterExecutor : AgentExecutor {
    override suspend fun execute(
        context: RequestContext&lt;MessageSendParams>,
        eventProcessor: SessionEventProcessor
    ) {
        val task = Task(
            contextId = context.contextId,
            status = TaskStatus(
                state = TaskState.Submitted,
                message = Message(
                    role = Role.Agent,
                    parts = listOf(TextPart("Blog writing request received")),
                    contextId = context.contextId,
    			taskId = context.taskId,
                )
            )
        )

        eventProcessor.sendTaskEvent(task)
	 ...
    }
}
</pre>



<h3 class="wp-block-heading">Built-in security: Industry standards only</h3>



<p>A2A doesn&#8217;t reinvent security. Instead, it relies on proven, widely-adopted standards like OAuth2, API keys, and standard HTTPS.</p>



<p>This approach means developers don&#8217;t need to learn new authentication schemes. If you understand modern web API security, you already understand A2A security. The system inherits all the tooling, best practices, and security audits that come with these established standards.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">"securitySchemes": {
   "google": {
       "openIdConnectUrl": "https://accounts.google.com/.well-known/openid-configuration",
       "type": "openIdConnect"
   }
}
</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class AuthorizedA2AServer(
    agentExecutor: AgentExecutor,
    agentCard: AgentCard,
    agentCardExtended: AgentCard? = null,
    taskStorage: TaskStorage = InMemoryTaskStorage(),
    messageStorage: MessageStorage = InMemoryMessageStorage(),
    private val authService: AuthService, // Service responsible for authentication
) : A2AServer(
    agentExecutor = agentExecutor,
    agentCard = agentCard,
    agentCardExtended = agentCardExtended,
    taskStorage = taskStorage,
    messageStorage = messageStorage,
) {

    private suspend fun authenticateAndAuthorize(
        ctx: ServerCallContext,
        requiredPermission: String
    ): AuthenticatedUser {
        val token = ctx.headers["Authorization"]?.firstOrNull()
            ?: throw A2AInvalidParamsException("Missing Authorization token")

        val user = authService.authenticate(token)
            ?: throw A2AInvalidParamsException("Invalid Authorization token")

        if (requiredPermission !in user.permissions) {
            throw A2AUnsupportedOperationException("Insufficient permissions")
        }

        return user
    }

   override suspend fun onSendMessage(
        request: Request&lt;MessageSendParams>,
        ctx: ServerCallContext
    ): Response&lt;CommunicationEvent> {
        val user = authenticateAndAuthorize(ctx, requiredPermission = "send_message")

        // Pass user data to the agent executor via context state
        val enrichedCtx = ctx.copy(
            state = ctx.state + (AuthStateKeys.USER to user)
        )

        // Delegate to parent implementation with enriched context
        return super.onSendMessage(request, enrichedCtx)
    }

   // the rest of wrapped A2A methods 
   // ...
}</pre>



<h2 class="wp-block-heading">How to integrate Koog agents with A2A</h2>



<p>The Koog framework comes with both the A2A client and server built right in. This means your Koog agents can seamlessly talk to other A2A-enabled agents while also making themselves discoverable to the outside world. Here&#8217;s a simple example demonstrating how you can implement this.</p>



<h3 class="wp-block-heading">How to wrap Koog agents into A2A servers</h3>



<p>First, define a strategy for the agent. Koog provides convenient converters (<em>toKoogMessage</em>, <em>toA2AMessage</em>) to seamlessly transform between Koog and A2A message formats, eliminating the need for manual serialization. Specialized nodes such as <em>nodeA2ASendMessage</em> handle the message exchange process, making communication workflows straightforward to implement:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun blogpostWritingStrategy() = strategy&lt;MessageSendParams, A2AMessage>("blogpost-writer-strategy") {
    val blogpostRequest by node&lt;MessageSendParams, A2AMessage> { input ->
        val userMessage = input.toKoogMessage().content

        llm.writeSession {
            user {
                +"Write a blogpost based on the user request"
                +xml {
                    tag("user_request") {
                        +userMessage
                    }
                }
            }

            requestLLM().toA2AMessage()
        }
    }

    val sendMessage by nodeA2ARespondMessage()

    nodeStart then blogpostRequest then sendMessage then nodeFinish
}</pre>



<p>Second, define the agent itself. Once you install the <em>A2AServer</em> feature, your agent becomes discoverable and accessible to others in the ecosystem, enabling the creation of sophisticated networks where specialized agents collaborate seamlessly.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun createBlogpostWritingAgent(
    requestContext: RequestContext&lt;MessageSendParams>,
    eventProcessor: SessionEventProcessor
): AIAgent&lt;MessageSendParams, A2AMessage> {
     // Get existing messages for the current conversation context
     val messageHistory = requestContext.messageStorage.getAll().map { it.toKoogMessage() }

     val agentConfig = AIAgentConfig(
        prompt = prompt("blogpost") {
            system("You are a blogpost writing agent")

            messages(messageHistory)
        },
        model = GoogleModels.Gemini2_5Flash,
        maxAgentIterations = 5
    )

    return agent = AIAgent&lt;FullWeatherForecastRequest, FullWeatherForecast>(
        promptExecutor = MultiLLMPromptExecutor(
            LLMProvider.Google to GoogleLLMClient(System.getenv("GOOGLE_API_KEY")),
        ),
        strategy = blogpostWritingStrategy(),
        agentConfig = agentConfig
    ) {
        install(A2AAgentServer) {
            this.context = requestContext
            this.eventProcessor = eventProcessor
        }

        handleEvents {
            onAgentFinished { ctx ->
                // Update current conversation context with response from the agent
                val resultMessge = ctx.result as A2AMessage
                requestContext.messageStorage.save(resultMessge)
            }
        }
    }
}</pre>



<p>Third, we need to wrap the agent into the executor and then define a server.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class BlogpostAgentExecutor : AgentExecutor {
    override suspend fun execute(
        context: RequestContext&lt;MessageSendParams>,
        eventProcessor: SessionEventProcessor
    ) {
        createBlogpostWritingAgent(context, eventProcessor)
            .run(context.params.message)
    }
}

val a2aServer = A2AServer(
    agentExecutor = BlogpostAgentExecutor(),
    agentCard = agentCard,
)</pre>



<p>The final step is to define a server transport and run the server.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val transport = HttpJSONRPCServerTransport(
    requestHandler = a2aServer
)

transport.start(
    engineFactory = Netty,
    port = 8080,
    path = "/a2a",
    wait = true,
    agentCard = agentCard,
    agentCardPath = A2AConsts.AGENT_CARD_WELL_KNOWN_PATH
)</pre>



<p>Now your agent is ready to handle requests!&nbsp;</p>



<h3 class="wp-block-heading">How to call other A2A-enabled agents from a Koog agent</h3>



<p>First, you need to configure an A2A client and connect it to fetch an Agent Card.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentUrl = "https://example.com"

val cardResolver = UrlAgentCardResolver(
    baseUrl = agentUrl,
    path = A2AConsts.AGENT_CARD_WELL_KNOWN_PATH,
)

val transport = HttpJSONRPCClientTransport(
    url = agentUrl,
)

val a2aClient = A2AClient(
    transport = transport,
    agentCardResolver = cardResolver
)

// Initialize client and fetch the card
a2aClient.connect()</pre>



<p>Then you can use <em>nodeA2ASendMessage </em>or <em>nodeA2ASendMessageStreaming</em> in your strategy to call these clients and receive a message<em> </em>or task response.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentId = "agent_id"
val agent = AIAgent&lt;String, String>(
    promptExecutor = MultiLLMPromptExecutor(
        LLMProvider.Google to GoogleLLMClient(System.getenv("GOOGLE_API_KEY")),
    ),
    strategy = strategy&lt;String, String>("a2a") {
        val nodePrepareRequest by node&lt;String, A2AClientRequest&lt;MessageSendParams>> { input ->
            A2AClientRequest(
                agentId = agentId,
                callContext = ClientCallContext.Default,
                params = MessageSendParams(
                    message = A2AMessage(
                        messageId = Uuid.random().toString(),
                        role = Role.User,
                        parts = listOf(
                            TextPart(input)
                        )
                    )
                )
            )
        }
        val nodeA2A by nodeA2AClientSendMessage(agentId)
        
        val nodeProcessResponse by node&lt;CommunicationEvent, String> {
            // Process event
            when (it) {
                is A2AMessage -> it.parts
                    .filterIsInstance&lt;TextPart>()
                    .joinToString(separator = "\n") { it.text }
                
                is Task -> it.artifacts
                    .orEmpty()
                    .flatMap { it.parts }
                    .filterIsInstance&lt;TextPart>()
                    .joinToString(separator = "\n") { it.text }
            }
        }

        nodeStart then nodePrepareRequest then nodeA2A then nodeProcessResponse then nodeFinish

    },
    agentConfig = agentConfig
) {
   install(A2AAgentClient) {
        this.a2aClients = mapOf(agentId to client)
    }
}

agent.run("Write blog post about A2A and Koog integration")</pre>



<h2 class="wp-block-heading">Next steps</h2>



<p>To dive deeper into Koog and A2A, check out these useful materials:</p>



<p><a href="https://docs.koog.ai/" target="_blank" rel="noopener">Koog documentation</a></p>



<p><a href="https://a2a-protocol.org/latest/specification/" target="_blank" rel="noopener">A2A specification</a></p>



<p><a href="https://github.com/JetBrains/koog/tree/develop/examples/simple-examples/src/main/kotlin/ai/koog/agents/example/a2a" data-type="link" data-id="https://github.com/JetBrains/koog/tree/develop/examples/simple-examples/src/main/kotlin/ai/koog/agents/example/a2a" target="_blank" rel="noopener">Koog A2A examples</a></p>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[zh-hans]]></code>
                        <url>https://blog.jetbrains.com/zh-hans/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</url>
                    </language>
                                    <language>
                        <code><![CDATA[ko]]></code>
                        <url>https://blog.jetbrains.com/ko/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</url>
                    </language>
                                    <language>
                        <code><![CDATA[fr]]></code>
                        <url>https://blog.jetbrains.com/fr/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</url>
                    </language>
                	</item>
		<item>
		<title>The Kotlin AI Stack: Build AI Agents With Koog, Code Smarter With Junie, and More</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/</link>
		
		<dc:creator><![CDATA[Alyona Chernyaeva]]></dc:creator>
		<pubDate>Wed, 24 Sep 2025 08:26:32 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-1-2.png</featuredImage>		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=644363</guid>

					<description><![CDATA[AI is changing how we build software, and Kotlin is ready to meet that change by empowering developers to build AI-powered apps and by enhancing the developer experience through AI-based tools. This post explores both angles: the tools for developing AI-powered apps, both from JetBrains and from the community, and the ways Kotlin is evolving [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>AI is changing how we build software, and Kotlin is ready to meet that change by empowering developers to build AI-powered apps and by enhancing the developer experience through AI-based tools.</p>



<p>This post explores both angles: the tools for developing AI-powered apps, both from JetBrains and from the community, and the ways Kotlin is evolving to make development more productive by incorporating AI tools.</p>



<h3 class="wp-block-heading">Highlights</h3>



<ul>
<li>Koog – A Kotlin-native framework for building and running AI agents.
<ul>
<li><a href="https://docs.koog.ai/" target="_blank" rel="noreferrer noopener">Try it out</a></li>
</ul>
</li>



<li>Junie – The AI coding agent integrated into JetBrains IDEs (GitHub EAP available).
<ul>
<li><a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Try Junie in IDEs</a></li>



<li><a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">Join the Junie for GitHub EAP</a></li>
</ul>
</li>
</ul>



<h1 class="wp-block-heading">Using Kotlin to develop AI-powered apps</h1>



<p>Kotlin isn’t just well-suited for AI – it’s already being used in large-scale AI systems. Deutsche Telekom, for example, used Kotlin to build <a href="https://youtu.be/mQhtLCMiUMA" target="_blank" rel="noreferrer noopener">one of Europe’s largest LLM-powered chatbots</a>. At JetBrains, we rely on Kotlin to build our entire AI stack. <a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Junie</a> and <a href="https://www.jetbrains.com/ai-assistant/" target="_blank" rel="noreferrer noopener">AI Assistant</a> in our IDEs, <a href="https://blog.jetbrains.com/ai/2025/05/meet-koog-empowering-kotlin-developers-to-build-ai-agents/" target="_blank" rel="noreferrer noopener">Koog</a> for agents, and <a href="https://kineto.dev/" target="_blank" rel="noreferrer noopener">Kineto</a> for no-code app creation are all written in Kotlin.</p>



<p>What makes Kotlin a strong fit for AI development is how naturally it supports everything from low-level model access to structured, multi-step agent logic. Let’s walk through what that looks like in practice.&nbsp;</p>



<h3 class="wp-block-heading"><strong>1. Starting simple: Calling AI models via SDKs</strong></h3>



<p>One of the simplest ways to integrate AI into your Kotlin app is by using the Java SDKs from OpenAI or Anthropic (which are both written in Kotlin under the hood). This gives you low-level access to models with full control over prompts, parameters, and data handling.</p>



<p>It’s perfect for experiments or building minimal AI features like a quick chatbot, summarizer, or code generator.</p>



<p>Here are some examples to explore:</p>



<p><strong>OpenAI SDK</strong></p>



<ul>
<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/openai/OpenAI%20Java%20SDK%20Overview.ipynb" target="_blank" rel="noreferrer noopener">OpenAI Java SDK Overview</a>.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/openai/OpenAI%20Image%20Recognition.ipynb" target="_blank" rel="noreferrer noopener">OpenAI Image Recognition</a>.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/projects/mcp/mcp-demo/composeApp/src/desktopMain/kotlin/io/github/devcrocod/MCPClient.kt" target="_blank" rel="noreferrer noopener">OpenAI SDK Integration With the MCP.<br></a></li>
</ul>



<p><strong>Anthropic SDK&nbsp;</strong></p>



<ul>
<li><a href="https://github.com/modelcontextprotocol/kotlin-sdk/blob/main/samples/kotlin-mcp-client/src/main/kotlin/io/modelcontextprotocol/sample/client/MCPClient.kt" target="_blank" rel="noreferrer noopener">Anthropic SDK Integration With the MCP</a>.</li>
</ul>



<h3 class="wp-block-heading"><strong>2. Leveling up: Using high-level libraries like Spring AI</strong></h3>



<p>When you want to move beyond raw API calls, Spring AI offers a smooth experience for Kotlin users.</p>



<p>It allows you to:</p>



<ul>
<li>Swap model providers with minimal effort.</li>



<li>Register Kotlin functions as AI tools.</li>



<li>Embed structured AI interactions directly into your application logic.</li>
</ul>



<p>This makes it easier to build useful features without getting bogged down in infrastructure details.&nbsp;</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1200" height="675" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-39.png" alt="Spring AI" class="wp-image-644376"/></figure>



<p>If you want to see it in action, check out these resources from the Kotlin-AI-Examples repository:</p>



<ul>
<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/spring-ai-examples" target="_blank" rel="noreferrer noopener">spring-ai-examples</a> includes classification, chat, and summarization use cases.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer noopener">springAI-demo</a> demonstrates how to fully integrate LLM responses into your application logic using Qdrant and OpenAI.</li>



<li><a href="https://kotlinlang.org/docs/spring-ai-guide.html" target="_blank" rel="noreferrer noopener">Build a Kotlin app with Spring AI (Tutorial)</a> walks you through the process of building a Kotlin app that answers questions based on documents stored in Qdrant</li>
</ul>



<p>Other options like <a href="https://docs.langchain4j.dev/tutorials/kotlin" target="_blank" rel="noreferrer noopener">LangChain4j</a> are also available, and you can find a Kotlin-based<a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j" target="_blank" rel="noreferrer noopener"> LangChain4j Spring Boot example</a> in the same repository.</p>



<h3 class="wp-block-heading"><strong>3. Standardizing: Exposing tools via the Model Context Protocol (MCP)</strong></h3>



<p>As your AI tools get more useful, you’ll probably want to share them – across agents, teams, or even apps. But how do you make sure they’re accessible, consistent, and easy to plug in?</p>



<p>That’s where the Model Context Protocol (MCP) comes in, and there’s an official <a href="https://github.com/modelcontextprotocol/kotlin-sdk" target="_blank" rel="noreferrer noopener">MCP Kotlin SDK </a>to help you implement it. The MCP is a standard that defines how agents can discover and use tools without custom integrations or glue code. With the MCP Kotlin SDK, you can expose your tools in a way that works seamlessly with any compliant agent. It’s a simple way to make your Kotlin code part of a larger, connected AI system.</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1200" height="675" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-38.png" alt="Kotlin MCP SDK" class="wp-image-644364"/></figure>



<p>Learn more:</p>



<ul>
<li><a href="https://modelcontextprotocol.io/quickstart/server#kotlin" target="_blank" rel="noreferrer noopener">Build an MCP server in Kotlin</a></li>



<li><a href="https://modelcontextprotocol.io/quickstart/client#kotlin" target="_blank" rel="noreferrer noopener">Build an MCP client in Kotlin</a></li>
</ul>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Model Context Protocol in Kotlin | Alexander Sysoev" width="500" height="281" src="https://www.youtube.com/embed/D3hCBrxJHLo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<h3 class="wp-block-heading"><strong>4. Using Koog: Building and running AI Agents in Kotlin</strong></h3>



<p>At the highest level, you may want to create <a href="https://www.anthropic.com/engineering/building-effective-agents" target="_blank" rel="noreferrer noopener">intelligent agents</a> – systems that can reason, adapt, and use tools.</p>



<p>JetBrains has open-sourced Koog, the JVM’s most advanced AI framework and the first to bring full-scale agentic flows to backend, Android, and iOS. With Koog, you build agents that are observable, testable, and deployable anywhere Kotlin runs.</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Kickstarting AI Agent Development in Kotlin With Koog" width="500" height="281" src="https://www.youtube.com/embed/vysVNg4IuUo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<p>Koog provides:</p>



<ul>
<li>Persistence and checkpointing to resume agents exactly where they left off.</li>



<li>Observability via OpenTelemetry with Langfuse and W&amp;B Weave.</li>



<li>Structured output and typed streaming for predictable results and real-time UIs.</li>



<li>Smart retries and robust error handling at both workflow and client levels.<br></li>



<li>Drop-in integrations with Spring Boot and a new Ktor plugin.</li>



<li>Multi-model flexibility to swap or route tasks between LLMs without losing context.</li>



<li>MCP tool support, RAG, memory, and reusable graph-based strategies for designing advanced agent logic.</li>
</ul>



<p>Because Koog is Kotlin Multiplatform, your agents can run not just on the JVM but also on Android, JS/WasmJS, and iOS. Whether you&#8217;re prototyping a simple agent or building a more complex system with tools and memory, Koog gives you the flexibility to start small and have your project evolve as it grows.</p>



<p><a href="https://docs.koog.ai/" target="_blank" rel="noreferrer noopener">Try Koog</a>&nbsp;</p>



<p>Other agent frameworks are also emerging in the Kotlin ecosystem, including:</p>



<ul>
<li><a href="https://eclipse.dev/lmos/arc2/index.html" target="_blank" rel="noreferrer noopener">Arc</a> – a custom agent framework developed by Deutsche Telekom for their LLM-powered chatbot.</li>



<li><a href="https://github.com/embabel" target="_blank" data-type="link" data-id="https://github.com/embabel" rel="noreferrer noopener">Embabel</a> – an open-source Kotlin-based framework built on Spring and LangChain4j.</li>



<li><a href="https://sca.aliyun.com/en/ai/" target="_blank" rel="noreferrer noopener">Spring AI Alibaba</a> – an extension of Spring AI focused on LLM tool orchestration.</li>
</ul>



<p>These options, each with different approaches and integrations, reflect the growing interest in using Kotlin to build agents.</p>



<h1 class="wp-block-heading">AI tooling for Kotlin</h1>



<p>While Kotlin is a powerful language for building AI systems, it&#8217;s also being supplemented by AI-based tools to make your development workflow faster and more enjoyable. To help you stay focused and in control, we’re integrating AI tools into your IDE experience.</p>



<h2 class="wp-block-heading">Junie: AI coding agent in JetBrains IDEs</h2>



<p>Junie is JetBrains’ new AI coding agent. It can take care of your routine tasks, update complex parts of your project, or even fully take over some of them – giving you more time to focus on the fun and creative parts of coding. And it works particularly well with Kotlin.</p>



<p>Unlike a generic tool for autocompletion, it handles structured tasks, which means it can:</p>



<ul>
<li>Build full features end to end (for example, a random talk generator for the KotlinConf app).</li>



<li>Plan architectural changes.</li>



<li>Execute tests.</li>



<li>Suggest improvements.</li>
</ul>



<p>JetBrains is also working on Junie’s ability to contribute code to open-source projects. It’s already <a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">available in GitHub</a> as part of an Early Access Program, where it can analyze issues, suggest fixes, and open pull requests. Join the waitlist to try it for free.</p>



<ul>
<li><a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Try Junie in JetBrains IDEs</a></li>



<li><a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">Join the waitlist to try Junie on GitHub</a></li>
</ul>



<h3 class="wp-block-heading"><strong>Mellum: Now open source</strong></h3>



<p>Powering Junie is Mellum, JetBrains’ in-house LLM for code, already in production and now open source. It powers code completion in JetBrains IDEs, and there’s a version of it fine-tuned specifically for Kotlin.&nbsp;</p>



<p>This means the Kotlin community can now experiment with, contribute to, and build their own custom tooling on top of Mellum.</p>



<ul>
<li><a href="https://huggingface.co/JetBrains/Mellum-4b-sft-kotlin" target="_blank" rel="noreferrer noopener">Get Mellum for Kotlin</a></li>
</ul>



<h1 class="wp-block-heading">Why Kotlin?</h1>



<p>In short, here’s what makes Kotlin a natural fit for both building with AI and being supported by it:</p>



<ul>
<li>Modern language features that make code clear, safe, and concise.</li>



<li>Seamless Java interop for accessing existing AI SDKs and libraries.</li>



<li>Multiplatform support for sharing logic between server-side, mobile, and web applications.</li>



<li>A growing ecosystem of Kotlin-native AI libraries and frameworks, including Koog, the MCP Kotlin SDK, and Spring AI integration.</li>



<li>An AI-powered development experience through JetBrains AI Assistant and Junie, which is integrated into IntelliJ IDEA and available via plugins in Android Studio</li>
</ul>



<h3 class="wp-block-heading"><strong>Other resources to read and watch</strong></h3>



<ul>
<li>📖 <a href="https://kotlinlang.org/docs/kotlin-ai-apps-development-overview.html" target="_blank" rel="noreferrer noopener">Kotlin for AI-Powered App Development</a></li>



<li>📖 <a href="https://blog.jetbrains.com/kotlin/2025/04/smarter-kotlin-development-with-jetbrains-ai-junie-and-ai-assistant-in-your-ide/" target="_blank" rel="noreferrer noopener">Smarter Kotlin Development With JetBrains AI: Junie and AI Assistant in IntelliJ IDEA</a></li>



<li>🎥 <a href="https://www.youtube.com/watch?v=vDtnqQmiyck" target="_blank" rel="noreferrer noopener"><em>Building Smarter AI Agents With Koog</em></a><em> </em>|<em> </em>Vadim Brilliantov and Andrey Bragin</li>



<li>🎥 <a href="https://youtu.be/NcAW-FZtpzk" target="_blank" rel="noreferrer noopener"><em>Kotlin and Spring: The modern server side stack</em></a> | Rod Johnson</li>



<li>🎥 <a href="https://youtu.be/zBgb0z1pQkM" target="_blank" rel="noreferrer noopener"><em>From 0 to h-AI-ro: high-speed track to AI for Kotlin developers</em></a> | Urs Peter</li>



<li>🎥<em> </em><a href="https://youtu.be/D3hCBrxJHLo" target="_blank" rel="noreferrer noopener"><em>Model Context Protocol in Kotlin</em></a> | Alexander Sysoev</li>



<li>🎥 <a href="https://youtu.be/hxEM5J6QfLY" target="_blank" rel="noreferrer noopener"><em>LangChain4j with Quarkus</em></a> | Max Rydahl Andersen and Konstantin Pavlov</li>



<li>🎥 <a href="https://youtu.be/K2PN03AepC0" target="_blank" rel="noreferrer noopener"><em>Large Scale Changes with AI – Migrating millions of lines of Java to Kotlin at Uber</em></a> | Ty Smith</li>



<li>🎥<a href="https://www.youtube.com/watch?v=434WFSiYj9k" target="_blank" rel="noreferrer noopener"><em>Kotlin&#8217;s Gamebit: LLM less AI for Board Games</em></a> | Dmytro Kurets</li>



<li>🎥<a href="https://www.youtube.com/watch?v=mQhtLCMiUMA" target="_blank" rel="noreferrer noopener"><em>Building an Agentic Platform with Kotlin: Powering one of Europe&#8217;s Largest LLM Bot</em></a> | Patrick Whelan</li>
</ul>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[zh-hans]]></code>
                        <url>https://blog.jetbrains.com/zh-hans/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/</url>
                    </language>
                                    <language>
                        <code><![CDATA[ko]]></code>
                        <url>https://blog.jetbrains.com/ko/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/</url>
                    </language>
                	</item>
		<item>
		<title>Ktor Roadmap and Previews</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/ktor-roadmap-2025/</link>
		
		<dc:creator><![CDATA[Simon Vergauwen]]></dc:creator>
		<pubDate>Tue, 23 Sep 2025 19:00:47 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-2x-2.png</featuredImage>		<product ><![CDATA[ktor]]></product>
		<category><![CDATA[ktor]]></category>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[release]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=644121</guid>

					<description><![CDATA[Like in previous years, we have been working on the Ktor roadmap, and we want to thank everyone for their contributions and feedback to help us prioritize our areas of development for Ktor! The OpenAPI and WebRTC support is already in preview since Ktor 3.3.0. Check out the What’s New section for a full overview [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Like in previous years, we have been working on the Ktor roadmap, and we want to thank everyone for their contributions and feedback to help us prioritize our areas of development for Ktor!</p>



<p>The OpenAPI and WebRTC support is already in preview since Ktor 3.3.0. Check out the <a href="https://ktor.io/docs/whats-new-330.html" data-type="link" data-id="https://ktor.io/docs/whats-new-330.html" target="_blank" rel="noopener">What’s New</a> section for a full overview of Ktor 3.3.0.</p>



<h2 class="wp-block-heading">🚀 Get started with ktor</h2>



<p>Ready to explore Ktor? Start building your next project today with our interactive project generator at <a href="https://kotl.in/ixiien" target="_blank" rel="noopener">start.ktor.io</a>. Your feedback and contributions are always welcome!<br><br>🔗<a href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener"> Get Started With Ktor</a> | 📢 Join the Community on<a href="https://www.reddit.com/r/ktor/" target="_blank" rel="noopener"> Reddit</a> and<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA.." target="_blank" rel="noopener"> Slack</a></p>



<div class="buttons">
        <div class="buttons__row">
            <a class="ek-link jb-download-button" title="Get Started With Ktor" href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener" data-test="blog-article-cta" data-cl="true">Get Started With Ktor</a>
         </div>
</div>



<h2 class="wp-block-heading">Ktor library improvement process</h2>



<p>The Ktor team is always looking for feedback, and therefore we fully develop everything in the open, including creating feature proposals similar to KEEPs but for Ktor. This is called KLIP, or Ktor library improvement process, and it can be found on <a href="https://github.com/ktorio/ktor-klip" target="_blank" rel="noopener">GitHub</a>. So keep an eye out for future proposals in case you’ve missed it, and please provide any feedback you might have.</p>



<h2 class="wp-block-heading">(Open)API documentation</h2>



<p>API documentation, currently one of the most requested features, has gone into development. 🎉 In Ktor 3.3.0, it was included in an early preview so you can provide early feedback. Check out the<a href="https://github.com/ktorio/ktor-klip/pull/3" target="_blank" rel="noopener"> OpenAPI KLIP</a> or the <a href="https://github.com/bjhham/open-api-eap-template" target="_blank" rel="noopener">Ktor OpenAPI Template project</a>.</p>



<p>Ktor can automatically provide an OpenAPI model from analyzing your code at compile-time, and can be set up in a simple way from Gradle. The <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noopener">Ktor Gradle Plugin</a> has a new openapi configuration which can be used to provide OpenAPI information and set up project-related configurations. The plugin currently only supports Kotlin 2.2.20. Additionally, you&#8217;ll need to add a Maven dependency for the <code>ktor-server-openapi</code> module, or <code>ktor-server-swagger</code> depending on your preference.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">plugins {
    kotlin(libs.plugins.kotlin)
    alias(libs.plugins.ktor)
}

ktor {
    @OptIn(OpenApiPreview::class)
    openapi {
        target = project.layout.projectDirectory.file("api.json")
        
        title = "My Service"
        summary = "What it does"
        description = "A longer description of the service"
        version = "1.0.0"        
        // contact, termsOfService, license...
    }
}

dependencies {
    implementation(libs.ktor.server.core)
    implementation(libs.ktor.server.openapi)
}</pre>



<p>}</p>



<p>To find out more about the api documentation support, check out <a href="https://github.com/ktorio/ktor-klip/pull/3" target="_blank" rel="noopener">the proposal</a> or try it yourself in your project using <a href="https://github.com/bjhham/open-api-eap-template" target="_blank" rel="noopener">the template project</a>.</p>



<h2 class="wp-block-heading">Service discovery</h2>



<p>In distributed systems, service discovery is a critical part of the distributed system. As servers become available, clients need to be able to discover them. The Service Discovery plugin eliminates the need to manually <em>register</em> the services, and <em>resolve</em> the client. The plugin offers a unified abstraction layer over popular discovery mechanisms (<a href="https://developer.hashicorp.com/consul" target="_blank" rel="noopener">Consul</a>, <a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a>, <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>, <a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">Eureka</a>) while offering both client-side and server-side discovery patterns. This allows you to configure service discovery in a way that&#8217;s idiomatic for Ktor and Kotlin.</p>



<p>In the example below, we configure the <code>ServiceDiscovery</code> plugin to automatically register our <code>sample-service</code> on port <code>8080</code> with the consul service registry on <code>localhost:8500</code>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">install(ServiceDiscovery) {
   consul {
      connection {
         host = "localhost"
         port = 8500
      }

      registration {
         serviceName = "sample-service"
         instanceId = "sample-service:$host:$port"
         port = 8080
      }
   }
}</pre>



<p>Another service needs to be able to communicate with the <code>sample-service</code>. In a distributed system, it doesn’t matter which instance we use, so we rely on the service registry to resolve the <code>serviceName</code> into a registered <code>instanceId</code>. The <code>HttpClient</code> <code>ServiceDiscovery</code> plugin allows us to conveniently do so.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val client = HttpClient {
    install(ServiceDiscovery) {
       consul {
          connection {
             host = "localhost"
             port = 8500
          }
       }
    }
}
client.get("service://sample-service")</pre>



<p>The <code>HttpClient</code> is configured with the <code>ServiceDiscovery</code> plugin connected to the same Consul service registry as our server example. Once configured, we can use <code>service://name</code> to resolve a service within our distributed system, which in this case is the <code>sample-service</code>.</p>



<p><br>To find out more about the service discovery support, check out <a href="https://github.com/ktorio/ktor-klip/pull/2" target="_blank" rel="noopener">the proposal</a>, and please share your feedback.</p>



<h2 class="wp-block-heading">WebRTC</h2>



<p>Real-time peer-to-peer communication is becoming increasingly useful for various applications, ranging from video calls to multiplayer and collaborative tools. We&#8217;re working on bringing WebRTC Client support to Ktor with a unified, multiplatform API that works seamlessly across browsers, Android, and potentially other platforms.</p>



<p>Signaling (WebSocket, HTTP, etc.) still manually needs to be managed but we&#8217;re focusing on making the peer-to-peer connection part as smooth as possible. Ktor 3.3.0 supports JS/Wasm and Android platforms, with more platforms like JVM, iOS, Native coming. Support for an experimental Rust-based WebRTC client is also planned. This could pave the way for integrating Rust components in other areas of Ktor. More details can be found in the <a href="https://github.com/ktorio/ktor-klip/pull/4" target="_blank" rel="noopener">KLIP</a>, or the full stack KMP <a href="https://github.com/ktorio/ktor-chat/" target="_blank" rel="noopener">Ktor Video Chat</a> example.</p>



<p>A <code>WebRtcClient</code> is created by providing the engine instance and configuring the platform-specific configuration similar to <code>HttpClient</code>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val jsClient = WebRtcClient(JsWebRtc) {
 defaultConnectionConfig = {
   iceServers = listOf(WebRtc.IceServer("stun:stun.l.google.com:19302"))
 }
}
val androidClient = WebRtcClient(AndroidWebRtc) {
 context = appContext // provide Android context
 defaultConnectionConfig = { /* Same default config*/ }
}</pre>



<p>WebRTC clients need to create an RTC peer-to-peer connection which they establish using the Interactive Connectivity Establishment (ICE). After the peers have connected, they can send and receive data from each other using the channels.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val jsConnection = jsClient.createPeerConnection()
jsConnection.addIceCandidate(WebRtc.IceCandidate(candidateString, sdpMid, sdpMLineIndex))
jsConnection.awaitIceGatheringComplete()


jsConnection.dataChannelEvents.collect { event ->
   when (event) {
     is Open -> println("Another peer opened a chanel: ${event.channel}")
     is Closed -> println("Data channel is closed")
     is Closing, is BufferedAmountLow, is Error -> println(event)
   }
}
</pre>



<p><br>To find out more about the WebRTC support check out <a href="https://github.com/ktorio/ktor-klip/pull/4" target="_blank" rel="noopener">the proposal</a>, and please share any feedback you may have.</p>



<h2 class="wp-block-heading">gRPC: powered by kotlinx-rpc</h2>



<p>gRPC support in Ktor is finally here! But with a catch. The kotlinx-rpc library is doing all the heavy lifting of bringing gRPC support to Ktor. kotlinx-rpc is dedicated to bringing you the best gRPC experience in Kotlin. Let&#8217;s define a new <code>GrpcService</code> in a <em>common module</em> and then use it on both the server side and client side.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Grpc
interface GrpcService {
    suspend fun sayHello(request: HelloRequest): HelloResponse
}</pre>



<p>Our server-side implementation might look like this, and we can register it in our Ktor <code>Application</code> using the <code>grpc</code> DSL.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">interface GrpcServiceImpl : MyService {
    suspend fun sayHello(request: HelloRequest): HelloResponse {
        return HelloResponse { content = "Hello, ${request.name}" }
    }
}

fun Application.installGrpc() = grpc {
    registerService&lt;MyService> { MyServiceImpl() }
}</pre>



<p>Depending on your use cases or existing systems, you might prefer working with <code>.proto</code> files instead. The <code>interface GrpcService</code> can also be defined from <code>.proto</code>, and it’ll generate the same interface as above, allowing the same implementation and Ktor usage.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">syntax = "proto3";

package io.ktor;

service MyService {
  rpc sayHello(HelloRequest) returns (HelloResponse);
}</pre>



<p>You can also use generated messages from <code>.proto</code> files.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">message HelloRequest {
  string name = 1;
}

message HelloResponse {
  string content = 1;
}</pre>



<p>Alternatively, you can also use KotlinX’s <code>@Seriazable</code> or your preferred serialization techniques.<br><br>Support for Apple and Linux, beyond the JVM, is planned. Check out our <a href="https://github.com/Kotlin/kotlinx-rpc" target="_blank" rel="noopener">kotlinx-rpc</a> for more details.</p>



<h2 class="wp-block-heading">Koog integration</h2>



<p>The new Ktor Koog Plugin makes it easy for you to create agentic services with Ktor and Koog. It aims to provide a deep integration between Koog and Kotlin’s AI ecosystem.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun Application.module() {
    install(Koog)
    
    routing {
        get("/execute/{prompt}") {
            val prompt = call.parameters.getOrFail("prompt")
            val output = aiAgent(customStrategy(), GPT4_1, prompt)
            call.respond(HttpStatusCode.OK, output)
        }
    }
}</pre>



<h2 class="wp-block-heading">Dependency injection</h2>



<p>Dependency injection support was released earlier this year, as discussed in last year&#8217;s roadmap post. In the OpenAPI Documentation feature, we’re introducing a compiler plugin to Ktor to generate documentation at compile time. This is the perfect opportunity to further enhance our dependency injection support with compile-time verification and provide better support for other platforms.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun Application.dependencies() = dependencies {
   provide&lt;HikariDataSource> { hikariSource() }
   provide&lt;R2dbcDatabase> { exposed(get()) } 
   provide&lt;MyService>(::MyServiceImpl)
}</pre>



<h2 class="wp-block-heading"><strong>🚀 </strong>&nbsp;Get started with Ktor 3.3.0</h2>



<p>Ready to explore Ktor 3.3.0? Start building your next project today with our interactive project generator at <a href="https://kotl.in/ixiien" target="_blank" rel="noopener">start.ktor.io</a>. Your feedback and contributions are always welcome!</p>



<p>We want to thank<a href="https://github.com/MarcusDunn" target="_blank" rel="noopener"> </a>everyone in the community for your support and feedback, as well as for reporting issues.</p>



<p>🔗<a href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener"> Get Started With Ktor</a> | 📢 Join the Community on <a href="https://www.reddit.com/r/ktor/" target="_blank" rel="noopener">Reddit</a> and<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA.." target="_blank" rel="noopener"> Slack</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Compose Multiplatform 1.9.0 Released: Compose Multiplatform for Web Goes Beta</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/</link>
		
		<dc:creator><![CDATA[Ekaterina Volodko]]></dc:creator>
		<pubDate>Mon, 22 Sep 2025 10:45:12 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-2x-1.png</featuredImage>		<category><![CDATA[multiplatform]]></category>
		<category><![CDATA[compose-for-web]]></category>
		<category><![CDATA[compose-multiplatform]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=621449</guid>

					<description><![CDATA[Compose Multiplatform for web, powered by Wasm, is now in Beta! This major milestone shows that Compose Multiplatform for web is no longer just experimental, but ready for real-world use by early adopters. This is more than a technical step forward. It’s a community achievement, made possible by feedback from early adopters of the Alpha [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><strong>Compose Multiplatform for web, powered by Wasm, is now in Beta! </strong>This major milestone shows that Compose Multiplatform for web is no longer just experimental, but ready for <strong>real-world use by early adopters</strong>.</p>



<p>This is more than a technical step forward. It’s a community achievement, made possible by feedback from early adopters of the Alpha version, the demos they built, and the contributions of open-source projects.</p>



<p>With the Beta release, you can now confidently <strong>bring your existing Compose skills and coding patterns to the web with minimal effort</strong>, creating new apps or extending ones from mobile and desktop.</p>



<p>Beyond Compose Multiplatform for web going Beta, the Compose Multiplatform 1.9.0 release also brings Android, iOS, and desktop improvements, showing that Compose Multiplatform is maturing into a truly unified UI framework.</p>



<h1 class="wp-block-heading">Bringing your Compose code and skills to the web</h1>



<p>With Compose Multiplatform, you can share most of your UI code and rely on the same Compose skills you already have from working on Android when building for the web – no need to learn a new UI toolkit. Out of the box, you get:</p>



<ul>
<li><strong>Material 3 components</strong> for design fidelity, so your UI looks polished and modern.</li>



<li><strong>Adaptive layouts</strong> that resize seamlessly between different devices and screen sizes, with <strong>animations</strong> that make transitions feel smooth and natural.</li>



<li><strong>Browser navigation integration</strong> with forward and back buttons, deep links, and history.</li>



<li><strong>Support for system and browser preferences</strong>, like dark mode.</li>
</ul>



<p>You can easily bring your Compose experience to the browser and start building web apps quickly.</p>



<h1 class="wp-block-heading">Everything you need to build modern web apps</h1>



<p>Compose Multiplatform for web now includes everything you need to build beautiful, reliable UIs for real-world apps in the browser:</p>



<ul>
<li><strong>Core APIs that work on the web</strong>, available in common code.</li>



<li><strong>Interoperability with HTML</strong> for mixing Compose UI and native web elements.</li>



<li><strong>Type-safe navigation with deep linking</strong>.</li>



<li><strong>Fundamental accessibility support</strong> for assistive technologies.</li>



<li><strong>Cross-browser compatibility</strong>, including fallback for older browsers.</li>
</ul>



<p>Compose Multiplatform 1.9.0 ensures the core API surface implementation works on the web and introduces targeted improvements to accessibility and navigation, alongside a wide range of bug fixes and developer experience enhancements (see the <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" data-type="link" data-id="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">1.9.0 What’s New page</a> for details). With this Beta release of Compose Multiplatform for web, major APIs are stable enough for you to adopt them confidently, with minimal breaking changes expected in the future.</p>



<p>The foundation provided by this release is supported by a <strong>growing ecosystem of multiplatform libraries extending to the web</strong>. Many popular Kotlin libraries for networking, serialization, coroutines, and dependency injection already work across web platforms, and many community projects have already added support for Wasm. You can explore these in the official Kotlin Multiplatform catalog at<a href="https://klibs.io?utm_source=chatgpt.com" target="_blank" rel="noopener"> klibs.io</a>, where more and more libraries are being marked as web-ready all the time.</p>



<h1 class="wp-block-heading">Development tools for better productivity&nbsp;</h1>



<p>For developing web applications with Compose Multiplatform, you can use <strong>IntelliJ IDEA</strong> or <strong>Android Studio</strong> and you’ll get the most benefits with the new <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform" target="_blank" rel="noopener">Kotlin Multiplatform plugin</a> installed.</p>



<p>In addition to macOS, the Kotlin Multiplatform plugin for IntelliJ IDEA is now available on <strong>Linux and Windows</strong>, providing the full set of features for web, Android, and desktop development. The only exceptions are iOS and macOS targets, which require Apple hardware due to system limitations. For Android Studio, Windows and Linux support will be added later.</p>



<p>With the Kotlin Multiplatform plugin, you can:</p>



<ul>
<li><strong>Create new projects with a web target</strong>, with shared or non-shared UIs, using the integrated project wizard.</li>



<li><strong>Run your apps in the browser right from the IDE</strong>, thanks to automatically created run configurations.</li>



<li><strong>Use gutter icons for web entry points</strong> to launch and debug your Compose apps instantly.</li>
</ul>



<p>In addition, you can:</p>



<ul>
<li><strong>Debug in the browser</strong> with custom formatters for a smoother experience in DevTools.</li>



<li><strong>Debug directly in IntelliJ IDEA Ultimate (2025.3 or later)</strong> with the JavaScript Debugger plugin. Note that currently <a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener">only an EAP version of 2025.3</a> is available.</li>
</ul>



<p>Together, these features make it easy to go from project setup to running and debugging your app – all without leaving the IDE.</p>



<h1 class="wp-block-heading">Compose Multiplatform for web in action</h1>



<p>The <a href="https://play.kotl.in/compose" target="_blank" rel="noopener">Kotlin Playground</a> and the <a href="https://jetbrains.github.io/kotlinconf-app/" target="_blank" rel="noopener">KotlinConf app</a> are powerful examples of Compose Multiplatform for web in action, showing how you can bring Compose UIs directly into the browser.</p>



<p>Other demos worth exploring include:</p>



<ul>
<li><a href="https://github.com/fethij/Rijksmuseum" target="_blank" rel="noopener">Rijksmuseum Demo</a> – Museum collections in a rich, interactive UI.</li>



<li><a href="https://zal.im/wasm/jetsnack/" target="_blank" rel="noopener">Jetsnack Wasm Demo</a> – A playful sample e-commerce experience.</li>



<li><a href="https://terrakok.github.io/compose-material-3-gallery/" target="_blank" rel="noopener">Compose Material 3 Gallery</a> – A showcase of Material 3 components built with Compose.</li>



<li><a href="https://kotlin.github.io/Storytale/" target="_blank" rel="noopener">Storytale</a> – A storybook-style gallery for exploring, previewing, and sharing UI components.</li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1611" height="1024" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/web-apps.png" alt="" class="wp-image-623399"/></figure>



<p>These projects highlight the flexibility of Compose Multiplatform for web in use cases ranging from interactive prototypes to production-quality apps.</p>



<h1 class="wp-block-heading">Get started with Compose Multiplatform for web</h1>



<p>The easiest way to try Compose Multiplatform for web is with the <a href="https://play.kotl.in/compose" target="_blank" rel="noopener">Kotlin Playground</a>. It doesn’t require any installation or setup. Just open your browser and start writing UI code:</p>



<p align="center"><a class="ek-link jb-download-button" title="Try in the Kotlin Playground" href="https://play.kotl.in/compose" target="_blank" rel="noopener">Try in the Kotlin Playground</a></p>



<p>If you’d like to use Compose Multiplatform for web in your IDE, simply follow our step-by-step guide:</p>



<p align="center"><a class="ek-link jb-download-button" title="Try in your IDE" href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-create-first-app.html" target="_blank" rel="noopener">Try in your IDE</a></p>



<p>Looking for ideas about what to build?</p>



<ul>
<li><strong>Quickly build demos and prototypes</strong> – Spin up interactive proof-of-concepts, internal tools, or small experiments. You can leverage your existing Compose skills for fast results, which makes this perfect for testing ideas with your team.<br></li>



<li><strong>Create UI component galleries</strong> – Build living UI libraries in a storybook-style format, showcase reusable components, preview design systems, or share prototypes directly in the browser with no extra setup.</li>
</ul>



<h1 class="wp-block-heading">Influence the future of Compose Multiplatform for web</h1>



<p>Compose Multiplatform for web is now in Beta. We see this release as the foundation for broader adoption, and with your feedback we’ll keep improving it on the path to a stable release.</p>



<p>Tell us what works well, what needs refinement, and what you’d like to see next. We’ll work alongside the community to polish features, fix bugs, and make Compose Multiplatform for web more reliable and enjoyable to use.</p>



<p>Share your thoughts in the <a href="https://slack-chats.kotlinlang.org/c/compose-web" target="_blank" rel="noopener">#compose-web</a> and <a href="https://slack-chats.kotlinlang.org/c/compose" target="_blank" rel="noopener">#compose</a> channels of our Kotlin Slack workspace and help shape the future of multiplatform development.</p>



<h1 class="wp-block-heading">Compose Multiplatform beyond the web</h1>



<p>Compose Multiplatform 1.9.0 also brings improvements for iOS, desktop, and common code.</p>



<h3 class="wp-block-heading"><strong>iOS</strong></h3>



<p>You now have more control over performance and output. You can configure the frame rate to better balance smoothness and battery life, and also have the ability to customize text input behavior, which makes Compose apps feel more natural on iOS.&nbsp;</p>



<h3 class="wp-block-heading"><strong>Desktop</strong></h3>



<p>Desktop apps gain new window management features, including the ability to configure windows before they appear, making it easier to manage multiple windows or custom layouts.</p>



<h3 class="wp-block-heading"><strong>All platforms</strong></h3>



<p>For every target, the design and preview experience is becoming more powerful. Variation testing has been simplified thanks to more configurable previews, while deeper shadow customization gives you finer control over UI depth and style.</p>



<p>See the full list of Compose Multiplatform 1.9.0 updates on our <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">What’s new page</a>.</p>



<h2 class="wp-block-heading">Read more</h2>



<ul>
<li><a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.9.0" target="_blank" rel="noopener">Compose Multiplatform 1.9.0</a> – release notes on GitHub</li>



<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">What’s new in Compose Multiplatform 1.9.0</a> – detailed release notes on the documentation portal</li>



<li><a href="https://jb.gg/e03vhv" target="_blank" rel="noopener">Get started with Compose Multiplatform</a> – a tutorial</li>



<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-and-jetpack-compose.html" target="_blank" rel="noopener">Compose Multiplatform and Jetpack Compose</a></li>
</ul>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[zh-hans]]></code>
                        <url>https://blog.jetbrains.com/zh-hans/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/</url>
                    </language>
                	</item>
	</channel>
</rss>
