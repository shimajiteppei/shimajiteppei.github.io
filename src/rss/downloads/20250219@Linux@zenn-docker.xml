<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/75b80a5922.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 19 Feb 2025 12:04:00 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[poetry × Docker(マルチステージ)はPOETRY_HOMEを設定しようぜ]]></title><description><![CDATA[
 poetry × Docker(マルチステージ)におけるPOETRY_HOMEの固定設定とパス引き継ぎ問題について
Dockerを用いたマルチステージビルドにおいては、各ステージ間で環境が分断されるため、poetryのパスが正しく引き継がれず、実行時に「poetry not found」エラーが発生する問題が発生しやすい。特に、curlを用いてpoetryをインストールした場合、環境変数PATHに自動で追加されないため、Pythonライブラリが正しく認識されず、依存関係の解決ができない事態に陥る。
マルチステージビルドにおいては、環境変数POETRY_HOMEを明示的に固定し、パスの...]]></description><link>https://zenn.dev/gon9a/articles/8447167bae17fa</link><guid isPermaLink="true">https://zenn.dev/gon9a/articles/8447167bae17fa</guid><pubDate>Wed, 19 Feb 2025 09:02:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZhFa3lJ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:poetry%2520%25C3%2597%2520Docker%2528%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25B8%2529%25E3%2581%25AFPOETRY_HOME%25E3%2582%2592%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:gon9a%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U3M2RmMWJiMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>gon9a</dc:creator></item><item><title><![CDATA[OrbStackはいいぞ]]></title><description><![CDATA[
 はじめに
株式会社イノベーションでITトレンドEXPOの開発を担当しているTACです。
最近OrbStackを使い始めたので、その概要やDockerDesktopとの比較をした内容をアウトプットします。

 OrbStackとは
一言で言うと、MacOS上で動作する軽量かつ高速なDocker Desktopの代替ツールです。

 OrbStackの概要


特徴１：Docker Desktop よりも高速で軽量

CPUやメモリの使用量が少なく、バッテリー消費も抑えられる。



特徴2 : 既存のDockerコマンドやdocker-composeファイルがそのまま使用可能

今まで...]]></description><link>https://zenn.dev/innovation/articles/cc098996a12639</link><guid isPermaLink="true">https://zenn.dev/innovation/articles/cc098996a12639</guid><pubDate>Wed, 19 Feb 2025 07:43:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gRg3HelW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:OrbStack%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2584%25E3%2581%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:TAC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyOTAzNWRlMDguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A4%25E3%2583%258E%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlmYzI3MWI3OWEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TAC</dc:creator></item><item><title><![CDATA[Databricksの環境構築を劇的に改善！Databricks Container Service × Poetry 活用法]]></title><description><![CDATA[
 はじめに
Databricksは、Apache Sparkを活用したデータエンジニアリングや機械学習のワークフローを効率的に構築できるクラウドベースのプラットフォームです。DatabricksのContainer Serviceを利用すると、カスタムコンテナイメージをクラスターにデプロイし、特定の環境やライブラリのセットアップを統一できます。
本記事では、Docker HubにホストしたカスタムDockerイメージをDatabricksのContainer Serviceを使用してクラスターにデプロイする方法を詳しく解説します。また、Poetryを活用してPythonの依存関係を管理...]]></description><link>https://zenn.dev/enjapan/articles/ed9f938be933df</link><guid isPermaLink="true">https://zenn.dev/enjapan/articles/ed9f938be933df</guid><pubDate>Wed, 19 Feb 2025 00:28:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TwaHFXru--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Databricks%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2582%2592%25E5%258A%2587%25E7%259A%2584%25E3%2581%25AB%25E6%2594%25B9%25E5%2596%2584%25EF%25BC%2581Databricks%2520Container%2520Service%2520%25C3%2597%2520Poet...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:KN%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzNmZjMTAzYzIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%25BB%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%2591%25E3%2583%25B3%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0YTU0NGQyZTcuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KN</dc:creator></item><item><title><![CDATA[Morphのチュートリアルを横目に簡単なデータ可視化を試してみる]]></title><description><![CDATA[
 Morph
Build AI Apps in a Scalable Python Framework and Deploy Securely

Morphについてはこちらを参照
まずは環境のセットアップと、簡単なデータの可視化のみをやって見ようと思います。


 環境構築
Dockerを使って環境構築していきます。

 ディレクトリ構成
mkdir morph
cd $_

tree
.
├── Dockerfile
├── compose.yaml
└── apps


 各ファイルの内容

 Dockerfile
FROM python:3.11-slim

RUN apt-ge...]]></description><link>https://zenn.dev/lowse01/articles/07291af9d0eacb</link><guid isPermaLink="true">https://zenn.dev/lowse01/articles/07291af9d0eacb</guid><pubDate>Tue, 18 Feb 2025 23:46:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lvPZIsZt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Morph%25E3%2581%25AE%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E6%25A8%25AA%25E7%259B%25AE%25E3%2581%25AB%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AD%25E3%2583%25BC%2520%252F%2520LowSE01%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRhY2VkMmU0NzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ロー / LowSE01</dc:creator></item><item><title><![CDATA[Dev Containers で始める快適 Zenn 執筆環境]]></title><description><![CDATA[
 はじめに
GitHub 連携によるバージョン管理や VSCode での記事作成に魅力を感じたため、セットアップしてみました。
普通に設定を進めると、Node.js や Zenn CLI をインストールしたり、VSCode（＋拡張機能）の設定を Zenn 仕様にしたり、と手間がかかります。
また、可能であればローカル環境はクリーンに保ちたいです。
そこで、Dev Containers を用いて Zenn 記事作成用環境を構築してみました。
主なメリットは以下の通りです。

アプリの依存関係をコンテナ内に隔離し、ローカル環境をクリーンに保てる
VSCode の設定や Markdown 関...]]></description><link>https://zenn.dev/trifolium/articles/5e7cd43586b68a</link><guid isPermaLink="true">https://zenn.dev/trifolium/articles/5e7cd43586b68a</guid><pubDate>Tue, 18 Feb 2025 22:00:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rEUcIRWR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dev%2520Containers%2520%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%25E5%25BF%25AB%25E9%2581%25A9%2520Zenn%2520%25E5%259F%25B7%25E7%25AD%2586%25E7%2592%25B0%25E5%25A2%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:trifolium%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyZTBiMGI1NjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>trifolium</dc:creator></item><item><title><![CDATA[Docker Compose の YAML ファイルをマージ/オーバーライドする]]></title><description><![CDATA[
 TLDR;


次のコマンドで複数の compose.yaml ファイルをマージ/オーバーライド
docker compose -f compose.yaml -f compose.override.yaml up -d



compose.override.yaml で設定を削除する場合、YAML の !reset タグを使う
例:
services:
  web:
    image: nginx
    ports: !reset []



compose.override.yaml で設定を上書きする場合、YAML の !override タグを使う
例:
service...]]></description><link>https://zenn.dev/masinc/articles/df856763a81f80</link><guid isPermaLink="true">https://zenn.dev/masinc/articles/df856763a81f80</guid><pubDate>Tue, 18 Feb 2025 10:02:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1hoLrAka--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Compose%2520%25E3%2581%25AE%2520YAML%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25B8%252F%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:masinc%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvbS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>masinc</dc:creator></item><item><title><![CDATA[Docker で Vite + React + TypeScript の環境構築！Tailwind CSS も導入]]></title><description><![CDATA[
 はじめに
本記事では、Dockerを使ってViteベースのReact+TypeScript環境を構築する手順を紹介します。
また、スタイルの管理を簡単にするためにTailwind CSSも導入します。
ローカル環境にNode.jsをインストールせずに、コンテナを活用して開発を進められるメリットがあります。
「環境構築を効率化したい」「React × TypeScriptの開発をスムーズに始めたい」という方にオススメです！

 この記事でできること


Dockerを使用し、React + TypeScriptの環境をセットアップ

Viteを利用して高速開発

Tailwind CS...]]></description><link>https://zenn.dev/toshi052312/articles/ffd026e96a8d97</link><guid isPermaLink="true">https://zenn.dev/toshi052312/articles/ffd026e96a8d97</guid><pubDate>Mon, 17 Feb 2025 08:49:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sKDwJWBX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25E3%2581%25A7%2520Vite%2520%252B%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25EF%25BC%2581Tailwind%2520CSS%2520%25E3%2582%2582%25E5%25B0%258E%25E5%2585%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:toshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyN2FlNzg3NGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>toshi</dc:creator></item><item><title><![CDATA[コンテナ時代にLinux知識はレガシー化するの？~トレンドに「Linux」が入った日に思ったこと~]]></title><description><![CDATA[今日（2025年2月16日）、
XでLinuxがトレンドに入っていた。コンテナが普及してきた中で、Linux自体の学習をどうするか、という話とかが中心の模様。議論の中で出てきたアイデアを自分なりに解釈して書いてみた。

 結論

Linuxを学習する重要度・優先度は 一部の役割の人達にとって下がっている

背景：コンテナなどの発達によりサーバー構築作業が必要な場面が 減った から



また、これはLinuxに限らず、あらゆる場面で、
技術の優先度や位置づけの変化が、（もともとあったが加速しているという意味で）起きている

 コンテナの普及
VMがあったのになぜ、さらにコンテナが普及した...]]></description><link>https://zenn.dev/akazah/articles/20d4c0b21e4a05</link><guid isPermaLink="true">https://zenn.dev/akazah/articles/20d4c0b21e4a05</guid><pubDate>Mon, 17 Feb 2025 05:00:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--24qQSO9p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25ABLinux%25E7%259F%25A5%25E8%25AD%2598%25E3%2581%25AF%25E3%2583%25AC%25E3%2582%25AC%25E3%2582%25B7%25E3%2583%25BC%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25EF%25BC%259F%7E%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AB%25E3%2580%258CLinux%25E3%2580%258D%25E3%2581%258C%25E5%2585%25A5%25E3%2581%25A3%25E3%2581%259F%25E6%2597%25A5%25E3%2581%25AB%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akazah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM1NmExNDAxNDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akazah</dc:creator></item><item><title><![CDATA[《あなたが知らないJAVA》ユニットテストの命名哲学]]></title><description><![CDATA[

 ユニットテストの設計哲学
プログラムはまず人間が読むために書かれ、その後に機械が実行できるようにする。

Programs must be written for people to read, and only incidentally for machines to execute.

そして、プログラミングの第一歩は命名であり、ユニットテストも同様です。

 WWW
ユニットテストの命名をどのように人間が理解できるようにするか？命名において3つの要素を反映する必要があります。略してWWW原則と呼びます。

何をテストするか？(what)
どのような条件下でテストするか？(wh...]]></description><link>https://zenn.dev/mjga/articles/86a3b8f1f1cdbd</link><guid isPermaLink="true">https://zenn.dev/mjga/articles/86a3b8f1f1cdbd</guid><pubDate>Mon, 17 Feb 2025 04:20:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cCys5jrb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258A%25E3%2581%2582%25E3%2581%25AA%25E3%2581%259F%25E3%2581%258C%25E7%259F%25A5%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584JAVA%25E3%2580%258B%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E5%2591%25BD%25E5%2590%258D%25E5%2593%25B2%25E5%25AD%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ccmjga%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxYzY0YzBlM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ccmjga</dc:creator></item><item><title><![CDATA[AWS CDKの環境構築しすぎて自動化したくなったので自動化してみた]]></title><description><![CDATA[株式会社Specteeセキュリティチームの都築です。

 導入と背景
AWS CDKは、インフラをコードで管理できる便利なツールですが、プロジェクトごとの環境構築や初期設定に手間がかかることがあります。
毎回同じようなコマンドを打ち、構成ファイルを用意するのが面倒に感じたため、環境構築を自動化して効率化を図ることにしました。
本記事では、AWS CDKの環境構築作業を自動化する方法を紹介し、セットアップの手間を大幅に減らす手法を解説します。特に、複数プロジェクトを管理する人にとって役立つ内容です。

 方法
今回のディレクトリ構造

ディレクトリツリー
-+- Dockerfile
 +...]]></description><link>https://zenn.dev/spectee/articles/c8cbac2533bd20</link><guid isPermaLink="true">https://zenn.dev/spectee/articles/c8cbac2533bd20</guid><pubDate>Mon, 17 Feb 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rbzxSNmO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520CDK%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%2599%25E3%2581%258E%25E3%2581%25A6%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:LACO46%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwYzYyY2ZlNDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Spectee%2520Developers%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjMTVmNDM3MDUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>LACO46</dc:creator></item><item><title><![CDATA[Google CloudでDifyをデプロイする完全ガイド]]></title><description><![CDATA[
 Google CloudでDifyをデプロイする方法
この記事では、DifyをGoogle Cloud上にデプロイする手順を解説します。この構成を採用することで、以下の利点を享受できます。


インターネット上で外部公開: Cloud Runを使用してHTTPS通信を提供します。

コスト削減: Spot VMを使用することで低価格運用を実現。

柔軟な運用: 必要に応じてVMを停止し、コストを最小限に抑えます（ディスク代は除く）。

デプロイ手順は以下の通りです。


 手順概要


Spot VMを立ち上げる
Spot VM上でDockerを動作させ、DifyのDockerコンテ...]]></description><link>https://zenn.dev/flyingv/articles/20250216_dify_runs_on_spotvm</link><guid isPermaLink="true">https://zenn.dev/flyingv/articles/20250216_dify_runs_on_spotvm</guid><pubDate>Sun, 16 Feb 2025 23:18:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--asDYNQqk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%2520Cloud%25E3%2581%25A7Dify%25E3%2582%2592%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:flyingv%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JkMTM0NmUzNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>flyingv</dc:creator></item><item><title><![CDATA[その手間ムダじゃない？3分で時短できるエイリアス（ alias ）設定法！]]></title><description><![CDATA[
 0. Docker と Git のエイリアス設定で開発効率を向上させる
開発中に何度も打つ長いコマンド、毎回入力するのが面倒だと感じたことはありませんか？そんな手間をなくし、たった3分で作業を効率化するエイリアス設定法を紹介します。
シェルのエイリアスと Git のエイリアスを活用すれば、よく使うコマンドを短縮して日々の開発をより快適に進めることができます。
本記事では、Docker や Git のエイリアスを設定し、無駄なタイピングを削減する方法を詳しく解説します。

 1. Zsh のエイリアス設定
まず、Zsh の設定ファイル ~/.zshrc を開きます。
nano ~/.z...]]></description><link>https://zenn.dev/take_tech/articles/c1573931f955c3</link><guid isPermaLink="true">https://zenn.dev/take_tech/articles/c1573931f955c3</guid><pubDate>Sun, 16 Feb 2025 20:27:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ok3tFma9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2581%25AE%25E6%2589%258B%25E9%2596%2593%25E3%2583%25A0%25E3%2583%2580%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%259F3%25E5%2588%2586%25E3%2581%25A7%25E6%2599%2582%25E7%259F%25AD%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25A8%25E3%2582%25A4%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25B9%25EF%25BC%2588%2520alias%2520%25EF%25BC%2589%25E8%25A8%25AD%25E5%25AE%259A%25E6%25B3%2595%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Take%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyNThiNDQ2YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Take</dc:creator></item><item><title><![CDATA[【Go】LocalStack+DynamoDBでCRUD操作]]></title><description><![CDATA[
 はじめに
現在携わっているプロジェクトで、go-redisを使ったRedis操作を行いました。
同じNoSQLであるDynamoDBならどのように操作できるのか興味を持ち、調べ実装したので、メモ的に書いていこうと思います！

 実装

 LocalStack環境構築
今回はAWSの認証情報に渡すキーをtestと設定

docker-compose.yaml
version: '3.8'
services:
  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environm...]]></description><link>https://zenn.dev/tmyhrn/articles/1f5261c60bbf4a</link><guid isPermaLink="true">https://zenn.dev/tmyhrn/articles/1f5261c60bbf4a</guid><pubDate>Sun, 16 Feb 2025 09:28:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--z7AxscMS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Go%25E3%2580%2591LocalStack%252BDynamoDB%25E3%2581%25A7CRUD%25E6%2593%258D%25E4%25BD%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2582%2582%25E3%2582%2584%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4ODIzYmE0YmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ともやん</dc:creator></item><item><title><![CDATA[Rescale の Docker で NVIDIA NGC を使う: NVIDIA Modulus Getting Started を例に]]></title><description><![CDATA[
 この記事について
Rescale の計算ノードにインストールされた Docker を使用して, NVIDIA NGC からコンテナを持ってきて実行する方法を示します。実行する題材として, NVIDIA Modulus Getting Started の a quick installation check をやってみます

 事前準備: Docker の有効化
Rescale のジョブ設定時のソフトウェア一覧に Docker がありますが、デフォルトではグレーアウトされています

グレーアウトされている Docker のアイコンをクリックして, Software Request を送...]]></description><link>https://zenn.dev/cloudyfluid/articles/da1764ae1f6040</link><guid isPermaLink="true">https://zenn.dev/cloudyfluid/articles/da1764ae1f6040</guid><pubDate>Sun, 16 Feb 2025 04:06:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YLtbS8OL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rescale%2520%25E3%2581%25AE%2520Docker%2520%25E3%2581%25A7%2520NVIDIA%2520NGC%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%253A%2520NVIDIA%2520Modulus%2520Getting...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cloudyfluid%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3M2I2MzU3NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cloudyfluid</dc:creator></item><item><title><![CDATA[Difyで作ったLLM ApplicationをAzure Kubernetes Serviceにデプロイする方法]]></title><description><![CDATA[

 はじめに
Dify はみなさまご存知でしょうか。
https://dify.ai/jp
LLM のアプリケーションがノーコード(ローコード)で簡単に作れるツールです。
このツールを使っている方が最近増えてきており、且つ Azure 上で動かしたいというご要望をいただいたので、今回は Dify を Azure Kubernetes Service(AKS)にデプロイして本番環境で使う手順をご紹介します。

 Dify 環境構築
まずは Dify を Web 上ではなく、ローカルで動かすために Docker を使って環境構築を行います。
以下のサイトへアクセスして、Dify のリポジト...]]></description><link>https://zenn.dev/microsoft/articles/dify_on_azure</link><guid isPermaLink="true">https://zenn.dev/microsoft/articles/dify_on_azure</guid><pubDate>Sat, 15 Feb 2025 05:21:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HLhVvOeO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dify%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259FLLM%2520Application%25E3%2582%2592Azure%2520Kubernetes%2520Service%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yusuke%2520Satake%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzZDNiN2I3OGYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Microsoft%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczMjQwNDhhMDkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke Satake</dc:creator></item><item><title><![CDATA[Docker環境にMongoDBを構築する方法]]></title><description><![CDATA[ご覧いただきありがとうございます。Furuyaです。
今回は、Docker環境にMongoDBを構築する方法についてまとめます。

 環境
PC：MacBook Pro 13-inch, 2020, Four Thunderbolt 3 ports
macOS：Sonoma 14.6.1
Shell: zsh

 MongoDBのDockerコンテナ環境構築

 1. ディレクトリ構成
まず、以下のようなディレクトリ構成で作業を進めます。
project-root/
├── .docker/
│   ├── Dockerfile
├── docker-compose.yml
├── ch...]]></description><link>https://zenn.dev/k0y0k0y0/articles/article_20250208</link><guid isPermaLink="true">https://zenn.dev/k0y0k0y0/articles/article_20250208</guid><pubDate>Sat, 15 Feb 2025 02:57:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--evRvfcrP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25ABMongoDB%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takuma%2520Furuya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2YTg5YjIwNjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takuma Furuya</dc:creator></item><item><title><![CDATA[Autonome+Agent Kitを使ってCrypto AI Agentを作成する]]></title><description><![CDATA[
 AutonomeでAgent Kitを使う
この記事は2025年2月時点の情報です。
最近話題の「AIエージェント」を手軽にデプロイできる
プラットフォームとして注目されるのが**Autonome（オートノーム）**です。
本記事では、Autonome上でAgent Kitを利用して
AIエージェントを作成し、デプロイする方法を解説します。

 Autonomeとは
AutonomeはAltLayer社が提供する
自律型AIエージェントの作成とデプロイのための
プラットフォームです。
Web上のダッシュボードから簡単にエージェントを起動でき、
インフラ構築の手間が不要です。
Auto...]]></description><link>https://zenn.dev/bull/articles/how-to-integrate-agentkit-to-autonome</link><guid isPermaLink="true">https://zenn.dev/bull/articles/how-to-integrate-agentkit-to-autonome</guid><pubDate>Sat, 15 Feb 2025 01:39:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CSUy8h-i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Autonome%252BAgent%2520Kit%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Crypto%2520AI%2520Agent%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bull%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g2MllRUHZOMXdGR25zMmFxNEpvOWI0VW96UTY4b3NfdlBOOFFqZUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bull</dc:creator></item><item><title><![CDATA[Ansible で Docker をインストールしてみる]]></title><description><![CDATA[
 環境
Ansible実行環境は、Raspberry Pi上のDockerコンテナ上のAmazonLinux 2023
$ ansible --version
ansible [core 2.15.13]
  config file = None
  configured module search path = ['/home/docker/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/local/lib/python3....]]></description><link>https://zenn.dev/mnod/articles/c2d4fef799b22a</link><guid isPermaLink="true">https://zenn.dev/mnod/articles/c2d4fef799b22a</guid><pubDate>Fri, 14 Feb 2025 20:53:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5QAupHhR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ansible%2520%25E3%2581%25A7%2520Docker%2520%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mnod%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyOTA1NTFiNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mnod</dc:creator></item><item><title><![CDATA[React + Dockerのホットリロード（Vite)]]></title><description><![CDATA[3ステップで進めます。
手順

vite.config.tsファイルの修正
Dockerfileの作成
docker-compose.ymlの作成

これで作ったと思われます。
npx create-vite@latest frontend --template react-ts
cd frontend
npm install

 ディレクトリ構成
.
├── backend/
│   └── ## Go言語の予定
├── frontend/
│   ├── node_modules
│   ├── public
│   ├── src/
│   │   ├── ## この中に処理ファイ...]]></description><link>https://zenn.dev/shuji0425/articles/eddae9d3b0c47c</link><guid isPermaLink="true">https://zenn.dev/shuji0425/articles/eddae9d3b0c47c</guid><pubDate>Fri, 14 Feb 2025 16:52:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tu5qZx9c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520Docker%25E3%2581%25AE%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Vite%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWpMMHlaQk1VM0ZWM29lOWJvMy1pZXRRWW9ZNXQ5aFU5Tl9adVpKZjd0bDNySHR3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>シュージ</dc:creator></item><item><title><![CDATA[Go言語＋Dockerのホットリロード（Air）]]></title><description><![CDATA[ホットリロードをしたかったので、Airを使ってやってみました。
3ステップで進みます。

Airを入れる
Dockerfileを記述する
docker-compose.ymlを書く


 ディレクトリ構成
ホットリロードのときはディレクトリ構成が重要なので最初に記載します。
参考にしてください。
フロントエンドをReact、バックエンドをGoにしたくて下記構成にしています。
.
├── backend/
│   ├── Dockerfile
│   ├── tmp/
│   │   └── main ## air コマンドでtmpとmainは勝手に作られる
│   ├── .air.to...]]></description><link>https://zenn.dev/shuji0425/articles/69e8bcd04be429</link><guid isPermaLink="true">https://zenn.dev/shuji0425/articles/69e8bcd04be429</guid><pubDate>Fri, 14 Feb 2025 14:52:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8-Eu9yZr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%25E8%25A8%2580%25E8%25AA%259E%25EF%25BC%258BDocker%25E3%2581%25AE%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Air%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWpMMHlaQk1VM0ZWM29lOWJvMy1pZXRRWW9ZNXQ5aFU5Tl9adVpKZjd0bDNySHR3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>シュージ</dc:creator></item></channel></rss>