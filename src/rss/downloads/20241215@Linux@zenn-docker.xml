<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/01c7f20365.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 15 Dec 2024 11:42:38 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dockerfileで.npmrcをセキュアに扱う【Build secrets】]]></title><description><![CDATA[
 背景
社内で Github Package でプライベート npm パッケージを運用しており、それを npm インストールするためのアクセストークンとして.npmrcを使用しています。
最近、Dockerfile での.npmrc の取り扱いをセキュア化しました。その過程で少しだけコツと注意がいったので、共有したいと思います。
ちなみに.npmrc とはなんぞ？ということ本記事では省略します。ご存知なければ以下の記事が分かりやすかったのでご参照ください。
https://qiita.com/marumaru0113/items/21b600c21caf5d9b9775

 ビフォーア...]]></description><link>https://zenn.dev/makoto1995/articles/dockerfile-secure-npmrc</link><guid isPermaLink="true">https://zenn.dev/makoto1995/articles/dockerfile-secure-npmrc</guid><pubDate>Sun, 15 Dec 2024 10:20:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GiZCami7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%25E3%2581%25A7.npmrc%25E3%2582%2592%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2582%25A2%25E3%2581%25AB%25E6%2589%25B1%25E3%2581%2586%25E3%2580%2590Build%2520secrets%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Makoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1M3RXM1huOHFZNnp1dERtQ3pYWlNjUzBUMGdMOU94RHdJV3ZRNW1fdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Makoto</dc:creator></item><item><title><![CDATA[【#1】個人AWSアカウント上でAWS EKS(Kubernetes)環境構築してみた！]]></title><description><![CDATA[
 背景
業務でAWS EKS(Kubernetes)を利用することとなりました。
今までの経歴上、AWS EKSを利用してこなかったため、簡単な課題をこなし事前に知識習得を行った際の備忘録を記述します。
業務上SRE的なことも行う必要があるため、初回構築後、複数回にわけて、デプロイの自動化など構成改善の実践内容について記事にまとめていく予定です。
可能な限り小規模な構成で、AWS無料利用枠内に収まるように進めていきます。

 対象読者
・KubernetesやAWS EKSへ入門したい人

 今回の実施内容（概要）
・ローカル環境でkubectl、eksctlを実行するための環境作成
...]]></description><link>https://zenn.dev/kento_serma1994/articles/2be85ce2b47cfe</link><guid isPermaLink="true">https://zenn.dev/kento_serma1994/articles/2be85ce2b47cfe</guid><pubDate>Sun, 15 Dec 2024 03:16:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mvsuJDam--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25231%25E3%2580%2591%25E5%2580%258B%25E4%25BA%25BAAWS%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E4%25B8%258A%25E3%2581%25A7AWS%2520EKS%2528Kubernetes%2529%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kentoftmr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzM2NlZTk4Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kentoftmr</dc:creator></item><item><title><![CDATA[Docker？Kubernetes？GitOps？コンテナ初心者がArgo CDまでたどり着くまでに理解したこと全部まとめてみた]]></title><description><![CDATA[最近、クラウドネイティブという言葉をよく耳にするようになりました。
アプリケーションをサクサク動かし、環境差異に悩まされず、本番環境も手軽に更新できる世界が広がっているようです。その中心にあるのが「コンテナ」や「Kubernetes (K8s)」と呼ばれる技術たち。
私自身、開発環境と本番環境での動作差に悩まされてきました。
「同じコードなのに、開発環境では動くけど本番で動かない…」そんな経験を何度もしたことがあります。そんなときにDockerやKubernetesがこの問題を解決するキーテクノロジーだと知り、興味を持ったのがきっかけでした。
さらに、Kubernetes上でアプリケーシ...]]></description><link>https://zenn.dev/mifurohi/articles/f330ce6424424b</link><guid isPermaLink="true">https://zenn.dev/mifurohi/articles/f330ce6424424b</guid><pubDate>Sat, 14 Dec 2024 15:25:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--91Kl-OUS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25EF%25BC%259FKubernetes%25EF%25BC%259FGitOps%25EF%25BC%259F%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258CArgo%2520CD%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%259F%25E3%2581%25A9%25E3%2582%258A%25E7%259D%2580%25E3%2581%258F%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E5%2585%25A8...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mifurohi%2540%25E5%2585%2583%25E7%25BE%258A%25E9%25A3%25BC%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q1MTA2ZWMzZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mifurohi@元羊飼い</dc:creator></item><item><title><![CDATA[大人の学びなおしDocker（2）～中身編～]]></title><description><![CDATA[
 はじめに
前回はDockerの基礎の部分についておさらいしました。
ちょうどDockerの中身についてとても良い記事を見つけたので、今回からはDockerの深い仕様について少しだけ学びたいと思います。

 Dockerとdeamon、Runtime
まず、Dockerの構成は以下のようになっています。本来はDocker Engineの上にDocker Swarmがいますが、今回は解説しないので省きます。

Docker Engine（デーモン） は

クライアントから受け付けたコマンドの処理（docker pull, docker buildなどなど）
コンテナイメージの管理
ボリュ...]]></description><link>https://zenn.dev/collabostyle/articles/549177ad7ddccc</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/549177ad7ddccc</guid><pubDate>Sat, 14 Dec 2024 14:41:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UnxkK8Qr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25A4%25A7%25E4%25BA%25BA%25E3%2581%25AE%25E5%25AD%25A6%25E3%2581%25B3%25E3%2581%25AA%25E3%2581%258A%25E3%2581%2597Docker%25EF%25BC%25882%25EF%25BC%2589%25EF%25BD%259E%25E4%25B8%25AD%25E8%25BA%25AB%25E7%25B7%25A8%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:goro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3NGE1ZTI4NzUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>goro</dc:creator></item><item><title><![CDATA[【Python】Dockerで環境構築（windows）［改訂版］]]></title><description><![CDATA[
 １．ファイル・フォルダ作成

ターミナルにてプロジェクトフォルダの作成
mkdir django_docker_project
cd django_docker_project


VScodeの起動
code .

必要なファイルとディレクトリの一括作成コマンド
必要なファイルとディレクトリを作成
# 作成するファイル名をリストで定義
$files = @(
    "Dockerfile",
    "docker-compose.yml",
    "requirements.txt",
    ".env",
    ".env.example",
    ".gitigno...]]></description><link>https://zenn.dev/code_journey_ys/articles/8a32c7c7a7debb</link><guid isPermaLink="true">https://zenn.dev/code_journey_ys/articles/8a32c7c7a7debb</guid><pubDate>Sat, 14 Dec 2024 14:33:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q6RPSuwK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591Docker%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25EF%25BC%2588windows%25EF%25BC%2589%25EF%25BC%25BB%25E6%2594%25B9%25E8%25A8%2582%25E7%2589%2588%25EF%25BC%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxYmU5MTc2ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[【初学者向け】Dockerの基礎。]]></title><description><![CDATA[
 はじめに
Dockerの理解力を高めるために記事を書きます。
もし、間違っている箇所がありましたら、教えていただけると光栄です。

 想定読者
Docker初学者。

 Dockerとは

Dockerは、Docker社が開発している、コンテナ型の仮想環境を作成、配布、実行するためのオープンソースソフトウェアです。


 メリット

軽量のため高速に起動ができる。
他の人が同じ環境で開発を簡単に行うことができる。
ホストOSを汚さずに環境構築ができる。
可搬性が高い。

ライブラリごとパッケージするため、本番環境でライブラリが足りないなどの不具合を避けることができる。




 デメ...]]></description><link>https://zenn.dev/monaka0309/articles/4add4c3a6148de</link><guid isPermaLink="true">https://zenn.dev/monaka0309/articles/4add4c3a6148de</guid><pubDate>Sat, 14 Dec 2024 13:09:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3iwFDPdq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Docker%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2581%25AA%25E3%2581%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3OTBkYzczMmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>もなか</dc:creator></item><item><title><![CDATA[【Docker】データの永続化方法 - ボリュームとバインドマウントの選び方 -]]></title><description><![CDATA[
 はじめに
コンテナを停止するたびにDBのデータが消えてしまう問題に直面したことをきっかけに、Dockerでのデータ永続化について学習しました。本記事では、データ永続化を実現する方法として、「ボリューム」と「バインドマウント」の違いや選び方について解説します。

 データを永続化する方法
Dockerでデータを永続化する方法には、大きく2つあります。

ボリュームを使用する方法
バインドマウントを使用する方法

簡単に言うと、ボリュームはDockerがデータを管理する方法で、バインドマウントはホストマシンがデータを管理する方法です。それぞれの違いとメリット・デメリットについて説明します...]]></description><link>https://zenn.dev/fire_arlo/articles/docker-volume-vs-bind-mount</link><guid isPermaLink="true">https://zenn.dev/fire_arlo/articles/docker-volume-vs-bind-mount</guid><pubDate>Sat, 14 Dec 2024 03:21:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ic5dl799--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Docker%25E3%2580%2591%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E6%25B0%25B8%25E7%25B6%259A%25E5%258C%2596%25E6%2596%25B9%25E6%25B3%2595%2520-%2520%25E3%2583%259C%25E3%2583%25AA%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25A8%25E3%2583%2590%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259E%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E9%2581%25B8%25E3%2581%25B3%25E6%2596%25B9%2520-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2583%25BC%25E3%2582%258D%2540%25E7%25AC%25AC%25E4%25BA%258C%25E6%2596%25B0%25E5%258D%2592%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5ZDhlOThkNTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あーろ@第二新卒バックエンドエンジニア</dc:creator></item><item><title><![CDATA[Grafana + Cloudflare Tunnelでどこでもメトリクス監視]]></title><description><![CDATA[
 はじめに

Prometheus + Grafanaを使いたい
外からでもメトリクス監視したい
ドメインは持ってるけど、グローバルIPを持っていない/安易に公開したくない
見れる人に制限をかけたい

こんな人向けです

 セットアップ
今回はProxmox VE上のUbuntu 22.04.5 LTSで作業します

 Dockerのインストール
公式サイトを見ながらDocker Engineをインストールします
https://docs.docker.com/engine/install/
docker -vで正しくバージョンが出れば大丈夫です
$ docker -v
Docker ...]]></description><link>https://zenn.dev/artemit/articles/cloudflare-tunnel-grafana</link><guid isPermaLink="true">https://zenn.dev/artemit/articles/cloudflare-tunnel-grafana</guid><pubDate>Fri, 13 Dec 2024 20:27:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OMLyigWb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Grafana%2520%252B%2520Cloudflare%2520Tunnel%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%2593%25E3%2581%25A7%25E3%2582%2582%25E3%2583%25A1%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E7%259B%25A3%25E8%25A6%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:artemol%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSktpM29qSDhCVXl4MmtXbEpENmpVLTVNdkxHN3hSVTYxQ1A2S2p1WFpaal9sdnJwcz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>artemol</dc:creator></item><item><title><![CDATA[Dockerで自分専用のコンテナ環境を作成する]]></title><description><![CDATA[
 背景
最近だと開発環境でDockerを使う場面も増えてきていると思います。僕は普段Railsのアプリケーションを開発していますが、開発環境はDockerのコンテナで立ち上げています。この場合、開発スタイルは以下の2つに分かれると思います。


docker compose execを駆使してホストで開発する
コンテナに入って開発する

僕は後者のスタイルが好きですが、前者のホストで開発するスタイルをよく見かけます。
前者の場合、コマンド実行する際にdocker compose execを駆使する必要があり、タイプ量も多く億劫に感じることも多いので、それの回避方法を幾つか紹介するととも...]]></description><link>https://zenn.dev/rhiroe/articles/docker_dev_envionment</link><guid isPermaLink="true">https://zenn.dev/rhiroe/articles/docker_dev_envionment</guid><pubDate>Fri, 13 Dec 2024 08:30:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3cZQ9usL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E5%25B0%2582%25E7%2594%25A8%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rhiroe%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNGQ3MDIzYjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rhiroe</dc:creator></item><item><title><![CDATA[Dockerのvolume mountしたディレクトリの中の所有者をコンテナの実行ユーザーに変更する]]></title><description><![CDATA[
 結論
Dockerfileでvolume mountするディレクトリをあらかじめ作成しておく

 詳細
こんな感じのDockerfileがあり
FROM ruby:3.3.4-bullseye

ENV LANG=C.UTF-8
ENV TZ=Asia/Tokyo
ENV EDITOR=vim

EXPOSE 3000

RUN apt update -qq &amp;&amp;\
    apt upgrade -y &amp;&amp;\
    apt install -y --no-install-recommends \
    vim &amp;&amp;\
    rm...]]></description><link>https://zenn.dev/rhiroe/articles/docker_volume_mount_permissions</link><guid isPermaLink="true">https://zenn.dev/rhiroe/articles/docker_volume_mount_permissions</guid><pubDate>Fri, 13 Dec 2024 08:30:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--le1MAoYQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25AEvolume%2520mount%25E3%2581%2597%25E3%2581%259F%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E8%2580%2585%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%25AB%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rhiroe%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNGQ3MDIzYjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rhiroe</dc:creator></item><item><title><![CDATA[Dockerで自分専用のコンテナ環境を作成する]]></title><description><![CDATA[
 背景
最近だと開発環境でDockerを使う場面も増えてきていると思います。僕は普段Railsのアプリケーションを開発していますが、開発環境はDockerのコンテナで立ち上げています。この場合、開発スタイルは以下の2つに分かれると思います。


docker compose execを駆使してホストで開発する
コンテナに入って開発する

僕は後者のスタイルが好きですが、前者のホストで開発するスタイルをよく見かけます。
前者の場合、コマンド実行する際にdocker compose execを駆使する必要があり、タイプ量も多く億劫に感じることも多いので、それの回避方法を幾つか紹介するととも...]]></description><link>https://zenn.dev/rhiroe/articles/docker-dev-envionment</link><guid isPermaLink="true">https://zenn.dev/rhiroe/articles/docker-dev-envionment</guid><pubDate>Fri, 13 Dec 2024 08:30:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3cZQ9usL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E5%25B0%2582%25E7%2594%25A8%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rhiroe%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNGQ3MDIzYjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rhiroe</dc:creator></item><item><title><![CDATA[WSL2+Docker+GPUによる機械学習環境構築]]></title><description><![CDATA[
 本記事の概要
本記事では、Windows 11環境において、WSL2、Docker、およびNVIDIA GPUを活用した機械学習環境の構築手順を解説します。具体的には次の5つのステップで環境を構築していきます:

NVIDIAドライバのインストール：GeForce RTX 4060 Laptop GPU用の最新のStudioドライバをインストール
Dockerのインストール：WSL2上のUbuntuにDockerをセットアップ
NVIDIA Container Toolkitのインストール：DockerコンテナでGPUを利用するための設定
Docker追加設定：自動起動の設定とsud...]]></description><link>https://zenn.dev/enlog/articles/d61f0c285c5c81</link><guid isPermaLink="true">https://zenn.dev/enlog/articles/d61f0c285c5c81</guid><pubDate>Fri, 13 Dec 2024 05:09:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---epX0Z1J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WSL2%252BDocker%252BGPU%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E6%25A9%259F%25E6%25A2%25B0%25E5%25AD%25A6%25E7%25BF%2592%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:en%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlMTU0Yjg4ODIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>en</dc:creator></item><item><title><![CDATA[VSCodeからWSL2+Docker環境に接続する手順]]></title><description><![CDATA[
 本記事の概要
本記事ではVSCodeからWSL2+Docker開発環境への接続方法を解説します。

 環境
本記事において前提としている環境を次に示します。

OS: Windows 11

バージョン: 23H2
64ビットオペレーティングシステム、x64ベースプロセッサ


Visual Studio Code: 1.96.0
WSL2: 2.3.26.0
Docker: 27.3.1
Docker Compose: v2.29.7


 VScodeからWSL2+Docker環境に接続することで得られる主要なメリット

環境の再現性と共有が可能（環境の差異によるトラブルを防止）...]]></description><link>https://zenn.dev/enlog/articles/3705a90b0f33e4</link><guid isPermaLink="true">https://zenn.dev/enlog/articles/3705a90b0f33e4</guid><pubDate>Fri, 13 Dec 2024 02:10:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kv6hF59K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%258B%25E3%2582%2589WSL2%252BDocker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AB%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:en%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlMTU0Yjg4ODIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>en</dc:creator></item><item><title><![CDATA[Docker で GitLab と mailpit を使う:Linux 使い（略）Advent Calendar 2024]]></title><description><![CDATA[
 はじめに
これは「Linux 使いになりたい人のための Advent Calendar 2024」の記事です。
筆者は、Web エンジニアを志望する人には、セルフホスト Git サービスを稼働させて利用することをオススメしています。もし Git を使ったことがないなら、Git を学ぶときに、セルフホスト Git サービスを稼働させることも視野に含めながら学習するのが効率的だと考えています。
!
この記事は、次の記事の続きです。



 Docker で GitLab と mailpit を使う
前回はセルフホスト Git サービスを使うにあたり、OpenSSH を使うことが多いといっ...]]></description><link>https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_10</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_10</guid><pubDate>Thu, 12 Dec 2024 10:26:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dx2097YW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25E3%2581%25A7%2520GitLab%2520%25E3%2581%25A8%2520mailpit%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%253ALinux%2520%25E4%25BD%25BF%25E3%2581%2584%25EF%25BC%2588%25E7%2595%25A5%25EF%25BC%2589Advent%2520Calendar%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[SNSでの情報収集は誘惑が多くて大変、それRSSでやってみませんか？]]></title><description><![CDATA[
 ゴール

X（旧Twitter）の投稿をRSSリーダーで閲覧可能にする（ローカル限定）

使用するアプリはInstagramなど他のSNSにも対応していますが、今回は扱いません。

 書いた経緯
私は普段RSSをメインに情報収集しているのですが、必要に応じてXの公式アカウントのポストも確認しています。
ですが、タイトルの通りSNSは誘惑が多く、意志の弱い私は気がつくと一般アカウントの投稿した関係ない漫画を読み漁っています。
ところで、皆さんはRSSを使っているでしょうか。
2013年にはGoogleリーダーがサービスを終了し、何となく過去の産物といったイメージがあるかもしれませんが、...]]></description><link>https://zenn.dev/lclco/articles/e9e32724e9b472</link><guid isPermaLink="true">https://zenn.dev/lclco/articles/e9e32724e9b472</guid><pubDate>Thu, 12 Dec 2024 05:01:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5l0L1fHR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SNS%25E3%2581%25A7%25E3%2581%25AE%25E6%2583%2585%25E5%25A0%25B1%25E5%258F%258E%25E9%259B%2586%25E3%2581%25AF%25E8%25AA%2598%25E6%2583%2591%25E3%2581%258C%25E5%25A4%259A%25E3%2581%258F%25E3%2581%25A6%25E5%25A4%25A7%25E5%25A4%2589%25E3%2580%2581%25E3%2581%259D%25E3%2582%258CRSS%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nishi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiYzlhY2Y4M2EuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LCL%2520Engineers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUZxZE9EQnBZanc3Uk5ZeFpkQm5iWXRxX0UyYkVIN1hNTkNzNEdrMWU3SkRRX0dlYz1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nishi</dc:creator></item><item><title><![CDATA[新米エンジニアがawesome-composeにあるcomposeファイルに改善点がないか考えてみる]]></title><description><![CDATA[こんにちは。Sun* でバックエンドエンジニアをやっているうえひろです。
普段は業務効率化システムのバッチ作成に取り組んでいますが、今日は「Docker」について少しお話ししたいと思います。
最近、「awesome-compose」リポジトリを見つけて、Composeファイルの改善点を探る挑戦を始めました。初心者ならではの気づきが皆さんのお役に立てれば嬉しいです。ぜひ最後までお読みください！
※今回はローカル環境向けの設定を前提に記事を書いてます。
この記事はSun* Advent Calendar 2024の12日目の記事です。

 awesome-composeとは？
awesome...]]></description><link>https://zenn.dev/sun_asterisk/articles/d094eb8637abc1</link><guid isPermaLink="true">https://zenn.dev/sun_asterisk/articles/d094eb8637abc1</guid><pubDate>Thu, 12 Dec 2024 03:36:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--38_rkhA---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E7%25B1%25B3%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258Cawesome-compose%25E3%2581%25AB%25E3%2581%2582%25E3%2582%258Bcompose%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E6%2594%25B9%25E5%2596%2584%25E7%2582%25B9%25E3%2581%258C%25E3%2581%25AA%25E3%2581%2584%25E3%2581%258B%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25A6%25E3%2582%25A8%25E3%2583%2580%2520%25E3%2583%2592%25E3%2583%25AD%25E3%2582%25A2%25E3%2582%25AD%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1YTU0ZjZiM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Sun%252A%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiNmRmODVkM2MuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ウエダ ヒロアキ</dc:creator></item><item><title><![CDATA[[Baker link. Dev]Lチカを試そうとしたら開発環境構築で詰まった話]]></title><description><![CDATA[Rustでの組み込み開発してみたいなーとか考えていたら、
丁度良い商品入荷したので買っちゃいました😘
https://www.switch-science.com/products/10044

 Baker link. Dev Rev. 1 とは

Raspberry Pi財団が独自に開発したARM Cortex M0+デュアルコアのRP2040マイコンをベースに、デバッガを搭載したRust言語学習用開発ボードです。Rev.1版では、外部マイコンデバックをサポートしたファームウェアが標準搭載されています。

Baker link. Dev Rev. 1 の前の型である「Baker li...]]></description><link>https://zenn.dev/collabostyle/articles/bf9fa0e604c33c</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/bf9fa0e604c33c</guid><pubDate>Wed, 11 Dec 2024 11:51:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZKjmoBTj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBaker%2520link.%2520Dev%255DL%25E3%2583%2581%25E3%2582%25AB%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%259D%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A7%25E8%25A9%25B0%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:miko%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2NTU1YTc5NjcuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miko</dc:creator></item><item><title><![CDATA[Dev Container の sshd フィーチャー:Linux 使い（略）Advent Calendar 2024]]></title><description><![CDATA[
 はじめに
これは「Linux 使いになりたい人のための Advent Calendar 2024」の記事です。
筆者は、Web エンジニアを志望する人には、セルフホスト Git サービスを稼働させて利用することをオススメしています。もし Git を使ったことがないなら、Git を学ぶときに、セルフホスト Git サービスを稼働させることも視野に含めながら学習するのが効率的だと考えています。
!
この記事は、次の記事の続きです。



 Dev Container の sshd フィーチャー
前回はセルフホスト Git サービスを使うにあたり、OpenSSH を使うことが多いといった説...]]></description><link>https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_09</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_09</guid><pubDate>Wed, 11 Dec 2024 11:09:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gXcfpv71--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dev%2520Container%2520%25E3%2581%25AE%2520sshd%2520%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25BC%253ALinux%2520%25E4%25BD%25BF%25E3%2581%2584%25EF%25BC%2588%25E7%2595%25A5%25EF%25BC%2589Advent%2520Calendar%25202024%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[Redisの基本と負荷テストやってみた]]></title><description><![CDATA[
 こんな人に読んで欲しい！

Redisって聞いたことあるけど、使ったことがない
RedisをDBのキャッシュとして使うと実際どのくらい早くなるの？


 3行でこの記事をまとめると

Redisの基本的な使い方を学びます
RedisでDBキャッシュをする方法を学びます
負荷テストをして、どのくらい高速化するかを試します

↓ こちらでコードを公開しています(docker compose upとするだけで試すことができます！)
https://github.com/zackerms/playground-redis

 自己紹介
zacker（ざっかー）といいます。
アプリ開発が大好き...]]></description><link>https://zenn.dev/dev_zacker/articles/6e866d6f4b8185</link><guid isPermaLink="true">https://zenn.dev/dev_zacker/articles/6e866d6f4b8185</guid><pubDate>Wed, 11 Dec 2024 02:15:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eWkJ-T1h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Redis%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%25A8%25E8%25B2%25A0%25E8%258D%25B7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zacker%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyYzIzN2U4ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zacker</dc:creator></item><item><title><![CDATA[VS Code の Remote - SSH 拡張機能:Linux 使い（略）Advent Calendar 2024]]></title><description><![CDATA[
 はじめに
これは「Linux 使いになりたい人のための Advent Calendar 2024」の記事です。
筆者は、Web エンジニアを志望する人には、セルフホスト Git サービスを稼働させて利用することをオススメしています。もし Git を使ったことがないなら、Git を学ぶときに、セルフホスト Git サービスを稼働させることも視野に含めながら学習するのが効率的だと考えています。
!
この記事は、次の記事の続きです。



 VS Code の Remote - SSH 拡張機能
前回はセルフホスト Git サービスを使うにあたり、OpenSSH を使うことが多いといった説...]]></description><link>https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_08</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_08</guid><pubDate>Tue, 10 Dec 2024 14:32:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lcu9qHzS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VS%2520Code%2520%25E3%2581%25AE%2520Remote%2520-%2520SSH%2520%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%253ALinux%2520%25E4%25BD%25BF%25E3%2581%2584%25EF%25BC%2588%25E7%2595%25A5%25EF%25BC%2589Advent%2520Calendar%25202024%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item></channel></rss>