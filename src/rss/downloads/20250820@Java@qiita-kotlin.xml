<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-20T16:17:38+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2069606</id>
    <published>2025-08-20T16:17:38+09:00</published>
    <updated>2025-08-20T16:20:19+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/f28982c71ccf07935ac8"/>
    <url>https://qiita.com/nozomi2025/items/f28982c71ccf07935ac8</url>
    <title>【デザインパターン】シングルトンパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
シングルトン（Singleton） は、あるクラスのインスタンスを アプリ全体で一つだけ に制限し、どこからでもアクセス可能にする設計パターンです。

解決する問題

設定やDB接続のように、複数生成すると不具合やリソース浪費になるケース
グローバル...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2069573</id>
    <published>2025-08-20T14:46:22+09:00</published>
    <updated>2025-08-20T14:46:22+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/daruma_256/items/231b777a497b0e4fade0"/>
    <url>https://qiita.com/daruma_256/items/231b777a497b0e4fade0</url>
    <title>【令和最新版】Spigotでプレイヤーの頭のテクスチャを直接指定する【Kotlin】</title>
    <content type="text">結論

【拡張関数】ItemStack.kt

import org.bukkit.Bukkit
import org.bukkit.Material
import org.bukkit.inventory.ItemStack
import org.bukkit.inve...</content>
    <author>
      <name>daruma_256</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2069326</id>
    <published>2025-08-19T22:02:50+09:00</published>
    <updated>2025-08-19T22:02:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/cozyk100/items/9e5765c7a69800c3ea50"/>
    <url>https://qiita.com/cozyk100/items/9e5765c7a69800c3ea50</url>
    <title>OpenAPIでList型を使う場合の@Schemaの記載例</title>
    <content type="text">忘備録的に・・・
OpenAPIを使ってRESTでやり取りする場合、PUT、POSTはRequestBodyにJSONで送ってくるのでListで何重にもネストさせることができます。
Listを使った場合、RequestBody の data classの@Schemaアノテ...</content>
    <author>
      <name>cozyk100</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2067579</id>
    <published>2025-08-19T17:02:16+09:00</published>
    <updated>2025-08-19T17:02:16+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Nagata-Hiroshi/items/b55825beee63a12da430"/>
    <url>https://qiita.com/Nagata-Hiroshi/items/b55825beee63a12da430</url>
    <title>処理の経過時間の計測にはTimeSource.Monotonicを使おう！</title>
    <content type="text">System.currentTimeMillis()使うの止めよう
Java/Kotlinにおいて、処理の経過時間を計測する場面では、従来から System.currentTimeMillis() がよく利用されてきました。
fun main() {
    // 処理開...</content>
    <author>
      <name>Nagata-Hiroshi</name>
    </author>
  </entry>
</feed>
