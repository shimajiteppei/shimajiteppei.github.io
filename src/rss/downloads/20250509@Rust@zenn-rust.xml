<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 09 May 2025 10:56:06 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rust+Github Actionsで、ReleaseまでカバーしたCICDを構築する]]></title><description><![CDATA[
 はじめに
質の高いコードを書くためには、効果的なCI/CDの仕組みが必要です。そして、インターネットでGitHub Actionsを利用したワークフローを調べてみると多くはdeprecatedとなったツールを使用していました。そこで、改めてワークフローを再構築したのでそのやり方を共有します。

 できること

GitHub Actionsによる自動化

プルリクエスト時に複数OSでのテスト、lint、フォーマットチェックを実行

すべてのチェックが成功した場合のみマージを許可




OSごとのテストとビルドの自動化

OSごとにテストを行うため、OS依存の問題を事前にテストできる
...]]></description><link>https://zenn.dev/walkmana_25/articles/rust-github-actions-cicd</link><guid isPermaLink="true">https://zenn.dev/walkmana_25/articles/rust-github-actions-cicd</guid><pubDate>Fri, 09 May 2025 02:49:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IG6xzTUP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%252BGithub%2520Actions%25E3%2581%25A7%25E3%2580%2581Release%25E3%2581%25BE%25E3%2581%25A7%25E3%2582%25AB%25E3%2583%2590%25E3%2583%25BC%25E3%2581%2597%25E3%2581%259FCICD%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Lapis%252FWalkmana-25%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WWZuenRwVm81ZmxRVlpTaTUxT045eG1iNHEzSUtVc2FhYmVadnczZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Lapis/Walkmana-25</dc:creator></item><item><title><![CDATA[0019-rc]]></title><description><![CDATA[use std::rc::Rc;

#[derive(Debug)]
#[allow(dead_code)]
enum List {
    Cons(i32, Rc&lt;List&gt;),
    Nil
}
use List::{Cons, Nil};

// https://doc.rust-jp.rs/book-ja/ch15-04-rc.html
// 参照させる変数をRc::newする
// Rcでは変数はmoveを避け、参照される。参照カウントはRc::cloneごとに増える
fn main() {
    let a = Rc::new(Cons(5, Rc::new...]]></description><link>https://zenn.dev/yukinekonyan/articles/f36d4a6f3e58bd</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/f36d4a6f3e58bd</guid><pubDate>Fri, 09 May 2025 02:45:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q_NgLun6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0019-rc%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[[Bevy] たくさんのコンポーネントをまとめる]]></title><description><![CDATA[Bevyでたくさんのコンポーネントを定義して、いろいろなところにコンポーネントがバラけてしまったので、一箇所にまとめるためにextra.rsというモジュールにコンポーネントを切り分けました。
main.rsでモジュールを登録しておけば、あとはhoge.rsでuseを使ってextra.rsで定義したコンポーネントを使えます。
変数でも定数でも構造体でもenumでも同じように切り分けられます。

extra.rs
#[derive(Component)]
pub struct Hoge1;

#[derive(Component)]
pub struct Hoge2;

#[derive(C...]]></description><link>https://zenn.dev/omini/articles/41d0d6ffe39f62</link><guid isPermaLink="true">https://zenn.dev/omini/articles/41d0d6ffe39f62</guid><pubDate>Thu, 08 May 2025 20:58:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rxR54zHb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520%25E3%2581%259F%25E3%2581%258F%25E3%2581%2595%25E3%2582%2593%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[vite-plugin-singlefileでwasmを単一HTMLに埋め込む]]></title><description><![CDATA[備忘録メモ
どうしてもネットから隔離されたローカル環境の某RADソフトウェアでwasmを動作させたかったため、単一HTMLにRustで作ったwasmを埋め込めるか試してみました。
単一HTMLを某RADソフトウェア内に埋め込んでwasmがWebビューで動作することを確認しました。

 Viteで新規プロジェクト
今回はViteで新規プロジェクトを立ち上げてみます。
$ npm create vite@latest my-wasm-app -- --template vanilla-ts

$ cd my-wasm-app
$ npm install
publicディレクトリは使わないので...]]></description><link>https://zenn.dev/craneduck/articles/5068ca21322398</link><guid isPermaLink="true">https://zenn.dev/craneduck/articles/5068ca21322398</guid><pubDate>Thu, 08 May 2025 13:49:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dc-mwy-C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:vite-plugin-singlefile%25E3%2581%25A7wasm%25E3%2582%2592%25E5%258D%2598%25E4%25B8%2580HTML%25E3%2581%25AB%25E5%259F%258B%25E3%2582%2581%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%2583%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5NDVkNWY1NzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クレーンダック</dc:creator></item><item><title><![CDATA[医療現場のデジタル課題 - エンジニアが知るべき医療システムの実態]]></title><description><![CDATA[
 はじめに
現代のソフトウェア開発において、エンジニアは常に最新のアーキテクチャやパターンを追求します。
　　マイクロサービス
　　サーバーレス
　　イベント駆動設計...
次々と現れる新しい概念を学び、取り入れていく文化がエンジニアリングの世界には存在します。
しかし、医療現場に足を踏み入れると、そこには全く異なるデジタル風景が広がっています。
2025年現在もなお、多くの医療機関では10年以上前の技術スタックでシステムが構築され、運用されています。
この状況は単なる「レガシー問題」ではなく、患者ケアの質や医療安全に直結する重大な課題です。
本記事では、エンジニアの視点から医療現場の...]]></description><link>https://zenn.dev/kazuma0606/articles/dfa0912ab1ec03</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/dfa0912ab1ec03</guid><pubDate>Thu, 08 May 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lcQOxwZY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258C%25BB%25E7%2599%2582%25E7%258F%25BE%25E5%25A0%25B4%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25B8%25E3%2582%25BF%25E3%2583%25AB%25E8%25AA%25B2%25E9%25A1%258C%2520-%2520%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E7%259F%25A5%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258D%25E5%258C%25BB%25E7%2599%2582%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AE%25E5%25AE%259F%25E6%2585%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwMWM1OTYyYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[「エンジニアのための医療DX入門」]]></title><description><![CDATA[
 シリーズ概要
最新のプログラミング言語（Rust/Go）と現代的アーキテクチャを活用し、医療現場の具体的課題を解決する実践的なアプローチを解説するシリーズ。単なる技術解説ではなく、医療現場の実態とエンジニアリングの接点を探る。

 対象読者

医療ドメインに興味を持つエンジニア
システム設計・アーキテクチャに関心のあるギーク層
セキュリティや分散システムに興味を持つ開発者


 シリーズ構成案

 第1部: 医療DXの現状と課題（3記事）
#1: 医療現場のデジタル課題 - エンジニアが知るべき医療システムの実態

医療現場とITのギャップ（シャドーIT問題など）
レガシーシステムが...]]></description><link>https://zenn.dev/kazuma0606/articles/a80d74e4a9ede3</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/a80d74e4a9ede3</guid><pubDate>Thu, 08 May 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3DiFwR4t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E5%258C%25BB%25E7%2599%2582DX%25E5%2585%25A5%25E9%2596%2580%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwMWM1OTYyYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[医療現場の通信インフラ - モバイル医療機器の接続性問題]]></title><description><![CDATA[
 はじめに
前回の記事「医療データセキュリティの真実」では、
https://zenn.dev/kazuma0606/articles/0664ea988f48f1
オンプレミス環境の誤った安全神話とゼロトラストアーキテクチャの必要性について議論しました。
今回は、医療DXの現場で日々発生している具体的な問題、特にモバイル医療機器の通信接続性に焦点を当てます。
ポータブルX線装置、超音波診断装置、患者モニターなどの移動型医療機器は、現代の医療現場において不可欠な存在です。
しかし、これらの機器が直面している通信の課題は、患者ケアの質に直接影響を与えるだけでなく、医療従事者の業務効率を著...]]></description><link>https://zenn.dev/kazuma0606/articles/f38646f148484a</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/f38646f148484a</guid><pubDate>Thu, 08 May 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oAE7BgyI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258C%25BB%25E7%2599%2582%25E7%258F%25BE%25E5%25A0%25B4%25E3%2581%25AE%25E9%2580%259A%25E4%25BF%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25A9%2520-%2520%25E3%2583%25A2%25E3%2583%2590%25E3%2582%25A4%25E3%2583%25AB%25E5%258C%25BB%25E7%2599%2582%25E6%25A9%259F%25E5%2599%25A8%25E3%2581%25AE%25E6%258E%25A5%25E7%25B6%259A%25E6%2580%25A7%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwMWM1OTYyYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[医療データセキュリティの真実 - オンプレミスからゼロトラストへ]]></title><description><![CDATA[医療データセキュリティの真実 - オンプレミスからゼロトラストへ

 はじめに
前回の記事「医療現場のデジタル課題」では、
https://zenn.dev/kazuma0606/articles/dfa0912ab1ec03
医療機関におけるシャドーIT、認証の問題、データアクセスの非効率性など、現場が直面している課題を概観しました。
今回は、これらの問題の核心である「医療データセキュリティ」に焦点を当て、特に広く信じられている「オンプレミスなら安全」という神話を検証していきます。
2025年現在も、多くの医療機関がクラウド移行に慎重な姿勢を示している一方で、院内システムのセキュリティ...]]></description><link>https://zenn.dev/kazuma0606/articles/0664ea988f48f1</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/0664ea988f48f1</guid><pubDate>Thu, 08 May 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---LtEY8R4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258C%25BB%25E7%2599%2582%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25AE%25E7%259C%259F%25E5%25AE%259F%2520-%2520%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%259F%25E3%2582%25B9%25E3%2581%258B%25E3%2582%2589%25E3%2582%25BC%25E3%2583%25AD%25E3%2583%2588%25E3%2583%25A9%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwMWM1OTYyYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[なぜNetflixやAppleはRustとPostgreSQL、Icebergを使うのか？注目のデータスタックを解説]]></title><description><![CDATA[
「現代のデータインフラ構築には構造的な変化が起きています。」

LinkedIn、Apple、Netflix、Tencentなど、最先端のテック企業が選ぶデータ技術には、ある共通点があります。それは、リアルタイムかつ拡張性のあるパイプラインを実現するために、Rust、PostgreSQL、Amazon S3、Apache Iceberg を基盤として採用しているということです。
本記事では、これらの技術がなぜ注目されているのか、そしてRisingWaveがそれらをどのように統合しているのかを解説します。

 🚀 Rust：パフォーマンスと安全性を両立する言語
Rustは、システムプログ...]]></description><link>https://zenn.dev/rwcolinpeng/articles/98c851082be726</link><guid isPermaLink="true">https://zenn.dev/rwcolinpeng/articles/98c851082be726</guid><pubDate>Thu, 08 May 2025 07:35:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Eyg2TTOM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2581%259CNetflix%25E3%2582%2584Apple%25E3%2581%25AFRust%25E3%2581%25A8PostgreSQL%25E3%2580%2581Iceberg%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%25E6%25B3%25A8%25E7%259B%25AE%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:RisingWave%2520Labs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZmFjMDNiZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>RisingWave Labs</dc:creator></item><item><title><![CDATA[Rustで時間の関わるコードを簡単にテストする]]></title><description><![CDATA[ちゃんとやる場合はchrono::TimeZoneを実装すると思うが手間なので、自分の書く範囲であれば次のようにnow() -&gt; chrono::DateTime&lt;chrono::Utc&gt;を持つ別物のmock_chrono::Utcを置くのが良さそう。
https://stackoverflow.com/a/76747577/4593717
時分秒を指定したりしてセットできると便利だろう。
#[cfg(test)]
mod mock_chrono {
    use chrono::{DateTime, NaiveDate};
    use std::cell::Ce...]]></description><link>https://zenn.dev/kinon/articles/f112f460748223</link><guid isPermaLink="true">https://zenn.dev/kinon/articles/f112f460748223</guid><pubDate>Wed, 07 May 2025 07:58:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yd8K-8PY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E6%2599%2582%25E9%2596%2593%25E3%2581%25AE%25E9%2596%25A2%25E3%2582%258F%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2590%2582%25E4%25B9%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZjVmM2M5OTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>㐂乃</dc:creator></item><item><title><![CDATA[0018-seek-cursor]]></title><description><![CDATA[use std::fs::File;
use std::io::{Read, Seek};
use std::io::SeekFrom;
fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let mut f = File::open("example.txt")?;
    // 最後まで読む
    let mut buffer = Vec::new();
    f.read_to_end(&amp;mut buffer)?;

    // 100 bytes戻る
    // Curr...]]></description><link>https://zenn.dev/yukinekonyan/articles/2724be9e2f9ac7</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/2724be9e2f9ac7</guid><pubDate>Wed, 07 May 2025 04:07:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PuFc0ta1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0018-seek-cursor%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0017-from-trait]]></title><description><![CDATA[use std::convert::From;

#[derive(Debug)]
#[allow(dead_code)]
struct NameNumber {
    name: String,
    number: i32,
}

impl From&lt;(String, i32)&gt; for NameNumber {
    fn from(tuple: (String, i32)) -&gt; Self {
        NameNumber {
            name: tuple.0,
            number: tuple.1,
     ...]]></description><link>https://zenn.dev/yukinekonyan/articles/4c83d26e1c9f98</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/4c83d26e1c9f98</guid><pubDate>Wed, 07 May 2025 03:51:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oB2m9WpG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0017-from-trait%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Zennのスクラップをマークダウンに変換するCLIツールを書いた]]></title><description><![CDATA[RustでZennの「スクラップ」機能でまとめたメモを一括でMarkdownファイルに変換するCLIツールを書いたので備忘録がてら使い方を説明します。
https://github.com/ackkerman/zenn-scrap-to-md

 1. 機能


スクラップの取得：ZennのAPI（/api/scraps/&lt;slug&gt;/blob.json）からJSONを取得

画像記法の変換：Zenn特有の ![](URL =300x) を &lt;img&gt; タグに自動変換

認証対応：Cookieを渡してログインが必要なスクラップも取得可能

オプション：コメント見出...]]></description><link>https://zenn.dev/moxak/articles/4f695c08676d0a</link><guid isPermaLink="true">https://zenn.dev/moxak/articles/4f695c08676d0a</guid><pubDate>Wed, 07 May 2025 03:31:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ui0j1i1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ackkerman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NDY2ZTM5NTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ackkerman</dc:creator></item><item><title><![CDATA[0016-binary-file-read]]></title><description><![CDATA[use std::io::Read;
use std::fs::File;
fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let path = "test.png";
    let mut f = File::open(path)?;
    let mut buf = [0; 10];
    let n = f.read(&amp;mut buf)?;
    println!("{:?}",  &amp;buf[..n]);
    let n = f.read(&amp;mut ...]]></description><link>https://zenn.dev/yukinekonyan/articles/cde4cead79a36e</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/cde4cead79a36e</guid><pubDate>Wed, 07 May 2025 02:18:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GdR9yr1O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:0016-binary-file-read%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Rustでユーザー入力を受けつつログも流す]]></title><description><![CDATA[イベント駆動で色々するものを書いていたが、金の掛かるAPI（OpenAI API）だけ確認を入れたかったので。

 やりたいこと

マルチスレッドのプログラムで一部にステップ実行を入れたい
普通に標準入出力だとプロンプト（入力を促すcontinue? [y/n] みたいなの）が流されてしまって嫌
プロンプトは固定表示してログは別で流したい


 コード例
tui-loggerが丁度良いので、大袈裟な気もするがratatuiでTUIを作る。
[dependencies]
tokio = { version = "1.45.0", features = ["full"] }
color-ey...]]></description><link>https://zenn.dev/kinon/articles/888c40d104197f</link><guid isPermaLink="true">https://zenn.dev/kinon/articles/888c40d104197f</guid><pubDate>Tue, 06 May 2025 15:18:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XzGpPaWe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E3%2581%25A4%25E3%2581%25A4%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2582%25E6%25B5%2581%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2590%2582%25E4%25B9%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZjVmM2M5OTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>㐂乃</dc:creator></item><item><title><![CDATA[Rustで自作MCPサーバー]]></title><description><![CDATA[
 はじめに
みなさんそろそろ「こんなものをMCPサーバー化してみました！」という記事は見飽きてきた頃だと思います。
この記事ではSpecificationを読み解き、公式SDKを使わずにMCPサーバーを実装します。なお、MCPの本質でない部分ではサードパーティークレートを使用します。使用したクレートは以下の通りです。

 Cargo.toml
async-trait = "0.1.88"
schemars = "0.8.22"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
se...]]></description><link>https://zenn.dev/taro137/articles/0b21b2b6757951</link><guid isPermaLink="true">https://zenn.dev/taro137/articles/0b21b2b6757951</guid><pubDate>Tue, 06 May 2025 14:36:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FbxoEdY1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259CMCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlOGE5ZGM1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[[Rust]Google OpenIDConnectライブラリの作成日記]]></title><description><![CDATA[
 概要
この記事は，作成したGoogleのOpenIDConnect(OIDC)認証のライブラリ紹介と学びや問題点を紹介させて頂く内容になります.

 Crates(pacakge)
言語はRustを使用しており，OSSとしてgithubとcrates.ioに公開しています.
https://github.com/nakaryo716/tiny_google_oidc

 作成の動機とコンセプト
きっかけは，自身のアプリケーション開発における認証の実装になります.
当初、自分自身で認証を実装していましたが，昨今、「認証の実装は自身で行わないほうがよい」「そもそもパスワードを必要とさせな...]]></description><link>https://zenn.dev/ryo_nakaya/articles/1aca20a2a63c97</link><guid isPermaLink="true">https://zenn.dev/ryo_nakaya/articles/1aca20a2a63c97</guid><pubDate>Tue, 06 May 2025 14:26:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Bh2MQnNV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255DGoogle%2520OpenIDConnect%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%25E6%2597%25A5%25E8%25A8%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakaryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MDVhNjgyY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakaryo</dc:creator></item><item><title><![CDATA[Rust で書いた競プロのコードを解説付きで rustdoc で公開する]]></title><description><![CDATA[
 何があったのか
競技プログラミング, 縮めて競プロ.
与えられた問題を解くために, プログラムを書く競技です.
以前から「競プロのコード解説とかどこかでやりたい！」という気持ちがあり, はてなブログなどで記事をすごく雑に書いていた時期もありました. ですがなかなか続かないのが現実でした.

GitHub に投げたソースコードとその解説のブログを同期するのが単純に手間
ブログサイトに投稿するまでの道のりが長い


 実現したいこと
「競プロをやった後, メモとコードを GitHub に投げたらほぼコストなしで解説公開サイトが錬成される」が理想です.
なので次のような点を重視して考えます...]]></description><link>https://zenn.dev/lru/articles/code_solvers_site</link><guid isPermaLink="true">https://zenn.dev/lru/articles/code_solvers_site</guid><pubDate>Tue, 06 May 2025 09:09:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vs-N_Ulw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%25E7%25AB%25B6%25E3%2583%2597%25E3%2583%25AD%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%25E4%25BB%2598%25E3%2581%258D%25E3%2581%25A7%2520rustdoc%2520%25E3%2581%25A7%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Lru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiMTUzMjFlYjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Lru</dc:creator></item><item><title><![CDATA[RustでLR(0)パーサジェネレータ]]></title><description><![CDATA[!
この記事はRustの文法やオートマトン､構文解析に関する解説は特に行いません｡
構文解析の基本がわかっている方向けになります｡
なので初心者向けの記事としての体裁は整えていないので､知りたいかたはLLMなどに適宜聞いてみてください(解答の正誤は保証しません)｡


 Repo
https://github.com/raiga0310/LR_parser

 実行環境
以下の環境で動作を確認済み
https://github.com/raiga0310/LR_parser/blob/bfa31a66ec16a66a46b15ae6ac3dc0b4eff020d2/Cargo.toml
...]]></description><link>https://zenn.dev/ahoxa1rx/articles/88e6ff1014cba6</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/88e6ff1014cba6</guid><pubDate>Mon, 05 May 2025 22:41:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--plQzsF98--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7LR%25280%2529%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[Rust で RP2350 からロータリーエンコーダーを使うために Embassy の PIO 関連を調べる]]></title><description><![CDATA[Embassy は、組み込み Rust で非同期処理を扱うためのフレームワークです。似たようなフレームワークとして RTIC がありますが、Embassy が RTIC と違うのは HAL（ハードウェア抽象化レイヤー）まで提供しているという点です。といってもすべてを独自実装しているわけではないですが、いろいろなものがラップされていてフレームワークと親和性があるかたちになっています。
たとえば、RP2350 関連は rp-rs が提供する crate を使っていて、PIO は以下の pio という名前の crate を使っています。
https://github.com/rp-rs/pio...]]></description><link>https://zenn.dev/yutannihilation/articles/365eb6e3648f13</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/365eb6e3648f13</guid><pubDate>Mon, 05 May 2025 13:15:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tR60M7lO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520RP2350%2520%25E3%2581%258B%25E3%2582%2589%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%2520Embassy%2520%25E3%2581%25AE%2520PIO%2520%25E9%2596%25A2%25E9%2580%25A3%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item></channel></rss>