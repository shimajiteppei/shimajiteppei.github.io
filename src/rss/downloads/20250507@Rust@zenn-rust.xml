<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 07 May 2025 04:43:15 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[0018-seek-cursor]]></title><description><![CDATA[use std::fs::File;
use std::io::{Read, Seek};
use std::io::SeekFrom;
fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let mut f = File::open("example.txt")?;
    // 最後まで読む
    let mut buffer = Vec::new();
    f.read_to_end(&amp;mut buffer)?;

    // 100 bytes戻る
    // Curr...]]></description><link>https://zenn.dev/yukinekonyan/articles/2724be9e2f9ac7</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/2724be9e2f9ac7</guid><pubDate>Wed, 07 May 2025 04:07:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PuFc0ta1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0018-seek-cursor%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0017-from-trait]]></title><description><![CDATA[use std::convert::From;

#[derive(Debug)]
#[allow(dead_code)]
struct NameNumber {
    name: String,
    number: i32,
}

impl From&lt;(String, i32)&gt; for NameNumber {
    fn from(tuple: (String, i32)) -&gt; Self {
        NameNumber {
            name: tuple.0,
            number: tuple.1,
     ...]]></description><link>https://zenn.dev/yukinekonyan/articles/4c83d26e1c9f98</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/4c83d26e1c9f98</guid><pubDate>Wed, 07 May 2025 03:51:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oB2m9WpG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0017-from-trait%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Zennのスクラップをマークダウンに変換するCLIツールを書いた]]></title><description><![CDATA[RustでZennの「スクラップ」機能でまとめたメモを一括でMarkdownファイルに変換するCLIツールを書いたので備忘録がてら使い方を説明します。
https://github.com/ackkerman/zenn-scrap-to-md

 1. 機能


スクラップの取得：ZennのAPI（/api/scraps/&lt;slug&gt;/blob.json）からJSONを取得

画像記法の変換：Zenn特有の ![](URL =300x) を &lt;img&gt; タグに自動変換

認証対応：Cookieを渡してログインが必要なスクラップも取得可能

オプション：コメント見出...]]></description><link>https://zenn.dev/moxak/articles/4f695c08676d0a</link><guid isPermaLink="true">https://zenn.dev/moxak/articles/4f695c08676d0a</guid><pubDate>Wed, 07 May 2025 03:31:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ui0j1i1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ackkerman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NDY2ZTM5NTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ackkerman</dc:creator></item><item><title><![CDATA[0016-binary-file-read]]></title><description><![CDATA[use std::io::Read;
use std::fs::File;
fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let path = "test.png";
    let mut f = File::open(path)?;
    let mut buf = [0; 10];
    let n = f.read(&amp;mut buf)?;
    println!("{:?}",  &amp;buf[..n]);
    let n = f.read(&amp;mut ...]]></description><link>https://zenn.dev/yukinekonyan/articles/cde4cead79a36e</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/cde4cead79a36e</guid><pubDate>Wed, 07 May 2025 02:18:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GdR9yr1O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:0016-binary-file-read%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Rustでユーザー入力を受けつつログも流す]]></title><description><![CDATA[イベント駆動で色々するものを書いていたが、金の掛かるAPI（OpenAI API）だけ確認を入れたかったので。

 やりたいこと

マルチスレッドのプログラムで一部にステップ実行を入れたい
普通に標準入出力だとプロンプト（入力を促すcontinue? [y/n] みたいなの）が流されてしまって嫌
プロンプトは固定表示してログは別で流したい


 コード例
tui-loggerが丁度良いので、大袈裟な気もするがratatuiでTUIを作る。
[dependencies]
tokio = { version = "1.45.0", features = ["full"] }
color-ey...]]></description><link>https://zenn.dev/kinon/articles/888c40d104197f</link><guid isPermaLink="true">https://zenn.dev/kinon/articles/888c40d104197f</guid><pubDate>Tue, 06 May 2025 15:18:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XzGpPaWe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E5%258F%2597%25E3%2581%2591%25E3%2581%25A4%25E3%2581%25A4%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2582%25E6%25B5%2581%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2590%2582%25E4%25B9%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZjVmM2M5OTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>㐂乃</dc:creator></item><item><title><![CDATA[Rustで自作MCPサーバー]]></title><description><![CDATA[
 はじめに
みなさんそろそろ「こんなものをMCPサーバー化してみました！」という記事は見飽きてきた頃だと思います。
この記事ではSpecificationを読み解き、公式SDKを使わずにMCPサーバーを実装します。なお、MCPの本質でない部分ではサードパーティークレートを使用します。使用したクレートは以下の通りです。

 Cargo.toml
async-trait = "0.1.88"
schemars = "0.8.22"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
se...]]></description><link>https://zenn.dev/taro137/articles/0b21b2b6757951</link><guid isPermaLink="true">https://zenn.dev/taro137/articles/0b21b2b6757951</guid><pubDate>Tue, 06 May 2025 14:36:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FbxoEdY1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259CMCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlOGE5ZGM1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[[Rust]Google OpenIDConnectライブラリの作成日記]]></title><description><![CDATA[
 概要
この記事は，作成したGoogleのOpenIDConnect(OIDC)認証のライブラリ紹介と学びや問題点を紹介させて頂く内容になります.

 Crates(pacakge)
言語はRustを使用しており，OSSとしてgithubとcrates.ioに公開しています.
https://github.com/nakaryo716/tiny_google_oidc

 作成の動機とコンセプト
きっかけは，自身のアプリケーション開発における認証の実装になります.
当初、自分自身で認証を実装していましたが，昨今、「認証の実装は自身で行わないほうがよい」「そもそもパスワードを必要とさせな...]]></description><link>https://zenn.dev/ryo_nakaya/articles/1aca20a2a63c97</link><guid isPermaLink="true">https://zenn.dev/ryo_nakaya/articles/1aca20a2a63c97</guid><pubDate>Tue, 06 May 2025 14:26:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Bh2MQnNV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255DGoogle%2520OpenIDConnect%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%25E6%2597%25A5%25E8%25A8%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakaryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MDVhNjgyY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakaryo</dc:creator></item><item><title><![CDATA[Rust で書いた競プロのコードを解説付きで rustdoc で公開する]]></title><description><![CDATA[
 何があったのか
競技プログラミング, 縮めて競プロ.
与えられた問題を解くために, プログラムを書く競技です.
以前から「競プロのコード解説とかどこかでやりたい！」という気持ちがあり, はてなブログなどで記事をすごく雑に書いていた時期もありました. ですがなかなか続かないのが現実でした.

GitHub に投げたソースコードとその解説のブログを同期するのが単純に手間
ブログサイトに投稿するまでの道のりが長い


 実現したいこと
「競プロをやった後, メモとコードを GitHub に投げたらほぼコストなしで解説公開サイトが錬成される」が理想です.
なので次のような点を重視して考えます...]]></description><link>https://zenn.dev/lru/articles/code_solvers_site</link><guid isPermaLink="true">https://zenn.dev/lru/articles/code_solvers_site</guid><pubDate>Tue, 06 May 2025 09:09:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vs-N_Ulw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%25E7%25AB%25B6%25E3%2583%2597%25E3%2583%25AD%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%25E4%25BB%2598%25E3%2581%258D%25E3%2581%25A7%2520rustdoc%2520%25E3%2581%25A7%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Lru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiMTUzMjFlYjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Lru</dc:creator></item><item><title><![CDATA[RustでLR(0)パーサジェネレータ]]></title><description><![CDATA[!
この記事はRustの文法やオートマトン､構文解析に関する解説は特に行いません｡
構文解析の基本がわかっている方向けになります｡
なので初心者向けの記事としての体裁は整えていないので､知りたいかたはLLMなどに適宜聞いてみてください(解答の正誤は保証しません)｡


 Repo
https://github.com/raiga0310/LR_parser

 実行環境
以下の環境で動作を確認済み
https://github.com/raiga0310/LR_parser/blob/bfa31a66ec16a66a46b15ae6ac3dc0b4eff020d2/Cargo.toml
...]]></description><link>https://zenn.dev/ahoxa1rx/articles/88e6ff1014cba6</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/88e6ff1014cba6</guid><pubDate>Mon, 05 May 2025 22:41:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--plQzsF98--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7LR%25280%2529%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[Rust で RP2350 からロータリーエンコーダーを使うために Embassy の PIO 関連を調べる]]></title><description><![CDATA[Embassy は、組み込み Rust で非同期処理を扱うためのフレームワークです。似たようなフレームワークとして RTIC がありますが、Embassy が RTIC と違うのは HAL（ハードウェア抽象化レイヤー）まで提供しているという点です。といってもすべてを独自実装しているわけではないですが、いろいろなものがラップされていてフレームワークと親和性があるかたちになっています。
たとえば、RP2350 関連は rp-rs が提供する crate を使っていて、PIO は以下の pio という名前の crate を使っています。
https://github.com/rp-rs/pio...]]></description><link>https://zenn.dev/yutannihilation/articles/365eb6e3648f13</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/365eb6e3648f13</guid><pubDate>Mon, 05 May 2025 13:15:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tR60M7lO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520RP2350%2520%25E3%2581%258B%25E3%2582%2589%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%2520Embassy%2520%25E3%2581%25AE%2520PIO%2520%25E9%2596%25A2%25E9%2580%25A3%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[ABC404:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 404のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc404/tasks/abc404_a
解説
この問題は、英小文字 a から z のうち、文字列 S に含まれていない文字を1つ見つけて出力する問題です。
文字列 S に含まれていない文字を以下1~3の手順で見つけます。

英小文字 a から z の26種類の各文字について、それが含まれているかどうかを記録するための bool 配列を用意します。
入力文字列 S を1文字ずつ確認し、その文字に対応する...]]></description><link>https://zenn.dev/nakst_hide/articles/f56054d066a2aa</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/f56054d066a2aa</guid><pubDate>Mon, 05 May 2025 03:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yoDtr0BW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC404%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rust on WebAssemblyでマルチスレッド用のMutexを使う]]></title><description><![CDATA[
 偽物のMutex
Rust + WASM (wasm32-unknown-unknown等)でstd::sync::Mutexを使うと、表面上コンパイルは通るがその中身はシングルスレッド専用のものとなってしまう。
具体的には、Mutexの二重ロックを試みると単純にpanicするようになっている。(実装) なぜこうなっているのかといえば、そもそもWebAssemblyは基本シングルスレッドで動くものだからで、マルチスレッドを想定する必要もないからということだと思われる。
一方、最近のWASMランタイムではshared memoryがサポートされてきており、これとWebWorker等を組...]]></description><link>https://zenn.dev/grainrigi/articles/b7c2320ef13c71</link><guid isPermaLink="true">https://zenn.dev/grainrigi/articles/b7c2320ef13c71</guid><pubDate>Sun, 04 May 2025 14:52:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F51x_-sQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520on%2520WebAssembly%25E3%2581%25A7%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E7%2594%25A8%25E3%2581%25AEMutex%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:grainrigi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeFhjT3BsTDdwd3lZcHNKRUl0VUx0UDBoRUpDYnZNQWcwQXVweVI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>grainrigi</dc:creator></item><item><title><![CDATA[Rust & Wasm から Gemini APIを使う]]></title><description><![CDATA[
 はじめに
前回作ったWebAssemblyのサンプルを使って、GeminiAPIを使ったミニゲームを作成してみました。GeminiとのHTTP非同期通信を、これまでと同じく、 ブラウザーが提供している "XmlHttpRequest"APIを使って、JS側で実現しています。

 対象のバージョン

Rust 2024 Edition
rustc 1.83.0
cargo 1.80.1
rustup 1.27.1
pnpm 9.12.3


 Rust&amp;Wasm サンプル
Play in browser

※文中の[_______]に当てはまる英語で入力してください。Gemin...]]></description><link>https://zenn.dev/yurioka/articles/cd108891e9a49b</link><guid isPermaLink="true">https://zenn.dev/yurioka/articles/cd108891e9a49b</guid><pubDate>Sun, 04 May 2025 13:21:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--otwG0iJr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%2526%2520Wasm%2520%25E3%2581%258B%25E3%2582%2589%2520Gemini%2520API%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myurioka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YTE2NGMzMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myurioka</dc:creator></item><item><title><![CDATA[main.rsとlib.rsは同居できる]]></title><description><![CDATA[
 main.rsとlib.rsは同居できる
タイトル通り、同一パッケージ内にsrc/main.rsとsrc/lib.rsの両方を入れることができます。
排他ではありません。
例えば、以下のようにsrc/a.rs、src/lib.rs、Cargo.tomlを用意するとします。

src/a.rs
pub fn f() {
    println!("a!");
}


src/lib.rs
pub mod a;


Cargo.toml
[package]
name = "app"
# 以下略

この場合、src/main.rsでどう使えるようになるかというと

src/main.rs
...]]></description><link>https://zenn.dev/btanno/articles/69da78ffe5b271</link><guid isPermaLink="true">https://zenn.dev/btanno/articles/69da78ffe5b271</guid><pubDate>Sun, 04 May 2025 04:04:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GYKOmKRr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:main.rs%25E3%2581%25A8lib.rs%25E3%2581%25AF%25E5%2590%258C%25E5%25B1%2585%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:btanno%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGF0cEhiNko5V3FxLUE5VDk2ck9IMHBRYlNDRFo5Y2RMeU5ndm5mRms1PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>btanno</dc:creator></item><item><title><![CDATA[rust-analyzerがうまく働かないときの対処法]]></title><description><![CDATA[VScodeを使っていてrust-analyzerがうまく働かない事象に遭遇したので、解決した際のメモ。
割と汎用性あると思ったので、記事化しています。

 事象
自分の環境で発生を確認した事象は以下の2つ。

ルートディレクトリ直下ではなく、深い階層の中で作ったCargoプロジェクトではrust-analyzerが効かない
Rustのバージョンを固定してコードを書いているが、rust-analyzer側がそのバージョンのサポートを打ち切ったため、LSPが効かない

さて、一つ一つ記載していく。

 ルートディレクトリ直下でない場所にCargoプロジェクトを作ったときにrust-anal...]]></description><link>https://zenn.dev/kip2/articles/pinning-rust-analyzer-version</link><guid isPermaLink="true">https://zenn.dev/kip2/articles/pinning-rust-analyzer-version</guid><pubDate>Sat, 03 May 2025 15:29:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bfueSHx1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust-analyzer%25E3%2581%258C%25E3%2581%2586%25E3%2581%25BE%25E3%2581%258F%25E5%2583%258D%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kip2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxMmVjMjRiMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kip2</dc:creator></item><item><title><![CDATA[Linuxカーネルへの Rust 導入の研究論文メモ]]></title><description><![CDATA[
 はじめに
北京郵電大学とUESTC研究者による論文「An Empirical Study of Rust-for-Linux」を読んだメモ。Linuxカーネルへの言語Rust導入（RFL）がどうなっているのか、実際のデータに基づいた分析が面白かった。

 Rustとカーネルの出会い
Linuxカーネルは30年以上の歴史を持ち、現代コンピューティングの基盤だ。しかしC言語で書かれているため、メモリ関連やコンカレンシーのバグが絶えない。Rustはこの問題を所有権メカニズムで解決できるかもしれない。



所有権ルール
説明




排他的所有権
メモリ位置は一度に1つの変数だけが所有でき...]]></description><link>https://zenn.dev/su8/articles/7291385a521b62</link><guid isPermaLink="true">https://zenn.dev/su8/articles/7291385a521b62</guid><pubDate>Fri, 02 May 2025 13:32:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9z2ddgKt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25AB%25E3%2581%25B8%25E3%2581%25AE%2520Rust%2520%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%25AE%25E7%25A0%2594%25E7%25A9%25B6%25E8%25AB%2596%25E6%2596%2587%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:su8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNHdDZWsxTUFjbzVXNlpLQUgtaGNiMGI1SDZrODRKdkd2ZGpoNDZQUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>su8</dc:creator></item><item><title><![CDATA[rustでビルド時にCargo.tomlからバージョン情報を取得する]]></title><description><![CDATA[
 env!で普通に取得できるらしい
pub const VERSION: &amp;str = env!("CARGO_PKG_VERSION");

fn main() {
    println!("version: {}", VERSION);
}
これでこうなる。
&gt; cargo run
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.07s
     Running `target/debug/play_ground`
version: 0.1.0
configとかの整合性とかで使え...]]></description><link>https://zenn.dev/uliboooo/articles/3bd360b1d73a9a</link><guid isPermaLink="true">https://zenn.dev/uliboooo/articles/3bd360b1d73a9a</guid><pubDate>Fri, 02 May 2025 10:27:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ljZoOpe2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25A7%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2599%2582%25E3%2581%25ABCargo.toml%25E3%2581%258B%25E3%2582%2589%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2582%258A%25E3%2581%25BC%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MTFjYWRhM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うりぼう</dc:creator></item><item><title><![CDATA[Rust製のPythonライブラリ一覧]]></title><description><![CDATA[
 はじめに
Rustは、高いパフォーマンスと安全性、並列性を追求したシステムプログラミング言語であり、内部処理をRustで実装したPythonライブラリが増加している。
uvやruff、pydantic、polarsなどのライブラリは、Rustの性能を活かしており多くの開発者に支持されている。
しかし各ライブラリの概要やサンプルコードはあっても、Rust製のPythonライブラリを網羅的にまとめた記事は見当たらない。そこで、一覧にまとめてみた。

 Rust製のPythonライブラリ一覧

 パッケージ管理、コード解析、型定義



ライブラリ
概要
2025年5月時点バージョン
主な...]]></description><link>https://zenn.dev/nwth/articles/202505-python-libraries-by-rust</link><guid isPermaLink="true">https://zenn.dev/nwth/articles/202505-python-libraries-by-rust</guid><pubDate>Fri, 02 May 2025 09:43:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0929Ssng--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AEPython%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E4%25B8%2580%25E8%25A6%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2581%258F%25E3%2581%25A6%25E3%2581%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzZmIwNWNkYmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てくてく</dc:creator></item><item><title><![CDATA[Rust (cargo-ndk) でビルドした Android 向け Unity プラグインを 16KB アライメントに対応する]]></title><description><![CDATA[Rust (cargo-ndk) でビルドした Android 向けプラグインを含む Unity プロジェクトを Unity 2023.3.56f1 または 6000.0.38f1 以降でビルドすると以下のような警告が表示される場合があります。ここではこの警告に対応するための手順を説明します。
Plugin 'Packages/com.example.myplugin/Plugins/MyPlugin.so' is not 16KB-aligned. This may cause issues on ARM64 devices running Android 15+.
More info...]]></description><link>https://zenn.dev/mayuki/articles/7eb1e503ee10e6</link><guid isPermaLink="true">https://zenn.dev/mayuki/articles/7eb1e503ee10e6</guid><pubDate>Fri, 02 May 2025 07:14:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M19MuyZi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%2528cargo-ndk%2529%2520%25E3%2581%25A7%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%2597%25E3%2581%259F%2520Android%2520%25E5%2590%2591%25E3%2581%2591%2520Unity%2520%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%252016KB%2520%25E3%2582%25A2%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25A1...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mayuki%2520Sawatari%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqYVJGX25mOWVjSDNCczhaeWtZWDNZN1JVV2tCQjd6dE5yVlpCPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mayuki Sawatari</dc:creator></item><item><title><![CDATA[0015-read_string]]></title><description><![CDATA[use std::fs::read_to_string;

fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {
    let path = "example.txt";
    let str = read_to_string(path)?;
    println!("{}", str);

    let path = "num.txt";
    // 改行文字もあるよね
    let num:i32 = read_to_string(path)?.trim().parse()?;
    p...]]></description><link>https://zenn.dev/yukinekonyan/articles/2a215872051a23</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/2a215872051a23</guid><pubDate>Fri, 02 May 2025 02:46:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--alTpcgEe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0015-read_string%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item></channel></rss>