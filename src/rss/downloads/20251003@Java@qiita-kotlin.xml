<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-03T18:38:50+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088229</id>
    <published>2025-10-03T18:38:50+09:00</published>
    <updated>2025-10-03T18:38:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/ef7c45aae57e16ddb3c5"/>
    <url>https://qiita.com/majoLibrary/items/ef7c45aae57e16ddb3c5</url>
    <title>Gradle dependencyInsight で依存競合を特定して Duplicate class を直した話</title>
    <content type="text">事象
Kotlin を2.2.20に上げたあと、ビルド時に以下のエラーが発生しました。
Duplicate class kotlinx.android.parcel.Parcelize found in modules kotlin-android-extensions-...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088223</id>
    <published>2025-10-03T18:19:22+09:00</published>
    <updated>2025-10-03T18:19:22+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/ba26fafb2d299e3fa64d"/>
    <url>https://qiita.com/nozomi2025/items/ba26fafb2d299e3fa64d</url>
    <title>【Kotlin】crossinline の役割と使いどころ</title>
    <content type="text">1. 背景：インライン関数と非ローカルリターン
Kotlin の inline 関数は 高階関数のオーバーヘッドを削減 できるだけでなく、
ラムダ内で 非ローカルリターン（外側の関数から return）を可能にします。

例：非ローカルリターン
inline fun fo...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088219</id>
    <published>2025-10-03T18:09:57+09:00</published>
    <updated>2025-10-03T18:11:20+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/857ff3ca71ce530d3461"/>
    <url>https://qiita.com/nozomi2025/items/857ff3ca71ce530d3461</url>
    <title>【Kotlin】noinline の役割と使いどころ</title>
    <content type="text">はじめに
Kotlin では インライン関数 (inline function) を使うことで、高階関数の呼び出しコストを削減し、非ローカルリターン も可能になります。
しかし、場合によっては「引数の一部だけインライン化したくない」ケースがあります。
そのときに使うのが ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088214</id>
    <published>2025-10-03T18:00:42+09:00</published>
    <updated>2025-10-03T18:00:42+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/68601e57614cada39fad"/>
    <url>https://qiita.com/nozomi2025/items/68601e57614cada39fad</url>
    <title>【Kotlin】インライン関数 (inline function)</title>
    <content type="text">1. インライン関数とは？
Kotlin では高階関数を使うと、関数オブジェクトが生成されて呼び出しコストが発生します。
インライン関数 (inline function) は、このオーバーヘッドを減らすために 関数呼び出しを呼び出し元に展開（インライン化） します。
特...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
