<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 05 Sep 2025 03:33:11 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Leptos Fetch を使ってキャッシュする ( Rust x Leptos キャッシュ編 )]]></title><description><![CDATA[
 はじめに
Fairy Devices でソフトウェアエンジニアをやっている nope です。
最近、新しいプロジェクトで leptos という Rust のフロントエンドフレームワークを使ってクライアントサイドの実装をしています。
WebAssembly ではいろんなことができるようになってきているので、映像やリアルタイム通信を扱う部分で Rust をうまく活用できないかな、という気持ちで採用しました。
まだ触り始めて2ヶ月ほどですが、開発を通じて得た知見や、便利な外部クレートの使い方など共有していきたいなと思って、記事を書き始めました。
まだまだ実装が未熟な部分もあると思うので、「...]]></description><link>https://zenn.dev/fairydevices/articles/5ecacd53abd3e6</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/5ecacd53abd3e6</guid><pubDate>Fri, 05 Sep 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WvDkGXPN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Leptos%2520Fetch%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%2520%2528%2520Rust%2520x%2520Leptos%2520%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E7%25B7%25A8%2520%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nope_noshishi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxMjZkZDZkMmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nope_noshishi</dc:creator></item><item><title><![CDATA[nest_structを使ってネストした構造体を定義する]]></title><description><![CDATA[
 モチベーション

例えばgolangであれば匿名構造体を使って、簡潔に定義することができます。
type User struct {
    ID int `json:"id"`
    Profile struct {
        Name string `json:"name"`
        Bio  string `json:"bio"`
    } `json:"profile"`
    Stats struct {
        FollowerCount int `json:"follower_count"`
        FolloweeCount int...]]></description><link>https://zenn.dev/techno_tanoc/articles/04ed27a3e2deb7</link><guid isPermaLink="true">https://zenn.dev/techno_tanoc/articles/04ed27a3e2deb7</guid><pubDate>Thu, 04 Sep 2025 13:56:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6-enC8VY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:nest_struct%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:techno-tanoC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlZTdjM2ZlYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>techno-tanoC</dc:creator></item><item><title><![CDATA[noise の秋ですね Rust で実装しませんか？]]></title><description><![CDATA[
 はじめに
まったく涼しくありませんがもう秋ですね。
日が短くなり、どこか物悲しい季節には noise がぴったりです。
以前 Node.js で noise を鑑賞するコマンドを作って noise を楽しんでいました。

しかし intel mac から Apple Silicon の mac に買い替えたところ動かなくなり、しょうがなく YouTube で雨の音や宇宙の音を聞いていました。
う〜ん、コマンドラインで noise が聞きたくなりますね。秋ですし。

 za-

今回は Rust で noise コマンドを作ってみました。
3つの種類の noise を再生することが出来...]]></description><link>https://zenn.dev/doctormate/articles/0f16ea27b75709</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/0f16ea27b75709</guid><pubDate>Thu, 04 Sep 2025 13:13:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1WKgGUkD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:noise%2520%25E3%2581%25AE%25E7%25A7%258B%25E3%2581%25A7%25E3%2581%2599%25E3%2581%25AD%2520Rust%2520%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:-%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwYjdiZGViMGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>-</dc:creator></item><item><title><![CDATA[作って学ぶLR(1)構文解析]]></title><description><![CDATA[
 はじめに
構文解析できる人ってかっこいいですよね（要出典）。
皆さんが普段使っているプログラミング言語も、どこかの「かっこいい人」がコンパイラやインタプリタを作ってくれたから実行できるわけです。この記事が、あなたが「かっこいい人」の仲間入りをする助けになれば幸いです。
!
この記事で使用しているコードはCopilotによるインライン補完を除いて人力で書かれています。記事本文は全て人力で書かれ、公開前にAIによるレビューを通しています。


 作るもの
LR(0)、LR(1)、LALRパーサーをRustで実装します。Lexerの実装はやるだけなので賢明な読者への課題とします。
Rust...]]></description><link>https://zenn.dev/taro137/articles/4b8587d95acf08</link><guid isPermaLink="true">https://zenn.dev/taro137/articles/4b8587d95acf08</guid><pubDate>Thu, 04 Sep 2025 06:22:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7VBpi_cN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6LR%25281%2529%25E6%25A7%258B%25E6%2596%2587%25E8%25A7%25A3%25E6%259E%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlOGE5ZGM1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[足を止めて見る #3 〜 RustのTryFromトレイト 〜]]></title><description><![CDATA[
 足を止めて見よう
足を止めて見ようシリーズの3つ目です。
前回は From トレイトについてでした。

 std::convert::TryFrom トレイトを実装しよう
ある型に対して、別の型から変換してその型を作る方法を定義できるのが std::convert::From トレイトでしたね（復習）
変換に失敗するケースが存在する場合に利用するのが std::convert::TryFrom トレイトです。
今回は足を止めて std::convert::TryFrom トレイトを実装してみます。

 std::convert::TryFrom トレイトを実装する構造体を用意してみる...]]></description><link>https://zenn.dev/doctormate/articles/dive_3_try_from_trait</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/dive_3_try_from_trait</guid><pubDate>Thu, 04 Sep 2025 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NrQG7GGJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B6%25B3%25E3%2582%2592%25E6%25AD%25A2%25E3%2582%2581%25E3%2581%25A6%25E8%25A6%258B%25E3%2582%258B%2520%25233%2520%25E3%2580%259C%2520Rust%25E3%2581%25AETryFrom%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%2520%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259B%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25A6%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZVhWLXBJYnZkcjBBYW40R3NVdEpoemk2eFBNczEyem9zVUszREtKV0tTa2c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ホリケンシュウ</dc:creator></item><item><title><![CDATA[セキュリティ・キャンプで Rust 製 RISC-V ターゲットの C コンパイラを開発した]]></title><description><![CDATA[セキュリティ・キャンプ 全国大会 2025 の L4 Cコンパイラゼミに参加しました。Cコンパイラゼミは一ヶ月ほどの事前学習期間と5日間の合宿 (内3日の開発期間) で小さなCコンパイラを作るという野心的なゼミです。
私は Rust で RISC-V をターゲットにした gakicc という C コンパイラを開発しました。Rust で開発する都合上、セルフホストはできないので、講師の hsjoihs さんの作った 1.5k 行程でセルフホストされている 2kmcc を自作のコンパイラでコンパイルし、生成されたバイナリを用いてもう一度 2kmcc をコンパイル、さらに生成されたバイナリを用...]]></description><link>https://zenn.dev/s7/articles/37071b1a83956a</link><guid isPermaLink="true">https://zenn.dev/s7/articles/37071b1a83956a</guid><pubDate>Thu, 04 Sep 2025 02:35:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IfyW92lA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25BB%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%25B3%25E3%2583%2597%25E3%2581%25A7%2520Rust%2520%25E8%25A3%25BD%2520RISC-V%2520%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B2%25E3%2583%2583%25E3%2583%2588%25E3%2581%25AE%2520C%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A4%258E%25E5%2590%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlMjZhYmI5ODguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>椎名</dc:creator></item><item><title><![CDATA[RustでMockitoでAPIのモックをするときにbuilderを使う]]></title><description><![CDATA[
 目的
外部APIを含むテストを書いていると、単体テストで呼び出すわけにはいかにのでMcokを使います。特にHTTPのモックにはMockitoが便利です。
ですが、Mockitoを使って毎回モックを準備するのも大変です。そこでbuilderを使って楽をすることにします。

 例
LINEログインのプロフィールAPIのモックをしてみます。リファレンスはこちらです。
またAPIの向き先を簡単に変えられるように、lineapiクレートを使います。

 コード

 普通にmockする。
#[tokio::test]
async fn test_make_mock_get_v2_profile_...]]></description><link>https://zenn.dev/aoyagikouhei/articles/b911ef6ec679b7</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/b911ef6ec679b7</guid><pubDate>Wed, 03 Sep 2025 23:56:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KSpZVwG4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Mockito%25E3%2581%25A7API%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25ABbuilder%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[Rust Async完全攻略：TokioとFuturesで高性能を引き出す10のTips]]></title><description><![CDATA[
 Rust Async エコシステム（Tokio/Futures）の10の実践テクニック
Rust Async エコシステム（Tokio/Futures）のコアデザインはゼロコスト抽象化＋メモリ安全性にありますが、高水準な開発ではスケジューリング、メモリ、並行処理の面で隠れた落とし穴が発生しやすいです。以下の10のテクニックは、基盤となるロジックを理解し、高性能な Async コードを記述するのに役立ちます。

 💡 テクニック1：Pin の本质を理解する－「固定」ではなく「約束」である

 なぜこのデザインが必要か？
Async Future には自己参照（例：async fn が ...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/611cbf623f8133</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/611cbf623f8133</guid><pubDate>Wed, 03 Sep 2025 14:49:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m2dKDxke--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520Async%25E5%25AE%258C%25E5%2585%25A8%25E6%2594%25BB%25E7%2595%25A5%25EF%25BC%259ATokio%25E3%2581%25A8Futures%25E3%2581%25A7%25E9%25AB%2598%25E6%2580%25A7%25E8%2583%25BD%25E3%2582%2592%25E5%25BC%2595%25E3%2581%258D%25E5%2587%25BA%25E3%2581%259910%25E3%2581%25AETips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[【Bevy 0.15 & Rapier2D 0.29 対応】`RapierContext`の正しい取得方法と使い方]]></title><description><![CDATA[無駄に正解にたどり着くまで苦労しました。
基本はコードよめですね。

 まとめ ReadRapierContextを使う
rapier_context: ReadRapierContext,
詳しく知りたい場合は、rapier_context_systemparam.rsを読む/読ませるといい。
以下、Gemini Pro 2.5による説明
Bevyで物理演算ライブラリbevy_rapierを使っていると、物理ワールドの状態にアクセスしたくなる場面がよくあります。例えば、「特定の座標にレイを飛ばして何かに当たっているか調べたい」「現在接触しているオブジェクトのペアをすべて取得したい」とい...]]></description><link>https://zenn.dev/akjava/articles/aaa8fea3f2c203</link><guid isPermaLink="true">https://zenn.dev/akjava/articles/aaa8fea3f2c203</guid><pubDate>Wed, 03 Sep 2025 04:05:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8wRkMH0f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Bevy%25200.15%2520%2526%2520Rapier2D%25200.29%2520%25E5%25AF%25BE%25E5%25BF%259C%25E3%2580%2591%2560RapierContext%2560%25E3%2581%25AE%25E6%25AD%25A3%25E3%2581%2597%25E3%2581%2584%25E5%258F%2596%25E5%25BE%2597%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:github_akjava%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYzFmMDQyY2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>github_akjava</dc:creator></item><item><title><![CDATA[MariaDB WHERE INクエリの直列分割処理で最適なチャンクサイズを実測データで検証する]]></title><description><![CDATA[
 はじめに
大量のデータを扱う際、WHERE INクエリのパフォーマンスは重要な課題です。特に、数万件のIDを一度に処理する場合、単一のクエリではパフォーマンスが低下することがあります。
この記事では、直列分割処理によるWHERE INクエリの最適化について、実際のベンチマーク結果に基づいて詳しく分析します。

 問題の背景

 単一WHERE INクエリの問題
-- 50000件のIDを一度に処理
SELECT * FROM test_records 
WHERE id IN (?, ?, ?, ..., ?) -- 50000個のパラメータ
このような大量のパラメータを含むクエリに...]]></description><link>https://zenn.dev/collabostyle/articles/83f390008cff3c</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/83f390008cff3c</guid><pubDate>Wed, 03 Sep 2025 03:42:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---BiFAmqa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MariaDB%2520WHERE%2520IN%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%25AE%25E7%259B%25B4%25E5%2588%2597%25E5%2588%2586%25E5%2589%25B2%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25A7%25E6%259C%2580%25E9%2581%25A9%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E5%25AE%259F%25E6%25B8%25AC%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yushi-s%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1DWlFPZDBzMmF6VWgtQ0lVZjRvTnVxeW5ZUUswU0g2N3M3M1hVbjFvQldPRDJBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yushi-s</dc:creator></item><item><title><![CDATA[Rust Web アプリをレベルアップ：開発者向け上級テク10選]]></title><description><![CDATA[
 Rust Web開発の高度な10のヒント：設計原則から実装まで
RustによるWeb開発のメリットは**「ゼロコスト抽象化＋メモリ安全性」** にありますが、高度なシナリオ（高並行性、複雑な依存関係、セキュリティ保護）では「フレームワークのデフォルト使用法」を超える必要があります。以下の10のヒントは、Tokio/Axum/Sqlxなどのエコシステムを組み合わせ、設計ロジックを分解して、より効率的で安全なコードを記述するのに役立ちます。

 ヒント1：手動のJoinHandle管理の代わりにTokio JoinSetを使用する
方法：複数の非同期タスクのシナリオでは、JoinHand...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</guid><pubDate>Tue, 02 Sep 2025 15:05:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ynzN_vd4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25EF%25BC%259A%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E4%25B8%258A%25E7%25B4%259A%25E3%2583%2586%25E3%2582%25AF10%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[怖くない！　抽象化動的セグメント木の非再帰実装]]></title><description><![CDATA[
 はじめに
区間取得クエリを対数時間で処理するセグメント木は競技プログラミングで頻出のデータ構造です。巨大な配列（N \gg 10^5）に対するセグメント木を作ろうとするとMLEや実行時エラーを引き起こしてしまいますが、必要なノードだけ作ることで空間O(Q)で実現できます。これを動的セグメント木と言います。
本記事では抽象化動的セグメント木の非再帰実装の勘所を紹介します。また、効率よく実装するための工夫についても紹介します。

 対象読者
本記事ではセグメント木の仕組みを理解していることを前提とします。セグメント木の解説記事は世にごまんとあるので、適宜参照してください。個人的にわかりや...]]></description><link>https://zenn.dev/yatyou/articles/07e787d09d0441</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/07e787d09d0441</guid><pubDate>Tue, 02 Sep 2025 12:19:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k5LkxByc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%2596%25E3%2581%258F%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%25E3%2580%2580%25E6%258A%25BD%25E8%25B1%25A1%25E5%258C%2596%25E5%258B%2595%25E7%259A%2584%25E3%2582%25BB%25E3%2582%25B0%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E6%259C%25A8%25E3%2581%25AE%25E9%259D%259E%25E5%2586%258D%25E5%25B8%25B0%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[MSRVでCIを実行するときに設定しておくべき環境変数]]></title><description><![CDATA[
 概要
export CARGO_UNSTABLE_SPARSE_REGISTRY="true" # for rust_version &lt; 1.68
export CARGO_REGISTRIES_CRATES_IO_PROTOCOL="sparse" # for 1.68 &lt;= rust_version &lt; 1.70
export CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS="fallback" # for edition &lt; 2024

 sparse registory
non-sparseなレジストリでも動くが、非...]]></description><link>https://zenn.dev/toru3/articles/5976752f77744b</link><guid isPermaLink="true">https://zenn.dev/toru3/articles/5976752f77744b</guid><pubDate>Tue, 02 Sep 2025 10:06:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qG3qJ36h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MSRV%25E3%2581%25A7CI%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%25E3%2581%25B9%25E3%2581%258D%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Toru3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0YzQwY2I5MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Toru3</dc:creator></item><item><title><![CDATA[WASMアプリをIBM Cloud Code Engineにデプロイしてみた]]></title><description><![CDATA[
 はじめに
本記事はサクッとRustプロジェクトをWASMにコンパイルしてコンテナで動かしてみたの続編となります。
今回は通常の Linux コンテナ内で WebAssembly runtime を起動し、.wasm を実行します。
前回（Rancher Desktop の Wasm ランタイム上で FROM scratch の超軽量イメージを動かす）から一歩進めて、同じ Wasm アプリを Code Engine にデプロイしてみたいと思います。

 必要ツール

Rust 1.85 以上（Edition 2024 対応）

rustup 利用を前提
wasm32-wasip1


...]]></description><link>https://zenn.dev/cepe_jp/articles/8239b5f6248299</link><guid isPermaLink="true">https://zenn.dev/cepe_jp/articles/8239b5f6248299</guid><pubDate>Tue, 02 Sep 2025 06:03:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kA56hPbU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WASM%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592IBM%2520Cloud%2520Code%2520Engine%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yusuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:cepe-jp%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljZDBlYzg3ZDYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[Rustで動的型付けっぽいKeyは作れるのか?]]></title><description><![CDATA[
 なぜまたこんなことを?
RustでHashSetやMapのKeyはHash+Eqである必要がある。ここで、Tで縛るのではなく、左記の条件を実対していればいかなるEntityでもKeyとして使うことのできるようにできるのかな?というのがそもそものとっかかり。

 Envelopeを作る
通常hash関数は、fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) となっている。通常はこれで問題ないのだが、今回の場合、KeyをBoxに詰める必要があり、関数にGenericsが入っているとコンパイルエラーになってしまう。またfn hash...]]></description><link>https://zenn.dev/tokeiya3/articles/b9bfb84389565d</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/b9bfb84389565d</guid><pubDate>Tue, 02 Sep 2025 05:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DKfqdvMu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584Key%25E3%2581%25AF%25E4%25BD%259C%25E3%2582%258C%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[Claudeでミニカートゲームをアップグレードする]]></title><description><![CDATA[
 はじめに
前回、Rust&amp;Wasmでつくったミニカートゲームを、Claude Code &amp; Serena を使ってアップグレードした内容を記事にまとめました。今回も、興味を持って頂いた方は、パソコンから、お試しURLをクリックしてみてください🙂。

 ミニカートゲーム2


 お試しURL(アップグレード後)
https://myurioka.github.io/cart2/

 お試しURL(アップグレード前)
https://myurioka.github.io/cart/

 操作
カーソル左/右: 左右移動
カーソル上: 速度UP
カーソル下: 左右の移動をな...]]></description><link>https://zenn.dev/yurioka/articles/159bf550fb77ed</link><guid isPermaLink="true">https://zenn.dev/yurioka/articles/159bf550fb77ed</guid><pubDate>Mon, 01 Sep 2025 22:07:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uj_qZue3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%25E3%2581%25A7%25E3%2583%259F%25E3%2583%258B%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myurioka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YTE2NGMzMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myurioka</dc:creator></item><item><title><![CDATA[HTTPからWebSocketへ：リアルタイムWebの進化]]></title><description><![CDATA[
Leapcell：最高のサーバーレスWebホスティング

 HTTP長接続からWebSocketへ：リアルタイムWebの技術進化と米国企業の実践

 I. 歴史的進化：HTTP接続方式のジレンマと突破口
初期のWebは静的コンテンツが中心であり、HTTPプロトコルは「リクエスト-レスポンス」の短時間接続（ショートコネクション）方式を採用していた。クライアントがリクエストを送信し、サーバーがレスポンスを返すと、TCP接続は即座に切断される。この方式は静的ページの時代には有効だったが、オンラインチャットやリアルタイム監視といったインタラクティブなニーズの高まりに伴い、ショートコネクションの...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</guid><pubDate>Mon, 01 Sep 2025 15:35:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4WFcS8nY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTTP%25E3%2581%258B%25E3%2582%2589WebSocket%25E3%2581%25B8%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0Web%25E3%2581%25AE%25E9%2580%25B2%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[思ったより(知ってるけど)知らないRustのイテレータと高階関数]]></title><description><![CDATA[
 思ったより(知ってるけど)知らないRustのイテレータと高階関数

 こんにちは
こんにちはsaffronteaです。
FAST株式会社にてRustを使用してアプリケーション、APIなどのバックエンドの作成を行っています。
私はRustをかれこれ6~7年くらい使ってきていましたが、正直Iteratorをうまく扱えているとは言い難いなと思いつつ触っていました。
業務でRustコードを書くにあたって、より効率的で読みやすいコードを作っていくためには、
Iteratorをうまく使えるようになりたいなぁと感じたのでちゃんと調べてみることにしました。
!
この記事は8割人間の手によって書かれて...]]></description><link>https://zenn.dev/fast/articles/fd0a798fb53a5e</link><guid isPermaLink="true">https://zenn.dev/fast/articles/fd0a798fb53a5e</guid><pubDate>Mon, 01 Sep 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6w3P6iEn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2582%258A%2528%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2591%25E3%2581%25A9%2529%25E7%259F%25A5%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584Rust%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2586%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A8%25E9%25AB%2598%25E9%259A%258E%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:saffron%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjOWRhNTg5NjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saffron</dc:creator></item><item><title><![CDATA[tokei で行数を測ってみよう]]></title><description><![CDATA[
 tokei で行数を測ってみよう
tokei https://github.com/XAMPPRocky/tokei はコードの統計情報を表示するコマンドラインツールです。 Rust で書かれています。
コードの統計情報を表示するので「統計」かと思いきや「時計」と、リポジトリの README に書いてあります。
行数なんて……と思われるかもしれませんが、規模感のある程度の目安にはなります。あるリポジトリがあったとき 100 万行と 100 行ではさすがに違いますよね (もちろん自動生成された何かという可能性はありますが) 。

 インストール
いくつかの方法でインストールできますが、...]]></description><link>https://zenn.dev/doctormate/articles/35e698d10c1388</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/35e698d10c1388</guid><pubDate>Mon, 01 Sep 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xh1kNE30--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tokei%2520%25E3%2581%25A7%25E8%25A1%258C%25E6%2595%25B0%25E3%2582%2592%25E6%25B8%25AC%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[axum の Router をエンドポイントの階層で分けて書く]]></title><description><![CDATA[
 axum の Router ってどう書く？
Rust のウェブアプリケーションフレームワーク axum で、エンドポイントを用意するとき、Router 構造体 を使用するのだけれど、よくあるサンプルコードは以下みたいなものだったりする。
use axum::{
    http::StatusCode,
    response::IntoResponse,
    routing::get,
    Router,
};

#[tokio::main]
async fn main() {
    let router = Router::new()
        .route("...]]></description><link>https://zenn.dev/awazo/articles/layered-axum-router</link><guid isPermaLink="true">https://zenn.dev/awazo/articles/layered-axum-router</guid><pubDate>Mon, 01 Sep 2025 02:22:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XBdceIRW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axum%2520%25E3%2581%25AE%2520Router%2520%25E3%2582%2592%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E9%259A%258E%25E5%25B1%25A4%25E3%2581%25A7%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A6%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Ozawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QwM2E1ZTFjNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Ozawa</dc:creator></item></channel></rss>