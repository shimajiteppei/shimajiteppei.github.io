<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 17 Aug 2025 08:17:09 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[思考の解剖学：Node.js Hello Worldから読み解く6段階思考テンプレート]]></title><description><![CDATA[
 思考の解剖学：Node.js Hello Worldから読み解く6段階思考テンプレート
プログラミング学習において、「Hello World」は単なる入門課題ではない。それは、新しい技術パラダイムを理解するための思考の入り口である。本記事では、Node.jsのHello Worldプログラムを「頭のいい人が理解した場合の思考テンプレート」に沿って分析し、深層的理解への道筋を示す。

 1. 存在意義の把握：なぜNode.jsなのか

 技術史的文脈での位置づけ
Node.jsの存在意義を理解するには、まずWeb技術の進化を俯瞰する必要がある。
従来のパラダイム：

フロントエンド：J...]]></description><link>https://zenn.dev/yoshiaki_ai/articles/nodejs-thinking-template-analysis</link><guid isPermaLink="true">https://zenn.dev/yoshiaki_ai/articles/nodejs-thinking-template-analysis</guid><pubDate>Sun, 17 Aug 2025 07:45:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fj6hyHR4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%259D%25E8%2580%2583%25E3%2581%25AE%25E8%25A7%25A3%25E5%2589%2596%25E5%25AD%25A6%25EF%25BC%259ANode.js%2520Hello%2520World%25E3%2581%258B%25E3%2582%2589%25E8%25AA%25AD%25E3%2581%25BF%25E8%25A7%25A3%25E3%2581%258F6%25E6%25AE%25B5%25E9%259A%258E%25E6%2580%259D%25E8%2580%2583%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshiaki%254010B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTExKcURhSjhzMlNCT3Q3RGluN29tRTZLZ3ZhNGFZZ1pETmt2TTB1Z3FaWVRkc18zTT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshiaki@10B</dc:creator></item><item><title><![CDATA[Jestを使ったクラスをテスト手法まとめ]]></title><description><![CDATA[
 Jest を使ったクラスをテスト手法まとめ
業務で Jest を使う機会が多くなってきたので、おさらいとしてクラスを対象としたテスト手法をまとめてみました。
クラスを使ったコード例、マッチャー、モック機能について、紹介します。


 1. Jest の基本的なテストコード
// src/UserService.ts
import { AuthApi } from './AuthApi';

export class UserService {
  constructor(private authApi: AuthApi) {}

  async login(username: str...]]></description><link>https://zenn.dev/hayatech/articles/ts-jest-for-class</link><guid isPermaLink="true">https://zenn.dev/hayatech/articles/ts-jest-for-class</guid><pubDate>Sun, 17 Aug 2025 06:16:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lmgs1dTk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jest%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%2592%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E6%2589%258B%25E6%25B3%2595%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HayaTech%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2OTUyMWE4YzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HayaTech</dc:creator></item><item><title><![CDATA[Node.js入門：手軽に始めるHello Worldプログラムの作成方法]]></title><description><![CDATA[
 Node.js入門：手軽に始めるHello Worldプログラムの作成方法

 1. 導入部分
JavaScriptは、当初はブラウザ上で動作する言語として生まれましたが、現在ではサーバーサイドでも広く使われています。その背景には、Node.jsの存在が大きく関わっています。Node.jsは、JavaScriptをサーバーサイドで動かすためのプラットフォームで、非同期I/Oやイベント駆動型の特性を持っています。これにより、大量のリクエストを高速に処理することが可能となりました。
この記事では、Node.jsの基本的な使い方を学ぶため、初めてのプログラムとしてよく用いられる"Hello...]]></description><link>https://zenn.dev/yoshiaki_ai/articles/nodejs-hello-world-tutorial</link><guid isPermaLink="true">https://zenn.dev/yoshiaki_ai/articles/nodejs-hello-world-tutorial</guid><pubDate>Sun, 17 Aug 2025 06:04:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qLBcskDm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BHello%2520World%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshiaki%254010B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTExKcURhSjhzMlNCT3Q3RGluN29tRTZLZ3ZhNGFZZ1pETmt2TTB1Z3FaWVRkc18zTT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshiaki@10B</dc:creator></item><item><title><![CDATA[ゼロから作る！Discordボイスチャンネル入室通知Bot]]></title><description><![CDATA[このチュートリアルでは、PythonとDiscord APIを使って、ボイスチャンネルへの入室を通知するBotをゼロから開発する手順を解説します。開発環境の構築から、Botの実装、エラー処理、Dockerによる本番運用、自宅サーバーでのホスティングまで、初心者にも分かりやすく丁寧に説明します。]]></description><link>https://zenn.dev/nakurei/books/create-discord-voice-notify-bot-tutorial</link><guid isPermaLink="true">https://zenn.dev/nakurei/books/create-discord-voice-notify-bot-tutorial</guid><pubDate>Sun, 17 Aug 2025 03:05:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PX3Mhtk5--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci85YjU0NWM2OGM5LnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>NakuRei</dc:creator></item><item><title><![CDATA[Vue.jsでProxy APIを使ってリアクティブデータと副作用を統合する試み]]></title><description><![CDATA[
 状態とその状態の副作用を一つのオブジェクトにまとめたい

 前提
Vue.js/TypeScriptのフロントエンドアプリケーションを実装している
scriptタグ内の行数が多い.vueファイルで、編集状態のデータと、そのデータの副作用として指定する関数や変数の位置が離れていることがあった。
修正時に、ファイル下部のwatcherなどの副作用を見落とすことがある。
（大きめのファイルであればリファクタせんかいという当たり前の意見は一旦無視、！）
（こういったこともあってwatcherはあまり使用しない。気を抜くとあちこちに分散してしまうので、状態が変更した時に何かしたい場合は、v-m...]]></description><link>https://zenn.dev/sakiadachi/articles/23636e588d5bf1</link><guid isPermaLink="true">https://zenn.dev/sakiadachi/articles/23636e588d5bf1</guid><pubDate>Sun, 17 Aug 2025 01:53:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oiPZFSbt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue.js%25E3%2581%25A7Proxy%2520API%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A8%25E5%2589%25AF%25E4%25BD%259C%25E7%2594%25A8%25E3%2582%2592%25E7%25B5%25B1%25E5%2590%2588%25E3%2581%2599%25E3%2582%258B%25E8%25A9%25A6%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2596%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiYWMwZTcxYzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ざき</dc:creator></item><item><title><![CDATA[JavaScriptでABC419(A-D)]]></title><description><![CDATA[https://atcoder.jp/contests/abc419

 A - AtCoder Language
https://atcoder.jp/contests/abc419/tasks/abc419_a
if文を、書きまーす！！
https://atcoder.jp/contests/abc419/submissions/68512679
1分24秒 AC!
switch文のほうが楽だったかもしれない(AC)

 B - Get Min
https://atcoder.jp/contests/abc419/tasks/abc419_b
Bは愚直
適当にbagを用意して問題文の...]]></description><link>https://zenn.dev/aya_koto/articles/1bbf45e1c2c26c</link><guid isPermaLink="true">https://zenn.dev/aya_koto/articles/1bbf45e1c2c26c</guid><pubDate>Sat, 16 Aug 2025 13:40:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7qSC4FTI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:JavaScript%25E3%2581%25A7ABC419%2528A-D%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ayasaka-Koto%2520%252F%2520Aya...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNTRlMDBjYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ayasaka-Koto / AyagawaP</dc:creator></item><item><title><![CDATA[Aamzonの商品ページURLをシンプルにするブックマークレット]]></title><description><![CDATA[Amazonの商品ページURLをシンプルな構造に変換し、クリップボードにコピーするブックマークレットです。

 完成形
まずは完成形。
javascript:(() =&gt; {
    const getDp = () =&gt; {
        let url = document.URL.split(`dp`)[1].split(`/`)[1];;
        return `https://amazon.co.jp/dp/` + url;
    };
    const main = () =&gt; {
        navigator.clipboard.wri...]]></description><link>https://zenn.dev/atohs/articles/96e3c5c7dd87f9</link><guid isPermaLink="true">https://zenn.dev/atohs/articles/96e3c5c7dd87f9</guid><pubDate>Sat, 16 Aug 2025 13:28:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LNJDSr_S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Aamzon%25E3%2581%25AE%25E5%2595%2586%25E5%2593%2581%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8URL%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2583%2596%25E3%2583%2583%25E3%2582%25AF%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:atohs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2haX2FOZ0Z3NkJvLTVVZlZaMnN5TmFlRE1ENFVvT05ESmlUTW5GT3c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>atohs</dc:creator></item><item><title><![CDATA[map()とかでよく見る"should have a unique “key” prop."エラー腹立つ]]></title><description><![CDATA[
 📢 このシリーズについて
このシリーズは、React公式ドキュメント（ https://ja.react.dev/ ）を(できるだけ)全て読み、学んだことやコード例、自分なりの補足をまとめていくチャレンジの記録です。

 目的


Reactの基礎〜応用を公式の正しい情報で体系的に理解する
自分の言葉でアウトプットして知識を定着させる

このシリーズでは、ただ内容をなぞるのではなく、**「自分がReactを使っていても気づかなかった事実や落とし穴」**を重点的にまとめます。
読んだときに「へぇ、そうなんだ！」となったポイントは必ず記録します！

 目次 - 本記事で取り扱う内容

R...]]></description><link>https://zenn.dev/miry/articles/05f3a94f00af25</link><guid isPermaLink="true">https://zenn.dev/miry/articles/05f3a94f00af25</guid><pubDate>Sat, 16 Aug 2025 11:57:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X-3IOac6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:map%2528%2529%25E3%2581%25A8%25E3%2581%258B%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E8%25A6%258B%25E3%2582%258B%2522should%2520have%2520a%2520unique%2520%25E2%2580%259Ckey%25E2%2580%259D%2520prop.%2522%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E8%2585%25B9%25E7%25AB%258B%25E3%2581%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2582%25AB%25E3%2583%259F_miry41%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2OGQ2MTRjZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タカミ_miry41</dc:creator></item><item><title><![CDATA[【初心者向け】後置インクリメントのタイミングを誤解していた話]]></title><description><![CDATA[
 はじめに
アルゴリズム問題をPHPで取り組んでいた時に、変数の後置インクリメントについて誤解していることが判明しました。
「あれ、予想した結果と違う」といった状況に出会した際、実はこのインクリメントの認識が違っていたということが原因になりえます。
そこで、この記事では、実際に筆者自身が後置インクリメントについて誤解していた点を整理しながら、後置インクリメントの挙動を解説していきます。

 問題概要
PHPを使って、二分木 root を引数とした、最大の深さを返す、maximumDepth という関数を作成する問題に取り組んでいました。
※ ここでいう「最大の深さ」とは、根ノードから最...]]></description><link>https://zenn.dev/mabo23/articles/760b1e9e9dae67</link><guid isPermaLink="true">https://zenn.dev/mabo23/articles/760b1e9e9dae67</guid><pubDate>Sat, 16 Aug 2025 11:45:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jfDz0QMM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591%25E5%25BE%258C%25E7%25BD%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E8%25AA%25A4%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mabo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzM2ZhMmVkZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mabo</dc:creator></item><item><title><![CDATA[で、実際useStateってどう動いてんの？]]></title><description><![CDATA[
 📢 このシリーズについて
このシリーズは、React公式ドキュメント（ https://ja.react.dev/ ）を(できるだけ)全て読み、学んだことやコード例、自分なりの補足をまとめていくチャレンジの記録です。

 目的


Reactの基礎〜応用を公式の正しい情報で体系的に理解する
自分の言葉でアウトプットして知識を定着させる

このシリーズでは、ただ内容をなぞるのではなく、**「自分がReactを使っていても気づかなかった事実や落とし穴」**を重点的にまとめます。
読んだときに「へぇ、そうなんだ！」となったポイントは必ず記録します！

 目次 - 本記事で取り扱う内容

な...]]></description><link>https://zenn.dev/miry/articles/723e57ed19ad8b</link><guid isPermaLink="true">https://zenn.dev/miry/articles/723e57ed19ad8b</guid><pubDate>Fri, 15 Aug 2025 13:40:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IJH1CwXI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25A7%25E3%2580%2581%25E5%25AE%259F%25E9%259A%259BuseState%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25A9%25E3%2581%2586%25E5%258B%2595%25E3%2581%2584%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2582%25AB%25E3%2583%259F_miry41%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2OGQ2MTRjZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タカミ_miry41</dc:creator></item><item><title><![CDATA[マジカルミライ2025プログラミングコンテストに参戦してみた]]></title><description><![CDATA[昨年に引き続き、初音ミク「マジカルミライ 2025」プログラミング・コンテストに参戦してみました。
今年は昨年のメンバーmoomindaniとべりんぐに加え、このた、トキナイ、Yunatty の5名のメンバーで参加しました。
開発したリリックアプリは大変嬉しいことに入選となりました！

リリックアプリとは楽曲の歌詞を表示するアプリでして、今回のマジカルミライ2025の受賞曲が課題曲になってます。
2025/8/15現在はミクナビアプリ（要会員登録）経由で一般投票受付中です。8/19 正午まで。
ぜひ遊んでみて、気に入ったら投票していただけたら大変嬉しいです。
エントリーNo.7: リリッ...]]></description><link>https://zenn.dev/moomindani/articles/d1c88c83ba2a94</link><guid isPermaLink="true">https://zenn.dev/moomindani/articles/d1c88c83ba2a94</guid><pubDate>Fri, 15 Aug 2025 11:57:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wZDDkazu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259E%25E3%2582%25B8%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%259F%25E3%2583%25A9%25E3%2582%25A42025%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AB%25E5%258F%2582%25E6%2588%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:moomindani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2s0RktaMEMwcENoMWRfLWVkZndHTmc0US1ENl9aZ0J3SFdhNmZtZWFPalRETk5nND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>moomindani</dc:creator></item><item><title><![CDATA[TypeScript Utility Types【型レベル編】]]></title><description><![CDATA[
 はじめに
この記事では、TypeScript の型システムを活用した高度な型操作を実例を交えて詳しく解説します。Template Literal Types を活用した型安全なシステム設計や、カスタム Utility Types の作成方法まで、実践的なテクニックを紹介していきます。

 Template Literal Types を活用した高度な型操作

 イベント名の生成と型安全性
// イベント名のパターンを定義
type EventType = "user" | "post" | "comment";
type Action = "create" | "update" | ...]]></description><link>https://zenn.dev/aoken/articles/typescript-utility-types-type-level-programming</link><guid isPermaLink="true">https://zenn.dev/aoken/articles/typescript-utility-types-type-level-programming</guid><pubDate>Fri, 15 Aug 2025 05:39:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sSVi9ovc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520Utility%2520Types%25E3%2580%2590%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258A%25E3%2581%2591%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWNlZmFmMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あおけん</dc:creator></item><item><title><![CDATA[TypeScript Utility Types【文字列・Union型編】]]></title><description><![CDATA[
 はじめに
この記事では、TypeScript の文字列操作や Union 型の操作に特化した Utility Types を実例を交えて詳しく解説していきます。

 文字列操作の Utility Types

 Uppercase&lt;T&gt; - 文字列を大文字に変換
Uppercase&lt;T&gt;は、文字列リテラル型を大文字に変換します。
type Greeting = "hello world";
type UpperGreeting = Uppercase&lt;Greeting&gt;; // "HELLO WORLD"

// 使用例：定数の生成
type Ht...]]></description><link>https://zenn.dev/aoken/articles/typescript-utility-types-string-union</link><guid isPermaLink="true">https://zenn.dev/aoken/articles/typescript-utility-types-string-union</guid><pubDate>Fri, 15 Aug 2025 05:39:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uWFJgomb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520Utility%2520Types%25E3%2580%2590%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2583%25BBUnion%25E5%259E%258B%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258A%25E3%2581%2591%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWNlZmFmMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あおけん</dc:creator></item><item><title><![CDATA[TypeScript Utility Types【基本編】]]></title><description><![CDATA[
 はじめに
この記事では、TypeScript で最も頻繁に使用される基本的な Utility Types を実例を交えて詳しく解説していきます。

 基本の Utility Types

 Partial&lt;T&gt; - プロパティを全てオプショナルに
Partial&lt;T&gt;は、型Tのすべてのプロパティをオプショナル（?付き）にします。
interface User {
  id: number;
  name: string;
  email: string;
  age: number;
}

// すべてのプロパティがオプショナルになる
type Partial...]]></description><link>https://zenn.dev/aoken/articles/typescript-utility-types-basic-guide</link><guid isPermaLink="true">https://zenn.dev/aoken/articles/typescript-utility-types-basic-guide</guid><pubDate>Fri, 15 Aug 2025 05:39:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0VuUGw-9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520Utility%2520Types%25E3%2580%2590%25E5%259F%25BA%25E6%259C%25AC%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258A%25E3%2581%2591%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWNlZmFmMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あおけん</dc:creator></item><item><title><![CDATA[TypeScript Utility Types【関数・Promise編】]]></title><description><![CDATA[
 はじめに
この記事では、TypeScript の関数や Promise に特化した Utility Types を実例を交えて詳しく解説していきます。

 関数に関する Utility Types

 ReturnType&lt;T&gt; - 関数の戻り値の型を取得
ReturnType&lt;T&gt;は、関数の戻り値の型を抽出します。
function getUser() {
  return { name: "John", age: 30, email: "john@example.com" };
}

type User = ReturnType&lt;typeof get...]]></description><link>https://zenn.dev/aoken/articles/typescript-utility-types-functions-guide</link><guid isPermaLink="true">https://zenn.dev/aoken/articles/typescript-utility-types-functions-guide</guid><pubDate>Fri, 15 Aug 2025 05:39:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hY1HMFNM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520Utility%2520Types%25E3%2580%2590%25E9%2596%25A2%25E6%2595%25B0%25E3%2583%25BBPromise%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258A%25E3%2581%2591%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWNlZmFmMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あおけん</dc:creator></item><item><title><![CDATA[stateを腹落ちするためには”レンダリング”を理解らなきゃダメらしい]]></title><description><![CDATA[
 📢 このシリーズについて
このシリーズは、React公式ドキュメント（ https://ja.react.dev/ ）を(できるだけ)全て読み、学んだことやコード例、自分なりの補足をまとめていくチャレンジの記録です。

 目的


Reactの基礎〜応用を公式の正しい情報で体系的に理解する
自分の言葉でアウトプットして知識を定着させる


 内容
このシリーズでは、ただ内容をなぞるのではなく、「自分がReactを使っていても気づかなかった事実や落とし穴」を重点的にまとめます。
読んだときに「へぇ、そうなんだ！」となったポイントは必ず記録します！

 目次 - 本記事で取り扱う内容

...]]></description><link>https://zenn.dev/miry/articles/9d5aaa75fc71e1</link><guid isPermaLink="true">https://zenn.dev/miry/articles/9d5aaa75fc71e1</guid><pubDate>Thu, 14 Aug 2025 13:53:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JjQ2qc44--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:state%25E3%2582%2592%25E8%2585%25B9%25E8%2590%25BD%25E3%2581%25A1%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E3%2581%25AF%25E2%2580%259D%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E2%2580%259D%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2582%2589%25E3%2581%25AA%25E3%2581%258D%25E3%2582%2583%25E3%2583%2580%25E3%2583%25A1%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2582%25AB%25E3%2583%259F_miry41%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2OGQ2MTRjZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タカミ_miry41</dc:creator></item><item><title><![CDATA[Node.jsのモジュール解決とnpm workspacesにおけるモノレポ参照の仕組み]]></title><description><![CDATA[
 はじめに
モノレポを利用しはじめるにあたって、npm workspacesで他パッケージのモジュールを参照する仕組みを調べたのでまとめました。

 1. Node.jsの基本モジュール解決ルール
Node.jsでは、require('foo') のようにモジュール名が渡されたとき、次の順で探索します。


コアモジュールの確認
http や fs など、Node.jsに組み込みのモジュールがあればそれを即座に返す。


相対／絶対パス指定の確認
./foo や /path/to/foo のようにパスで指定された場合は、そのパスを直接解決。


名前（識別子）による探索
現在のファイル...]]></description><link>https://zenn.dev/papanyanko/articles/how-nodejs-resolves-workspace-in-npm-workspaces</link><guid isPermaLink="true">https://zenn.dev/papanyanko/articles/how-nodejs-resolves-workspace-in-npm-workspaces</guid><pubDate>Thu, 14 Aug 2025 11:58:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uw6Yp70F--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%25A8npm%2520workspaces%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AC%25E3%2583%259D%25E5%258F%2582%25E7%2585%25A7%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:papanyanko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmZGFlNzE5YTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>papanyanko</dc:creator></item><item><title><![CDATA[【初心者向け】JavaScriptのconsole.log() ってなんだろう？]]></title><description><![CDATA[
 はじめに
JavaScriptをつかって、DOMを操作して動的な変更を加えている中で、そもそもconsole.log()を使っているが、これってどんな目的で何に使われているのか疑問に思ったため、ここにメモとしてまとめていきます。
※この記事はあくまで初心者のメモとして見ていただけますと幸いです。

 コンソールとは
コンソールはブラウザの開発者ツールにあり、ウェブページ上では見えない情報も確認できます。
用途は主に以下の2つがあります。

コンソールには、ログに記録されたメッセージを表示することとJavaScript を実行することの 2 つの主な用途があります。
※https://...]]></description><link>https://zenn.dev/mabo23/articles/934e173cbf8d9a</link><guid isPermaLink="true">https://zenn.dev/mabo23/articles/934e173cbf8d9a</guid><pubDate>Thu, 14 Aug 2025 11:31:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OvgmBGZ2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591JavaScript%25E3%2581%25AEconsole.log%2528%2529%2520%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A0%25E3%2582%258D%25E3%2581%2586%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mabo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzM2ZhMmVkZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mabo</dc:creator></item><item><title><![CDATA[#120 日本人に読めないフォント 強化練習ツールを作ってみた]]></title><description><![CDATA[
 概要
「Electroharmonix」という、日本人に読めないことで有名なフォントがあります。
今回はこちらのフォントの解読スキルを習得すべく、Chrome拡張機能を作成しました。この拡張機能を使用すると、すべてのウェブサイトがElectroharmonixフォントで表示され、スパルタ的に読み方を練習できます。さらに、ワンクリックでカスタムフォント表示と通常表示を切り替え可能です。なお、Electroharmonixは英数字しか対応していないため日本語には雰囲気が似ている「バナナスリップ plus」フォントを使用しました。

画像出典: 日本人にだけ読めないフォント「Electro...]]></description><link>https://zenn.dev/nxted_sapporo/articles/ac514c67a8feb4</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/ac514c67a8feb4</guid><pubDate>Thu, 14 Aug 2025 06:37:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h0oFj0q6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523120%2520%25E6%2597%25A5%25E6%259C%25AC%25E4%25BA%25BA%25E3%2581%25AB%25E8%25AA%25AD%25E3%2582%2581%25E3%2581%25AA%25E3%2581%2584%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25B3%25E3%2583%2588%2520%25E5%25BC%25B7%25E5%258C%2596%25E7%25B7%25B4%25E7%25BF%2592%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[Nuxt4 公式モジュール選択ガイド]]></title><description><![CDATA[
 概要
Nuxt4で新規プロジェクトを構築する際に新たな選択項目の公式モジュール選択についての解説になります。
初期構築を進めていくと下記質問をされます。
こちらの選択肢をYESにすると公式モジュールを導入することができます。
Would you like to install any of the official modules

 公式モジュールの選択肢
プロジェクト作成時に選択できる公式モジュールは以下の通りです。

 @nuxt/ui: UI Framework 🎨
Webサイトやアプリの見た目を作るための、ボタンやフォームといったUIコンポーネント集です。


Tailwi...]]></description><link>https://zenn.dev/shunsuke_stack/articles/d48919661a1043</link><guid isPermaLink="true">https://zenn.dev/shunsuke_stack/articles/d48919661a1043</guid><pubDate>Thu, 14 Aug 2025 04:53:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lLzfVEz6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nuxt4%2520%25E5%2585%25AC%25E5%25BC%258F%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E9%2581%25B8%25E6%258A%259E%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakajima.js%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhZmNlYzMzOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakajima.js</dc:creator></item></channel></rss>