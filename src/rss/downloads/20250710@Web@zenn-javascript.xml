<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 10 Jul 2025 06:35:37 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【JavaScript】即時実行と遅延実行の違い]]></title><description><![CDATA[コールバック関数を渡すべき処理に関数呼び出しを渡してしまい意図した動作にならない。開発中によく間違えたので、備忘録代わりにまとめます。

 TL;DR

「関数を渡す」= 遅延実行、「関数を呼び出して結果を渡す」= 即時実行という違い
関数そのものを渡すか関数の呼び出し結果を渡すかで実行されるタイミングが異なる
必要なときに関数を実行するなら関数を渡す。今すぐ実行したいなら関数をコールする


 具体例
Promise の処理が完了した後にログを出す実装を考えます。
まずは間違った実装から。
somePromise().then(console.log("done"));
// "don...]]></description><link>https://zenn.dev/keystone/articles/caa6125690a7b2</link><guid isPermaLink="true">https://zenn.dev/keystone/articles/caa6125690a7b2</guid><pubDate>Wed, 09 Jul 2025 23:29:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HzjXU3zs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591%25E5%258D%25B3%25E6%2599%2582%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25A8%25E9%2581%2585%25E5%25BB%25B6%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%25E3%2582%2593%25E3%2581%25A0%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYjc4MWNiNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>めんだこ</dc:creator></item><item><title><![CDATA[スプレッド構文を使った「条件付き挿入」のテクニック（オブジェクト & 配列）]]></title><description><![CDATA[
 はじめに
JavaScriptやTypeScriptで開発をしていると、「ある条件を満たすときだけ、オブジェクトや配列に値を追加したい」 というケースは多々あります。
そんなときに役立つのが、スプレッド構文（...）と条件演算子を組み合わせた書き方です。
本記事では、次の2つのパターンを紹介します：

✅ オブジェクトへの条件付きプロパティ追加
✅ 配列への条件付き要素追加


 1. オブジェクトへの条件付き追加
基本形
const name = "Alice"; // 空文字やnullになることもある

const userData = {
  age: 30,
  ...(na...]]></description><link>https://zenn.dev/oharu121/articles/b71b4d89b6f382</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/b71b4d89b6f382</guid><pubDate>Wed, 09 Jul 2025 15:29:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OTbUC9Jw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otfw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[【Javascript】|| と && と ?? の違い・活用例]]></title><description><![CDATA[
 はじめに
JavaScriptにおける ||（論理和）と &amp;&amp;（論理積）、そして ??（null合体演算子）は、条件分岐や値の選択処理で非常に便利な演算子です。ただの「真偽値チェック」ではなく、値の返し方に特徴がある点が重要です。
本記事では以下の内容を解説します：
* `||` / `&amp;&amp;` / `??` の違い


よくある活用パターン（if なしで書ける！）
React での使用例
使いこなしのコツと注意点


 || 、 &amp;&amp; 、 ?? の基本動作
JavaScriptでは、|| 、 &amp;&amp; 、 ?? は 条件に応...]]></description><link>https://zenn.dev/oharu121/articles/23f7502377b979</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/23f7502377b979</guid><pubDate>Wed, 09 Jul 2025 15:12:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TixkeR0D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Javascript%25E3%2580%2591%257C%257C%2520%25E3%2581%25A8%2520%2526%2526%2520%25E3%2581%25A8%2520%253F%253F%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2583%25BB%25E6%25B4%25BB%25E7%2594%25A8%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[`return`, `break`, `continue` の使い分けとコツ]]></title><description><![CDATA[
 はじめに
JavaScript（他の多くの言語でも同様）では、処理の流れをコントロールするために return, break, continue という命令が使われます。
初心者のうちは「何がどう違うの？」「どう書けばきれいに見えるの？」と迷いやすいところ。本記事では違い・使い分け・使い方のコツをやさしく解説します。

 ざっくり比較表



命令
処理対象
何をするか
よく使う場面




return
関数
関数の実行を即座に終了し、値を返す
値を返したい／それ以上の処理不要なとき


break
ループ・switch文
処理を途中で打ち切って、ループ自体を抜ける
条件が満たされ...]]></description><link>https://zenn.dev/oharu121/articles/a7b2b6c26cd043</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/a7b2b6c26cd043</guid><pubDate>Wed, 09 Jul 2025 15:10:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f4f7dh8o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2560return%2560%252C%2520%2560break%2560%252C%2520%2560continue%2560%2520%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[gitbucket-drawio-plugin を動くようにしたい]]></title><description><![CDATA[まだ、書きかけですが、公開します。

 筆者の環境



環境
バージョン




Windows
11


GitBucket
4.43.0




 gitbucket-drawio-plugin-0.1.0 を導入してみたけど…
gitbucket-drawio-plugin
最近、draw.io で作成したファイルで試してみたが、うまく表示されず。

開発者ツールでコンソールを見てみると以下のようなエラーが。
Object { message: "Not a diagram file", toString: toString() }
viewer.min.js:4083:236
...]]></description><link>https://zenn.dev/yasumichi/articles/04d09995388959</link><guid isPermaLink="true">https://zenn.dev/yasumichi/articles/04d09995388959</guid><pubDate>Wed, 09 Jul 2025 15:10:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KpJcZZeo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:gitbucket-drawio-plugin%2520%25E3%2582%2592%25E5%258B%2595%25E3%2581%258F%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasumichi%2520Akahoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUoySnNPVXFnanR4SGcteXBvTGoxcmVpTXlzc1dwYnltZEJ2ZHZYa1ExT1kteHRFOGs9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasumichi Akahoshi</dc:creator></item><item><title><![CDATA[配列を安全にコピーする方法（shallow copy vs deep copy）]]></title><description><![CDATA[
 はじめに
こんな経験ありませんか？
表計算アプリ、グリッドレイアウトなどをJavaScriptやTypeScriptで扱っているとき、「次の状態を作るために配列をコピーしたのに、なぜか元の配列まで変わってしまう」
そんな不思議なバグに遭遇したことはありませんか？
const current = [
  [0, 1],
  [1, 0]
];

const next = [...current]; // コピーしたつもりが…
next[0][0] = 999;

console.log(current[0][0]); // 👉 999!? なぜ？
実はこれ、「shallow copy（...]]></description><link>https://zenn.dev/oharu121/articles/b5d3624df7aaac</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/b5d3624df7aaac</guid><pubDate>Wed, 09 Jul 2025 15:08:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3QHYtWO2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2585%258D%25E5%2588%2597%25E3%2582%2592%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25EF%25BC%2588shallow%2520copy%2520vs%2520deep%2520copy%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[React + Redux / Redux Toolkitを使った非同期通信の検証]]></title><description><![CDATA[!
この記事は Qiita に2024年2月に投稿した内容を、再編集したものです。


 概要
今回はWebアプリにおいて重要な要素となる非同期通信を、Reduxを使って実装してみようと思います。
本記事を書くにあたって色々調べて見ましたが、シンプルに非同期通信と言ってもその実装方法は多角的で如何様にもできるのではという印象を感じました。
また、よく目にした createStore を使った実装方法は現時点で非推奨となっていたり、学習要素とトレンド要素が情報として混在していたりと自分にとっての落とし所を見つけるのにも相当苦労した経緯があります。
あくまで一見解という形で見ていただけると幸...]]></description><link>https://zenn.dev/xinome/articles/7270df53cc4843</link><guid isPermaLink="true">https://zenn.dev/xinome/articles/7270df53cc4843</guid><pubDate>Wed, 09 Jul 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--69niZhlO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520Redux%2520%252F%2520Redux%2520Toolkit%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E9%2580%259A%25E4%25BF%25A1%25E3%2581%25AE%25E6%25A4%259C%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:xinome%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzMTQ2NWJhZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>xinome</dc:creator></item><item><title><![CDATA[使いやすくなったconnpassのAPIで、イベント一覧をメールで毎日通知する【GAS】]]></title><description><![CDATA[
 1. はじめに

 1.1 課題
技術イベントや勉強会で刺激を受けるのが好きで、connpassをよく使っています。
基本的には大好きなサービスなのですが、「自分で主体的にconnpassのサイトにアクセスして探しにいく必要があること」と「参加できる時間や場所に合うよう絞り込まないといけないこと」を少々手間に感じていました。
そのため、一定のやる気がある時期じゃないと、そもそもconnpass開かない、となりがちで、おもしれーイベントの情報が流れ去って行ってしまい、後からよく過去のおもしれーイベントの情報を見つけて、(ﾟ*´Д⊂ｸﾞｽﾝと思っておりました。

 1.2 作ったもの

...]]></description><link>https://zenn.dev/esusaki/articles/2b03fcbec86b1e</link><guid isPermaLink="true">https://zenn.dev/esusaki/articles/2b03fcbec86b1e</guid><pubDate>Wed, 09 Jul 2025 09:58:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zTWkjag_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BD%25BF%25E3%2581%2584%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259Fconnpass%25E3%2581%25AEAPI%25E3%2581%25A7%25E3%2580%2581%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E4%25B8%2580%25E8%25A6%25A7%25E3%2582%2592%25E3%2583%25A1%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A7%25E6%25AF%258E%25E6%2597%25A5%25E9%2580%259A%25E7%259F%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590GAS%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:susaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc5MmVhMDA4MzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>susaki</dc:creator></item><item><title><![CDATA[Azure OpenAIのプロンプトキャッシュの挙動検証]]></title><description><![CDATA[
 背景
MCPサーバーを使うなら Prompt Caching が大切だと思い知った話という記事を読んで、プロンプトキャッシュの重要さを知り、興味を持ったため調べてみました。
　プロンプトキャッシュを使用せず、LLMに毎回同じようなプロンプトを入力すると、LLMは毎回ゼロから回答を生成して出力してしまいます。これでは毎回回答生成にかかる時間のロスが発生するだけでなく、同じような内容のプロンプトであるにもかかわらずトークンも毎回消費されるためコストがかかってしまいます。
　したがって、プロンプトキャッシュは生成AIにおいて余分なコストを削減し、効率よく処理するのに必要な技術要素です。たと...]]></description><link>https://zenn.dev/serio/articles/c312c91fe69cec</link><guid isPermaLink="true">https://zenn.dev/serio/articles/c312c91fe69cec</guid><pubDate>Wed, 09 Jul 2025 08:00:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mkT-jd_N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Azure%2520OpenAI%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2588%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E6%25A4%259C%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25AF%25E3%2581%2597%25E3%2581%258F%25E3%2582%258C%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4OGEyY2UyNGQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25BB%25E3%2583%25AA%25E3%2582%25AA%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvbS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はしくれ</dc:creator></item><item><title><![CDATA[Django REST frameworkのserializersを使った外部キーモデルの参照]]></title><description><![CDATA[!
この記事は Qiita に2024年2月に投稿した内容を、最新の構成に基づいて再編集したものです。


 概要
Django REST frameworkの serializers ライブラリを使い、dict型で取得されたdjango-adminのデータをJSONに変換した状態でフロントエンドに連携する仕組みを実装したのですが、外部キーを使ったモデル設計の場合はもう一工夫必要であることがわかったため記載します。

 実装機能


Django REST framework(DRF)の導入
外部キーを用いたモデルの設計、実装




項番
記事




1
React + Django...]]></description><link>https://zenn.dev/xinome/articles/8fe337a7a6cd08</link><guid isPermaLink="true">https://zenn.dev/xinome/articles/8fe337a7a6cd08</guid><pubDate>Tue, 08 Jul 2025 10:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ksAuQQ-u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%2520REST%2520framework%25E3%2581%25AEserializers%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25A4%2596%25E9%2583%25A8%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25AE%25E5%258F%2582%25E7%2585%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:xinome%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzMTQ2NWJhZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>xinome</dc:creator></item><item><title><![CDATA[Webページにマインドマップ機能を簡単に統合 - Mind Elixir]]></title><description><![CDATA[情報爆発の時代において、私たちは日々大量の複雑な情報やアイデアを処理しなければなりません。従来の線形ノートでは思考の飛躍性や関連性を表現することが困難ですが、マインドマップは半自動的なノートツールとして、思考の整理、知識構造の体系化、創造的インスピレーションの刺激に役立ち、同時にホワイトボードや描画ソフトウェアよりも操作が便利です。
知識管理プラットフォーム、オンライン教育サイト、コラボレーションツールの構築において、マインドマップ機能の統合はユーザーエクスペリエンスを大幅に向上させ、複雑な情報の表示とインタラクションをより直感的で効率的にします。
あなたのWebプロジェクトにマインドマ...]]></description><link>https://zenn.dev/darksouls/articles/b6f116dbfe5b4e</link><guid isPermaLink="true">https://zenn.dev/darksouls/articles/b6f116dbfe5b4e</guid><pubDate>Tue, 08 Jul 2025 06:27:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l3D__j9k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Web%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AB%25E3%2583%259E%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E7%25B5%25B1%25E5%2590%2588%2520-%2520Mind%2520Elixir%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ssshooter%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWZ3QnEyUGVyMEZkVVZKeTA5QnM4X3F5ZzJmekVfaHNDSG5iLTRnR2VOMFZxMEY2YWE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ssshooter</dc:creator></item><item><title><![CDATA[jQuery やめようぜ]]></title><description><![CDATA[
警告: 本記事にはレガシーの粉塵と遠慮ゼロの批判が含まれます。IE9 未満の読者は画面がちらつく副作用を起こす可能性があります。[1][2]



 0. TL;DR をあえて冗長に


jQuery: 2006 年製の "Write less, debug more" 発電機。$() が短いことだけが 唯一 の高速化。[3][4]


Vanilla JS (ES2015~): ネイティブ API の筋肉で DOM を粉砕。querySelector が $ より読めるという衝撃事実。[5][6]


モダン FW: React/Vue/Svelte… 仮想 DOM で世界を焼き直す...]]></description><link>https://zenn.dev/4_4_rest/articles/a1c9fca2b7b293</link><guid isPermaLink="true">https://zenn.dev/4_4_rest/articles/a1c9fca2b7b293</guid><pubDate>Tue, 08 Jul 2025 03:10:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cP8hKo2n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jQuery%2520%25E3%2582%2584%25E3%2582%2581%25E3%2582%2588%25E3%2581%2586%25E3%2581%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2585%25A8%25E4%25BC%2591%25E7%25AC%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlOGY1YTNlZjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>全休符</dc:creator></item><item><title><![CDATA[JavaScriptのモジュールシステムの20年：混乱、分裂、そして透明性を目指して]]></title><description><![CDATA[
 一、引言：「モジュール化」は本当に解決したのだろうか？
JavaScriptのモジュールシステムは標準化され、import/exportで終わりと思われているかもしれません。
しかし現実は違います：構築エラー、依存性衝突、ロード失敗...ほぼ日常茶食です。
&lt;script&gt; から require() 、そして import/exportへ。我々はずっと、過去の選択の緣因を支払っています。

 モジュールは本来、複雑な開発を支える基盤であるべきですが、JavaScriptにおいては常に難手な領域となっています。



 二、混乱の歴史：無法一線の20年

 1. モジュール...]]></description><link>https://zenn.dev/zoe_nichika/articles/5d79c8914edfcc</link><guid isPermaLink="true">https://zenn.dev/zoe_nichika/articles/5d79c8914edfcc</guid><pubDate>Mon, 07 Jul 2025 14:40:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fS_uoC-j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AE20%25E5%25B9%25B4%25EF%25BC%259A%25E6%25B7%25B7%25E4%25B9%25B1%25E3%2580%2581%25E5%2588%2586%25E8%25A3%2582%25E3%2580%2581%25E3%2581%259D%25E3%2581%2597%25E3%2581%25A6%25E9%2580%258F%25E6%2598%258E%25E6%2580%25A7%25E3%2582%2592%25E7%259B%25AE%25E6%258C%2587%25E3%2581%2597%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NichikaP%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiMDI5ZjQ1YmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NichikaP</dc:creator></item><item><title><![CDATA[ミニマムで理解するTypeScript入門]]></title><description><![CDATA[TypeScriptの説明をする際によく話す内容

 TypeScriptってなに？
TypeScriptは、MicroSoft製のAltJSの一種。

パッケージとしてインストールし、tsconfig.jsonで構文ルールを管理する方法が主流
「トランスパイル」という変換を実行すると、JavaScriptとして出力される

AltJS = JavaScript開発をより効率的にするための機能・ライブラリの一種

ほかには CoffeeScript などがある


 TypeScript の書き方

 簡単なサンプル
挨拶を標準出力するサンプルプログラム
const greetName ...]]></description><link>https://zenn.dev/slopwelljp/articles/fabec2857b0a3c</link><guid isPermaLink="true">https://zenn.dev/slopwelljp/articles/fabec2857b0a3c</guid><pubDate>Mon, 07 Jul 2025 14:17:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UukvEC04--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259F%25E3%2583%258B%25E3%2583%259E%25E3%2583%25A0%25E3%2581%25A7%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258BTypeScript%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2599%25E3%2582%258D%25E3%2581%25A3%25E3%2581%25BA%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlYTkxZDE2M2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>すろっぺる</dc:creator></item><item><title><![CDATA[Apple Silicon Macで始める Vue 3超入門 ―― Viteで秒速 Hello World]]></title><description><![CDATA[― “最新 Vite” で最短 Hello World！
!
対象:
MacBook (Apple Silicon) を買って「まずは Vue を触ってみたい」人
“ビルドツールの攻略” より “Vue を動かす楽しさ” を優先したい人


 1. 事前準備（5 分）



ツール
推奨バージョン
インストール例




Homebrew
最新
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"


Node.js
20 LTS

brew inst...]]></description><link>https://zenn.dev/exmedia/articles/vue-3-quickstart-on-apple-silicon</link><guid isPermaLink="true">https://zenn.dev/exmedia/articles/vue-3-quickstart-on-apple-silicon</guid><pubDate>Mon, 07 Jul 2025 12:18:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H4TrMXka--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Apple%2520Silicon%2520Mac%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2520Vue%25203%25E8%25B6%2585%25E5%2585%25A5%25E9%2596%2580%2520%25E2%2580%2595%25E2%2580%2595%2520Vite%25E3%2581%25A7%25E7%25A7%2592%25E9%2580%259F%2520Hello%2520World%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:exMedia%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjNzZmZjNmMmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>exMedia</dc:creator></item><item><title><![CDATA[Django REST framework(DRF)を使ったAPIサーバーとReactとのデータ連携]]></title><description><![CDATA[!
この記事は Qiita に2024年2月に投稿した内容を、再編集したものです。


 概要
今回はDjango REST frameworkを使用し、Django-adminで設計されたデータの取得とフロント側での表示を実装します。

 実装機能


Django REST framework(DRF)の導入
Django管理画面で実装したデータの取得




項番
記事




1
React + Django + CORSを使ったフロントエンド / バックエンドのデータ連携


2
Django 管理画面のカスタマイズ


3
Django REST framework(DRF)...]]></description><link>https://zenn.dev/xinome/articles/4ddf5b02bac39a</link><guid isPermaLink="true">https://zenn.dev/xinome/articles/4ddf5b02bac39a</guid><pubDate>Mon, 07 Jul 2025 10:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6m8u5rVL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%2520REST%2520framework%2528DRF%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259FAPI%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25A8React%25E3%2581%25A8%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E9%2580%25A3%25E6%2590%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:xinome%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzMTQ2NWJhZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>xinome</dc:creator></item><item><title><![CDATA[比較演算子 厳格な等価性と抽象的な等価性]]></title><description><![CDATA[
 まずは、比較演算子から解説していきましょう！
比較演算子とは、二つの値を比較するために使用する記号のことです。
==、===、&lt;、&gt;、など色々とありますが、今回は二つの値が等しいかどうかを確認するための==、===について解説していきます。

 ==、===のどちらにも共通していることは
値の比較があることです。

 ===は厳格な等価性
型の比較があります。型が異なっているとfalseを返します。

 ==は抽象的な等価性
型の比較がありません。型が異なっていても値が同じだとtrueを返します。

 初心者は===を推奨
==だと暗黙的な型変換が多く、バグが多くなるから...]]></description><link>https://zenn.dev/0xyusuke/articles/88b52a9b0741a0</link><guid isPermaLink="true">https://zenn.dev/0xyusuke/articles/88b52a9b0741a0</guid><pubDate>Mon, 07 Jul 2025 07:53:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u8SDQ8Xu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AF%2594%25E8%25BC%2583%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%2520%25E5%258E%25B3%25E6%25A0%25BC%25E3%2581%25AA%25E7%25AD%2589%25E4%25BE%25A1%25E6%2580%25A7%25E3%2581%25A8%25E6%258A%25BD%25E8%25B1%25A1%25E7%259A%2584%25E3%2581%25AA%25E7%25AD%2589%25E4%25BE%25A1%25E6%2580%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZnZ0WmRlX2xEd1R3bmxpekFYVkhXRl82VHJ5NVQ1VDZSYmNwSW9RUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[暗黙的な型変換]]></title><description><![CDATA[
 まずは、動的型付け言語と静的型付け言語の違いについて

 動的型付け言語とは？
変数宣言時の型の宣言がなく、変数使用時の状況によって型変換が起こる言語のことです。
なお、JavaScriptは動的型付け言語となります。

 静的型付け言語とは？
変数宣言時の型の宣言があり、変数使用時の状況がいかなる状況であっても、常に同じ変数の型を保持する言語のことです。

 暗黙的な型変換って何？
変数が呼ばれたときの状況に合わせて変数の型が自動的に変換されることです。
let str = "20";
let num = Number(str); // "20"の型は文字列ではなく整数になる

 ...]]></description><link>https://zenn.dev/0xyusuke/articles/07bf79b38f3699</link><guid isPermaLink="true">https://zenn.dev/0xyusuke/articles/07bf79b38f3699</guid><pubDate>Mon, 07 Jul 2025 07:28:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7X55gA1n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259A%2597%25E9%25BB%2599%25E7%259A%2584%25E3%2581%25AA%25E5%259E%258B%25E5%25A4%2589%25E6%258F%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZnZ0WmRlX2xEd1R3bmxpekFYVkhXRl82VHJ5NVQ1VDZSYmNwSW9RUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[[続き] Misoca API v3を使って、請求書を複製し続けたくなった]]></title><description><![CDATA[こんにちは☀️
TRUSTART株式会社のみつです！
前回の記事では、Misoca API v3を使ってみたり、請求書の複製をしてみたりしました。
せっかくなので実際に使いたい〜〜と思い、さらに気分で実装を続けている記事です！

 前回書いた記事
https://zenn.dev/trustart_dev/articles/ef4a4ffbf386b4

 前回まで
前回は、

認証までしてみる
トークンを取得してみる
リフレッシュトークンを取得して、使ってみる
請求書を取得してみる
請求書を複製してみる

をしました。
今回は、そのリフレッシュトークンが切れない（ローカルの実行では、....]]></description><link>https://zenn.dev/trustart_dev/articles/17f56412010254</link><guid isPermaLink="true">https://zenn.dev/trustart_dev/articles/17f56412010254</guid><pubDate>Mon, 07 Jul 2025 00:45:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--z9f0ZI3c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E7%25B6%259A%25E3%2581%258D%255D%2520Misoca%2520API%2520v3%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E8%25AB%258B%25E6%25B1%2582%25E6%259B%25B8%25E3%2582%2592%25E8%25A4%2587%25E8%25A3%25BD%25E3%2581%2597%25E7%25B6%259A%25E3%2581%2591%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:mi2__user%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4Y2I1MTc4ODAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TRUSTART%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4Mzg0MzQ2ZDEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mi2__user</dc:creator></item><item><title><![CDATA[データ型を表にまとめてみた]]></title><description><![CDATA[


データ型
説明




undefined
値が未定義であることを示す型


null
意図的に空であることを示す型


真偽値 (Boolean)

true または false の値を持つ型


数値 (Number)
整数や浮動小数点数を表す型


文字列 (String)
テキストデータを表し、シングルやダブルクォートで囲まれる型


シンボル (Symbol)
ユニークで不変な値を持つ型


ビッグイント (BigInt)
非常に大きな整数を表す型。非常に新しい型なので対応していないブラウザがあるかもしれない。


オブジェクト (Object)
プロパティと値の集合を表...]]></description><link>https://zenn.dev/0xyusuke/articles/279a57dd584a37</link><guid isPermaLink="true">https://zenn.dev/0xyusuke/articles/279a57dd584a37</guid><pubDate>Sun, 06 Jul 2025 20:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3DoHwxPr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%259E%258B%25E3%2582%2592%25E8%25A1%25A8%25E3%2581%25AB%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZnZ0WmRlX2xEd1R3bmxpekFYVkhXRl82VHJ5NVQ1VDZSYmNwSW9RUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item></channel></rss>