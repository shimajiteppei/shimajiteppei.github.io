<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/typescript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/typescript/feed"/>
  <title>TypeScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでTypeScriptタグが付けられた新着記事</description>
  <updated>2024-12-26T18:35:42+09:00</updated>
  <link>https://qiita.com/tags/typescript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1965287</id>
    <published>2024-12-26T18:35:42+09:00</published>
    <updated>2024-12-26T18:35:42+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yuto99999/items/28ef22227eab8ed42f3b"/>
    <url>https://qiita.com/yuto99999/items/28ef22227eab8ed42f3b</url>
    <title>【TypeScript】type-challenges 中級編 2・Tuple To Object 解説</title>
    <content type="html">お題
タプルの値からユニオン型を生成するTupleToUnion&amp;lt;T&amp;gt;を実装する。
やりたいこと
type Tuple = ["a", 123, true];

type TupleToUnion&amp;lt;T…</content>
    <author>
      <name>yuto99999</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1952730</id>
    <published>2024-12-26T18:08:54+09:00</published>
    <updated>2024-12-26T18:08:54+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/hato_code/items/e144d9ff84730d31890a"/>
    <url>https://qiita.com/hato_code/items/e144d9ff84730d31890a</url>
    <title>TypeScriptで学べるデザインパターン 〜Stateパターン〜 (状態をクラスとして表現する)</title>
    <content type="html">Stateパターン とは？
一言で言うと、
状態に応じて振る舞いを変更するパターンです。
詳しく言うと、
Stateパターンは、オブジェクトが持つ状態を別のクラスとして表現し、その状態に応じて動作を…</content>
    <author>
      <name>hato_code</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1954843</id>
    <published>2024-12-26T18:08:31+09:00</published>
    <updated>2024-12-26T18:08:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/hato_code/items/43ad5675ec753dbcd76c"/>
    <url>https://qiita.com/hato_code/items/43ad5675ec753dbcd76c</url>
    <title>TypeScriptで学べるデザインパターン 〜Strategyパターン〜 (アルゴリズムごと入れ替える)</title>
    <content type="html">Strategyパターン とは？
一言で言うと、
アルゴリズムを簡単に切り替えられるようにするパターン
詳しく言うと、
Strategyパターンは、似たような動作をするけど少しずつ違う方法（アルゴリ…</content>
    <author>
      <name>hato_code</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1954858</id>
    <published>2024-12-26T18:07:54+09:00</published>
    <updated>2024-12-26T18:07:54+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/hato_code/items/2d8ed431cf486450f039"/>
    <url>https://qiita.com/hato_code/items/2d8ed431cf486450f039</url>
    <title>TypeScriptで学べるデザインパターン 〜Visitorパターン〜 (構造を渡り歩きながら仕事する)</title>
    <content type="html">Visitorパターン とは？
一言で言うと、
オブジェクト構造を変更せずに新しい操作を追加できるパターンです。
詳しく言うと、
おもちゃ箱の中のおもちゃを、箱から出さずに新しい遊び方で遊べるように…</content>
    <author>
      <name>hato_code</name>
    </author>
  </entry>
</feed>
