<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 22 Mar 2025 10:05:02 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[std::thread::spawn で見る Rust の unsafe の責務と型システム]]></title><description><![CDATA[
 概要
Rustの標準ライブラリ内にstd::thread::spawnという関数があります。これは渡されたクロージャを実行するスレッドを新たに作成する関数で、並行プログラミング解説の文脈では最も基本的な例としてよく取り上げられると思います。そして同じように、このspawn関数に渡すクロージャのライフタイムに関する制限についても述べられることが多いです。クロージャの中から、その外で定義された変数を参照する場合はクロージャにmoveキーワードをつけて所有権を移さないといけないというあれのことです。本記事では、この所有権を移さないといけない(そうしないと型検査に通らない)ということが、型シ...]]></description><link>https://zenn.dev/ose20/articles/26cde561ded397</link><guid isPermaLink="true">https://zenn.dev/ose20/articles/26cde561ded397</guid><pubDate>Sat, 22 Mar 2025 09:48:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0GILQVxW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:std%253A%253Athread%253A%253Aspawn%2520%25E3%2581%25A7%25E8%25A6%258B%25E3%2582%258B%2520Rust%2520%25E3%2581%25AE%2520unsafe%2520%25E3%2581%25AE%25E8%25B2%25AC%25E5%258B%2599%25E3%2581%25A8%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ose20%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YWMwM2QzMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ose20</dc:creator></item><item><title><![CDATA[Rustとnextの使い分けかた]]></title><description><![CDATA[RustとNext.js（Reactベースのフレームワーク）は用途が大きく異なるので、それぞれの特性を理解した上で適材適所で使い分けるのが重要です。


 Rustの特徴と用途

Rustはシステムプログラミング向けの低レイヤ言語で、高速・安全・並行性の高さが特徴です。
✅ Rustを使うべきケース


パフォーマンスが重要なアプリケーション（例：ゲームエンジン、OS、データベース、ブロックチェーン）

メモリ安全性が求められるシステム（例：組み込みシステム、リアルタイム処理）

並行処理が必要なアプリケーション（例：マルチスレッド処理、高速なWebサーバー）

CLIツールやバックエン...]]></description><link>https://zenn.dev/lyre/articles/7d0cf76db5bc94</link><guid isPermaLink="true">https://zenn.dev/lyre/articles/7d0cf76db5bc94</guid><pubDate>Sat, 22 Mar 2025 06:48:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YMyJfZfs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8next%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%258B%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:lyre%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmZDFmOWJlZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>lyre</dc:creator></item><item><title><![CDATA[Rust非同期処理の仕組み：Future実行器とタスク管理]]></title><description><![CDATA[

 Future の定義
Future は Rust の非同期プログラミングの中核です。Future トレイトの定義は次の通りです：
#[must_use = "futures do nothing unless you `.await` or poll them"]
#[lang = "future_trait"]
pub trait Future {
    type Output;
    fn poll(self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;Self::Outp...]]></description><link>https://zenn.dev/leap_adam/articles/d1777c3276df12</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/d1777c3276df12</guid><pubDate>Fri, 21 Mar 2025 20:25:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iTFz6RY7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25EF%25BC%259AFuture%25E5%25AE%259F%25E8%25A1%258C%25E5%2599%25A8%25E3%2581%25A8%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【Rust】ジェネリクスを使いこなして型の柔軟性を手に入れろ！]]></title><description><![CDATA[https://doc.rust-lang.org/book/ch10-01-syntax.html
Rustのジェネリクスは、型安全性を保ちながらコードの再利用性を高めるために利用される機能です。ジェネリクスを使うことで、同じロジックを異なる型に対して適用することが可能になります。
この記事ではジェネリクスの基本的な使い方について解説します。
「The Rust Programming Language」を読んでもしっくり来ていないあなた、確実にこの記事で理解し、使いこなせるようになります。

 ジェネリクスとは
ジェネリクスとは、具体的な型を指定せずに抽象的に型を表現する方法です。こ...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/ba01cdd1705484</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/ba01cdd1705484</guid><pubDate>Fri, 21 Mar 2025 18:40:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KlpDPGwc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25A6%25E5%259E%258B%25E3%2581%25AE%25E6%259F%2594%25E8%25BB%259F%25E6%2580%25A7%25E3%2582%2592%25E6%2589%258B%25E3%2581%25AB%25E5%2585%25A5%25E3%2582%258C%25E3%2582%258D%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[276,406行のC++コードを捨ててRustへ移行したスタートアップの技術的決断]]></title><description><![CDATA[
 TL;DR

私たちはデータベースプロジェクトを再構築するために C++ を Rust に置き換えました。この記事では、その理由、直面した課題、そして Rust がプロダクションレベルのプロジェクトに適しているのはどんな時かについて説明します。

RisingWave  は、高性能なデータプラットフォームであり、ユーザーが馴染みのある SQL クエリを使って、イベントストリーミングのパイプラインやアプリケーションを数分で構築できるようにします。


 RisingWave を作り始めたとき

私たちが RisingWave の構築を始めたのは 2021 年初頭のことでした。当初は C...]]></description><link>https://zenn.dev/rwcolinpeng/articles/14760991836800</link><guid isPermaLink="true">https://zenn.dev/rwcolinpeng/articles/14760991836800</guid><pubDate>Fri, 21 Mar 2025 16:21:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--J_6A04Sy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:276%252C406%25E8%25A1%258C%25E3%2581%25AEC%252B%252B%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%258D%25A8%25E3%2581%25A6%25E3%2581%25A6Rust%25E3%2581%25B8%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E7%259A%2584%25E6%25B1%25BA%25E6%2596%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:RisingWave%2520Labs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZmFjMDNiZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>RisingWave Labs</dc:creator></item><item><title><![CDATA[Rustの「トレイト」が理解しにくい原因（個人の感想です）]]></title><description><![CDATA[
 Rustの「トレイト」が理解しにくい原因（個人の感想です）
「トレイト（Trait）はインターフェースで、構造体はそれを実装するもの」 というのは何となく理解してます。
でも、
「impl &lt;Trait名&gt; for &lt;Struct名&gt;」
って腹落ちしないんです。
なんかこう…「わかるけど、しっくりこない！」
わかりにくさの正体は、たぶん 「語順」 なんじゃないか？って最近思いました。

 こんなふうに感じません？
たとえば、JavaやTypeScriptでインターフェースを実装するときって…
class Dog implements Walk {
    pu...]]></description><link>https://zenn.dev/nakkiy/articles/48dc4445174524</link><guid isPermaLink="true">https://zenn.dev/nakkiy/articles/48dc4445174524</guid><pubDate>Fri, 21 Mar 2025 14:18:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JGDdQbLH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2580%258C%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2580%258D%25E3%2581%258C%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25AB%25E3%2581%258F%25E3%2581%2584%25E5%258E%259F%25E5%259B%25A0%25EF%25BC%2588%25E5%2580%258B%25E4%25BA%25BA%25E3%2581%25AE%25E6%2584%259F%25E6%2583%25B3%25E3%2581%25A7%25E3%2581%2599%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakkiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDRQblR4S1NRMWFmaGVudU0yT1MyNUdYNmtrQnUxY1RFMEZyNW1kZkNVR1haQTRBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakkiy</dc:creator></item><item><title><![CDATA[Cloudflare R2から取ってきた画像をwasm(Rust)で加工する]]></title><description><![CDATA[
 はじめに
タイトル通りのことをやろうとしたら、ちょっとつまづいたので自分のメモがてら記事を書きます。
wasmやRustについて詳しくは解説しません。
参考サイト
https://developer.mozilla.org/ja/docs/WebAssembly/Guides/Rust_to_Wasm
完成したやつ
https://image.thirdlf03.com
リポジトリ
https://github.com/thirdlf03/image-process-wasm

 環境準備
まず、wasm-packをインストールしてない場合はインストール
cargo install ...]]></description><link>https://zenn.dev/thirdlf/articles/19-zenn-wasm-image-process</link><guid isPermaLink="true">https://zenn.dev/thirdlf/articles/19-zenn-wasm-image-process</guid><pubDate>Fri, 21 Mar 2025 14:14:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0nTy-Pvh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520R2%25E3%2581%258B%25E3%2582%2589%25E5%258F%2596%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258D%25E3%2581%259F%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592wasm%2528Rust%2529%25E3%2581%25A7%25E5%258A%25A0%25E5%25B7%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:thirdlf%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkMDkwNDAyMzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>thirdlf</dc:creator></item><item><title><![CDATA[【Shuttle／Axum／Yew】Rust製WebサイトでZennRSSを公開する]]></title><description><![CDATA[
 ほぼRustだけで自分のサイトを作る
そもそもZennには、ユーザー毎にRSSがあるようです。https://zenn.dev/ユーザー名/feedで取得することができます。即ち私(ユーザー名：amenaruya)のRSSはhttps://zenn.dev/amenaruya/feedです。
より詳しい仕様はこちらにあります。せっかくならばと、上のURLに?all=1と続け、全てのRSSを取得することにしました。
https://zenn.dev/zenn/articles/zenn-feed-rss
ところでRSSを取得できるとはいうものの、XML型式のデータが取得できるだけです。...]]></description><link>https://zenn.dev/amenaruya/articles/76011b6a31541b</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/76011b6a31541b</guid><pubDate>Fri, 21 Mar 2025 01:43:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JAhEmoOF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Shuttle%25EF%25BC%258FAxum%25EF%25BC%258FYew%25E3%2580%2591Rust%25E8%25A3%25BDWeb%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7ZennRSS%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[RustのAsync/Await入門ガイド]]></title><description><![CDATA[

 Rust の非同期プログラミングにおける async/.await
async/.await は Rust に組み込まれた言語機能であり、同期コードのように記述しながら非同期処理を行うことができます。
それでは、async/.await の使い方を例を通じて学びましょう。始める前に、futures クレートを追加する必要があります。Cargo.toml ファイルを編集し、以下の内容を追加してください。
[dependencies]
futures = "0.3"

 async を使って非同期 Future を作成する
簡単に言えば、async キーワードは次のような Future...]]></description><link>https://zenn.dev/leap_adam/articles/2f11f272bf8e40</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/2f11f272bf8e40</guid><pubDate>Thu, 20 Mar 2025 20:39:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UgESmI-k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEAsync%252FAwait%25E5%2585%25A5%25E9%2596%2580%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【Rust】構造体を理解する]]></title><description><![CDATA[Rsutの構造体(Struct)は複数の関連する値をひとつのデータ型を名前をつけて独自のデータ型として扱うための仕組みです。
この記事では、構造体の使い方、種類、設計のポイントについて解説します。

 構造体とは
構造体(Struct)は複数の関連する値をひとつのデータ型を名前をつけて独自のデータ型として管理する仕組みです。他のプログラミング言語の「クラス」に似ていますが、Rustの構造体は単なるデータの集まりを表すだけであり、メソッドを直接持つことはできません。しかし、impl を使うことで、構造体に関連するメソッドを定義できます。

 構造体の種類
Rustでは3種類の構造体が用意さ...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/8d5c463f3a150e</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/8d5c463f3a150e</guid><pubDate>Thu, 20 Mar 2025 17:02:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oaAZV-t5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[DuckDB Local UI みたいな拡張を Rust で書いてみようとしたときのメモ（v1.2.1 時点）]]></title><description><![CDATA[え、DuckDB の拡張って Rust で書けんの？？、という人は、以下の記事に状況をまとめたのでそっちを読んでください。ここではもっと細かい話をします。
https://zenn.dev/yutannihilation/articles/663c879b74343c

 DuckDB Local UI
MotherDuck の UI みたいなやつが表示できる拡張です。CALL start_ui() とやると、ウェブブラウザが立ち上がってブラウザ上からいろいろできるようになります。
https://duckdb.org/2025/03/12/duckdb-ui.html
私がこれを見て思...]]></description><link>https://zenn.dev/yutannihilation/articles/60ba80ea71dbe9</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/60ba80ea71dbe9</guid><pubDate>Thu, 20 Mar 2025 14:32:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xnk1Ub8V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DuckDB%2520Local%2520UI%2520%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%25EF%25BC%2588v1.2.1%2520%25E6%2599%2582%25E7%2582%25B9%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[Rust× Envoy を活用したマイクロサービス実装入門]]></title><description><![CDATA[
 概要

Rust で gRPC サーバーを構築し、Envoy を API ゲートウェイとして組み合わせたマイクロサービスの基盤を作成しました。本記事では、その設計・実装・課題・今後の展望について詳しく解説します。
また、本記事では図解もふんだんに載せておりますので、流し見でも大枠はつかめるかと思います。

 はじめに


なぜ Rust なのか？
Rust言語はgRPCを用いたマイクロサービスアーキテクチャを構築する場合に以下のような利点があります。

🔸高速性とメモリ安全性
C++に勝るとも劣らない実行スピード、そしてメモリリークの起きにくい

🔸強力な型システムによるバグ防止
多...]]></description><link>https://zenn.dev/kazuma0606/articles/819da6b9fce6fa</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/819da6b9fce6fa</guid><pubDate>Thu, 20 Mar 2025 10:56:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6K1qQfA0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25C3%2597%2520Envoy%2520%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E5%25AE%259F%25E8%25A3%2585%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[【Rust】sqlxでコンパイルエラーが発生する]]></title><description><![CDATA[
 はじめに
sqlxでDB接続する処理があってローカルではDBを起動していたのでビルドも通っていました。
Github Actionでビルドして問題ないかチェックするようにしていたのですが、以下のようなエラーが発生してしまいました。
🏗️
error: error communicating with database: Connection refused (os error 111)
  --&gt; src/infrastructure/report_repository.rs:87:20
   |
87 |           let rows = sqlx::query!(
...]]></description><link>https://zenn.dev/devtatsu/articles/rust-sqlx-compile-error</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/rust-sqlx-compile-error</guid><pubDate>Thu, 20 Mar 2025 04:18:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nB3KyAb3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591sqlx%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E7%2599%25BA%25E7%2594%259F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item><item><title><![CDATA[【Rust】RustのVecと仲良くなる]]></title><description><![CDATA[Rustの Vec&lt;T&gt; (ベクタ）は、動的な配列としてよく使われるコレクション型です。
Rubyなどのインタプリタ言語を普段使ってる方からすると、動的に自動拡張する配列は当たり前かもしれませんが、CやRustのようなコンパイラ言語では、配列は基本的に固定長であり、動的に要素数を変更できるデータ構造は別の仕組みとして提供されます。Rustでは、この役割を果たすのが標準ライブラリの Vec&lt;T&gt; です。
この記事では、Vecの基本から、所有権や借用、イテレータの活用方法を解説し、Vecと仲良くなることを目的としています。

 Vecとは？
https://doc.r...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/7592102e4dc7bf</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/7592102e4dc7bf</guid><pubDate>Thu, 20 Mar 2025 03:04:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IMOqUbKq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Rust%25E3%2581%25AEVec%25E3%2581%25A8%25E4%25BB%25B2%25E8%2589%25AF%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[nova_vmのバイトコード処理のコードリーディング]]></title><description><![CDATA[最近Novaで実装したい機能のためにbytecode_compiler.rsとその周辺をを読んでいるのでメモがてら書く。
本当にただのメモなので、多分読んでも面白くない。

 内容
そもそもバイトコードとは、高級言語のコードを仮想マシン向けに変換した中間コードのこと。NovaのVMでは、このバイトコードを解釈・実行することでJavaScriptを処理する。
今回は以下のコマンドを実行した時の動作を想定して、コードを読んでいく。
ここではコマンドの詳細は省く。
cargo run --features typescript eval index.ts
まず一番トップはnova_cliから始...]]></description><link>https://zenn.dev/yuto76/articles/0361c985197b48</link><guid isPermaLink="true">https://zenn.dev/yuto76/articles/0361c985197b48</guid><pubDate>Tue, 18 Mar 2025 23:38:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ge0iUbM2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:nova_vm%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A6%25E3%2582%25A6%25E3%2583%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4NzFiYTNmNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ユウト</dc:creator></item><item><title><![CDATA[IT技術解説③：なぜ、組み込み業界ではRustが流行らず、未だC言語が主流なのか？]]></title><description><![CDATA[
 はじめに
組み込みソフトウェア開発の世界では、プログラミング言語の選択が製品の品質、開発効率、そして長期保守性に大きな影響を与えます。近年、メモリ安全性や並行処理の安全性を強みとするRust言語が様々な分野で注目を集め、採用が進んでいます。Webバックエンド、システムプログラミング、そしてLinuxカーネルのような重要なプロジェクトでもRustの導入が進んでいるにもかかわらず、組み込み開発の現場では依然としてC言語が主流であり続けています。本稿では、最新の安全な言語であるRustが、なぜ組み込み開発において広く採用されず、数十年の歴史を持つC言語が今なお主要な選択肢であり続けているの...]]></description><link>https://zenn.dev/pdfractal/articles/c16508c4fbba29</link><guid isPermaLink="true">https://zenn.dev/pdfractal/articles/c16508c4fbba29</guid><pubDate>Tue, 18 Mar 2025 17:18:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YaN1KqI1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IT%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%25E2%2591%25A2%25EF%25BC%259A%25E3%2581%25AA%25E3%2581%259C%25E3%2580%2581%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E6%25A5%25AD%25E7%2595%258C%25E3%2581%25A7%25E3%2581%25AFRust%25E3%2581%258C%25E6%25B5%2581%25E8%25A1%258C%25E3%2582%2589%25E3%2581%259A%25E3%2580%2581%25E6%259C%25AA%25E3%2581%25A0C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%258C%25E4%25B8%25BB%25E6%25B5%2581%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pdfractal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5MjFkMjlhMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pdfractal</dc:creator></item><item><title><![CDATA[ABC397:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 397のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc397/tasks/abc397_a
解説
X の値に応じて、1~3のいずれかを出力します。


X が38.0以上の場合は、1を出力

X が37.5以上の場合は、2を出力

X が37.5未満の場合は、3を出力

コード

ABC397a.rs
use proconio::input;
fn main() {
    // 入力
    input!{
        x: f64,
    }...]]></description><link>https://zenn.dev/nakst_hide/articles/c9f8d735da4457</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/c9f8d735da4457</guid><pubDate>Tue, 18 Mar 2025 12:02:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9mrK1WtU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC397%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[RustでApache Parquetの読み書きをしてみた]]></title><description><![CDATA[
 目的
CSVの代替としてApache Paquetを扱う話がでてきたので、Rustで簡単な読み書きをやってみます。

 Apache Parquet
本家サイトApache Parquetによれば、
「Apache Parquetは、効率的なデータの保存と取得のために設計された、オープンソースの列指向データファイル形式です。複雑なデータを一括処理するための高性能な圧縮およびエンコードスキームを提供し、多くのプログラミング言語や分析ツールでサポートされています。」
とのことです。
自分の理解だと検索のパフォーマンスが良くて、サイズも小さくて、汎用性もあって使い勝手の良いベターCSVとい...]]></description><link>https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</guid><pubDate>Tue, 18 Mar 2025 10:40:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m1YbQ-fk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Apache%2520Parquet%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E6%259B%25B8%25E3%2581%258D%25E3%2582%2592%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[[Rust] Iterator トレイトで自分がよく使うメソッドまとめ]]></title><description><![CDATA[
 一覧



メソッド名
役割




all
全ての要素が条件を満たすかの確認


any
条件を満たす要素が１つでもあるかの確認


cloned
イテレータの各要素をクローンして、新しいイテレータを作成する。


collect
イテレータをコレクションに変換する


count
要素数（ただし、イテレータを消費する）


filter
条件を満たす要素のみで、新たにイテレータを作成する


filter_map
filterとmapの機能を組み合わせたもの


find
条件を満たす最初の要素を返す


find_map
findとmapの機能を組み合わせたもの


map
各...]]></description><link>https://zenn.dev/dio0550/articles/a5a2367923b10c</link><guid isPermaLink="true">https://zenn.dev/dio0550/articles/a5a2367923b10c</guid><pubDate>Mon, 17 Mar 2025 12:28:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9n4jbsqX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Iterator%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E3%2581%258C%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dio%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzU3UEdJY0o5Tmx1MjBwWHZFY183MmZ1Z3djbFBQZVRsRUtFdDMtU0RSMmpSNUl3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dio</dc:creator></item><item><title><![CDATA[RustからMSEdgeDriverを操作するサンプル]]></title><description><![CDATA[こんにちは　あいおんです。
RustからMSEdgeDriverを操作するサンプルを作ったので公開します。

 背景
JTCをはじめ、社内だとChromeではなく、Edgeを使っているケースもあるんじゃないかなと思います。
そんな会社向けの記事です。（ただし、そんな会社がRustを使えるようになっているかというのは…）
また、Pythonとかでやればいいじゃん、というのはごもっともです。（が、いいんです。Rustでやりたかったんです。）

 実装
作ったものは以下です。
https://github.com/aion0721/Rust-Msedgedriver-sample/tree/m...]]></description><link>https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</link><guid isPermaLink="true">https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</guid><pubDate>Mon, 17 Mar 2025 10:11:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--So1JN_bu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%258B%25E3%2582%2589MSEdgeDriver%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aion%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmODNlYzkzYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aion</dc:creator></item></channel></rss>