<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2025-10-15T16:05:08+00:00</updated>

    
    <entry>
        <title>Announcing the New Rust Project Directors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/" type="text/html" title="Announcing the New Rust Project Directors" />
        <published>2025-10-15T00:00:00+00:00</published>
        <updated>2025-10-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/">&lt;p&gt;We are happy to announce that we have completed the annual process to elect new Project Directors.&lt;/p&gt;
&lt;p&gt;The new Project Directors are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco/&quot;&gt;David Wood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jackh726/&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis/&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They will join &lt;a href&#x3D;&quot;https://github.com/rylev&quot;&gt;Ryan Levick&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/carols10cents&quot;&gt;Carol Nichols&lt;/a&gt; to make up the five members of the Rust Foundation Board of Directors who represent the Rust Project.&lt;/p&gt;
&lt;p&gt;We would also like to thank the outgoing going Project Directors for contributions and service:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/JakobDegen&quot;&gt;Jakob Degen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;Santiago Pastorino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;Scott McMurray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The board is made up of Project Directors, who come from and represent the Rust Project, and Member Directors, who represent the corporate members of the Rust Foundation. Both of these director groups have equal voting power.&lt;/p&gt;
&lt;p&gt;We look forward to working with and being represented by this new group of project directors.&lt;/p&gt;
&lt;p&gt;We were fortunate to have a number of excellent candidates and this was a difficult decision. We wish to express our gratitude to all of the candidates who were considered for this role! We also extend our thanks to the project as a whole who participated by nominating candidates and providing additional feedback once the nominees were published.&lt;/p&gt;
&lt;p&gt;Finally, we want to share our appreciation for &lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;Tomas Sedovic&lt;/a&gt; for facilitating the election process. An overview of the election process can be found in a previous blog post &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/08/30/electing-new-project-directors/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Leadership Council</name>
        </author>
    </entry>
    <entry>
        <title>crates.io: Malicious crates faster_log and async_println</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/" type="text/html" title="crates.io: Malicious crates faster_log and async_println" />
        <published>2025-09-24T00:00:00+00:00</published>
        <updated>2025-09-24T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/">&lt;p&gt;&lt;strong&gt;Updated September 24th, 2025 17:34:38 UTC&lt;/strong&gt; - Socket has also published their own &lt;a href&#x3D;&quot;https://socket.dev/blog/two-malicious-rust-crates-impersonate-popular-logger-to-steal-wallet-keys&quot;&gt;accompanying blog post&lt;/a&gt; about the attack.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;summary&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#summary&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Summary&lt;/h2&gt;
&lt;p&gt;On September 24th, the crates.io team was notified by Kirill Boychenko from the &lt;a href&#x3D;&quot;https://www.socket.dev/&quot;&gt;Socket Threat Research Team&lt;/a&gt; of two malicious crates which were actively searching file contents for Etherum private keys, Solana private keys, and arbitrary byte arrays for exfiltration.&lt;/p&gt;
&lt;p&gt;These crates were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;faster_log&lt;/code&gt; - Published on May 25th, 2025, downloaded 7181 times&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_println&lt;/code&gt; - Published on May 25th, 2025, downloaded 1243 times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The malicious code was executed at runtime, when running or testing a project depending on them. Notably, they did not execute any malicious code at build time. Except for their malicious payload, these crates copied the source code, features, and documentation of legitimate crates, using a similar name to them (a case of typosquatting&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-typosquatting-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-typosquatting&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;actions-taken&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#actions-taken&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Actions taken&lt;/h2&gt;
&lt;p&gt;The users in question were immediately disabled, and the crates in question were deleted&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-deletion-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-deletion&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; from crates.io shortly after. We have retained copies of all logs associated with the users and the malicious crate files for further analysis.&lt;/p&gt;
&lt;p&gt;The deletion was performed at 15:34 UTC on September 24, 2025.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;analysis&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#analysis&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Analysis&lt;/h2&gt;
&lt;p&gt;Both crates were copies of a crate which provided logging functionality, and the logging implementation remained functional in the malicious crates. The original crate had a feature which performed log file packing, which iterated over an associated directories files.&lt;/p&gt;
&lt;p&gt;The attacker inserted code to perform the malicious action during a log packing operation, which searched the log files being processed from that directory for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quoted Ethereum private keys (0x + 64 hex)&lt;/li&gt;
&lt;li&gt;Solana-style Base58 secrets&lt;/li&gt;
&lt;li&gt;Bracketed byte arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The crates then proceeded to exfiltrate the results of this search to &lt;code&gt;https://mainnet[.]solana-rpc-pool[.]workers[.]dev/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These crates had no dependent downstream crates on crates.io.&lt;/p&gt;
&lt;p&gt;The malicious users associated with these crates had no other crates or publishes, and the team is actively investigating associative actions in our retained&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-retention-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-retention&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; logs.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;thanks&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Thanks&lt;/h2&gt;
&lt;p&gt;Our thanks to Kirill Boychenko from the &lt;a href&#x3D;&quot;https://www.socket.dev/&quot;&gt;Socket Threat Research Team&lt;/a&gt; for reporting the crates. We also want to thank Carol Nichols from the crates.io team, Pietro Albini from the Rust Security Response WG and Walter Pearce from the &lt;a href&#x3D;&quot;https://foundation.rust-lang.org/&quot;&gt;Rust Foundation&lt;/a&gt; for aiding in the response.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol class&#x3D;&quot;footnotes-list&quot;&gt;
&lt;li id&#x3D;&quot;fn-typosquatting&quot;&gt;
&lt;p&gt;typosquatting is a technique used by bad actors to initiate dependency confusion attacks where a legitimate user might be tricked into using a malicious dependency instead of their intended dependency — for example, a bad actor might try to publish a crate at &lt;code&gt;proc-macro3&lt;/code&gt; to catch users of the legitimate &lt;code&gt;proc-macro2&lt;/code&gt; crate. &lt;a href&#x3D;&quot;#fr-typosquatting-1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-deletion&quot;&gt;
&lt;p&gt;The crates were preserved for future analysis should there be other attacks, and to inform scanning efforts in the future. &lt;a href&#x3D;&quot;#fr-deletion-1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-retention&quot;&gt;
&lt;p&gt;One year of logs are retained on crates.io, but only 30 days are immediately available on our log platform. We chose not to go further back in our analysis, since IP address based analysis is limited by the use of dynamic IP addresses in the wild, and the relevant IP address being part of an allocation to a residential ISP. &lt;a href&#x3D;&quot;#fr-retention-1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Walter Pearce</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.90.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/" type="text/html" title="Announcing Rust 1.90.0" />
        <published>2025-09-18T00:00:00+00:00</published>
        <updated>2025-09-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.90.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via &lt;code&gt;rustup&lt;/code&gt;, you can get 1.90.0 with:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;console&quot; class&#x3D;&quot;language-console z-code&quot;&gt;&lt;code class&#x3D;&quot;language-console&quot; data-lang&#x3D;&quot;console&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ rustup update stable
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/releases.html#version-1900-2025-09-18&quot;&gt;detailed release notes for 1.90.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-s-in-1-90-0-stable&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-s-in-1-90-0-stable&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What&#x27;s in 1.90.0 stable&lt;/h2&gt;
&lt;h1 id&#x3D;&quot;lld-is-now-the-default-linker-on-x86-64-unknown-linux-gnu&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#lld-is-now-the-default-linker-on-x86-64-unknown-linux-gnu&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
LLD is now the default linker on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; target will now use the LLD linker for linking Rust crates by default. This should result in improved linking performance vs the default Linux linker (BFD), particularly for large binaries, binaries with a lot of debug information, and for incremental rebuilds.&lt;/p&gt;
&lt;p&gt;In the vast majority of cases, LLD should be backwards compatible with BFD, and you should not see any difference other than reduced compilation time. However, if you do run into any new linker issues, you can always opt out using the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; compiler flag. Either by adding it to the usual &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, or to a project&#x27;s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; configuration file,
like so:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;target&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;x86_64-unknown-linux-gnu&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;rustflags&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;-Clinker-features&#x3D;-lld&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you encounter any issues with the LLD linker, please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;let us know&lt;/a&gt;. You can read more about the switch to LLD, some benchmark numbers and the opt out mechanism &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;cargo-adds-native-support-for-workspace-publishing&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#cargo-adds-native-support-for-workspace-publishing&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Cargo adds native support for workspace publishing&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo publish --workspace&lt;/code&gt; is now supported, automatically publishing all of
the crates in a workspace in the right order (following any dependencies
between them).&lt;/p&gt;
&lt;p&gt;This has long been possible with external tooling or manual ordering of
individual publishes, but this brings the functionality into Cargo itself.&lt;/p&gt;
&lt;p&gt;Native integration allows Cargo&#x27;s publish verification to run a build across
the full set of to-be-published crates &lt;em&gt;as if&lt;/em&gt; they were published, including
during dry-runs. Note that publishes are still not atomic -- network errors or
server-side failures can still lead to a partially published workspace.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Demoting &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; to Tier 2 with host tools&lt;/h3&gt;
&lt;p&gt;GitHub will soon &lt;a href&#x3D;&quot;https://github.blog/changelog/2025-07-11-upcoming-changes-to-macos-hosted-runners-macos-latest-migration-and-xcode-support-policy-updates/#macos-13-is-closing-down&quot;&gt;discontinue&lt;/a&gt; providing free macOS x86_64 runners for public repositories. Apple has also announced their &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Apple_silicon#Timeline&quot;&gt;plans&lt;/a&gt; for discontinuing support for the x86_64 architecture.&lt;/p&gt;
&lt;p&gt;In accordance with these changes, as of Rust 1.90, we have &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3841&quot;&gt;demoted the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target&lt;/a&gt; from &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-1-with-host-tools&quot;&gt;Tier 1 with host tools&lt;/a&gt; to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-2-with-host-tools&quot;&gt;Tier 2 with host tools&lt;/a&gt;. This means that the target, including tools like &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;, will be guaranteed to build but is not guaranteed to pass our automated test suite.&lt;/p&gt;
&lt;p&gt;For users, this change will not immediately cause impact. Builds of both the standard library and the compiler will still be distributed by the Rust Project for use via &lt;code&gt;rustup&lt;/code&gt; or alternative installation methods while the target remains at Tier 2. Over time, it&#x27;s likely that reduced test coverage for this target will cause things to break or fall out of compatibility with no further announcements.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.checked_sub_signed&quot;&gt;&lt;code&gt;u{n}::checked_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.overflowing_sub_signed&quot;&gt;&lt;code&gt;u{n}::overflowing_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.saturating_sub_signed&quot;&gt;&lt;code&gt;u{n}::saturating_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.wrapping_sub_signed&quot;&gt;&lt;code&gt;u{n}::wrapping_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/enum.IntErrorKind.html#impl-Copy-for-IntErrorKind&quot;&gt;&lt;code&gt;impl Copy for IntErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/enum.IntErrorKind.html#impl-Hash-for-IntErrorKind&quot;&gt;&lt;code&gt;impl Hash for IntErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3C%26CStr%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3CCString%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CString&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3CCow%3C&amp;#x27;_,+CStr%3E%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;Cow&amp;lt;CStr&amp;gt;&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3C%26CStr%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3CCStr%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CStr&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3CCow%3C&amp;#x27;_,+CStr%3E%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;Cow&amp;lt;CStr&amp;gt;&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3C%26CStr%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3CCStr%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CStr&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3CCString%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CString&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These previously stable APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::reverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.floor&quot;&gt;&lt;code&gt;f32::floor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.ceil&quot;&gt;&lt;code&gt;f32::ceil&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.trunc&quot;&gt;&lt;code&gt;f32::trunc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.fract&quot;&gt;&lt;code&gt;f32::fract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.round&quot;&gt;&lt;code&gt;f32::round&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.round_ties_even&quot;&gt;&lt;code&gt;f32::round_ties_even&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.floor&quot;&gt;&lt;code&gt;f64::floor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.ceil&quot;&gt;&lt;code&gt;f64::ceil&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.trunc&quot;&gt;&lt;code&gt;f64::trunc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.fract&quot;&gt;&lt;code&gt;f64::fract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.round&quot;&gt;&lt;code&gt;f64::round&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.round_ties_even&quot;&gt;&lt;code&gt;f64::round_ties_even&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;platform-support&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#platform-support&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Platform Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt; is now a tier 2 target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to Rust’s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/platform-support.html&quot;&gt;platform support page&lt;/a&gt; for more information on Rust’s tiered platform support.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;other-changes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.90.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html#cargo-190-2025-09-18&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-190&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;contributors-to-1-90-0&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#contributors-to-1-90-0&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Contributors to 1.90.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.90.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.90.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>crates.io phishing campaign</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/" type="text/html" title="crates.io phishing campaign" />
        <published>2025-09-12T00:00:00+00:00</published>
        <updated>2025-09-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/">&lt;p&gt;We received multiple reports of a phishing campaign targeting crates.io users
(from the &lt;code&gt;rustfoundation.dev&lt;/code&gt; domain name), mentioning a compromise of our
infrastructure and asking users to authenticate to limit damage to their crates.&lt;/p&gt;
&lt;p&gt;These emails are malicious and come from a domain name not controlled by  the
Rust Foundation (nor the Rust Project), seemingly with the purpose of stealing
your GitHub credentials. We have no evidence of a compromise of the crates.io
infrastructure.&lt;/p&gt;
&lt;p&gt;We are taking steps to get the domain name taken down and to monitor for
suspicious activity on crates.io. Do not follow any links in these emails if you
receive them, and mark them as phishing with your email provider.&lt;/p&gt;
&lt;p&gt;If you have any further questions please reach out to &lt;a href&#x3D;&quot;mailto:security@rust-lang.org&quot;&gt;security@rust-lang.org&lt;/a&gt;
and &lt;a href&#x3D;&quot;mailto:help@crates.io&quot;&gt;help@crates.io&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Rust Security Response WG, crates.io team</name>
        </author>
    </entry>
    <entry>
        <title>Rust compiler performance survey 2025 results</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/" type="text/html" title="Rust compiler performance survey 2025 results" />
        <published>2025-09-10T00:00:00+00:00</published>
        <updated>2025-09-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/">&lt;p&gt;Two months ago, we launched the first &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025&quot;&gt;Rust Compiler Performance Survey&lt;/a&gt;, with the goal of helping us understand the biggest pain points of Rust developers related to build performance. It is clear that this topic is very important for the Rust community, as the survey received over 3 700 responses! We would like to thank everyone who participated in the survey, and especially those who described their workflows and challenges with an open answer. We plan to run this survey annually, so that we can observe long-term trends in Rust build performance and its perception.&lt;/p&gt;
&lt;p&gt;In this post, we&#x27;ll show some interesting results and insights that we got from the survey and promote work that we have already done recently or that we plan to do to improve the build performance of Rust code. If you would like to examine the complete results of the survey, you can find them &lt;a href&#x3D;&quot;https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2025/compiler-performance-survey/report/compiler-performance-2025-report.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And now strap in, as there is a lot of data to explore! As this post is relatively long, here is an index of topics that it covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#overall-satisfaction&quot;&gt;Overall satisfaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#important-workflows&quot;&gt;Important workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#incremental-rebuilds&quot;&gt;Incremental rebuilds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#type-checking-and-ide-performance&quot;&gt;Type checking and IDE performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#clean-and-ci-builds&quot;&gt;Clean and CI builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#debug-information&quot;&gt;Debug information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#workarounds-for-improving-build-performance&quot;&gt;Workarounds for improving build performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#understanding-why-builds-are-slow&quot;&gt;Understanding why builds are slow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;overall-satisfaction&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#overall-satisfaction&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Overall satisfaction&lt;/h2&gt;
&lt;p&gt;To understand the overall sentiment, we asked our respondents to rate their satisfaction with their build performance, on a scale from 0 (worst) to 10 (best). The average rating was 6, with most people rating their experience with 7 out of 10:&lt;/p&gt;
&lt;!-- Chart satisfaction start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;satisfaction&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;satisfaction&quot; src&#x3D;&quot;satisfaction.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;satisfaction.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;satisfaction.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart satisfaction end --&gt;
&lt;p&gt;To help us understand the overall build experience in more detail, we also analyzed all open answers (over a thousand of them) written by our respondents, to help us identify several recurring themes, which we will discuss in this post.&lt;/p&gt;
&lt;p&gt;One thing that is clear from both the satisfaction rating and the open answers is that the build experience differs wildly across users and workflows, and it is not as clear-cut as &quot;Rust builds are slow&quot;. We actually received many positive comments about users being happy with Rust build performance, and appreciation for it being improved vastly over the past several years to the point where it stopped being a problem.&lt;/p&gt;
&lt;p&gt;People also liked to compare their experience with other competing technologies. For example, many people wrote that the build performance of Rust is not worse, or is even better, than what they saw with C++. On the other hand, others noted that the build performance of languages such as Go or Zig is much better than that of Rust.&lt;/p&gt;
&lt;p&gt;While it is great to see some developers being happy with the state we have today, it is clear that many people are not so lucky, and Rust&#x27;s build performance limits their productivity. Around 45% respondents who answered that they are no longer using Rust said that at least one of the reasons why they stopped were long compile times.&lt;/p&gt;
&lt;p&gt;In our survey we received a lot of feedback pointing out real issues and challenges in several areas of build performance, which is what we will focus on in this post.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;important-workflows&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#important-workflows&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Important workflows&lt;/h2&gt;
&lt;p&gt;The challenges that Rust developers experience with build performance are not always as simple as the compiler itself being slow. There are many diverse workflows with competing trade-offs, and optimizing build performance for them might require completely different solutions. Some approaches for improving build performance can also be quite unintuitive. For example, stabilizing certain language features could help remove the need for certain build scripts or proc macros, and thus speed up compilation across the Rust ecosystem. You can watch &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;-jy4HaNEJCo&quot;&gt;this talk&lt;/a&gt; from RustWeek about build performance to learn more.&lt;/p&gt;
&lt;p&gt;It is difficult to enumerate all possible build workflows, but we at least tried to ask about workflows that we assumed are common and could limit the productivity of Rust developers the most:&lt;/p&gt;
&lt;!-- Chart limiting-workflows start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;limiting-workflows&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;limiting-workflows&quot; src&#x3D;&quot;limiting-workflows.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;limiting-workflows.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;limiting-workflows.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart limiting-workflows end --&gt;
&lt;p&gt;We can see that all the workflows that we asked about cause significant problems to at least a fraction of the respondents, but some of them more so than others. To gain more information about the specific problems that developers face, we also asked a more detailed, follow-up question:&lt;/p&gt;
&lt;!-- Chart problems start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;problems&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;problems&quot; src&#x3D;&quot;problems.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;problems.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;problems.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart problems end --&gt;
&lt;p&gt;Based on the answers to these two questions and other experiences shared in the open answers, we identified three groups of workflows that we will discuss next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incremental rebuilds after making a small change&lt;/li&gt;
&lt;li&gt;Type checking using &lt;code&gt;cargo check&lt;/code&gt; or with a code editor&lt;/li&gt;
&lt;li&gt;Clean, from-scratch builds, including CI builds&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;incremental-rebuilds&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#incremental-rebuilds&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Incremental rebuilds&lt;/h3&gt;
&lt;p&gt;Waiting too long for an incremental rebuild after making a small source code change was by far the most common complaint in the open answers that we received, and it was also the most common problem that respondents said they struggle with. Based on our respondents&#x27; answers, this comes down to three main bottlenecks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changes in workspaces trigger unnecessary rebuilds.&lt;/strong&gt; If you modify a crate in a workspace that has several dependent crates and perform a rebuild, all those dependent crates will currently have to be recompiled. This can cause a lot of unnecessary work and dramatically increase the latency of rebuilds in large (or deep) workspaces. We have some ideas about how to improve this workflow, such as the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/relink-dont-rebuild.html&quot;&gt;&quot;Relink, don&#x27;t rebuild&quot;&lt;/a&gt; proposal, but these are currently in a very experimental stage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The linking phase is too slow.&lt;/strong&gt; This was a very common complaint, and it is indeed a real issue, because unlike the rest of the compilation process, linking is always performed &quot;from scratch&quot;. The Rust compiler usually delegates linking to an external/system linker, so its performance is not completely within our hands. However, we are attempting to switch to faster linkers by default. For example, the most popular target (&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;) will very soon switch to the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable&quot;&gt;LLD linker&lt;/a&gt;, which provides significant performance wins. Long-term, it is possible that some linkers (e.g. &lt;a href&#x3D;&quot;https://github.com/davidlattimore/wild&quot;&gt;wild&lt;/a&gt;) will allow us to perform even linking incrementally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental rebuild of a single crate is too slow.&lt;/strong&gt; The performance of this workflow depends on the cleverness of the incremental engine of the Rust compiler. While it is already very sophisticated, there are some parts of the compilation process that are not incremental yet or that are not cached in an optimal way. For example, expansion of derive proc macros is not currently cached, although work is underway to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/145354&quot;&gt;change that&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several users have mentioned that they would like to see Rust perform hot-patching (such as the &lt;code&gt;subsecond&lt;/code&gt; system used by the Dioxus UI framework or similar approaches used e.g. by the Bevy game engine). While these hot-patching systems are very exciting and can produce truly near-instant rebuild times for specialized use-cases, it should be noted that they also come with many limitations and edge-cases, and it does not seem that a solution that would allow hot-patching to work in a robust way has been found yet.&lt;/p&gt;
&lt;p&gt;To gauge how long is the typical rebuild latency, we asked our respondents to pick a single Rust project that they work on and which causes them to struggle with build times the most, and tell us how long they have to wait for it to be rebuilt after making a code change.&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;rebuild-wait-time&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time&quot; src&#x3D;&quot;rebuild-wait-time.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time end --&gt;
&lt;p&gt;Even though many developers do not actually experience this latency after each code change, as they consume results of type checking or inline annotations in their code editor, the fact that 55% of respondents have to wait more than ten seconds for a rebuild is far from ideal.&lt;/p&gt;
&lt;p&gt;If we partition these results based on answers to other questions, it is clear that the rebuild times depend a lot on the size of the project:&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time-code-size start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;rebuild-wait-time-code-size&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time-code-size&quot; src&#x3D;&quot;rebuild-wait-time-code-size.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-code-size.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-code-size.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time-code-size end --&gt;
&lt;p&gt;And to a lesser factor also on the number of used dependencies:&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time-dep-count start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;rebuild-wait-time-dep-count&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time-dep-count&quot; src&#x3D;&quot;rebuild-wait-time-dep-count.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-dep-count.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-dep-count.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time-dep-count end --&gt;
&lt;p&gt;We would love to get to a point where the time needed to rebuild a Rust project is dependent primarily on the amount of performed code changes, rather than on the size of the codebase, but clearly we are not there yet.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;type-checking-and-ide-performance&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#type-checking-and-ide-performance&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Type checking and IDE performance&lt;/h3&gt;
&lt;p&gt;Approximately 60% of respondents say that they use &lt;code&gt;cargo&lt;/code&gt; terminal commands to type check, build or test their code, with &lt;code&gt;cargo check&lt;/code&gt; being the most commonly used command performed after each code change:&lt;/p&gt;
&lt;!-- Chart cargo-commands start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;cargo-commands&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;cargo-commands&quot; src&#x3D;&quot;cargo-commands.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;cargo-commands.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;cargo-commands.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart cargo-commands end --&gt;
&lt;p&gt;While the performance of &lt;code&gt;cargo check&lt;/code&gt; does not seem to be as big of a blocker as e.g. incremental rebuilds, it also causes some pain points. One of the most common ones present in the survey responses is the fact that &lt;code&gt;cargo check&lt;/code&gt; does not share the build cache with &lt;code&gt;cargo build&lt;/code&gt;. This causes additional compilation to happen when you run e.g. &lt;code&gt;cargo check&lt;/code&gt; several times to find all type errors, and when it succeeds, you follow up with &lt;code&gt;cargo build&lt;/code&gt; to actually produce a built artifact. This workflow is an example of competing trade-offs, because sharing the build cache between these two commands by unifying them more would likely make &lt;code&gt;cargo check&lt;/code&gt; itself slightly slower, which might be undesirable to some users. It is possible that we might be able to find some middle ground to improve the status quo though. You can follow updates to this work in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/3501&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A related aspect is the latency of type checking in code editors and IDEs. Around 87% of respondents say that they use inline annotations in their editor as the primary mechanism of inspecting compiler errors, and around 33% of them consider waiting for these annotations to be a big blocker. In the open answers, we also received many reports of Rust Analyzer&#x27;s performance and memory usage being a limiting factor.&lt;/p&gt;
&lt;p&gt;The maintainers of Rust Analyzer are working hard on improving its performance. Its caching system is &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;tn6qwhMNBJo&quot;&gt;being improved&lt;/a&gt; to reduce analysis latency, the distributed builds of the editor are now &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-analyzer/pull/19582&quot;&gt;optimized with PGO&lt;/a&gt;, which provided 15-20% performance wins, and work is underway to integrate the compiler&#x27;s &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-analyzer/pull/20329&quot;&gt;new trait solver&lt;/a&gt; into Rust Analyzer, which could eventually also result in increased performance.&lt;/p&gt;
&lt;p&gt;More than 35% users said that they consider the IDE and Cargo &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/4282&quot;&gt;blocking one another&lt;/a&gt; to be a big problem. There is an existing workaround for this, where you can configure Rust Analyzer to use a different target directory than Cargo, at the cost of increased disk space usage. We realized that this workaround has not been documented in a very visible way, so we added it to the &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/book/faq.html#rust-analyzer-and-cargo-compete-over-the-build-lock&quot;&gt;FAQ section&lt;/a&gt; of the Rust Analyzer book.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;clean-and-ci-builds&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#clean-and-ci-builds&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Clean and CI builds&lt;/h3&gt;
&lt;p&gt;Around 20% of participants responded that clean builds are a significant blocker for them. In order to improve their performance, you can try a recently introduced experimental Cargo and compiler option called &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/07/15/call-for-testing-hint-mostly-unused&quot;&gt;&lt;code&gt;hint-mostly-unused&lt;/code&gt;&lt;/a&gt;, which can in certain situations help improve the performance of clean builds, particularly if your dependencies contain a lot of code that might not actually be used by your crate(s).&lt;/p&gt;
&lt;p&gt;One area where clean builds might happen often is Continuous Integration (CI). 1495 respondents said that they use CI to build Rust code, and around 25% of them consider its performance to be a big blocker for them. However, almost 36% of respondents who consider CI build performance to be a big issue said that they do not use any caching in CI, which we found surprising. One explanation might be that the generated artifacts (the &lt;code&gt;target&lt;/code&gt; directory) is too large for effective caching, and runs into usage limits of CI providers, which is something that we saw mentioned repeatedly in the open answers section. We have recently introduced an experimental Cargo and compiler option called &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#no-embed-metadata&quot;&gt;&lt;code&gt;-Zembed-metadata&lt;/code&gt;&lt;/a&gt; that is designed to reduce the size of the &lt;code&gt;target&lt;/code&gt; directories, and work is also underway to regularly &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13136&quot;&gt;garbage collect&lt;/a&gt; them. This might help with the disk space usage issue somewhat in the future.&lt;/p&gt;
&lt;p&gt;One additional way to significantly reduce disk usage is to reduce the amount of generated debug information, which brings us to the next section.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;debug-information&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#debug-information&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Debug information&lt;/h2&gt;
&lt;p&gt;The default Cargo &lt;code&gt;dev&lt;/code&gt; profile generates full debug information (debuginfo) both for workspace crates and also all dependencies. This enables stepping through code with a debugger, but it also increases disk usage of the &lt;code&gt;target&lt;/code&gt; directory, and crucially it makes compilation and linking slower. This effect can be quite large, as our benchmarks show a possible improvement of &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;0d0f4eac8b98133e5da6d3604d86a8f3b5a67844&amp;amp;end&#x3D;71ea9a0cacc3473c7b6852c17453259f74635c62&amp;amp;stat&#x3D;cycles%3Au&amp;amp;doc&#x3D;false&amp;amp;check&#x3D;false&amp;amp;opt&#x3D;false&quot;&gt;2-30% in cycle counts&lt;/a&gt; if we reduce the debuginfo level to &lt;code&gt;line-tables-only&lt;/code&gt; (which only generates enough debuginfo for backtraces to work), and the improvements are &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;bea625f3275e3c897dc965ed97a1d19ef7831f01&amp;amp;end&#x3D;87c3e1ecd699573f7cb4c9074b8727956bd37a74&amp;amp;stat&#x3D;cycles%3Au&amp;amp;check&#x3D;false&amp;amp;opt&#x3D;false&amp;amp;doc&#x3D;false&quot;&gt;even larger&lt;/a&gt; if we disable debuginfo generation completely&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-lld-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-lld&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, if Rust developers debug their code after most builds, then this cost might be justified. We thus asked them how often they use a debugger to debug their Rust code:&lt;/p&gt;
&lt;!-- Chart debugger start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;debugger&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;debugger&quot; src&#x3D;&quot;debugger.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;debugger.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;debugger.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart debugger end --&gt;
&lt;p&gt;Based on these results, it seems that the respondents of our survey do not actually use a debugger all that much&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-why-not-debug-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-why-not-debug&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, when we asked people if they require debuginfo to be generated by default, the responses were much less clear-cut:&lt;/p&gt;
&lt;!-- Chart required-debuginfo start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;required-debuginfo&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;required-debuginfo&quot; src&#x3D;&quot;required-debuginfo.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart required-debuginfo end --&gt;
&lt;p&gt;This is the problem with changing defaults: it is challenging to improve the workflows of one user without regressing the workflow of another.  For completeness, here are the answers to the previous question partitioned on the answer to the &quot;How often do you use a debugger&quot; question:&lt;/p&gt;
&lt;!-- Chart required-debuginfo-debugger start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;required-debuginfo-debugger&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;required-debuginfo-debugger&quot; src&#x3D;&quot;required-debuginfo-debugger.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo-debugger.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo-debugger.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart required-debuginfo-debugger end --&gt;
&lt;p&gt;It was surprising for us to see that around a quarter of respondents who (almost) never use a debugger still want to have full debuginfo generated by default.&lt;/p&gt;
&lt;p&gt;Of course, you can always disable debuginfo manually to improve your build performance, but not everyone knows about that option, and defaults matter a lot. The Cargo team is &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/15931&quot;&gt;considering&lt;/a&gt; ways of changing the status quo, for example by reducing the level of generated debug information in the &lt;code&gt;dev&lt;/code&gt; profile, and introducing a new built-in profile designed for debugging.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;workarounds-for-improving-build-performance&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#workarounds-for-improving-build-performance&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Workarounds for improving build performance&lt;/h2&gt;
&lt;p&gt;Build performance of Rust is affected by many different aspects, including the configuration of the build system (usually Cargo) and the Rust compiler, but also the organization of Rust crates and used source code patterns. There are thus several approaches that can be used to improve build performance by either using different configuration options or restructuring source code. We asked our respondents if they are even aware of such possibilities, whether they have tried them and how effective they were:&lt;/p&gt;
&lt;!-- Chart compile-time-improvement-mechanisms start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;compile-time-improvement-mechanisms&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;compile-time-improvement-mechanisms&quot; src&#x3D;&quot;compile-time-improvement-mechanisms.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;compile-time-improvement-mechanisms.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;compile-time-improvement-mechanisms.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart compile-time-improvement-mechanisms end --&gt;
&lt;p&gt;It seems that the most popular (and effective) mechanisms for improving build performance are reducing the number of dependencies and their activated features, and splitting larger crates into smaller crates. The most common way of improving build performance without making source code changes seems to be the usage of an alternative linker. It seems that especially the mold and LLD linkers are very popular:&lt;/p&gt;
&lt;!-- Chart alternative-linker start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;alternative-linker&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;alternative-linker&quot; src&#x3D;&quot;alternative-linker.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker-wordcloud.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download open answers as wordcloud PNG&quot;&gt;Wordcloud of open answers&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart alternative-linker end --&gt;
&lt;p&gt;We have good news here! The most popular &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; Linux target will start using the LLD linker in the next Rust stable release, resulting in faster link times &lt;em&gt;by default&lt;/em&gt;. Over time, we will be able to evaluate how disruptive is this change to the overall Rust ecosystem, and whether we could e.g. switch to a different (even faster) linker.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;build-performance-guide&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#build-performance-guide&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Build performance guide&lt;/h3&gt;
&lt;p&gt;We were surprised by the relatively large number of users who were unaware of some approaches for improving compilation times, in particular those that are very easy to try and typically do not require source code changes (such as reducing debuginfo or using a different linker or a codegen backend). Furthermore, almost 42% of respondents have not tried to use &lt;em&gt;any&lt;/em&gt; mechanism for improving build performance whatsoever. While this is not totally unexpected, as some of these mechanisms require using the nightly toolchain or making non-trivial changes to source code, we think that one the reasons is also simply that Rust developers might not know about these mechanisms being available. In the open answers, several people also noted that they would appreciate if there was some sort of official guidance from the Rust Project about such mechanisms for improving compile times.&lt;/p&gt;
&lt;p&gt;It should be noted that the mechanisms that we asked about are in fact workarounds that present various trade-offs, and these should always be carefully considered. Several people have expressed dissatisfaction with some of these workarounds in the open answers, as they find it unacceptable to modify their code (which could sometimes result e.g. in increased maintenance costs or worse runtime performance) just to achieve reasonable compile times. Nevertheless, these workarounds can still be incredibly useful in some cases.&lt;/p&gt;
&lt;p&gt;The feedback that we received shows that it might be beneficial to spread awareness of these mechanisms in the Rust community more, as some of them can make a really large difference in build performance, but also to candidly explain the trade-offs that they introduce. Even though several great resources that cover this topic already exist online, we decided to create an &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15924&quot;&gt;official guide&lt;/a&gt; for optimizing build performance (currently work-in-progress), which will likely be hosted in the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo&quot;&gt;Cargo book&lt;/a&gt;. The aim of this guide is to increase the awareness of various mechanisms for improving build performance, and also provide a framework for evaluating their trade-offs.&lt;/p&gt;
&lt;p&gt;Our long-standing goal is to make compilation so fast that similar workarounds will not be necessary anymore for the vast majority of use-cases. However, there is no free lunch, and the combination of Rust&#x27;s strong type system guarantees, its compilation model and also heavy focus on runtime performance often go against very fast (re)build performance, and might require usage of at least some workarounds. We hope that this guide will help Rust developers learn about them and evaluate them for their specific use-case.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;understanding-why-builds-are-slow&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#understanding-why-builds-are-slow&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Understanding why builds are slow&lt;/h2&gt;
&lt;p&gt;When Rust developers experience slow builds, it can be challenging to identify where exactly is the compilation process spending time, and what could be the bottleneck. It seems that only very few Rust developers leverage tools for profiling their builds:&lt;/p&gt;
&lt;!-- Chart profiling-tools start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;profiling-tools&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;profiling-tools&quot; src&#x3D;&quot;profiling-tools.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;profiling-tools.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;profiling-tools.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart profiling-tools end --&gt;
&lt;p&gt;This hardly comes as a surprise. There are currently not that many ways of intuitively understanding the performance characteristics of Cargo and &lt;code&gt;rustc&lt;/code&gt;. Some tools offer only a limited amount of information (e.g. &lt;code&gt;cargo build --timings&lt;/code&gt;), and the output of others (e.g. &lt;code&gt;-Zself-profile&lt;/code&gt;) is very hard to interpret without knowledge of the compiler internals.&lt;/p&gt;
&lt;p&gt;To slightly improve this situation, we have recently added support for displaying &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15923&quot;&gt;link times&lt;/a&gt; to the &lt;code&gt;cargo build --timings&lt;/code&gt; output, to provide more information about the possible bottleneck in crate compilation (note this feature has not been stabilized yet).&lt;/p&gt;
&lt;p&gt;Long-term, it would be great to have tooling that could help Rust developers diagnose compilation bottlenecks in their crates without them having to understand how the compiler works. For example, it could help answer questions such as &quot;Which code had to be recompiled after a given source change&quot; or &quot;Which (proc) macros take the longest time to expand or produce the largest output&quot;, and ideally even offer some actionable suggestions. We plan to work on such tooling, but it will take time to manifest.&lt;/p&gt;
&lt;p&gt;One approach that could help Rust compiler contributors understand why are Rust (re)builds slow &quot;in the wild&quot; is the opt-in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/metrics-initiative.html&quot;&gt;compilation metrics collection initiative&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-s-next&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-s-next&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What&#x27;s next&lt;/h2&gt;
&lt;p&gt;There are more interesting things in the survey results, for example how do answers to selected questions differ based on the used operating system. You can examine the full results in the &lt;a href&#x3D;&quot;https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2025/compiler-performance-survey/report/compiler-performance-2025-report.pdf&quot;&gt;full report PDF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We would like to thank once more everyone who has participated in our survey. It helped us understand which workflows are the most painful for Rust developers, and especially the open answers provided several great suggestions that we tried to act upon.&lt;/p&gt;
&lt;p&gt;Even though the Rust compiler is getting increasingly faster every year, we understand that many Rust developers require truly significant improvements to improve their productivity, rather than &quot;just&quot; incremental performance wins. Our goal for the future is to finally stabilize long-standing initiatives that could improve build performance a lot, such as the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/production-ready-cranelift.html&quot;&gt;Cranelift codegen backend&lt;/a&gt; or the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/parallel-front-end.html&quot;&gt;parallel compiler frontend&lt;/a&gt;. One such initiative (using a &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable&quot;&gt;faster linker by default&lt;/a&gt;) will finally land soon, but the fact that it took many years shows how difficult it is to make such large cutting changes to the compilation process.&lt;/p&gt;
&lt;p&gt;There are other ambitious ideas for reducing (re)build times, such as &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/relink-dont-rebuild.html&quot;&gt;avoiding unnecessary workspace rebuilds&lt;/a&gt; or e.g. using some form of &lt;a href&#x3D;&quot;https://github.com/davidlattimore/wild&quot;&gt;incremental linking&lt;/a&gt;, but these will require a lot of work and design discussions.&lt;/p&gt;
&lt;p&gt;We know that some people are wondering why it takes so much time to achieve progress in improving the build performance of Rust. The answer is relatively simple. These changes require a lot of work, domain knowledge (that takes a relatively long time to acquire) and many discussions and code reviews, and the pool of people that have time and motivation to work on them or review these changes is very limited. Current compiler maintainers and contributors (many of whom work on the compiler as volunteers, without any funding) work very hard to keep up with maintaining the compiler and keeping it working with the high-quality bar that Rust developers expect, across many targets, platforms and operating systems. Introducing large structural changes, which are likely needed to reach massive performance improvements, would require a lot of concentrated effort and funding.&lt;/p&gt;
&lt;!-- Chart scripts --&gt;
&lt;script charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;/scripts/plotly-basic-2.29.0.min.js&quot;&gt;&lt;/script&gt;
&lt;script src&#x3D;&quot;charts.js&quot;&gt;&lt;/script&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol class&#x3D;&quot;footnotes-list&quot;&gt;
&lt;li id&#x3D;&quot;fn-lld&quot;&gt;
&lt;p&gt;This benchmark was already performed using the fast LLD linker. If a slower linker was used, the build time wins would likely be even larger. &lt;a href&#x3D;&quot;#fr-lld-1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-why-not-debug&quot;&gt;
&lt;p&gt;Potentially because of the strong invariants upheld by the Rust type system, and partly also because the Rust debugging experience might not be optimal for many users, which is a feedback that we received in the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results/#challenges&quot;&gt;State of Rust 2024 survey&lt;/a&gt;. &lt;a href&#x3D;&quot;#fr-why-not-debug-1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Jakub Beránek</name>
        </author>
    </entry>
    <entry>
        <title>Welcoming the Rust Innovation Lab</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/" type="text/html" title="Welcoming the Rust Innovation Lab" />
        <published>2025-09-03T00:00:00+00:00</published>
        <updated>2025-09-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/">&lt;p&gt;TL;DR: &lt;a href&#x3D;&quot;https://github.com/rustls/rustls&quot;&gt;Rustls&lt;/a&gt; is the inaugural project of the &lt;a href&#x3D;&quot;https://rustfoundation.org/rust-innovation-lab&quot;&gt;Rust Innovation Lab&lt;/a&gt;, which is a new home for Rust projects under the Rust Foundation.&lt;/p&gt;
&lt;p&gt;At the Rust Foundation&#x27;s August meeting, the Project Directors and the rest of the Rust Foundation board voted to approve &lt;a href&#x3D;&quot;https://github.com/rustls/rustls&quot;&gt;Rustls&lt;/a&gt; as the first project housed under the newly formed Rust Innovation Lab. Prior to the vote, the Project Directors consulted with the Leadership Council who confirmed the Project&#x27;s support for this initiative.&lt;/p&gt;
&lt;p&gt;The Rust Innovation Lab (RIL) is designed to provide support for funded Rust-based open source projects from the Rust Foundation in the form of governance, legal, networking, marketing, and administration, while keeping the technical direction solely in the hands of the current maintainers. As with the other work of the Rust Foundation (e.g. its many existing &lt;a href&#x3D;&quot;https://rustfoundation.org/initiatives/&quot;&gt;initiatives&lt;/a&gt;), the purpose of the RIL is to strengthen the Rust ecosystem generally.&lt;/p&gt;
&lt;p&gt;The Foundation has been working behind the scenes to establish the Rust Innovation Lab, which includes setting up infrastructure under the Foundation to ensure smooth transition for Rustls into RIL. More details are available in &lt;a href&#x3D;&quot;https://rustfoundation.org/media/rust-foundation-launches-rust-innovation-lab-with-rustls-as-inaugural-project/&quot;&gt;the Foundation&#x27;s announcement&lt;/a&gt; and on &lt;a href&#x3D;&quot;https://rustfoundation.org/rust-innovation-lab&quot;&gt;the Rust Innovation Lab&#x27;s page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are all excited by the formation of the Rust Innovation Lab. The support this initiative will provide to Rustls (and, eventually, other important projects that are using Rust) will improve software security for the entire industry. The Rust Project is grateful for the support of the Rust Foundation corporate members who are making this initiative possible for the benefit of everyone.&lt;/p&gt;
&lt;p&gt;More information on the criteria for projects wishing to become part of the RIL and the process for applying will be coming soon. The Project Directors and Leadership Council have been and will continue working with the Foundation to communicate information, questions, and feedback with the Rust community about the RIL as the details are worked out.&lt;/p&gt;
</content>

        <author>
            <name>Carol Nichols</name>
        </author>
    </entry>
    <entry>
        <title>Faster linking times with 1.90.0 stable on Linux using the LLD linker</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/" type="text/html" title="Faster linking times with 1.90.0 stable on Linux using the LLD linker" />
        <published>2025-09-01T00:00:00+00:00</published>
        <updated>2025-09-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/">&lt;p&gt;TL;DR: rustc will start using the LLD linker by default on the &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; target starting with the next stable release (1.90.0, scheduled for 2025-09-18), which should significantly reduce linking times. Test it out on beta now, and please report any encountered issues.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;some-context&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#some-context&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Some context&lt;/h4&gt;
&lt;p&gt;Linking time is often a big part of compilation time. When rustc needs to build a binary or a shared library, it will usually call the default linker installed on the system to do that (this can be changed on the command-line or by the target for which the code is compiled).&lt;/p&gt;
&lt;p&gt;The linkers do an important job, with concerns about stability, backwards-compatibility and so on. For these and other reasons, on the most popular operating systems they usually are older programs, designed when computers only had a single core. So, they usually tend to be slow on a modern machine. For example, when building ripgrep 13 in debug mode on Linux, roughly half of the time is actually spent in the linker.&lt;/p&gt;
&lt;p&gt;There are different linkers, however, and the usual advice to improve linking times is to use one of these newer and faster linkers, like LLVM&#x27;s &lt;a href&#x3D;&quot;https://lld.llvm.org/&quot;&gt;&lt;code&gt;lld&lt;/code&gt;&lt;/a&gt; or Rui Ueyama&#x27;s &lt;a href&#x3D;&quot;https://github.com/rui314/mold&quot;&gt;&lt;code&gt;mold&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of Rust&#x27;s wasm and aarch64 targets already use &lt;code&gt;lld&lt;/code&gt; by default. When using rustup, rustc ships with a version of &lt;code&gt;lld&lt;/code&gt; for this purpose. When CI builds LLVM to use in the compiler, it also builds the linker and packages it. It&#x27;s referred to as &lt;code&gt;rust-lld&lt;/code&gt; to avoid colliding with any &lt;code&gt;lld&lt;/code&gt; already installed on the user&#x27;s machine.&lt;/p&gt;
&lt;p&gt;Since improvements to linking times are substantial, it would be a good default to use in the most popular targets. This has been discussed for a long time, for example in issues &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/39915&quot;&gt;#39915&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/71515&quot;&gt;#71515&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To expand our testing, we have enabled rustc to use &lt;code&gt;rust-lld&lt;/code&gt; by default on nightly, &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html&quot;&gt;in May 2024&lt;/a&gt;. No major issues have been reported since then.&lt;/p&gt;
&lt;p&gt;We believe we&#x27;ve done all the internal testing that we could, on CI, crater, on our benchmarking infrastructure and on nightly, and plan to enable &lt;code&gt;rust-lld&lt;/code&gt; to be the linker used by default on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; for stable builds in 1.90.0.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;benefits&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#benefits&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Benefits&lt;/h4&gt;
&lt;p&gt;While this also enables the compiler to use more linker features in the future, the most immediate benefit is much improved linking times.&lt;/p&gt;
&lt;p&gt;Here are more details from the ripgrep example mentioned above: for an incremental rebuild, linking is reduced 7x, resulting in a 40% reduction in end-to-end compilation times. For a from-scratch debug build, it is a 20% improvement.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/ripgrep-comparison.png&quot; alt&#x3D;&quot;Before/after comparison of a ripgrep incremental debug build&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Most binaries should see some improvements here, but it&#x27;s especially significant with e.g. bigger binaries, or for incremental rebuilds, or when involving debuginfo. These usually see bottlenecks in the linker.&lt;/p&gt;
&lt;p&gt;Here&#x27;s &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;b3e117044c7f707293edc040edb93e7ec5f7040a&amp;amp;end&#x3D;baed03c51a68376c1789cc373581eea0daf89967&amp;amp;stat&#x3D;instructions%3Au&amp;amp;tab&#x3D;compile&quot;&gt;a link&lt;/a&gt; to the complete results from our benchmarks.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;possible-drawbacks&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#possible-drawbacks&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Possible drawbacks&lt;/h4&gt;
&lt;p&gt;From our prior testing, we don&#x27;t really expect issues to happen in practice. It is a drop-in replacement for the vast majority of cases, but &lt;code&gt;lld&lt;/code&gt; is not &lt;em&gt;bug-for-bug&lt;/em&gt; compatible with GNU ld.&lt;/p&gt;
&lt;p&gt;In any case, using &lt;code&gt;rust-lld&lt;/code&gt; can be disabled if any problem occurs: use the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; flag to revert to using the system&#x27;s default linker.&lt;/p&gt;
&lt;p&gt;Some crates somehow relying on these differences could need additional link args, though we also expect this to be quite rare. Let us know if you encounter problems, by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;opening an issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Some of the big gains in performance come from parallelism, which could be undesirable in resource-constrained environments, or for heavy projects that are already reaching hardware limits.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;summary-and-call-for-testing&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#summary-and-call-for-testing&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Summary, and call for testing&lt;/h4&gt;
&lt;p&gt;rustc will use &lt;code&gt;rust-lld&lt;/code&gt; on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, starting with the 1.90.0 stable release, for much improved linking times. Rust 1.90.0 will be released next month, on the 18th of September 2025.&lt;/p&gt;
&lt;p&gt;This linker change is already available on the current beta (&lt;code&gt;1.90.0-beta.6&lt;/code&gt;). To help everyone prepare for this landing on stable, please test your projects on beta and let us know if you encounter problems, by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;opening an issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If that happens, you can revert to the default linker with the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; flag. Either by adding it to the usual &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, or to a project&#x27;s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; configuration file,
like so:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;target&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;x86_64-unknown-linux-gnu&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;rustflags&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;-Clinker-features&#x3D;-lld&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>

        <author>
            <name>Rémy Rakic</name>
        </author>
    </entry>
    <entry>
        <title>Demoting x86_64-apple-darwin to Tier 2 with host tools</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/" type="text/html" title="Demoting x86_64-apple-darwin to Tier 2 with host tools" />
        <published>2025-08-19T00:00:00+00:00</published>
        <updated>2025-08-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/">&lt;p&gt;In Rust 1.90.0, the target &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; will be demoted to Tier 2 with host tools.
The standard library and the compiler will continue to be built and distributed,
but automated tests of these components are no longer guaranteed to be run.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;background&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#background&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Background&lt;/h2&gt;
&lt;p&gt;Rust has supported macOS for a long time,
with some amount of support dating back to Rust 0.1 and likely before that.
During that time period,
Apple has changed CPU architectures from x86 to x86_64 and now to Apple silicon,
ultimately announcing the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Apple_silicon#Timeline&quot;&gt;end of support&lt;/a&gt; for the x86_64 architecture.&lt;/p&gt;
&lt;p&gt;Similarly,
&lt;a href&#x3D;&quot;https://github.blog/changelog/2025-07-11-upcoming-changes-to-macos-hosted-runners-macos-latest-migration-and-xcode-support-policy-updates/#macos-13-is-closing-down&quot;&gt;GitHub has announced&lt;/a&gt; that they will no longer provide free macOS x86_64 runners for public repositories.
The Rust Project uses these runners to execute automated tests for the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target.
Since the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/target-tier-policy.html&quot;&gt;target tier policy&lt;/a&gt; requires that Tier 1 platforms must run tests in CI,
the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target must be demoted to Tier 2.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-changes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-changes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What changes?&lt;/h2&gt;
&lt;p&gt;Starting with Rust 1.90.0, &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; will be Tier 2 with host tools.
For users,
nothing will change immediately;
builds of both the standard library and the compiler will still be distributed by the Rust Project for use via &lt;code&gt;rustup&lt;/code&gt; or alternative installation methods.&lt;/p&gt;
&lt;p&gt;Over time,
this target will likely accumulate bugs faster due to reduced testing.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;future&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#future&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Future&lt;/h2&gt;
&lt;p&gt;If the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target causes concrete problems,
it may be demoted further.
No plans for further demotion have been made yet.&lt;/p&gt;
&lt;p&gt;For more details on the motivation of the demotion, see &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3841-demote-x86_64-apple-darwin.html&quot;&gt;RFC 3841&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Jake Goulding</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.89.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/" type="text/html" title="Announcing Rust 1.89.0" />
        <published>2025-08-07T00:00:00+00:00</published>
        <updated>2025-08-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.89.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via &lt;code&gt;rustup&lt;/code&gt;, you can get 1.89.0 with:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;console&quot; class&#x3D;&quot;language-console z-code&quot;&gt;&lt;code class&#x3D;&quot;language-console&quot; data-lang&#x3D;&quot;console&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ rustup update stable
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/releases.html#version-1890-2025-08-07&quot;&gt;detailed release notes for 1.89.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-s-in-1-89-0-stable&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-s-in-1-89-0-stable&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What&#x27;s in 1.89.0 stable&lt;/h2&gt;
&lt;h3 id&#x3D;&quot;explicitly-inferred-arguments-to-const-generics&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#explicitly-inferred-arguments-to-const-generics&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Explicitly inferred arguments to const generics&lt;/h3&gt;
&lt;p&gt;Rust now supports &lt;code&gt;_&lt;/code&gt; as an argument to const generic parameters, inferring the value from surrounding context:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;all_false&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;const&lt;/span&gt; LEN&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;usize&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;bool&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-other z-rust&quot;&gt;LEN&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-language z-rust&quot;&gt;false&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the rules for when &lt;code&gt;_&lt;/code&gt; is permitted as a type, &lt;code&gt;_&lt;/code&gt; is not permitted as an argument to const generics when in a signature:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; This is not allowed
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;const&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;all_false&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;const&lt;/span&gt; LEN&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;usize&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;bool&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-language z-rust&quot;&gt;false&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-other z-rust&quot;&gt;LEN&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; Neither is this
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;const&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-other z-rust&quot;&gt;ALL_FALSE&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;bool&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;all_false&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;/span&gt;10&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id&#x3D;&quot;mismatched-lifetime-syntaxes-lint&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#mismatched-lifetime-syntaxes-lint&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Mismatched lifetime syntaxes lint&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.89/book/ch10-03-lifetime-syntax.html#lifetime-elision&quot;&gt;Lifetime elision&lt;/a&gt; in function signatures is an ergonomic aspect of the Rust language, but it can also be a stumbling point for newcomers and experts alike. This is especially true when lifetimes are inferred in types where it isn&#x27;t syntactically obvious that a lifetime is even present:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; The returned type &#x60;std::slice::Iter&#x60; has a lifetime, 
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; but there&amp;#39;s no visual indication of that.
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; Lifetime elision infers the lifetime of the return 
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; type to be the same as that of &#x60;scores&#x60;.
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;items&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-variable z-parameter z-rust&quot;&gt;scores&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;/span&gt;[&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;u8&lt;/span&gt;]&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;slice&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-generic z-rust&quot;&gt;Iter&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;u8&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;   scores&lt;span class&#x3D;&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-support z-function z-rust&quot;&gt;iter&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code like this will now produce a warning by default:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;text&quot; class&#x3D;&quot;language-text z-code&quot;&gt;&lt;code class&#x3D;&quot;language-text&quot; data-lang&#x3D;&quot;text&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;warning: hiding a lifetime that&amp;#39;s elided elsewhere is confusing
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt; --&amp;gt; src/lib.rs:1:18
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;1 | fn items(scores: &amp;amp;[u8]) -&amp;gt; std::slice::Iter&amp;lt;u8&amp;gt; {
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |                  ^^^^^     -------------------- the same lifetime is hidden here
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |                  |
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |                  the lifetime is elided here
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  &#x3D; help: the same lifetime is referred to in inconsistent ways, making the signature confusing
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  &#x3D; note: &#x60;#[warn(mismatched_lifetime_syntaxes)]&#x60; on by default
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;help: use &#x60;&amp;#39;_&#x60; for type paths
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;1 | fn items(scores: &amp;amp;[u8]) -&amp;gt; std::slice::Iter&amp;lt;&amp;#39;_, u8&amp;gt; {
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;  |                                             +++
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/46254&quot;&gt;first attempted&lt;/a&gt; to improve this situation back in 2018 as part of the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/54910&quot;&gt;&lt;code&gt;rust_2018_idioms&lt;/code&gt;&lt;/a&gt; lint group, but &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/131725&quot;&gt;strong feedback&lt;/a&gt; about the &lt;code&gt;elided_lifetimes_in_paths&lt;/code&gt; lint showed that it was too blunt of a hammer as it warns about lifetimes which don&#x27;t matter to understand the function:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-keyword z-other z-rust&quot;&gt;use&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;fmt&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-struct z-rust&quot;&gt;Greeting&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;fmt&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;Display &lt;span class&#x3D;&quot;z-keyword z-other z-rust&quot;&gt;for&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-entity z-name z-impl z-rust&quot;&gt;Greeting&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;fmt&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class&#x3D;&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;/span&gt;, &lt;span class&#x3D;&quot;z-variable z-parameter z-rust&quot;&gt;f&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;fmt&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;Formatter&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-path z-rust&quot;&gt;fmt&lt;span class&#x3D;&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;/span&gt;&lt;/span&gt;Result&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt;                -----^^^^^^^^^ expected lifetime parameter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; Knowing that &#x60;Formatter&#x60; has a lifetime does not help the programmer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;howdy&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-support z-function z-rust&quot;&gt;fmt&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;f&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then realized that the confusion we want to eliminate occurs when both&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lifetime elision inference rules &lt;em&gt;connect&lt;/em&gt; an input lifetime to an output lifetime&lt;/li&gt;
&lt;li&gt;it&#x27;s not syntactically obvious that a lifetime exists&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two pieces of Rust syntax that indicate that a lifetime exists: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;&#x27;&lt;/code&gt;, with &lt;code&gt;&#x27;&lt;/code&gt; being subdivided into the inferred lifetime &lt;code&gt;&#x27;_&lt;/code&gt; and named lifetimes &lt;code&gt;&#x27;a&lt;/code&gt;. When a type uses a named lifetime, lifetime elision will not infer a lifetime for that type. Using these criteria, we can construct three groups:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Self-evident it has a lifetime&lt;/th&gt;&lt;th&gt;Allow lifetime elision to infer a lifetime&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;ContainsLifetime&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;amp;T&lt;/code&gt;, &lt;code&gt;&amp;amp;&#x27;_ T&lt;/code&gt;, &lt;code&gt;ContainsLifetime&amp;lt;&#x27;_&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;&lt;code&gt;&amp;amp;&#x27;a T&lt;/code&gt;, &lt;code&gt;ContainsLifetime&amp;lt;&#x27;a&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;mismatched_lifetime_syntaxes&lt;/code&gt; lint checks that the inputs and outputs of a function belong to the same group. For the initial motivating example above, &lt;code&gt;&amp;amp;[u8]&lt;/code&gt; falls into the second group while &lt;code&gt;std::slice::Iter&amp;lt;u8&amp;gt;&lt;/code&gt; falls into the first group. We say that the lifetimes in the first group are &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because the input and output lifetimes belong to different groups, the lint will warn about this function, reducing confusion about when a value has a meaningful lifetime that isn&#x27;t visually obvious.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mismatched_lifetime_syntaxes&lt;/code&gt; lint supersedes the &lt;code&gt;elided_named_lifetimes&lt;/code&gt; lint, which did something similar for named lifetimes specifically.&lt;/p&gt;
&lt;p&gt;Future work on the &lt;code&gt;elided_lifetimes_in_paths&lt;/code&gt; lint intends to split it into more focused sub-lints with an eye to warning about a subset of them eventually.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;more-x86-target-features&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#more-x86-target-features&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
More x86 target features&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;target_feature&lt;/code&gt; attribute now supports the &lt;code&gt;sha512&lt;/code&gt;, &lt;code&gt;sm3&lt;/code&gt;, &lt;code&gt;sm4&lt;/code&gt;, &lt;code&gt;kl&lt;/code&gt; and &lt;code&gt;widekl&lt;/code&gt; target features on x86. Additionally a number of &lt;code&gt;avx512&lt;/code&gt; intrinsics and target features are also supported on x86:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-variable z-annotation z-rust&quot;&gt;target_feature&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;enable &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;avx512bw&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;cool_simd_code&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-comment z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;/*&lt;/span&gt; .. &lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-comment z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;/*&lt;/span&gt; ... &lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;*/&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-comment z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;/*&lt;/span&gt; ... &lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id&#x3D;&quot;cross-compiled-doctests&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#cross-compiled-doctests&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Cross-compiled doctests&lt;/h3&gt;
&lt;p&gt;Doctests will now be tested when running &lt;code&gt;cargo test --doc --target other_target&lt;/code&gt;, this may result in some amount of breakage due to would-be-failing doctests now being tested.&lt;/p&gt;
&lt;p&gt;Failing tests can be disabled by annotating the doctest with &lt;code&gt;ignore-&amp;lt;target&amp;gt;&lt;/code&gt; (&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustdoc/write-documentation/documentation-tests.html#ignoring-targets&quot;&gt;docs&lt;/a&gt;):&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;///&lt;/span&gt; &#x60;&#x60;&#x60;ignore-x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;///&lt;/span&gt; panic!(&amp;quot;something&amp;quot;)
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;///&lt;/span&gt; &#x60;&#x60;&#x60;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;my_function&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id&#x3D;&quot;i128-and-u128-in-extern-c-functions&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#i128-and-u128-in-extern-c-functions&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&lt;code&gt;i128&lt;/code&gt; and &lt;code&gt;u128&lt;/code&gt; in &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; functions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;i128&lt;/code&gt; and &lt;code&gt;u128&lt;/code&gt; no longer trigger the &lt;code&gt;improper_ctypes_definitions&lt;/code&gt; lint, meaning these types may be used in &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; functions without warning. This comes with some caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Rust types are ABI- and layout-compatible with (unsigned) &lt;code&gt;__int128&lt;/code&gt; in C when the type is available.&lt;/li&gt;
&lt;li&gt;On platforms where &lt;code&gt;__int128&lt;/code&gt; is not available, &lt;code&gt;i128&lt;/code&gt; and &lt;code&gt;u128&lt;/code&gt; do not necessarily align with any C type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i128&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; necessarily compatible with &lt;code&gt;_BitInt(128)&lt;/code&gt; on any platform, because &lt;code&gt;_BitInt(128)&lt;/code&gt; and &lt;code&gt;__int128&lt;/code&gt; may not have the same ABI (as is the case on x86-64).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the last bit of follow up to the layout changes from last year: &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/03/30/i128-layout-update&quot;&gt;https://blog.rust-lang.org/2024/03/30/i128-layout-update&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Demoting &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; to Tier 2 with host tools&lt;/h3&gt;
&lt;p&gt;GitHub will soon &lt;a href&#x3D;&quot;https://github.blog/changelog/2025-07-11-upcoming-changes-to-macos-hosted-runners-macos-latest-migration-and-xcode-support-policy-updates/#macos-13-is-closing-down&quot;&gt;discontinue&lt;/a&gt; providing free macOS x86_64 runners for public repositories. Apple has also announced their &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Apple_silicon#Timeline&quot;&gt;plans&lt;/a&gt; for discontinuing support for the x86_64 architecture.&lt;/p&gt;
&lt;p&gt;In accordance with these changes, the Rust project is in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3841&quot;&gt;process of demoting the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target&lt;/a&gt; from &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-1-with-host-tools&quot;&gt;Tier 1 with host tools&lt;/a&gt; to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-2-with-host-tools&quot;&gt;Tier 2 with host tools&lt;/a&gt;. This means that the target, including tools like &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;, will be guaranteed to build but is not guaranteed to pass our automated test suite.&lt;/p&gt;
&lt;p&gt;We expect that the RFC for the demotion to Tier 2 with host tools will be accepted between the releases of Rust 1.89 and 1.90, which means that Rust 1.89 will be the last release of Rust where &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; is a Tier 1 target.&lt;/p&gt;
&lt;p&gt;For users, this change will not immediately cause impact. Builds of both the standard library and the compiler will still be distributed by the Rust Project for use via &lt;code&gt;rustup&lt;/code&gt; or alternative installation methods while the target remains at Tier 2. Over time, it&#x27;s likely that reduced test coverage for this target will cause things to break or fall out of compatibility with no further announcements.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;standards-compliant-c-abi-on-the-wasm32-unknown-unknown-target&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#standards-compliant-c-abi-on-the-wasm32-unknown-unknown-target&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Standards Compliant C ABI on the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;extern &quot;C&quot;&lt;/code&gt; functions on the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target now have a standards compliant ABI. See this blog post for more information: &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown&quot;&gt;https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;platform-support&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#platform-support&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Platform Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3841&quot;&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt; is in the process of being demoted to Tier 2 with host tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142053&quot;&gt;Add new Tier-3 targets &lt;code&gt;loongarch32-unknown-none&lt;/code&gt; and &lt;code&gt;loongarch32-unknown-none-softfloat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to Rust’s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/platform-support.html&quot;&gt;platform support page&lt;/a&gt; for more information on Rust’s tiered platform support.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/struct.NonZero.html&quot;&gt;&lt;code&gt;NonZero&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Many intrinsics for x86, not enumerated here
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/111137&quot;&gt;AVX512 intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/126624&quot;&gt;&lt;code&gt;SHA512&lt;/code&gt;, &lt;code&gt;SM3&lt;/code&gt; and &lt;code&gt;SM4&lt;/code&gt; intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.lock&quot;&gt;&lt;code&gt;File::lock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.lock_shared&quot;&gt;&lt;code&gt;File::lock_shared&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.try_lock&quot;&gt;&lt;code&gt;File::try_lock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.try_lock_shared&quot;&gt;&lt;code&gt;File::try_lock_shared&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.unlock&quot;&gt;&lt;code&gt;File::unlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.from_ref&quot;&gt;&lt;code&gt;NonNull::from_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.from_mut&quot;&gt;&lt;code&gt;NonNull::from_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.without_provenance&quot;&gt;&lt;code&gt;NonNull::without_provenance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.with_exposed_provenance&quot;&gt;&lt;code&gt;NonNull::with_exposed_provenance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.expose_provenance&quot;&gt;&lt;code&gt;NonNull::expose_provenance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.leak&quot;&gt;&lt;code&gt;OsString::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.leak&quot;&gt;&lt;code&gt;PathBuf::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.flatten&quot;&gt;&lt;code&gt;Result::flatten&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/linux/net/trait.TcpStreamExt.html#tymethod.quickack&quot;&gt;&lt;code&gt;std::os::linux::net::TcpStreamExt::quickack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/linux/net/trait.TcpStreamExt.html#tymethod.set_quickack&quot;&gt;&lt;code&gt;std::os::linux::net::TcpStreamExt::set_quickack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These previously stable APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.array.html#method.as_mut_slice&quot;&gt;&lt;code&gt;&amp;lt;[T; N]&amp;gt;::as_mut_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#impl-%5Bu8%5D/method.eq_ignore_ascii_case&quot;&gt;&lt;code&gt;&amp;lt;[u8]&amp;gt;::eq_ignore_ascii_case&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#impl-str/method.eq_ignore_ascii_case&quot;&gt;&lt;code&gt;str::eq_ignore_ascii_case&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;other-changes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.89.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html#cargo-189-2025-08-07&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-189&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;contributors-to-1-89-0&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#contributors-to-1-89-0&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Contributors to 1.89.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.89.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.89.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>Project goals update — July 2025</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/08/05/july-project-goals-update/" type="text/html" title="Project goals update — July 2025" />
        <published>2025-08-05T00:00:00+00:00</published>
        <updated>2025-08-05T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/08/05/july-project-goals-update/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/08/05/july-project-goals-update/">&lt;p&gt;The Rust Project is currently working towards a &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/goals.html&quot;&gt;slate of 40 project goals&lt;/a&gt;, with 3 of them designated as &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/goals.html#flagship-goals&quot;&gt;flagship goals&lt;/a&gt;. This post provides selected updates on our progress towards these goals (or, in some cases, lack thereof). The full details for any particular goal are available in its associated &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues?q&#x3D;is%3Aissue%20state%3Aopen%20label%3AC-tracking-issue&quot;&gt;tracking issue on the rust-project-goals repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the final update for the first half of 2025. We&#x27;re in the process of selecting goals for the second half of the year.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/goals.html&quot;&gt;Here are the goals that are currently proposed for 2025H2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;flagship-goals&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#flagship-goals&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Flagship goals&lt;/h2&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/105&#x27;&gt;&lt;strong&gt;Bring the Async Rust experience closer to parity with sync Rust&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;14&quot; max&#x3D;&quot;34&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;strong&gt;Why this goal?&lt;/strong&gt; This work continues our drive to improve support for async programming in Rust. In 2024H2 we stabilized async closures; explored the generator design space; and began work on the &lt;code&gt;dynosaur&lt;/code&gt; crate, an experimental proc-macro to provide dynamic dispatch for async functions in traits. In 2025H1 &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/async.html&quot;&gt;our plan&lt;/a&gt; is to deliver (1) improved support for async-fn-in-traits, completely subsuming the functionality of the &lt;a href&#x3D;&quot;https://crates.io/crates/async-trait&quot;&gt;&lt;code&gt;async-trait&lt;/code&gt; crate&lt;/a&gt;; (2) progress towards sync and async generators, simplifying the creation of iterators and async data streams; (3) and improve the ergonomics of &lt;code&gt;Pin&lt;/code&gt;, making lower-level async coding more approachable. These items together start to unblock the creation of the next generation of async libraries in the wider ecosystem, as progress there has been blocked on a stable solution for async traits and streams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/105#issuecomment-3081983979&quot;&gt;H1 Recap from @tmandry:&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What went well&lt;/strong&gt;: This cycle we saw significant progress in a few areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We had productive conversations with the language team on generators, and landed an experimental implementation for a builtin &lt;code&gt;iter!&lt;/code&gt; macro that implements unpinned generators.&lt;/li&gt;
&lt;li&gt;We shipped async closures and the new lifetime capture rules as part of Rust 2024.&lt;/li&gt;
&lt;li&gt;We developed a proc macro, &lt;a href&#x3D;&quot;https://crates.io/crates/dynosaur&quot;&gt;dynosaur&lt;/a&gt;, that can be used to support &lt;code&gt;async fn&lt;/code&gt; together with &lt;code&gt;dyn Trait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We landed an early-stage experiment to support &lt;code&gt;async Drop&lt;/code&gt; in the compiler.&lt;/li&gt;
&lt;li&gt;We landed an experimental implementation of autoreborrowing for pinned references, along with a number of other improvements for pin ergonomics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What didn&#x27;t:&lt;/strong&gt; In some areas, we didn&#x27;t make as much progress as we hoped. In retrospect, the scope of this goal was too large for one person to manage. With flagship project goals, there this a desire to paint a grand vision that I think would be better served by another mechanism without a time bound on it. I&#x27;ve been calling this a &quot;north star&quot;.&lt;/p&gt;
&lt;p&gt;In some cases, like RTN, progress has been by technical debt in the Rust compiler&#x27;s type system. For that there is an ongoing project goal to replace the trait solver with a next-generation version. Finally, on the design front, progress is sometimes slowed by uncertainty and disagreement around the future of pinning in the Rust language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looking forward:&lt;/strong&gt; My takeaway from this is that in the next project goals cycle, we should focus on answering more fundamental questions of Rust&#x27;s evolution. These should reduce uncertainty and pave the way for us to unblock major features for async in future cycles. For example, how far we can push &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;pin ergonomics&lt;/a&gt;? What approach should we take for &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;in-place initialization&lt;/a&gt;, and can it support &lt;code&gt;async fn&lt;/code&gt; in &lt;code&gt;dyn Trait&lt;/code&gt;? How will we support &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/evolving-traits.html&quot;&gt;evolving trait hierarchies&lt;/a&gt; in a general way that allows us to support the Tower &quot;middleware&quot; pattern with &lt;code&gt;async fn&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I&#x27;m excited by the lineup of goals we have for this next cycle. See you on the other side!&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/105#issuecomment-3081983979&quot;&gt;Comment by @tmandry posted on 2025-07-17:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/spastorino/dynosaur/releases/tag/0.3.0&quot;&gt;dynosaur v0.3&lt;/a&gt; has been released. This release contains some breaking changes in preparation for an upcoming 1.0 release. See the linked release notes for more details.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/105#issuecomment-3134566343&quot;&gt;Comment by @tmandry posted on 2025-07-30:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;strong&gt;H1 Recap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What went well&lt;/strong&gt;: This cycle we saw significant progress in a few areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We had productive conversations with the language team on generators, and landed an experimental implementation for a builtin &lt;code&gt;iter!&lt;/code&gt; macro that implements unpinned generators.&lt;/li&gt;
&lt;li&gt;We shipped async closures and the new lifetime capture rules as part of Rust 2024.&lt;/li&gt;
&lt;li&gt;We developed a proc macro, &lt;a href&#x3D;&quot;https://crates.io/crates/dynosaur&quot;&gt;dynosaur&lt;/a&gt;, that can be used to support &lt;code&gt;async fn&lt;/code&gt; together with &lt;code&gt;dyn Trait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We landed an early-stage experiment to support &lt;code&gt;async Drop&lt;/code&gt; in the compiler.&lt;/li&gt;
&lt;li&gt;We landed an experimental implementation of autoreborrowing for pinned references, along with a number of other improvements for pin ergonomics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What didn&#x27;t:&lt;/strong&gt; In some areas, we didn&#x27;t make as much progress as we hoped. In retrospect, the scope of this goal was too large for one person to manage. With flagship project goals, there this a desire to paint a grand vision that I think would be better served by another mechanism without a time bound on it. I&#x27;ve been calling this a &quot;north star&quot;.&lt;/p&gt;
&lt;p&gt;In some cases, like RTN, progress has been by technical debt in the Rust compiler&#x27;s type system. For that there is an ongoing project goal to replace the trait solver with a next-generation version. Finally, on the design front, progress is sometimes slowed by uncertainty and disagreement around the future of pinning in the Rust language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looking forward:&lt;/strong&gt; My takeaway from this is that in the next project goals cycle, we should focus on answering more fundamental questions of Rust&#x27;s evolution. These should reduce uncertainty and pave the way for us to unblock major features for async in future cycles. For example, how far we can push &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;pin ergonomics&lt;/a&gt;? What approach should we take for &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;in-place initialization&lt;/a&gt;, and can it support &lt;code&gt;async fn&lt;/code&gt; in &lt;code&gt;dyn Trait&lt;/code&gt;? How will we support &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/evolving-traits.html&quot;&gt;evolving trait hierarchies&lt;/a&gt; in a general way that allows us to support the Tower &quot;middleware&quot; pattern with &lt;code&gt;async fn&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I&#x27;m excited by the lineup of goals we have for this next cycle. See you on the other side!&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/263&#x27;&gt;&lt;strong&gt;Organize Rust All-Hands 2025&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;img src&#x3D;&quot;https://img.shields.io/badge/Status-Completed%20%3D%29-green&quot; alt&#x3D;&quot;Status: Completed!&quot;&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;strong&gt;Why this goal?&lt;/strong&gt; May 15, 2025 marks the 10-year anniversary of Rust&#x27;s 1.0 release; it also marks 10 years since the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/announcing-the-subteams/2042&quot;&gt;creation of the Rust subteams&lt;/a&gt;. At the time &lt;a href&#x3D;&quot;http://web.archive.org/web/20150517235608/http://www.rust-lang.org/team.html&quot;&gt;there were 6 Rust teams with 24 people in total&lt;/a&gt;. There are now 57 teams with 166 people. In-person All Hands meetings are an effective way to help these maintainers get to know one another with high-bandwidth discussions. This year, the Rust Project will be coming together for &lt;a href&#x3D;&quot;https://2025.rustweek.org&quot;&gt;RustWeek 2025&lt;/a&gt;, a joint event organized with &lt;a href&#x3D;&quot;https://2025.rustweek.org/about/&quot;&gt;RustNL&lt;/a&gt;. Participating project teams will use the time to share knowledge, make plans, or just get to know one another better. One particular goal for the All Hands is reviewing a draft of the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/08/05/july-project-goals-update/./rust-vision-doc.md&quot;&gt;Rust Vision Doc&lt;/a&gt;, a document that aims to take stock of where Rust is and lay out high-level goals for the next few years.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;br&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/116&#x27;&gt;&lt;strong&gt;Stabilize tooling needed by Rust for Linux&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;12&quot; max&#x3D;&quot;26&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;strong&gt;Why this goal?&lt;/strong&gt; This goal continues our work from 2024H2 in supporting the &lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;experimental support for Rust development in the Linux kernel&lt;/a&gt;. Whereas in 2024H2 we were focused on stabilizing required language features, our focus in 2025H1 is stabilizing compiler flags and tooling options. We will (1) implement &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3716&quot;&gt;RFC #3716&lt;/a&gt; which lays out a design for ABI-modifying flags; (2) take the first step towards stabilizing &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/unstable.html#build-std&quot;&gt;&lt;code&gt;build-std&lt;/code&gt;&lt;/a&gt; by &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/build-std.html&quot;&gt;creating a stable way to rebuild core with specific compiler options&lt;/a&gt;; (3) extending rustdoc, clippy, and the compiler with features that extract metadata for integration into other build systems (in this case, the kernel&#x27;s build system).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What has happened?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dingxiangfei2009&quot;&gt;Ding&lt;/a&gt; opened a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142518&quot;&gt;PR#142518&lt;/a&gt; that implements the &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/336&quot;&gt;in-place initialization experiment&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ding is working on an experimental implementation (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143527&quot;&gt;PR#143527&lt;/a&gt;) for &lt;code&gt;arbitrary_self_types&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ding opened a PR to Clang (a C frontend for LLVM): &lt;a href&#x3D;&quot;https://github.com/llvm/llvm-project/pull/143424&quot;&gt;Queries on GCC-style inline assembly statements&lt;/a&gt; and got it merged.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ojeda&quot;&gt;@ojeda&lt;/a&gt; opened two Rust for Linux goals for the next period:
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/pull/347&quot;&gt;https://github.com/rust-lang/rust-project-goals/pull/347&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/pull/346&quot;&gt;https://github.com/rust-lang/rust-project-goals/pull/346&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/116#issuecomment-3045728071&quot;&gt;Comment by @tomassedovic posted on 2025-07-07:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;h2 id&#x3D;&quot;in-place-initialization&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#in-place-initialization&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
In-place initialization&lt;/h2&gt;
&lt;p&gt;Ding opened a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142518&quot;&gt;PR#142518&lt;/a&gt; that implements the &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/336&quot;&gt;in-place initialization experiment&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;arbitrary-self-types&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#arbitrary-self-types&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&lt;code&gt;arbitrary_self_types&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Ding is working on an experimental implementation (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143527&quot;&gt;PR#143527&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;queries-on-gcc-style-inline-assembly-statements&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#queries-on-gcc-style-inline-assembly-statements&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Queries on GCC-style inline assembly statements:&lt;/h2&gt;
&lt;p&gt;Ding opened a PR to Clang (a C frontend for LLVM): &lt;a href&#x3D;&quot;https://github.com/llvm/llvm-project/pull/143424&quot;&gt;https://github.com/llvm/llvm-project/pull/143424&lt;/a&gt; and got it merged.&lt;/p&gt;
&lt;p&gt;This is part of the LLVM/Clang issues the Rust for Linux project needs: &lt;a href&#x3D;&quot;https://github.com/Rust-for-Linux/linux/issues/1132&quot;&gt;https://github.com/Rust-for-Linux/linux/issues/1132&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;zindirect-branch-cs-prefix&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#zindirect-branch-cs-prefix&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&lt;code&gt;-Zindirect-branch-cs-prefix&lt;/code&gt;:&lt;/h2&gt;
&lt;p&gt;We&#x27;ve discussed whether this needs to be a separate target feature vs. a modifier on the existing &lt;code&gt;retpoline&lt;/code&gt; one. Josh argued that since having this enabled without retpoline doesn&#x27;t make sense, it should be a modifier. On the other hand, Miguel mentioned that it would be clearer on the user&#x27;s side (easier to map the names from GCC and Clang to &lt;code&gt;rustc&lt;/code&gt; when they&#x27;re the same and see that we&#x27;re enabling the same thing in Rust and Linux kernel&#x27;s &lt;code&gt;Makefiles&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It seems that &lt;code&gt;-Cmin-function-alignment&lt;/code&gt; will be another similar case.&lt;/p&gt;
&lt;p&gt;Ultimately, this is a compiler question and should be resolved here: &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/140740&quot;&gt;https://github.com/rust-lang/rust/pull/140740&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Rust for Linux team &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/140740#issuecomment-3050376762&quot;&gt;was asked&lt;/a&gt; to submit a new &lt;a href&#x3D;&quot;https://forge.rust-lang.org/compiler/proposals-and-stabilization.html#how-do-i-submit-an-mcp&quot;&gt;MCP (Major Change Proposal)&lt;/a&gt; for the &lt;code&gt;-Zindirect-branch-cs-prefix&lt;/code&gt; flag. @ojeda opened it here: &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/899&quot;&gt;https://github.com/rust-lang/compiler-team/issues/899&lt;/a&gt; and it&#x27;s now been accepted.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;stabilizing-addresssanitizer-and-leaksanitizer&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stabilizing-addresssanitizer-and-leaksanitizer&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stabilizing &lt;code&gt;AddressSanitizer&lt;/code&gt; and &lt;code&gt;LeakSanitizer&lt;/code&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/rust-lang/rust/pull/123617&lt;/li&gt;
&lt;li&gt;https://github.com/rust-lang/rust/pull/142681&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In light of the newly-proposed &lt;code&gt;#[sanitize(xyz &#x3D; &quot;on|off&quot;)]&lt;/code&gt; syntax, we&#x27;ve discussed whether it makes sense to add a shorthand to enable/disable all of them at once (e.g. &lt;code&gt;#[sanitize(all &#x3D; &quot;on|off&quot;)]&lt;/code&gt;). The experience from the field suggests that this is rarely something people do.&lt;/p&gt;
&lt;p&gt;We&#x27;ve also discussed what values should the options have (e.g. &lt;code&gt;&quot;yes&quot;&lt;/code&gt;/&lt;code&gt;&quot;no&quot;&lt;/code&gt; vs. &lt;code&gt;&quot;on&quot;&lt;/code&gt;/&lt;code&gt;&quot;off&quot;&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;). No strong preferences, but in case of an error, the compiler should suggest the correct value to use.&lt;/p&gt;
&lt;p&gt;P.S.: There will be a Lang design meeting regarding in-place initialization on Wednesday 2025-07-30: https://github.com/rust-lang/lang-team/issues/332.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/116#issuecomment-3089525491&quot;&gt;Comment by @tomassedovic posted on 2025-07-18:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;h2 id&#x3D;&quot;2025h2-goals&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#2025h2-goals&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
2025H2 Goals&lt;/h2&gt;
&lt;p&gt;@ojeda proposed two goals to move the effort forward: one for the language and the other for the compiler.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/rust-lang/rust-project-goals/pull/347&lt;/li&gt;
&lt;li&gt;https://github.com/rust-lang/rust-project-goals/pull/346&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;ongoing-work-updates&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#ongoing-work-updates&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Ongoing work updates&lt;/h2&gt;
&lt;p&gt;@dingxiangfei2009 drafted a &lt;a href&#x3D;&quot;https://hackmd.io/@rust-for-linux-/SkucBLsWxl&quot;&gt;Pre-RFC&lt;/a&gt; for the supertrait-item-in-subtrait-impl work. Need to add two modifications to the RFC to incorporate t-lang requests.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;h2 id&#x3D;&quot;goals-looking-for-help&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#goals-looking-for-help&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Goals looking for help&lt;/h2&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/121&#x27;&gt;&lt;strong&gt;Promoting Parallel Front End&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;3&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;em&gt;Help wanted:&lt;/em&gt; Help test the deadlock code in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen%20label%3AA-parallel-compiler&quot;&gt;issue list&lt;/a&gt; and try to reproduce the issue&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/121#issuecomment-3059845260&quot;&gt;Comment by @SparrowLii posted on 2025-07-11:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key developments:&lt;/strong&gt; We bring rustc-rayon in rustc&#x27;s working tree, the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143035&quot;&gt;PR&lt;/a&gt; that fixes several deadlock issues has been merged.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blockers:&lt;/strong&gt; null&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help wanted:&lt;/strong&gt; Help test the deadlock code in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen%20label%3AA-parallel-compiler&quot;&gt;issue list&lt;/a&gt; and try to reproduce the issue&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/272&#x27;&gt;&lt;strong&gt;Stabilize public/private dependencies&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;5&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;em&gt;Help wanted:&lt;/em&gt; this project goal needs a compiler developer to move forward.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;3 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/272#issuecomment-3057667265&quot;&gt;Comment by @epage posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Help wanted: this project goal needs a compiler developer to move forward.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/272#issuecomment-3061279359&quot;&gt;Comment by @sladyn98 posted on 2025-07-11:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;@epage  hey i would like to help contribute with this, if you could probably mentor me in the right direction, i could learn and ramp up and move this forward, i could start with some tasks, scope them out into small bite sized chunks and contribute&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/272#issuecomment-3062406737&quot;&gt;Comment by @epage posted on 2025-07-11:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;This is mostly in the compiler atm and I&#x27;m not in a position to mentor or review compiler changes; my first compiler PR is being merged right now.  I&#x27;m mostly on this from the Cargo side and overall coordination.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/119&#x27;&gt;&lt;strong&gt;Stabilize cargo-script&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;31&quot; max&#x3D;&quot;37&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;em&gt;Help wanted&lt;/em&gt;: I&#x27;ll be working towards verifying rustfmt, rust-analyzer, and other tooling support and will be needing at least reviews from people, if not some mentorship.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/119#issuecomment-3057687450&quot;&gt;Comment by @epage posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@epage is shifting attention back to this now that toml v0.9 is out&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Zunpretty&lt;/code&gt; support is being added in rust-lang/rust#143708&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blockers&lt;/p&gt;
&lt;p&gt;Help wanted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;ll be working towards verifying rustfmt, rust-analyzer, and other tooling support and will be needing at least reviews from people, if not some mentorship.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;h2 id&#x3D;&quot;other-goal-updates&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#other-goal-updates&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Other goal updates&lt;/h2&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/100&#x27;&gt;&lt;strong&gt;&amp;quot;Stabilizable&amp;quot; prototype for expanded const generics&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/100#issuecomment-3119584346&quot;&gt;Comment by @BoxyUwU posted on 2025-07-25:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Not much to say since the last update- I have been focused on other areas of const generics and I believe camelid has been relatively busy with other things too. I intend for the next const generics project goal to be more broadly scoped than just &lt;code&gt;min_generic_const_args&lt;/code&gt; so that other const generics work can be given a summary here :)&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/274&#x27;&gt;&lt;strong&gt;build-std&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;ul&gt;
&lt;li&gt;Discussed the latest round of feedback on the pre-RFC, the most significant of which is that the scope of the RFC is almost certainly too large for an MVP.&lt;/li&gt;
&lt;li&gt;@davidtwco presented a reformulation of the plan which focuses on the core components of build-std and leaves more features for future extensions after a minimal MVP:
&lt;ul&gt;
&lt;li&gt;Stage 1a: Introduce manual controls for enabling the build-std behavior in Cargo.&lt;/li&gt;
&lt;li&gt;Stage 1b: Introduce Cargo syntax to declare explicit dependencies on core, alloc and std crates.
&lt;ul&gt;
&lt;li&gt;This stage enables the use of Tier 3 targets on stable Rust and allows the ecosystem to start transitioning to explicit dependencies on the standard library.&lt;/li&gt;
&lt;li&gt;This stage would be considered the minimal MVP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stage 2: Teach Cargo to build std with different codegen/target modifier options.
&lt;ul&gt;
&lt;li&gt;This stage allows the standard library to be compiled with custom codegen options.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stage 3: Enable automatic standard library rebuilds.
&lt;ul&gt;
&lt;li&gt;This stage focuses on making build-std behave ergonomically and naturally without users having to manually ask for the standard library to be built.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General consensus was reached that this plan feels viable. @davidtwco will write the Stage 1a/b RFC.&lt;/li&gt;
&lt;li&gt;Submitted a &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/build-std.html&quot;&gt;2025H2 goal proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/274#issuecomment-3103580370&quot;&gt;Comment by @wesleywiser posted on 2025-07-22:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;ul&gt;
&lt;li&gt;Updates from our biweekly sync call:
&lt;ul&gt;
&lt;li&gt;Discussed the latest round of feedback on the pre-RFC, the most significant of which is that the scope of the RFC is almost certainly too large for an MVP.&lt;/li&gt;
&lt;li&gt;@davidtwco presented a reformulation of the plan which focuses on the core components of build-std and leaves more features for future extensions after a minimal MVP:
&lt;ul&gt;
&lt;li&gt;Stage 1a: Introduce manual controls for enabling the build-std behavior in Cargo.&lt;/li&gt;
&lt;li&gt;Stage 1b: Introduce Cargo syntax to declare explicit dependencies on core, alloc and std crates.
&lt;ul&gt;
&lt;li&gt;This stage enables the use of Tier 3 targets on stable Rust and allows the ecosystem to start transitioning to explicit dependencies on the standard library.&lt;/li&gt;
&lt;li&gt;This stage would be considered the minimal MVP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stage 2: Teach Cargo to build std with different codegen/target modifier options.
&lt;ul&gt;
&lt;li&gt;This stage allows the standard library to be compiled with custom codegen options.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stage 3: Enable automatic standard library rebuilds.
&lt;ul&gt;
&lt;li&gt;This stage focuses on making build-std behave ergonomically and naturally without users having to manually ask for the standard library to be built.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General consensus was reached that this plan feels viable. @davidtwco will write the Stage 1a/b RFC.&lt;/li&gt;
&lt;li&gt;Some discussion on various threads from the previous RFC draft.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/274#issuecomment-3130048243&quot;&gt;Comment by @wesleywiser posted on 2025-07-28:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Continuing the build-std work has been submitted as a Project Goal for 2025H2: https://rust-lang.github.io/rust-project-goals/2025h2/build-std.html&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/104&#x27;&gt;&lt;strong&gt;Continue resolving &amp;#x60;cargo-semver-checks&amp;#x60; blockers for merging into cargo&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;2&quot; max&#x3D;&quot;5&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;Belated update for May and June: RustWeek was &lt;em&gt;extremely&lt;/em&gt; productive! It was great to sit down in a room with all the stakeholders and talk about what it would take to get cross-crate linting working reliably at scale.&lt;/p&gt;
&lt;p&gt;As a result of this work we identified a lot of previously-unknown blockers, as well as some paths forward. More work remains, but it&#x27;s nice that we now have a much better idea of what that work should look like.&lt;/p&gt;
&lt;p&gt;TL;DR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?Sized&lt;/code&gt; linting is blocked since it &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/143197&quot;&gt;requires additional data in rustdoc JSON&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Currently we get information on the &lt;em&gt;syntactic&lt;/em&gt; presence of &lt;code&gt;?Sized&lt;/code&gt;. But another bound might be implying &lt;code&gt;Sized&lt;/code&gt;, which makes &lt;code&gt;?Sized&lt;/code&gt; not true overall.&lt;/li&gt;
&lt;li&gt;Failing to account for this would mean we get both false negatives and false positives. This is effectively a dual of the the &quot;implied bounds&quot; issue in the previous post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-crate linting has had some positive movement, and some additional blockers identified.
&lt;ul&gt;
&lt;li&gt;docs.rs has begun hosting rustdoc JSON, allowing us to use it as a cache to avoid rebuilding rustdoc JSON in cross-crate linting scenarios where those builds could get expensive.&lt;/li&gt;
&lt;li&gt;We need a way to determine which features in dependencies are active (recursively) given a set of features active in the the top crate, so we know how to generate accurate rustdoc JSON. That information is not currently available via the lockfile or any cargo interface.&lt;/li&gt;
&lt;li&gt;We need to work with the rustdoc and cargo teams to make it possible to use rmeta files to correctly combine data across crates. This has many moving parts and will take time to get right, but based on in-person conversations at RustWeek we all agreed was the best and most reliable path forward.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other improvements to &lt;code&gt;cargo-semver-checks&lt;/code&gt; are ongoing: a full set of &lt;code&gt;#[target_feature]&lt;/code&gt; lints ships in the next release, and two folks participating in Google Summer of Code have begun contributing to &lt;code&gt;cargo-semver-checks&lt;/code&gt; already!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the targets for the 2025H1 goals proved a bit too ambitious to hit in this timeline, I&#x27;m looking forward to continuing my work on the goal in the 2025H2 period!&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/104#issuecomment-3036860610&quot;&gt;Comment by @obi1kenobi posted on 2025-07-04:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Belated update for May and June: RustWeek was &lt;em&gt;extremely&lt;/em&gt; productive! It was great to sit down in a room with all the stakeholders and talk about what it would take to get cross-crate linting working reliably at scale.&lt;/p&gt;
&lt;p&gt;As a result of this work we identified a lot of previously-unknown blockers, as well as some paths forward. More work remains, but it&#x27;s nice that we now have a much better idea of what that work should look like.&lt;/p&gt;
&lt;p&gt;TL;DR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?Sized&lt;/code&gt; linting is blocked since it &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/143197&quot;&gt;requires additional data in rustdoc JSON&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Currently we get information on the &lt;em&gt;syntactic&lt;/em&gt; presence of &lt;code&gt;?Sized&lt;/code&gt;. But another bound might be implying &lt;code&gt;Sized&lt;/code&gt;, which makes &lt;code&gt;?Sized&lt;/code&gt; not true overall.&lt;/li&gt;
&lt;li&gt;Failing to account for this would mean we get both false negatives and false positives. This is effectively a dual of the the &quot;implied bounds&quot; issue in the previous post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-crate linting has had some positive movement, and some additional blockers identified.
&lt;ul&gt;
&lt;li&gt;docs.rs has begun hosting rustdoc JSON, allowing us to use it as a cache to avoid rebuilding rustdoc JSON in cross-crate linting scenarios where those builds could get expensive.&lt;/li&gt;
&lt;li&gt;We need a way to determine which features in dependencies are active (recursively) given a set of features active in the the top crate, so we know how to generate accurate rustdoc JSON. That information is not currently available via the lockfile or any cargo interface.&lt;/li&gt;
&lt;li&gt;We need to work with the rustdoc and cargo teams to make it possible to use rmeta files to correctly combine data across crates. This has many moving parts and will take time to get right, but based on in-person conversations at RustWeek we all agreed was the best and most reliable path forward.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other improvements to &lt;code&gt;cargo-semver-checks&lt;/code&gt; are ongoing: a full set of &lt;code&gt;#[target_feature]&lt;/code&gt; lints ships in the next release, and two folks participating in Google Summer of Code have begun contributing to &lt;code&gt;cargo-semver-checks&lt;/code&gt; already!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the targets for the 2025H1 goals proved a bit too ambitious to hit in this timeline, I&#x27;m looking forward to continuing my work on the goal in the 2025H2 period!&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/252&#x27;&gt;&lt;strong&gt;Declarative (&amp;#x60;macro_rules!&amp;#x60;) macro improvements&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;15&quot; max&#x3D;&quot;29&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;Current status:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@joshtriplett authored RFCs for both &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3697&quot;&gt;attribute macros&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3698&quot;&gt;derive macros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After some further iteration with the lang team, both RFCs were accepted and merged.&lt;/li&gt;
&lt;li&gt;@joshtriplett, @eholk, and @vincenzopalazzo did some successful group-spelunking into the implementation of macros in rustc.&lt;/li&gt;
&lt;li&gt;@joshtriplett &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143070/&quot;&gt;rewrote the &lt;code&gt;macro_rules!&lt;/code&gt; parser&lt;/a&gt;, which enabled future extensibility &lt;em&gt;and&lt;/em&gt; resulted in better error messages. This then enabled several follow-up refactors and simplifications.&lt;/li&gt;
&lt;li&gt;@joshtriplett wrote a PR implementing attribute macros.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/252#issuecomment-3095959868&quot;&gt;Comment by @joshtriplett posted on 2025-07-21:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Current status:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@joshtriplett authored RFCs for both &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3697&quot;&gt;attribute macros&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3698&quot;&gt;derive macros&lt;/a&gt;. Both were accepted and merged.&lt;/li&gt;
&lt;li&gt;@joshtriplett, @eholk, and @vincenzopalazzo did some successful group-spelunking into the implementation of macros in rustc.&lt;/li&gt;
&lt;li&gt;@joshtriplett &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143070/&quot;&gt;rewrote the &lt;code&gt;macro_rules!&lt;/code&gt; parser&lt;/a&gt;, which enabled future extensibility &lt;em&gt;and&lt;/em&gt; resulted in better error messages. This then enabled several follow-up refactors and simplifications.&lt;/li&gt;
&lt;li&gt;@joshtriplett wrote a PR implementing attribute macros (review in progress).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/252#issuecomment-3132736622&quot;&gt;Comment by @joshtriplett posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Update: Implementation PR for attribute macros is up.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/253&#x27;&gt;&lt;strong&gt;Evaluate approaches for seamless interop between C++ and Rust&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;4&quot; max&#x3D;&quot;6&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt; by @tmandry:&lt;/p&gt;
&lt;p&gt;This project goals cycle was important for C++ interop. With the language team we &lt;a href&#x3D;&quot;https://hackmd.io/2Ar_7CNoRkeXk1AARyOL7A?view&quot;&gt;established that we should evolve Rust to enable a first-class C++ interop story&lt;/a&gt;, making rich and automatic bindings possible between the two languages. At the Rust All Hands, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/253#issuecomment-2901991797&quot;&gt;people from across the industry met&lt;/a&gt; to describe their needs to each other, what is working for them, and what isn&#x27;t. This process of discovery has led to a lot of insight into where we can make progress now and ideas for what it will take to really &quot;solve&quot; interop.&lt;/p&gt;
&lt;p&gt;One thing I think we can say with certainty is that interop is a vast problem space, and that any two groups who want interop are very likely to have different specific needs. I&#x27;m excited about the project goal proposal by @baumanj to begin &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/interop-problem-map.html&quot;&gt;mapping this problem space&lt;/a&gt; out in the open, so that as we refer to problems we can better understand where our needs overlap and diverge.&lt;/p&gt;
&lt;p&gt;Despite the diversity of needs, we&#x27;ve noticed that there is quite a bit of overlap when it comes to language evolution. This includes many features requested by Rust for Linux, a flagship customer of the Rust Project. In retrospect, this is not surprising: Rust for Linux needs fine-grained interop with C APIs, which is roughly a subset of the needs for interop with C++ APIs. Often the need runs deeper than interop, and is more about supporting patterns in Rust that existing systems languages already support as a first-class feature.&lt;/p&gt;
&lt;p&gt;I&#x27;m looking forward to tackling areas where we can &quot;extend the fundamentals&quot; of Rust in a way that makes these, and other use cases, possible. This includes H2 project goal proposals like &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;pin ergonomics&lt;/a&gt;, &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/autoreborrow-traits.html&quot;&gt;reborrowing&lt;/a&gt;, &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;field projections&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;in-place initialization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to the discussions this past cycle. Looking forward to seeing you in the next one!&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/253#issuecomment-3134117709&quot;&gt;Comment by @tmandry posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Ahead of the all hands, @cramertj and @tmandry collaborated on a prototype called &lt;a href&#x3D;&quot;https://github.com/cramertj/rust/tree/ecdysis&quot;&gt;ecdysis&lt;/a&gt; that explored the viability of instantiating types &quot;on-demand&quot; in the Rust compiler. These types are intended to look like C++ template instantiations. The prototype was a success in that it made the direction look viable and also surfaced some foundational work that needs to happen in the compiler first. That said, continuing to pursue it is not the highest priority for either of us at the moment.&lt;/p&gt;
&lt;p&gt;Many thanks to @oli-obk for their advice and pointers.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/253#issuecomment-3134165233&quot;&gt;Comment by @tmandry posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This project goals cycle was important for C++ interop. With the language team we &lt;a href&#x3D;&quot;https://hackmd.io/2Ar_7CNoRkeXk1AARyOL7A?view&quot;&gt;established that we should evolve Rust to enable a first-class C++ interop story&lt;/a&gt;, making rich and automatic bindings possible between the two languages. At the Rust All Hands, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/253#issuecomment-2901991797&quot;&gt;people from across the industry met&lt;/a&gt; to describe their needs to each other, what is working for them, and what isn&#x27;t. This process of discovery has led to a lot of insight into where we can make progress now and ideas for what it will take to really &quot;solve&quot; interop.&lt;/p&gt;
&lt;p&gt;One thing I think we can say with certainty is that interop is a vast problem space, and that any two groups who want interop are very likely to have different specific needs. I&#x27;m excited about the project goal proposal by @baumanj to begin &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/interop-problem-map.html&quot;&gt;mapping this problem space&lt;/a&gt; out in the open, so that as we refer to problems we can better understand where our needs overlap and diverge.&lt;/p&gt;
&lt;p&gt;Despite the diversity of needs, we&#x27;ve noticed that there is quite a bit of overlap when it comes to language evolution. This includes many features requested by Rust for Linux, a flagship customer of the Rust Project. In retrospect, this is not surprising: Rust for Linux needs fine-grained interop with C APIs, which is roughly a subset of the needs for interop with C++ APIs. Often the need runs deeper than interop, and is more about supporting patterns in Rust that existing systems languages already support as a first-class feature.&lt;/p&gt;
&lt;p&gt;I&#x27;m looking forward to tackling areas where we can &quot;extend the fundamentals&quot; of Rust in a way that makes these, and other use cases, possible. This includes H2 project goal proposals like &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;pin ergonomics&lt;/a&gt;, &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/autoreborrow-traits.html&quot;&gt;reborrowing&lt;/a&gt;, &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;field projections&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;in-place initialization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to the discussions this past cycle. Looking forward to seeing you in the next one!&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/107&#x27;&gt;&lt;strong&gt;Experiment with ergonomic ref-counting&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;6&quot; max&#x3D;&quot;8&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/107#issuecomment-3020689056&quot;&gt;Comment by @spastorino posted on 2025-06-30:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;We&#x27;re currently working on the last-use optimization. We&#x27;ve the liveness analysis needed implemented and we need to extensively test it.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/109&#x27;&gt;&lt;strong&gt;Expose experimental LLVM features for GPU offloading&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;2&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@ZuseZ4:&lt;/p&gt;
&lt;p&gt;The last update for this project-goal period! I have continued to work on the gpu support, while our two Rust/LLVM autodiff gsoc students made great progress with their corresponding projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key developments:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My memory-movement PR got reviewed and after a few iterations landed in nightly. That means you now don&#x27;t even have to build your own rustc to move data to and from a GPU (with the limitations mentioned in my previous post). As part of my PR, I also updated the rustc-dev-guide: &lt;a href&#x3D;&quot;https://rustc-dev-guide.rust-lang.org/offload/installation.html&quot;&gt;https://rustc-dev-guide.rust-lang.org/offload/installation.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that the host (CPU) code landed, I looked into compiling rust kernels to GPUs. When experimenting with the amdgcn target for rustc I noticed a regression, due to which all examples for that target failed. I submitted a small patch to fix it. It landed a few days ago, and prevents rustc from generating f128 types on AMD GPUs: &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/144383&quot;&gt;https://github.com/rust-lang/rust/pull/144383&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I looked into HIP and OpenMP (managed/kernel-mode) examples to see what&#x27;s needed to launch the kernels. I should already have most of the code upstream, since it landed as part of my host PR, so I think I should soon be able to add the remaining glue code to start running Rust code on GPUs. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142696&quot;&gt;https://github.com/rust-lang/rust/pull/142696&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main PR of @KMJ-007 is up, to start generating typetrees for Enzyme, the backend of our std::autodiff module. Enzyme sometimes wants more information about a type than it can get from LLVM, so it either needs to deduce it (slow), or it will fail to compile (bad). In the future we hope to lower MIR information to Enzyme, and this is the first step for it. I just submitted the first round of reviews: &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142640&quot;&gt;https://github.com/rust-lang/rust/pull/142640&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main PR of @Sa4dUs is up, it replaces my historically grown middle-end with a proper rustc-autodiff-intrinsic. This allows us to remove a few hacks and thus makes it easier to maintain. It will also handle more corner-cases, and reduces the amount of autodiff related code in rustc by ~400 lines. I also gave it a first review pass.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also submitted an updated project-goal to finish the &lt;code&gt;std::offload&lt;/code&gt; module, to the point where we can write an interesting amount of kernels in pure (nightly) Rust and launch them to GPUs. All new project goals are supposed to have &quot;champions&quot; from the teams they are related to, which in the case of my autodiff/batching/offload work would be t-compiler and t-lang (see &lt;a href&#x3D;&quot;/inside-rust/2025/06/23/project-goals-2025h2-call-for-submissions/&quot;&gt;Niko&#x27;s blog post for more details&lt;/a&gt;). Since I joined the compiler team a while ago I can now champion for it myself on the compiler side, and @traviscross volunteered to continue the support on the language side, thank you!&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/109#issuecomment-3134501597&quot;&gt;Comment by @ZuseZ4 posted on 2025-07-30:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;The last update for this project-goal period! I have continued to work on the gpu support, while our two Rust/LLVM autodiff gsoc students made great progress with their corresponding projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key developments:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My memory-movement PR got reviewed and after a few iterations landed in nightly. That means you can now don&#x27;t even have to build your own rustc to move data to and from a GPU (with the limitations mentioned in my previous post). As part of my PR, I also updated the rustc-dev-guide: https://rustc-dev-guide.rust-lang.org/offload/installation.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that the host (CPU) code landed, I looked into compiling rust kernels to GPUs. When experimenting with the amdgcn target for rustc I noticed a regression, due to which all examples for that target failed. I submitted a small patch to fix it. It landed a few days ago, and prevents rustc from generating f128 types on AMD GPUs: https://github.com/rust-lang/rust/pull/144383&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I looked into HIP and OpenMP (managed/kernel-mode) examples to see what&#x27;s needed to launch the kernels. I should already have most of the code upstream, since it landed as part of my host PR, so I think I should soon be able to add the remaining glue code to start running Rust code on GPUs. https://github.com/rust-lang/rust/pull/142696.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main PR of @KMJ-007 is up, to start generating typetrees for Enzyme, the backend of our std::autodiff module. Enzyme sometimes wants more information about a type than it can get from LLVM, so it either needs to deduce it (slow), or it will fail to compile (bad). In the future we hope to lower MIR information to Enzyme, and this is the first step for it. I just submitted the first round of reviews: https://github.com/rust-lang/rust/pull/142640&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main PR of @Sa4dUs is up, it replaces my historically grown middle-end with a proper rustc-autodiff-intrinsic. This allows us to remove a few hacks and thus makes it easier to maintain. It will also handle more corner-cases, and reduces the amount of autodiff related code in rustc by ~400 lines. I also gave it a first review pass.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also submitted an updated project-goal to finish the &lt;code&gt;std::offload&lt;/code&gt; module, to the point where we can write an interesting amount of kernels in pure (nightly) Rust and launch them to GPUs. All new project goals are supposed to have &quot;champions&quot; from the teams they are related to, which in the case of my autodiff/batching/offload work would be t-compiler and t-lang (see Niko&#x27;s blog post for more details). Since I joined the compiler team a while ago I can now champion for it myself on the compiler side, and @traviscross volunteered to continue the support on the language side, thank you!&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/110&#x27;&gt;&lt;strong&gt;Extend pubgrub to match cargo&amp;#x27;s dependency resolution&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;2&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;@Eh2406:&lt;/p&gt;
&lt;p&gt;My time at Amazon is coming to an end. They supported the very successful effort with the 2024h2 goal, and encouraged me to propose the 2025h1 goal that is now wrapping up. Unfortunately other work efforts led to the very limited progress on the 2025h1 goal. I do not know what comes next, but it definitely involves taking time to relax and recover. Recovering involves rediscovering the joy in the work that I love. And, I have a deep passion for this problem. I hope to make some time to work on this. But, relaxing requires reducing the commitments I have made to others and the associated stress. So I will not promise progress, nor will I renew the goal for 2025h2.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/110#issuecomment-3028998355&quot;&gt;Comment by @Eh2406 posted on 2025-07-02:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;My time at Amazon is coming to an end. They supported the very successful effort with the 2024h2 goal, and encouraged me to propose the 2025h1 goal that is now wrapping up. Unfortunately other work efforts led to the very limited progress on the 2025h1 goal. I do not know what comes next, but it definitely involves taking time to relax and recover. Recovering involves rediscovering the joy in the work that I love. And, I have a deep passion for this problem. I hope to make some time to work on this. But, relaxing requires reducing the commitments I have made to others and the associated stress. So I will not promise progress, nor will I renew the goal for 2025h2.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/110#issuecomment-3118612290&quot;&gt;Comment by @tomassedovic posted on 2025-07-25:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Thank you for everything Jacob and good luck!&lt;/p&gt;
&lt;p&gt;As the 2025 H1 period is coming to an end and we&#x27;re focusing on the goals for the second half of the year, we will close this issue by the end of this month (July 2025).&lt;/p&gt;
&lt;p&gt;If you or someone else out there is working on this and has updates to share, please add them as a comment here by 2025-07-29 so they can be included in the final blog post.&lt;/p&gt;
&lt;p&gt;Even after the issue is closed, the work here &lt;em&gt;can&lt;/em&gt; be picked up -- we&#x27;ll just no longer track it as part of the 2025H1 goals effort.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/254&#x27;&gt;&lt;strong&gt;Externally Implementable Items&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;2&quot; max&#x3D;&quot;9&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/255&#x27;&gt;&lt;strong&gt;Finish the libtest json output experiment&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/255#issuecomment-3057692058&quot;&gt;Comment by @epage posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments:&lt;/p&gt;
&lt;p&gt;Blockers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Staffing wise, attention was taken by toml v0.9 and now cargo-script&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Help wanted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Help in writing out the end-user API on top of the raw harness&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/255#issuecomment-3129973078&quot;&gt;Comment by @epage posted on 2025-07-28:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/assert-rs/libtest2/pull/94&lt;/li&gt;
&lt;li&gt;https://github.com/assert-rs/libtest2/pull/99&lt;/li&gt;
&lt;li&gt;https://github.com/assert-rs/libtest2/pull/100&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/256&#x27;&gt;&lt;strong&gt;Implement Open API Namespace Support&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;3&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/256#issuecomment-3129899632&quot;&gt;Comment by @b-naber posted on 2025-07-28:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Chiming in for @epage here since further progress is still blocked on the compiler implementation. Unfortunately things have been moving more slowly than I had initially hoped. We have been doing some refactoring (https://github.com/rust-lang/rust/pull/142547 and https://github.com/rust-lang/rust/pull/144131) that allow us to introduce a new &lt;code&gt;Scope&lt;/code&gt; for namespaced crates inside name resolution. There&#x27;s a draft PR (https://github.com/rust-lang/rust/pull/140271) that should be straightforward to adapt to the refactoring.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/257&#x27;&gt;&lt;strong&gt;Implement restrictions, prepare for stabilization&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;8&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/257#issuecomment-3155934755&quot;&gt;Comment by @jhpratt posted on 2025-08-05:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Implementation remains in progress; I&#x27;ll be able to land a couple PRs soon getting it largely implemented. Progress was slower than expected due to me having a fair amount going on. As I still very much want this feature, I will continue work on it even with the goal having formally lapsed.&lt;/p&gt;
&lt;p&gt;Additionally, I think that after it&#x27;s fully implemented it may be feasible to leverage the crate-local knowledge of &lt;code&gt;impl&lt;/code&gt; restrictions to optimize &lt;code&gt;dyn&lt;/code&gt; in an &lt;code&gt;enum_dispatch&lt;/code&gt;-like manner. I haven&#x27;t investigated the feasibility of that in the compiler — it&#x27;s merely a suspicion.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/258&#x27;&gt;&lt;strong&gt;Improve state machine codegen&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;1&quot; max&#x3D;&quot;6&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/126&#x27;&gt;&lt;strong&gt;Instrument the Rust standard library with safety contracts&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;1&quot; max&#x3D;&quot;8&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/126#issuecomment-3033658101&quot;&gt;Comment by @celinval posted on 2025-07-03:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Unfortunately, we didn&#x27;t make much progress since April except for a very useful discussion during Rust all hands. A few notes can be found here: https://hackmd.io/@qnR1-HVLRx-dekU5dvtvkw/SyUuR6SZgx. We&#x27;re still waiting for the design discussion meeting with the compiler team.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/126#issuecomment-3120266419&quot;&gt;Comment by @celinval posted on 2025-07-25:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;@dawidl022 is working as part of GSoC to improve contracts implementation under @tautschnig mentorship. Additionally, @tautschnig and @carolynzech are working on porting contracts from https://github.com/model-checking/verify-rust-std to the Rust repo.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/259&#x27;&gt;&lt;strong&gt;Making compiletest more maintainable: reworking directive handling&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;5&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/260&#x27;&gt;&lt;strong&gt;Metrics Initiative&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;6&quot; max&#x3D;&quot;7&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/260#issuecomment-3063856749&quot;&gt;Comment by @yaahc posted on 2025-07-11:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;No update for this month beyond the previous finalish update. I still intend to publish the json-&amp;gt;influxdb conversion code&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/122&#x27;&gt;&lt;strong&gt;Model coherence in a-mir-formality&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;6&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/113&#x27;&gt;&lt;strong&gt;Next-generation trait solver&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/113#issuecomment-3068877231&quot;&gt;Comment by @lcnr posted on 2025-07-14:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;We - or well, overwhelmingly @compiler-errors - continued to make performance improvements to the new solver over the last month: https://github.com/rust-lang/rust/pull/142802 https://github.com/rust-lang/rust/pull/142732 https://github.com/rust-lang/rust/pull/142317 https://github.com/rust-lang/rust/pull/142316 https://github.com/rust-lang/rust/pull/142223 https://github.com/rust-lang/rust/pull/142090 https://github.com/rust-lang/rust/pull/142088 https://github.com/rust-lang/rust/pull/142085 https://github.com/rust-lang/rust/pull/141927 https://github.com/rust-lang/rust/pull/141581 https://github.com/rust-lang/rust/pull/141451. &lt;code&gt;nalgebra&lt;/code&gt; is currently 70% slower than with the old solver implementation and we seem to be about 30-50% slower in most &lt;em&gt;normal&lt;/em&gt; crates.&lt;/p&gt;
&lt;p&gt;I&#x27;ve been working on strengthening the search graph to avoid the hang in rayon and https://github.com/rust-lang/trait-system-refactor-initiative/issues/210 in a principled way. This has been more challenging than expected and will take at least another week to get done.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/113#issuecomment-3131816067&quot;&gt;Comment by @lcnr posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Since the last update @compiler-errors landed two additional perf optimizations: https://github.com/rust-lang/rust/pull/143500 https://github.com/rust-lang/rust/pull/143309.&lt;/p&gt;
&lt;p&gt;I am still working on the hang in rayon and https://github.com/rust-lang/trait-system-refactor-initiative/issues/210. I&#x27;ve ended up having to change the invariants of the type system to support a fast paths based on structural identity, e.g. quickly proving &lt;code&gt;T: Trait&amp;lt;&#x27;a&amp;gt;&lt;/code&gt; via a &lt;code&gt;T: Trait&amp;lt;&#x27;a&amp;gt;&lt;/code&gt; where-bound, in https://github.com/rust-lang/rust/pull/144405. Changing this invariant requires some additional work in HIR typeck, so I am currently reducing the perf impact of that change.&lt;/p&gt;
&lt;p&gt;With this I can then land the actual fast paths which fix both rayon and similar hangs due to a large number of where-bounds. This should also be done soon. I will then go back to implement the new opaque type handling approach as that&#x27;s the only remaining issue before we can call for testing.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/261&#x27;&gt;&lt;strong&gt;Nightly support for ergonomic SIMD multiversioning&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;5&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/261#issuecomment-3057901302&quot;&gt;Comment by @veluca93 posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments: https://github.com/rust-lang/rust/issues/143352 proposes an experimental feature to investigate an effect-based approach to integrate generics and target features, effectively giving ways to have different monomorphizations of a function have different target features.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/262&#x27;&gt;&lt;strong&gt;Null and enum-discriminant runtime checks in debug builds&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;1&quot; max&#x3D;&quot;3&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/262#issuecomment-3118996993&quot;&gt;Comment by @1c3t3a posted on 2025-07-25:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;strong&gt;Key developments&lt;/strong&gt;: &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/141759&quot;&gt;Landed&lt;/a&gt; the enum discriminant check and enabled it for transmutes to enums for now (this is not so powerful), currently &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/144353&quot;&gt;extending&lt;/a&gt; it to union reads and pointer reads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blockers:&lt;/strong&gt; question of how to insert a check if we already observe UB (e.g. the enum is only represented by an i1 in LLVM IR). This is to be addressed by the next project goal: https://rust-lang.github.io/rust-project-goals/2025h2/comprehensive-niche-checks.html.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/114&#x27;&gt;&lt;strong&gt;Optimizing Clippy &amp;amp; linting&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;2&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@blyxyas:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final monthly update!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Even more optimizations have been achieved on the documentation lints front. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/pull/15030&quot;&gt;https://github.com/rust-lang/rust-clippy/pull/15030&lt;/a&gt; (-6.7% on &lt;code&gt;bumpalo&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 3rd heaviest function was optimized away by 99.75%, along with the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings&quot;&gt;&lt;code&gt;strlen_on_c_strings&lt;/code&gt;&lt;/a&gt; lint. This gives us about a 15% optimization on &lt;code&gt;tokio&lt;/code&gt;. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/pull/15043&quot;&gt;https://github.com/rust-lang/rust-clippy/pull/15043&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a minor improvement, we now instantiate a lot less types on &lt;code&gt;unit_return_expecting_ord&lt;/code&gt; (89% less calls in some benchmarks). This saves us a lot of locks on the type interner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a final update to the project goal, I&#x27;d like to say a little bit more:&lt;/p&gt;
&lt;p&gt;I&#x27;m very happy with how this project goal has turned out. We&#x27;ve seen improvements in the 35-60% range for your real world projects and while I couldn&#x27;t deliver the two objectives the project goal promised because of an excess in ambition, I still don&#x27;t think that these are too far-fetched by any means.&lt;/p&gt;
&lt;p&gt;As some specific examples, you can now witness a &lt;strong&gt;38%&lt;/strong&gt; performance improvements in analyzing Cargo, and a &lt;strong&gt;61%&lt;/strong&gt; in analyzing Tokio!&lt;/p&gt;
&lt;p&gt;Much more to come, and thanks for sticking by while we make Clippy a better project, with better developer experience.
Have a great week, and I hope that you can enjoy all the performance improvements that we&#x27;ve delivered across this project goal.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/114#issuecomment-3013307725&quot;&gt;Comment by @blyxyas posted on 2025-06-27:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;strong&gt;Final monthly update!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Even more optimizations have been achieved on the documentation lints front. https://github.com/rust-lang/rust-clippy/pull/15030. (-6.7% on &lt;code&gt;bumpalo&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The 3rd heaviest function was optimized away by 99.75%, along with the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings&quot;&gt;&lt;code&gt;strlen_on_c_strings&lt;/code&gt;&lt;/a&gt; lint. This gives us about a 15% optimization on &lt;code&gt;tokio&lt;/code&gt;. https://github.com/rust-lang/rust-clippy/pull/15043&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a minor improvement, we now instantiate a lot less types on &lt;code&gt;unit_return_expecting_ord&lt;/code&gt; (89% less calls in some benchmarks). This saves us a lot of locks on the type interner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a final update to the project goal, I&#x27;d like to say a little bit more:&lt;/p&gt;
&lt;p&gt;I&#x27;m very happy with how this project goal has turned out. We&#x27;ve seen improvements in the 35-60% range for your real world projects and while I couldn&#x27;t deliver the two objectives the project goal promised because of an excess in ambition, I still don&#x27;t think that these are too far-fetched by any means.&lt;/p&gt;
&lt;p&gt;As some specific examples, you can now witness a &lt;strong&gt;38%&lt;/strong&gt; performance improvements in analyzing Cargo, and a &lt;strong&gt;61%&lt;/strong&gt; in analyzing Tokio!&lt;/p&gt;
&lt;p&gt;Much more to come, and thanks for sticking by while we make Clippy a better project, with better developer experience.
Have a great week, and I hope that you can enjoy all the performance improvements that we&#x27;ve delivered across this project goal.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/106&#x27;&gt;&lt;strong&gt;Prepare const traits for stabilization&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;6&quot; max&#x3D;&quot;14&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@oli-obk:&lt;/p&gt;
&lt;p&gt;The following contributors have made many libcore traits &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Daniel-Aaron-Bloom&lt;/li&gt;
&lt;li&gt;@estebank&lt;/li&gt;
&lt;li&gt;@Randl&lt;/li&gt;
&lt;li&gt;@SciMind2460&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@fee1-dead has also updated the syntax to allow for &lt;code&gt;const trait Trait {}&lt;/code&gt; declarations instead of &lt;code&gt;#[const_trait] trait Trait {}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks y&#x27;all for moving this feature along!&lt;/p&gt;
&lt;p&gt;We have encountered few issues, but there is one major one:&lt;/p&gt;
&lt;p&gt;without &lt;code&gt;dyn [const] Trait&lt;/code&gt; support we cannot turn any of the &lt;code&gt;core::fmt&lt;/code&gt; traits const in a usable way. This in turn makes things like &lt;code&gt;Result::unwrap&lt;/code&gt; not usable in const contexts without using &lt;code&gt;const_eval_select&lt;/code&gt; to not actually perform any formatting within const contexts.&lt;/p&gt;
&lt;p&gt;It is my belief that now would be a good time to call for testing to get community input on the current syntax and behaviour.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/106#issuecomment-3057687748&quot;&gt;Comment by @oli-obk posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;The current proposal is &lt;code&gt;[const] Trait&lt;/code&gt; syntax for bounds, &lt;code&gt;impl const Trait for Type&lt;/code&gt; syntax for impls and &lt;code&gt;const Trait&lt;/code&gt; for trait declarations. No annotations on methods in traits or impls required, but all implied from the trait or impl.&lt;/p&gt;
&lt;p&gt;Re-constification of libstd has commenced&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/106#issuecomment-3126049238&quot;&gt;Comment by @oli-obk posted on 2025-07-28:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;The following contributors have made many libcore traits &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Daniel-Aaron-Bloom&lt;/li&gt;
&lt;li&gt;@estebank&lt;/li&gt;
&lt;li&gt;@Randl&lt;/li&gt;
&lt;li&gt;@SciMind2460&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@fee1-dead has also updated the syntax to allow for &lt;code&gt;const trait Trait {}&lt;/code&gt; declarations instead of &lt;code&gt;#[const_trait] trait Trait {}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks y&#x27;all for moving this feature along!&lt;/p&gt;
&lt;p&gt;We have encountered few issues, but there is one major one:&lt;/p&gt;
&lt;p&gt;without &lt;code&gt;dyn [const] Trait&lt;/code&gt; support we cannot turn any of the &lt;code&gt;core::fmt&lt;/code&gt; traits const in a usable way. This in turn makes things like &lt;code&gt;Result::unwrap&lt;/code&gt; not usable in const contexts without using &lt;code&gt;const_eval_select&lt;/code&gt; to not actually perform any formatting within const contexts.&lt;/p&gt;
&lt;p&gt;It is my belief that now would be a good time to call for testing to get community input on the current syntax and behaviour.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/264&#x27;&gt;&lt;strong&gt;Prototype a new set of Cargo &amp;quot;plumbing&amp;quot; commands&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/264#issuecomment-3057671794&quot;&gt;Comment by @epage posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;ul&gt;
&lt;li&gt;Key developments:
&lt;ul&gt;
&lt;li&gt;GSoC work has started on https://github.com/crate-ci/cargo-plumbing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo locate-manifest&lt;/code&gt; is merged&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo read-manifest&lt;/code&gt; is merged&lt;/li&gt;
&lt;li&gt;Investigation is on-going for dependency resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Blockers&lt;/li&gt;
&lt;li&gt;Help wanted&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/264#issuecomment-3129904179&quot;&gt;Comment by @epage posted on 2025-07-28:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/crate-ci/cargo-plumbing/pull/50 has been posted&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/265&#x27;&gt;&lt;strong&gt;Publish first rust-lang-owned release of &amp;quot;FLS&amp;quot;&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;img src&#x3D;&quot;https://img.shields.io/badge/Status-Completed%20%3D%29-green&quot; alt&#x3D;&quot;Status: Completed!&quot;&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;Key Developments: &lt;strong&gt;Goal Complete.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The FLS is now an independent repository within the Rust Project, not relying on imported Ferrocene packages for building (we have brought them in locally). A version of the FLS has been published at &lt;a href&#x3D;&quot;https://rust-lang.github.io/fls&quot;&gt;https://rust-lang.github.io/fls&lt;/a&gt; using the new build process. The content changes were mostly non-normative at this point, but we have officially published the first rust-lang owned release of the FLS.&lt;/p&gt;
&lt;p&gt;Next steps: Continue adding/modifying appropriate content for the FLS moving forward. Determine any potential H2 2025 spec-related project goals.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/265#issuecomment-3019529070&quot;&gt;Comment by @JoelMarcey posted on 2025-06-30:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key Developments: &lt;strong&gt;Goal Complete.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The FLS is now an independent repository within the Rust Project, not relying on imported Ferrocene packages for building (we have brought them in locally). A version of the FLS has been published at https://rust-lang.github.io/fls using the new build process. The content changes were mostly non-normative at this point, but we have officially published the first rust-lang owned release of the FLS.&lt;/p&gt;
&lt;p&gt;Next steps: Continue adding/modifying appropriate content for the FLS moving forward. Determine any potential H2 2025 spec-related project goals.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/266&#x27;&gt;&lt;strong&gt;Publish first version of StableMIR on crates.io&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;6&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;We&#x27;re almost done with the refactoring thanks again to @makai410 who is part of the GSoC.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;stable_mir&lt;/code&gt; crate is now &lt;code&gt;rustc_public&lt;/code&gt;. We are now finalizing the infrastructure and working on a compiler MCP. We should be ready to publish version 0.1 in the second half of the year. Thanks to everyone who helped, especially @makai410, who did most of the work.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/266#issuecomment-3033560981&quot;&gt;Comment by @celinval posted on 2025-07-03:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;We&#x27;re almost done with the refactoring thanks again to @makai410 who is part of the GSoC. We are now considering renaming the crate before publishing, if you have any suggestion, please post it in https://rust-lang.zulipchat.com/#narrow/channel/320896-project-stable-mir/topic/Renaming.20StableMIR/with/520505712.&lt;/p&gt;
&lt;p&gt;Finally, we&#x27;re designing the test and release automation.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/266#issuecomment-3120251130&quot;&gt;Comment by @celinval posted on 2025-07-25:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;The &lt;code&gt;stable_mir&lt;/code&gt; crate is now &lt;code&gt;rustc_public&lt;/code&gt;. We are now finalizing the infrastructure and working on a compiler MCP. We should be ready to publish version 0.1 in the second half of the year. Thanks to everyone who helped, especially @makai410, who did most of the work.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/267&#x27;&gt;&lt;strong&gt;Research: How to achieve safety when linking separately compiled code&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;3&quot; max&#x3D;&quot;11&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/268&#x27;&gt;&lt;strong&gt;Run the 2025H1 project goal program&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;7&quot; max&#x3D;&quot;13&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/269&#x27;&gt;&lt;strong&gt;Rust Vision Document&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;4&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/275&#x27;&gt;&lt;strong&gt;rustc-perf improvements&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;7&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;We made further progress on the new benchmarking scheme. The side of the website is nearing MVP status, currently we are switching focus on the side of the collector that runs the benchmarks.&lt;/p&gt;
&lt;p&gt;Some notable PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benchmark request queue for try builds and release artifacts (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2166&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2166&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2192&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2192&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2197&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2197&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2201&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2201&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Splitting of benchmark requests into benchmark jobs, including backfilling (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2207&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2207&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Benchmark sets (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf/pull/2206&quot;&gt;https://github.com/rust-lang/rustc-perf/pull/2206&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/275#issuecomment-3132709062&quot;&gt;Comment by @Kobzol posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;We made further progress on the new benchmarking scheme. The side of the website is nearing MVP status, currently we are switching focus on the side of the collector that runs the benchmarks.&lt;/p&gt;
&lt;p&gt;Some notable PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benchmark request queue for try builds and release artifacts (https://github.com/rust-lang/rustc-perf/pull/2166, https://github.com/rust-lang/rustc-perf/pull/2192, https://github.com/rust-lang/rustc-perf/pull/2197, https://github.com/rust-lang/rustc-perf/pull/2201).&lt;/li&gt;
&lt;li&gt;Splitting of benchmark requests into benchmark jobs, including backfilling (https://github.com/rust-lang/rustc-perf/pull/2207).&lt;/li&gt;
&lt;li&gt;Benchmark sets (https://github.com/rust-lang/rustc-perf/pull/2206).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/118&#x27;&gt;&lt;strong&gt;Scalable Polonius support on nightly&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;10&quot; max&#x3D;&quot;18&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@lqd:&lt;/p&gt;
&lt;p&gt;Here are the key developments for the month of June, the last of this H1 project goal period.&lt;/p&gt;
&lt;p&gt;Amanda has been preparing a &lt;strong&gt;couple of papers&lt;/strong&gt; on polonius 🔥!&lt;/p&gt;
&lt;p&gt;As for me, I&#x27;ve continued on the previous threads of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the drop-liveness dataflow &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/141667&quot;&gt;optimization&lt;/a&gt; landed, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142471&quot;&gt;I&#x27;ve also changed&lt;/a&gt; the bitset used in the loans-in-scope computation to better support the sparser cases with a lot of loans that we see in a handful of benchmarks (and we could tune that cutoff if we wanted to, it&#x27;s currently around 2K by default in the &lt;code&gt;MixedBitSet&lt;/code&gt; implementation IIRC).&lt;/li&gt;
&lt;li&gt;the rustc-perf benchmarks we have mostly exercise the move/init dataflow parts of borrow-checking, so I&#x27;ve created a stress test that puts emphasis on the loans-in-scope computation in particular, and have started gathering stats on crates.io code to have realistic examples. There are juicy functions in there, where one of the dataflow passes can take 40 seconds.&lt;/li&gt;
&lt;li&gt;I reworked the in-tree analysis to what should be close to a &quot;polonius alpha&quot; version of the analysis -- modulo a few loose ends that still need to be fixed -- and did some perf runs and a few crater runs with it enabled by default: nothing exploded. We know that this version based on reachability fixes fewer issues than a full version handling 100% of the flow-sensitivity problem -- like the datalog implementation did, albeit too slowly -- but is &lt;em&gt;actionable&lt;/em&gt; and meaningful progress: it fixes many cases of NLL problem 3. We&#x27;re also reasonably confident that we can make a production-ready version of this alpha algorithm, and in this project goal period we have identified the areas where improvements can be made to gradually improve expressiveness, and that we wish to explore later.&lt;/li&gt;
&lt;li&gt;I also discovered a couple of failing examples with the new edition edition 2024 capture rules, and generally need to take care of member constraints, so it&#x27;s not unexpected. Another small signal to improve test coverage, but not specific to borrowck: it&#x27;s for all tests and editions in general, as seen in &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/861&quot;&gt;MCP #861&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I&#x27;ve opened &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143093&quot;&gt;PR #143093&lt;/a&gt; to land this polonius alpha analysis, and after looking into fixing member constraints, it should be the behavioral basis of what we hope to stabilize in the future, once it&#x27;s more suited to production (e.g. better perf, better test coverage, more edge cases analyses, formalism) be it by incremental improvements, or via a different rewritten version of this algorithm -- with modifications to NLLs to make the interactions lazier/on-demand, so that we don&#x27;t run a more expensive analysis if we don&#x27;t need to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future, hopefully for a h2 project goal, I plan to do that work towards stabilizing this alpha version of the analysis.&lt;/p&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/118#issuecomment-3019421051&quot;&gt;Comment by @lqd posted on 2025-06-30:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Here are the key developments for the month of June, the last of this H1 project goal period.&lt;/p&gt;
&lt;p&gt;Amanda has been preparing a &lt;strong&gt;couple of papers&lt;/strong&gt; on polonius 🔥!&lt;/p&gt;
&lt;p&gt;As for me, I&#x27;ve continued on the previous threads of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the drop-liveness dataflow &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/141667&quot;&gt;optimization&lt;/a&gt; landed, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/142471&quot;&gt;I&#x27;ve also changed&lt;/a&gt; the bitset used in the loans-in-scope computation to better support the sparser cases with a lot of loans that we see in a handful of benchmarks (and we could tune that cutoff if we wanted to, it&#x27;s currently around 2K by default in the &lt;code&gt;MixedBitSet&lt;/code&gt; implementation IIRC).&lt;/li&gt;
&lt;li&gt;the rustc-perf benchmarks we have mostly exercise the move/init dataflow parts of borrow-checking, so I&#x27;ve created a stress test that puts emphasis on the loans-in-scope computation in particular, and have started gathering stats on crates.io code to have realistic examples. There are juicy functions in there, where one of the dataflow passes can take 40 seconds.&lt;/li&gt;
&lt;li&gt;I reworked the in-tree analysis to what should be close to a &quot;polonius alpha&quot; version of the analysis -- modulo a few loose ends that still need to be fixed -- and did some perf runs and a few crater runs with it enabled by default: nothing exploded. We know that this version based on reachability fixes fewer issues than a full version handling 100% of the flow-sensitivity problem -- like the datalog implementation did, albeit too slowly -- but is &lt;em&gt;actionable&lt;/em&gt; and meaningful progress: it fixes many cases of NLL problem 3. We&#x27;re also reasonably confident that we can make a production-ready version of this alpha algorithm, and in this project goal period we have identified the areas where improvements can be made to gradually improve expressiveness, and that we wish to explore later.&lt;/li&gt;
&lt;li&gt;I also discovered a couple of failing examples with the new edition edition 2024 capture rules, and generally need to take care of member constraints, so it&#x27;s not unexpected. Another small signal to improve test coverage, but not specific to borrowck: it&#x27;s for all tests and editions in general, as seen in &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/861&quot;&gt;MCP #861&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I&#x27;ve opened &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/143093&quot;&gt;PR #143093&lt;/a&gt; to land this polonius alpha analysis, and after looking into fixing member constraints, it should be the behavioral basis of what we hope to stabilize in the future, once it&#x27;s more suited to production (e.g. better perf, better test coverage, more edge cases analyses, formalism) be it by incremental improvements, or via a different rewritten version of this algorithm -- with modifications to NLLs to make the interactions lazier/on-demand, so that we don&#x27;t run a more expensive analysis if we don&#x27;t need to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future, hopefully for a h2 project goal, I plan to do that work towards stabilizing this alpha version of the analysis.&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/271&#x27;&gt;&lt;strong&gt;Secure quorum-based cryptographic verification and mirroring for crates.io&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;0&quot; max&#x3D;&quot;12&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@walterhpearce:&lt;/p&gt;
&lt;p&gt;Hello All -&lt;/p&gt;
&lt;p&gt;Following is a status update and breakdown on where things currently stand for the MVP implementation of TUF and the choices we’ve landed at so far with the discussion via this goal. At the end of this update is a briefer list-form of this update.&lt;/p&gt;
&lt;p&gt;In summary, we have landed at moving forward with a TAP-16 Merkle Tree implementation of TUF for crates.io, with technical choices pending on the best balance and optimization for our specific performance needs. We are still currently on track to have a MVP public implementation by the end of July of this implementation, which optimizations will be tested against. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test repositories and tooling for rustup, releases and crates.io&lt;/li&gt;
&lt;li&gt;Temporary repository tooling for updates (We are currently outside these services, and so updates occur via periodic checks)&lt;/li&gt;
&lt;li&gt;An out-of-band index copy for crates.io for in-line signing testing&lt;/li&gt;
&lt;li&gt;cargo-signing subcommand tooling for end-user functionality (TUF updates, validation and downloading)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We still have open questions for the specific approach of the Merkle tree, which is continuing into H2. We have also reached an acceptable consensus with the infrastructure team for deployment planning.&lt;/p&gt;
&lt;p&gt;TUF Implementation&lt;/p&gt;
&lt;p&gt;During H1, we experimented with 4 implementations of TUF: To-spec, Hashed Bins, Succinct Hashed Bins, and TUF TAP-16 Merkle Trees. Hashed Bins &amp;amp; Succinct Hashed Bins are the current approaches being experimented with in the Python community, and we wanted to see how that would align with our growth and bandwidth requirements. After experimenting, we found the linear growth models to still be unacceptable, thus landing at the Merkle Tree implementation. This still comes at a round-trip increase cost, however, and for H2 we are now experimenting with how to implement the Merkle tree to reduce round-trips - via balancing, implementation details and tree slicing - or a combination of the three..&lt;/p&gt;
&lt;p&gt;Quorum &amp;amp; Roles&lt;/p&gt;
&lt;p&gt;On the higher level grounds of quorums and infrastructure, through discussions, we have come to a consensus on maintaining a top-level quorum, but removing intermediate levels for simplicity. The root quorum shall be the Infrastructure team for initial deployment; roles under this quorum will be nightly, releases, rustup and crates.io; each one of these keys will be a single live key which resides in KMS. We will leverage KMS API’s to perform live signing for all actions of those roles (new releases and crates). The hierarchy initially proposed in the RFC will be removed in favor of this approach.&lt;/p&gt;
&lt;p&gt;The root quorum will manage the roles via tuf-on-ci on a github repository, while actual signing actions using the live keys will all occur via local tooling in their CI.&lt;/p&gt;
&lt;p&gt;Choices Made&lt;/p&gt;
&lt;p&gt;Listed here the choices made as a part of this goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial root quorum will be the infrastructure team with a 3-member threshold. This can be rotated or grown at any time by that team in the future.&lt;/li&gt;
&lt;li&gt;Role keys will live in KMS and be used in the appropriate CI/infrastructure of those teams (Infra for nightly, releases and rustup; the crates.io team for crates). This will be managed via IAM access to the KMS.&lt;/li&gt;
&lt;li&gt;TAP-16 Merkle Tree implementation of TUF was chosen. Other methods linear+ growth models were unacceptable. We still have open questions to resolve around bandwidth vs. round-trips&lt;/li&gt;
&lt;li&gt;tuf-on-ci will only be used for the root quorum and role changes, to leverage PR-workflows for easy management.&lt;/li&gt;
&lt;li&gt;The source-of-truth TUF repository will live in an S3 bucket.&lt;/li&gt;
&lt;li&gt;We will rely on cloudtrail for audit logging of KMS and work to make those logs available for transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A public MVP will go live at the end of July / August, and live changes/tests will be made of the Merkle tree implementation there.&lt;/li&gt;
&lt;li&gt;We still need to determine the appropriate trade off for round trips vs. bandwidth for the Merkle Tree. We are collecting more granular logs from the sparse index and crates.io index as a whole to accomplish this. Crate downloads vs. updates are very unbalanced, and we expect to get significant reductions of both by appropriately balancing the tree.&lt;/li&gt;
&lt;li&gt;Work needs to start on beginning to stand up infrastructure in the project to house this in the simpleinfra repository. Besides the raw infrastructure, this needs to be tooling for the initial creation ceremony.&lt;/li&gt;
&lt;li&gt;We’ve begun thinking about what different mirroring strategies look like when utilizing TUF, to make sure we consider those when deploying this. The MVP provides basic validation of any mirror, but how can mirroring and fallbacks possibly be integrated?&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/271#issuecomment-3133590786&quot;&gt;Comment by @walterhpearce posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Hello All -&lt;/p&gt;
&lt;p&gt;Following is a status update and breakdown on where things currently stand for the MVP implementation of TUF and the choices we’ve landed at so far with the discussion via this goal. At the end of this update is a briefer list-form of this update.&lt;/p&gt;
&lt;p&gt;In summary, we have landed at moving forward with a TAP-16 Merkle Tree implementation of TUF for crates.io, with technical choices pending on the best balance and optimization for our specific performance needs. We are still currently on track to have a MVP public implementation by the end of July of this implementation, which optimizations will be tested against. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test repositories and tooling for rustup, releases and crates.io&lt;/li&gt;
&lt;li&gt;Temporary repository tooling for updates (We are currently outside these services, and so updates occur via periodic checks)&lt;/li&gt;
&lt;li&gt;An out-of-band index copy for crates.io for in-line signing testing&lt;/li&gt;
&lt;li&gt;cargo-signing subcommand tooling for end-user functionality (TUF updates, validation and downloading)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We still have open questions for the specific approach of the Merkle tree, which is continuing into H2. We have also reached an acceptable consensus with the infrastructure team for deployment planning.&lt;/p&gt;
&lt;p&gt;TUF Implementation&lt;/p&gt;
&lt;p&gt;During H1, we experimented with 4 implementations of TUF: To-spec, Hashed Bins, Succinct Hashed Bins, and TUF TAP-16 Merkle Trees. Hashed Bins &amp;amp; Succinct Hashed Bins are the current approaches being experimented with in the Python community, and we wanted to see how that would align with our growth and bandwidth requirements. After experimenting, we found the linear growth models to still be unacceptable, thus landing at the Merkle Tree implementation. This still comes at a round-trip increase cost, however, and for H2 we are now experimenting with how to implement the Merkle tree to reduce round-trips - via balancing, implementation details and tree slicing - or a combination of the three..&lt;/p&gt;
&lt;p&gt;Quorum &amp;amp; Roles&lt;/p&gt;
&lt;p&gt;On the higher level grounds of quorums and infrastructure, through discussions, we have come to a consensus on maintaining a top-level quorum, but removing intermediate levels for simplicity. The root quorum shall be the Infrastructure team for initial deployment; roles under this quorum will be nightly, releases, rustup and crates.io; each one of these keys will be a single live key which resides in KMS. We will leverage KMS API’s to perform live signing for all actions of those roles (new releases and crates). The hierarchy initially proposed in the RFC will be removed in favor of this approach.&lt;/p&gt;
&lt;p&gt;The root quorum will manage the roles via tuf-on-ci on a github repository, while actual signing actions using the live keys will all occur via local tooling in their CI.&lt;/p&gt;
&lt;p&gt;Choices Made&lt;/p&gt;
&lt;p&gt;Listed here the choices made as a part of this goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial root quorum will be the infrastructure team with a 3-member threshold. This can be rotated or grown at any time by that team in the future.&lt;/li&gt;
&lt;li&gt;Role keys will live in KMS and be used in the appropriate CI/infrastructure of those teams (Infra for nightly, releases and rustup; the crates.io team for crates). This will be managed via IAM access to the KMS.&lt;/li&gt;
&lt;li&gt;TAP-16 Merkle Tree implementation of TUF was chosen. Other methods linear+ growth models were unacceptable. We still have open questions to resolve around bandwidth vs. round-trips&lt;/li&gt;
&lt;li&gt;tuf-on-ci will only be used for the root quorum and role changes, to leverage PR-workflows for easy management.&lt;/li&gt;
&lt;li&gt;The source-of-truth TUF repository will live in an S3 bucket.&lt;/li&gt;
&lt;li&gt;We will rely on cloudtrail for audit logging of KMS and work to make those logs available for transparency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A public MVP will go live at the end of July / August, and live changes/tests will be made of the Merkle tree implementation there.&lt;/li&gt;
&lt;li&gt;We still need to determine the appropriate trade off for round trips vs. bandwidth for the Merkle Tree. We are collecting more granular logs from the sparse index and crates.io index as a whole to accomplish this. Crate downloads vs. updates are very unbalanced, and we expect to get significant reductions of both by appropriately balancing the tree.&lt;/li&gt;
&lt;li&gt;Work needs to start on beginning to stand up infrastructure in the project to house this in the simpleinfra repository. Besides the raw infrastructure, this needs to be tooling for the initial creation ceremony.&lt;/li&gt;
&lt;li&gt;We’ve begun thinking about what different mirroring strategies look like when utilizing TUF, to make sure we consider those when deploying this. The MVP provides basic validation of any mirror, but how can mirroring and fallbacks possibly be integrated?&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/270&#x27;&gt;&lt;strong&gt;SVE and SME on AArch64&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;2&quot; max&#x3D;&quot;16&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;p&gt;@davidtwco:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rust-lang/rust#137944 got merged with Part I of the Sized Hierarchy work
&lt;ul&gt;
&lt;li&gt;A bug was discovered through fuzzing when the feature was enabled, users could write &lt;code&gt;dyn PointeeSized&lt;/code&gt; which would trigger the builtin impl for &lt;code&gt;PointeeSized&lt;/code&gt;, which doesn&#x27;t exist. rust-lang/rust#143104 was merged to fix that.&lt;/li&gt;
&lt;li&gt;In attempt to experiment with relaxing &lt;code&gt;Deref::Target&lt;/code&gt;, we discovered that sizedness supertraits weren&#x27;t being elaborated from where bounds on projections.
&lt;ul&gt;
&lt;li&gt;Adding those bounds meant that there could be two candidates for some obligations - from a where bound and from an item bound - where previously there would only be the item bound. Where bounds take priority and this could result in regions being equated that did not previously.&lt;/li&gt;
&lt;li&gt;By fixing that, we ran into issues with normalisation that was happening which restricted what code using GATs was accepted. Fixing this got everything passing but more code is accepted.&lt;/li&gt;
&lt;li&gt;rust-lang/rust#142712 has this fixed, but isn&#x27;t yet merged as it&#x27;s quite involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I&#x27;ve still not made any changes to the Sized Hierarchy RFC, there&#x27;s a small amount of discussion which will be responded to once the implementation has landed.&lt;/li&gt;
&lt;li&gt;While implementing Part II of the Sized Hierarchy work, we ran into limitations of the old solver w/r/t host effect predicates around coinductive cycles. We&#x27;ve put that aside until there&#x27;s nothing else to do or the new solver is ready.&lt;/li&gt;
&lt;li&gt;We&#x27;ve been reviving the RFC and implementation of the SVE infrastructure, relying on some exceptions because of not having const sizedness yet, but knowing that we&#x27;ve got a solution for that coming, we&#x27;re hoping to see this merged as an experiment once it is ready.&lt;/li&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rust#144404 that documents the current status of the Sized Hierarchy feature and our plans for it.
&lt;ul&gt;
&lt;li&gt;As before, implementing const sizedness is on hold until the next solver is ready or there&#x27;s nothing else to do.&lt;/li&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rust#144064 with the interesting parts of rust-lang/rust#142712 from a t-types perspective, that&#x27;s currently waiting on FCP checkboxes.
&lt;ul&gt;
&lt;li&gt;This will enable experimentation with relaxing &lt;code&gt;Deref::Target&lt;/code&gt; to &lt;code&gt;PointeeSized&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rfcs#3838 and rust-lang/rust#143924 updating rust-lang/rfcs#3268 and rust-lang/rust#118917 respectively.
&lt;ul&gt;
&lt;li&gt;There&#x27;s been lots of useful feedback on this that we&#x27;re working on addressing and will have an update soon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;2 detailed updates available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/270#issuecomment-3062329839&quot;&gt;Comment by @davidtwco posted on 2025-07-11:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;ul&gt;
&lt;li&gt;rust-lang/rust#137944 got merged with Part I of the Sized Hierarchy work
&lt;ul&gt;
&lt;li&gt;A bug was discovered through fuzzing when the feature was enabled, users could write &lt;code&gt;dyn PointeeSized&lt;/code&gt; which would trigger the builtin impl for &lt;code&gt;PointeeSized&lt;/code&gt;, which doesn&#x27;t exist. rust-lang/rust#143104 was merged to fix that.&lt;/li&gt;
&lt;li&gt;In attempt to experiment with relaxing &lt;code&gt;Deref::Target&lt;/code&gt;, we discovered that sizedness supertraits weren&#x27;t being elaborated from where bounds on projections.
&lt;ul&gt;
&lt;li&gt;Adding those bounds meant that there could be two candidates for some obligations - from a where bound and from an item bound - where previously there would only be the item bound. Where bounds take priority and this could result in regions being equated that did not previously.&lt;/li&gt;
&lt;li&gt;By fixing that, we ran into issues with normalisation that was happening which restricted what code using GATs was accepted. Fixing this got everything passing but more code is accepted.&lt;/li&gt;
&lt;li&gt;rust-lang/rust#142712 has this fixed, but isn&#x27;t yet merged as it&#x27;s quite involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I&#x27;ve still not made any changes to the Sized Hierarchy RFC, there&#x27;s a small amount of discussion which will be responded to once the implementation has landed.&lt;/li&gt;
&lt;li&gt;While implementing Part II of the Sized Hierarchy work, we ran into limitations of the old solver w/r/t host effect predicates around coinductive cycles. We&#x27;ve put that aside until there&#x27;s nothing else to do or the new solver is ready.&lt;/li&gt;
&lt;li&gt;We&#x27;ve been reviving the RFC and implementation of the SVE infrastructure, relying on some exceptions because of not having const sizedness yet, but knowing that we&#x27;ve got a solution for that coming, we&#x27;re hoping to see this merged as an experiment once it is ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/270#issuecomment-3132566564&quot;&gt;Comment by @davidtwco posted on 2025-07-29:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rust#144404 that documents the current status of the Sized Hierarchy feature and our plans for it.
&lt;ul&gt;
&lt;li&gt;As before, implementing const sizedness is on hold until the next solver is ready or there&#x27;s nothing else to do.&lt;/li&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rust#144064 with the interesting parts of rust-lang/rust#142712 from a t-types perspective, that&#x27;s currently waiting on FCP checkboxes.
&lt;ul&gt;
&lt;li&gt;This will enable experimentation with relaxing &lt;code&gt;Deref::Target&lt;/code&gt; to &lt;code&gt;PointeeSized&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We&#x27;ve opened rust-lang/rfcs#3838 and rust-lang/rust#143924 updating rust-lang/rfcs#3268 and rust-lang/rust#118917 respectively.
&lt;ul&gt;
&lt;li&gt;There&#x27;s been lots of useful feedback on this that we&#x27;re working on addressing and will have an update soon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/273&#x27;&gt;&lt;strong&gt;Unsafe Fields&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;1&quot; max&#x3D;&quot;7&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;div style&#x3D;&quot;display: flex;&quot; class&#x3D;&quot;mt2 mb3&quot;&gt;
    &lt;div style&#x3D;&quot;flex: auto;&quot;&gt;&lt;a href&#x3D;&#x27;https://github.com/rust-lang/rust-project-goals/issues/123&#x27;&gt;&lt;strong&gt;Use annotate-snippets for rustc diagnostic output&lt;/strong&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;flex: initial;&quot;&gt;&lt;progress value&#x3D;&quot;2&quot; max&#x3D;&quot;13&quot;&gt;&lt;/progress&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- markdown separator --&gt;
&lt;!-- markdown separator --&gt;
&lt;details&gt;
&lt;summary&gt;1 detailed update available.&lt;/summary&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-project-goals/issues/123#issuecomment-3058802310&quot;&gt;Comment by @Muscraft posted on 2025-07-10:&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;p&gt;Key developments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new API for &lt;code&gt;annotate-snippets&lt;/code&gt; got merged (and tweaked)&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://asciinema.org/a/MlUN66AxlyLbaJ9VP8zDWlutt&quot;&gt;&lt;code&gt;annotate-snippets&lt;/code&gt; passed all of &lt;code&gt;rustc&lt;/code&gt;&#x27;s UI tests for the first time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I started getting &lt;code&gt;annotate-snippets&lt;/code&gt; ready for release&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pulls?q&#x3D;is%3Apr+author%3AMuscraft+created%3A%3E2025-03-31+&quot;&gt;I started opening PRs&lt;/a&gt; to get &lt;code&gt;rustc&lt;/code&gt; to match &lt;code&gt;annotate-snippets&lt;/code&gt; planned output changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blockers&lt;/p&gt;
&lt;p&gt;Help wanted&lt;/p&gt;
&lt;!-- this comment helps to convince the markdown parser to do the right thing --&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
</content>

        <author>
            <name>Tomas Sedovic</name>
        </author>
    </entry>
</feed>
