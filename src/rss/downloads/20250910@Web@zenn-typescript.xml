<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 10 Sep 2025 06:40:27 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[VoltAgentで作るAIエージェント]]></title><description><![CDATA[
 はじめに
AI エージェント開発、盛り上がっていますよね！ でも、実際に手を動かしてみると「うーん、中で何が起こってるんだ？」「デバッグが思ったより大変…」なんて壁にぶつかること、ありませんか？
2024 年に TypeScript ベースの AI エージェントフレームワークとして旋風を巻き起こした Mastra は、確かに画期的でした。多くの開発者がその可能性に熱狂し、あっという間にスターを集めたのも記憶に新しいでしょう。
しかし、Mastra がワークフローや RAG（Retrieval Augmented Generation）に強みを持つのに対し、「もっとエージェントの“気持...]]></description><link>https://zenn.dev/gemcook/articles/507e6b9f538729</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/507e6b9f538729</guid><pubDate>Wed, 10 Sep 2025 05:20:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PD2ylC2u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VoltAgent%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258BAI%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2598%25E3%2582%2585%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSU5GSmJ5LVZmWVhYeG92ZzBlMU9acHI4QkxCQ1hmZTVDTGJVaEwwbGFHNDJFZ3Mxbz1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>じゅん</dc:creator></item><item><title><![CDATA[【npm公開】React電卓入力フォームプラグインを公開しました！税込税抜計算機能付きで、あらゆる金額入力シーンに対応]]></title><description><![CDATA[
 はじめに
こんにちは、ぐみと申します！
今回は、私が開発・公開した React電卓入力フォームプラグイン「@gumigumih/react-calculator-input-form」 について紹介しますね。
このプラグインは、Reactアプリケーションで金額入力が必要な場面で、電卓機能と税込税抜計算機能を簡単に実装できるようにするものです。

 プラグインの概要

 基本情報


パッケージ名: @gumigumih/react-calculator-input-form


バージョン: 1.1.2（最新）

ライセンス: MIT

対応環境: React 18+

TypeSc...]]></description><link>https://zenn.dev/gumigumih/articles/20250908_react-calculator-input-form-plugin</link><guid isPermaLink="true">https://zenn.dev/gumigumih/articles/20250908_react-calculator-input-form-plugin</guid><pubDate>Wed, 10 Sep 2025 02:01:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZeDrycKJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590npm%25E5%2585%25AC%25E9%2596%258B%25E3%2580%2591React%25E9%259B%25BB%25E5%258D%2593%25E5%2585%25A5%25E5%258A%259B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%25E7%25A8%258E%25E8%25BE%25BC%25E7%25A8%258E%25E6%258A%259C%25E8%25A8%2588%25E7%25AE%2597%25E6%25A9%259F%25E8%2583%25BD%25E4%25BB%2598%25E3%2581%258D%25E3%2581%25A7%25E3%2580%2581%25E3%2581%2582%25E3%2582%2589%25E3%2582%2586%25E3%2582%258B%25E9%2587%2591%25E9%25A1%258D%25E5%2585%25A5%25E5%258A%259B%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2590%25E3%2581%25BF%25EF%25BD%259C%25E5%25BF%2597%25E4%25BA%258B%25E3%2582%2592%25E4%25BB%2595%25E4%25BA%258B%25E3%2581%25AB%25EF%25BC%25A0PM%25EF%25BC%258F%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHBNOHNUZXlfY0lydExIS3NhanNpb0U2QUZhVjFJSmJId3c0OGtmYUNUeVg5enV3TT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぐみ｜志事を仕事に＠PM／ディレクター</dc:creator></item><item><title><![CDATA[【TypeScript】interfaceとtypeの違い]]></title><description><![CDATA[
 はじめに
interfaceとtypeの違いについてまとめていこうと思います。

 interfaceとは
interface は主にオブジェクトの構造（プロパティやメソッド）を定義する仕組みです。さらに、呼び出しシグネチャ（関数型）、コンストラクタシグネチャ、インデックスシグネチャ（配列型や連想配列型） も定義できます。

 基本的な使い方
interface Person {
  name: string;
  age: number;
  greet(): void;
}
const user1: Person = {
  name: "Alice",
  age: 30,
 ...]]></description><link>https://zenn.dev/daichi09167/articles/3f421939a1ba19</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/3f421939a1ba19</guid><pubDate>Tue, 09 Sep 2025 08:37:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pzg7C7dv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591interface%25E3%2581%25A8type%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi2724%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODE0Yzk4ODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi2724</dc:creator></item><item><title><![CDATA[オプションを渡しても渡さなくても動く関数]]></title><description><![CDATA[doSomething() でも doSomething({init: true}) みたいにも呼べるやつが書きたかった。 doSomething(true) でいつも諦めてたんよね

 結論
const doSomething = (options: { init?: boolean } = {}): void =&gt; {
  const { init = false } = options;

  console.log("initial:", init);
};

 まとめ
options: { init?: boolean } = {} っての、ちょっときもいな
]]></description><link>https://zenn.dev/ksyunnnn/articles/095c1dea25e31f</link><guid isPermaLink="true">https://zenn.dev/ksyunnnn/articles/095c1dea25e31f</guid><pubDate>Tue, 09 Sep 2025 08:02:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UJ4umjFg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E6%25B8%25A1%25E3%2581%2597%25E3%2581%25A6%25E3%2582%2582%25E6%25B8%25A1%25E3%2581%2595%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E3%2582%2582%25E5%258B%2595%25E3%2581%258F%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%25B0%25E3%2581%2597%25E3%2582%2585%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlZDgzMjFiNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こばしゅん</dc:creator></item><item><title><![CDATA[Zenncafeで初登壇した話]]></title><description><![CDATA[
 はじめに
最近今後のキャリアについて悩み、先輩に早すぎると言われました笑　たくみです。
実は約2ヶ月前にZenncafeというクラスメソッド様が運営している記事投稿サイト、Zennのイベントで登壇してきたので、その時の気持ちとかまとめます。
登壇するか迷っている方、参考にして登壇しましょう。

 Zenncafeとは
Zenncafeの概要についてconnpassから引用します。

Zenncafe（ゼンカフェ）は、技術投稿プラットフォーム「Zenn」を基盤に、「Zenn」と「Cafe」を掛け合わせた、新しいユーザーグループです。このコミュニティは、執筆者、読者、そして組織が技術を通...]]></description><link>https://zenn.dev/uniformnext/articles/zenncafe-speaking</link><guid isPermaLink="true">https://zenn.dev/uniformnext/articles/zenncafe-speaking</guid><pubDate>Tue, 09 Sep 2025 05:33:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_0TjmAz1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenncafe%25E3%2581%25A7%25E5%2588%259D%25E7%2599%25BB%25E5%25A3%2587%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takumi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjMTE2MTQ2NWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%258D%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%2588%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhZTg4YjhiOTAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi</dc:creator></item><item><title><![CDATA[ESLint + Prettier から Biome への移行（Powered by Rust）]]></title><description><![CDATA[
 はじめに
フロントエンド開発において、コードの品質管理は ESLint と Prettier の組み合わせが長らく標準的なソリューションでした。しかし、近年注目を集めているのが Biome です。Rust で書かれたこのツールチェーンは、リンターとフォーマッターを統合し、従来のツールを大幅に上回る性能を実現しています。
本記事では、実際に ESLint + Prettier から Biome への移行を行った経験をもとに、移行の動機、Rustによる性能向上、実際のセットアップ方法について解説します。

 Biome とは
Biome は JavaScript、TypeScript、J...]]></description><link>https://zenn.dev/duckdevv/articles/77133b4dcfd1e0</link><guid isPermaLink="true">https://zenn.dev/duckdevv/articles/77133b4dcfd1e0</guid><pubDate>Tue, 09 Sep 2025 02:15:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xeosetNC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ESLint%2520%252B%2520Prettier%2520%25E3%2581%258B%25E3%2582%2589%2520Biome%2520%25E3%2581%25B8%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%25EF%25BC%2588Powered%2520by%2520Rust%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:duckdevv%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk3MTNlN2IxZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>duckdevv</dc:creator></item><item><title><![CDATA[Claudeの学習モードを使ってコードのリファクタリングをした]]></title><description><![CDATA[前回のブログ記事でちょっとだけ触れたClaude Codeの学習モードについて、ちょうどいい感じのコードが上がってきたのでやってみました。
今回はClaude Codeではなく、Claudeのチャットでやってます。
やっぱりなんか………チャットのClaudeの方が賢い気がしているのですがそういうモードだからでしょうか？
リファクタ前のコードはこれ（by Claude Code）
const moveImage = ( index: number, action: ImageOrderAction ) =&gt; {
	if ( action === 'moveUp' &amp;&amp;...]]></description><link>https://zenn.dev/hamworks/articles/45053f7c0efef7</link><guid isPermaLink="true">https://zenn.dev/hamworks/articles/45053f7c0efef7</guid><pubDate>Tue, 09 Sep 2025 01:28:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IPDvnSTM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25A1%25E3%2581%2582%25E3%2581%258D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2N2U3ZWNkMzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BEHAMWORKS%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhY2MyYjExNTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちあき</dc:creator></item><item><title><![CDATA[Docker 開発での node_modules マウント、Anonymous Volume という選択肢]]></title><description><![CDATA[Docker Compose（ローカル開発環境）を使って JavaScript / TypeScript プロジェクトを動かすとき、node_modules はどうマウントしているでしょうか？
私は以前は「ローカルの node_modules をコンテナに直接マウントする」方式（Direct Mount Override）を使っていましたが、最終的には Anonymous Volume（匿名ボリューム） に落ち着きました。
この記事では、両者の違いと Anonymous Volume 戦略のメリットを整理します。


 直接マウントする方法とそのメリット
以下のようにローカルの node...]]></description><link>https://zenn.dev/duckdevv/articles/1f680e4debbf2d</link><guid isPermaLink="true">https://zenn.dev/duckdevv/articles/1f680e4debbf2d</guid><pubDate>Tue, 09 Sep 2025 01:11:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AAyfS8Lo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%25AE%2520node_modules%2520%25E3%2583%259E%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2580%2581Anonymous%2520Volume%2520%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:duckdevv%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk3MTNlN2IxZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>duckdevv</dc:creator></item><item><title><![CDATA[Jest mockResolvedValueの型エラーを1分で解決]]></title><description><![CDATA[
 概要
個人開発中に該当のエラーに遭遇し、AIに尋ねたのですが回りくどい解決策を提案されてしまい、「初めから公式を参照した方が早かったな」という体験をしたため、記事として投稿することにしました。
https://jestjs.io/docs/mock-function-api#mockfnmockresolvedvaluevalue

 問題
Jest + TypeScriptの組み合わせでmockResolvedValueを使うときに、下記のような型エラーに遭遇することがあります：
// ❌ 型エラー
const mockFn = jest.fn().mockResolvedValu...]]></description><link>https://zenn.dev/hasuto/articles/jest-typescript-mockresolvedvalue-fix</link><guid isPermaLink="true">https://zenn.dev/hasuto/articles/jest-typescript-mockresolvedvalue-fix</guid><pubDate>Mon, 08 Sep 2025 22:32:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e7LGshf2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jest%2520mockResolvedValue%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%25921%25E5%2588%2586%25E3%2581%25A7%25E8%25A7%25A3%25E6%25B1%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hasu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y2ODRhYzg3MTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hasu</dc:creator></item><item><title><![CDATA[レビューしやすいフロントエンドPR分割の型]]></title><description><![CDATA[
 はじめに
フロントエンド開発では、1つのPRに詰め込みすぎてレビューが大変になるケースがよくあります。
レビュワーも実装者と同じ時間を割けるわけではないですし、一方で、PRを細かく分けすぎてもレビューアーが全体像を掴みにくくなります。
つまり、ちょうどいい単位でPRを切る「型」を持つことが大切なのですが、
レビュワー目線を少し考えてPRを切って欲しいと思い、この記事を書いています。
この記事では、僕自身が実際に使っている フロントエンドPR分割の型 を紹介しますので
ご参考になれば嬉しいです。


 図解：PR分割の流れ
まず全体像を把握してもらうために、PR分割の流れを図にまとめま...]]></description><link>https://zenn.dev/junk/articles/4b8817ed385a9f</link><guid isPermaLink="true">https://zenn.dev/junk/articles/4b8817ed385a9f</guid><pubDate>Mon, 08 Sep 2025 14:49:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dEMtSSJW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2581%2597%25E3%2582%2584%25E3%2581%2599%25E3%2581%2584%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589PR%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25AE%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:junichi%2520kako%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmOGRlYWE1YTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>junichi kako</dc:creator></item><item><title><![CDATA[ArrayBufferって何なんだろう。]]></title><description><![CDATA[
 経緯
クライアントからbase64形式で送られてきた情報をサーバーで復元し保存するという実装をLLMに教えてもらった。
const fileBuffer = Buffer.from(base64Data, "base64");
const uint8Array = new Uint8Array(fileBuffer);
return new File([uint8Array], name, { type: contentType });
Buffer、ArrayBuffer、Base64、uint8Arrayなど見覚えはあるけれど、どんなもの達なのかしっかりと理解できていないので調べ...]]></description><link>https://zenn.dev/dotlog_techblog/articles/6e636824e7dd16</link><guid isPermaLink="true">https://zenn.dev/dotlog_techblog/articles/6e636824e7dd16</guid><pubDate>Mon, 08 Sep 2025 14:47:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6syliQa6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ArrayBuffer%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A0%25E3%2582%258D%25E3%2581%2586%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sinano%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiYjk5ODg5MDAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%2589%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ozaUYxV0NPZTlLakIyeHNpQVBPU0EtWXB1UVBVYzV2d2pJeUZPSVE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sinano</dc:creator></item><item><title><![CDATA[余計なuseMemoを1つ消したらtscが135秒高速化した話]]></title><description><![CDATA[
 余計なuseMemoを1つ消したらtscが135秒高速化した話

 はじめに
大規模なReact + TypeScriptプロジェクトにおいて、無意味なオブジェクトマッピングを行うuseMemoを1つ削除することで、TypeScriptコンパイル時間が146秒から11秒に短縮された（92%改善）事例について報告します。
根本原因の完全な特定には至らなかったものの、実際に発生した現象と問題特定のプロセスを記録します。
本件では、ある程度論理的に原因の当たりをつけたあと、先入観を排して特定するためにAIコーディングエージェントを活用して愚直な二分探索での検証を行わせ、最終的に135秒にも...]]></description><link>https://zenn.dev/meijin/articles/typescript-usememo-performance-pitfall</link><guid isPermaLink="true">https://zenn.dev/meijin/articles/typescript-usememo-performance-pitfall</guid><pubDate>Mon, 08 Sep 2025 08:44:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FOGZWMYU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BD%2599%25E8%25A8%2588%25E3%2581%25AAuseMemo%25E3%2582%25921%25E3%2581%25A4%25E6%25B6%2588%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589tsc%25E3%2581%258C135%25E7%25A7%2592%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:meijin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pPWmtyWk1nS3djRXl5a2w1X2lVTFZFVmtVVUpkNzkzcjlfejhERjRzPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>meijin</dc:creator></item><item><title><![CDATA[【TypeScript】instanceof演算子について]]></title><description><![CDATA[
 初めに
instanceof について自分自身でまとめてみようと思い、この記事を書いてます。
(初心者のため優しい目で見てください)

 instanceofとは？
オブジェクトが特定のクラスから生成されたかどうかを実行時に判定する。つまり、クラスベースの実行時型チェックとして便利な演算子です。

 構文
obj instanceof クラス名

obj　→　判定したいオブジェクト
クラス名　→　判定対象のクラス


 基本的な使い方
class Animal {
  name: string;
  constructor(name: string) {
    this.name ...]]></description><link>https://zenn.dev/daichi09167/articles/d362834e625478</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/d362834e625478</guid><pubDate>Mon, 08 Sep 2025 08:31:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9J0HAbEl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591instanceof%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi2724%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODE0Yzk4ODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi2724</dc:creator></item><item><title><![CDATA[複数のデータ取得処理を高速にする]]></title><description><![CDATA[トップページなど情報量が多いページは、複数のfetch処理ををする場合があります。どのように実装する事が適切か説明します。

 1つずつデータを取得
fetchTopPageDataを内で、様々なデータを取得する為複数のfetchを実行しています。1つずつデータを取得する直列タイプです。
今は2つのfetchですが、fetch処理が増えると待ち時間が増えます。
type FetchResponse&lt;T&gt; = Promise&lt;
  | {
      isSuccess: true;
      data: T;
    }
  | {
      isSuccess: ...]]></description><link>https://zenn.dev/chot/articles/dc0d06627a9e40</link><guid isPermaLink="true">https://zenn.dev/chot/articles/dc0d06627a9e40</guid><pubDate>Mon, 08 Sep 2025 06:01:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UxFEUdf7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%258F%2596%25E5%25BE%2597%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2588%25E3%2583%259F%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSW1uc1FQOHJYaERqWUw3ZU5aTWlJdm1qOEhnNUVBSDZNTE5tR3BmbDZOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>トミー</dc:creator></item><item><title><![CDATA[Plan-and-Execute × Elasticsearch × Ollama で“惜しい検索”を卒業する]]></title><description><![CDATA[
 はじめに
「社内ドキュメントを探しても欲しい情報が見つからない...」
「全文検索は厳密な単語には強いけど、言い換えた表現が拾えない」
「ベクトル検索は幅広く拾うけど、ノイズが多すぎる」
こんな "惜しい検索体験" に悩んだことはありませんか？
この記事では、Plan-and-Execute型AIエージェント と Elasticsearch（全文検索）、Qdrant（ベクトル検索） を組み合わせて、この問題を解決する検索システムの実装方法を紹介します。
特徴的なのは、Ollama（ローカルLLM） を使用することで OpenAIなしでも動作 する点です。プライバシーが重要な社内システ...]]></description><link>https://zenn.dev/ein14/articles/e779d7dbaf1973</link><guid isPermaLink="true">https://zenn.dev/ein14/articles/e779d7dbaf1973</guid><pubDate>Mon, 08 Sep 2025 05:45:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--68dAzAE4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Plan-and-Execute%2520%25C3%2597%2520Elasticsearch%2520%25C3%2597%2520Ollama%2520%25E3%2581%25A7%25E2%2580%259C%25E6%2583%259C%25E3%2581%2597%25E3%2581%2584%25E6%25A4%259C%25E7%25B4%25A2%25E2%2580%259D%25E3%2582%2592%25E5%258D%2592%25E6%25A5%25AD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ein14%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YzZhOTgyYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ein14</dc:creator></item><item><title><![CDATA[React用のデバイス判別フック作ったので、みんなに共有]]></title><description><![CDATA[
 経緯
もともと、react-device-detectというライブラリを利用させてもらってたんだけど、思った動作をしないので(使い方が悪かったのかも？)、自分で作りました。

 前提環境

nodejs・npmインストール済み
React


 インストール
全体コード'use client';
import { useCallback, useEffect, useState } from 'react';

interface ReturnDeviceType {
    error: unknown;

    isMobile: boolean;
    isAndroid:...]]></description><link>https://zenn.dev/locu/articles/c01e05f4549056</link><guid isPermaLink="true">https://zenn.dev/locu/articles/c01e05f4549056</guid><pubDate>Mon, 08 Sep 2025 03:50:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---kWyunA3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E7%2594%25A8%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25B9%25E5%2588%25A4%25E5%2588%25A5%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E3%2581%25BF%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25AB%25E5%2585%25B1%25E6%259C%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AD%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlZTFiY2ZkNDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ロク</dc:creator></item><item><title><![CDATA[ブラウザストレージの状態管理をzustandで行うと簡単かつ高機能で便利]]></title><description><![CDATA[こんにちは。株式会社 Sally エンジニアの @piesukeです。
私たちは、マーダーミステリーを遊べることが出来るアプリ「ウズ」と、マーダーミステリーを制作してウズ上で遊べることが出来るアプリ「ウズスタジオ」を開発しています。
私が最近やって面白かったマーダーミステリーは プライト・フライト です。
弊社は状態管理ライブラリに zustand を使用しています。今回は zustand を使ってブラウザストレージへの状態の永続化を簡単かつ高機能に実現する方法を解説します。

 zustand とは
Zustand は、React のためのシンプルで高速な状態管理ライブラリです。「状態...]]></description><link>https://zenn.dev/uzu_tech/articles/browser-storage-zustand</link><guid isPermaLink="true">https://zenn.dev/uzu_tech/articles/browser-storage-zustand</guid><pubDate>Mon, 08 Sep 2025 03:30:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7NYGx2BS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592zustand%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2586%25E3%2581%25A8%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%258B%25E3%2581%25A4%25E9%25AB%2598%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:piesuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5NjI5NGIwZmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UZU%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjNDgyMGY2MzAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>piesuke</dc:creator></item><item><title><![CDATA[ReactやNext.jsでのステート管理ライブラリの比較]]></title><description><![CDATA[
 注意 : この記事はAIによるDeep researchの内容が含まれるため、一部ハルシネーションを含む場合がございます。また、勉強中の筆者の備忘録としてアウトプットしている記事になるため間違った情報も含まれる可能性があります。あくまで参考としていただき間違っている情報がある場合はご指摘いただけますと幸いです。

 React・Next.js ステート管理ライブラリの比較
Reactアプリケーション及びNext.jsにおける主要な状態管理ライブラリを、実装コード、開発体験、パフォーマンス、使用場面の観点から詳しく比較します。ToDoアプリの例を通じて、それぞれのライブラリの特徴を理解...]]></description><link>https://zenn.dev/ren21/articles/baa6271bfbfcd7</link><guid isPermaLink="true">https://zenn.dev/ren21/articles/baa6271bfbfcd7</guid><pubDate>Mon, 08 Sep 2025 01:32:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4Wvvh2iT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2582%2584Next.js%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2588%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258C%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4YTk2YTVjMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>れん</dc:creator></item><item><title><![CDATA[ReactやNext.jsでのAPIフェッチ方法の比較]]></title><description><![CDATA[
 注意 : この記事はAIによるDeep researchの内容が含まれるため、一部ハルシネーションを含む場合がございます。また、勉強中の筆者の備忘録としてアウトプットしている記事になるため間違った情報も含まれる可能性があります。あくまで参考としていただき間違っている情報がある場合はご指摘いただけますと幸いです。

 ～この記事をまとめた経緯～
ReactやNext.jsでAPIを叩く際に、fetchやaxiosだけでなく、SWR、TanStack Queryなど様々な選択肢があります。
また、React19から登場したuseフックや、Reactのみで構築したアプリケーション、Next...]]></description><link>https://zenn.dev/ren21/articles/4a257f80f03ef5</link><guid isPermaLink="true">https://zenn.dev/ren21/articles/4a257f80f03ef5</guid><pubDate>Mon, 08 Sep 2025 01:11:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ldfus63t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2582%2584Next.js%25E3%2581%25A7%25E3%2581%25AEAPI%25E3%2583%2595%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2581%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258C%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4YTk2YTVjMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>れん</dc:creator></item><item><title><![CDATA[TypeScript + Phaser で古典的なゲームAIを実装してみた]]></title><description><![CDATA[スマホ向けのミニWebゲームを作りました。
https://ikatako.kondroid.com
※ 音が出るので注意！！
このゲームはルールベースの自立駆動型エージェントを実装しており、タコとイカがマップ上を適当に彷徨い、敵を追いかけ回し、敵を攻撃して、HPや武器が減ったらアイテムを取りに行ったりします。いわゆる古典的なゲームAIを実装したゲームになります。
作った経緯については以下を参照ください。
https://zenn.dev/kondroid00/articles/48d1b3c5376e55#なぜ復刻させたのか

 入門の次のハードル
2Dゲームの開発はゲームプログラミン...]]></description><link>https://zenn.dev/kondroid00/articles/bf10cec130f510</link><guid isPermaLink="true">https://zenn.dev/kondroid00/articles/bf10cec130f510</guid><pubDate>Sun, 07 Sep 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ak9XhFXp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%252B%2520Phaser%2520%25E3%2581%25A7%25E5%258F%25A4%25E5%2585%25B8%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0AI%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kondroid%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2YjY2YjcyNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kondroid</dc:creator></item></channel></rss>