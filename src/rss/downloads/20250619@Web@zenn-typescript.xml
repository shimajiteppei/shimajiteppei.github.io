<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 19 Jun 2025 09:42:19 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[人間中身が重要なんていうけれど。Ts、君の中身を見せてくれ]]></title><description><![CDATA[誰と結婚したい？
誰と付き合いたい？
なんて話になると、私のネガティブ根性がここぞとばかりに顔を出し。
「僕みたいな人には選ぶ権利ないよ。顔もかっこよくないし」
すると、鬼の首を取ったかのように、
「いや、結局中身よ。それこそ30代とかになると顔じゃなくて人柄が重要になるから大丈夫」
いや、僕まだ全然20代
いや、これ遠回しに悪口？
いや、自分で卑下してるんだからそれを相手に受容されるのは当たり前か
いや、そもそもノリ悪くネガティブ発言したのが原因ですねこれ
いや、ごめんなさい
なんてことを考えてるとふと思いました。
TypeScriptってJsに型というエッセンスを入れた言語だよね？
...]]></description><link>https://zenn.dev/5dai5/articles/c76dc641c71d5c</link><guid isPermaLink="true">https://zenn.dev/5dai5/articles/c76dc641c71d5c</guid><pubDate>Thu, 19 Jun 2025 08:17:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CzvtLOKA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BA%25BA%25E9%2596%2593%25E4%25B8%25AD%25E8%25BA%25AB%25E3%2581%258C%25E9%2587%258D%25E8%25A6%2581%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A6%25E3%2581%2584%25E3%2581%2586%25E3%2581%2591%25E3%2582%258C%25E3%2581%25A9%25E3%2580%2582Ts%25E3%2580%2581%25E5%2590%259B%25E3%2581%25AE%25E4%25B8%25AD%25E8%25BA%25AB%25E3%2582%2592%25E8%25A6%258B%25E3%2581%259B%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:5dai5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTJsZGNuYXV1ZEc2MVUybDhmQlVkdGhreHpabXdnbGVqblZXMHdwTTZOLVhLZmxBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>5dai5</dc:creator></item><item><title><![CDATA[similarity-ts でAIと人間が書き散らした重複コードを見つける]]></title><description><![CDATA[AI に TypeScript を書かせていると、 _enhanced だとか _fixed だとか、似たようなファイルが増え続けます。
それらを検知するツールを作りました。
https://github.com/mizchi/similarity-ts
similarity-ts は AST ベースの構造比較で意味的に似ている関数同士を検出します。現時点では、まず関数(+アロー関数)の比較をターゲットにしています。
AST の効率的な重複チェックということで、流石に TS ではなく Rust で書きました。 cargo でインストールできます：
# GitHubから直接インストール
c...]]></description><link>https://zenn.dev/mizchi/articles/introduce-ts-similarity</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/introduce-ts-similarity</guid><pubDate>Thu, 19 Jun 2025 05:47:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MCD0Y4nH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:similarity-ts%2520%25E3%2581%25A7AI%25E3%2581%25A8%25E4%25BA%25BA%25E9%2596%2593%25E3%2581%258C%25E6%259B%25B8%25E3%2581%258D%25E6%2595%25A3%25E3%2582%2589%25E3%2581%2597%25E3%2581%259F%25E9%2587%258D%25E8%25A4%2587%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25A6%258B%25E3%2581%25A4%25E3%2581%2591%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[@praha/byethrowの全機能リファレンス]]></title><description><![CDATA[
 はじめに
前回の記事で@praha/byethrowについて紹介しましたが、本記事ではこのライブラリの全機能についてより詳しく紹介したいと思います。
@praha/byethrowは、JavaScript/TypeScript向けの軽量でシンプルなエラーハンドリングライブラリです。Result型を用いることで、関数の成功と失敗を明示的に表現し、try/catchに頼らない型安全なエラーハンドリングを実現できます。
以下では、Resultモジュールに含まれる全ての関数について、用途 (何をする関数か)、引数, 戻り値, 使用例コードの順で解説します。まだこのライブラリを知らない方でも分...]]></description><link>https://zenn.dev/praha/articles/7e1cd6ad0aa49b</link><guid isPermaLink="true">https://zenn.dev/praha/articles/7e1cd6ad0aa49b</guid><pubDate>Thu, 19 Jun 2025 01:36:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ppcQReZm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540praha%252Fbyethrow%25E3%2581%25AE%25E5%2585%25A8%25E6%25A9%259F%25E8%2583%25BD%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiZDIyMmFjMTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[Framerをノーコードで終わらせない、フロントエンドエンジニアのCode活用術]]></title><description><![CDATA[
 はじめに
こんにちは！令和トラベルでFrontendエンジニアをしているzonoです。
今回は、最近社内でLP制作のために本格導入したノーコードツール「Framer」について紹介します。

 Framerとは？
Framer（framer.com）は、Figmaのような直感的なデザインUIでWebサイト制作できるオランダ発のノーコード・ローコードツールです。もともとはプロトタイピングツールとしてスタートしましたが、現在では本格的なWebサイト制作プラットフォームとして進化しています。


 エンジニアにとってのFramerの魅力
エンジニア視点から見たときに、Framerが魅力的な理...]]></description><link>https://zenn.dev/reiwatravel/articles/57b0702da8758c</link><guid isPermaLink="true">https://zenn.dev/reiwatravel/articles/57b0702da8758c</guid><pubDate>Thu, 19 Jun 2025 01:10:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kiJOpoKE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Framer%25E3%2582%2592%25E3%2583%258E%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25A7%25E7%25B5%2582%25E3%2582%258F%25E3%2582%2589%25E3%2581%259B%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2581%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AECode%25E6%25B4%25BB%25E7%2594%25A8%25E8%25A1%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zono%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1ZWFiNjc3MGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25BB%25A4%25E5%2592%258C%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0OGIyZDNmNzcuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zono</dc:creator></item><item><title><![CDATA[actions/github-scriptをTypeScriptとnpmパッケージを活用して書けるようにする]]></title><description><![CDATA[
 はじめに
GitHub Actionsの actions/github-script 、使ってますか？
ワークフロー内でJavaScriptコードを手軽に実行できて便利ですよね。
CI/CDのコードをJavaScriptで記述できるため、Shell scriptで書くよりもリッチな構文や非同期処理が書きやすくなっています。
そんな便利なactionですが、使っているうちにだんだんと以下のような課題を感じてきました。

TypeScriptは直接使用不可
外部npmパッケージの利用が困難
大きなスクリプトの保守性が低い

本記事では、TypeScriptとRollupを活用してこれらの...]]></description><link>https://zenn.dev/r57ty7/articles/d64e121b4e8bd8</link><guid isPermaLink="true">https://zenn.dev/r57ty7/articles/d64e121b4e8bd8</guid><pubDate>Wed, 18 Jun 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OEeIQ4_O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:actions%252Fgithub-script%25E3%2582%2592TypeScript%25E3%2581%25A8npm%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%259B%25B8%25E3%2581%2591%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ikorihn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ4YWJiZDRmODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ikorihn</dc:creator></item><item><title><![CDATA[Next.js のデバッグ実行が遅かったのを3倍速くした方法]]></title><description><![CDATA[
 1. はじめに
Next.js でデバッグ実行が遅いと感じたことはありませんか？
私は、パッケージを追加してデバッグ実行を行うと、初回の画面描画時に 10 ～ 20 秒もかかってしまうことがありました。2 回目以降はキャッシュが効いているのか、すぐに表示されます。
使用したパッケージは、定番のものを最小限にとどめていたつもりでした。
Next.js アプリでは MUI（Material UI）を使っているのですが、MUI を使わない画面は表示が速く、MUI 周りが原因ではないかと考えました。
実際、MUI、MUI Styled、MUI DatePicker、MUI Icons の使用...]]></description><link>https://zenn.dev/mofuweb/articles/nextjs-typescript-guide-1-4</link><guid isPermaLink="true">https://zenn.dev/mofuweb/articles/nextjs-typescript-guide-1-4</guid><pubDate>Wed, 18 Jun 2025 10:49:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--guhEF_pO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%258C%25E9%2581%2585%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2582%25923%25E5%2580%258D%25E9%2580%259F%25E3%2581%258F%25E3%2581%2597%25E3%2581%259F%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mofuweb%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhNjVhYjFhNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mofuweb</dc:creator></item><item><title><![CDATA[TypeScriptで、テーブルのIDがauto incrementな場合のモデルクラスの設計・実装]]></title><description><![CDATA[
 経緯
現在、新規サービスをドメイン駆動設計（DDD）で開発しています。その要件のひとつとして、ID を DB の AUTO_INCREMENT を用いた連番にする必要がありました。
以前のプロジェクトでは UUID v7 を ID に採用していたため、永続化前にアプリケーション側で ID を生成できました（UUID v7 は時系列順にソート可能な UUID です）。
今回は AUTO_INCREMENT を使う場合の設計と実装について整理します。

 前提
サンプルとして、書籍を表すモデルクラスと、それを永続化するリポジトリを考えます。DB 側のテーブル定義は下表のとおりです。


...]]></description><link>https://zenn.dev/threeislands/articles/ee003fe17faa0d</link><guid isPermaLink="true">https://zenn.dev/threeislands/articles/ee003fe17faa0d</guid><pubDate>Wed, 18 Jun 2025 09:46:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UF7Pc3cA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2580%2581%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AB%25E3%2581%25AEID%25E3%2581%258Cauto%2520increment%25E3%2581%25AA%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E8%25A8%25AD%25E8%25A8%2588%25E3%2583%25BB%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1MDg4ZTc0ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>チャンドラー</dc:creator></item><item><title><![CDATA[React+Supabase で簡単なブログサイトっぽいもの作ってみた。｜Note-of-Beginning]]></title><description><![CDATA[
 Note-of-Beginning：Supabase + Reactで簡単なブログサイトっぽいもの作ってみた

🧑‍💻 本記事で紹介している内容は、React および Supabase 初心者の私が個人で学びながら作成したものです。
表記の誤りや実装上の不備が含まれている可能性がありますが、あたたかい目で見ていただけると幸いです。

Note-of-Beginning は、私が初めて企画から設計・開発までを手がけた、ブログ兼メモアプリです。

 📖 名前の由来
Note-of-Beginning という名前には、それぞれ以下の意味が込められています。


Note → 「メモ」や「記...]]></description><link>https://zenn.dev/gratien583/articles/38183372dbbd7d</link><guid isPermaLink="true">https://zenn.dev/gratien583/articles/38183372dbbd7d</guid><pubDate>Wed, 18 Jun 2025 06:43:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eZv0suBN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%252BSupabase%2520%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25E3%2582%2582%25E3%2581%25AE%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%25EF%25BD%259CNote-of-Beginning%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Gratien583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5MmM2ZjY3YzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Gratien583</dc:creator></item><item><title><![CDATA[リンク集を共同で作成できるWebアプリ「リンクシュア」を作りました]]></title><description><![CDATA[
こんにちは、個人開発が趣味のroutechanです。
皆さん、リンク集はご存じでしょうか？
リンク集とは複数のウェブサイトやページへのリンクをまとめて表示するWebページのことです。
例えば「コーディングで役立つリンク集」であれば、コーディングで役立ちそうな参考サイトを一つのページにまとめてすぐに参照できるようにしたものです。
そんなリンク集をテーマにしたWebアプリを作成しました。

 何を作ったの？
https://linkshua.vercel.app/
友達や家族などと共同でリンク集を作成できるツールがあれば便利じゃないかと思い、リンク集共同作成アプリ「リンクシュア」を作りまし...]]></description><link>https://zenn.dev/routechan/articles/d7fa8906b69d47</link><guid isPermaLink="true">https://zenn.dev/routechan/articles/d7fa8906b69d47</guid><pubDate>Wed, 18 Jun 2025 05:39:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--puJk0DlO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E9%259B%2586%25E3%2582%2592%25E5%2585%25B1%25E5%2590%258C%25E3%2581%25A7%25E4%25BD%259C%25E6%2588%2590%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258BWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2580%258C%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25A2%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:routechan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlMDk5NjgwNDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>routechan</dc:creator></item><item><title><![CDATA[TypeScriptで作る “重複しない” シャッフル再生ロジック]]></title><description><![CDATA[
 ランダムなのに偏りゼロ？CV再生ロジックを作ってみた話

 TypeScriptで作る “重複しない” シャッフル再生ロジック
CV(キャラクターボイス)をランダムに再生する機能を JavaScript で実装していたところ、「無駄な 2 重ランダム」 が潜んでいました。
リストをシャッフルしランダムな並びのリストを作成。
↓
その配列から毎回ランダムで取り出す。
とかいう意味のない処理。。。
かなり端折りましたが問題の部分はこんな感じのコードでした、、、
const cvList = ["1.wav", "2.wav", "3.wav"];
const shuffledList =...]]></description><link>https://zenn.dev/fuwafuwa_fox/articles/56314aa005d901</link><guid isPermaLink="true">https://zenn.dev/fuwafuwa_fox/articles/56314aa005d901</guid><pubDate>Wed, 18 Jun 2025 05:33:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UyJ-WHyE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520%25E2%2580%259C%25E9%2587%258D%25E8%25A4%2587%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E2%2580%259D%2520%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2595%25E3%2583%25AB%25E5%2586%258D%25E7%2594%259F%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2582%258F%25E3%2581%25B5%25E3%2582%258F%25E3%2582%25AD%25E3%2583%2584%25E3%2583%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzOTA0NDJlOTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふわふわキツネ</dc:creator></item><item><title><![CDATA[dnd Kitをプロダクトで利用して感じたメリットとハマりポイント]]></title><description><![CDATA[こんにちは!
株式会社Sally 新人エンジニアの @haruten です♪
私たち株式会社Sallyでは、マーダーミステリーをスマホやPCで遊べるアプリ「ウズ」や、マーダーミステリーを制作してウズ上で公開・プレイできるエディターツール「ウズスタジオ」などを開発・運営しています。
今回はウズスタジオで実際に使われているReact向けドラッグ＆ドロップライブラリの「dnd kit」を初めて触ってみて感じた便利な点、ハマってしまった点を紹介していきます！

 dnd kitとは？
https://dndkit.com/

React向けに作られたドラッグ＆ドロップ（Drag and Drop...]]></description><link>https://zenn.dev/uzu_tech/articles/5ef00c356c1888</link><guid isPermaLink="true">https://zenn.dev/uzu_tech/articles/5ef00c356c1888</guid><pubDate>Wed, 18 Jun 2025 04:56:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--elx_DiVc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:dnd%2520Kit%25E3%2582%2592%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2580%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25A7%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%2584%259F%25E3%2581%2598%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2588%25E3%2581%25A8%25E3%2583%258F%25E3%2583%259E%25E3%2582%258A%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:haruten%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5NjI5NGIwZmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UZU%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNzI0NDRkNGMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>haruten</dc:creator></item><item><title><![CDATA[TypeScript の switch 文で網羅性をチェックするテクニック]]></title><description><![CDATA[TypeScript で switch 文を記述する際に default で何を return するべきか悩むことはありませんか。ユニオン型を switch 文で処理する場合、すべてのケースが処理されているかを確認する「網羅性チェック」というテクニックがあります。この記事では、never 型を活用した手法を詳しく解説します！

 網羅性チェックとは
網羅性チェックとは、ユニオン型の取りうるすべての値が適切に処理されていることを、TypeScript のコンパイラに確認させる技術です。新しい型が追加された際に、処理の漏れを防ぐことができます。

 基本的な型定義
ユーザー権限管理システムを...]]></description><link>https://zenn.dev/m0t0taka/articles/fcc48a0e17f4f7</link><guid isPermaLink="true">https://zenn.dev/m0t0taka/articles/fcc48a0e17f4f7</guid><pubDate>Wed, 18 Jun 2025 00:04:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--itRY9Xb2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25AE%2520switch%2520%25E6%2596%2587%25E3%2581%25A7%25E7%25B6%25B2%25E7%25BE%2585%25E6%2580%25A7%25E3%2582%2592%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2581%2599%25E3%2582%258B%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258E%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxZTJhNzliZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぎー</dc:creator></item><item><title><![CDATA[TreeShakableなResultライブラリを作りました]]></title><description><![CDATA[
 はじめに
JavaScriptでは、throwを使ってエラーを明示的に投げることで、処理を中断する「大域脱出」が可能です。しかし、TypeScriptではこのthrowによって発生するエラーの型を記述できないため、型安全性が損なわれてしまいます。
この問題を解決するために、関数の成功・失敗を明示的に扱えるResult型が有用です。
TypeScriptでResult型を利用する場合、neverthrowやeffect-ts、fp-tsなどのライブラリがよく挙げられます。
しかし、それぞれ一長一短があり、neverthrowは比較的シンプルで使いやすいものの、現在は活発なメンテナンスが...]]></description><link>https://zenn.dev/praha/articles/9310a5d58b84a5</link><guid isPermaLink="true">https://zenn.dev/praha/articles/9310a5d58b84a5</guid><pubDate>Tue, 17 Jun 2025 23:21:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Wcz3kB8r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TreeShakable%25E3%2581%25AAResult%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiZDIyMmFjMTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[Node.jsでCPUバウンドな処理を書く際は注意！！]]></title><description><![CDATA[
 はじめに
エックスポイントワンでリードエンジニアをしているRenです。
本記事ではNode.jsのアーキテクチャを解説しながら、なぜCPUバウンドな処理を書く際は注意する必要があるかを紐解いていきます。

 Node.jsとは
Node.jsは大量の同時接続をさばけるアプリケーションの構築を目的に設計されたJavaScript環境です。その根幹にあるのが「シングルスレッド」で動作する「イベントループ」です。

 シングルスレッドとマルチスレッド
プログラムの中で命令を実行する最小の作業単位を「スレッド（Thread）」と呼びます。
スレッドには大きく分けてシングルスレッドとマルチスレ...]]></description><link>https://zenn.dev/x_point_1/articles/123d60d9333e85</link><guid isPermaLink="true">https://zenn.dev/x_point_1/articles/123d60d9333e85</guid><pubDate>Tue, 17 Jun 2025 14:14:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zkSkmN8Y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25A7CPU%25E3%2583%2590%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AA%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E9%259A%259B%25E3%2581%25AF%25E6%25B3%25A8%25E6%2584%258F%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ren%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3YzY4ZjI4ZDcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25B3%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5OGQwOGYzYTIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ren</dc:creator></item><item><title><![CDATA[学生が知人のサロン業務をNextjsでDX化してみた話]]></title><description><![CDATA[

 1.背景
この記事は、私の知人が経営する美容サロンの業務を、Next.jsを用いてWebアプリケーション化し、業務改善を試みた事例について記録します。
(サロン側には公開の許可を得ております)

 1.1 自己紹介
現在、北海道のとある大学に通っています。専攻は建築で、26卒です。
普段は、自分の専攻分野の研究を進めつつ、web開発のインターンを行っています。
就活では「建築かITか」で迷った時期もありましたが、最終的にエンジニアとしての就職を決め、今はエンジニア生活に少しずつシフト中です。

 1.2 知人サロンからの「HP制作依頼」──しかし本当に必要なのは？
ある日、母を通じ...]]></description><link>https://zenn.dev/satotakahumi/articles/9c5afd5e3253e8</link><guid isPermaLink="true">https://zenn.dev/satotakahumi/articles/9c5afd5e3253e8</guid><pubDate>Tue, 17 Jun 2025 14:01:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vK1lfKxx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AD%25A6%25E7%2594%259F%25E3%2581%258C%25E7%259F%25A5%25E4%25BA%25BA%25E3%2581%25AE%25E3%2582%25B5%25E3%2583%25AD%25E3%2583%25B3%25E6%25A5%25AD%25E5%258B%2599%25E3%2582%2592Nextjs%25E3%2581%25A7DX%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kado%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyM2M2ZjFkOTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kado</dc:creator></item><item><title><![CDATA[TypeScript 環境構築ガイドラインを書いてLLMに再現させる]]></title><description><![CDATA[TypeScript ツールチェインは多種多様で、毎回目的に沿ってプロジェクトを設定するのが非常に大変です。
なので、再現性のある環境構築手順を作って LLM に丸投げすることにしました。
https://github.com/mizchi/ts-guide
(この記事の7割はAIに書かせて、自分で30分かけて書き直しました)

 tl;dr

Claude Code に読ませる前提のTypeScriptの環境構築ガイドラインを作った
docs/ts-guide/ にドキュメントを配置して、LLM（Claude）にそれを読ませる
プロジェクトの要件を伝えて、LLMに適切な設定を追加させる...]]></description><link>https://zenn.dev/mizchi/articles/llm-aware-ts-project-starter</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/llm-aware-ts-project-starter</guid><pubDate>Tue, 17 Jun 2025 12:35:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8HxWzAhX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6LLM%25E3%2581%25AB%25E5%2586%258D%25E7%258F%25BE%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[Expo Router で画面遷移#2]]></title><description><![CDATA[
 はじめに
この「でぶろぐ」について
初心者エンジニアが四苦八苦しながら個人開発していく過程をつらつら書きます。
備忘録のようなものです。。。
&nbsp;

 開発環境
フロントエンド

Node.jsとnpm
React Native
Expo Go
TypeScript

バックエンド

Google Firebase
&nbsp;


 チャットアプリ開発#2 ～Expo Router 編～

 Expo Router のインストールと設定

Expo Routerと関連ライブラリのインストール

npx expo install expo-router react-nativ...]]></description><link>https://zenn.dev/moony0111/articles/702db29fe01be5</link><guid isPermaLink="true">https://zenn.dev/moony0111/articles/702db29fe01be5</guid><pubDate>Tue, 17 Jun 2025 11:23:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o6k3ECF4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Expo%2520Router%2520%25E3%2581%25A7%25E7%2594%25BB%25E9%259D%25A2%25E9%2581%25B7%25E7%25A7%25BB%25232%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2580%25E3%2581%2585%25E3%2581%25AB%25E3%2581%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3YTMzMTRlMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>むぅにぃ</dc:creator></item><item><title><![CDATA[リファクタリング？if文って美味しいの？]]></title><description><![CDATA[
 if文のリファクタリングあるある
本記事では、TypeScriptで書きます。

 1. if文の中にif文を書いてすぐreturn
before リファクタリング
// その1　値比較
if ( a === 1 ) {
    if ( b === 2 )
        return true
}

// その２　真偽比較
if ( result === "成功" ) {
    if ( this.navigateToProfilePage( this.profile.name ) )
        return
}
after リファクタリング// その1　値比較
if (...]]></description><link>https://zenn.dev/protagonist/articles/f0de6889e2df62</link><guid isPermaLink="true">https://zenn.dev/protagonist/articles/f0de6889e2df62</guid><pubDate>Tue, 17 Jun 2025 03:20:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F9WXz4Z9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25EF%25BC%259Fif%25E6%2596%2587%25E3%2581%25A3%25E3%2581%25A6%25E7%25BE%258E%25E5%2591%25B3%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25BF%25E3%2582%25B4%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmOGQzNTUzM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>プロタゴ🚀</dc:creator></item><item><title><![CDATA[TypeScriptのUnion Type活用術：APIレスポンスで学ぶ実践的な型設計]]></title><description><![CDATA[
 はじめに
フロントエンド開発において、TypeScriptのUnion Typeは強力な型安全性を提供する重要な機能です。特にAPIレスポンスの型定義では、Union Typeを使うかOptional Propertiesを使うかで、実装が変わります。

 具体例：ユーザー検索APIのレスポンス
以下のようなユーザー検索APIがあるとします：
// 成功時のレスポンス
{
  "status": "success",
  "data": {
    "users": [
      {
        "id": "123",
        "name": "田中太郎",
    ...]]></description><link>https://zenn.dev/aki05162525/articles/572926c2470e60</link><guid isPermaLink="true">https://zenn.dev/aki05162525/articles/572926c2470e60</guid><pubDate>Tue, 17 Jun 2025 02:54:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qNIUhHAq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEUnion%2520Type%25E6%25B4%25BB%25E7%2594%25A8%25E8%25A1%2593%25EF%25BC%259AAPI%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E5%25AE%259F%25E8%25B7%25B5%25E7%259A%2584%25E3%2581%25AA%25E5%259E%258B%25E8%25A8%25AD%25E8%25A8%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2582%258B%25E3%2581%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBaM1pHbFo2RUJSc0NDTnVqeUpRV0U0eXEzczZJeTNYR1NPdHE2a21ZR3dNSWpqTXA9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いるか</dc:creator></item><item><title><![CDATA[コード品質を保つ ESLint のルール設定]]></title><description><![CDATA[
 はじめに
ESLint は JavaScript/TypeScript プロジェクトにおいて、コードの品質を保つために欠かせないツールです。適切な設定により、チーム全体でコードの一貫性を保ち、バグの早期発見やメンテナンス性の向上を実現できます。
本記事では、当プロジェクトで採用している ESLint 設定を、その目的や効果に応じて以下のカテゴリーに分類して解説します：


可読性（Readability）: コードの読みやすさを向上させるルール

メンテナンス性（Maintainability）: 長期的な保守性を高めるルール

品質・複雑性管理（Quality &amp; Comp...]]></description><link>https://zenn.dev/superstudio/articles/cf84eb91eb560e</link><guid isPermaLink="true">https://zenn.dev/superstudio/articles/cf84eb91eb560e</guid><pubDate>Tue, 17 Jun 2025 01:11:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VgytrIo5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2593%2581%25E8%25B3%25AA%25E3%2582%2592%25E4%25BF%259D%25E3%2581%25A4%2520ESLint%2520%25E3%2581%25AE%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Mun%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4NWIxMTkzZGYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SUPER%2520STUDIO%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzYjFmZWMwMDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mun</dc:creator></item></channel></rss>