<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 15 Jan 2025 04:29:33 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[アクセサ【個人学習まとめ】]]></title><description><![CDATA[
 アクセサ
アクセサにはゲッターとセッターの２種類のメソッドが存在する。

 ゲッター
まずはゲッターのみ。getキーワードをメソッドの前に宣言して定義する。
class Money {
    private _amount: number;

    constructor(amount: number) {
        this._amount = amount;
    }

    //ゲッターを定義
    get amount(): number {
        console.log("金額を取得");
        return this._amount;
...]]></description><link>https://zenn.dev/o0rororo0o/articles/e4c538599b6c56</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/e4c538599b6c56</guid><pubDate>Wed, 15 Jan 2025 01:35:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DttgKPPr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B5%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item><item><title><![CDATA[Node.js クラスターの核心を解き明かす]]></title><description><![CDATA[

 前書き
PM2 を使って Node.js プロセスを管理していると、クラスターモードをサポートしていることに気づくでしょう。このモードを有効にすると、Node.js で複数のプロセスを作成できます。クラスターモードでインスタンス数を max に設定すると、サーバーの CPU コア数に基づいて同数の Node プロセスが作成されます。
PM2 は、Node.js の Cluster モジュールを利用してこれを実現しています。このモジュールは、Node.js のシングルスレッド特性による制約を解決し、複数の CPU コアを活用できるようにするために導入されました。しかし、Cluster...]]></description><link>https://zenn.dev/leapcell/articles/d29c2578226f65</link><guid isPermaLink="true">https://zenn.dev/leapcell/articles/d29c2578226f65</guid><pubDate>Tue, 14 Jan 2025 19:47:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hz-bBwtB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%25AE%25E6%25A0%25B8%25E5%25BF%2583%25E3%2582%2592%25E8%25A7%25A3%25E3%2581%258D%25E6%2598%258E%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leapcell%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0N2E0MGQ3NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leapcell</dc:creator></item><item><title><![CDATA[React Hook Formのバリデーションが意図しないタイミングで走って詰まった話]]></title><description><![CDATA[
 概要
自分がReact Hook Form弱者過ぎるのを痛感するこの頃。
今回詰まったのはzodとReact Hook Form管理のフォームの要素に子コンポーネントを介して値を入れた際に全てのフィールドにバリデーションが走ってしまい、迷走しまっくった話です。
この記事が自分と同じようなケースにあたる、あたった人の役に立てば幸いです。
(そもそもの設計が悪いと言われればそれまでですが、、、)

 結論
buttonタグにtype="button"をしてすることでこれを回避できる。

 スタック

Next.js
React Hook Form
zod


 詳細
今回のケースを再現し...]]></description><link>https://zenn.dev/yuya_0811/articles/97452eb605f698</link><guid isPermaLink="true">https://zenn.dev/yuya_0811/articles/97452eb605f698</guid><pubDate>Tue, 14 Jan 2025 15:24:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BuQAbG7K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Hook%2520Form%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%258C%25E6%2584%258F%25E5%259B%25B3%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E8%25B5%25B0%25E3%2581%25A3%25E3%2581%25A6%25E8%25A9%25B0%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2582%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczZjBlNTMyYWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーや</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜MAX-MINフィルタ（013/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の13本目です。

 前回
https://zenn.dev/nyagato_00/articles/16fccb35dc2973

 実装

 お題

MAX-MINフィルタ(3x3)を実装せよ。
MAX-MINフィルタとはフィルタ内の画素の最大値と最小値の差を出力するフィルタであり、エッジ検出のフィルタの一つである。 エッジ検出とは画像内の線を検出るすることであり、このような画像内の情報を抜き出す操作を特徴抽出と呼ぶ。 エッジ検出では多くの場合、グレースケール画像に対してフィルタリングを...]]></description><link>https://zenn.dev/nyagato_00/articles/13517b6f1180b3</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/13517b6f1180b3</guid><pubDate>Tue, 14 Jan 2025 12:37:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WwlhNU0S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259CMAX-MIN%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588013%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[【TypeScript/ハンズオン】テスト駆動開発(TDD)入門 第4回：エラーハンドリングとバリデーションのテスト]]></title><description><![CDATA[
 はじめに
前回まででテストの基本やFizzBuzzの実装を通じてTDDの流れを学びました。
今回は、より実践的なシナリオとして、フォームのバリデーションとエラーハンドリングのテストについて学んでいきます。
実際のWebアプリケーション開発でよく遭遇する、ユーザー入力の検証処理をTDDで実装していく過程を見ていきましょう。

 1. 開発環境のセットアップ

 1.1 基本環境の構築
まずは必要な開発環境を整えていきます。TypeScriptとJestを使用した環境を構築します。
# プロジェクトディレクトリの作成
mkdir form-validation-tdd
cd form-v...]]></description><link>https://zenn.dev/nezumizuki/articles/175da0bad038f7</link><guid isPermaLink="true">https://zenn.dev/nezumizuki/articles/175da0bad038f7</guid><pubDate>Tue, 14 Jan 2025 11:20:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--p2DTN4XB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%252F%25E3%2583%258F%25E3%2583%25B3%25E3%2582%25BA%25E3%2582%25AA%25E3%2583%25B3%25E3%2580%2591%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%2528TDD%2529%25E5%2585%25A5%25E9%2596%2580%2520%25E7%25AC%25AC4%25E5%259B%259E%25EF%25BC%259A%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:MI%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXRYZE91dm9hdlRUclRZSVY2eW5ibDdfVHprdXhtb1JUcUlQRGpTaTRfTmZxUnlLdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>MI</dc:creator></item><item><title><![CDATA[MUI の TablePagination コンポーネントのデフォルト表示をカスタマイズしたい]]></title><description><![CDATA[MUI の Table コンポーネントは便利ですね。
フィルタリングやページネーションの管理も用意してくれているので作る手間が省けます。
ただ、上がってくるデザインと異なるので少し調整が必要だったりするので、
できる範囲でカスタマイズしていきます。
基本はドキュメントを参考に、ActionsComponent を作ってボタンイベントを用意しますが、
ページネーションが高機能すぎるので省く時にやったことを書き残します。

 対象の箇所

↑の Rows per page と 1-10 of 12 のような UI は特に必要ないので非表示にしたい。

 Rows per page のセレクト...]]></description><link>https://zenn.dev/seventhseven07/articles/0ee5044265fd1a</link><guid isPermaLink="true">https://zenn.dev/seventhseven07/articles/0ee5044265fd1a</guid><pubDate>Tue, 14 Jan 2025 09:44:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RaZQp62x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MUI%2520%25E3%2581%25AE%2520TablePagination%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2582%2592%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shumpei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyY2ZhOWM5YTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shumpei</dc:creator></item><item><title><![CDATA[フロントエンドで使える非同期処理の排他制御を使った小技集]]></title><description><![CDATA[こんにちは、RUN.EDGE株式会社の桑原です。
今回は、非同期処理の排他制御についての記事になります。
Webのフロントエンドで実行されるJavaScriptエンジンはその性質上、基本的にはシングルスレッドで実行される[1]ので、マルチスレッドでの実行に対応している他の言語/実行環境ほど排他制御を意識することはないかもしれませんが、Webフロントエンドであっても、動画やAPIの操作など複雑な非同期処理を伴う処理を扱う場合に、適切に排他制御を行って、バグなく動作するコードを書くことは非常に大切です。
今回は、実際にプロダクトを作っていく中で使うことが多かった排他制御を使った小技をいくつか...]]></description><link>https://zenn.dev/run_edge/articles/ea7209ffaf6261</link><guid isPermaLink="true">https://zenn.dev/run_edge/articles/ea7209ffaf6261</guid><pubDate>Tue, 14 Jan 2025 09:01:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eM3vwCCa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E6%258E%2592%25E4%25BB%2596%25E5%2588%25B6%25E5%25BE%25A1%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25B0%258F%25E6%258A%2580%25E9%259B%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E6%25A1%2591%25E5%258E%259F%25E8%258D%2598%25E9%25A6%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBkNjVlOTZjYjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:RUN.EDGE%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2OThiMzVjM2UuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>桑原荘馬</dc:creator></item><item><title><![CDATA[BetaになったTanStack Startを触るぞ！！！]]></title><description><![CDATA[
 はじめに
こんにちは！Reactのフルスタックフレームワークといえば、Next.jsが広く知られていますが、新たにOSSのTanStackが「TanStack Start」というフレームワークをリリースしました(現在はbeta版が公開されています！)
この記事では、TanStack Startのセットアップ手順や主要な機能について解説していきます。
https://tanstack.com/start/latest

 TanStack Startとは
Vinxiを基盤に構築された、フルスタックなReactフレームワークで、主な機能にはサーバーサイドレンダリング（SSR）ストリーミン...]]></description><link>https://zenn.dev/gemcook/articles/909eaf62eab51d</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/909eaf62eab51d</guid><pubDate>Tue, 14 Jan 2025 03:51:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--flar-Rjm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Beta%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259FTanStack%2520Start%25E3%2582%2592%25E8%25A7%25A6%25E3%2582%258B%25E3%2581%259E%25EF%25BC%2581%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25A6%25E3%2582%2593%25E3%2582%2580%25E3%2581%2599%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwZDNlZDBmODguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てんむす</dc:creator></item><item><title><![CDATA[サバイバルTypeScriptを読んで、静的フィールドと静的メソッドを理解した]]></title><description><![CDATA[
 はじめに
TypeScriptでクラスを使用する際、インスタンスを作成せずにクラスレベルでアクセスできる機能として「静的フィールド」と「静的メソッド」があります。
この記事では、サバイバルTypeScriptを参考に、これらの機能について学んでいきます。

 静的フィールドと静的メソッドとは
staticキーワードを使用することで、クラスのインスタンスではなく、クラス自体に関連つけられたフィールドやメソッドを定義することができます。

 基本的な使い方
class MyClass {
  static x = 0;  // 静的フィールド

  static printX(): vo...]]></description><link>https://zenn.dev/asamin/articles/641e1079676636</link><guid isPermaLink="true">https://zenn.dev/asamin/articles/641e1079676636</guid><pubDate>Tue, 14 Jan 2025 02:41:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hAxqcvpv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B5%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2590%25E3%2583%25ABTypeScript%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7%25E3%2580%2581%25E9%259D%2599%25E7%259A%2584%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25A8%25E9%259D%2599%25E7%259A%2584%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:asami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0YWMyYjMxNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>asami</dc:creator></item><item><title><![CDATA[Next.jsで認証機能をNextAuthで実装する]]></title><description><![CDATA[npm install next-auth
pages/api/[...nextauth].tsファイルの作成
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";
import { db } from "../../../lib/prisma";

export const authOptions = {
  providers: [
    Go...]]></description><link>https://zenn.dev/itsukinuko/articles/dd248b5b0af63f89b652</link><guid isPermaLink="true">https://zenn.dev/itsukinuko/articles/dd248b5b0af63f89b652</guid><pubDate>Tue, 14 Jan 2025 02:12:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PDVS4wrx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E8%25AA%258D%25E8%25A8%25BC%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592NextAuth%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:itsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhODMyNzI4NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>itsuki</dc:creator></item><item><title><![CDATA[Next.js周りのセットアップ ~フォーマッター完備~]]></title><description><![CDATA[
 今回扱う技術

Next.js
TypeScript
ESLint
Prettier
Prisma
NextAuth
TailWindCSS


 Prettierセットアップ編
今回は、Next.js プロジェクトで Prettier を使用してコード整形を行う方法について解説します。以下の手順に従ってセットアップを行います。

 1. Prettier のインストール
まず、Prettier をインストールします。プロジェクトのルートディレクトリで以下のコマンドを実行してください。
npm install prettier

 2. Prettier の設定ファイルを作成
次に、...]]></description><link>https://zenn.dev/itsukinuko/articles/947ea81c5c380cb21654</link><guid isPermaLink="true">https://zenn.dev/itsukinuko/articles/947ea81c5c380cb21654</guid><pubDate>Tue, 14 Jan 2025 02:12:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sRoPua8u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E5%2591%25A8%25E3%2582%258A%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2520%7E%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%2583%25E3%2582%25BF%25E3%2583%25BC%25E5%25AE%258C%25E5%2582%2599%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:itsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhODMyNzI4NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>itsuki</dc:creator></item><item><title><![CDATA[prismaでseedデータを追加する方法]]></title><description><![CDATA[https://qiita.com/Itsuki54/items/ea4e0ff9a593e77fb098

 tsxライブラリを入れよう
npm i tsx
必要なライブラリは以上です
import { PrismaClient } from "@prisma/client";

const db = new PrismaClient();
async function seed() {
  await db.user.create({
    data: {
      email: "[email protected]",
      password: "password",
 ...]]></description><link>https://zenn.dev/itsukinuko/articles/7a7781379ba3d981673a</link><guid isPermaLink="true">https://zenn.dev/itsukinuko/articles/7a7781379ba3d981673a</guid><pubDate>Tue, 14 Jan 2025 02:12:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dDLJKxP4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:prisma%25E3%2581%25A7seed%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:itsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhODMyNzI4NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>itsuki</dc:creator></item><item><title><![CDATA[Next.js周りのセットアップ ~Next.jsプロジェクト作成~]]></title><description><![CDATA[
 今回扱う技術

Next.js
TypeScript
ESLint
Prettier
Prisma
NextAuth
TailWindCSS


 Next.jsの作成
https://qiita.com/Itsuki54/items/bb41982fd1c9d6e81b17
前回は核となるnodeのインストールを行いました
今回はcreate-next-appについて解説していきたいと思います

 create-next-appとは
create-next-appは、Next.jsプロジェクトを迅速かつ簡単にセットアップするための公式CLIツールです。このツールを使用すると、数分以...]]></description><link>https://zenn.dev/itsukinuko/articles/1feac3e35319931ee5bb</link><guid isPermaLink="true">https://zenn.dev/itsukinuko/articles/1feac3e35319931ee5bb</guid><pubDate>Tue, 14 Jan 2025 02:12:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QbRnD6Ny--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E5%2591%25A8%25E3%2582%258A%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2520%7ENext.js%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E4%25BD%259C%25E6%2588%2590%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:itsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhODMyNzI4NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>itsuki</dc:creator></item><item><title><![CDATA[const prisma = new PrismaClient()を多用してはいけない　lib/prismaを作ろう]]></title><description><![CDATA[
 lib/prismaに以下を追加するだけです
import { PrismaClient } from '@prisma/client';

declare global {
  var prisma: PrismaClient | undefined;
}

const prisma = global.prisma || new PrismaClient();

if (process.env.NODE_ENV === 'development') global.prisma = prisma;

export const db = prisma;
使用する際は
import {d...]]></description><link>https://zenn.dev/itsukinuko/articles/0bbceec4ad10fa8c61c2</link><guid isPermaLink="true">https://zenn.dev/itsukinuko/articles/0bbceec4ad10fa8c61c2</guid><pubDate>Tue, 14 Jan 2025 02:12:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Sw6nQ9zR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:const%2520prisma%2520%253D%2520new%2520PrismaClient%2528%2529%25E3%2582%2592%25E5%25A4%259A%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2580lib%252Fprisma%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:itsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhODMyNzI4NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>itsuki</dc:creator></item><item><title><![CDATA[モジュールのimportが原因でCloud Run上のNode.jsアプリケーションの起動が遅いの時の対処方法]]></title><description><![CDATA[こんにちは、バックエンドエンジニアの飯沼です。私たちが開発している旅行アプリ『NEWT（ニュート）』のAPIはNode.jsで動かしています。モノリシックな構成で約2年半ほど機能拡張を続けた結果、いつの間にかAPIの起動速度は30秒近くまで遅くなってしまいました。ここまで遅くなるとセールなどのイベントでトラフィックが急増した際に、APIインスタンスのスケールアウトが間に合わずエラーを返す割合が高くなってきます。
この記事では、起動速度が遅い問題を解決するために行ったことを、後学のために過程も含めて共有します。今回の内容は業務委託で協力してくださった與那城さんによる取り組みです。（ありがと...]]></description><link>https://zenn.dev/reiwatravel/articles/e34b3a1bd3aff5</link><guid isPermaLink="true">https://zenn.dev/reiwatravel/articles/e34b3a1bd3aff5</guid><pubDate>Tue, 14 Jan 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JDLbG6Q2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AEimport%25E3%2581%258C%25E5%258E%259F%25E5%259B%25A0%25E3%2581%25A7Cloud%2520Run%25E4%25B8%258A%25E3%2581%25AENode.js%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%258C%25E9%2581%2585%25E3%2581%2584%25E3%2581%25AE%25E6%2599%2582%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shumpei%2520IINUMA%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1ZWFiNjc3MGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25BB%25A4%25E5%2592%258C%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JjOTI2YTQ2NjMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shumpei IINUMA</dc:creator></item><item><title><![CDATA[DevinにCIテストを待たせずローカルでテスト実行可能にし、爆速で開発させる]]></title><description><![CDATA[
 はじめに
弊社では新年始まったタイミングでDevinを導入し、一週間が経過しました
Devinは月額$500ですが、これは毎月250ACUのクレジットが付与される価格です
※ ACUとは、使用量を表す単位で、1ACUがおおよそ15分間の使用量となっています
なので色々試している最初の段階などは、ACUを必要以上に使ってしまいますね
なんとかACU消費を抑えて効率的にDevinに働いてもらう必要があります
その中でも今回はSetUp段階での効率化に着目して対応した内容をまとめていきます
というのも、DevinはPRを作成後にCIの実行完了を待機し、ステータスによって修正するので、その待...]]></description><link>https://zenn.dev/abel_dev/articles/devin_setup_local_testing</link><guid isPermaLink="true">https://zenn.dev/abel_dev/articles/devin_setup_local_testing</guid><pubDate>Tue, 14 Jan 2025 00:54:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--v_5e3QZ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Devin%25E3%2581%25ABCI%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%25BE%2585%25E3%2581%259F%25E3%2581%259B%25E3%2581%259A%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E5%25AE%259F%25E8%25A1%258C%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AB%25E3%2581%2597%25E3%2580%2581%25E7%2588%2586%25E9%2580%259F%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2590%25E3%2583%2583%25E3%2583%258F%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjMWY3MTA2YmMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ABEL%252C%2520Inc.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lGZld3eEJZdGJOWHVPVVFnNnlLRDRRTmx4Q1R6SGpRMHB6X1BvMXJvPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>バッハ</dc:creator></item><item><title><![CDATA[【TypeScript×関数型】まとめてエラーを捕まえる！neverthrowで実現するスマートなCSV検証]]></title><description><![CDATA[
 はじめに
CSVデータの検証においては、数多くのエラーが同時発生する可能性があります。たとえば「ある行のIDが数値ではない」「日付が無効」「必須項目が空欄」など、複数セルで同時に問題が起こりえるのがCSVの難しいところです。
JavaScriptの例外処理では、標準的な例外処理手法であるtry-catchをネストしてエラーを拾う方法がよく使われてきましたが、このアプローチには多くの問題が潜んでいます。
そこで、今回は TypeScript の関数型スタイルでのエラーハンドリングを可能にするライブラリ neverthrow を活用し、複数のバリデーション結果をまとめて扱う方法を紹介しま...]]></description><link>https://zenn.dev/hacobell_dev/articles/typescript-neverthrow-csv-error-handling</link><guid isPermaLink="true">https://zenn.dev/hacobell_dev/articles/typescript-neverthrow-csv-error-handling</guid><pubDate>Tue, 14 Jan 2025 00:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1u2xWOhd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25C3%2597%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2580%2591%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E6%258D%2595%25E3%2581%25BE%25E3%2581%2588%25E3%2582%258B%25EF%25BC%2581neverthrow%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AACSV%25E6%25A4%259C%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BB%25E3%2582%258A%25E3%2581%2597%25E3%2582%2587%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzYjhhODE4MTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Hacobell%2520Developers%2520...%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZiZTM4NTI2YzMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ほりしょー</dc:creator></item><item><title><![CDATA[SvelteKitでタイプセーフなCookie管理]]></title><description><![CDATA[
 導入
CookieはWebアプリに必須の存在ですが、オブジェクトを格納したりしようとするとシリアライズ・デシリアライズの手間が発生します。また、変換の際やサーバー・クライアント間で型定義を間違えてつけてエラーを発生させてしまう可能性があります。
今回は、SvelteKitでフルスタックにタープセーフなCookie管理ができるライブラリを紹介します。

 svelte-baked-cookie
https://github.com/jill64/svelte-baked-cookie
名前の由来は硬く型付けされたCookieにしたかったのでbaked(焼いた)-cookieにしました。...]]></description><link>https://zenn.dev/jill64/articles/1d2625a58aae99</link><guid isPermaLink="true">https://zenn.dev/jill64/articles/1d2625a58aae99</guid><pubDate>Mon, 13 Jan 2025 22:16:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0kBbl00E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SvelteKit%25E3%2581%25A7%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25BC%25E3%2583%2595%25E3%2581%25AACookie%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jill64%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkhvRWlDNlllZ2R6cGxwZ2xPQnVaN2V5akFPSUMtVExwQUpIMFg2NERIZWl3Z1dLTT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jill64</dc:creator></item><item><title><![CDATA[ts-serde - TypeScriptにおけるserdeライブラリ]]></title><description><![CDATA[
 導入
Rustにはシリアライズ・デシリアライズのインターフェースライブラリ（フレームワーク）としてserdeというものがあります。
私はTypeScriptをよく使うのでTypeScript版のserdeが欲しくなったので作りました。
とはいえ、Rustのような大規模なフレームワークではなく、シリアライズ・デシリアライズを統一した規格で行うためのライブラリセットです。

 ts-serde
https://github.com/jill64/ts-serde
いつも通り依存関係をインストールします。
npm i ts-serde

 型定義
ts-serdeからは3つの型定義がエクス...]]></description><link>https://zenn.dev/jill64/articles/22cf402af27c02</link><guid isPermaLink="true">https://zenn.dev/jill64/articles/22cf402af27c02</guid><pubDate>Mon, 13 Jan 2025 21:35:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MHwsIkrV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ts-serde%2520-%2520TypeScript%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258Bserde%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jill64%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkhvRWlDNlllZ2R6cGxwZ2xPQnVaN2V5akFPSUMtVExwQUpIMFg2NERIZWl3Z1dLTT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jill64</dc:creator></item><item><title><![CDATA[nestjs-trpcが通常のNestJSと違うところ]]></title><description><![CDATA[
 はじめに
NestJSは、TypeScript製のサーバーサイドフレームワークです。モダンなアプリケーション開発を効率化するために設計されており、スケーラブルで保守性の高いバックエンドシステムを構築する際に非常に有用です。
またtRPC（TypeScript Remote Procedure Call）は、TypeScriptを活用した型安全なリモートプロシージャコール（RPC）ライブラリです。主にフロントエンドとバックエンド間での通信をシンプルかつ効率的に行うために設計されており、型の整合性を保ちながら迅速な開発を可能にします。tRPCは特にフルスタックTypeScriptアプリケ...]]></description><link>https://zenn.dev/ficilcom/articles/nestjs-trpc-compare</link><guid isPermaLink="true">https://zenn.dev/ficilcom/articles/nestjs-trpc-compare</guid><pubDate>Mon, 13 Jan 2025 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fEthn-kR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:nestjs-trpc%25E3%2581%258C%25E9%2580%259A%25E5%25B8%25B8%25E3%2581%25AENestJS%25E3%2581%25A8%25E9%2581%2595%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%2588%25E3%2581%2595%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE3MmFmNGJkODAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A3%25E3%2582%25B7%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25A0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5MGI3NGZiN2EuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>よさ</dc:creator></item></channel></rss>