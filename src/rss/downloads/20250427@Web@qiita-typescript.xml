<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/typescript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/typescript/feed"/>
  <title>TypeScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでTypeScriptタグが付けられた新着記事</description>
  <updated>2025-04-27T18:05:49+09:00</updated>
  <link>https://qiita.com/tags/typescript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2018561</id>
    <published>2025-04-27T18:05:49+09:00</published>
    <updated>2025-04-27T20:19:41+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/babu-ch/items/71917106d5e82c5dc474"/>
    <url>https://qiita.com/babu-ch/items/71917106d5e82c5dc474</url>
    <title>genkit + vertexAIでTool使う</title>
    <content type="html">通常のgenerate
import { genkit } from 'genkit';
import { vertexAI } from '@genkit-ai/vertexai';

const …</content>
    <author>
      <name>babu-ch</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2018539</id>
    <published>2025-04-27T17:06:20+09:00</published>
    <updated>2025-04-27T17:29:55+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/arunbababa/items/fc30e9850cf06a18d857"/>
    <url>https://qiita.com/arunbababa/items/fc30e9850cf06a18d857</url>
    <title>~交流会などで使える!!~ オンラインですぐに名刺が作れるアプリケーションを作ってみた</title>
    <content type="html">アプリケーションのコンセプト
エンジニア交流会や勉強会のような場面で、
「名刺を渡すほどではないんだよな...」
「でも、参加者同士で簡単にプロフィールは共有したい..」
という時って結構ありません…</content>
    <author>
      <name>arunbababa</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2018477</id>
    <published>2025-04-27T13:27:57+09:00</published>
    <updated>2025-04-27T13:27:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/toke04/items/2c14a48d9be1230cd268"/>
    <url>https://qiita.com/toke04/items/2c14a48d9be1230cd268</url>
    <title>TypeScriptのkeyof型について</title>
    <content type="html">keyof演算子を使うと、型のプロパティからリテラル型の値を取り出した型を宣言できる
type Human = {
  name: string
  age: number
}

type Humankeys…</content>
    <author>
      <name>toke04</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2018467</id>
    <published>2025-04-27T12:51:55+09:00</published>
    <updated>2025-04-27T12:56:47+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/toke04/items/3e59f7f832ad089490d7"/>
    <url>https://qiita.com/toke04/items/3e59f7f832ad089490d7</url>
    <title>TypeScriptでプロパティに関数を持つオブジェクト型を宣言する方法</title>
    <content type="html">以下のように書く
type Myfunc = {
  (str?: string) : void
  (num?: number): void
}

const myFunc: Myfunc = (num) …</content>
    <author>
      <name>toke04</name>
    </author>
  </entry>
</feed>
