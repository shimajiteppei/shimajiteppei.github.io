<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 16 Jan 2025 12:04:05 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[画像処理100本ノックに挑戦｜Sobelフィルタ（015/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の15本目です。

 前回
https://zenn.dev/nyagato_00/articles/ebdb8638a44b64

 実装

 お題

Sobelフィルタ(3x3)を実装せよ。
ソーベルフィルタ(Sobelフィルタ)は特定方向（縦や横）のエッジのみを抽出するフィルタであり、次式でそれぞれ定義される。

    (a)縦方向       (b)横方向
       1  2  1           1  0 -1
K = [  0  0  0 ]   K = [ 2  0 ...]]></description><link>https://zenn.dev/nyagato_00/articles/e1c99379da9685</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/e1c99379da9685</guid><pubDate>Thu, 16 Jan 2025 10:53:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jwBxjLR0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259CSobel%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588015%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[[React.js/TypeScript] 管理画面系のサイドバー実装例]]></title><description><![CDATA[
 概要
今までたくさんの企業で管理画面やSaaSのUIを作ってきました。そのたびにサイドバーを実装してきましたが、さすがにそろそろテンプレート化しておこうと思った…というのがこの記事の執筆動機です。
この記事では、サイドバー実装のサンプルコードと、軽微な解説を掲載します。使用技術は React.js / TypeScript / CSS in JS になります。
Vue.js でも TailwindCSS でも、この記事で紹介した考え方自体は流用できると思います。
UI ライブラリは使用していません。管理画面やSaaS開発では、自前で作った方が拡張性があり、複雑なニーズに対応できるため...]]></description><link>https://zenn.dev/tenkei/articles/9c69093e4354ae</link><guid isPermaLink="true">https://zenn.dev/tenkei/articles/9c69093e4354ae</guid><pubDate>Thu, 16 Jan 2025 09:20:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CCKDf-9C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BReact.js%252FTypeScript%255D%2520%25E7%25AE%25A1%25E7%2590%2586%25E7%2594%25BB%25E9%259D%25A2%25E7%25B3%25BB%25E3%2581%25AE%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2589%25E3%2583%2590%25E3%2583%25BC%25E5%25AE%259F%25E8%25A3%2585%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tenkei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTC1MbnhJQkE4eS1Yd2xoS3hwQllvMzlxODB3ZVItMDB2NlVWTkdRdnoyTnc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tenkei</dc:creator></item><item><title><![CDATA[【学習】TypeScriptとJAVAの比較]]></title><description><![CDATA[ある都市の緯度 latitude、経度 longitude が与えられるので、赤道（equator）、本初子午線（prime meridian）を基準として、その都市が東西南北どこに位置しているかを文字列で返す、calculateLocation という関数を作成してください。文字列は「緯度/経度」の順で表記してください。

 TypeScript
function calculateLocation(latitude: number, longitude: number): string {
        return getLatitudeDirection(latitude) +...]]></description><link>https://zenn.dev/milbon/articles/6a94c49c2b9368</link><guid isPermaLink="true">https://zenn.dev/milbon/articles/6a94c49c2b9368</guid><pubDate>Thu, 16 Jan 2025 08:26:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8cgHcPGf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%25AD%25A6%25E7%25BF%2592%25E3%2580%2591TypeScript%25E3%2581%25A8JAVA%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:milbon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzllMjg1Mjc4ZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>milbon</dc:creator></item><item><title><![CDATA[トランスコンパイルした JavaScript のエラーが TypeScript のどの部分であるか調べる]]></title><description><![CDATA[
 背景
TypeScript でスクリプトを実装して node で実行する際は一度 JavaScript にトランスコンパイルする必要があります。
トランスコンパイルされた JavaScript のスクリプトは当然ですが TypeScript と記載されているコードが異なりますので JavaScript のコードを実行した時に仮に以下のようなエラーが表示されても TypeScript のコードで同じ行でエラーが起きているわけではありません。
npx tsc foo.ts  # foo.js が作成される
node foo.js  # foo.js を実行 
Error: Not Fou...]]></description><link>https://zenn.dev/cykinso/articles/a58d3199ee3278</link><guid isPermaLink="true">https://zenn.dev/cykinso/articles/a58d3199ee3278</guid><pubDate>Thu, 16 Jan 2025 07:55:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6yogB8BL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2588%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%2597%25E3%2581%259F%2520JavaScript%2520%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%2520TypeScript%2520%25E3%2581%25AE%25E3%2581%25A9%25E3%2581%25AE%25E9%2583%25A8%25E5%2588%2586%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258B%25E3%2581%258B%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yamasaKit%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmNTQzYzVhYjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Cykinso%2527s%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg1ZDc4NDNmZDguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamasaKit</dc:creator></item><item><title><![CDATA[配列とオブジェクトからの型生成]]></title><description><![CDATA[
 この記事の目的
配列とオブジェクトからの型生成について忘れがちなので、生成の方法をと細かい意味をまとめて記憶に留めることを目的としています。

 配列からの型生成
const fruits = ['apple', 'banana', 'orange'] as const

// fruits の型
type Fruits = (typeof fruits)[number]
// "apple" | "banana" | "orange"
const Users = [
  {
    id: 1,
    name: 'John',
  },
  {
    id: 2,
    n...]]></description><link>https://zenn.dev/t_hashi/articles/ceed4febe73c1d</link><guid isPermaLink="true">https://zenn.dev/t_hashi/articles/ceed4febe73c1d</guid><pubDate>Thu, 16 Jan 2025 05:24:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nbKbc2Ec--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2585%258D%25E5%2588%2597%25E3%2581%25A8%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E5%259E%258B%25E7%2594%259F%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t_hashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JyLVk0Wll5NGd0Z0ljbFhFVUtYX2N4ZlNTaHZFd0NUcldlVkZHSWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t_hashi</dc:creator></item><item><title><![CDATA[JavaScript で非破壊的な配列操作する際に、シャローコピーを使うのと非破壊的な配列操作メソッドを使うのとでは何か違いってあるの？]]></title><description><![CDATA[
 はじめに
タイトルにある通りのことが気になって軽く調査＆検証してみました。
具体的な例としては以下のようなことで処理結果に違いはありません。
const ary = [1, 2, 3, 4, 5];

// ソース元配列（ary）をシャローコピーして反転
const copiedAry = [...ary].reverse();

// ES2023で追加された非破壊的メソッド（toReversed）で反転
const nonBreak_ary = ary.toReversed();

console.log(ary, copiedAry, nonBreak_ary);
/*
[1,...]]></description><link>https://zenn.dev/benjuwan/articles/a80df2e0fecdb6</link><guid isPermaLink="true">https://zenn.dev/benjuwan/articles/a80df2e0fecdb6</guid><pubDate>Thu, 16 Jan 2025 02:24:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vunIM_tv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%25E3%2581%25A7%25E9%259D%259E%25E7%25A0%25B4%25E5%25A3%258A%25E7%259A%2584%25E3%2581%25AA%25E9%2585%258D%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AB%25E3%2580%2581%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25AE%25E3%2581%25A8%25E9%259D%259E%25E7%25A0%25B4%25E5%25A3%258A%25E7%259A%2584%25E3%2581%25AA%25E9%2585%258D%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25AE%25E3%2581%25A8%25E3%2581%25A7...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:benjuwan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnd2XzJhLTN4SnJmSkN0Ql9wMkkwWUlVaVlTY1ozLTFQZFZoNkxsaUIyRmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>benjuwan</dc:creator></item><item><title><![CDATA[2025-1 JavaScript Tech Talk by KEPPLE CREATORS LAB]]></title><description><![CDATA[こんにちは！KEPPLE CREATORS LAB エンジニアの吉田です。
ケップルでは月に一度、関心のあるフロントエンドの技術やトピックを共有する JavaScript Tech Talk を開催しています。
今回は2024年9月から12月の 4 回にわたり、盛り上がった話題をお届けします！
今回の内容


Convex とは？魅力と課題に迫る！

TypeScript 5.5, 5.6 の新機能について


 Convex とは？魅力と課題に迫る！
Convexは、バックエンド (BaaS) プラットフォームとして注目を集めています。


 1. Convexの魅力
Convexとは...]]></description><link>https://zenn.dev/kepple/articles/e2b9f0c76214d2</link><guid isPermaLink="true">https://zenn.dev/kepple/articles/e2b9f0c76214d2</guid><pubDate>Thu, 16 Jan 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1-f5wpKD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2025-1%2520JavaScript%2520Tech%2520Talk%2520by%2520KEPPLE%2520CREATORS%2520LAB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:riooo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg3NzkwMTQ0ZDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Kepple%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTExqWVVNdHktdHR0TkZ2ZnZJd1lsOUpBM2tjdUVDRWt3XzlGc3Nmc1FOM3VIU253PXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>riooo</dc:creator></item><item><title><![CDATA[Node streamning]]></title><description><![CDATA[
 はじめに
業務で容量が大きいファイルの I/O 操作を Node で行う機会があった。
以前は、ファイル全体をメモリに展開して、処理を行っていたが大量のデータの場合
メモリリークを起こしてしまったり処理が重くなるため、ストリームを学んだ。
ファイル操作以外にもできることはたくさんあるが、今回は一部学んだ内容について
頭の中を整理するために記事に書く。

 環境
Node:22.9.0
Typescript:5.1.3

 Node Stream とは
大量のデータを効率的に処理するための強力な仕組み
データをチャンクに分けて順次処理する。これにより、大量のデータを
一度にメモリに読み...]]></description><link>https://zenn.dev/takumi_machino/articles/typescript-streaming</link><guid isPermaLink="true">https://zenn.dev/takumi_machino/articles/typescript-streaming</guid><pubDate>Wed, 15 Jan 2025 10:07:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--relqIBs2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:Node%2520streamning%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2520machino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0lmY1dUTmhkc0NrQWNackJhQUZLci1kTkVKclItc1BtMHBIdEM1RDRYVnV1bjFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi machino</dc:creator></item><item><title><![CDATA[JS,TSの実行環境について]]></title><description><![CDATA[
 はじめに
普段何気なく使用した Node についてあまり理解していないことに気づいた。
比較的簡単に環境が作れるため、意識することは少なかったが最近 Deno V2 がでたらしいので
これを機に JS,TS の実行環境について深く知ろうと思う。

 実行環境
元々は、javascript を実行する環境はブラウザのみであった。
ブラウザ、例えば Chrome はv8という JS 実行エンジンが搭載されているため動く。
そこから、Node.js と言われるサーバーサイドでも実行ができる環境が開発された。
サーバーサイドの特徴として、ネットワークリクエストを処理できる、ファイルの読み書き...]]></description><link>https://zenn.dev/takumi_machino/articles/node-deno-bun</link><guid isPermaLink="true">https://zenn.dev/takumi_machino/articles/node-deno-bun</guid><pubDate>Wed, 15 Jan 2025 10:07:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oHe-vw4D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%252CTS%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2520machino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0lmY1dUTmhkc0NrQWNackJhQUZLci1kTkVKclItc1BtMHBIdEM1RDRYVnV1bjFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi machino</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜微分フィルタ（014/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の14本目です。

 前回
https://zenn.dev/nyagato_00/articles/13517b6f1180b3

 実装

 お題

微分フィルタ(3x3)を実装せよ。
微分フィルタは輝度の急激な変化が起こっている部分のエッジを取り出すフィルタであり、隣り合う画素同士の差を取る。

    (a)縦方向         (b)横方向
      0 -1  0            0 0 0
K = [ 0  1  0 ]   K = [ -1 1 0 ]
      ...]]></description><link>https://zenn.dev/nyagato_00/articles/ebdb8638a44b64</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/ebdb8638a44b64</guid><pubDate>Wed, 15 Jan 2025 07:00:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6cXrurOx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E5%25BE%25AE%25E5%2588%2586%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588014%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[Zodがとても便利だった話]]></title><description><![CDATA[
 始めに
株式会社ソニックムーブでバックエンドエンジニアをやっている新卒2年目の中崎です。
今回は案件で使用したZodが想像以上に便利だったため、活用例を交えつつ紹介していければと思います。

 Zodとは
https://zod.dev/
Zodとはスキーマの宣言およびバリデーションを行うOSSのライブラリです。
フレームワークであるhonoのv3.0.0でのバリデーションミドルウェアに導入されていたりします。

 活用例

 バリデーション
オブジェクト作成時に各カラムのバリデーションを行いたい時があると思います。
ただ、入力された値を全て確認するのはめんどくさいと思います。
Zo...]]></description><link>https://zenn.dev/sonicmoov/articles/4d1087bdf3e1e3</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/4d1087bdf3e1e3</guid><pubDate>Wed, 15 Jan 2025 06:59:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--13w3xpa6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25E3%2581%258C%25E3%2581%25A8%25E3%2581%25A6%25E3%2582%2582%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:r.nakazaki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRzd2RuZ181WjM5VUdEY3I1NW1jdmpPVXpLbkVoSkpqbFB6MUNxOTBLTzdON1p2UT1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>r.nakazaki</dc:creator></item><item><title><![CDATA[アクセサ【個人学習まとめ】]]></title><description><![CDATA[
 アクセサ
アクセサにはゲッターとセッターの２種類のメソッドが存在する。

 ゲッター
まずはゲッターのみ。getキーワードをメソッドの前に宣言して定義する。
class Money {
    private _amount: number;

    constructor(amount: number) {
        this._amount = amount;
    }

    //ゲッターを定義
    get amount(): number {
        console.log("金額を取得");
        return this._amount;
...]]></description><link>https://zenn.dev/o0rororo0o/articles/e4c538599b6c56</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/e4c538599b6c56</guid><pubDate>Wed, 15 Jan 2025 01:35:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DttgKPPr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B5%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item><item><title><![CDATA[Node.js クラスターの核心を解き明かす]]></title><description><![CDATA[

 前書き
PM2 を使って Node.js プロセスを管理していると、クラスターモードをサポートしていることに気づくでしょう。このモードを有効にすると、Node.js で複数のプロセスを作成できます。クラスターモードでインスタンス数を max に設定すると、サーバーの CPU コア数に基づいて同数の Node プロセスが作成されます。
PM2 は、Node.js の Cluster モジュールを利用してこれを実現しています。このモジュールは、Node.js のシングルスレッド特性による制約を解決し、複数の CPU コアを活用できるようにするために導入されました。しかし、Cluster...]]></description><link>https://zenn.dev/leapcell/articles/d29c2578226f65</link><guid isPermaLink="true">https://zenn.dev/leapcell/articles/d29c2578226f65</guid><pubDate>Tue, 14 Jan 2025 19:47:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hz-bBwtB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%25AE%25E6%25A0%25B8%25E5%25BF%2583%25E3%2582%2592%25E8%25A7%25A3%25E3%2581%258D%25E6%2598%258E%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leapcell%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0N2E0MGQ3NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leapcell</dc:creator></item><item><title><![CDATA[React Hook Formのバリデーションが意図しないタイミングで走って詰まった話]]></title><description><![CDATA[
 概要
自分がReact Hook Form弱者過ぎるのを痛感するこの頃。
今回詰まったのはzodとReact Hook Form管理のフォームの要素に子コンポーネントを介して値を入れた際に全てのフィールドにバリデーションが走ってしまい、迷走しまっくった話です。
この記事が自分と同じようなケースにあたる、あたった人の役に立てば幸いです。
(そもそもの設計が悪いと言われればそれまでですが、、、)

 結論
buttonタグにtype="button"をしてすることでこれを回避できる。

 スタック

Next.js
React Hook Form
zod


 詳細
今回のケースを再現し...]]></description><link>https://zenn.dev/yuya_0811/articles/97452eb605f698</link><guid isPermaLink="true">https://zenn.dev/yuya_0811/articles/97452eb605f698</guid><pubDate>Tue, 14 Jan 2025 15:24:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BuQAbG7K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Hook%2520Form%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%258C%25E6%2584%258F%25E5%259B%25B3%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E8%25B5%25B0%25E3%2581%25A3%25E3%2581%25A6%25E8%25A9%25B0%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2582%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczZjBlNTMyYWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーや</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜MAX-MINフィルタ（013/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の13本目です。

 前回
https://zenn.dev/nyagato_00/articles/16fccb35dc2973

 実装

 お題

MAX-MINフィルタ(3x3)を実装せよ。
MAX-MINフィルタとはフィルタ内の画素の最大値と最小値の差を出力するフィルタであり、エッジ検出のフィルタの一つである。 エッジ検出とは画像内の線を検出るすることであり、このような画像内の情報を抜き出す操作を特徴抽出と呼ぶ。 エッジ検出では多くの場合、グレースケール画像に対してフィルタリングを...]]></description><link>https://zenn.dev/nyagato_00/articles/13517b6f1180b3</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/13517b6f1180b3</guid><pubDate>Tue, 14 Jan 2025 12:37:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WwlhNU0S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259CMAX-MIN%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588013%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[【TypeScript/ハンズオン】テスト駆動開発(TDD)入門 第4回：エラーハンドリングとバリデーションのテスト]]></title><description><![CDATA[
 はじめに
前回まででテストの基本やFizzBuzzの実装を通じてTDDの流れを学びました。
https://zenn.dev/nezumizuki/articles/c24df235f7333d
今回は、より実践的なシナリオとして、フォームのバリデーションとエラーハンドリングのテストについて学んでいきます。
実際のWebアプリケーション開発でよく遭遇する、ユーザー入力の検証処理をTDDで実装していく過程を見ていきましょう。

 1. 開発環境のセットアップ

 1.1 基本環境の構築
まずは必要な開発環境を整えていきます。TypeScriptとJestを使用した環境を構築します。
#...]]></description><link>https://zenn.dev/nezumizuki/articles/175da0bad038f7</link><guid isPermaLink="true">https://zenn.dev/nezumizuki/articles/175da0bad038f7</guid><pubDate>Tue, 14 Jan 2025 11:20:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--71H0cIrC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%252F%25E3%2583%258F%25E3%2583%25B3%25E3%2582%25BA%25E3%2582%25AA%25E3%2583%25B3%25E3%2580%2591%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%2528TDD%2529%25E5%2585%25A5%25E9%2596%2580%2520%25E7%25AC%25AC4%25E5%259B%259E%25EF%25BC%259A%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:MI%2528%25E7%2594%2598%25E8%25BE%259B%25E3%2583%2581%25E3%2582%25AD%25E3%2583%25B3%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzMmZiODJlMzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>MI(甘辛チキン)</dc:creator></item><item><title><![CDATA[MUI の TablePagination コンポーネントのデフォルト表示をカスタマイズしたい]]></title><description><![CDATA[MUI の Table コンポーネントは便利ですね。
フィルタリングやページネーションの管理も用意してくれているので作る手間が省けます。
ただ、上がってくるデザインと異なるので少し調整が必要だったりするので、
できる範囲でカスタマイズしていきます。
基本はドキュメントを参考に、ActionsComponent を作ってボタンイベントを用意しますが、
ページネーションが高機能すぎるので省く時にやったことを書き残します。

 対象の箇所

↑の Rows per page と 1-10 of 12 のような UI は特に必要ないので非表示にしたい。

 Rows per page のセレクト...]]></description><link>https://zenn.dev/seventhseven07/articles/0ee5044265fd1a</link><guid isPermaLink="true">https://zenn.dev/seventhseven07/articles/0ee5044265fd1a</guid><pubDate>Tue, 14 Jan 2025 09:44:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RaZQp62x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MUI%2520%25E3%2581%25AE%2520TablePagination%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2582%2592%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shumpei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyY2ZhOWM5YTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shumpei</dc:creator></item><item><title><![CDATA[フロントエンドで使える非同期処理の排他制御を使った小技集]]></title><description><![CDATA[こんにちは、RUN.EDGE株式会社の桑原です。
今回は、非同期処理の排他制御についての記事になります。
Webのフロントエンドで実行されるJavaScriptエンジンはその性質上、基本的にはシングルスレッドで実行される[1]ので、マルチスレッドでの実行に対応している他の言語/実行環境ほど排他制御を意識することはないかもしれませんが、Webフロントエンドであっても、動画やAPIの操作など複雑な非同期処理を伴う処理を扱う場合に、適切に排他制御を行って、バグなく動作するコードを書くことは非常に大切です。
今回は、実際にプロダクトを作っていく中で使うことが多かった排他制御を使った小技をいくつか...]]></description><link>https://zenn.dev/run_edge/articles/ea7209ffaf6261</link><guid isPermaLink="true">https://zenn.dev/run_edge/articles/ea7209ffaf6261</guid><pubDate>Tue, 14 Jan 2025 09:01:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eM3vwCCa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E6%258E%2592%25E4%25BB%2596%25E5%2588%25B6%25E5%25BE%25A1%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25B0%258F%25E6%258A%2580%25E9%259B%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E6%25A1%2591%25E5%258E%259F%25E8%258D%2598%25E9%25A6%25AC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBkNjVlOTZjYjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:RUN.EDGE%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2OThiMzVjM2UuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>桑原荘馬</dc:creator></item><item><title><![CDATA[BetaになったTanStack Startを触るぞ！！！]]></title><description><![CDATA[
 はじめに
こんにちは！Reactのフルスタックフレームワークといえば、Next.jsが広く知られていますが、新たにOSSのTanStackが「TanStack Start」というフレームワークをリリースしました(現在はbeta版が公開されています！)
この記事では、TanStack Startのセットアップ手順や主要な機能について解説していきます。
https://tanstack.com/start/latest

 TanStack Startとは
Vinxiを基盤に構築された、フルスタックなReactフレームワークで、主な機能にはサーバーサイドレンダリング（SSR）ストリーミン...]]></description><link>https://zenn.dev/gemcook/articles/909eaf62eab51d</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/909eaf62eab51d</guid><pubDate>Tue, 14 Jan 2025 03:51:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--flar-Rjm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Beta%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259FTanStack%2520Start%25E3%2582%2592%25E8%25A7%25A6%25E3%2582%258B%25E3%2581%259E%25EF%25BC%2581%25EF%25BC%2581%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25A6%25E3%2582%2593%25E3%2582%2580%25E3%2581%2599%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwZDNlZDBmODguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てんむす</dc:creator></item><item><title><![CDATA[サバイバルTypeScriptを読んで、静的フィールドと静的メソッドを理解した]]></title><description><![CDATA[
 はじめに
TypeScriptでクラスを使用する際、インスタンスを作成せずにクラスレベルでアクセスできる機能として「静的フィールド」と「静的メソッド」があります。
この記事では、サバイバルTypeScriptを参考に、これらの機能について学んでいきます。

 静的フィールドと静的メソッドとは
staticキーワードを使用することで、クラスのインスタンスではなく、クラス自体に関連つけられたフィールドやメソッドを定義することができます。

 基本的な使い方
class MyClass {
  static x = 0;  // 静的フィールド

  static printX(): vo...]]></description><link>https://zenn.dev/asamin/articles/641e1079676636</link><guid isPermaLink="true">https://zenn.dev/asamin/articles/641e1079676636</guid><pubDate>Tue, 14 Jan 2025 02:41:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hAxqcvpv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B5%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2590%25E3%2583%25ABTypeScript%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7%25E3%2580%2581%25E9%259D%2599%25E7%259A%2584%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25A8%25E9%259D%2599%25E7%259A%2584%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:asami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0YWMyYjMxNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>asami</dc:creator></item></channel></rss>