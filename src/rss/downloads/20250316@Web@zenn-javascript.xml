<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 16 Mar 2025 07:50:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[useRefの基本と使い方]]></title><description><![CDATA[useRefは、React 16.8から導入された、再レンダリングなしで値やDOM要素を更新できるReactフック。
「DOMに直接アクセスしたいとき」「再レンダリングなしで値を保持・更新したいとき」「前回の値や状態を記録しておきたいとき」などに便利。
使い方は２種類ある。

 再レンダリングなしで値を保持・更新

.currentで操作する。
何度でも変更でき、再レンダリングは起きない。
useStateを使うと、値を変更するたびに再レンダリングが走り、状態の更新が遅延（非同期）して正しい値が取れないことがある。このようなときにuseRefを使える。

import { useRef,...]]></description><link>https://zenn.dev/kkoisland/articles/6e7f38461bb69d</link><guid isPermaLink="true">https://zenn.dev/kkoisland/articles/6e7f38461bb69d</guid><pubDate>Sun, 16 Mar 2025 01:16:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NbiG21Lf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useRef%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkoisland%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2MzIwYmQ0NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkoisland</dc:creator></item><item><title><![CDATA[条件分岐しない fizzbuzz]]></title><description><![CDATA[
 状況
if しないで FizzBuzz を書いてみよう的な話があったのでやってみた．

 方針
条件と外から入れて計算する．入力の条件を追加すれば処理自体はいじらなくて済むようにできると良い．多分．

 実装
const data = [
  { condition: (v) =&gt; v % 15 === 0, result: "FizzBuzz" },
  { condition: (v) =&gt; v % 5 === 0, result: "Buzz" },
  { condition: (v) =&gt; v % 3 === 0, result: "Fizz" },
];...]]></description><link>https://zenn.dev/taroosg/articles/20250315224922-3c49aea78114d1</link><guid isPermaLink="true">https://zenn.dev/taroosg/articles/20250315224922-3c49aea78114d1</guid><pubDate>Sat, 15 Mar 2025 14:06:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bdQxMv1Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%2520fizzbuzz%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyOGZiYzgwODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[JavaScriptの基礎と最新トレンド]]></title><description><![CDATA[JavaScriptは、今のウェブ開発において一番重要な言語の一つです。あらゆるブラウザで動作し、クライアントに近い経験を提供することが可能です。日々進化する技術の中で、JavaScriptは毎年のように進化しています。この記事では、JavaScriptの基礎から最新のトレンドまでを解説します。
JavaScriptの基礎
基本的な概念
JavaScriptはクライアントで動くスクリプト言語です。主にWebサイトのインタラクティブな動作を制御したり、ユーザーインターフェースの改善に使われます。サーバー側でもNode.jsを用いることで運用が可能です。
JavaScriptの特徴
インタプ...]]></description><link>https://zenn.dev/qudres/articles/33bdf3e135ff91</link><guid isPermaLink="true">https://zenn.dev/qudres/articles/33bdf3e135ff91</guid><pubDate>Sat, 15 Mar 2025 13:07:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LCw83kpZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2581%25A8%25E6%259C%2580%25E6%2596%25B0%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qudres%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnFBRmpraTRMQkJqUDExVjNrWFlpYUNfeDUwNkt2alRHVDNhWkd6aFBQRW5KMnV3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qudres</dc:creator></item><item><title><![CDATA[好きなアニメキャラクターをWeb上で自由自在に3Dダンスさせる方法（Three.js + DeepMotion）]]></title><description><![CDATA[

 好きなアニメキャラクターをWeb上で自由自在に3Dダンスさせる方法（Three.js + DeepMotion）
アニメが好きで自分の好きなアニメキャラクターに最近の人気な曲に合わせて自由自在にダンスさせて動かしたいという気分になったので、今回それをtreee.jsで実現しました。
※作成期間は２日でそんなに難しい内容ではありません
完成したデモはこちら👇（「Dance Motion」を押してください！🙇）
デモサイト
Github
https://github.com/masaaki-imai/3D-anime
気に入ったらぜひ「いいね」をお願いします！😊


 📌 使用した技術...]]></description><link>https://zenn.dev/masanarea777/articles/c4e5819a0e9c03</link><guid isPermaLink="true">https://zenn.dev/masanarea777/articles/c4e5819a0e9c03</guid><pubDate>Sat, 15 Mar 2025 10:27:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xnpCeqOT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25A5%25BD%25E3%2581%258D%25E3%2581%25AA%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%25A9%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592Web%25E4%25B8%258A%25E3%2581%25A7%25E8%2587%25AA%25E7%2594%25B1%25E8%2587%25AA%25E5%259C%25A8%25E3%2581%25AB3D%25E3%2583%2580%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25EF%25BC%2588Three.js%2520%252B%2520DeepMotion%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BB%258A%25E4%25BA%2595%25E9%259B%2585%25E7%25AB%25A0%2540%25E5%25A4%25A7%25E9%2598%25AA%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2595%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A9...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkMjQxNmY4MzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>今井雅章@大阪のフルスタックフリーランスエンジニア</dc:creator></item><item><title><![CDATA[Abcjsを使った楽譜の表示]]></title><description><![CDATA[
 はじめに
ABC記法を使って楽譜を表示できるライブラリ「Abcjs」を使用して、テキストベースで楽譜を管理・表示する方法をご紹介します。

 Abcjsとは
Abcjsは、ABC記法で書かれたテキストを楽譜として表示するためのJavaScriptライブラリです。
ABC記法は、テキストベースの音楽記譜法で、シンプルな文法で楽譜を表現できます。
例えば、以下のようなコードでCメジャースケールを表示できます。
&lt;Music code="CDEFGAB" /&gt;;


 Abcjsの導入
Reactで使用する場合、以下のようなシンプルなコンポーネントを作成するだけで実装できます。...]]></description><link>https://zenn.dev/yoshinani_dev/articles/20250315_abcjs</link><guid isPermaLink="true">https://zenn.dev/yoshinani_dev/articles/20250315_abcjs</guid><pubDate>Sat, 15 Mar 2025 07:06:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1jWt7F9e--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Abcjs%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E6%25A5%25BD%25E8%25AD%259C%25E3%2581%25AE%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2581%25A3%25E3%2581%2591%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhMjMyNjAxN2QuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:YOSHINANI%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RkZjI5ZmNmYjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふっけ</dc:creator></item><item><title><![CDATA[[bun]PrismaをBunで使えない]]></title><description><![CDATA[
 発生した問題
ランタイム、パッケージマネージャにYarnの３系を使用していたのだが、動作が遅かったりすることがあり、高速化のためにBunに切り替えたものの、bun run prisma generateを実行するとエラーになった。

 環境

Docker version 27.5.1, build 9f9e405
Mac OS  15.3.1（24D70） Intel


 結論、Bun単体でPrisma は使えない
以下のイシューで議論されているが、以下の通り。

Adding&nbsp;COPY --from=node:20 /usr/local/bin/node /usr/l...]]></description><link>https://zenn.dev/marakasu/articles/9a858eb0768382</link><guid isPermaLink="true">https://zenn.dev/marakasu/articles/9a858eb0768382</guid><pubDate>Fri, 14 Mar 2025 16:28:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LB29Smff--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bbun%255DPrisma%25E3%2582%2592Bun%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%2589%25E3%2581%258B%25E3%2581%2599%25E3%2581%259F%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkMjM3OWQ4YmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まらかすたろう</dc:creator></item><item><title><![CDATA[便利すぎる！！templete生成器を作りました]]></title><description><![CDATA[
 やりたいこと
毎回も同じことを書きたくないので、template機能を作成する。
jsファイルを生成するのが、普通のものとは少し違うポイントです。
jsを指定するだけで、ほしいtempleteが呼び出せる形にしたい。

 方針
templateを上下に分け、上、下で別々で登録する。
これを用いて、template作成用のjsを作成する。
あとは、出力されたjsコードを保存し、htmlから指定する。
テンプレ上 + body +テンプレ下という形で挟み込むことでテンプレを実現。
main_content要素以外をすべて登録し、コンテンツ部分のみを書くことで、保守性が高まることを期待して...]]></description><link>https://zenn.dev/kemii/articles/24943fae5f786e</link><guid isPermaLink="true">https://zenn.dev/kemii/articles/24943fae5f786e</guid><pubDate>Fri, 14 Mar 2025 14:45:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wL7qxjF1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%2599%25E3%2581%258E%25E3%2582%258B%25EF%25BC%2581%25EF%25BC%2581templete%25E7%2594%259F%25E6%2588%2590%25E5%2599%25A8%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kemii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5ZGYyMjM5ZmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kemii</dc:creator></item><item><title><![CDATA[【図解】リスト（配列）と辞書（オブジェクト）の違いを解説]]></title><description><![CDATA[プログラミングでデータを扱う際、最も基本的なデータ構造が「リスト（配列）」と「辞書（オブジェクト）」です。この記事では、これらの違いと使い方について、図解を交えてわかりやすく解説します。

 リスト（配列）とは？
リストは、複数のデータを順序付けて格納するデータ構造です。本棚に本を順番に並べるようなイメージです。

 リストの特徴


順序がある

各要素に位置（インデックス）がある
0から始まる番号で要素にアクセスできる



同じ値を複数格納できる

重複した値を持つことができる



要素の追加・削除が可能

リストの末尾や途中に要素を追加できる
既存の要素を削除できる




 ...]]></description><link>https://zenn.dev/homatsu_tech/articles/14107ce6b0c470</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/14107ce6b0c470</guid><pubDate>Fri, 14 Mar 2025 11:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2yBE2Kkd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%259B%25B3%25E8%25A7%25A3%25E3%2580%2591%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25EF%25BC%2588%25E9%2585%258D%25E5%2588%2597%25EF%25BC%2589%25E3%2581%25A8%25E8%25BE%259E%25E6%259B%25B8%25EF%25BC%2588%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25EF%25BC%2589%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[『JavaScriptで学ぶ関数型プログラミング』を読んだ 03]]></title><description><![CDATA[https://zenn.dev/shimpei_takeda/articles/d32d43fa3c0ea3
02からのつづき

 8. フローベースプログラミング

本章では、関数をブロックとして組み合わせるという考え方を紹介する

純粋性と変更の隔離を重視した関数を合成する




 チェーン

チェーン


チェーンとは

condition1関数の例



condition1関数の例
  /*
    condition1関数の
    検証関数の結果生成する部分
  */
  // ...
  var errors = mapcat(function (isValid) {...]]></description><link>https://zenn.dev/shimpei_takeda/articles/e187f0b5d7c7fc</link><guid isPermaLink="true">https://zenn.dev/shimpei_takeda/articles/e187f0b5d7c7fc</guid><pubDate>Fri, 14 Mar 2025 07:52:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V1Ud3NDA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258EJavaScript%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2580%258F%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%252003%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shimpei%2520Takeda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U5NjIzYjY5ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shimpei Takeda</dc:creator></item><item><title><![CDATA[『JavaScriptで学ぶ関数型プログラミング』を読んだ 02]]></title><description><![CDATA[https://zenn.dev/shimpei_takeda/articles/ec37a19bbf0e7a
01からのつづき

 部分適用

部分適用

カリー化と部分適用

カリー化された関数は、引数が渡されるたびにパラメータが無くなるまで徐々に動作を特化された関数を返す
部分適用（partial application）された関数は「部分的に」実行されており、期待している残りの引数を与えることで即時実行する用意をしている関数となる
カリー化と部分適用には、「1つ以上の数の引数を専門化することによって合成する」と言う共通の制約がある

引数と戻り値の関係性にもとづいて関数を合成した...]]></description><link>https://zenn.dev/shimpei_takeda/articles/d32d43fa3c0ea3</link><guid isPermaLink="true">https://zenn.dev/shimpei_takeda/articles/d32d43fa3c0ea3</guid><pubDate>Fri, 14 Mar 2025 07:52:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W-XLmld5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258EJavaScript%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2580%258F%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%252002%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shimpei%2520Takeda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U5NjIzYjY5ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shimpei Takeda</dc:creator></item><item><title><![CDATA[『JavaScriptで学ぶ関数型プログラミング』を読んだ 01]]></title><description><![CDATA[https://www.oreilly.co.jp/books/9784873116600/

関数型プログラミングを学ぶということはそれ自体がゴールであるべきではなく、ゴールに到達するためのテクニックであるべきです
本書 292p.

JavaScriptで関数型プログラミングがどこまでできるのか、またどうやったらできるのかを、あらためて認識したいと思い本書を手に取りました。
本書はJavaScriptというある意味クセのある言語で、関数型プログラミングをどう行うことができるのか具体的なコードとともに紹介しています。少し古い（2014年発行）ですが、ほとんどがVanillaなJavaS...]]></description><link>https://zenn.dev/shimpei_takeda/articles/ec37a19bbf0e7a</link><guid isPermaLink="true">https://zenn.dev/shimpei_takeda/articles/ec37a19bbf0e7a</guid><pubDate>Fri, 14 Mar 2025 07:51:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b2R5XDao--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258EJavaScript%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2580%258F%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%252001%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shimpei%2520Takeda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U5NjIzYjY5ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shimpei Takeda</dc:creator></item><item><title><![CDATA[# fullPage.jsでスクロールを遅延させ、アニメーションが完了するまで待機する方法]]></title><description><![CDATA[
 はじめに
fullPage.jsのアニメーションを遅らせ、アニメーションが完了した後にスクロールを実行したい場合は、beforeLeave コールバックを使用できます。
このコールバックで false を返すと、スクロールは実行されません。
この機能を利用して、コールバック内に独自のロジックを追加し、スクロールをトリガーするタイミングを制御できます。

 JavaScript コード
次のコード例では、4回スクロールしないと次のセクションへスクロールできないように設定しています。
var cont = 0;
new fullpage('#fullpage', {
    before...]]></description><link>https://zenn.dev/alvarotrigo/articles/dc64f04519c683</link><guid isPermaLink="true">https://zenn.dev/alvarotrigo/articles/dc64f04519c683</guid><pubDate>Thu, 13 Mar 2025 15:46:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1pKSTb-I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523%2520fullPage.js%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E9%2581%2585%25E5%25BB%25B6%25E3%2581%2595%25E3%2581%259B%25E3%2580%2581%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%258C%25E5%25AE%258C%25E4%25BA%2586%25E3%2581%2599%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E5%25BE%2585%25E6%25A9%259F%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Alvaro%2520Trigo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzZTc5MDBkNTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Alvaro Trigo</dc:creator></item><item><title><![CDATA[【初心者向け】for文とwhile文の使い分け完全ガイド]]></title><description><![CDATA[プログラミングにおいて、同じ処理を繰り返し実行する「ループ処理」は非常に重要な要素です。この記事では、主なループ文であるfor文とwhile文の違いや、それぞれの特徴、適切な使い分けについて詳しく解説します。

 ループ処理とは？
ループ処理とは、特定の条件が満たされる間、同じ処理を繰り返し実行することです。例えば：

配列の全要素に対して同じ処理を行う
ユーザーが正しい入力をするまで質問を繰り返す
ファイルの終わりまでデータを読み込む

このような処理を、一行ずつ書くのではなく、ループを使って効率的に実現します。

 for文の基本

 基本構文
for (初期化; 条件式; 更新式)...]]></description><link>https://zenn.dev/homatsu_tech/articles/53b6ebc476901e</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/53b6ebc476901e</guid><pubDate>Thu, 13 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HJzklsN2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591for%25E6%2596%2587%25E3%2581%25A8while%25E6%2596%2587%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習 [JavaScript] JSONの定義と役割]]></title><description><![CDATA[JSONとは？
JSON(JavaScript Object Notation)は、データを保存して転送するための軽量データ形式である。
テキストベースのキー-値(Key-Value)構造を持ち、人間が読みやすく、機械が処理しやすい
やさしいデータ形式で設計されている。
JSONはプログラミング言語に独立しているため、Java、Python、JavaScript、C++など様々な言語で使用できる。
JSON(JavaScript Object Notation)의 役割。
主にウェブ開発及びAPI通信でデータ交換形式として使用される。
サーバーとクライアント間のデータ交換(RESTAPI...]]></description><link>https://zenn.dev/shubbydobob/articles/8ed819e7f5e148</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/8ed819e7f5e148</guid><pubDate>Thu, 13 Mar 2025 07:52:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CXB6F9o8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJavaScript%255D%2520JSON%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8%25E5%25BD%25B9%25E5%2589%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[Node.js Crypto モジュールと CryptoJS による暗号化・復号化]]></title><description><![CDATA[
 モジュールやライブラリの整理

 Crypto モジュール
まず Crytpo モジュールというのは Node.js に付属するもので、最新のブラウザでもこの crypto モジュールは導入されているらしい。

The node:crypto module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.
https://nodejs.org/api/cr...]]></description><link>https://zenn.dev/maztak/articles/c3333799f25d41</link><guid isPermaLink="true">https://zenn.dev/maztak/articles/c3333799f25d41</guid><pubDate>Thu, 13 Mar 2025 01:40:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1QwveH-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520Crypto%2520%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A8%2520CryptoJS%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E6%259A%2597%25E5%258F%25B7%25E5%258C%2596%25E3%2583%25BB%25E5%25BE%25A9%25E5%258F%25B7%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhNzEwZjYwZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まった</dc:creator></item><item><title><![CDATA[【第二回】discord.jsでbot制作。コマンド制作と登録]]></title><description><![CDATA[
 discord.js botのコマンドファイルの制作と登録

 コマンドはファイルを書くだけじゃダメという話
本稿ではスラッシュコマンドファイルの中身、そしてそれを使うためのメインファイル（本シリーズではindex.jsとする）、そしてスラッシュコマンドをdeploy-commands.jsを使って登録するという流れまで紹介します。ざーっと流していくので、色んなバリエーションを確認したい人は公式を読むようにしてください。マジで基本的な情報なので、この辺りはチュートリアル見てやった方が早いっす。
DIsocodのbotと言えば、やっぱりコマンド。開発的にはスラッシュコマンドと呼んでいま...]]></description><link>https://zenn.dev/semapho/articles/063582c32eff32</link><guid isPermaLink="true">https://zenn.dev/semapho/articles/063582c32eff32</guid><pubDate>Wed, 12 Mar 2025 16:58:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--93exIuXw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E7%25AC%25AC%25E4%25BA%258C%25E5%259B%259E%25E3%2580%2591discord.js%25E3%2581%25A7bot%25E5%2588%25B6%25E4%25BD%259C%25E3%2580%2582%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E5%2588%25B6%25E4%25BD%259C%25E3%2581%25A8%25E7%2599%25BB%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Semapho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyczI5dzNqTHdyaG41VTIwa05CVy1UcC04X1d6UFNJRS1nNmVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Semapho</dc:creator></item><item><title><![CDATA[Invoker Commands APIのイベントのまとめ]]></title><description><![CDATA[&lt;dialog&gt;、Popover、Invoker CommandsがHTML標準で整いつつあります。JavaScriptを書かずにHTMLだけでインタラクティブなUIを作ることができるようになっていっているわけですが、それでもイベントをフックして何かしらの処理を実行したいことはあります。これらのUIのイベントはいくつか種類があるので、それぞれのUIや呼び出し方法に対応するイベントをまとめてみました。

 前提

 &lt;dialog&gt;

&lt;dialog&gt;はHTML標準のダイアログUIです。このダイアログUIはモードレスダイアログとモーダルダイアログの2つの...]]></description><link>https://zenn.dev/yusukehirao/articles/event-of-invoker-commands</link><guid isPermaLink="true">https://zenn.dev/yusukehirao/articles/event-of-invoker-commands</guid><pubDate>Wed, 12 Mar 2025 16:25:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ae2vIVmH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Invoker%2520Commands%2520API%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%2586%25E3%2581%25A6%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kyUjJhZW0zYXB3MjFneHFmUGJGSlpDaG1ndEs2aG9jS0VNbV9JT3c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆうてん</dc:creator></item><item><title><![CDATA[JavaScript Arrayを使う]]></title><description><![CDATA[Next.js/Reactでは配列をよく使うことがあります。配列（Array）とは値が複数格納されたものです。文字だったり数字が入ってます。

MDNや分厚い専門書を読むことがあるのですがよくある書き方や仕事で使ったことがある書き方を本にして見たいなと思いました。検索とか配列の操作だとfilterやforEachを使うぐらいなのですが。

参考までに見てください。
著者: JboyHashimoto
]]></description><link>https://zenn.dev/joo_hashi/books/a0c26f9c5f6641</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/books/a0c26f9c5f6641</guid><pubDate>Wed, 12 Mar 2025 13:28:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tLIUNNed--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9hYWZhMzcyNzgyLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[【入門】条件分岐(if文)を理解してロジックを組み立てよう]]></title><description><![CDATA[プログラミングにおいて、条件に応じて処理を変えることは非常に重要です。この記事では、条件分岐の基本となるif文について、初心者にもわかりやすく解説します。

 if文とは？
if文は、「もし〜なら、これをする」という条件分岐を実現するための構文です。日常生活でも私たちは常に条件分岐を行っています：

もし雨が降っているなら、傘を持っていく
もし財布を忘れたなら、家に取りに戻る
もし電車が遅れているなら、別のルートを検討する

これらと同じように、プログラムでも状況に応じて異なる処理を行いたい場合にif文を使用します。

 if文の基本構文
JavaScriptを例に、if文の基本的な書き...]]></description><link>https://zenn.dev/homatsu_tech/articles/4a333c495c3939</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/4a333c495c3939</guid><pubDate>Wed, 12 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LG3YRnKE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2591%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%2528if%25E6%2596%2587%2529%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E7%25B5%2584%25E3%2581%25BF%25E7%25AB%258B%25E3%2581%25A6%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[クロージャーとReactのuseState・useRefについて]]></title><description><![CDATA[
 1. クロージャーとは？
まず、クロージャー（Closure） とは何かを簡単に説明します。
クロージャーとは、関数が外部のスコープ（関数の外側）にある変数を保持し続ける仕組み のことを指します。JavaScriptでは、関数内で外部スコープの変数を参照すると、その関数が閉じ込めた状態で変数を保持するため、関数の外側で変数が変わっても関数の内側では古い値が使われることがあります。

 クロージャーの例

function createCounter() {
  let count = 0;
  return function () {
    count += 1;
    cons...]]></description><link>https://zenn.dev/koheiwww/articles/72a2ee94256156</link><guid isPermaLink="true">https://zenn.dev/koheiwww/articles/72a2ee94256156</guid><pubDate>Wed, 12 Mar 2025 07:57:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C5qg7wmb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%25E3%2581%25A8React%25E3%2581%25AEuseState%25E3%2583%25BBuseRef%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B7%25A5%25E5%2585%25B5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5MGFjOTAxMzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>工兵</dc:creator></item></channel></rss>