<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 03 Jun 2025 04:10:42 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Express 入門してみた]]></title><description><![CDATA[
 Express 入門してみた
※ フレームワークとライブラリの違いも分からない人間が、Expressをかじってみた試行錯誤の記録です。

 Expressとは？
ExpressはNode.jsのための高速・軽量なWebフレームワークである。
WebアプリケーションやAPIを構築するためのメソッドやプラグインが豊富※なnpmパッケージと言える。
※具体的には、以下の実装をラクにできる。

Web APIの作成
HTTPリクエストを受けるサーバーの起動 など


 フレームワークとライブラリの違い
ざっくり


フレームワーク

アプリ全体の「流れ」や「構成」が決まっているもの
コードを...]]></description><link>https://zenn.dev/micchi55555/articles/4279408658bd6b</link><guid isPermaLink="true">https://zenn.dev/micchi55555/articles/4279408658bd6b</guid><pubDate>Tue, 03 Jun 2025 02:51:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kmoT3PF---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Express%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakih5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMzkyY2E1MjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakih5</dc:creator></item><item><title><![CDATA[async で複数 Promise で wasm binary を初期化するとなんかエラーでるメモ]]></title><description><![CDATA[WASM(C++ コードを Emscripten で WASM　化し, async で遅延初期化(初期化などには時間かかる)するとなんか一応動きはするようだがエラーが出る.
    // Initialize the native WASM module
    // This is async but the load() method handles it internally with promises
    // Initialize the native WASM module
    // This is async but the load() method handle...]]></description><link>https://zenn.dev/syoyo/articles/f89e639d9b4e28</link><guid isPermaLink="true">https://zenn.dev/syoyo/articles/f89e639d9b4e28</guid><pubDate>Mon, 02 Jun 2025 22:45:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--at7yRl3Y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:async%2520%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%2520Promise%2520%25E3%2581%25A7%2520wasm%2520binary%2520%25E3%2582%2592%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%25AA%25E3%2582%2593%25E3%2581%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25A7%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:syoyo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiZTYxMTY5ZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>syoyo</dc:creator></item><item><title><![CDATA[アクセシビリティチェックをするdevツールを作成してみた。]]></title><description><![CDATA[
 はじめに
どうやらdevツールを自分で作れるらしい。。
そんな情報を聞きつけた私は、devツールを何かしら作りたい＆社内にa11y（アクセシビリティ）の浸透をさせたいという両方を満たすツールを作ろうと思い至りました。
ページ内でサイト評価をするツールはいくつかあります。
「lighthouse」に...
「axe」に...
既存であるツールを一から作るよりかは、既存のツールにプラスで自分の欲しいものを追加し、社内で使用できるものを作れば良いんじゃね？というIQが一時的に200を越えた時のお話です。

 devツールとは
Developer Toolsの略称で、ソフトウェア開発者がアプ...]]></description><link>https://zenn.dev/bltsdc/articles/ac4a95084c44c3</link><guid isPermaLink="true">https://zenn.dev/bltsdc/articles/ac4a95084c44c3</guid><pubDate>Mon, 02 Jun 2025 08:01:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gjW0hIcg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B7%25E3%2583%2593%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E3%2581%2599%25E3%2582%258Bdev%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Taiga%2520Shibata%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5NDcyMGM5YTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BLT%2520SDC%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YVJCYWVBUEhwUXVGenl4eEp1aHZoMUFNU3ZWdTlWQUQ4d0RHcUU9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Shibata</dc:creator></item><item><title><![CDATA[(執筆中) Node.jsを触ってみる]]></title><description><![CDATA[サーバーサイドでJavaScriptを実行できるNode.jsについて軽く、なんとなく理解するための本です。
友人が学びたいと言っていたので補助用に執筆。
途中ですがとりあえず公開しちゃいます]]></description><link>https://zenn.dev/r64/books/4c20c1c8198b7a</link><guid isPermaLink="true">https://zenn.dev/r64/books/4c20c1c8198b7a</guid><pubDate>Mon, 02 Jun 2025 01:06:01 GMT</pubDate><dc:creator>ruka64(るか)</dc:creator></item><item><title><![CDATA[minify の効果を最大限に引き出す TypeScript コードを書く]]></title><description><![CDATA[
 はじめに
2024年の11月に、札幌で開催された「クラメソさっぽろIT勉強会(仮) #6」という勉強会がありまして、そのライトニングトーク枠に登壇してきました。
タイトルは「minifyの効果を最大限に引き出すTypeScriptコードを書く」です。

昨今のフロントエンド開発では、TypeScriptを使ってコーディングし、それをトランスパイルしてできたJavaScriptファイルのサイズを minify によって削減するのが一般的でしょう。そうしたときに、ふと 「TypeScript の書き方を工夫したら、もっと minify が効率的に効くようになるかも?」 と思いたち、型安全...]]></description><link>https://zenn.dev/j_sakamoto/articles/1b5e1d563b1c30</link><guid isPermaLink="true">https://zenn.dev/j_sakamoto/articles/1b5e1d563b1c30</guid><pubDate>Sun, 01 Jun 2025 14:10:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RCNyUuLn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:minify%2520%25E3%2581%25AE%25E5%258A%25B9%25E6%259E%259C%25E3%2582%2592%25E6%259C%2580%25E5%25A4%25A7%25E9%2599%2590%25E3%2581%25AB%25E5%25BC%2595%25E3%2581%258D%25E5%2587%25BA%25E3%2581%2599%2520TypeScript%2520%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2540jsakamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dVX243dnJ5ZFlLb2NxdUhSUkIxSGZ4NGpVekNsdGNmZ290R2hfNWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>@jsakamoto</dc:creator></item><item><title><![CDATA[[JavaScript]同期処理/非同期処理とは （備忘録）]]></title><description><![CDATA[
 １．同期処理 とは
・処理が上から順番に実行され、次の処理は前の処理が完了するまで待ちます。そのため処理全体を把握しやすいメリットがあります。
・１つでも時間のかかる処理が存在すると、プログラム全体の処理が完了するのに時間が長くなるというデメリットがあります。

 ２．非同期処理とは
・前の処理が完了するのを待たずに、次の処理が開始されます。
・非同期処理を適切に活用できると、プログラム全体の処理速度を向上させることができます。
・各処理がどの順番で実行されるか把握するのが難しくなるというデメリットがあります。

 ３．サンプルプログラム
〇例１：同期処理

Sample_1.js
...]]></description><link>https://zenn.dev/yama_kawa/articles/e28cb1774158c2</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/e28cb1774158c2</guid><pubDate>Sun, 01 Jun 2025 12:01:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WrQv-HmH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJavaScript%255D%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%252F%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25A8%25E3%2581%25AF%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[JS演習　文字列　★1～4]]></title><description><![CDATA[こんばんは。今日は文字列の問題です。現実的な関数が多いので自信があります。正規表現もあります。じゃあ頑張ってください。

 最後の文字　★☆☆☆☆
文字列の最後を返す関数を作ってください。ふつうは関数にする程でもないです。
// コードを書いてね。
console.log(getLast('JavaScript'));// &gt; 't'
console.log(getLast('JS'));// &gt; 'S'
console.log(getLast('meow '));// &gt; ' '
console.log(getLast(''));// &gt; undefined
ヒ...]]></description><link>https://zenn.dev/javascript/articles/7d507976572578</link><guid isPermaLink="true">https://zenn.dev/javascript/articles/7d507976572578</guid><pubDate>Sun, 01 Jun 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JZwzUksc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%25E6%25BC%2594%25E7%25BF%2592%25E3%2580%2580%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2580%2580%25E2%2598%25851%25EF%25BD%259E4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25AB%2598%25E7%25B4%259A%25E3%2581%25AA%25E9%2583%25BD%25E4%25BC%259A%25E3%2583%2590%25E3%2583%2588%25E5%25A5%25BD%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmMjIwOGM5NWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>高級な都会バト好き</dc:creator></item><item><title><![CDATA[HTML id, class, タグの違い]]></title><description><![CDATA[
 背景
Pythonの次として、Javascriptの習得を目指しています。
Javascriptを調べていくと、HTMLと関連するところがあり、「そういえばタグって何だっけ？」「idって必ず1個につき一意にしないとダメなんだっけ？」とHTMLに対して思うところがあったので、見直してみました。

 まとめ
タグはHTMLの構成単位、idは1個につき1個のタグまで、classは1個につき複数個のタグにつけてOK。



種類
一意か？
複数に使える？
主な用途




id
✅ 必ず一意
❌ 単一要素のみ
特定の要素を操作（JSやCSS）


class
❌ 一意でなくてよい
✅ 何個で...]]></description><link>https://zenn.dev/micchi55555/articles/f6d4c2526b5fd9</link><guid isPermaLink="true">https://zenn.dev/micchi55555/articles/f6d4c2526b5fd9</guid><pubDate>Sun, 01 Jun 2025 10:03:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DNP9_z8f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTML%2520id%252C%2520class%252C%2520%25E3%2582%25BF%25E3%2582%25B0%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakih5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMzkyY2E1MjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakih5</dc:creator></item><item><title><![CDATA[Reactでの非同期処理の書き方]]></title><description><![CDATA[
 結論　useEffect内での非同期処理はこう書く
useEffect(() =&gt; {
  const fetchData = async () =&gt; {
    try {
      const res = await fetch('https://example.com/api/users');
      const data = await res.json();
      setUsers(data);
    } catch (err) {
      console.error('エラー:', err);
    }
  };
  fetchData()...]]></description><link>https://zenn.dev/begineer/articles/611ed73dc96e74</link><guid isPermaLink="true">https://zenn.dev/begineer/articles/611ed73dc96e74</guid><pubDate>Sun, 01 Jun 2025 09:14:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MByQT1h0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E3%2581%25AE%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUVQeWIzd2pvRDdhaVdEeXpXT3NwbVgxWE5EM2RqUFBDZ0poNHlSN1Zqb1Q2TGlRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>初心者エンジニア</dc:creator></item><item><title><![CDATA[watch() なんでアロー関数で渡すの？]]></title><description><![CDATA[
 概要
watch()はなんでアロー関数のreturnで値を渡さないとダメなんだ？
という出発点からリアクティブを掘り下げたら沼った。
Vue.jsにおけるリアクティブの仕組みとwatch()の仕組みを簡単に説明します。

 最初の疑問
watch()はなんでアロー関数のreturnで値を渡さないとダメなんだ？
なんでそんな冗長なことするんだ？

.js
watch(() =&gt; props.items, (newVal) =&gt; {
  // OK
});

watch(props.items, (newVal) =&gt; {
  // エラー
});

補足：refオブジ...]]></description><link>https://zenn.dev/rozurozu/articles/20250527_vue_getter</link><guid isPermaLink="true">https://zenn.dev/rozurozu/articles/20250527_vue_getter</guid><pubDate>Sun, 01 Jun 2025 07:30:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oq7CqQbm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:watch%2528%2529%2520%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A7%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25A7%25E6%25B8%25A1%25E3%2581%2599%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%2593%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YWQ4Y2E0NzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろんちゃん</dc:creator></item><item><title><![CDATA[ゆるい習慣と工夫で時間を削減せよ!SDET（SET)が1人DevOpsタイムでしている改善]]></title><description><![CDATA[こんにちは。ダイの大冒険エンジョイ勢のbun913と申します。
私はSDET(Software Development Engineer in Test)という職種で働いています。日本ではあまり馴染みのない職種ですが、とても簡単に説明すると、開発者の知見を活かしてテストやQAの領域に貢献するエンジニアです。
もしSDETという職種について詳しく知りたい方は、以下のURLを参照ください。求人ページに繋がるので、不快な方はスキップしてください。
https://hrmos.co/pages/moneyforward/jobs/2121455132004343828

自分やみんなの安心感を高...]]></description><link>https://zenn.dev/moneyforward/articles/e42fa03847dcd1</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/e42fa03847dcd1</guid><pubDate>Sun, 01 Jun 2025 04:24:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xufTicjw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2586%25E3%2582%258B%25E3%2581%2584%25E7%25BF%2592%25E6%2585%25A3%25E3%2581%25A8%25E5%25B7%25A5%25E5%25A4%25AB%25E3%2581%25A7%25E6%2599%2582%25E9%2596%2593%25E3%2582%2592%25E5%2589%258A%25E6%25B8%259B%25E3%2581%259B%25E3%2582%2588%2521SDET%25EF%25BC%2588SET%2529%25E3%2581%258C1%25E4%25BA%25BADevOps%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2581%25A7%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E6%2594%25B9%25E5%2596%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bun913%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNGVhMDEyMDQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bun913</dc:creator></item><item><title><![CDATA[【JavaScript】オブジェクトのプロパティへのアクセス方法]]></title><description><![CDATA[JavaScriptでオブジェクト（ここでは、key-valueを持つJSON形式のオブジェクトを指します）のプロパティにアクセスする方法について解説します。
例として扱うオブジェクトはこの形とします。
const animals = {
    shopA: [
        { type: "dog", age: 5 },
        { type: "cat", age: 3 },
        { type: "parrot", age: 2 }
    ],
    shop_b: [
        { type: "hamster", age: 1 },
     ...]]></description><link>https://zenn.dev/tkfm84/articles/8aabac94890bd2</link><guid isPermaLink="true">https://zenn.dev/tkfm84/articles/8aabac94890bd2</guid><pubDate>Sun, 01 Jun 2025 03:58:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kknty4VD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25B8%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkfm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WmkwZ3dBMExsVjlLbWFxdmRPZXlpSi1vclNjeHY5ampUNFJ4Wl9xZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tkfm</dc:creator></item><item><title><![CDATA[【初心者向け】コールバック関数・イベントループ・イベントキュー完全理解]]></title><description><![CDATA[JavaScriptでよく出てくる「コールバック関数」「イベントループ」「イベントキュー」。
単語だけは聞いたことあるけど、ちゃんと理解してる人は意外と少ないと思います。
この記事では、関数の挙動を擬人化して例えることで、曖昧な理解から脱出することを目的とします。


 🥇 コールバック関数とは？

他の関数に引数として渡され、その中であとから実行される関数のこと。



 例：擬人化で考える
まず普通の関数 hello を宣言します。
function hello() {
  console.log("やぁ！");
}
これはただの関数です。
ところが、別の関数 bye が hello...]]></description><link>https://zenn.dev/heart0018/articles/2bf128aa318004</link><guid isPermaLink="true">https://zenn.dev/heart0018/articles/2bf128aa318004</guid><pubDate>Sat, 31 May 2025 15:06:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6RxNgzF2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E9%2596%25A2%25E6%2595%25B0%25E3%2583%25BB%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25BB%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25BC%25E5%25AE%258C%25E5%2585%25A8%25E7%2590%2586%25E8%25A7%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HeartPG%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwZGNlODI4ZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HeartPG</dc:creator></item><item><title><![CDATA[JavaScriptのTextEncoderを使ってJSONのバイトサイズを調べる]]></title><description><![CDATA[AppSyncでとってきたGraphQLのレスポンスのサイズを調べたくなり、JavascriptにTextEncorderというものがあることを知ったので、備忘もかねてご紹介します！

 なぜバイトサイズを測りたくなったか
GraphQL + DynamoDB を使っていると、AppSyncやDynamoDBのレスポンスサイズ制限（1MB）に引っかかることがあります。
今回は、200件程度あるはずのデータが100件しか取れていなかったため、レスポンスのサイズを図ろうとしていました。
しかし、単に data.length とか JSON.stringify(data).length で文字...]]></description><link>https://zenn.dev/team_delta/articles/b3ae12f0f12828</link><guid isPermaLink="true">https://zenn.dev/team_delta/articles/b3ae12f0f12828</guid><pubDate>Sat, 31 May 2025 14:59:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4Jq1VSKq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AETextEncoder%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6JSON%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2588%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%258B%25E3%2581%25AA%25E3%2581%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiZjRiYjM4NGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DELTA%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4ODE0ODI2MWEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>るなこ</dc:creator></item><item><title><![CDATA[JavaScriptでABC408(A-C)]]></title><description><![CDATA[https://atcoder.jp/contests/abc408

 A - Timeout
https://atcoder.jp/contests/abc408/tasks/abc408_a
肩を叩かれた時間を(0秒含めて)並べて、隣接する肩叩きタイムがすべてS秒以下ならおｋ
入力の受け取りがA問題にしては面倒ですね、150点な理由はそれでしょうか
https://atcoder.jp/contests/abc408/submissions/66298267
2分57秒 AC!

 B - Compression
https://atcoder.jp/contests/abc408...]]></description><link>https://zenn.dev/aya_koto/articles/88fc60f27deb5a</link><guid isPermaLink="true">https://zenn.dev/aya_koto/articles/88fc60f27deb5a</guid><pubDate>Sat, 31 May 2025 13:43:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zJYsB5b4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:JavaScript%25E3%2581%25A7ABC408%2528A-C%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ayasaka-Koto%2520%252F%2520Aya...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNTRlMDBjYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ayasaka-Koto / AyagawaP</dc:creator></item><item><title><![CDATA[Node.js 入門してみた]]></title><description><![CDATA[※知識が増えたら、継ぎ足して改良していきたいと思います。

 前置き
Pythonしかわからない状態を脱するために、他言語に挑戦しようとしていました。
「あれ？Javascriptってフロントエンドの言語じゃないの？バックエンドもできるの？」と知って、Node.jsに興味を持ったため、調べてみました。

 Node.jsとは？


Javascriptの実行環境 = ブラウザ ではなく、コマンドラインでjsファイルを実行できるようにパッケージ化された環境を提供してくれるもの。以下コマンドで実行できる
node jsファイル名



ディレクトリ作成やファイル作成などの、サーバーサイドの操...]]></description><link>https://zenn.dev/micchi55555/articles/17d727c5d72a1f</link><guid isPermaLink="true">https://zenn.dev/micchi55555/articles/17d727c5d72a1f</guid><pubDate>Sat, 31 May 2025 10:10:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HAFWpIeU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakih5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMzkyY2E1MjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakih5</dc:creator></item><item><title><![CDATA[【JavaScript】Number()とparseInt()]]></title><description><![CDATA[JavaScriptで数値文字列を数値に変換したいとき、自分は基本的にはNumber()を使います。
ただこの2つの差を正確に把握出来ていないと思ったので、実際に動かしてみて2つの差異を明確にしていきます。

 引数

 数値文字列
console.log(Number('123')); // 123
console.log(parseInt('123')); // 123
これは当然同じ結果。

 数値文字列＋スペース
console.log(Number(' 123 ')); // 123
console.log(parseInt(' 123 ')); // 123
これもスペースを...]]></description><link>https://zenn.dev/tkfm84/articles/31df056dc5a6ff</link><guid isPermaLink="true">https://zenn.dev/tkfm84/articles/31df056dc5a6ff</guid><pubDate>Sat, 31 May 2025 07:04:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iVRwkSHu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591Number%2528%2529%25E3%2581%25A8parseInt%2528%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkfm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WmkwZ3dBMExsVjlLbWFxdmRPZXlpSi1vclNjeHY5ampUNFJ4Wl9xZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tkfm</dc:creator></item><item><title><![CDATA[JavaScriptの配列 filter() / map() / forEach() の違いと使い分けを解説]]></title><description><![CDATA[
 はじめに
JavaScriptで配列を操作するとき、filter()、map()、forEach() は特によく使われるメソッドです。
どれも「配列の各要素を1つずつ処理する」ことができますが、目的や戻り値がまったく違います。
最初のうちは「似ているようで何を使えばいいかわからない」と感じるかもしれません。
本記事では、それぞれの役割と使い分けのポイントを、実例付きで解説します。

 forEach()：処理するだけで、値は返さない
forEach() は、配列に入っている1つ1つの値に対して、順番に処理を行いたいときに使います。
例えば「値を表示する」「サーバーに送る」「ファイルに...]]></description><link>https://zenn.dev/fd2025/articles/9d992013b4dccd</link><guid isPermaLink="true">https://zenn.dev/fd2025/articles/9d992013b4dccd</guid><pubDate>Fri, 30 May 2025 22:34:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k6DLhslU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E9%2585%258D%25E5%2588%2597%2520filter%2528%2529%2520%252F%2520map%2528%2529%2520%252F%2520forEach%2528%2529%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fd2025%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzMzVlNTI5MmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fd2025</dc:creator></item><item><title><![CDATA[[Node.js] Node.jsをインストール（for Mac）]]></title><description><![CDATA[Node.js は、JavaScriptでサーバーサイドの開発を行うためのオープンソースのランタイム環境です。Macでは、Homebrew というパッケージマネージャを使って簡単にNode.jsをインストールできます。


 ✅ Homebrewを使用する理由
Homebrew はmacOS用のパッケージ管理ツールで、ソフトウェアのインストールや更新、アンインストールが簡単に行えます。Node.jsを含む多くの開発ツールはHomebrewでインストールするのが推奨されています。


 ① Homebrewのインストール
Homebrewがまだインストールされていない場合は、以下のコマンド...]]></description><link>https://zenn.dev/nakohama/articles/911374261e8b33</link><guid isPermaLink="true">https://zenn.dev/nakohama/articles/911374261e8b33</guid><pubDate>Fri, 30 May 2025 12:38:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JzOCdPdp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNode.js%255D%2520Node.js%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%2588for%2520Mac%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NeoTech%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhNGVkNTkzMmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NeoTech</dc:creator></item><item><title><![CDATA[自作CSSメモ・備忘録]]></title><description><![CDATA[フロントエンドの学習を進めているのですが、めちゃくちゃ難しいと感じています。
覚えることが多すぎるし、仕組みがちゃんとわかっていないままflexboxやJavaScriptを書こうとして、結局わけがわからなくなる……そんなことの繰り返しです。
自分の中で「知識がバラバラだな」と思う場面が増えてきたので、いったん頭の中を整理しつつ、体系的に学んだことを記録していく場所としてこのブログを始めることにしました。
ここには、つまずいたこと、学んだこと、理解したことをメモのように積み上げていく予定です。
「自分のための記録」ですが、同じように悩んでいる人のヒントにもなれば嬉しいです。
Flexbo...]]></description><link>https://zenn.dev/tacos/articles/625acd73eaec76</link><guid isPermaLink="true">https://zenn.dev/tacos/articles/625acd73eaec76</guid><pubDate>Fri, 30 May 2025 11:21:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--02Idp_TM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CCSS%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25BB%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2582%25B3%25E3%2582%25B9%25E3%2583%259E%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHNqWVZUSXZtQmFWX3VLeWdicy0tbDVHRG13dUpVMWd6TEtDYzJPRElNTlE5T0JBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タコスマスター</dc:creator></item></channel></rss>