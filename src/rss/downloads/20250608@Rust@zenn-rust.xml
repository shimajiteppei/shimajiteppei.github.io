<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 08 Jun 2025 05:28:09 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[プログラミング初心者、Rustをはじめる]]></title><description><![CDATA[
 はろー、Zenn

 あいさつと今の状況
こんにちは　ねこです。本日からRustを学び始めました。旦那さんから影響をうけました。
今の状態書いていきます。


機械に明るくない。ぼけーっとしている。頭はよくない。考え事をすることが好き。


発達障害、PTSD、うつ病、解離性障害、最重度線維筋痛症などなど障害持ち


プログラミング楽しそうにやってる旦那さんやニコニコ技術部を見て自分もやりたくなりました。


興味がある方向はArduino、Raspberry Pi、Rust、Python、React、C/C++、低レイヤ


旦那さんに技術日記をZennに書くことを勧められて書いて...]]></description><link>https://zenn.dev/micro5mini6/articles/e4d34ca7d27edc</link><guid isPermaLink="true">https://zenn.dev/micro5mini6/articles/e4d34ca7d27edc</guid><pubDate>Sat, 07 Jun 2025 12:28:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HWnwdxX_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2580%2581Rust%25E3%2582%2592%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:neco%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MDhhNDMzMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>neco</dc:creator></item><item><title><![CDATA[Rust で ONNX 形式の LightGBM の推論を実行する]]></title><description><![CDATA[
 はじめに
業務で Rust、ONNX、LightGBM を使って API を構築する機会がありました。
Rust で ONNX 形式の LightGBM の推論を実行する必要があったのですが、調べてもなかなか先行事例が見つからなかったので、自分なりに調べたことをここにまとめたいと思います。
LightGBM の学習は Python で行い、学習したモデルを ONNX 形式で保存し、推論は Rust で行うことを想定しています。

 実行環境
検証時の OS、言語、関連する Python ライブラリと Rust クレートのバージョンは以下の通りです。

OS: M1 Mac (Sono...]]></description><link>https://zenn.dev/potato_iidx/articles/528b3a4a4002f9</link><guid isPermaLink="true">https://zenn.dev/potato_iidx/articles/528b3a4a4002f9</guid><pubDate>Sat, 07 Jun 2025 07:14:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---owf3pk2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520ONNX%2520%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25AE%2520LightGBM%2520%25E3%2581%25AE%25E6%258E%25A8%25E8%25AB%2596%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kosei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjYTQwYTFlMmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kosei</dc:creator></item><item><title><![CDATA[PHP スクリプトを実行する Rust CLI ツールを作る]]></title><description><![CDATA[
 序文
PHP スクリプトを Rust 製の CLI ツールから実行できたら便利だと思ったことはありませんか？
本記事では、PHP に標準で用意されている埋め込み用インターフェース（embed SAPI）を使って、Rust から PHP スクリプトを実行する最小限の CLI ツールを構築してみます。C 言語で php_embed_init() を呼び出し、Rust 側からは FFI 経由でこの関数を叩く構成です。
具体的には、以下の 2 つの処理例を紹介します：

.php ファイルを実行する CLI ツール -  zend_execute_scripts()

REPL の作成 - ...]]></description><link>https://zenn.dev/masakielastic/articles/20250607-php-cli-from-rust</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250607-php-cli-from-rust</guid><pubDate>Sat, 07 Jun 2025 07:11:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--COIdqM8w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PHP%2520%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2520Rust%2520CLI%2520%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[RustのフレームワークRocketを使ってTODOアプリを構築しよう]]></title><description><![CDATA[「RustでWebアプリって難しそう…」と思っていませんか？
実は Rocket というフレームワークを使えば、RustでもサクッとWebアプリが作れちゃうんです！

この記事では、Rust・HTML・CSS・SQLiteを使って、TODOアプリを一緒に作っていきます。
PythonのFlaskやDjangoを使ったことがある人なら、似た感じで開発できるのでとっつきやすいはず。

この記事を読めば…

- Rust × Rocketでアプリを作る方法がわかる
- MVTモデルの基本がつかめる
- Repositoryパターンの実装にもチャレンジできる！

前半ではRocketの使い方を丁寧に紹介しつつ、後半では実際にアプリを作ってデプロイまで体験します。

RustでWeb開発を始めてみたい人、Rocketって何？って気になっている人、
この機会にぜひ一緒にRustに触れてみましょう！]]></description><link>https://zenn.dev/kenquichi/books/016a034ec7b464</link><guid isPermaLink="true">https://zenn.dev/kenquichi/books/016a034ec7b464</guid><pubDate>Sat, 07 Jun 2025 00:28:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7AoQIhLY--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9lYWNhYTZhZjcwLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[「型システムのしくみ」をRustで実装してみた]]></title><description><![CDATA[
 やったこと
「型システムのしくみ」という書籍をRustで実装してみました。
https://www.lambdanote.com/products/type-systems
レポジトリはこちらです。
https://github.com/okaduki/type-systems-by-rust

 やってみた理由
以前「n月刊ラムダノート Vol.4, No.3」を読んでいましたが、今回さらに発展的な内容が含まれて面白そうだったため手を動かしてみました。
書籍はTypeScriptで進める構成になっていますが、Rust の勉強もちょうどしたいと思っていたのでRust で実装することに...]]></description><link>https://zenn.dev/okaduki/articles/b519bc9876e34f</link><guid isPermaLink="true">https://zenn.dev/okaduki/articles/b519bc9876e34f</guid><pubDate>Fri, 06 Jun 2025 18:31:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kpvNbIhd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%25E3%2580%258D%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okaduki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxNGVlNDBhMmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okaduki</dc:creator></item><item><title><![CDATA[YAZI入門：Rust製の高速ターミナルファイルマネージャー]]></title><description><![CDATA[
 YAZI入門：Rust製の高速ターミナルファイルマネージャー

YAZIロゴ（出典）

 はじめに
YAZIは、Rustで書かれた高速なターミナルファイルマネージャーです。非同期I/Oをベースにした設計により、非常に高速なファイル操作が可能です。この記事では、YAZIの基本的な使い方から、実践的な活用方法まで詳しく解説します。

 YAZIとは
YAZI（「アヒル」の意味）は、Rustで書かれた非同期I/Oベースのターミナルファイルマネージャーです。従来のファイルマネージャーと比較して、以下の特徴があります：

 主な特徴

🚀 完全な非同期サポート: すべてのI/O操作が非同期で、...]]></description><link>https://zenn.dev/long910/articles/2025-06-06-yazi</link><guid isPermaLink="true">https://zenn.dev/long910/articles/2025-06-06-yazi</guid><pubDate>Fri, 06 Jun 2025 14:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F2Q83unD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:YAZI%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259ARust%25E8%25A3%25BD%25E3%2581%25AE%25E9%25AB%2598%25E9%2580%259F%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Long%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3YjMxYzM0YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Long</dc:creator></item><item><title><![CDATA[BiomeのGritQLプラグイン vs. ast-grep: JS開発者のためのAST変換ガイド]]></title><description><![CDATA[
 なぜASTツールがリンターにとって重要なのか
Zennの皆様こんにちは。ast-grepの著者、Herringtonです。
大規模プロジェクトで一貫性のある高品質なコードを維持することは、大きな課題です。最新のRustベースのLintingツールは、基本的なコーディング標準を強制する点で素晴らしいパフォーマンスを発揮しますが、開発者が高度にカスタムなプロジェクト固有のパターンや、コードベース全体にわたる自動化された大規模なリファクタリングを必要とする場合、しばしば不十分です。ここで、AST（Abstract Syntax Tree：抽象構文木）ベースのツール、特にネイティブリンターに...]]></description><link>https://zenn.dev/hd_nvim/articles/f536e4e87f5d55</link><guid isPermaLink="true">https://zenn.dev/hd_nvim/articles/f536e4e87f5d55</guid><pubDate>Fri, 06 Jun 2025 05:29:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--agZTJNfU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%25E3%2581%25AEGritQL%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%2520vs.%2520ast-grep%253A%2520JS%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEAST%25E5%25A4%2589%25E6%258F%259B%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Herrington%2520Darkholme%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZWZPY0dMdmpkYjdJT0JURTFKNXB4d3ZVcEc2SEdRZ2w3bE1LZnR0SW1hMFRxTj1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Herrington Darkholme</dc:creator></item><item><title><![CDATA[【Rust】抽象化のテクニック]]></title><description><![CDATA[!
随時更新中です。


 はじめに

cargo 1.87.0 (99624be96 2025-05-06)
edition = "2024"


 トレイト
Rustのトレイトは他言語のインタフェースと似ており、構造体に実装することで異なる型の振る舞いを共通化することができます。
trait Animal {
    fn make_sound(&amp;self) -&gt; String;
}
トレイトの実装struct Dog;

impl Animal for Dog {
    fn make_sound(&amp;self) -&gt; String {
        ...]]></description><link>https://zenn.dev/hkiku482/articles/22334ca7f22400</link><guid isPermaLink="true">https://zenn.dev/hkiku482/articles/22334ca7f22400</guid><pubDate>Wed, 04 Jun 2025 16:49:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iYQyRSDh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E6%258A%25BD%25E8%25B1%25A1%25E5%258C%2596%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hkiku482%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyODNiZDA2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hkiku482</dc:creator></item><item><title><![CDATA[Rust で PHP 拡張を書く：Debian + ext-php-rs チュートリアル]]></title><description><![CDATA[
 序文
PHP でウェブ開発をしていると、非同期処理や低レベルの通信仕様（HTTP/2やHTTP/3）について体系的に学ぶ機会は限られています。そこで注目したのが Rust の導入です。
Rust は高速で安全なシステム言語でありながら、近年では WebAssembly や FFI を通じて PHP と組み合わせた開発も現実的になってきました。
本記事では、ext-php-rs を用いて Rust 製の PHP 拡張モジュールを作成し、PHP 環境に組み込む手順を紹介します。今後、Rust 側で HTTP サーバーや非同期処理を担い、PHP をそのクライアントとして使うようなハイブリッ...]]></description><link>https://zenn.dev/masakielastic/articles/20250604-ext-php-rs</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250604-ext-php-rs</guid><pubDate>Wed, 04 Jun 2025 12:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wDUYDmQY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520PHP%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25EF%25BC%259ADebian%2520%252B%2520ext-php-rs%2520%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[ライブラリ製作者に知ってほしい、examplesの3箇条]]></title><description><![CDATA[!
2025/06/07 追記
見出しの構成を一部変更しました。
「理想的なコード数」の項目に説明を追加しました。

Rust言語のライブラリのソースコードをリポジトリで公開する際、慣例的にexamplesというディレクトリが用意されていることが多いです。
このexamplesの配下にはライブラリの使い方を示すサンプルコードが置かれており、初めてそのライブラリを触るユーザーをガイドするという重要な役割を果たしています。
この記事ではより良い例の書き方について、私が意識していることを3つ紹介します。
先に伝えたいことだけまとめると、コードは最小構成にし、ユーザーが段階を踏んで例を確認できる...]]></description><link>https://zenn.dev/elm/articles/6a9771fcab7529</link><guid isPermaLink="true">https://zenn.dev/elm/articles/6a9771fcab7529</guid><pubDate>Wed, 04 Jun 2025 03:49:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NdUrWbq8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E8%25A3%25BD%25E4%25BD%259C%25E8%2580%2585%25E3%2581%25AB%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BB%25E3%2581%2597%25E3%2581%2584%25E3%2580%2581examples%25E3%2581%25AE3%25E7%25AE%2587%25E6%259D%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:notelm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4NWNhMmQ2OTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>notelm</dc:creator></item><item><title><![CDATA[wasm-bindgen: Javascriptから呼び出せるRust関数を作ろう]]></title><description><![CDATA[
 wasm-bindgen: Javascriptから呼び出せるRust関数を作ろう

 はじめに
Rustは高速な実行速度を持つプログラミング言語であり、WebAssembly（Wasm）を使うことで、ブラウザ上でもそのパフォーマンスを活かすことができる。具体的には、時系列データの統計処理などを高速に行うことが可能である。
wasm-bindgenは、Rustで書いた関数をJavaScriptから呼び出せるようにするためのツールである。今回は文字列を返す関数をRustで書き、それをReactアプリケーションから呼び出す方法を紹介する。
なお、RustとReactについての基本的な知識...]]></description><link>https://zenn.dev/emoba_tech/articles/f225f007dde195</link><guid isPermaLink="true">https://zenn.dev/emoba_tech/articles/f225f007dde195</guid><pubDate>Tue, 03 Jun 2025 08:56:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--A_aJ6QU6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:wasm-bindgen%253A%2520Javascript%25E3%2581%258B%25E3%2582%2589%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%259B%25E3%2582%258BRust%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:k22036%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmNTk5ZjM4YjcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Emoba%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzh4UXU2YWV5OElrWS1ma1ZPLUxYMkc5TFBKMU9CMEhfY25MMVNlNTNQSkpDZnpKd1E9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k22036</dc:creator></item><item><title><![CDATA[Rustでcut/awk/grepを再設計：拡張版cutコマンド「xcut」を作った話]]></title><description><![CDATA[
 ✨ はじめに
Unix系のコマンド cut や awk、grep は便利ですが、以下のような悩みはありませんか？

条件付きの列抽出が面倒
正規表現と列指定を組み合わせづらい
PowerShellやWindows環境での互換性に乏しい

そこで今回、RustでCLIツール「xcut」を自作しました。


 🧰 xcutとは
「xcut」は、ログファイルやCSVなどのテキスト処理に特化した、Rust製の軽量＆高速なcut系ツールです。
xcut --input access.log --filter 'col(3) == "INFO"' --cols 1,4
cut/awk/grepの...]]></description><link>https://zenn.dev/kyonaka/articles/52f459cb0029f3</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/52f459cb0029f3</guid><pubDate>Tue, 03 Jun 2025 00:32:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--n21th-fX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7cut%252Fawk%252Fgrep%25E3%2582%2592%25E5%2586%258D%25E8%25A8%25AD%25E8%25A8%2588%25EF%25BC%259A%25E6%258B%25A1%25E5%25BC%25B5%25E7%2589%2588cut%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2580%258Cxcut%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2MTZhOWZhNzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[WindowsでTauriによるデスクトップアプリ開発環境の構築手順｜メモ]]></title><description><![CDATA[
 Windows環境でTauriによるデスクトップアプリ開発環境の構築手順
これは、Rust + Tauri（＋ReactなどのWeb UI）でデスクトップアプリを開発する際の Windows環境構築手順をまとめたメモです。自分用のチャットでメモしていた内容ですが、他の人にも共有できるように、ここにまとめておきます。

⚠ 注意：このドキュメントは個人用メモをもとに作成しています。
手順の一部が簡略化されていたり、記述に誤りが含まれている可能性があります。
参考にする際は、公式ドキュメントも合わせて確認することをおすすめします。
導入はこのページの番号順に行うことをおすすめします。

...]]></description><link>https://zenn.dev/gratien583/articles/f216937c67736f</link><guid isPermaLink="true">https://zenn.dev/gratien583/articles/f216937c67736f</guid><pubDate>Mon, 02 Jun 2025 14:17:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YmQzV-BI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Windows%25E3%2581%25A7Tauri%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%25E6%2589%258B%25E9%25A0%2586%25EF%25BD%259C%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Gratien583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5MmM2ZjY3YzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Gratien583</dc:creator></item><item><title><![CDATA[Rust製Vite組み込みビルドツールRolldownを試す]]></title><description><![CDATA[
 Rollupの反対でRolldownなのか？
仕事でフロントエンドを扱うとき、
ビルドツールにviteを使う機会は非常に多い
viteはvuejsのビルドツールと思われがちだが、
どの構成でもプラグインでビルドできるうえ、
esbuildベースなので速度も速い
ただ、フロントの規模が大きくなっていくと、
esbuildのGo実装に限界が見えてくる
現状仕事ではビルドに１０～３０秒かかるので微妙にストレスだ
そこでviteに組み込む方向でRustベースのrollupを開発されていたものを試してみた
それが rolldown
そして一年ぐらい経ってそれがviteに組み込まれる動きになった...]]></description><link>https://zenn.dev/dozo/articles/84985b0e64b0a6</link><guid isPermaLink="true">https://zenn.dev/dozo/articles/84985b0e64b0a6</guid><pubDate>Mon, 02 Jun 2025 00:41:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k1_jZGoB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BDVite%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25ABRolldown%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dozo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dozo</dc:creator></item><item><title><![CDATA[BevyでもVRMとVRMAを使いたい！]]></title><description><![CDATA[
少しデスクトップマスコット感が増しました
現在Bevyを使ってデスクトップマスコットを製作しており、VRMとVRMAを使う必要が出てきました。
ただ、公式では対応しておらず、Bevyの最新バージョン（v0.16）に対応しているクレートが無さそうだったので勉強がてら自作してみました！
bevy_vrm1というクレート名で公開しているため良かったら試してみて下さい。
ちなみにVRM1.0のみ対応しています。
https://github.com/not-elm/bevy_vrm1
この記事では実装において大変だったことなどを紹介していきます。
ちなみに、スクラップでも進捗を綴ってます。
h...]]></description><link>https://zenn.dev/elm/articles/7bca06581677c4</link><guid isPermaLink="true">https://zenn.dev/elm/articles/7bca06581677c4</guid><pubDate>Sun, 01 Jun 2025 17:16:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MBHXr6A2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Bevy%25E3%2581%25A7%25E3%2582%2582VRM%25E3%2581%25A8VRMA%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:notelm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4NWNhMmQ2OTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>notelm</dc:creator></item><item><title><![CDATA[Rust で型安全な Builder Pattern を実現！コンパイラはバグを淘汰する]]></title><description><![CDATA[
 はじめに
Rustで開発していると「もっと安全にBuilderパターンを使いたい」と思ったことはありませんか？従来のBuilderパターンは必須フィールドの設定忘れがエラーとして発覚してしまい、「せっかくRustを使っているのに...🥺」という気持ちになってしまいます。
そこで今回は、ラクラク！ 超安全性！ に Builder を実装できる素晴らしいライブラリ typesafe_builder をご紹介します！

 誰のための記事か？(for whom)

Builderパターンをもっと安全に使いたい人
コンパイル時に制約を検証したい人
Rustの型システムの力を活用したい人
ランタ...]]></description><link>https://zenn.dev/tomoikey/articles/8a6ba50be3eccb</link><guid isPermaLink="true">https://zenn.dev/tomoikey/articles/8a6ba50be3eccb</guid><pubDate>Sun, 01 Jun 2025 12:43:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ktunriys--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%2520Builder%2520Pattern%2520%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25EF%25BC%2581%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25A9%25E3%2581%25AF%25E3%2583%2590%25E3%2582%25B0%25E3%2582%2592%25E6%25B7%2598%25E6%25B1%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomoikey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlZTJjNDgxYzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomoikey</dc:creator></item><item><title><![CDATA[土日にAmazon Q CLIでシューティングゲームを作ってみた]]></title><description><![CDATA[
 はじめに
先日、AWSから「Amazon Q CLI でゲームを作ろう Tシャツキャンペーン」が発表されました。
Tシャツがもらえるのと内容が面白そうだったので、Amazon Q CLIを使って簡単なゲーム開発に取り組んでみました。

 イベント

キャンペーン：Amazon Q CLI でゲームを作ろう Tシャツキャンペーン

以下のステップがキャンペーンページに記載されてました。
1: Amazon Q CLI を使ってゲームを作ろう
2: あなたが何をどのように作ったかについてブログを書くか、あなたの体験についての動画を録画して、ソーシャルメディアに投稿しよう
3: Amazo...]]></description><link>https://zenn.dev/enumura/articles/a06e9d49c89e22</link><guid isPermaLink="true">https://zenn.dev/enumura/articles/a06e9d49c89e22</guid><pubDate>Sun, 01 Jun 2025 11:49:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d5KGzOCS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259C%259F%25E6%2597%25A5%25E3%2581%25ABAmazon%2520Q%2520CLI%25E3%2581%25A7%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:enumura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2Y2NlMmZjN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enumura</dc:creator></item><item><title><![CDATA[Rust の借用規則はなぜ必要？]]></title><description><![CDATA[
 はじめに
Rust には借用規則というものが存在しますが、これがなかなか厳しい制限です。
ガベージコレクション(GC)のある言語ではほとんど意識する必要がない概念である一方で、Rust では明示的に扱うことになります。
借用にはもれなくライフタイムがついて回り、これらが Rust を難しく感じる一因となっているのは間違いないでしょう。何気なくメソッドを呼び出そうとしたらコンパイルエラーになった、というのは多くの方が経験したことがあるのではないでしょうか。
この記事では借用規則についてちょっとだけ深く掘り下げてみたいと思います。
といってもコンパイラの実装を確認するとか大層なことはしな...]]></description><link>https://zenn.dev/mist/articles/dd51f43b05bbf9</link><guid isPermaLink="true">https://zenn.dev/mist/articles/dd51f43b05bbf9</guid><pubDate>Sun, 01 Jun 2025 11:11:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9zIuwCFj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E5%2580%259F%25E7%2594%25A8%25E8%25A6%258F%25E5%2589%2587%25E3%2581%25AF%25E3%2581%25AA%25E3%2581%259C%25E5%25BF%2585%25E8%25A6%2581%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mist%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JmMzUzZmQ4NGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mist</dc:creator></item><item><title><![CDATA[ABC408: Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 408のA-E問題をRustで解いた際の解法をまとめました。

 A 問題
問題
https://atcoder.jp/contests/abc408/tasks/abc408_a
解説
この問題は、 S 秒間反応がなかった場合に寝てしまう人について、入力された時刻列 T の最後まで一度も寝ることなく起きていたかどうかを判定する問題です。
具体的には、最初に cur = 0 (起点の時刻) とし、次に肩をたたく時刻 t_i と前回肩をたたいた時刻 cur の差を計算し、その差が S を超えていないかを順番に確認します。時刻の差が S を超...]]></description><link>https://zenn.dev/nakst_hide/articles/529c0a20c6b91a</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/529c0a20c6b91a</guid><pubDate>Sun, 01 Jun 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TbH1rlQN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC408%253A%2520Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[TRPGシナリオ作成を変えたMCPサーバー開発記]]></title><description><![CDATA[
 何したの？
MCPの勉強がてら、ローカルのテキストファイルを、キーワードで全文検索して、どのファイルにどんな情報があるか参照できるMCPサーバーを開発しました。
https://github.com/foo-543674/fs-text-search-mcp

 ソード・ワールド2.5 GMの悩み
私は身内でTRPG（テーブルトークRPG）、特にソード・ワールド2.5というファンタジー系TRPGを遊ぶことが多く、その一環でGM（ゲームマスター）もやることもあります。ソード・ワールド2.5は公式シナリオも多いのですが、数を遊ぶとなるとシナリオを作る必要があるので、シナリオ作成も行ってい...]]></description><link>https://zenn.dev/foo_543674/articles/f8037472b7c4da</link><guid isPermaLink="true">https://zenn.dev/foo_543674/articles/f8037472b7c4da</guid><pubDate>Sat, 31 May 2025 15:55:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vFX5aDv4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TRPG%25E3%2582%25B7%25E3%2583%258A%25E3%2583%25AA%25E3%2582%25AA%25E4%25BD%259C%25E6%2588%2590%25E3%2582%2592%25E5%25A4%2589%25E3%2581%2588%25E3%2581%259FMCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E9%2596%258B%25E7%2599%25BA%25E8%25A8%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc4YmY4Nzk4ZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふー</dc:creator></item></channel></rss>