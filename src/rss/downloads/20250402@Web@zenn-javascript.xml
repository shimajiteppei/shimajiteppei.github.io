<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 02 Apr 2025 01:52:26 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【チートシート】JavaScriptのforループ難しすぎ！？まとめてみた]]></title><description><![CDATA[
 はじめに
JavaScript, TypeScriptにはループを実現する方法がいくつもあり、ユースケースによって最適なものが異なります。
今では理解できるようになりましたが、初心者の頃はループの書き方が多すぎてどれを使っていいのかわからず、適切でない使用方法をしていたことがありました。
forループの種類を誰かに説明するにはあまりにパターンが多く、まとまっている記事も見当たらなかったため、この記事でまとめます。
ぜひチートシートとしてご活用ください！
!
簡単のため配列という言葉を使っていますが、SetなどのIterableなオブジェクトでも同様の処理ができます。
サンプルコードは...]]></description><link>https://zenn.dev/bmth/articles/for-loop-is-difficult</link><guid isPermaLink="true">https://zenn.dev/bmth/articles/for-loop-is-difficult</guid><pubDate>Tue, 01 Apr 2025 14:59:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--leV7s1EV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%25E3%2580%2591JavaScript%25E3%2581%25AEfor%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E9%259B%25A3%25E3%2581%2597%25E3%2581%2599%25E3%2581%258E%25EF%25BC%2581%25EF%25BC%259F%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2598%25E3%2582%2587%25E3%2581%2586%25E3%2581%2592%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzZTk3NzVhNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>じょうげん</dc:creator></item><item><title><![CDATA[開発を円滑に進めるために大切なこと：タスクのチケット化]]></title><description><![CDATA[プロジェクトを円滑に進めるうえで、私がとても重要だと感じているのは、すべてのタスク（課題）を必ずチケット化することです。どんなに軽微なトピックであっても、チケットを切ることで情報の見える化と整理が進み、結果的にプロジェクト全体の精度とスピードが上がります。

 なぜチケット化が重要なのか？

 1. 情報の漏れや伝達ミスを防げる
関係者が10人ほどのプロジェクトになると、日々多くの課題やトピックが発生します。さらに請負型の開発では、クライアントからのちょっとした追加要望なども頻繁に発生します。
このような小さなやり取りをそのまま放置すると、聞き取りミスや伝達漏れにつながり、あとで指摘を受...]]></description><link>https://zenn.dev/juth/articles/task-tracking-rules</link><guid isPermaLink="true">https://zenn.dev/juth/articles/task-tracking-rules</guid><pubDate>Tue, 01 Apr 2025 10:49:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wPdtmKyy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%258B%25E7%2599%25BA%25E3%2582%2592%25E5%2586%2586%25E6%25BB%2591%25E3%2581%25AB%25E9%2580%25B2%25E3%2582%2581%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E5%25A4%25A7%25E5%2588%2587%25E3%2581%25AA%25E3%2581%2593%25E3%2581%25A8%25EF%25BC%259A%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E3%2581%25AE%25E3%2583%2581%25E3%2582%25B1%25E3%2583%2583%25E3%2583%2588%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:juth%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvai5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>juth</dc:creator></item><item><title><![CDATA[Node.jsのイベントループについて調べてみた]]></title><description><![CDATA[
 はじめに
私自身Node.js上でのアプリケーションの開発運用を2年間行ってきましたが、高レベルのライブラリのおかげで原理を詳しく理解せずにそれなりにやれていましたが、何かトラブルがあったときに解決できるようにするため改めてNode.jsのイベントループについて勉強しようと思いました。
勉強がてらに本記事を書いてみたので、間違いがあればご指摘していただけますと幸いです。

 イベントループとは
イベントループとは、監視すべきイベントがある限りwhileループを回す仕組みです。

timeout.js
setTimeout(function() {
  console.log('Tim...]]></description><link>https://zenn.dev/ttaka66/articles/b2dac7d8aa96ce</link><guid isPermaLink="true">https://zenn.dev/ttaka66/articles/b2dac7d8aa96ce</guid><pubDate>Tue, 01 Apr 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dzuQq66i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ttaka66%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzZmYyYmJkZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ttaka66</dc:creator></item><item><title><![CDATA[[Javascript] IteratorによるforEachは一部未サポート]]></title><description><![CDATA[
 背景
とある案件で一部ブラウザではサポートされていないメソッドを使用していたことによって、実装した機能のリリース後に未サポートのブラウザを使用している一部のユーザーでエラーが発生してしまうことがありました。
このような例は度々あることかと思いますが、今回はIteratorによるforEachを使用したことで発生した際の記事になります。

 forEachの種類
まず前提として、forEachメソッドにはいくつか種類が存在します。
今回取り扱うのは使われることが多そうな「Array」「Map」「Iterator」に対して使用するforEachになります。
他にも種類はあるので、気になる...]]></description><link>https://zenn.dev/1stscratch/articles/ddbc5978aa787d</link><guid isPermaLink="true">https://zenn.dev/1stscratch/articles/ddbc5978aa787d</guid><pubDate>Tue, 01 Apr 2025 01:58:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YoYlfh7s--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJavascript%255D%2520Iterator%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BforEach%25E3%2581%25AF%25E4%25B8%2580%25E9%2583%25A8%25E6%259C%25AA%25E3%2582%25B5%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:g.sato%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4MDQ1NTg2ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2581Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEFlNGNBZWdLN0lUeEJ5d3ZidG5PN3ZwSUlPOFhCM21aeElSZHQxNWt1dFZlUTVnPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>g.sato</dc:creator></item><item><title><![CDATA[form内でbuttonのonclickで処理しつつ、バリデーションも効かせる方法]]></title><description><![CDATA[
 formタグの中に複数のボタンがある場合
JavaScriptでAPIを叩き、HTTP通信をしたい場面では、次のような構造になることがあります：
&lt;form&gt;
  &lt;input type="text" required /&gt;
  &lt;button&gt;下書き保存&lt;/button&gt;
  &lt;button&gt;公開&lt;/button&gt;
&lt;/form&gt;
このとき、実現したいことは主に以下の3点です：

フォームのデフォルト挙動（ページ更新）を防ぐ（event.preventDefault()）
ブラウザのバリデーション（...]]></description><link>https://zenn.dev/juth/articles/form-submit-button-validation</link><guid isPermaLink="true">https://zenn.dev/juth/articles/form-submit-button-validation</guid><pubDate>Mon, 31 Mar 2025 14:46:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X_Tr9Ptr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:form%25E5%2586%2585%25E3%2581%25A7button%25E3%2581%25AEonclick%25E3%2581%25A7%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2597%25E3%2581%25A4%25E3%2581%25A4%25E3%2580%2581%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2582%25E5%258A%25B9%25E3%2581%258B%25E3%2581%259B%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:juth%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvai5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>juth</dc:creator></item><item><title><![CDATA[バニラJSで作る！初心者向けTODOアプリ教材]]></title><description><![CDATA[
 はじめに
JavaScriptを学び始めたとき、まずつまずくのが「DOM操作」や「イベント処理」。
ReactやVueを使う前に、JavaScriptの基本をしっかり理解しておくことはとても大切です。
この記事では、バニラJS（フレームワークを使わない素のJavaScript）だけでTODOアプリを作りながら、次のような内容を丁寧に解説します。

DOMの基本操作
イベントリスナーの使い方
配列の操作（push / filter など）
よくあるつまずきポイントとその解消法

まずは「手で書いて、動かして、理解する」ことから始めましょう！


 ステップ1：HTMLの準備
&lt;i...]]></description><link>https://zenn.dev/homatsu_tech/articles/1daae855648dc4</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/1daae855648dc4</guid><pubDate>Mon, 31 Mar 2025 12:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Zxt4WrbU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%258B%25E3%2583%25A9JS%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25EF%25BC%2581%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591TODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E6%2595%2599%25E6%259D%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[60MBの静的なJSONにフロントエンドのみで立ち向かったお話]]></title><description><![CDATA[
 ある日起きた困った出来事
はい、こんにちは。安立です。
先日、静的に保持していた約5MBのJSONファイルが、更新が入り10倍以上の60MBになって困ってしまうと言う出来事が起きました。
どうにかこうにか、フロントエンド（JavaScript）のみで立ち向かった・・・そんな経験を書いていきます。

 前提

Vue.jsで作っています。
JSON読み込んでオブジェクトに格納するところまでとなります。実際にはその後も色々やっているのですが、細かすぎる話になるので省きます。
この記事では具体的なコードは書いていないです。こうやったら改善されたよという手順のみです。gzipのJavaScr...]]></description><link>https://zenn.dev/sonicmoov/articles/e58e7f67456d99</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/e58e7f67456d99</guid><pubDate>Mon, 31 Mar 2025 10:01:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nTYF7AQm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:60MB%25E3%2581%25AE%25E9%259D%2599%25E7%259A%2584%25E3%2581%25AAJSON%25E3%2581%25AB%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E3%2581%25BF%25E3%2581%25A7%25E7%25AB%258B%25E3%2581%25A1%25E5%2590%2591%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%258A%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25AE%2589%25E7%25AB%258B%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5OTlmM2U4MGIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>安立</dc:creator></item><item><title><![CDATA[フロント初心者がReact開発をするまでの学び]]></title><description><![CDATA[
 前書き
フロント開発の楽しさに目覚めつつあるAIエンジニアです。
レスポンスの重要性に気付かされることが多いです。
精度そこそこでなるはやのAIシステムを作れる人を目指していきたいと思います。
今回はフロント初心者がReactで開発するまでの学びを残していきます。
Reactの勉強の仕方として公式のチュートリアルが良いということを聞き、突撃しましたが
なるほど、わからん
状態だったため、基本的な知識がないとスムーズに理解できないだろうといった所感です。
私が読んだ本にはそもそもJavaScriptを知らないとReactの理解は厳しいと書いてありました。
Reactチュートリアル挫折経...]]></description><link>https://zenn.dev/goals_techblog/articles/1c07186b2bd28d</link><guid isPermaLink="true">https://zenn.dev/goals_techblog/articles/1c07186b2bd28d</guid><pubDate>Mon, 31 Mar 2025 09:25:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bg8oYDEN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258CReact%25E9%2596%258B%25E7%2599%25BA%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%25AE%25E5%25AD%25A6%25E3%2581%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Kei%2520TAKAHATA%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0ZmMzNjliMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Goals%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RiNjg4MDE4MTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kei TAKAHATA</dc:creator></item><item><title><![CDATA[実務におけるWebアクセシビリティ対応の実践]]></title><description><![CDATA[実務でWebアクセシビリティ対応を行うにあたり収集した情報、及び実践した対応のまとめです。]]></description><link>https://zenn.dev/cksgrapes/books/web-a11y-practices</link><guid isPermaLink="true">https://zenn.dev/cksgrapes/books/web-a11y-practices</guid><pubDate>Mon, 31 Mar 2025 05:11:53 GMT</pubDate><dc:creator>Simy</dc:creator></item><item><title><![CDATA[Railsでも手軽にリアルタイムバリデーションしたい]]></title><description><![CDATA[
 簡単なまとめ

HTMLの標準バリデーションでも見た目や文言は変更できるので、工夫で使える余地はありそう。
もっとRailsのView層とHTMLを密結合にするなら、バリデーションは定義した方が、Formに対してのバリデーションが楽になりそう。
結局のところRailsのバリデーションは強いこだわりがなければサボらない方が良い。


 発端
前回の記事では、主にRailsでのバックエンドバリデーションについて触れた。
https://zenn.dev/osiro/articles/4327f6978a67bb
DHHはHTMLのバリデーションが優秀なことを理由の一つとして、Railsで...]]></description><link>https://zenn.dev/osiro/articles/09e4eedecb467d</link><guid isPermaLink="true">https://zenn.dev/osiro/articles/09e4eedecb467d</guid><pubDate>Mon, 31 Mar 2025 01:04:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DiRfp9OP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rails%25E3%2581%25A7%25E3%2582%2582%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:webuilder240%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxNWM3OGQwOWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:OSIRO%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5OWUzODgyNWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>webuilder240</dc:creator></item><item><title><![CDATA[工数入力を促すための挑戦]]></title><description><![CDATA[
 はじめに
株式会社イノベーションで事務担当してますichiです。
普段は事務員として、請求書処理や工数集計などを担当しています。
今回は私が日々の業務で直面した「工数入力」に関する課題と、その解決のために奮闘した道のりについてお話しします。
!
この記事は、以下のスライドの内容をまとめたものになります。



 1. 業務課題といざプログラミングの世界へ！

 私の仕事と悩み
さて、私の業務の1つに、エンジニアの皆様の工数を月次確定前に集計するというものがあります。
この業務をスムーズに進めるためには、エンジニアの方々に毎日TeamSpirit(弊社で使用している勤怠管理システムです...]]></description><link>https://zenn.dev/innovation/articles/a3ca69ce30e5bd</link><guid isPermaLink="true">https://zenn.dev/innovation/articles/a3ca69ce30e5bd</guid><pubDate>Mon, 31 Mar 2025 01:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cBc7C4ep--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25B7%25A5%25E6%2595%25B0%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E4%25BF%2583%25E3%2581%2599%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E6%258C%2591%25E6%2588%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ichi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyOTAzNWRlMDguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A4%25E3%2583%258E%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA2ZWM5NTBiOGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ichi</dc:creator></item><item><title><![CDATA[Google Apps Script: GASでスクレイピング]]></title><description><![CDATA[
 まとめ

スクレイピングの問題点やリスクを十分に認識し、利用する場面や実装内容を検討する必要がある
HTTPリクエストの送信には、UrlFetchAppクラスを用いる
HTTPレスポンスの解釈には、正規表現を用いるのが手
複雑な要件では、HTTPヘッダーの処理が必要



私たちOrchestra Canvas Tokyoは、都内を中心に活動するアマチュア・オーケストラです。
次回は2025年7月にシューマンの交響曲第2番。
初めての方も、そうでない方も、お気軽にお越しください！
詳しくはチケット販売ページまで。




 背景
当団（Orchestra Canvas Tokyo）で...]]></description><link>https://zenn.dev/orch_canvas/articles/gas-scraping</link><guid isPermaLink="true">https://zenn.dev/orch_canvas/articles/gas-scraping</guid><pubDate>Sun, 30 Mar 2025 21:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZKUByChH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%2520Apps%2520Script%253A%2520GAS%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2594%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2593%25E3%2581%25A3%25E3%2581%2593%25E3%2581%2595%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlOWNmY2FkZDguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:OCT%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlmZDA3ZTJhYTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こっこさん</dc:creator></item><item><title><![CDATA[RCC と RSC の違いを理解したい]]></title><description><![CDATA[
 はじめに
React に Server Component が導入されたけど、このタイミングでフロントエンドに参入したので何がすごいのかも理解せずに使っていました...
フロントエンドのアプリを1つ作ってみて、何となく React がわかってきたところで、気になってたこの件を調べてみます！

 React Client Component (RCC) とは？
React Client Component（RCC）は、これまでの React で一般的に使われてきたコンポーネントの形態です。クライアント（ブラウザ）上で JavaScript によって実行され、動的な UI を実現するため...]]></description><link>https://zenn.dev/kuairen/articles/1027a1f67c7e48</link><guid isPermaLink="true">https://zenn.dev/kuairen/articles/1027a1f67c7e48</guid><pubDate>Sun, 30 Mar 2025 09:50:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R-SEOiSI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RCC%2520%25E3%2581%25A8%2520RSC%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kuairen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5YmU5YjI0YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kuairen</dc:creator></item><item><title><![CDATA[mono-event: TypeScript / JavaScriptのイベント処理をシンプルで安全にする]]></title><description><![CDATA[こんにちは！ 普段お仕事でWeb開発をしてるみいぬです。最近、長らく「こんなのがあったらな…」と温めていたイベント管理ライブラリ mono-event を作ってみました。
最近のフロントエンド界隈の話題はReactなどのフレームワーク中心だと思いますので、イベント管理ライブラリはちょっと地味ではありますが... でも、ゲーム開発やライブラリ開発、バックエンド、ツール開発なんかで少し複雑なことをしようとすると、しっかりしたイベント管理の仕組みが途端に欲しくなることも多々。同様のライブラリを作って運用してみてを積み重ねて、十分に枯れてきた内容でもあったので、改めて書き直してみました。
私自身...]]></description><link>https://zenn.dev/yukimi_inu/articles/5f9828920674fc</link><guid isPermaLink="true">https://zenn.dev/yukimi_inu/articles/5f9828920674fc</guid><pubDate>Sun, 30 Mar 2025 05:32:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pyBEwFsI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:mono-event%253A%2520TypeScript%2520%252F%2520JavaScript%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25A7%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2581%2584%25E3%2581%25AC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMzg0OGNlOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みいぬ</dc:creator></item><item><title><![CDATA[【GAS】Required permissionsのポップアップを誤って閉じた時の対処法]]></title><description><![CDATA[この記事では、Required permissionsのポップアップを誤って閉じた時の対処法について書いていきたいと思います。

 エラー内容
https://zenn.dev/atomic/articles/831195249869ff
上記サイトでの権限の承認で紹介されている、スクリプト実行時に表示される権限承認のポップアップを誤ってキャンセルしてしまうと、再度ポップアップが表示されなくなりました。

 対処法
appscript.json に別の OAuthScopes の値を追加しました。
すると、新たに追加した権限要求だけでなく、キャンセルしていた権限も同時に承認できるようにな...]]></description><link>https://zenn.dev/sunagaku/articles/dce76cfbed0086</link><guid isPermaLink="true">https://zenn.dev/sunagaku/articles/dce76cfbed0086</guid><pubDate>Sun, 30 Mar 2025 00:46:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LIcXgDCd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590GAS%25E3%2580%2591Required%2520permissions%25E3%2581%25AE%25E3%2583%259D%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E8%25AA%25A4%25E3%2581%25A3%25E3%2581%25A6%25E9%2596%2589%25E3%2581%2598%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2583%258A%25E3%2582%25AC%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHZYcmhxQi1Sb0FXNDlxcklpX0ZNcC1xbHFaTXV4bmR5am5LNkpoRWlQMkVjQXlRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スナガク</dc:creator></item><item><title><![CDATA[Google検索結果をj/kキーでfocus移動]]></title><description><![CDATA[
以下のユーザースクリプトを使用すると、j/kキーでfocusを移動させることができます。
TampermonkeyやGreasemonkeyなどの拡張機能で動作します。


jキーを押すと次の検索結果に移動

kキーを押すと前の検索結果に移動



 インストール方法
このスクリプトを使用するには:

ブラウザにTampermonkeyやGreasemonkeyなどの拡張機能をインストール
新しいスクリプトを作成し、上記のコードを貼り付け
スクリプトを保存して有効化
Googleで検索

元記事:
https://www.satoslabo.com/blog/google-search...]]></description><link>https://zenn.dev/stucci/articles/google-search-jk</link><guid isPermaLink="true">https://zenn.dev/stucci/articles/google-search-jk</guid><pubDate>Sun, 30 Mar 2025 00:24:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k3IWp67p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%25E6%25A4%259C%25E7%25B4%25A2%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592j%252Fk%25E3%2582%25AD%25E3%2583%25BC%25E3%2581%25A7focus%25E7%25A7%25BB%25E5%258B%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:stucci%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwNzY5ZDE2YWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>stucci</dc:creator></item><item><title><![CDATA[フロントエンドのスタイリング手法の全体像]]></title><description><![CDATA[
 フロントエンド開発におけるスタイリング手法の全体像
フロントエンド開発において、スタイリングは見た目だけでなくメンテナンス性、パフォーマンス、開発体験にも大きく影響します。この記事では、フロントエンド開発で使われる主要なスタイリング手法の全体像をまとめ、それぞれの特徴や適したユースケースを紹介します。

 1. グローバル CSS (従来の CSS/プリプロセッサー)
最も基本的で古典的なアプローチ。

 純粋な CSS
/* styles.css */
.button {
  background-color: blue;
  color: white;
  padding: 10...]]></description><link>https://zenn.dev/ka_projects/articles/6d65b8221bb9e1</link><guid isPermaLink="true">https://zenn.dev/ka_projects/articles/6d65b8221bb9e1</guid><pubDate>Sun, 30 Mar 2025 00:08:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--p8PyHwQj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E6%2589%258B%25E6%25B3%2595%25E3%2581%25AE%25E5%2585%25A8%25E4%25BD%2593%25E5%2583%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:luck%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3MzNhNDk3OTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:KA%2520projects%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWZWX29pQVNoRWZKTVpVV1NuOVh2c1MyOU11b1pEU3dodEVfQkFNR0FWbjBPUkwxYjc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>luck</dc:creator></item><item><title><![CDATA[【JavaScript】JSDocで@ts-checkを使うときの@templateにデフォルト型を指定する【TypeScript】]]></title><description><![CDATA[なぜかTypeScript公式のJSDocリファレンスに書かれておらず、「jsdoc ts-check template default」で検索しても出てこなかったので、一応メモを残しておく。
@templateのデフォルト型を指定するには@template [TypeArgName=DefaultType]と書く。
例えば以下のTypeScriptコード相当のts-checkを書くには
type Identity&lt;T = number&gt; = T
const foo: Identity = 10
以下のように書く。
/**
 * @template [T=number]
 *...]]></description><link>https://zenn.dev/aiya000/articles/4930cfd3a50e22</link><guid isPermaLink="true">https://zenn.dev/aiya000/articles/4930cfd3a50e22</guid><pubDate>Sat, 29 Mar 2025 17:53:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MTZUPgYG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591JSDoc%25E3%2581%25A7%2540ts-check%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%2540template%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E5%259E%258B%25E3%2582%2592%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590Ty...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%2584%25E3%2582%2584%2520-%2520aiya000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pZVUM0QXdxcVdtMVZmVWtiQXFzdE5ra1BFZU1FOUN0NFY1UzdiPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あいや - aiya000</dc:creator></item><item><title><![CDATA[useMemoに非同期処理を書いてはいけない理由]]></title><description><![CDATA[恥ずかしながら最近知ったので、備忘録としてまとめておきます...

 発端
例えば以下のようなコードを書いたとします。
const fetchData = () =&gt; {
  return new Promise((resolve) =&gt; {
    setTimeout(() =&gt; {
      console.log("非同期処理が完了しました");
      resolve("非同期データ");
    }, 1000);
  });
};

const result = useMemo(() =&gt; {
  fetchData().then(() =&g...]]></description><link>https://zenn.dev/muship/articles/cd4a54ba574f96</link><guid isPermaLink="true">https://zenn.dev/muship/articles/cd4a54ba574f96</guid><pubDate>Sat, 29 Mar 2025 14:55:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9UquJucc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useMemo%25E3%2581%25AB%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E7%2590%2586%25E7%2594%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:muship%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYjM0YjgzZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>muship</dc:creator></item><item><title><![CDATA[JavaScriptの実行メカニズムをまとめる]]></title><description><![CDATA[JavaScriptの非同期処理を調べていると、度々イベントループという用語を目にします。なんとなく概要は知っていても、具体的に何が行われているのかといった仕組みを詳細に理解しているとは言い切れませんでした。そもそもJavaScriptがどのように実行されているかがあやふやです。
気になって調べていると、イベントループとプロミスチェーンで学ぶJavaScriptの非同期処理という記事を見つけました。この記事は非同期処理を理解するために最初にイベントループを学びます。その部分ではイベントループだけではなく、それ以外のJavaScriptの実行環境や実行のメカニズムなども解説されていて、とて...]]></description><link>https://zenn.dev/hwld/articles/562f70edfe51f4</link><guid isPermaLink="true">https://zenn.dev/hwld/articles/562f70edfe51f4</guid><pubDate>Sat, 29 Mar 2025 08:23:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b77UMQzd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E3%2583%25A1%25E3%2582%25AB%25E3%2583%258B%25E3%2582%25BA%25E3%2583%25A0%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hwld%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyOWJmMDY5ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hwld</dc:creator></item></channel></rss>