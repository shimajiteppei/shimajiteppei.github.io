<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-25T15:21:43+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071629</id>
    <published>2025-08-25T15:21:43+09:00</published>
    <updated>2025-08-25T15:21:43+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/5ec1d07557763aea1ac0"/>
    <url>https://qiita.com/nozomi2025/items/5ec1d07557763aea1ac0</url>
    <title>【デザインパターン】 アダプタパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
アダプタ（Adapter）パターン は、
既存のクラスやインターフェースをクライアントが期待する形式に変換する デザインパターンです。

解決する問題

ライブラリや既存コードのインターフェースが自分のプロジェクトと合わない
外部 API とアプリ内...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071490</id>
    <published>2025-08-25T05:19:12+09:00</published>
    <updated>2025-08-25T05:19:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/ryuji_sato/items/d28adc77d4d0900e299b"/>
    <url>https://qiita.com/ryuji_sato/items/d28adc77d4d0900e299b</url>
    <title>HettpExceptionのエラー内容を表示する</title>
    <content type="text">はじめに
今回は、HttpExceptionのの中からエラー内容を取り出すための処理を紹介します

本文
fun Throwable.getDisplayMessage(): String? {
    if (this !is HttpException) return...</content>
    <author>
      <name>ryuji_sato</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071420</id>
    <published>2025-08-24T23:28:01+09:00</published>
    <updated>2025-08-24T23:35:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/90b51dcecb83bc72721e"/>
    <url>https://qiita.com/nozomi2025/items/90b51dcecb83bc72721e</url>
    <title>浅いコピー（Shallow Copy）と深いコピー（Deep Copy）の違いを整理する（Dart/ Kotlin 実例付き）</title>
    <content type="text">はじめに
オブジェクト指向プログラミングでは、「コピー（複製）」 がよく使われます。
特に Prototype パターン や copyWith / copy() のような API を使うときに重要になるのが、

浅いコピー（Shallow Copy）
深いコピー（Deep...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071316</id>
    <published>2025-08-24T18:24:52+09:00</published>
    <updated>2025-08-24T18:25:14+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/7ce8b2f8d30d474d9d1c"/>
    <url>https://qiita.com/nozomi2025/items/7ce8b2f8d30d474d9d1c</url>
    <title>【デザインパターン】プロトタイプパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
プロトタイプ（Prototype） パターンは、既存のオブジェクトをコピーして新しいインスタンスを生成する デザインパターンです。

解決する問題

複雑な初期化処理を毎回走らせたくない

new を使ってゼロからオブジェクトを構築するのではなく、既...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
