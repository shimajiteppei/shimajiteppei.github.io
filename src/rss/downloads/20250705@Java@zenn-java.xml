<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 05 Jul 2025 12:03:59 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【期間限定・無料！】Javaで 『旅行予約システム』をつくろう！]]></title><description><![CDATA[Javaオブジェクト指向を習ったばかりの方向けに、「旅行予約システム」を作成しながら学んでいくカリキュラムです

■目的
・オブジェクト指向の基本概念（クラス、継承、ポリモーフィズムなど）を理解する

・クラス設計からプログラム作成まで一連の流れを体験する

・コレクションや例外処理の基礎を身に付ける

・日付操作の基礎を使えるようになる

■演習ストーリー
あなたは旅行会社のシステムエンジニアです。旅行を予約するための簡単なアプリケーションをJavaで開発します。

■準備
Eclipseでtravelという名前のJavaプロジェクトを作成しておいてください]]></description><link>https://zenn.dev/codek2/books/9c46834015ca3e</link><guid isPermaLink="true">https://zenn.dev/codek2/books/9c46834015ca3e</guid><pubDate>Sat, 05 Jul 2025 07:23:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nZ4T3H4G--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9iN2UyN2ZjYWZiLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>コード日和（びより）</dc:creator></item><item><title><![CDATA[例外処理、なんとなく使ってませんか？Java初心者のためのやさしいエラーハンドリング入門]]></title><description><![CDATA[Javaの try-catch、なんとなく使ってきたけど
「これで本当に合ってるのかな？」
「握りつぶしてない…よね？」
そんな不安が少しでもよぎったことのある方に向けて、
今回は「Javaの例外処理」について、基礎から実務視点までやさしくまとめてみました。


 ☕ はじめに｜例外処理を軽く見ていたあの頃の自分へ
プログラミングを始めたころ、例外処理といえば「とりあえず try-catch しておけば大丈夫」くらいの感覚でした。
でも実務でコードを読むようになると、それがとても危うい考えだったことに気づかされました。

catch ブロックで握りつぶされていたログ
スタックトレースの残...]]></description><link>https://zenn.dev/decopon1476052/articles/7cc27726280f01</link><guid isPermaLink="true">https://zenn.dev/decopon1476052/articles/7cc27726280f01</guid><pubDate>Fri, 04 Jul 2025 09:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---TFHoIJ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BE%258B%25E5%25A4%2596%25E5%2587%25A6%25E7%2590%2586%25E3%2580%2581%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A8%25E3%2581%25AA%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259FJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%2584%25E3%2581%2595%25E3%2581%2597%25E3%2581%2584%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:decopon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4Mzg4YTIwMWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>decopon</dc:creator></item><item><title><![CDATA[【Java】アクセス修飾子 とは]]></title><description><![CDATA[
 １．はじめに
・アクセス修飾子とは、public/protected/privateといった修飾子の総称です。
・クラス・メソッド・メンバ変数のアクセス範囲を設定する際に使用します。
・アクセス修飾子毎のアクセス範囲の広狭は、以下の通りです。
　　アクセス範囲広：public &lt; private &lt; 修飾子なし &lt; protected：アクセス範囲狭
!
重要：
各アクセス修飾子の概要です。



アクセス修飾子
概要




public
全パッケージと全クラスからアクセス可能。無制限。


protected
同じパッケージのクラスと他パッケージのサブクラス（継...]]></description><link>https://zenn.dev/yama_kawa/articles/afed253f1e5503</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/afed253f1e5503</guid><pubDate>Fri, 04 Jul 2025 06:55:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bpzJ8Qo5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E4%25BF%25AE%25E9%25A3%25BE%25E5%25AD%2590%2520%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[「ネストしたクラス」まとめ[Java入門]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
間違い等あれば、指摘いただけると助かります。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。

 対象読者

Javaを勉強中の方
Java SE11 Gold試験を勉強中の方
Javaの「ネストしたクラス」について知りたい方


 目次
1. 入れ子クラスとは
2. インナークラス
3. staticインナークラス...]]></description><link>https://zenn.dev/wakinoza/articles/ce9814fe5f7cff</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/ce9814fe5f7cff</guid><pubDate>Fri, 04 Jul 2025 06:55:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qxvwveC5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%259F%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2580%258D%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%255BJava%25E5%2585%25A5%25E9%2596%2580%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[JDK8->17 バージョンアップでやったこと]]></title><description><![CDATA[
 はじめに
業務でWebアプリケーションのバックエンド側をJDK8から17にバージョンアップしました。
本記事では、その際に対応したポイントや、修正が必要だった箇所についてご紹介します。

 環境

JDK:OpenJDK8(Eclipse Temurin)


 バージョンアップ時の注意点
JDK 17への移行では、単にバージョンを上げるだけでなく、削除された機能や動作仕様の変更など、いくつか注意すべきポイントがあります。

 1. 削除された機能の確認
JDKのバージョンアップに伴い、一部のパッケージやJVM起動オプションが削除されました。
JVM起動オプションは、起動時にコンソー...]]></description><link>https://zenn.dev/oryo3/articles/bb9fc4a50a3dae</link><guid isPermaLink="true">https://zenn.dev/oryo3/articles/bb9fc4a50a3dae</guid><pubDate>Thu, 03 Jul 2025 14:18:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LNg2yIzM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JDK8-%253E17%2520%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:R.O%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS09lUVRadHFGTkE2VjB6Q2VKbFZ5ckY0RVE3bjdrSTg0UEQxT0JZcjFVT0pVVlhGT2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>R.O</dc:creator></item><item><title><![CDATA[Spring Bootの構成原理を理解する]]></title><description><![CDATA[
 ― 自動構成とユーザー構成のつながり ―
Spring Boot は「設定より規約（Convention over Configuration）」の原則に基づいて、開発者がすべての設定を手作業で行わなくてもすぐにアプリケーションを立ち上げられるように設計されています。
しかし、開発が進むにつれてカスタマイズや拡張が必要になったとき、「なぜこのBeanが登録されているのか」「どのようにオーバーライドできるのか」といった内部構造の理解が必要不可欠になります。
本記事では、Spring Boot の構成がどのように組み立てられているか、そして自動構成とユーザー構成の関係性について、図を交え...]]></description><link>https://zenn.dev/cruway/articles/346b4bd17eb08a</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/346b4bd17eb08a</guid><pubDate>Thu, 03 Jul 2025 08:23:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sFW8lN5I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2581%25AE%25E6%25A7%258B%25E6%2588%2590%25E5%258E%259F%25E7%2590%2586%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[LDAP/LDAPSのクライアント認証（Java）]]></title><description><![CDATA[
 はじめに
LDAP・LDAPSのクライアント認証のJavaの実装を行ったことのメモ記録です。

 環境

LDAPサーバ：OpenLDAP
Java：OpenJDK17(Eclipse Temurin)



 LDAPの事前知識

 ベースDN
LDAPディレクトリの住所の出発点（ルート）に当たるものです。
どのディレクトリを起点に認証を進めるかの起点になります。
例えば、以下のような構成の場合は「dc=example,dc=com」になります。
  dc=example
    └─dc=com  ← ここ
        ├─ou=people
        │   ├─cn...]]></description><link>https://zenn.dev/oryo3/articles/4a209395a08904</link><guid isPermaLink="true">https://zenn.dev/oryo3/articles/4a209395a08904</guid><pubDate>Wed, 02 Jul 2025 09:53:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rIpvgYpT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LDAP%252FLDAPS%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E8%25AA%258D%25E8%25A8%25BC%25EF%25BC%2588Java%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:R.O%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS09lUVRadHFGTkE2VjB6Q2VKbFZ5ckY0RVE3bjdrSTg0UEQxT0JZcjFVT0pVVlhGT2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>R.O</dc:creator></item><item><title><![CDATA[【リーダブルコード】テストコードも「読みやすさ」が命]]></title><description><![CDATA[
 ✅ テストコードも読みやすくなければ意味がない
テストコードはただ「動く」だけでは不十分です。
他の開発者が見ても直感的に理解でき、簡単に修正・追加できることが重要です。
もしテストコードが煩雑で大きく、理解しにくいものであれば、次のような問題が発生します：

コードの修正が怖くなる
テストケースの修正が面倒になり、新たなテストが追加されない
テストカバレッジが下がり、安心してコードを修正できなくなる



 🔍 TDDに潜む罠：テストの副作用とテスト漏れ
TDD（テスト駆動開発）では最初にテストを作りますが、後から機能を修正したとき、テストコードも一緒に修正しなければならないという...]]></description><link>https://zenn.dev/cruway/articles/7d18dfe7f06ec8</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/7d18dfe7f06ec8</guid><pubDate>Tue, 01 Jul 2025 13:33:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JoGeu3u_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2580%2591%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2582%25E3%2580%258C%25E8%25AA%25AD%25E3%2581%25BF%25E3%2582%2584%25E3%2581%2599%25E3%2581%2595%25E3%2580%258D%25E3%2581%258C%25E5%2591%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[Bitcoin自動取引システムを作ってみた]]></title><description><![CDATA[
 Bitcoin自動取引システムを作ってみた - GMO/Bitflyer連携でリアルタイム取引エンジン構築

 TL;DR

GMOコイン・BitflyerのWebSocket APIと連携したBitcoin自動取引システムを開発
Java 17 + Spring Boot による高性能取引エンジン「ExchSim」
React 19 + TypeScript によるモダンなトレーディングUI
実市場データを使ったアービトラージ戦略で微益を確認
フルスタック構成でバックテストから本番まで一貫した環境


 はじめに
「本格的なアルゴリズム取引システムを自作してみたい」という思いから、...]]></description><link>https://zenn.dev/fin_tech/articles/f3b52afbf36581</link><guid isPermaLink="true">https://zenn.dev/fin_tech/articles/f3b52afbf36581</guid><pubDate>Tue, 01 Jul 2025 09:00:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JAOSQFww--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Bitcoin%25E8%2587%25AA%25E5%258B%2595%25E5%258F%2596%25E5%25BC%2595%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fin_tech%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5YWU3ODRiMzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fin_tech</dc:creator></item><item><title><![CDATA[Java基礎]]></title><description><![CDATA[Javaの基礎]]></description><link>https://zenn.dev/zarathustra/books/4946c6738c233d</link><guid isPermaLink="true">https://zenn.dev/zarathustra/books/4946c6738c233d</guid><pubDate>Tue, 01 Jul 2025 06:50:04 GMT</pubDate><dc:creator>Also sprach takehiro</dc:creator></item><item><title><![CDATA[【新人プログラマ向け】JSPとAPIの違い]]></title><description><![CDATA[
 はじめに
「JavaScriptでリッチなWebページが作れるのに、なぜJSPのような昔の技術が必要なの？」
「そもそも、なんでJavaScriptは直接データベースの情報を取ってこれないの？」
JavaでWeb開発を学び始めると、誰もが一度はこんな疑問にぶつかります。筆者もそうでした。
この記事では、このWeb開発の根本的な仕組みを、多くの人がイメージしやすい**「レストランの厨房」**の例え話を使って、直感的に理解できるように解説します。
この記事を読み終える頃には、JSPとAPIの役割の違いがスッキリ整理され、「なるほど、だからAPIが必要なのか！」と納得できるようになるはずで...]]></description><link>https://zenn.dev/wyuma/articles/15bb6a857d6a70</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/15bb6a857d6a70</guid><pubDate>Mon, 30 Jun 2025 08:39:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---5Cv4zsn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E6%2596%25B0%25E4%25BA%25BA%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259E%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591JSP%25E3%2581%25A8API%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Somadevfat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Somadevfat</dc:creator></item><item><title><![CDATA[【エンジニア初学者】プログラム言語の基礎]]></title><description><![CDATA[!
この記事はエンジニア初学者が学んだことをまとめたアウトプットです。

本記事では、プログラミング言語の基礎を中心に解説していきます。特に、Java、JavaScript、Kotlin、TypeScriptといったWebやアプリ開発でよく使われる言語にフォーカスして、それぞれの違いや特徴、使いどころなどを紹介します。

 そもそもプログラミング言語とは
プログラミング言語とは、コンピュータに「こうしてほしい」と命令を伝えるための言葉です。
私たち人間が話す日本語や英語のように、コンピュータにも理解できる“言語”が必要になります。それが、JavaやJavaScript、Kotlinなどの...]]></description><link>https://zenn.dev/hitsuzi_meme/articles/ab26e09b93f5cc</link><guid isPermaLink="true">https://zenn.dev/hitsuzi_meme/articles/ab26e09b93f5cc</guid><pubDate>Mon, 30 Jun 2025 05:54:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PO10iYJl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E3%2580%2591%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzYmI2MGFhMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>め</dc:creator></item><item><title><![CDATA[【Java】Spring boot & Spring Security]]></title><description><![CDATA[
 Spring boot &amp; Spring Securityについて[簡単に]

 Spring boot
Springアプリケーションを迅速かつ簡単に起動できるようしたフレームワーク。
従来のSpringでは、設定ファイルやサーブレットの構築が必要で複雑でしたが、Spring bootでは自動構成（AutoConfiguration）や組み込みWebサーバー(Tomcat)を備えており、最小限の設定のみで起動できるものになります。

 Spring Security
アプリケーションに認証や認可を追加するためのフレームワークになります。

リクエストはサーブレットに到達する前...]]></description><link>https://zenn.dev/hosoya_ren/articles/a852ff256e0506</link><guid isPermaLink="true">https://zenn.dev/hosoya_ren/articles/a852ff256e0506</guid><pubDate>Mon, 30 Jun 2025 03:49:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3aCRdA9n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591Spring%2520boot%2520%2526%2520Spring%2520Security%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hosoya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0JfWGxNdE5wRVlwTm5GUENGWV9DZ0RPYjZ4d3k3TnhtNWRpcDVTbHNIWGtyWllYND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hosoya</dc:creator></item><item><title><![CDATA[Semantic Kernel / Spring AI & Azure Cosmos DB VectorStore 登壇内容補足]]></title><description><![CDATA[
 Java on Azure Day 2025 My Presentation Supplement
この記事は、先日開催された Java on Azure Day 2025 における私の登壇内容の補足記事です。
https://microsoft-events.connpass.com/event/350267/
https://msevents.microsoft.com/event?id=172327856571
こちらの Session 5 にて、Java で作る RAG を活用した Q&amp;A アプリケーション と題し、以下の 2 点をデモアプリを交えて紹介しました。
当...]]></description><link>https://zenn.dev/ymasaoka/articles/java-on-azure-day-2025-presentation-supplement</link><guid isPermaLink="true">https://zenn.dev/ymasaoka/articles/java-on-azure-day-2025-presentation-supplement</guid><pubDate>Sun, 29 Jun 2025 14:28:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oghAt3Wb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Semantic%2520Kernel%2520%252F%2520Spring%2520AI%2520%2526%2520Azure%2520Cosmos%2520DB%2520VectorStore...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%25B4%25E3%2581%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxMjU1M2JlZDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まっぴぃ</dc:creator></item><item><title><![CDATA[Springの@TransactionalでハマるUnexpectedRollbackExceptionの原因と回避方法]]></title><description><![CDATA[
 概要
Springの@Transactionalアノテーションによるトランザクション管理には、少し注意が必要な点があります。特にController層で@Transactionalを使うと、例外処理後にUnexpectedRollbackExceptionが発生するケースがあります。この記事では、実際に起きた例をもとにその原因と回避方法を整理します。

 予備知識


@Transactionalアノテーション

ここからトランザクションを始めるという目印程度に思ってください


BeanとかProxyとか

springにおけるインスタンス程度に思ってもらって大丈夫です


DBへ...]]></description><link>https://zenn.dev/tamasho/articles/bbf1da0c0d2963</link><guid isPermaLink="true">https://zenn.dev/tamasho/articles/bbf1da0c0d2963</guid><pubDate>Sun, 29 Jun 2025 12:45:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G7f3p6GR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2581%25AE%2540Transactional%25E3%2581%25A7%25E3%2583%258F%25E3%2583%259E%25E3%2582%258BUnexpectedRollbackException%25E3%2581%25AE%25E5%258E%259F%25E5%259B%25A0%25E3%2581%25A8%25E5%259B%259E%25E9%2581%25BF%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tamasho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0J5YUlHeEwxblRpNkE5Y2lvT2VfUWlKUlh6YzhGZmYydDI5dFNfVmx3TkxKaHB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tamasho</dc:creator></item><item><title><![CDATA[Java業務チェックロジックに革命を──ラベルブロックという正攻法]]></title><description><![CDATA[
 Java業務チェックロジックに革命を──ラベルブロックという正攻法
Javaには"知ってはいるが使われていない"構文がいくつもあります。
その中でも特に「ラベル付きブロック」は、構文としては初期（Java 1.0）から存在しながら、
for文やwhile文の多重ループの脱出以外には活用されてきませんでした。
今回、私はこの構文を業務アプリにおけるチェックロジックに応用し、
設計・実装・保守のすべてにおいて大幅な改善をもたらす構造を提案します。


 💡 業務画面のチェックロジックが抱える課題
業務系アプリでは入力値に対するバリデーションが欠かせません。
しかし、以下のような課題が頻発...]]></description><link>https://zenn.dev/menimani/articles/9b9fecbf01ac07</link><guid isPermaLink="true">https://zenn.dev/menimani/articles/9b9fecbf01ac07</guid><pubDate>Sun, 29 Jun 2025 07:23:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g8-OX-J_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E6%25A5%25AD%25E5%258B%2599%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E9%259D%25A9%25E5%2591%25BD%25E3%2582%2592%25E2%2594%2580%25E2%2594%2580%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E6%25AD%25A3%25E6%2594%25BB%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:menimani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MWM5YzcyOTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>menimani</dc:creator></item><item><title><![CDATA[自作サービスをもとにSOLID原則について学んでみた]]></title><description><![CDATA[
 １. はじめに
この記事では、私が開発した映画レコメンドアプリ「MoviReco」を題材に、オブジェクト指向設計の原則「SOLID」について振り返ってみたいと思います。
MoviReco
SOLID原則は理解するのが難しいと言われがちですが、自分のコードに当てはめてみることで、一気に実感が湧きました。この記事では、各原則をMoviRecoの設計に照らし合わせながら、実際にどのように意識・適用したかをご紹介します。

 ２. SOLID原則とは？
SOLIDとは、以下の5つの設計原則の頭文字を取ったものです。

S: 単一責任の原則（Single Responsibility Prin...]]></description><link>https://zenn.dev/devtkms/articles/54fedeb23ae592</link><guid isPermaLink="true">https://zenn.dev/devtkms/articles/54fedeb23ae592</guid><pubDate>Sun, 29 Jun 2025 01:12:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aKNGDQtJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A8%25E3%2581%25ABSOLID%25E5%258E%259F%25E5%2589%2587%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A7%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2583%25BC%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVUwMjBPWjJyd3hIT25EY2RCaGdqYWFreGNINGlTXzlPdzNIUDlmUVQyZDlWZjNBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スーさん</dc:creator></item><item><title><![CDATA[【リーダブルコード】コード分量を減らす]]></title><description><![CDATA[
 🚫 無理に機能を実装しようとしない
新しいプロジェクトが始まると、テンションが上がって拡張性を意識した「すごい設計」をしようとしてしまいがちです。
しかし、実際には必要な機能を過大評価しがちで、またその実装にかかる手間を過小評価する傾向があります。
その結果、将来の修正で副作用（サイドエフェクト）が発生し、かえって保守が難しくなってしまいます。
最初から拡張性を完璧に考えるよりも、まず機能を実装 → 結果を確認 → 改善（リファクタリング）という流れの方が、集中しやすく成果も見えやすくなります。
public class FeatureBuilder {
    public voi...]]></description><link>https://zenn.dev/cruway/articles/e8f3e31cd29d44</link><guid isPermaLink="true">https://zenn.dev/cruway/articles/e8f3e31cd29d44</guid><pubDate>Sun, 29 Jun 2025 00:35:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kJ3o_FAl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2588%2586%25E9%2587%258F%25E3%2582%2592%25E6%25B8%259B%25E3%2582%2589%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258B%25E3%2581%25B8%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4NDg3OTFhZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くるへい</dc:creator></item><item><title><![CDATA[Javaあれこれ #1]]></title><description><![CDATA[こんにちは、はじめまして。駆け出しエンジニアのオリザです。
スッキリわかるJava入門実践編（インプレス社）の練習問題にて、解答とは異なるコードで上手くいったため、覚え書きです。

 問題文
練習2-1 以下の仕様に従った金庫をStrongBoxクラスとして定義してください。

金庫クラスに格納するインスタンスの型は、開発時には未定である。
金庫には、1つのインスタンスを保存できる必要がある。
put()でインスタンスを保存し、get()でインスタンスを取得できる。
get()で取得する際、キャストを使わなくても格納前の方に代入できる。

練習2-2 作成したStrongBoxクラスに鍵...]]></description><link>https://zenn.dev/azure_blue/articles/20db946bf784fe</link><guid isPermaLink="true">https://zenn.dev/azure_blue/articles/20db946bf784fe</guid><pubDate>Sat, 28 Jun 2025 05:08:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOKHWMot--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%25E3%2581%2582%25E3%2582%258C%25E3%2581%2593%25E3%2582%258C%2520%25231%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AA%25E3%2583%25AA%25E3%2582%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSU5VSk5CZy1STmVHbFlzbi1xWk5qRy04Wld0X2hmYkp5d1IwLV9qWm5DcUZhUmFGMD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>オリザ</dc:creator></item><item><title><![CDATA[技術調査 - Gudu SQLFlow Lite]]></title><description><![CDATA[データエンジニアやデータアナリストにとって、複雑に絡み合ったSQLが「どのテーブルのどのカラムからデータを取得し、どこへ流しているのか」を正確に追跡する「データリネージ」は、データ品質の保証や影響範囲の調査に不可欠です。しかし、手作業での追跡はしばしば悪夢のような作業になりがちです。
https://zenn.dev/suwash/articles/stored_procedure_analysis_20250625
この記事では、前回紹介した製品の中から「Gudu SQLFlow」の無償版「Gudu SQLFlow Lite」の情報を整理します。

 ■概要
Gudu SQLFlowは...]]></description><link>https://zenn.dev/suwash/articles/gudu_sqlflow_lite_20250627</link><guid isPermaLink="true">https://zenn.dev/suwash/articles/gudu_sqlflow_lite_20250627</guid><pubDate>Fri, 27 Jun 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ph7UZBj2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%258A%2580%25E8%25A1%2593%25E8%25AA%25BF%25E6%259F%25BB%2520-%2520Gudu%2520SQLFlow%2520Lite%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suwa-sh%2520%252F%2520%25E8%25AB%258F%25E8%25A8%25AA%25E7%259C%259F%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlQ0cjdIdGJrWG10aG42OE53dmlHWXBLcGI5VWQ5N3hnRS1aQnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suwa-sh / 諏訪真一</dc:creator></item></channel></rss>