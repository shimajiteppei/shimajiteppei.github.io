<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「shell」のフィード]]></title><description><![CDATA[Zennのトピック「shell」のRSSフィードです]]></description><link>https://zenn.dev/topics/shell</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/c8d33e6510.jpeg</url><title>Zennの「shell」のフィード</title><link>https://zenn.dev/topics/shell</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 01 Jul 2025 12:04:45 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/shell/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ccusageを使ってClaude Codeの直近の利用状況を常にリアルタイムでモニタリングする方法]]></title><description><![CDATA[
 書いたあとに気づいた：ここで書いていること全部ccusage単体で出来ていたわ
https://x.com/shinshin86/status/1939693849552843260

 直近でどれぐらいClaude Codeを使っているかを確認するためのワンライナー
直近でどれぐらいClaude Codeを使えているかを確認したくなったので、直近時間（※）のClaude Codeのコストを表示させるワンライナーを作成しました。
※18:00に実行したら18:00~19:00までの間のClaude Codeのコストが表示されます。

このコマンドは以下のワンライナーで実行可能です。
...]]></description><link>https://zenn.dev/shinshin86/articles/dcbf786edc82e9</link><guid isPermaLink="true">https://zenn.dev/shinshin86/articles/dcbf786edc82e9</guid><pubDate>Mon, 30 Jun 2025 14:42:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QMf9OrIt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ccusage%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Claude%2520Code%25E3%2581%25AE%25E7%259B%25B4%25E8%25BF%2591%25E3%2581%25AE%25E5%2588%25A9%25E7%2594%25A8%25E7%258A%25B6%25E6%25B3%2581%25E3%2582%2592%25E5%25B8%25B8%25E3%2581%25AB%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2581%25A7%25E3%2583%25A2%25E3%2583%258B%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuki%2520Shindo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2otbHB0MWdFYmtDdUlHMzJOZ2N2SV9wa0YxM0JVYVhuYy03ODNiPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuki Shindo</dc:creator></item><item><title><![CDATA[iPadでターミナル環境を構築する (a-Shell編)]]></title><description><![CDATA[
 背景
iPad はクリエイティブな作業やコンテンツ消費のための優れたデバイスですが、エンジニアにとってはターミナル環境がないことが長年の課題でした。しかし、a-Shell のようなアプリの登場により、iPad 上でも本格的な Shell 環境を構築し、さまざまなコマンドラインツールを実行できるようになりました。
この記事では、a-Shell を使って iPad で何ができるのか、その設定と基本的な使い方についてまとめます。

 a-Shell とは？
a-Shell は、iOS/iPadOS 上で動作する、ローカルターミナル環境を提供する無料アプリです。bash や zsh のような...]]></description><link>https://zenn.dev/hashito/articles/73151231fe56c6</link><guid isPermaLink="true">https://zenn.dev/hashito/articles/73151231fe56c6</guid><pubDate>Sun, 29 Jun 2025 00:17:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--chZu0vl0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:iPad%25E3%2581%25A7%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2520%2528a-Shell%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hashito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmMmRhOTE0MGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hashito</dc:creator></item><item><title><![CDATA[コマンド紹介シリーズ：terminalizer]]></title><description><![CDATA[コマンド紹介シリーズ第9回目は、terminalizerというコマンドを紹介します。ターミナルでの作業を録画し、GIFアニメーションを作成するためのツールです。
なお、第8回は以下になりますので、ぜひご興味があればご覧ください。
https://zenn.dev/akasan/articles/0bcf36a4251a96

 terminalizerとは？
terminalizerとは公式の説明によると、

Record your terminal and generate animated gif images or share a web player link www.termi...]]></description><link>https://zenn.dev/akasan/articles/facccc0169d83b</link><guid isPermaLink="true">https://zenn.dev/akasan/articles/facccc0169d83b</guid><pubDate>Sat, 28 Jun 2025 06:45:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iXNIcaWQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E7%25B4%25B9%25E4%25BB%258B%25E3%2582%25B7%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25BA%25EF%25BC%259Aterminalizer%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akasan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJfNDFtel9OY3dPYUtMRE1vc09tbVB6YmxHM0V5N3lNZzI3QWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Akasan</dc:creator></item><item><title><![CDATA[ヒアドキュメントのタブ]]></title><description><![CDATA[ヒアドキュメントを埋め込むとインデントが ... ってなるの、これでなんとかなるかな？
    cat &lt;&lt;'....END' | sed 's/^ \{8\}//' &gt; /home/$username/yukip.bashrc
        # env
        export TZ=Asia/Tokyo

        # history
        HISTSIZE=200000
        HISTFILESIZE=20000

        # etc
        alias ls='ls --color=always'
        ...]]></description><link>https://zenn.dev/yukip/articles/20250623-1-tab</link><guid isPermaLink="true">https://zenn.dev/yukip/articles/20250623-1-tab</guid><pubDate>Mon, 23 Jun 2025 02:13:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ClvFgBKk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2592%25E3%2582%25A2%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukip%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0Y2RSb0g4ZS15b0VfTXR0ZDZGeXFZdzR2R0pfVWZJRHlfNmFyYlpFWUdJd1U0PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukip</dc:creator></item><item><title><![CDATA[SSH秘密鍵のパスフレーズ自動入力]]></title><description><![CDATA[
 はじめに
パスフレーズ付の秘密鍵を使って SSH する作業を自動化したい場合に、パスフレーズを自動入力する必要がある。
例えば、Gitlab CI や GitHub Actions を使って、成果物をサーバーに配置したい場合等が考えられる。

 準備
以下を準備してください。

SSH 秘密鍵を環境変数SSH_PRIVATE_KEYに設定
上記秘密鍵のパスフレーズを環境変数SSH_PASSPHRASEに設定

sshをインストールしていること


 手順
eval $(ssh-agent -s)
mkdir -p ~/.ssh
chmod 700 ~/.ssh
echo -e "#!...]]></description><link>https://zenn.dev/casl0/articles/c16884f095b574</link><guid isPermaLink="true">https://zenn.dev/casl0/articles/c16884f095b574</guid><pubDate>Sun, 22 Jun 2025 15:05:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5HPTeLe1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SSH%25E7%25A7%2598%25E5%25AF%2586%25E9%258D%25B5%25E3%2581%25AE%25E3%2583%2591%25E3%2582%25B9%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BA%25E8%2587%25AA%25E5%258B%2595%25E5%2585%25A5%25E5%258A%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:CASL0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNmRXNEswYjJ6Q0sxNGpWTXFkbHRyQ0Y3RXp3d3kybVJFeHRySDc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>CASL0</dc:creator></item><item><title><![CDATA[pico-jxglib のシェルでファイルシステムを操作する話 (自動補完とヒストリ機能で入力楽々)]]></title><description><![CDATA[pico-jxglib は、ワンボードマイコン Raspberry Pi Pico の Pico SDK プログラミングをサポートするライブラリです。
https://zenn.dev/ypsitau/articles/2025-01-24-jxglib-intro
今回は、pico-jxglib のシェル でファイルシステムを操作する方法について解説します。自動補完機能やリダイレクト機能を使って、コマンドラインからファイルやディレクトリを簡単に操作できるようになります。

 ファイルシステムとシェル
以下の記事で、ファイルシステムの基本的な使い方を紹介しました。
▶️ pico-jxg...]]></description><link>https://zenn.dev/ypsitau/articles/2025-06-09-fs-shell</link><guid isPermaLink="true">https://zenn.dev/ypsitau/articles/2025-06-09-fs-shell</guid><pubDate>Sun, 22 Jun 2025 08:37:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zUKJ5C-5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:pico-jxglib%2520%25E3%2581%25AE%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E8%25A9%25B1%2520%2528%25E8%2587%25AA%25E5%258B%2595%25E8%25A3%259C%25E5%25AE%258C%25E3%2581%25A8%25E3%2583%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A7%25E5%2585%25A5%25E5%258A%259B%25E6%25A5%25BD%25E3%2580%2585%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlJnRVZJYjlRQXVSb3MwOERCR1Vwek14eDd2aWRPU2RLbnlweFVGUDJJdjJHcF9XYWU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taka</dc:creator></item><item><title><![CDATA[Macを交換する度に行う面倒な初期設定を自動化する]]></title><description><![CDATA[
 はじめに
ITエンジニアとして働いていると、Macの初期設定を何度も行う機会があります。
私用PCであれば数年に一度ですが、会社支給のPCを利用していると意外と高頻度で初期設定を行うことになります。
メモや記憶を頼りに手作業で設定し、古いMacと見比べながら環境を構築して...気付くと半日が消えているなんてことも。
こんなこと毎回やってられない。。ということで調べてみたらシェルスクリプトを組んでいる人やAnsibleを使っている人など色んな初期設定の自動化パターンを見つけました。
入れるアプリや設定は人それぞれ好みがあるので、沢山の人の良いとこを参考にさせていただきながら自分なりに試...]]></description><link>https://zenn.dev/fumi_techblog/articles/ede592db153cd7</link><guid isPermaLink="true">https://zenn.dev/fumi_techblog/articles/ede592db153cd7</guid><pubDate>Sun, 22 Jun 2025 01:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lH5pgKaj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mac%25E3%2582%2592%25E4%25BA%25A4%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E5%25BA%25A6%25E3%2581%25AB%25E8%25A1%258C%25E3%2581%2586%25E9%259D%25A2%25E5%2580%2592%25E3%2581%25AA%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDBTUkdTaVJzX3R4LWE2V0lUUzNnYnpCVDc2OTlZTDNNUjhXUnNnTVZZXzVFdkVBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fumi</dc:creator></item><item><title><![CDATA[GitHooksを利用したコミットメッセージ確認]]></title><description><![CDATA[
 GitHooksとは
Git の操作（コミットやプッシュなど）の前後に自動的に実行されるスクリプトのことです。開発のルールや自動化処理をローカルで仕込むことができる、Gitのカスタマイズ機能の一つです。pre-commit&nbsp;フック(コミットメッセージが入力される前に実行)、prepare-commit-msg&nbsp;フック(コミットメッセージエディターが起動する直前、デフォルトメッセージが生成された直後に実行)上記のような複数のフックが存在する。

 commit-msg&nbsp;フック

commit-msg&nbsp;フックは、開発者の書いたコミットメッセージを保...]]></description><link>https://zenn.dev/koki33/articles/794033806c91cd</link><guid isPermaLink="true">https://zenn.dev/koki33/articles/794033806c91cd</guid><pubDate>Fri, 20 Jun 2025 03:19:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2Tn8zLg0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHooks%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%25B3%25E3%2583%259F%25E3%2583%2583%25E3%2583%2588%25E3%2583%25A1%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25BC%25E3%2582%25B8%25E7%25A2%25BA%25E8%25AA%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B3%25E3%2583%25BC%25E3%2582%25AD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjNuTTg4NHhEU3JpUnlBdUtXU1lENG9Cc2ZEaTFfWWhPcWkxeUE4RS1kaHcxQnFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>コーキ</dc:creator></item><item><title><![CDATA[「argparse」 × 「Shell Script」 でパラメータを変えながら Python を一括実行]]></title><description><![CDATA[今回は、パラメータを変えながら、プログラムを一括実行する方法についてまとめてみました。
『argparse』と『Shell Script』を用いることで、変数の値を変更しつつ、複数回実行することができます。
!
この記事でわかること

パラメータを変えながら、プログラムを一括実行する方法
argparseの基本
Shell Scriptの基本


!
注意

Shell Script は基本的に Unix 系のシェルでしか動きません
Windows では WSL、Git Bash、MSYS2 などの Unix 互換環境を入れれば同じスクリプトを実行できます



 argparse の使...]]></description><link>https://zenn.dev/mugi_cha/articles/1c2c19d46d9e0c</link><guid isPermaLink="true">https://zenn.dev/mugi_cha/articles/1c2c19d46d9e0c</guid><pubDate>Thu, 19 Jun 2025 16:22:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wvapGoh8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258Cargparse%25E3%2580%258D%2520%25C3%2597%2520%25E3%2580%258CShell%2520Script%25E3%2580%258D%2520%25E3%2581%25A7%25E3%2583%2591%25E3%2583%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%25A4%2589%25E3%2581%2588%25E3%2581%25AA%25E3%2581%258C%25E3%2582%2589%2520Python%2520%25E3%2582%2592%25E4%25B8%2580%25E6%258B%25AC%25E5%25AE%259F%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mugicha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA2MjRmMzAxNDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mugicha</dc:creator></item><item><title><![CDATA[シェルのhistoryに「AWS_ACCESS_KEY_ID=...」が残っていると恥ずかしいから]]></title><description><![CDATA[.bashrc に export AWS_ACCESS_KEY_ID= export AWS_SECRET_ACCESS_KEY= って書くのは趣味じゃない
けど、使っているツールの都合でこれらの認証情報が環境変数に必要
けど、認証情報を直接打っちゃうとhistoryに残ってセキュリティ意識が低いみたいで恥ずかしい
けど、シェルの履歴を無効化するとかもちょっとな〜
みたいなシーンにいる方のために贈るスニペット
source &lt;(aws configure export-credentials --format env)
なんだかスマートな感じがします
]]></description><link>https://zenn.dev/pal4de/articles/8fcebb22ba1c46</link><guid isPermaLink="true">https://zenn.dev/pal4de/articles/8fcebb22ba1c46</guid><pubDate>Thu, 19 Jun 2025 09:06:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--go9J6Q8h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2581%25AEhistory%25E3%2581%25AB%25E3%2580%258CAWS_ACCESS_KEY_ID%253D...%25E3%2580%258D%25E3%2581%258C%25E6%25AE%258B%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%25A8%25E6%2581%25A5%25E3%2581%259A%25E3%2581%258B%25E3%2581%2597%25E3%2581%2584%25E3%2581%258B%25E3%2582%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%25B4%25E3%2582%258C%25E4%25BA%2595%25E6%2588%25B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA0ZjYyMGM5N2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>晴れ井戸</dc:creator></item><item><title><![CDATA[HTML修正作業で困ったことまとめと解決策]]></title><description><![CDATA[
 はじめに
この記事では、私が仕事中に「普段あまり使わないHTMLを扱ったことで発生したトラブル」と、その解決方法をまとめています。
HTMLにあまり慣れていない方や、これからHTMLを書いてみようという方にも参考になる内容を目指しています。


 トラブル1：ターミナルからChromeでHTMLをプレビューできない

 背景
ローカルにリポジトリをcloneしたとき、Finderからファイルにアクセスできず、
HTMLファイルをどうやってChromeで表示すればよいか悩みました。

 解決策
Macの場合：
open -a "Google Chrome" index.html
または...]]></description><link>https://zenn.dev/sudonotfound/articles/f331a30ba47ba8</link><guid isPermaLink="true">https://zenn.dev/sudonotfound/articles/f331a30ba47ba8</guid><pubDate>Tue, 17 Jun 2025 09:15:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--izWjj-DR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTML%25E4%25BF%25AE%25E6%25AD%25A3%25E4%25BD%259C%25E6%25A5%25AD%25E3%2581%25A7%25E5%259B%25B0%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A8%25E8%25A7%25A3%25E6%25B1%25BA%25E7%25AD%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sudonotfound%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkMDNlYjQ3MWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sudonotfound</dc:creator></item><item><title><![CDATA[Linux:gitリポジトリを一時的にweb公開するscript]]></title><description><![CDATA[gitは "git instaweb" でカレントのリポジトリをweb公開できて、webブラウザからlogやdiffがとれる。
特に複数のbranchを持っている状態のときにあちこちのbranchに移動しつつ参照できて便利だなと思う。
便利だけど、数十人のproject等でサーバマシンを共有している場合にportがかぶるとやだなって思ったので、開いているportを自動で割り当ててinstawebするshell-scriptを書いた。
"webgit.sh start" &nbsp; で開始して
"webgit.sh stop" &nbsp;で停止する

表示イメージ



#!/bin/...]]></description><link>https://zenn.dev/nfukuoka/articles/qiita-20181104-c3f179d1045cca658360</link><guid isPermaLink="true">https://zenn.dev/nfukuoka/articles/qiita-20181104-c3f179d1045cca658360</guid><pubDate>Sat, 14 Jun 2025 05:07:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Zrj6NP2L--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%253Agit%25E3%2583%25AA%25E3%2583%259D%25E3%2582%25B8%25E3%2583%2588%25E3%2583%25AA%25E3%2582%2592%25E4%25B8%2580%25E6%2599%2582%25E7%259A%2584%25E3%2581%25ABweb%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258Bscript%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nfukuoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRhZmNmOTYyNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nfukuoka</dc:creator></item><item><title><![CDATA[Linux: od でちょっと見慣れた感じに表示]]></title><description><![CDATA[od、デフォルト表示だとちょっと見辛いので、hex とasciiをどこかで見た風に表示するよう指定する
od -v -t x1z -Ax

表示例

$ od -v -t x1z -Ax b.out
000000 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  &gt;.ELF............&lt;
000010 02 00 03 00 01 00 00 00 60 83 04 08 34 00 00 00  &gt;........`...4...&lt;
000020
]]></description><link>https://zenn.dev/nfukuoka/articles/qiita-20181104-c36ec710482e903a2528</link><guid isPermaLink="true">https://zenn.dev/nfukuoka/articles/qiita-20181104-c36ec710482e903a2528</guid><pubDate>Sat, 14 Jun 2025 05:05:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cyHlxAvk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%253A%2520od%2520%25E3%2581%25A7%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8%25E8%25A6%258B%25E6%2585%25A3%25E3%2582%258C%25E3%2581%259F%25E6%2584%259F%25E3%2581%2598%25E3%2581%25AB%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nfukuoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRhZmNmOTYyNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nfukuoka</dc:creator></item><item><title><![CDATA[Android: "adb server is out of date. killing..."]]></title><description><![CDATA[初稿2010/7
#はじめに
adbはserverとclientのversionが食い違っていると、
"adb server is out of date. killing..."を出力して、serverを再起動してしまいます。
同一LAN上に複数のターゲットと1台の共有Linuxサーバがぶら下がっていてみんなで開発したりする場合、共有linuxサーバ上でみんなが起動するadb-clientのversionを合わせるように気をつける必要があります。
このような場合、adbは以下のプロセス構成で動いていて、serverはadb-client起動時に(既に起動していなければ)自動的に起動され...]]></description><link>https://zenn.dev/nfukuoka/articles/qiita-20181104-352170e6077b7719efa5</link><guid isPermaLink="true">https://zenn.dev/nfukuoka/articles/qiita-20181104-352170e6077b7719efa5</guid><pubDate>Sat, 14 Jun 2025 05:01:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JaO2AJuM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%253A%2520%2522adb%2520server%2520is%2520out%2520of%2520date.%2520killing...%2522%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nfukuoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRhZmNmOTYyNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nfukuoka</dc:creator></item><item><title><![CDATA[【Python】引数をつけてPythonからShellを実行！]]></title><description><![CDATA[
 📕 概要
・複数の引数を指定して Python から shellを実行する。
・今回はdebug用のShellも利用

 🔣 サンプルコード
・引数をつけて shell を実行するPythonのプログラム
import subprocess
result = subprocess.run(["/tmp/sample/debug.sh", "TEST", "APPLE", "GOOGLE", "MICROSOFT" ,"Amazon"], capture_output=True, text=True)
print(result.stdout)  # 標準出力: 実行したスクリプトが出力...]]></description><link>https://zenn.dev/qa_dev/articles/bc685d780ac422</link><guid isPermaLink="true">https://zenn.dev/qa_dev/articles/bc685d780ac422</guid><pubDate>Thu, 12 Jun 2025 11:19:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tKUlaDV9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591%25E5%25BC%2595%25E6%2595%25B0%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2581%25A6Python%25E3%2581%258B%25E3%2582%2589Shell%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qa_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGRfRnVZcmtndVIzVW1ScTVFMWdDMmozVmR4cFRjV29uUTJYd2JOQ2RhQ3ltaEFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qa_dev</dc:creator></item><item><title><![CDATA[【Shell】練習用の模擬インストーラー]]></title><description><![CDATA[
 📕 概要
・installツールもどき

 🐍 この記事を書いたきっかけというか流れ
1 Shellで動くインストール作業をPythonで自動化したい!!!
↓
2 インストール時の標準出力を解析し、あらかじめ登録した情報を自動入力するアイデアが浮上
↓
3 そのアイデアを試す練習用ツールが必要だった
↓
4 やってみよう

 🔣 サンプルコード
#!/bin/bash

# スクリプトの開始メッセージ
echo "=== 勉強用シェルスクリプト ==="

# 1回目の質問: 利用規約の同意
read -p "利用規約に同意しますか？ (yes/no): " agreement
a...]]></description><link>https://zenn.dev/qa_dev/articles/a7bdae74dc2369</link><guid isPermaLink="true">https://zenn.dev/qa_dev/articles/a7bdae74dc2369</guid><pubDate>Thu, 12 Jun 2025 11:18:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vsh1b2X6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Shell%25E3%2580%2591%25E7%25B7%25B4%25E7%25BF%2592%25E7%2594%25A8%25E3%2581%25AE%25E6%25A8%25A1%25E6%2593%25AC%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qa_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGRfRnVZcmtndVIzVW1ScTVFMWdDMmozVmR4cFRjV29uUTJYd2JOQ2RhQ3ltaEFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qa_dev</dc:creator></item><item><title><![CDATA[【Linux】cron（クーロン）で30分ごとにジョブを実行する方法と登録例30個]]></title><description><![CDATA[
 Linux
Linuxのcron（クーロン）を使って、30分おきにスクリプトやコマンドを実行する設定方法を紹介します。


 🕒 基本のcron設定（30分おき）
*/30 * * * * /path/to/your/command.sh

 各フィールドの意味：
┌──────────── 分（0〜59）
│ ┌────────── 時（0〜23）
│ │ ┌──────── 日（1〜31）
│ │ │ ┌────── 月（1〜12）
│ │ │ │ ┌──── 曜日（0〜7）※0と7は日曜
│ │ │ │ │
*/30 * * * * ← 30分ごと


 ✅ 登録手順

ターミ...]]></description><link>https://zenn.dev/qa_dev/articles/421293e124db5a</link><guid isPermaLink="true">https://zenn.dev/qa_dev/articles/421293e124db5a</guid><pubDate>Wed, 11 Jun 2025 09:36:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q-xBo5bf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Linux%25E3%2580%2591cron%25EF%25BC%2588%25E3%2582%25AF%25E3%2583%25BC%25E3%2583%25AD%25E3%2583%25B3%25EF%25BC%2589%25E3%2581%25A730%25E5%2588%2586%25E3%2581%2594%25E3%2581%25A8%25E3%2581%25AB%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%2596%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8%25E7%2599%25BB%25E9%258C%25B2%25E4%25BE%258B30%25E5%2580%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qa_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGRfRnVZcmtndVIzVW1ScTVFMWdDMmozVmR4cFRjV29uUTJYd2JOQ2RhQ3ltaEFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qa_dev</dc:creator></item><item><title><![CDATA[`sh` と `bash` の違い]]></title><description><![CDATA[
#!/bin/sh
#!/bin/bash

どちらもシバンであるが、微妙に挙動が異なる。set -euo pipefail効いてなくない？なんてことに遭遇もしたので調べてみた。

 sh と bash の違い



項目

sh（Bourne Shell）

bash（Bourne Again Shell）




正式名称
Bourne Shell
Bourne Again Shell


開発者
Stephen Bourne（AT&amp;T）
GNUプロジェクト


登場時期
1979年（UNIX V7）
1989年（GNU Bash 1.0）


互換性
POSIX準拠、他シ...]]></description><link>https://zenn.dev/takeo/articles/3eaae904296437</link><guid isPermaLink="true">https://zenn.dev/takeo/articles/3eaae904296437</guid><pubDate>Sun, 08 Jun 2025 23:39:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tUGaD6-c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2560sh%2560%2520%25E3%2581%25A8%2520%2560bash%2560%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takeo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiNjIxNWNiNzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takeo</dc:creator></item><item><title><![CDATA[Rustで学ぶシェルの簡単な構造]]></title><description><![CDATA[
 はじめに
いつも何気なく使っているシェル、中身どうなっているんだろう、、こんな感じなのかな〜みたいなのは前から想像を膨らませてながら仕事していた日々。
ふとRustでシェルが公開されているのを見て、「せっかくだし自分でもつくって、さわってみよ」という軽い気持ちで作ってみましたので何かの参考になれば幸いです。

 開発環境

MacOS Monterey 12.6
docker 20.10.17
rust 1.60 （dockerコンテナ内）


 ディレクトリ, ファイル構成
下記のような構成になってます。
今回コンテナひとつなのでcomposeいらないかなとも思いましたが、軽い気持...]]></description><link>https://zenn.dev/m2lab/articles/7361d41918a6e8</link><guid isPermaLink="true">https://zenn.dev/m2lab/articles/7361d41918a6e8</guid><pubDate>Sun, 08 Jun 2025 13:33:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RexzDXSG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2581%25AE%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E6%25A7%258B%25E9%2580%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masa0209%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4ZWJkMzI1Y2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masa0209</dc:creator></item><item><title><![CDATA[shellscript の '$@' は、とても便利だった]]></title><description><![CDATA[
 概要
shell script には、 全コマンドライン引数を扱う $@ という値が用意されています。
先日、 $@ のユースケースを学ぶ機会があり、その効果に驚きました。
学んだユースケースと共に、 $@ の効果を少しでも伝えられればと思います。

 $@ とは
シェルスクリプトにて使用できる、全コマンドライン引数を格納した変数です。
$@ を参照することで、全コマンドライン引数をまとめて扱うことが出来ます。

at_sample.sh
echo "$@"

$ bash at_sample.sh hoge fuga
hoge fuga

$ bash at_sample.sh f...]]></description><link>https://zenn.dev/t0mmy/articles/versatility-of-at-in-shell-script</link><guid isPermaLink="true">https://zenn.dev/t0mmy/articles/versatility-of-at-in-shell-script</guid><pubDate>Sat, 07 Jun 2025 12:41:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MVF3ox1D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:shellscript%2520%25E3%2581%25AE%2520%2527%2524%2540%2527%2520%25E3%2581%25AF%25E3%2580%2581%25E3%2581%25A8%25E3%2581%25A6%25E3%2582%2582%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t0mmy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cwOV9uUGFwUktkM1E4VnVoc25fY0pSZTEzZmtPZTBseFpEbTNhNGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t0mmy</dc:creator></item></channel></rss>