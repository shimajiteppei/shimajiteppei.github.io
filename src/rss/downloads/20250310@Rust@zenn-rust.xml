<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 10 Mar 2025 07:34:04 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rustのデータ構造をナビゲート：ベクターからハッシュセットへ]]></title><description><![CDATA[
Rust の標準ライブラリには、基本的なデータ構造として、ベクター（Vec&lt;T&gt;）、ハッシュマップ（HashMap&lt;K, V&gt;）、および集合（HashSet&lt;T&gt;）が提供されています。これらの 3 つのデータ構造は、ほとんどのプログラミングシナリオで最も一般的で有用なものです。Rust の目標である「安全性」「並行性」「実用性」に適合する形で設計・提供されており、データの格納とアクセスのニーズを満たしながら、標準ライブラリの軽量性と効率性を維持しています。

 ベクター（Vec&lt;T&gt;）
ベクターは、Rust で最も一般的に使用される動的配...]]></description><link>https://zenn.dev/leap_adam/articles/fb3d83d3fc0b3e</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/fb3d83d3fc0b3e</guid><pubDate>Sun, 09 Mar 2025 19:00:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nM9WK2Em--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E3%2583%258A%25E3%2583%2593%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259A%25E3%2583%2599%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%258B%25E3%2582%2589%25E3%2583%258F%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[ABC396:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 396のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc396/tasks/abc396_a
解説
隣接する3つの値が同じかどうかをチェックします。全て試して1箇所でも見つかればYes 、見つからなければ No を出力します。
コード

abc396a.rs
use proconio::input;
fn main() {
    // 入力
    input!{
        n: usize,
        a: [usize; n],
   ...]]></description><link>https://zenn.dev/nakst_hide/articles/f841b31744ee0d</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/f841b31744ee0d</guid><pubDate>Sun, 09 Mar 2025 14:02:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WhVeVOb7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC396%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[DuckDB の拡張を Rust で書けるらしいので調べてみた（2025年3月時点）]]></title><description><![CDATA[DuckDB は v1.2.0 で C extension API というものが追加されました。これによって、C で拡張を書けるのみならず、Rust や Go などの C FFI を使えるプログラミング言語でも（その C extension API へのバインディングがあれば）書けるようになりました。
https://duckdb.org/2025/02/05/announcing-duckdb-120.html
実際、Rust 実装の拡張を書くテンプレートが公式に用意されています。
https://github.com/duckdb/extension-template-rs
とはいえ...]]></description><link>https://zenn.dev/yutannihilation/articles/663c879b74343c</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/663c879b74343c</guid><pubDate>Sun, 09 Mar 2025 03:40:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e4XaMGjs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DuckDB%2520%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2591%25E3%2582%258B%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%25882025%25E5%25B9%25B43%25E6%259C%2588%25E6%2599%2582%25E7%2582%25B9%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[Rustのクロージャの仕組み：Fn、FnMut、FnOnce]]></title><description><![CDATA[
Rust プログラミング言語において、クロージャ（closures）は非常に強力で柔軟な機能であり、無名関数を定義し、その環境内の変数をキャプチャすることができます。Rust のクロージャシステムは、Fn、FnMut、FnOnce という 3 つのコアトレイトによって定義されます。これらのトレイトは、クロージャがキャプチャした変数とどのように相互作用するか、何回呼び出せるか、環境を変更できるかを決定します。これらの理解は、Rust のクロージャメカニズムを習得し、効率的で安全なコードを書くために不可欠です。
本記事では、Fn、FnMut、FnOnce の 3 つのトレイトについて詳しく...]]></description><link>https://zenn.dev/leap_adam/articles/a29c3ce6f5fd59</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/a29c3ce6f5fd59</guid><pubDate>Sat, 08 Mar 2025 21:34:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4JAa-ZJA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25EF%25BC%259AFn%25E3%2580%2581FnMut%25E3%2580%2581FnOnce%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rustの所有権について入門した]]></title><description><![CDATA[
 はじめに
最近Rustに入門し、「The Rust Programming Language」でRustの基礎を学んでいます。今回は復習として重要な概念である「所有権」について、私自身がつまずきやすかった点や、重要だと感じた点を簡潔にまとめています。
所有権は、Rustがメモリ安全性を保証するための強力な仕組みであり、これを理解することで、メモリリークやダングリングポインタといったバグをコンパイル時に防ぐことができます。これは、Rustが高速でありながら安全なシステムプログラミング言語として注目される大きな理由の一つです。
この記事では、所有権の基本から、ムーブ、クローン、コピー、借...]]></description><link>https://zenn.dev/youcangg/articles/87ba6dd6099523</link><guid isPermaLink="true">https://zenn.dev/youcangg/articles/87ba6dd6099523</guid><pubDate>Sat, 08 Mar 2025 13:56:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ROYvNUM---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:youcangg%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsveS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>youcangg</dc:creator></item><item><title><![CDATA[【Rust】所有権を完全に理解する]]></title><description><![CDATA[Rustに入門する上で最初の壁となる概念は「所有権」でしょう。Rustの所有権を中心にしたメモリ管理は非常に強力な機能ですが、プログラマに厳密な所有権の管理を要求するため、初心者がつまづきやすい点でもあります。
この記事では他言語との比較を交えつつ、Rustの所有権の基本的な考え方についてを学んでいきます。

 メモリ管理
所有権の細かい話を始める前に、まずはメモリ管理の概要を掴むところから始めましょう。
Rustに限らず、あらゆる言語ではプログラム上で確保された値はメモリのどこかに保持されます。また、メモリ領域には主にスタックとヒープの2種類があり、Rustの場合はデフォルトでは全ての...]]></description><link>https://zenn.dev/nuskey/articles/6c2831abd68d7d</link><guid isPermaLink="true">https://zenn.dev/nuskey/articles/6c2831abd68d7d</guid><pubDate>Sat, 08 Mar 2025 10:47:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i14bHeD_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nuskey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkZTM4NWZlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nuskey</dc:creator></item><item><title><![CDATA[Rust × Rocket で作る！TODOアプリ完全ガイド【完成コード付き】]]></title><description><![CDATA[Rust初心者でWeb開発経験がある方へ向けた実践書。Rust製Webフレームワーク Rocket を使い、ログイン機能付きのTODOアプリを開発します。SQLiteを用いたデータ管理やCookie認証を実装し、実際に動作するアプリを作りながら学べます。RustでのWeb開発を始めたい方に最適！]]></description><link>https://zenn.dev/tcool/books/9b65225abf2ad1</link><guid isPermaLink="true">https://zenn.dev/tcool/books/9b65225abf2ad1</guid><pubDate>Sat, 08 Mar 2025 08:31:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1Dh2eEyj--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci81NDRhMDdjMTE1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>t-cool</dc:creator></item><item><title><![CDATA[Rustでダイクストラ法 (優先度つきキューと一緒)]]></title><description><![CDATA[
 TL;DR

重みのある無向辺グラフの任意の点の最短経路を求める方法の一つがダイクストラ法

訪問したノードに始点からの最短距離を記録
候補を待ち行列に入れて､各点の最短距離を更新する


優先度付きキューを扱う場合､std::collections::BinaryHeapを使う

Min-Heapにしたい場合は`BinaryHeap&lt;Reverse&lt;T&gt;&gt;

(または目標値を構造体でラップしてOrdトレイトを実装する(後述))


挿入コストはO(\log_2 N) (Nは要素数)
最大(最小)要素を取り出すのはO(1)





 はじめに
std::co...]]></description><link>https://zenn.dev/ahoxa1rx/articles/02203406be0003</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/02203406be0003</guid><pubDate>Sat, 08 Mar 2025 01:49:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZgsEbpui--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%2580%25E3%2582%25A4%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25A9%25E6%25B3%2595%2520%2528%25E5%2584%25AA%25E5%2585%2588%25E5%25BA%25A6%25E3%2581%25A4%25E3%2581%258D%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25BC%25E3%2581%25A8%25E4%25B8%2580%25E7%25B7%2592%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[Rust で GoogleDrive を操作する]]></title><description><![CDATA[
 Rust でGoogle APIログイン
Google API に接続する方法は大きく分けて2種類あります。


OAuth認証 - 個人ユーザーの権限で操作（今回使用）

サービスアカウント - バックグラウンド処理などロボット用の権限

今回は一般的なユースケースであるOAuth認証を使用します。

 Google Cloud でプロジェクトを作成
まずは Rust プログラムから Google Drive API にアクセスできるようにしましょう。 client_secret.json というプログラムから Google Drive API にアクセスするために必要な JSON...]]></description><link>https://zenn.dev/nodamushi/articles/384e104b6497f2</link><guid isPermaLink="true">https://zenn.dev/nodamushi/articles/384e104b6497f2</guid><pubDate>Fri, 07 Mar 2025 23:18:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TK42t7K7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520GoogleDrive%2520%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nodamushi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1OGJmMTkwNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nodamushi</dc:creator></item><item><title><![CDATA[Rustのマッチングで@を活用]]></title><description><![CDATA[
Rust 言語の @ 記号は強力なパターンマッチング機能を提供し、変数のバインディングをより柔軟かつ表現力豊かにします。本記事では、その基本的な使い方を例とともに紹介し、複雑なシナリオでの応用、パフォーマンス上の考慮点、およびベストプラクティスについて詳しく掘り下げます。

 列挙型のバリアントの値をバインドする
例えば、HTTP ステータスコードを表す列挙型があるとします：
#[derive(Debug)]
enum HttpStatus {
    Ok,
    NotFound,
    Unauthorized,
    Unknown(u16), // 未知のステータスコー...]]></description><link>https://zenn.dev/leap_adam/articles/bde016c8738728</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/bde016c8738728</guid><pubDate>Fri, 07 Mar 2025 19:07:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NIOr-9YE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%259E%25E3%2583%2583%25E3%2583%2581%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%2540%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【詳解】Rustで実現するクリーンアーキテクチャ&CQRS]]></title><description><![CDATA[Rustの強力な型システムと所有権モデルを活かした、堅牢で柔軟なアプリケーションを設計しよう。
　✅クリーンアーキテクチャ
　✅CQRS(Command Query Responsibility Segregation
　✅コマンド・クエリ責務分離)パターン
　✅DI(Dependency Injection, 依存性注入)パターン
　✅遅延初期化（Lazyパターン）
を組み合わせたRustならではの実装方法を考えます。]]></description><link>https://zenn.dev/kazuma0606/books/e08dd0e43d7cdb</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/books/e08dd0e43d7cdb</guid><pubDate>Fri, 07 Mar 2025 11:40:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s----sQZubV--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci81MjliM2NlNzQ1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[gRPCスキーマを活用したDTO変換パターン：型安全性と保守性の向上]]></title><description><![CDATA[
 gRPCスキーマを活用したDTO変換パターン：型安全性と保守性の向上

 はじめに
gRPCは効率的な通信プロトコルとして広く採用されていますが、Protocol Buffersで定義されたメッセージ型と実際のアプリケーションドメインモデルの実装、もしくは変換を適切に行うことが重要です。
この記事では、Rustにおいて.protoファイルから生成されたgRPCスキーマを利用してDTO（Data Transfer Object）変換を実装する方法と、そのメリットについて解説します。
※クリーンアーキテクチャに関する知識があると理解しやすいと思います。

 コードの概要
サンプルコードで...]]></description><link>https://zenn.dev/kazuma0606/articles/ca13dc98ce8ad5</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/ca13dc98ce8ad5</guid><pubDate>Thu, 06 Mar 2025 13:10:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Nq3vF8of--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:gRPC%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259FDTO%25E5%25A4%2589%25E6%258F%259B%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25EF%25BC%259A%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E6%2580%25A7%25E3%2581%25A8%25E4%25BF%259D%25E5%25AE%2588%25E6%2580%25A7%25E3%2581%25AE%25E5%2590%2591%25E4%25B8%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[メモリと仲良しになろう！[アロケータ実装編]]]></title><description><![CDATA[!
この記事は「メモリと仲良しになろう！[超入門編]」の続編です。
メモリの基礎理解から始めたい方は前回の記事を参照してください。


 はじめに
本記事は「Writing an OS in Rust」のアロケータ実装編を個人的に咀嚼するために作成しました。
不明瞭な部分がありましたら原文をご参照いただけると幸いです。

 誰のための記事か？(for whom)

メモリ上でどのようにデータが載るのかが分からない人
どのようにアロケーションが行われるか分からない人
アロケータの実装に興味がある人


 なぜ学ぶのか？ (why)

自作 OS 開発をする上での基礎的な知識として必要である...]]></description><link>https://zenn.dev/tomoikey/articles/becdcef97aa62c</link><guid isPermaLink="true">https://zenn.dev/tomoikey/articles/becdcef97aa62c</guid><pubDate>Wed, 05 Mar 2025 22:55:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--st4_d6hj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2581%25A8%25E4%25BB%25B2%25E8%2589%25AF%25E3%2581%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%255B%25E3%2582%25A2%25E3%2583%25AD%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25BF%25E5%25AE%259F%25E8%25A3%2585%25E7%25B7%25A8%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomoikey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlZTJjNDgxYzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomoikey</dc:creator></item><item><title><![CDATA[フルスタックでRust製ブログアプリを書いてみよう]]></title><description><![CDATA[
 Rust製ブログアプリの技術スタック: 軽量 &amp; 高速 &amp; 拡張性を兼ね備えた構成

 はじめに
現在、個人開発として Rust 製のブログアプリ を開発しています。本記事では、その技術スタックと設計方針について紹介します。
目的:


高速 &amp; 軽量 で、依存関係を最小限に抑えた構成


開発効率を向上 させ、デプロイの手間を最小限に


スケーラブルな設計 で、アクセス増加時にも対応可能

この構成は、MVP開発 → 本番運用へのスムーズな移行 を意識したものになっています。


 技術スタック



カテゴリ
選定技術
理由




フロントエンド
Le...]]></description><link>https://zenn.dev/kazuma0606/articles/795e8f146a9859</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/795e8f146a9859</guid><pubDate>Wed, 05 Mar 2025 13:55:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ii1apDxk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25A7Rust%25E8%25A3%25BD%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[RustとWebAssemblyでQRコードジェネレーターを作る]]></title><description><![CDATA[
 はじめに

 モチベーション
なぜこのプロジェクトを作ろうと思ったかというと、現状のQRコードを出すライブラリがどれも帯に短しタスキに長しと思ったからです。
どれも基本的な機能は揃えていますが、ビルドパフォーマンスや画像の埋め込みなどに課題があると感じています。
OSSにコミットをして、改善を図ることも考えましたが、コツコツ自分で1から作ることでRustやwasmについて詳しくなりたいと思ったので、自分のプロジェクトとしてスタートすることにしました。
今回の記事ではやったことをざざっと振り返りながら書いているので、不明な点などはコメントをいただけると嬉しいです。

 WebAssem...]]></description><link>https://zenn.dev/rem/articles/d777930df82208</link><guid isPermaLink="true">https://zenn.dev/rem/articles/d777930df82208</guid><pubDate>Wed, 05 Mar 2025 11:45:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kiqJ8Bfl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8WebAssembly%25E3%2581%25A7QR%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rem%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c3ZkdxZXZ1SjhKODktVElvZnNWOXoyT2hJLVlFR0dnTnhfS1hKQWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rem</dc:creator></item><item><title><![CDATA[[深層強化学習] RustでDQN (Deep Q Network) をフルスクラッチで実装してみた]]></title><description><![CDATA[※ 2025/03/01にqiitaに投稿した記事を同じ内容でzennに投稿してます。

 はじめに
個人開発しているRust製の強化学習フレームワーク（ReinforceX）にDQNを実装したので、それについて解説する記事です。
gitレポジトリはこちらになります（もしこの記事が良かったらStarを付けてもらえると、やる気がでます！）。
また、crates.ioにもreinforcexという名のクレートとして公開しています。

 本記事でやること

実装したDQNでCartPoleを学習してみる
APIについての解説
DQNの実装についての解説（下記の実装も含む）

ε-greedy法...]]></description><link>https://zenn.dev/kakky_hacker/articles/652bd7f9a1e6c1</link><guid isPermaLink="true">https://zenn.dev/kakky_hacker/articles/652bd7f9a1e6c1</guid><pubDate>Wed, 05 Mar 2025 09:41:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TY9z32XN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E6%25B7%25B1%25E5%25B1%25A4%25E5%25BC%25B7%25E5%258C%2596%25E5%25AD%25A6%25E7%25BF%2592%255D%2520Rust%25E3%2581%25A7DQN%2520%2528Deep%2520Q%2520Network%2529%2520%25E3%2582%2592%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2581%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kakky_hacker%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUl0YnZtbmFhSmE3WHdXV2ZCS0lXcTdoQ3lmYmdzdG0ydzVuY0dVMWh0eFk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kakky_hacker</dc:creator></item><item><title><![CDATA[TauriでもRustで爆速描画したい]]></title><description><![CDATA[
 はじめに
皆さんこの記事は読みましたでしょうか？
https://zenn.dev/1step621/articles/8daee458b5140b
この記事を書いたのは僕の友達で、レンダリングについて色々調べていたら知見が溜まってきたので記事にしました。

 課題点
一応ここでも挙げておくと

Rustで画像を処理したとしてもフロントに送るのが遅い
wasmはnative Rustよりは遅い (ロマンが足りない)
+Linuxだとwasmは現状並列化ができない (SharedArrayBufferが有効にできないため)

↓
じゃあRustで直接描画するしかない！！
となるわけです...]]></description><link>https://zenn.dev/yadokani389/articles/rendering-with-rust-in-tauri-20250305</link><guid isPermaLink="true">https://zenn.dev/yadokani389/articles/rendering-with-rust-in-tauri-20250305</guid><pubDate>Wed, 05 Mar 2025 04:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RXqD_Nth--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2581%25A7%25E3%2582%2582Rust%25E3%2581%25A7%25E7%2588%2586%25E9%2580%259F%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yadokani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEJMaDBkMjJOWkJSV3NVZnQxekxQcmlWUnduUXltYjREV0w4SnR4b0ZKNjEyQ19zND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yadokani</dc:creator></item><item><title><![CDATA[Rustのライフタイム徹底解説：メモリ管理を理解する]]></title><description><![CDATA[

 ライフタイムとは

 ライフタイムの定義
Rust において、すべての参照（リファレンス）にはライフタイムが存在します。つまり、その参照が指している値がメモリ上に存在する期間（または、参照がコード内で有効な行数）を指します。ライフタイムは、参照がそのライフタイム全体にわたって有効であることを保証するために使用されます。これは、参照の安全性を確保するために不可欠です。
fn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {
    if x.len() &gt; y.len() {
      ...]]></description><link>https://zenn.dev/leap_adam/articles/7380d78930083a</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/7380d78930083a</guid><pubDate>Tue, 04 Mar 2025 17:57:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UrcWK4-2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【bevy_baby】Bevyを使ってデスクトップマスコットを開発中です【OSS】]]></title><description><![CDATA[
 リンク
バイナリはitch.ioで公開しています！
まだα版ですがよかったらお試しください。
https://notelm.itch.io/bevy-baby
オープンソースで公開しています。
不具合などありましたらIssue頂けると助かります。
PRも歓迎しております。
https://github.com/not-elm/bevy_baby

 はじめに

ウィンドウの上に座らせることができます

複数のマスコットを配置できます
Bevy、Blender、VRMの学習を兼ねてBevyというRust製のゲームエンジンを使ってデスクトップマスコットの制作を始めました。
マスコットの表...]]></description><link>https://zenn.dev/elm/articles/260d0e8caa5957</link><guid isPermaLink="true">https://zenn.dev/elm/articles/260d0e8caa5957</guid><pubDate>Tue, 04 Mar 2025 15:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Iqrbnl7e--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590bevy_baby%25E3%2580%2591Bevy%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2583%259E%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%25E4%25B8%25AD%25E3%2581%25A7%25E3%2581%2599%25E3%2580%2590OSS%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:notelm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4NWNhMmQ2OTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>notelm</dc:creator></item><item><title><![CDATA[メモリと仲良しになろう！[Private Field アクセス編]]]></title><description><![CDATA[
 誰のための記事か？(for whom)

メモリ上でどのようにデータが載るのかが分からない人


 なぜ学ぶのか？ (why)

メモリ上にデータがどのように展開されるかを知り、メモリへの知見を深めるため


 はじめに
実はプライベートフィールドにアクセスするという話は各所で擦られまくっている話です。
であるにも関わらず、なぜこの話題を再び掘り起こしたのか。
それは「メモリの基礎を理解するために最も適した遊びだから」です。
この記事を通して、さらなるメモリへの理解へと繋げていただけると幸いです。

 1. 前回の記事を軽く振り返る
https://zenn.dev/tomoikey...]]></description><link>https://zenn.dev/tomoikey/articles/20f99256507362</link><guid isPermaLink="true">https://zenn.dev/tomoikey/articles/20f99256507362</guid><pubDate>Tue, 04 Mar 2025 14:05:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E-I-v14j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2581%25A8%25E4%25BB%25B2%25E8%2589%25AF%25E3%2581%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%255BPrivate%2520Field%2520%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E7%25B7%25A8%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomoikey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlZTJjNDgxYzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomoikey</dc:creator></item></channel></rss>