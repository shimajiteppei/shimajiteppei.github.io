<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「shell」のフィード]]></title><description><![CDATA[Zennのトピック「shell」のRSSフィードです]]></description><link>https://zenn.dev/topics/shell</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/c8d33e6510.jpeg</url><title>Zennの「shell」のフィード</title><link>https://zenn.dev/topics/shell</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 05 Oct 2025 12:04:21 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/shell/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[APIキーを管理してくれるシェルスクリプトを書いてみた]]></title><description><![CDATA[今回は私が普段利用しているシェルスクリプトを紹介しようと思います。

 紹介するもの！
今回紹介するのはAPIキーを管理してくれる機能になります。私は普段ブログを書くにあたり様々なサービスを利用しており、各サービスごとにAPIキーの利用があります。例えばAPIキーを利用しているサービスは以下になります。

Datadog
Gemini
OpenAI
Traceloop

これらのAPIキーを利用するときに、毎回ウェブサイトに行ってチェックするのも嫌ですし、平文でローカルに保存するのもよろしくないです。かといってAPIキーを暗記するなんて普通に考えてできないので実質不可能です。
これらの課...]]></description><link>https://zenn.dev/akasan/articles/439250ff299f5b</link><guid isPermaLink="true">https://zenn.dev/akasan/articles/439250ff299f5b</guid><pubDate>Mon, 29 Sep 2025 12:40:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yw4RCWro--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:API%25E3%2582%25AD%25E3%2583%25BC%25E3%2582%2592%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258B%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akasan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJfNDFtel9OY3dPYUtMRE1vc09tbVB6YmxHM0V5N3lNZzI3QWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Akasan</dc:creator></item><item><title><![CDATA[いますぐ Mac の CLI から Windows で文字化けしない ZIP ファイルを作りたい僕たち私たち]]></title><description><![CDATA[
 これはなに

令和にもなって未だに macOS Finder で zip 作ったら Windows で文字化けして悲しい
CLI でサクッと Windows / macOS / Linux 全対応の zip ファイルを作りたい
ありがちな文字化けの原因は以下 2 点らしいので、それぞれ対応したい

macOS の Unicode 正規化形式 NFD について、一般的な NFC に寄せるのが丸いぽい
Windows では zip 解凍時のファイル名の解釈の仕様が「UTF-8 フラグがあれば UTF-8 で、なければ OS 標準の CP932 で解釈」になってるらしいので、UTF-8 フ...]]></description><link>https://zenn.dev/yano3nora/articles/62b82cda9cc84e</link><guid isPermaLink="true">https://zenn.dev/yano3nora/articles/62b82cda9cc84e</guid><pubDate>Thu, 25 Sep 2025 09:11:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qljlQlXV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2584%25E3%2581%25BE%25E3%2581%2599%25E3%2581%2590%2520Mac%2520%25E3%2581%25AE%2520CLI%2520%25E3%2581%258B%25E3%2582%2589%2520Windows%2520%25E3%2581%25A7%25E6%2596%2587%25E5%25AD%2597%25E5%258C%2596%25E3%2581%2591%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%2520ZIP%2520%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E5%2583%2595%25E3%2581%259F%25E3%2581%25A1%25E7%25A7%2581%25E3%2581%259F%25E3%2581%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:y3n%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dKQTFfMXEzNTlBd1FhRFU2blRUVEhMRV9IUTd4MmZaT2xTYTBnbVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>y3n</dc:creator></item><item><title><![CDATA[Agentic Coding の workflow でよく見る argument-hint の書き方]]></title><description><![CDATA[Cladue Code の Custom Slash Command や、Roo Code の Slash Command などでコマンドのメタデータとして、argument-hint が与えらえる仕組みがあります。
これらの情報はある程度文脈が読み取れる形で渡っていれば LLM の解釈をへていい感じに処理されます。なので厳密に間違っていない状態を目指さなくてもいいっちゃいいし、それなりに動いちゃいます。
が、まあ、気になるよねということで、自分なりに書き方の調査をしたので、メモとして残しておこうと思います。

 [] を使うパターン
任意 (optional) を表す
よく使う -- ...]]></description><link>https://zenn.dev/him0/articles/c0c45072bd1378</link><guid isPermaLink="true">https://zenn.dev/him0/articles/c0c45072bd1378</guid><pubDate>Mon, 22 Sep 2025 18:21:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--85uDY8t4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Agentic%2520Coding%2520%25E3%2581%25AE%2520workflow%2520%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E8%25A6%258B%25E3%2582%258B%2520argument-hint%2520%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:him0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dRTXIzNWdhNThKaFBycnVmcnhsbzVBVHhTdGtFUTBGaFRUalFxdUE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>him0</dc:creator></item><item><title><![CDATA[Mac ターミナルの設定ファイル .zprofile と .zshrc をやさしく解説]]></title><description><![CDATA[ターミナル設定で必ず出てくるのが .zprofile と .zshrc。
「どちらに何を書くのか？」を整理しつつ、VSCode や GUI アプリまで PATH/環境変数が正しく反映される方法まで解説します。

 結論（最初にざっくり）


.zprofile … ログインシェル のとき一度だけ読む → PATH/環境変数/初期化 を書く

.zshrc …… インタラクティブシェル が起動するたび読む → 補完/エイリアス/プロンプト を書く
Terminal.app、設定で "デフォルトのログインシェル" となっていることを確認

VSCode などはデフォルトで非ログインシェル →...]]></description><link>https://zenn.dev/takna/articles/mac-terminal-setting-files</link><guid isPermaLink="true">https://zenn.dev/takna/articles/mac-terminal-setting-files</guid><pubDate>Tue, 16 Sep 2025 02:47:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fpBC0iHv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mac%2520%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%2520.zprofile%2520%25E3%2581%25A8%2520.zshrc%2520%25E3%2582%2592%25E3%2582%2584%25E3%2581%2595%25E3%2581%2597%25E3%2581%258F%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AA%25E3%2581%258C%25E3%2581%259F%25E3%2581%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhMTdlMmFmNjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ながたく</dc:creator></item><item><title><![CDATA[ターミナル起動時間を1.3秒→0.1秒に高速化した話]]></title><description><![CDATA[
 はじめに
ターミナルを開くたびに「なんか遅いな...」と感じていませんか？
私も日々の開発作業でターミナルを頻繁に使うのですが、起動に 1 秒以上かかるのが地味にストレスでした。今回、zsh の設定を見直すことで1.3 秒 →0.1 秒まで高速化できたので、その方法を共有します。

 現状把握：何が遅くしているのか
まずは .zshrc と .zprofile の内容を確認しました。主な設定は以下の通り：


環境変数関連 (export PATH=...など)
エイリアスの設定

開発ツールのセットアップ (nvm, jenv, rbenv, pyenv)

この中で最も怪しいのは...]]></description><link>https://zenn.dev/yuta02/articles/e7917538e8c07c</link><guid isPermaLink="true">https://zenn.dev/yuta02/articles/e7917538e8c07c</guid><pubDate>Sun, 14 Sep 2025 01:56:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--na8W8Win--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E8%25B5%25B7%25E5%258B%2595%25E6%2599%2582%25E9%2596%2593%25E3%2582%25921.3%25E7%25A7%2592%25E2%2586%25920.1%25E7%25A7%2592%25E3%2581%25AB%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lpYXhweFYtd1NuN3BEeTlZdGtMemFJeTJhN0RIQUFjSEkwQjFuNGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ゆーた</dc:creator></item><item><title><![CDATA[楽しく開発するための私のターミナル設定]]></title><description><![CDATA[CodexやClaude Codeなどの普及により、ターミナル環境に触れる時間が増えた方も多いのではないでしょうか。
私自身もともとターミナル環境が好きで、日常のなかで最も長く接している画面とも言えます。

普段使っているターミナルの画面
毎日使うターミナル環境だからこそ、もっと便利に、もっと楽しく使えるものになれば素敵だと思いませんか？
そんな気持ちで私のカスタマイズについて紹介していきます。
この記事が、ターミナル環境をすこし良くする一助になれば嬉しいです 🙏

 前提
私の環境は以下の通りです。

仕事：Webエンジニア（フロントエンド）
OS：macOS 15.6.1
シェル：z...]]></description><link>https://zenn.dev/chot/articles/1d10f3a40332ab</link><guid isPermaLink="true">https://zenn.dev/chot/articles/1d10f3a40332ab</guid><pubDate>Tue, 09 Sep 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zVbolkKh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25A5%25BD%25E3%2581%2597%25E3%2581%258F%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%25A7%2581%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:arrow2nd%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmZjFmMzY0ZjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>arrow2nd</dc:creator></item><item><title><![CDATA[Gitのブランチ名にシングルクォーテーションを入れたらコマンドが面倒くさくなった]]></title><description><![CDATA[Gitのブランチ名にシングルクォーテーション（'）を含めてしまうと、Bashでそのブランチ名を扱う際に思わぬトラブルに遭遇します。この記事では、実際に遭遇した問題とその対処法についてまとめます。

 事の発端
普段通りに新しいブランチを作成しようとした際、誤ってシングルクォーテーションを含めたブランチ名を作ってしまいました。
git checkout -b feature/it's-new
この時点では特に問題なくブランチが作成されます。しかし、後からこのブランチ名をコマンドで使おうとすると、シングルクォーテーションが邪魔をして思うように動きません。

 具体的な困りごと
シングルクォー...]]></description><link>https://zenn.dev/pepepepepei/articles/e2d839248d99a1</link><guid isPermaLink="true">https://zenn.dev/pepepepepei/articles/e2d839248d99a1</guid><pubDate>Fri, 05 Sep 2025 20:27:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---7KRwlip--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Gitw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BA%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4Wm9UMklDLVpXZW5MNXFxUmVxMUxLTDRBVHNGbEQ4V2JsRFI1VnZYTmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ぺー</dc:creator></item><item><title><![CDATA[dotfilesでコーディングエージェントの共通設定を使い回す]]></title><description><![CDATA[

 はじめに
Claude Code,Codex CLI,Gemini CLI…と
様々なコーディングエージェントが出てきていますが、
それの設定を各々するの結構めんどくさくないですか？
あと、PC 吹っ飛んだときとかに
それのバックアップ取ってないと
最初から設定やり直し…なんてこともザラにあると思います。
今回は、Dotfiles という
「なんか設定ファイル管理するやつ」を使って
この辺を整理していこうと思います。

 Dotfiles って何
この辺とか参考になると思うので読んだほうが早いです。

年末の大掃除にdotfilesをつくろう
ようこそdotfilesの世界へ #V...]]></description><link>https://zenn.dev/sotono/articles/3605803241a3e9</link><guid isPermaLink="true">https://zenn.dev/sotono/articles/3605803241a3e9</guid><pubDate>Fri, 05 Sep 2025 04:34:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c7SZ7zvV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:dotfiles%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E5%2585%25B1%25E9%2580%259A%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E5%259B%259E%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sotono%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QwM2RiYTc2MTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Sotono</dc:creator></item><item><title><![CDATA[もう迷わない！.bash_profileと.bashrcの使い分けと読み込み順のメモ]]></title><description><![CDATA[
 はじめに
Linux環境でCUIを使っていると、エイリアスや環境変数の設定で.bash_profileや.bashrcといったファイルを編集しますよね。
しかし、「.bashrcにエイリアスを書いたのに、SSHでログインし直したら使えない…なぜ？」といった経験はありませんか？
この記事では、自身のメモを元に、この2つのファイルがいつ、どのような順番で読み込まれるのか、そしてどのように使い分けるべきかを簡潔にまとめます。

 結論ファースト：シェルの種類で使い分ける
まず結論です。


.bash_profile: ログインシェルが起動する時に1回だけ読み込まれる。

.bashrc:...]]></description><link>https://zenn.dev/meantix/articles/98a1678841de89</link><guid isPermaLink="true">https://zenn.dev/meantix/articles/98a1678841de89</guid><pubDate>Tue, 02 Sep 2025 12:04:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qAI6ixPb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2582%25E3%2581%2586%25E8%25BF%25B7%25E3%2582%258F%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581.bash_profile%25E3%2581%25A8.bashrc%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A8%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E9%25A0%2586%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:meantix%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxMmZiYzIwOTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>meantix</dc:creator></item><item><title><![CDATA[rmは危険だから代替を使うように矯正したいけど明らかに消して良いファイルに対してはrmを使いたい]]></title><description><![CDATA[ファイル削除のために使う、みんな大好きrmコマンド。これの安全対策を取りました。
筆者が使用しているmacOS環境での動作を前提にしています。

 rmは危険
rmは基礎中の基礎コマンドですが、「ゴミ箱へ送る」のとはちがい、ほんとうにファイルが削除されてしまいます。
ファイルをgit管理するなど、バックアップを取っていれば復旧は可能ですが、悲劇はそういったバックアップがないときに発生するものです。新規作成したばかりでgit addする前のファイルとかね。
手が滑ってrmして消してしまうことを防ぐため、筆者は以下のようなエイリアスを設定し、確認を挟むようにしていました。
alias rm=...]]></description><link>https://zenn.dev/kawarimidoll/articles/70e473a198badf</link><guid isPermaLink="true">https://zenn.dev/kawarimidoll/articles/70e473a198badf</guid><pubDate>Fri, 29 Aug 2025 12:09:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aokkMUAd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rmrm%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kawarimidoll%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxNjFiNWRjZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>kawarimidoll</dc:creator></item><item><title><![CDATA[[WSL] 時間がかかる処理をターミナルで実行すると、終わったタイミングで画面に通知する自作コマンド]]></title><description><![CDATA[以前に mac で時間がかかる処理をターミナルで実行すると、終わったタイミングで画面に通知する自作コマンドを作成したのですが、
https://zenn.dev/tkmfujise/articles/e8b3a9b9719422
それの Windows/WSL 版です。

 SnoreToast をインストール
トーストを表示できれば何でもいいんですが、以下を使いました。
https://github.com/KDE/snoretoast

 ok コマンドを作成
D:\Apps ディレクトリに保存したので、/mnt/d/Apps/snoretoast_v0.5.2-x64/bin/Sn...]]></description><link>https://zenn.dev/tkmfujise/articles/420bbcf72010ff</link><guid isPermaLink="true">https://zenn.dev/tkmfujise/articles/420bbcf72010ff</guid><pubDate>Sun, 24 Aug 2025 14:18:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ht2zG9K---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BWSL%255D%2520%25E6%2599%2582%25E9%2596%2593%25E3%2581%258C%25E3%2581%258B%25E3%2581%258B%25E3%2582%258B%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2580%2581%25E7%25B5%2582%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%25AB%25E9%2580%259A%25E7%259F%25A5%25E3%2581%2599%25E3%2582%258B%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkmfujise%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WkRseXBFekRMdUdCUEowOWI4XzQ1Z0xSVlNhekEwQm9jR2ZhRWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tkmfujise</dc:creator></item><item><title><![CDATA[セキュリティ・キャンプ2025 ジュニア『オリジナルのコマンドを作ろう！』講義資料公開]]></title><description><![CDATA[セキュリティ・キャンプ2025 ジュニアの講義『オリジナルのコマンドを作ろう！』で中学生にシェル芸・Git・正規表現を叩き込んだときの資料を公開しました。

講義時間：4時間
https://www.ipa.go.jp/jinzai/security-camp/2025/camp/junior/program.html#j1
ぜひご活用ください！
今後に向けて、ご意見やフィードバックをお待ちしております。
]]></description><link>https://zenn.dev/asusn/articles/8b19e6110006c7</link><guid isPermaLink="true">https://zenn.dev/asusn/articles/8b19e6110006c7</guid><pubDate>Sun, 17 Aug 2025 13:32:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AZhVQjEu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25BB%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%25B3%25E3%2583%25972025%2520%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%258B%25E3%2582%25A2%25E3%2580%258E%25E3%2582%25AA%25E3%2583%25AA%25E3%2582%25B8%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%25E3%2580%258F%25E8%25AC%259B%25E7%25BE%25A9%25E8%25B3%2587%25E6%2596%2599%25E5%2585%25AC%25E9%2596%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:asusn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXhRd0E2aHhFMEVoQnc2TmJpenRXc1hCVmZ4WmgtWmV3ZHhMTjFSQ040aUczdkZtOD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>asusn</dc:creator></item><item><title><![CDATA[AWKを超えて：HaskellをUnixパイプラインに持ち込む]]></title><description><![CDATA[
 1. 開発者の日常から生まれた課題

 「実務でもっとHaskellを使いたい。」
関数型プログラミングの美しさを知ってしまった開発者にとって、これは切実な願いです。しかし現実には「実用的でない」「導入コストが高い」といった理由で敬遠され、職場でHaskellを使う機会はほとんどありません。
せめて日常のちょっとした作業でHaskellを使えないでしょうか？ふと見ると、シェルのパイプラインはまるで関数合成のようです。
cat file | grep pattern | sort | uniq
パイプライン = 関数合成。この直感に「Haskellが入り込めるはずだ」という思いが強まり...]]></description><link>https://zenn.dev/koheiwada/articles/d10e206d9e66f0</link><guid isPermaLink="true">https://zenn.dev/koheiwada/articles/d10e206d9e66f0</guid><pubDate>Sat, 16 Aug 2025 04:41:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L0JDjaBK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWK%25E3%2582%2592%25E8%25B6%2585%25E3%2581%2588%25E3%2581%25A6%25EF%25BC%259AHaskell%25E3%2582%2592Unix%25E3%2583%2591%25E3%2582%25A4%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25AB%25E6%258C%2581%25E3%2581%25A1%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kohei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2NGViNTkyYTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>kohei</dc:creator></item><item><title><![CDATA[Systemdのlogを見るのに便利なコマンド(journalctl)]]></title><description><![CDATA[
 journalctl
一番オーソドックス. Systemdで管理されたアプリのログを見るためのコマンド.
本気で知りたいならman journalctl とか journalctl -hで見てもらえると助かるパスカル(ジョイマン).

 よく使うオプション

 -r, --reverse
逆順で表示する. つまり, 最新のものが一番上にくる. 最新のログが見たいときは結構便利
# 最新のものから表示
$ journalctl -r

 -n, --lines
最後のn行を表示する. tail コマンドに近い.
# 最後の100行を表示する
$ journalctl -n 100

 ...]]></description><link>https://zenn.dev/supurazako/articles/5c8453be5fc15c</link><guid isPermaLink="true">https://zenn.dev/supurazako/articles/5c8453be5fc15c</guid><pubDate>Wed, 13 Aug 2025 13:02:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GBqnj8VR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Systemd%25E3%2581%25AElog%25E3%2582%2592%25E8%25A6%258B%25E3%2582%258B%25E3%2581%25AE%25E3%2581%25AB%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%2528journalctl%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:supurazako%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzUyVEFlamlSSnl0SndsQkk5a3dOZGc4M3pwVUlRYWxzUmJQQWpfRTgtbGo4aWdQSlU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>supurazako</dc:creator></item><item><title><![CDATA[新入社員PCセットアップが5分で完了！? Bash×AppleScriptで作る自動化スクリプト]]></title><description><![CDATA[
 インターンで作った「PCキッティング自動化スクリプト」を紹介
初めまして！文系からフルスタックエンジニアを目指している大学生のIryuと申します！！
現在医療系スタートアップでインターンをしているのですが、このタスクは記事化してもいいよと許可をいただいたということで、今回は非エンジニアの事務メンバーでも使える（コマンド操作ほぼなし） 、Mac の初期設定が自動で完了する「PCキッティング自動化スクリプト」を紹介します！
このスクリプトを作ってから、実質作業時間は 30分→5分 に短縮し、事務メンバーから好評をいただきました！予算をかけずにサクッとMacの初期設定を自動化したい人はぜひ...]]></description><link>https://zenn.dev/iryu/articles/48a64508c4354b</link><guid isPermaLink="true">https://zenn.dev/iryu/articles/48a64508c4354b</guid><pubDate>Sun, 10 Aug 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KXDXX4ox--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E5%2585%25A5%25E7%25A4%25BE%25E5%2593%25A1PC%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%258C5%25E5%2588%2586%25E3%2581%25A7%25E5%25AE%258C%25E4%25BA%2586%25EF%25BC%2581%253F%2520Bash%25C3%2597AppleScript%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Iryu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxMjU4NjNhMzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Iryu</dc:creator></item><item><title><![CDATA[開発に使っているアプリケーションリストアップしてみた]]></title><description><![CDATA[今回は普段の開発作業などで利用しているアプリケーションについて一覧にしてみました。

 メモ系

 Notion
Notionは個人環境でドキュメント管理やメモとかで多用しています。ブログネタ考えたりナレッジ蓄積に大いに役立っています。
https://www.notion.com/ja

 IDE系

 Cursor
Cursorはもう説明はいらないでしょう。みなさんお馴染みのAIコードエディタです。小規模な開発はvimを使っているのですが、大規模なものになるとCursorを使っています。
https://cursor.com/ja

 描画系

 draw.io
アーキテクチャ図とか...]]></description><link>https://zenn.dev/akasan/articles/469eda61a31bfc</link><guid isPermaLink="true">https://zenn.dev/akasan/articles/469eda61a31bfc</guid><pubDate>Sat, 09 Aug 2025 13:25:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vn02r3HS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akasan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJfNDFtel9OY3dPYUtMRE1vc09tbVB6YmxHM0V5N3lNZzI3QWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Akasan</dc:creator></item><item><title><![CDATA[HOGE=xxx && コマンドの挙動を調べる]]></title><description><![CDATA[
 遭遇したこと
以下のコマンドを実行するシェルを実行したら、uvicorn内で動くアプリケーションにHOGEという変数が渡らないということがあった。
HOGE=xxx &amp;&amp; \
uvicorn main:app --port 8080
&amp;&amp; は 左のコマンドの終了ステータス(echo $?)が0のときに右のコマンドが実行されるやつ。
なので、HOGE=xxxとuvicornはそれぞれ別コマンド扱いだから、反映されていなかったのだろうか？と思い、
HOGE=xxx \
uvicorn main:app --port 8080
こうすればうまく動いた。めでた...]]></description><link>https://zenn.dev/jnuank/articles/3d6b3d6e03c9df</link><guid isPermaLink="true">https://zenn.dev/jnuank/articles/3d6b3d6e03c9df</guid><pubDate>Tue, 05 Aug 2025 00:07:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MHEdOpOK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HOGE%253Dxxx%2520%2526%2526%2520%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jnuank%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyNzY2NGQzOTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>jnuank</dc:creator></item><item><title><![CDATA[[VS Code] VS Code と Terminal の相互オープン]]></title><description><![CDATA[
 Overview
VS Code と terminal を相互にオープンする方法のメモ。

 ✅️ Terminal → VS Code

 Prepare
Terminal で「VS Code を開くコマンド」が使える様にします。


CMD + Shift + P でコマンドパレットを開く

"shell code" で検索

"Shell Command: Install 'code' command in PATH" を選択してインストール




 Command
Terminal で以下のコマンドを入力すると、其のディレクトリで VS Code が開きます。
code ....]]></description><link>https://zenn.dev/steweucen/articles/aafe3919cf2366</link><guid isPermaLink="true">https://zenn.dev/steweucen/articles/aafe3919cf2366</guid><pubDate>Sat, 02 Aug 2025 18:19:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--syhgmoig--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BVS%2520Code%255D%2520VS%2520Code%2520%25E3%2581%25A8%2520Terminal%2520%25E3%2581%25AE%25E7%259B%25B8%25E4%25BA%2592%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Stew%2520Eucen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3V2pZSThEakY1Z0pjNTFNem9NWWVMc1gtWml1eVQ0T3hLOU1GaEE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Stew Eucen</dc:creator></item><item><title><![CDATA[シェルスクリプトでファイルやコマンドの実行結果を1行ずつ処理する]]></title><description><![CDATA[
 やりたいこと
シェルスクリプトでファイルやコマンドの実行結果を1行ずつ処理したい。

 方法
以下のように while read を使えばよい。

 ファイルの各行を処理
# ファイルの各行を処理
while IFS= read -r line; do
    echo "${line}"
done &lt; test.txt
# 実行結果
[profile A]
credential_source = Ec2InstanceMetadata
role_arn = arn:aws:iam::111111111111:role/RoleA
role_session_name = Pro...]]></description><link>https://zenn.dev/namusour0763/articles/shellscript-lines-20250730</link><guid isPermaLink="true">https://zenn.dev/namusour0763/articles/shellscript-lines-20250730</guid><pubDate>Tue, 29 Jul 2025 16:50:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_3vI-82D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2584%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E7%25B5%2590%25E6%259E%259C%25E3%2582%25921%25E8%25A1%258C%25E3%2581%259A%25E3%2581%25A4%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AA%25E3%2582%2580%25E3%2582%25B5%25E3%2583%25AF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHpGRXZZNXNjRTlmbHkxcmdzbGxQSWZjLXJVR0dldlNtRF9ubnNXRVh4OHU0S09tcz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>なむサワー</dc:creator></item><item><title><![CDATA[せっかくClaude Codeがサジェストしてるし、最も簡単で・最も素朴で・一瞬で済む、git-worktreeへの移行方法を教える]]></title><description><![CDATA[!
この記事は30%くらい、Claude Codeが書きました。


 git-worktreeとは？
git-worktreeは、同じGitリポジトリから複数の作業ディレクトリを作成できる機能です。
通常のGitでは、一つのリポジトリに対して一つの作業ディレクトリしか持てませんが、git-worktreeを使うことで、異なるブランチを異なるディレクトリで同時に作業できるようになります。
Git - git-worktree Documentation

 使用例
$ git worktree add ../feature-branch feature-branch
$ git work...]]></description><link>https://zenn.dev/aiya000/articles/cb55bcdc12b137</link><guid isPermaLink="true">https://zenn.dev/aiya000/articles/cb55bcdc12b137</guid><pubDate>Sun, 27 Jul 2025 13:19:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---PtLQfHU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259B%25E3%2581%25A3%25E3%2581%258B%25E3%2581%258FClaude%2520Code%25E3%2581%258C%25E3%2582%25B5%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2597%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2597%25E3%2580%2581%25E6%259C%2580%25E3%2582%2582%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25A7%25E3%2583%25BB%25E6%259C%2580%25E3%2582%2582%25E7%25B4%25A0%25E6%259C%25B4%25E3%2581%25A7%25E3%2583%25BB%25E4%25B8%2580%25E7%259E%25AC%25E3%2581%25A7%25E6%25B8%2588%25E3%2582%2580%25E3%2580%2581git-worktree%25E3%2581%25B8...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%2584%25E3%2582%2584%2520-%2520aiya000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5OWE2OWVmNjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>あいや - aiya000</dc:creator></item></channel></rss>