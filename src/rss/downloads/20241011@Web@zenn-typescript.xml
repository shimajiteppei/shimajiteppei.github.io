<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 11 Oct 2024 03:00:21 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Honoを使ってNext.jsにPOSTページを実装しよう！]]></title><description><![CDATA[こんにちは、エンジニアの籏野です。
近年、弊社の作るWebアプリケーションはNext.jsを用いて開発されることが多いです。
Next.jsは高パフォーマンスなWebページを作るための様々な機能を内包したReactフレームワークであり、メジャーバージョンアップの際には次々と新しい機能が追加されています。
さて今回はとある事情により、POSTメソッドで描画されるページを実装したい要望が出てきたため、Next.jsでPOSTページを実現できるのか検証してみました。

 結論
HonoをRoute Handlersで利用することで、Next.jsでもPOSTページを実装することができました。
...]]></description><link>https://zenn.dev/forcia_tech/articles/2024_hatano_nextjs_post_page</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/2024_hatano_nextjs_post_page</guid><pubDate>Fri, 11 Oct 2024 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qAFP9NwA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Next.js%25E3%2581%25ABPOST%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[deno.json の隠された設定 "patch" についての話]]></title><description><![CDATA[
 はじめに
Deno 2.0 がリリースされましたね。はい。さて、それと関係ない話で恐縮ではございますが、みなさん、deno.json には patch という設定ができることをご存知でしょうか。
この patch というものは、Deno の公式ドキュメントにも記載のない、言わば隠し設定のようなものとして存在します。しかし！これはある特定のユースケースにおきまして、とんでもなく便利、というよりもこいつがいないとやってられないレベルのすごい働きをしてくれるものなのです。
ということでございまして、今回はぜひこの patch について紹介させていただきたいと思います。

 patch の設...]]></description><link>https://zenn.dev/5t111111/articles/hidden-config-patch-in-deno-json</link><guid isPermaLink="true">https://zenn.dev/5t111111/articles/hidden-config-patch-in-deno-json</guid><pubDate>Fri, 11 Oct 2024 02:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PznJLUYF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:deno.json%2520%25E3%2581%25AE%25E9%259A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E8%25A8%25AD%25E5%25AE%259A%2520%2522patch%2522%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:5t111111%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0NjI2ZDE4MTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>5t111111</dc:creator></item><item><title><![CDATA[Cloudflare で Prisma + PostgreSQL を使う場合、リクエストを超えてインスタンスを使いまわしてはいけない]]></title><description><![CDATA[
 Cloudflare Workers の制限
Cloudflare Workers では、Workers 内で生成したコネクションはリクエストを超えて使いまわすことができません。そのため、Prisma や PostgreSQL などの外部コネクションを使う場合は、リクエストごとに新しいインスタンスを生成する必要があります。D1 のようなコネクションを伴わない DB であれば、インスタンスを使いまわしても問題ありません。

 Prisma + PostgreSQL の例
最小限のコードで Prisma インスタンスを使いまわしたらどうなるのかという検証を行いました。以下のリンク先で実際...]]></description><link>https://zenn.dev/sora_kumo/articles/cloudflare-workers-prisma-connection</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/cloudflare-workers-prisma-connection</guid><pubDate>Thu, 10 Oct 2024 23:38:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JQUAhsEo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520%25E3%2581%25A7%2520Prisma%2520%252B%2520PostgreSQL%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E5%25A0%25B4%25E5%2590%2588%25E3%2580%2581%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%25B6%2585%25E3%2581%2588%25E3%2581%25A6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[Node.js 22の--experimental-require-moduleで、NestJSからESM Onlyライブラリを使ってみる]]></title><description><![CDATA[
 はじめに
JavaScriptにはCommonJS / ECMA Script Modules（以下ESM）の二つのモジュールシステムがあり、ライブラリには両方サポートするもの（Dual Package）もあれば、ESMのみをサポートするものもあります。（本記事では後者をESM Onlyライブラリと呼称します。）
バックエンドフレームワークとして人気のあるNestJSはCommonJSの世界で動いており、ESM非対応です。具体的な問題としてNestJSではESM Onlyのライブラリを通常のimportで使おうとするとERR_REQUIRE_ESMが出ます。たとえば下記の記事が一例。...]]></description><link>https://zenn.dev/ptna/articles/28b20f303a3cfb</link><guid isPermaLink="true">https://zenn.dev/ptna/articles/28b20f303a3cfb</guid><pubDate>Thu, 10 Oct 2024 23:15:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BqXRtYT---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%252022%25E3%2581%25AE--experimental-require-module%25E3%2581%25A7%25E3%2580%2581NestJS%25E3%2581%258B%25E3%2582%2589ESM%2520Onl...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hosaka313%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNDZkNWFmNTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%2585%25A8%25E6%2597%25A5%25E6%259C%25AC%25E3%2583%2594%25E3%2582%25A2%25E3%2583%258E%25E6%258C%2587%25E5%25B0%258E%25E8%2580%2585%25E5%258D%2594%25E4%25BC%259A%25EF%25BC%2588%25E3%2583%2594%25E3%2583%2586%25E3%2582%25A3%25E3%2583%258A%25EF%25BC%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lvTjJRYzJRN1V1ZnM1X29EblNkWkt4OFNPSWUzOTBaQTRSTDVOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hosaka313</dc:creator></item><item><title><![CDATA[Deno v2.0 が発表されたので入門してみる]]></title><description><![CDATA[
 はじめに
先日 Deno v.2.0 がリリースされました。それに伴い Zenn や X などで Deno に関する様々な記事や発信が投稿され、現在非常にホットです。それらを見て、私もこれを機に Deno を触ってみようと思い立ちこの記事を書いています。まずは入門編ということで、インストールやプロジェクトのセットアップ、Deno CLI の使い方などを見ていこうと思います。
以下のドキュメントに沿って進めていきます。
https://docs.deno.com

 インストール

Mac

curl -fsSL https://deno.land/install.sh | sh
# ...]]></description><link>https://zenn.dev/kterada/articles/091971d0df3f5d</link><guid isPermaLink="true">https://zenn.dev/kterada/articles/091971d0df3f5d</guid><pubDate>Thu, 10 Oct 2024 14:20:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OUXbGdXg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520v2.0%2520%25E3%2581%258C%25E7%2599%25BA%25E8%25A1%25A8%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kterada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyODkzYzViMWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kterada</dc:creator></item><item><title><![CDATA["use server";を勘違いして使うと危ない]]></title><description><![CDATA[ムーザルちゃんねるのzaruです、こんにちは。今回はNext.js AppRouterのServer Actionsで "use server"; を勘違いして使うと危ないケースがあるよというのを紹介します。
以前書いた"use server"; でexportした関数が意図せず？公開されるとはまた違うケースだったので改めて書きます。
今回のケースが発生することは稀だと思いますが、Server Actionsの仕組みを勘違いしてしまっていたり雰囲気で使っているとセキュリティリスクをはらむコードになってしまいます。
例として、以下のようなフォームのデータフローを実装したとします。3つのファ...]]></description><link>https://zenn.dev/moozaru/articles/c7335f66dfb8df</link><guid isPermaLink="true">https://zenn.dev/moozaru/articles/c7335f66dfb8df</guid><pubDate>Thu, 10 Oct 2024 13:52:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1yJgsH9l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2522use%2520server%2522%253B%25E3%2582%2592%25E5%258B%2598%25E9%2581%2595%25E3%2581%2584%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E5%258D%25B1%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zaru%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNDkwNTdmZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25AD%25E3%2582%258B%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hTeWVOcHN2TEdOdTdPeUFlU1JEbDhUNkNOX1p3NHBXSHpIRHN2NlBFPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaru</dc:creator></item><item><title><![CDATA[TypeScriptユーザーから見るGoの特徴]]></title><description><![CDATA[
 はじめに
この記事では、TypeScriptとGoの違い（基本的にGoにはあってTypeScriptにはないこと）をまとめています。
これからGoを学ぼうと考えている方や、TypeScriptユーザーがGoに触れてみる際の参考になれば幸いです！
また私自身はまだまだ初学者なので、もしかしたら間違いや改善点があるかもしれません。
その場合はぜひアドバイスをいただけると嬉しいです🙇

 変数

 暗黙的宣言
varを省略してより簡潔に変数を宣言することができます。
この際、変数の型は自動的に推論されます。
ただし、暗黙的な宣言は関数内でのみ行うことができます。
// 暗黙的な変数の宣言（...]]></description><link>https://zenn.dev/kiman/articles/2106fb4fe04f27</link><guid isPermaLink="true">https://zenn.dev/kiman/articles/2106fb4fe04f27</guid><pubDate>Thu, 10 Oct 2024 13:22:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hx8kK9PJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2582%258BGo%25E3%2581%25AE%25E7%2589%25B9%25E5%25BE%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2593%25E3%2582%2586%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MmYyZmE3MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きんゆまん</dc:creator></item><item><title><![CDATA[zodでtransformした後，ジェネリクスで型エラーが出る問題の解決法]]></title><description><![CDATA[
 zodにはtransform機能がある
zodでは，スキーマにtransform()メソッドを使用することで，パースを行った後に別の型に変換することができます。
しかし，ジェネリクスと組み合わせるときには注意が必要です。
結論だけ書くと，スキーマの型として以下のように指定すると良いです。
z.ZodType&lt;I, z.ZodTypeDef, O&gt;

 エラーの例
import axios from "axios";
import { z } from "zod";

const outputSchema = z
  .object({ name: z.string(), ...]]></description><link>https://zenn.dev/utopi_a/articles/b8a6286951cf3b</link><guid isPermaLink="true">https://zenn.dev/utopi_a/articles/b8a6286951cf3b</guid><pubDate>Thu, 10 Oct 2024 11:10:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Oz-awI9F--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:zod%25E3%2581%25A7transform%25E3%2581%2597%25E3%2581%259F%25E5%25BE%258C%25EF%25BC%258C%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E3%2581%25A7%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%25A8%25E3%2581%25B4%25E3%2581%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzNDZlMWE5ZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーとぴあ</dc:creator></item><item><title><![CDATA[【TypeScript】ユーティリティ型のExtractとExcludeをConditional Typesで定義する]]></title><description><![CDATA[TypeScriptは、強力な型システムを持つことで知られており、開発者がより安全で信頼性の高いコードを書くのを助けます。その中でも、ユーティリティ型は、複雑な型操作を簡潔に表現するための強力なツールです。本記事では、TypeScriptに標準で用意されているユーティリティ型であるExtractとExcludeを、Conditional Typesを用いてどのように定義するかを解説します。

 ユーティリティ型とは？
ユーティリティ型は、TypeScriptが提供する一般的な型変換を容易にするための組み込みの型変換ツールで、既存の型を元に新しい型を作成するために使用されます。これにより、...]]></description><link>https://zenn.dev/ujita/articles/2327748327996c</link><guid isPermaLink="true">https://zenn.dev/ujita/articles/2327748327996c</guid><pubDate>Thu, 10 Oct 2024 09:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UR9ShQSy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2581%25AEExtract%25E3%2581%25A8Exclude%25E3%2582%2592Conditional%2520Types%25E3%2581%25A7%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ujita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3MmNmYWM3NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ujita</dc:creator></item><item><title><![CDATA[openapi2aspidaをOpenAPI 3.1.0に雑対応した]]></title><description><![CDATA[私たちはtobaso(https://www.tobaso.jp)という配信に特化したおたよりサービスを8月末にリリースしました。
そのサービスの開発の中で、バックエンドとのAPI仕様の共有のためOpenAPIのスキーマファイルを作成し、共有することになり、バックエンドで導入したツールの影響でこれまでのOpenAPI 3.0.3が利用できず、3.1.0を利用することになりました。
そこで、これまで利用してきたaspidaのツールチェーンであるopenapi2aspidaが3.0.3までしか利用できなかったため、forkして3.1.0に対応することにしました。
今回は他ライブラリの対応状況...]]></description><link>https://zenn.dev/sucotech/articles/1cd6686b90fa25</link><guid isPermaLink="true">https://zenn.dev/sucotech/articles/1cd6686b90fa25</guid><pubDate>Thu, 10 Oct 2024 06:21:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y2az328---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:openapi2aspida%25E3%2582%2592OpenAPI%25203.1.0%25E3%2581%25AB%25E9%259B%2591%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:NEKOYASAN%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhNWEwOWJhMzIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2YTllZTA0ZWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NEKOYASAN</dc:creator></item><item><title><![CDATA[Prismaでモデルメソッドを実装する]]></title><description><![CDATA[こんにちはムーザルちゃんねるのzaruです。今回は、TypeScriptで書けるPrisma ORMでRailsのようなモデルメソッドとして実装する方法を紹介します。
Railsのようなモデルメソッドというのは、例えば User テーブルがあったときに、Rubyでいうクラスメソッドとして User.signup() という関数や、インスタンスメソッドとして User.findFirst().fullname といった感じでドットのメソッドチェーンで関数やプロパティを呼び出せることを指します。

 モデルメソッドの定義方法
モデルメソッドの定義方法は簡単で、PrismaClientに $e...]]></description><link>https://zenn.dev/moozaru/articles/6383935ef553fe</link><guid isPermaLink="true">https://zenn.dev/moozaru/articles/6383935ef553fe</guid><pubDate>Wed, 09 Oct 2024 23:40:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xbcN_NGq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25A7%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zaru%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNDkwNTdmZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25AD%25E3%2582%258B%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hTeWVOcHN2TEdOdTdPeUFlU1JEbDhUNkNOX1p3NHBXSHpIRHN2NlBFPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaru</dc:creator></item><item><title><![CDATA[fetch() で取得したレスポンスを読んでもいいのは1回だけ]]></title><description><![CDATA[!
備忘録


 結論から
タイトル通り。
-&gt; どうしても読み取る必要がある場合は clone() で複製したものを読み取ればいい。

 問題
fetch で取得したレスポンスを text() で一度読み取った後に、別の場所で改めて arrayBuffer() で読み取ろうとしたところエラーが発生し、解決策をググってもなかなかヒットせずややハマった。

 解決
MDN の fetch API に、ちょうど自分がやろうとしていることに関しての注意事項があった。

ロックされ妨害されたストリーム
（中略）
これは、同じレスポンス（またはリクエスト）本体を複数回読み取ることは不可能であ...]]></description><link>https://zenn.dev/toybox19/articles/0816e61e2a2381</link><guid isPermaLink="true">https://zenn.dev/toybox19/articles/0816e61e2a2381</guid><pubDate>Wed, 09 Oct 2024 15:35:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pUiqDICB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:fetch%2528%2529%2520%25E3%2581%25A7%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2597%25E3%2581%259F%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7%25E3%2582%2582%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25AF1%25E5%259B%259E%25E3%2581%25A0%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3OTUwYzEyNDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kai</dc:creator></item><item><title><![CDATA[Deno v2 が来たので何が変わったのか紹介]]></title><description><![CDATA[
 はじめに
遂に待望のDeno v2がリリースされました。
混乱の元となっていたwindowオブジェクトを削除し、Node.jsとの互換性を高めるためにprocessオブジェクトがグローバルに導入されるなど、多くのアップデートが施されました。
この記事では重要な変更からminorな変更までを追っていきます。
下記のコマンドで、v2にアップグレード出来ます。
$ deno upgrade


 大きな変更

 windowオブジェクトの削除と、processオブジェクトの導入
サーバーサイドであるのに、windowオブジェクトが定義されている影響で、ブラウザ環境と誤認してしまうなど、多く...]]></description><link>https://zenn.dev/ame_x/articles/d1742e77fa1351</link><guid isPermaLink="true">https://zenn.dev/ame_x/articles/d1742e77fa1351</guid><pubDate>Wed, 09 Oct 2024 14:32:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ANDUgQ0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520v2%2520%25E3%2581%258C%25E6%259D%25A5%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E4%25BD%2595%25E3%2581%258C%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%258B%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ame-x%2540amex2189%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzYjRiNTcyYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ame-x@amex2189</dc:creator></item><item><title><![CDATA[楽観的UI更新について]]></title><description><![CDATA[
 楽観的UIとは？
楽観的UIとは、ユーザーの操作が完了する前に、その結果を即座に画面に反映させる技術です。通常、データがサーバーと同期されるまでの待ち時間を短縮し、ユーザー体験を向上させることが目的です。操作後にすぐフィードバックを得られるため、特にレスポンスの遅いAPIや不安定なネットワーク下でも快適なユーザー体験を提供できます。
Reactで楽観的UIを実装する際、以下の流れで進めます。

ローカル状態を即座に更新
APIリクエストを送信
レスポンスに基づき最終的な状態を確定

では、具体的にどのように楽観的UIを実装するのか、シンプルな例で見ていきましょう。

 例：タスク管理...]]></description><link>https://zenn.dev/ryohei0509/articles/154a40e84daec1</link><guid isPermaLink="true">https://zenn.dev/ryohei0509/articles/154a40e84daec1</guid><pubDate>Wed, 09 Oct 2024 13:49:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hSjXn7VR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25A5%25BD%25E8%25A6%25B3%25E7%259A%2584UI%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hukuryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0M2JhYWM4YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hukuryo</dc:creator></item><item><title><![CDATA[Vuetifyのv-tooltipでのメモリリークの対策方法を考える]]></title><description><![CDATA[以前 Vue と Vuetify で制作した 自宅環境観測ダッシュボード を数日間表示していたところ、Out of Memory でページごとクラッシュすることが複数回ありました。巨大なデータの扱いはなく、意図せず何らかの原因でメモリリークが発生しているのではないかと考えました。
発生箇所と原因の調査、回避方法を考えるまでの過程を記録しておきます。

 前提

Vue: 3.5.11
Vuetify: 3.7.2


 結論

v-tooltip でメモリリークが発生することは掴めたが、根本原因はわからない
回避方法として v-tooltip には動的に変化する要素を極力組み込まない
長...]]></description><link>https://zenn.dev/nanase_t/articles/11d492ffd9065c</link><guid isPermaLink="true">https://zenn.dev/nanase_t/articles/11d492ffd9065c</guid><pubDate>Wed, 09 Oct 2024 10:42:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ir_BNnU2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vuetify%25E3%2581%25AEv-tooltip%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E5%25AF%25BE%25E7%25AD%2596%25E6%2596%25B9%25E6%25B3%2595%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25B8%2583%25E7%2580%25AC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JmZDc4M2MzOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>七瀬</dc:creator></item><item><title><![CDATA[TS使っている人のRust 0から勉強日記1]]></title><description><![CDATA[こんにちは！普段TypeScriptを使ってフロントエンド開発をしている人です🙌
最近、上司に「TypeScript(ちょっとは)書けるようになったからRustやってみようか^^」と言われ、言われるがままやってみたものの何をやっているんだ状態…
ZennにはたくさんのRustの基礎となる部分の記事や本があったため、同じような内容にはなりますが、この記事の内容は基礎の基礎(+TypeScriptとの比較？)で自分の勉強の記録用に書いています。


 Rustってなんだ
そもそもRustってなんなんだから始まったので、とりあえずドキュメントを。
https://www.rust-lang.o...]]></description><link>https://zenn.dev/maru_contents/articles/rust_initial</link><guid isPermaLink="true">https://zenn.dev/maru_contents/articles/rust_initial</guid><pubDate>Wed, 09 Oct 2024 06:22:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vNZCS0z3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TS%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%25AERust%25200%25E3%2581%258B%25E3%2582%2589%25E5%258B%2589%25E5%25BC%25B7%25E6%2597%25A5%25E8%25A8%25981%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyZDVlZjUxOGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maru</dc:creator></item><item><title><![CDATA[サクッと始めるウェブアプリ開発【Next.js / TypeScript】]]></title><description><![CDATA[この本では、初心者・入門者の方に向けて、Next.jsの知識や使い方を体系的にまとめました。
 
 【概要】
 ・内容：HTML・CSS・JavaScriptとは？、Next.jsとは？、アプリを作る上での環境を整えよう！、Next.jsのプロジェクトを作ろう！、チャットアプリのパーツを作ろう！、オウム返しAPIを作ろう！、MUIを使ってリッチにしよう！、Vercelにデプロイしよう！、【余談】Joy.uiによるUIの変更
 ・所要時間：約3時間
 ・必須条件：HTMLの知識、CSSの知識、JavaScriptの知識
 ・推奨OS：macOS / windows(WSL2)
 ・レベル：★★☆☆☆
 ]]></description><link>https://zenn.dev/umi_mori/books/next-js-typescript</link><guid isPermaLink="true">https://zenn.dev/umi_mori/books/next-js-typescript</guid><pubDate>Wed, 09 Oct 2024 06:10:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3lCoDJ92--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8wZDk4NWMxYmJkLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ますみ / 生成AIエンジニア</dc:creator></item><item><title><![CDATA[Next.jsでのSSGサイト開発体験を爆上げする]]></title><description><![CDATA[SSGサイトを作るとき、大体がgetStaticPropsでWordPressやmicroCMSなどのCMSからデータを取ってくる形になると思うが、返却値に型を付けるのが結構面倒。
そこで今回、ビルド時はCMSを参照せず、ビルド前に生成したJSONファイル元にビルドするようにしたら開発体験がめちゃくちゃ良くなったので紹介したい。
今回はNext.jsで作ったが、Astroなど他の言語でも使えるはず。

 この記事でできること
CMSからの返却値のフィールド名と型が全てわかるようになる！

イメージとしてはこんな感じ。

ビルドする前にCMSから必要なデータを全てJSON形式で取ってくる
...]]></description><link>https://zenn.dev/gini/articles/55a016e37b68af</link><guid isPermaLink="true">https://zenn.dev/gini/articles/55a016e37b68af</guid><pubDate>Wed, 09 Oct 2024 01:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0-GzgVSa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E3%2581%25AESSG%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E9%2596%258B%25E7%2599%25BA%25E4%25BD%2593%25E9%25A8%2593%25E3%2582%2592%25E7%2588%2586%25E4%25B8%258A%25E3%2581%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:matip%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YWNhY2JlMDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:gini%25E3%2581%25AE%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlOWJjMWRjYWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matip</dc:creator></item><item><title><![CDATA[気楽にWebGLへ入門しよう！〜 自作WebGLライブラリGlakuの紹介]]></title><description><![CDATA[
 はじめに

 この記事の目的

コードを実際に動かしながら次の WebGL の基本概念を理解する

2種類のシェーダ： 頂点シェーダ / フラグメントシェーダ
3種類の変数： attribute / uniform / varying


上記解説に付随して自作の WebGL ライブラリ「Glaku」を紹介

https://glaku.vercel.app

 WebGL って何だ？
WebGL の要点を一言で表現すると、「頂点シェーダで頂点の位置を指定し、フラグメントシェーダでピクセルごとの色を指定する」ことです。
例えば、 WebGL を使って「青い三角形を画面に表示する」プロ...]]></description><link>https://zenn.dev/mu826/articles/7279de34d74e30</link><guid isPermaLink="true">https://zenn.dev/mu826/articles/7279de34d74e30</guid><pubDate>Tue, 08 Oct 2024 18:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2_eSXZEo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25B0%2597%25E6%25A5%25BD%25E3%2581%25ABWebGL%25E3%2581%25B8%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25E3%2580%259C%2520%25E8%2587%25AA%25E4%25BD%259CWebGL%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AAGlaku%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmNWUyOWRhMjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mu</dc:creator></item><item><title><![CDATA[開発もコードレビューも最後には「優しさに溢れたコメント」だよね、という話]]></title><description><![CDATA[
 はじめに
皆さんはちゃんとコメント残していますか？
新しくコードを追加した時、自分だけはその意味をよく分かっているため、よほど意識的にならないと「客観的にこのコード見たらどうか？」ということに考えが至らない場合が多いです。
熟練のエンジニアでも陥りがちですから、新人は言わずもがなでしょう。
コメントを残す主なメリットは次の通りです。

他の人の理解にかかる時間を短縮する（自分も含む）
誤解を防ぎ、人為的なミスを減らす
心理的安全性の向上

ここに過去の自分が知っておきたかった「新人が知っておくべきコメント」について3つを紹介しておきます。
※ 普段フロントエンドエンジニアをやっている...]]></description><link>https://zenn.dev/oimo/articles/7c141304dd387c</link><guid isPermaLink="true">https://zenn.dev/oimo/articles/7c141304dd387c</guid><pubDate>Tue, 08 Oct 2024 13:49:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OBNiT9W5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otfw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OimO%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODY5NmM1ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OimO屋</dc:creator></item></channel></rss>