<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 19 May 2025 00:17:29 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[GPT Codex を使って TypeScript 型パズルゲームを作ってみた]]></title><description><![CDATA[
 作ったもの
今回は、TypeScript の型を学べるパズル形式の Web アプリを作成しました。クイズ形式で型定義の正解を導き出すことで、型への理解を深めることができます。
使用した技術スタックは、Next.js、Monaco Editor、TypeScript、ESLint に加えて、GPT Codex（ChatGPT Pro）と Cursor です。実装は主に Codex に支援してもらいながら、プロジェクトの初期設計から UI 実装、型ロジックの確認までを進めました。
実際の画面は、Monaco Editor を使ってエディタ上で型を記述し、正しい型に修正できれば「正解」にな...]]></description><link>https://zenn.dev/sakupanda/articles/15ab4780cf102c</link><guid isPermaLink="true">https://zenn.dev/sakupanda/articles/15ab4780cf102c</guid><pubDate>Sun, 18 May 2025 13:26:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X3UfOEGG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GPT%2520Codex%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520TypeScript%2520%25E5%259E%258B%25E3%2583%2591%25E3%2582%25BA%25E3%2583%25AB%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2581%258F%25E3%2581%2595%25E3%2581%258F%25E3%2583%2591%25E3%2583%25B3%25E3%2583%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkNWVjODkzMjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さくさくパンダ</dc:creator></item><item><title><![CDATA[React開発での絶対パス設定まとめ]]></title><description><![CDATA[React でコンポーネントをインポートするたびに ../ を繰り返していて、見づらい・修正が大変と感じたことはありませんか？
この記事では、import useStyles from "../components/styles"; のような相対パスではなく、import useStyles from "components/styles"; のような絶対パスでインポートする設定方法を紹介します。

 ✅ やりたいこと
例えば以下のような構成のとき：
├── App.tsx
├── components/
│ └── styles.ts
通常は以下のような相対パスになります。
impor...]]></description><link>https://zenn.dev/leegrey/articles/7690d298f97d3d</link><guid isPermaLink="true">https://zenn.dev/leegrey/articles/7690d298f97d3d</guid><pubDate>Sun, 18 May 2025 13:24:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FjU3wbba--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%25AE%25E7%25B5%25B6%25E5%25AF%25BE%25E3%2583%2591%25E3%2582%25B9%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GlobalPaws%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwNTcxOWUyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GlobalPaws</dc:creator></item><item><title><![CDATA[TypeScript未経験者の学習方法]]></title><description><![CDATA[
 この記事は何?
この記事は記事投稿コンテスト　TypeScriptでやってみた挑戦・学び・工夫の投稿記事です。
TypeScript未経験だった私が学習を決めたきっかけ、学習方法を書いています。
私と同じようなTypeScript未経験の方の何か参考になるかもしれないと思ったので記事を書くことにしました。

 著者の技術バックボーン
私の仕事は医療機器の組込みソフトウェア開発です。プログラミング言語はC、C++を23年間、使ってきました。C、C++でマイコンやマイコンに接続されたデバイスを制御し、装置を動かすことが目的です。
これまでTypeScriptの経験はありません。後述の学習...]]></description><link>https://zenn.dev/k_abe/articles/ts_learning_start</link><guid isPermaLink="true">https://zenn.dev/k_abe/articles/ts_learning_start</guid><pubDate>Sun, 18 May 2025 12:55:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jNuTY3qI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E6%259C%25AA%25E7%25B5%258C%25E9%25A8%2593%25E8%2580%2585%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%2598%25BF%25E9%2583%25A8%25E8%2580%2595%25E4%25BA%258C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwNmIzMTg4YTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>阿部耕二</dc:creator></item><item><title><![CDATA[【備忘】IntelliJでTypeScriptが読み込まれない]]></title><description><![CDATA[
 困っていたこと


TypeScriptのプロジェクトをIntelliJで開くと、なぜかTypeScriptとして読み込んでくれない。



静的チェックの結果をみると、TypoScriptとして認識されているようでした。




 解決方法
「IntelliJ IDEA &gt; Settings &gt; エディター &gt; ファイルタイプ」
TypoScript Filesの「ファイル名のパターン」を全て削除



TypeScriptの方に「*.ts」を追加



Typescriptとして認識されている。



同じ事象で困ってる人の助けになれば幸いです。


]]></description><link>https://zenn.dev/ramenpanda/articles/0721c085db9b2f</link><guid isPermaLink="true">https://zenn.dev/ramenpanda/articles/0721c085db9b2f</guid><pubDate>Sun, 18 May 2025 10:14:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xtqk3C2t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E3%2580%2591IntelliJ%25E3%2581%25A7TypeScript%25E3%2581%258C%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BE%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%25A1%25E3%2583%25B3%25E3%2581%25B1%25E3%2582%2593%25E3%2581%25A0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkNDBiOWVhODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラーメンぱんだ</dc:creator></item><item><title><![CDATA[Typescript 関数の理解を深める]]></title><description><![CDATA[日頃プログラミングをしていてTypescriptの関数について理解を深めたいなと思い記事を書きました。
内容は僕が理解不足だったり深めたい箇所がメインですのでそこをご了承いただけると嬉しいです！

 void関数における早期returnについて
戻り値の型がvoidである関数においても、returnによる処理の中断が可能です。
この性質を活用することで、条件によって処理を早期に終了させ、不要なネストや処理の継続を避けることができます。
function doSomething(): void {
  if (someCondition) return;
  console.log("続行...]]></description><link>https://zenn.dev/you_ik/articles/a1f48acb35f6ec</link><guid isPermaLink="true">https://zenn.dev/you_ik/articles/a1f48acb35f6ec</guid><pubDate>Sun, 18 May 2025 09:56:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KO67HafI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%2520%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%25E3%2582%2592%25E6%25B7%25B1%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A8%25E3%2583%25AB%25E3%2582%25B7%25E3%2582%25AB%25E3%2581%25B5%25E3%2581%2581%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjYTY1YmYwYWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヨルシカふぁん</dc:creator></item><item><title><![CDATA[Angular Signalsで柔軟なeffect管理を実現する拡張パターン]]></title><description><![CDATA[Angular Signalの effect は便利ですが、ちょっとした落とし穴もあります。特に「同じ値を再セットしたときに反応しない」点は、実装中に引っかかる人も多いのではないでしょうか？
例えば、以下のようなコードを考えてみましょう：
@Component({...})
class ExampleComponent {
  page = signal&lt;number&gt;(0);

  constructor() {
    effect(() =&gt; {
      // pageの値が変更されたときに実行される
      console.log('page chang...]]></description><link>https://zenn.dev/rdlabo/articles/0fe0824fc702d0</link><guid isPermaLink="true">https://zenn.dev/rdlabo/articles/0fe0824fc702d0</guid><pubDate>Sun, 18 May 2025 05:42:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C4uDteON--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular%2520Signals%25E3%2581%25A7%25E6%259F%2594%25E8%25BB%259F%25E3%2581%25AAeffect%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E6%258B%25A1%25E5%25BC%25B5%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A6%258A%25E5%258E%259F%25E6%2598%258C%25E5%25BD%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hPaXJOMUlrUWZNc0J2Vlljc1NzOGRGYW9USjV1TnZNTHF5TUp4cWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>榊原昌彦</dc:creator></item><item><title><![CDATA[Vibe CodingでYoutubeのダウンロードアプリを作成してみた]]></title><description><![CDATA[こんにちは。JavaScript/TypeScriptをほんの少しだけ触ったことがあるだけのただのニートです。
今回は、Vibe Codingで「YouTubeのダウンロードアプリ」をAI（Claude 3.7 sonnet）に全部やらせて作ってみたので、その体験談をまとめてみます。

 きっかけ
YouTubeの動画をダウンロードしたいな～と思って、まずは既存のWebサービスやアプリを色々探してみたんですが、
・ソフトのインストールが必要だったり(こういうソフトは怪しいものが多い)
・Web上のやつはやたら遅かったり
・広告が多かったり
と、なかなか「これだ！」というものが見つからず。...]]></description><link>https://zenn.dev/miyabitti256/articles/vibe-youtube-downloader</link><guid isPermaLink="true">https://zenn.dev/miyabitti256/articles/vibe-youtube-downloader</guid><pubDate>Sun, 18 May 2025 05:39:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XcG4guuC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vibe%2520Coding%25E3%2581%25A7Youtube%25E3%2581%25AE%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miyabitti%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2NjVmZThjM2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miyabitti</dc:creator></item><item><title><![CDATA[React + Tailwind CSS でコンポーネントを改善してみた]]></title><description><![CDATA[
 はじめに
以前、以下の記事でReact + Tailwindを使ったシンプルなボタンコンポーネントの実装について紹介しました：
👉 React + Tailwind CSS でコンポーネントを作ってみた
当時の実装はPropsベースで状態を切り替える基本的なものでしたが、以下のような問題点がありました。

 ❌ 旧実装の課題点


スタイルの定義がハードコードで、型安全性が弱い


クラス名が文字列連結で可読性・保守性が低い


onClick の型が any でTypeScriptの恩恵が薄い


ref や as による柔軟なレンダリングができない


Composition（ア...]]></description><link>https://zenn.dev/au/articles/c101fcb20e579f</link><guid isPermaLink="true">https://zenn.dev/au/articles/c101fcb20e579f</guid><pubDate>Sun, 18 May 2025 04:41:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qUNpvFR6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%252B%2520Tailwind%2520CSS%2520%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E6%2594%25B9%25E5%2596%2584%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:K.nishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0NTMxYzY1YzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>K.nishi</dc:creator></item><item><title><![CDATA[Vue の <component> と <keep-alive>：動的コンポーネントの切り替えと状態の保持]]></title><description><![CDATA[
 はじめに
Vue の &lt;component&gt; タグは、動的にコンポーネントを切り替える便利な方法です。
例えば「タブ切り替え」や「ページの差し替え」などで使われます。
さらに &lt;keep-alive&gt; と組み合わせることで、切り替えたコンポーネントの状態を保持することも可能です。
本記事では、以下の2点を中心に解説します：


&lt;component :is="..."&gt; の使い方

&lt;keep-alive&gt; の挙動と使い所


 &lt;component&gt; の基本
Vue の &lt;component&gt; タグを使うと、変...]]></description><link>https://zenn.dev/tspk/articles/d64a7c0add87c8</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/d64a7c0add87c8</guid><pubDate>Sun, 18 May 2025 03:01:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sp3JL4UD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue%2520%25E3%2581%25AE%2520%253Ccomponent%253E%2520%25E3%2581%25A8%2520%253Ckeep-alive%253E%25EF%25BC%259A%25E5%258B%2595%25E7%259A%2584%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2581%25A8%25E7%258A%25B6%25E6%2585%258B%25E3%2581%25AE%25E4%25BF%259D%25E6%258C%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[TypeScript はじめの一歩]]></title><description><![CDATA[
 1. 定数宣言（const）
const greeting = "Hello, TypeScript!";


const は 定数 を作ります。
再代入できません（＝一度決めた値は変えられない）。

配列やオブジェクト の 中身 は変更できるので要注意。

const numbers = [1, 2, 3];
numbers.push(4);        // ✅ OK（内部を書き換え）
numbers = [4, 5, 6];    // ❌ エラー（再代入）


 2. 関数定義（function 文）
function add(a: number, b: number): ...]]></description><link>https://zenn.dev/hibikiumekawa/articles/04897a3301c67a</link><guid isPermaLink="true">https://zenn.dev/hibikiumekawa/articles/04897a3301c67a</guid><pubDate>Sun, 18 May 2025 01:29:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UArBLvNA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%25AE%25E4%25B8%2580%25E6%25AD%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:umekawahibiki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTF82QlV6VGFvLXpmTjV0OVBlUjAxdk5RYVFJMWN1VjRWRG5BTnhEWEJGejRRQzFnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>umekawahibiki</dc:creator></item><item><title><![CDATA[【TypeScript】オプショナルな型を含むオブジェクト型から存在する型だけを抽出して利用したい]]></title><description><![CDATA[
 はじめに
ある個人開発で「オプショナルな型を含むオブジェクト型から存在する型だけを抽出して利用したい」場面がありました。
具体的には以下のようなオブジェクト型です。
export type quizChoicesType = {
    one: quizChoiceContentType;
    two: quizChoiceContentType;
    three: quizChoiceContentType;
    four?: quizChoiceContentType;
    five?: quizChoiceContentType;
    six?: quiz...]]></description><link>https://zenn.dev/benjuwan/articles/58d322ad1f16bb</link><guid isPermaLink="true">https://zenn.dev/benjuwan/articles/58d322ad1f16bb</guid><pubDate>Sun, 18 May 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vaYR3GH5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25AA%25E5%259E%258B%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2580%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E5%259E%258B%25E3%2581%258B%25E3%2582%2589%25E5%25AD%2598%25E5%259C%25A8%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E3%2581%25A0%25E3%2581%2591%25E3%2582%2592%25E6%258A%25BD%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:benjuwan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnd2XzJhLTN4SnJmSkN0Ql9wMkkwWUlVaVlTY1ozLTFQZFZoNkxsaUIyRmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>benjuwan</dc:creator></item><item><title><![CDATA[TypeScript ジェネリクス]]></title><description><![CDATA[
 はじめに：ジェネリクスとは？
TypeScriptの「ジェネリクス（Generics）」とは、
型をパラメーターのように扱える機能です。
関数・クラス・インターフェースなどで型を固定せず、
柔軟に使い回せるようになるため、再利用性と型安全性の両立が実現できます。

 基本的な使い方
const foo = &lt;T&gt;(bar: T): T =&gt; {
  return bar
}

const result1 = foo&lt;string&gt;("hello"); // 型を明示的に指定 → T = string
const result2 = foo(123);  ...]]></description><link>https://zenn.dev/tspk/articles/79152f2338499f</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/79152f2338499f</guid><pubDate>Sat, 17 May 2025 10:23:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LrVcsCfn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[関数型ドメインモデリング TypeScript 実装スタックまとめ]]></title><description><![CDATA[こんにちは！わたなべです！
最近、同僚から「関数型プログラミング」と「ドメイン駆動開発」を組み合わせると素敵なアプリケーションを作れると聞きました。ぜひ自分でも試してみたいと思ったのですが、どんな実装スタックを選べばよいのかわからず、ChatGPT&nbsp;o3&nbsp;さんに相談してみました。
当初は得意な&nbsp;C#&nbsp;でやりたかったのですが、C#&nbsp;では関数型プログラミングを用いたドメインモデリングが難しそうだったため、今回は&nbsp;TypeScript&nbsp;を使った方法を調べてみることにしました。

 はじめに
フロントエンドを含む&nbsp;J...]]></description><link>https://zenn.dev/waterchop/articles/9c241bc760ecff</link><guid isPermaLink="true">https://zenn.dev/waterchop/articles/9c241bc760ecff</guid><pubDate>Sat, 17 May 2025 07:53:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--91eKmbPV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%2520TypeScript%2520%25E5%25AE%259F%25E8%25A3%2585%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2581%259F%25E3%2581%25AA%25E3%2581%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdhZGEyYmIxOTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わたなべ</dc:creator></item><item><title><![CDATA[🌳 ディレクトリ構造を簡単テキスト化！nodejs/cliツール「filetree」]]></title><description><![CDATA[
 ✨ はじめに
開発プロジェクトを進めていると、「このプロジェクトのディレクトリ構造をドキュメントに載せたい」「チームメンバーに特定の範囲のファイル構成を伝えたい」といった場面がよくありますよね。そんなとき、手動でツリー構造を書き出すのは手間がかかりますし、ミスも起こりやすいものです 😥
今回ご紹介する @telosh/filetree は、そんな悩みを解決してくれる Node.js 向けの npm パッケージです。指定したディレクトリのファイルやフォルダの構造を、簡単に美しいツリー形式の文字列で出力してくれます！

 📦 @telosh/filetree とは？
@telosh/fi...]]></description><link>https://zenn.dev/terumi_web/articles/09bfbe35b0835d</link><guid isPermaLink="true">https://zenn.dev/terumi_web/articles/09bfbe35b0835d</guid><pubDate>Sat, 17 May 2025 02:15:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_REyC5GT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E5%258C%2596%25EF%25BC%2581nodejs%252Fcli%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258Cfiletree%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:telosh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzMGVkN2M4NDMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>telosh</dc:creator></item><item><title><![CDATA[TypeScriptの型述語をちょっと理解した]]></title><description><![CDATA[
 TypeScript の型述語をちょっと理解した

 はじめに
TypeScript の型述語をちょっと理解したので、意味や使い方についてまとめます。

 型述語とは
サバイバル TypeScript の型述語の説明について見てみると、以下のように書いてあります。

型述語という言葉を分解してみると「型+述語」となります。つまり型についての述語です。この述語という用語は元々は論理学に由来するものであり、その意味を知ることで型ガード関数についての理解を深めることができます。
元々、述語(predicate)とは、論理学において対象が持つ属性や関係などを表現するものです。たとえば、「X ...]]></description><link>https://zenn.dev/fuyu28/articles/ts-type-predicates</link><guid isPermaLink="true">https://zenn.dev/fuyu28/articles/ts-type-predicates</guid><pubDate>Fri, 16 May 2025 18:14:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XeEkcsn4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259E%258B%25E8%25BF%25B0%25E8%25AA%259E%25E3%2582%2592%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2582%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlMTMwMjlhMmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふゆ</dc:creator></item><item><title><![CDATA[Benchmark結果をPull Requestしよう！【GitHub、Github Actions、gh-printer】]]></title><description><![CDATA[
 はじめに
今回紹介する実行結果をpull requestするためのactionであるgh-printerは私が作りました。
使い方だけ見たい方は使い方のみご覧ください。
お時間のある方や作成過程も知りたい方は作成過程も見ていただけると幸いです。
https://github.com/ROBOTofficial/print

 使い方
gh-printerを使う上で必須になる引数は以下の通りです。

github-token
output-file
contents 又は input-file

この中で重要になってくるのがcontentsとinput-fileです。


conten...]]></description><link>https://zenn.dev/robot/articles/f6322f468122a8</link><guid isPermaLink="true">https://zenn.dev/robot/articles/f6322f468122a8</guid><pubDate>Fri, 16 May 2025 14:29:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--v9swrsk0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Benchmark%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592Pull%2520Request%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25E3%2580%2590GitHub%25E3%2580%2581Github%2520Actions%25E3%2580%2581gh-pri...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ROBOT%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3ZWUzNjQxNWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ROBOT</dc:creator></item><item><title><![CDATA[気合の脱 create-react-app からの、AIによるフロントエンド改修の自動化 (株式会社イルシル様)]]></title><description><![CDATA[株式会社イルシル様の依頼で、フロントエンドの近代化とパフォーマンス分析を行った事例を紹介します。
https://irusiru.jp/

「イルシル」は、生成AIでスライド資料作成を自動化し、誰でも簡単にスライドやパワポが作れるサービスで、スライドのデザインは1,000種類以上あり、入力したテキストからスライドを自動生成できるだけでなく、オリジナルで作成することも可能です。

いわゆる、複雑フロントエンドの事例です。ブラウザ上でAI経由でスライドを生成して、それをUIから編集でき、最終的には PDF や パワーポイントとしてエクスポートします。
LCP や CLS ではなく、 TBT ...]]></description><link>https://zenn.dev/mizchi/articles/irusiru-modernize-cra-to-vite</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/irusiru-modernize-cra-to-vite</guid><pubDate>Fri, 16 May 2025 09:52:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QzXeNcnN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25B0%2597%25E5%2590%2588%25E3%2581%25AE%25E8%2584%25B1%2520create-react-app%2520%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E3%2580%2581AI%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E6%2594%25B9%25E4%25BF%25AE%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%2520%2528%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25B7%25E3%2583%25AB%25E6%25A7%2598%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[Hono APIをRepositoryパターンとUseCaseパターンで構築する]]></title><description><![CDATA[
 この記事は？
この記事では、Honoを使用してAPIを構築する際にコードの関心事を分離し、保守性やテスト容易性を高めるためにRepositoryパターンとUseCaseパターンを導入する手順です。
Hono の基本的なセットアップについては、以下の記事で完了していることとします。
React Router v7 + Hono + bun でモノレポ構成の初期構築

 前提条件
Honoの基本的なプロジェクトセットアップ、Drizzle ORMとCloudflare D1の連携準備が済んでいる状態を想定します。

 使用する技術スタック

Hono
Cloudflare D1
Driz...]]></description><link>https://zenn.dev/jskn_d/articles/32c6dc2397904e</link><guid isPermaLink="true">https://zenn.dev/jskn_d/articles/32c6dc2397904e</guid><pubDate>Fri, 16 May 2025 08:26:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z6ORJ406--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%2520API%25E3%2582%2592Repository%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25A8UseCase%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jokooooo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VhMjE4ODI1ZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jokooooo</dc:creator></item><item><title><![CDATA[助太刀Web版のフロントエンド開発戦略 - Pages RouterからApp Routerへの移行篇]]></title><description><![CDATA[
 はじめに
こんにちは、助太刀フロントエンドチームの西倉です！
助太刀のフロントエンドチームでは、主にNext.jsを用いて開発しています。
Next.jsのPages RouterかApp Routerのどちらで開発をするか、というテーマでの議論は話題に事欠かないかと思います。そんな中で、私たちは最も開発頻度の高い助太刀Web版をPages RouterからApp Routerへ移行しました。
今回はそこで得た知見についてご紹介します🦋

 背景
助太刀はスマホアプリを中心に、建設業界の職人さんをターゲットとしてシェアを拡大してきました。 その後、法人のお客様からご要望があった経緯に...]]></description><link>https://zenn.dev/sukedachi_dev/articles/c35765edb4bd84</link><guid isPermaLink="true">https://zenn.dev/sukedachi_dev/articles/c35765edb4bd84</guid><pubDate>Fri, 16 May 2025 06:36:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QJTsyRz2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258A%25A9%25E5%25A4%25AA%25E5%2588%2580Web%25E7%2589%2588%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E9%2596%258B%25E7%2599%25BA%25E6%2588%25A6%25E7%2595%25A5%2520-%2520Pages%2520Router%25E3%2581%258B%25E3%2582%2589App%2520Router%25E3%2581%25B8%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%25E7%25AF%2587%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Eri%2520Nishikura%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0ZmI5ZDdiNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%258A%25A9%25E5%25A4%25AA%25E5%2588%2580%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3ZmQ2MTIzMTAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Eri Nishikura</dc:creator></item><item><title><![CDATA[Hono × Supabase 複数テーブルを1回のクエリでレスポンス！]]></title><description><![CDATA[
 はじめに
Supabase SDKと軽量WebフレームワークHonoを組み合わせてAPIを作る中で、「複数テーブルをJOINして1回のクエリでレスポンスしたい」というニーズにぶつかりました。
この記事では、Supabaseの .select() におけるJOINの使い方と、RelationalRepository を活用して再利用性高く設計する方法を紹介します。

 Supabaseの .select() でJOINする方法
Supabaseでは、RDBの外部キーを活用して .select() に ネスト構文を渡すことでJOINを実現できます。
const { data, error...]]></description><link>https://zenn.dev/pochipochitudoi/articles/aeae05b4aec599</link><guid isPermaLink="true">https://zenn.dev/pochipochitudoi/articles/aeae05b4aec599</guid><pubDate>Thu, 15 May 2025 14:47:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vvo8Yv4D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%2520%25C3%2597%2520Supabase%2520%25E8%25A4%2587%25E6%2595%25B0%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AB%25E3%2582%25921%25E5%259B%259E%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%25A7%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BF%25E3%2581%259D%25E3%2581%2597%25E3%2582%258B%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwMGFjMDNhYWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2581%25BD%25E3%2581%25A1%25E3%2581%25BD%25E3%2581%25A1%25E3%2581%25AE%25E3%2581%25A4%25E3%2581%25A9%25E3%2581%2584%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlZTA1MGUzYTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みそしる</dc:creator></item></channel></rss>