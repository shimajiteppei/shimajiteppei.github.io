<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 24 Mar 2025 01:40:44 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[readonly,  union, Pick, Extract, Awaitedなどの型定義を紹介]]></title><description><![CDATA[最近学んだ型定義をいくつか紹介します。

 1. readonly
readonlyは、オブジェクト型のプロパティを読み取り専用にすることができます。
type TestItem = {
	readonly label: string
	readonly content: string
}
export const ProfileInfo = ({ label, content }: TestItem) =&gt; {
	return (
		&lt;&gt;
			&lt;p&gt;{label}&lt;/p&gt;
			&lt;p&gt;{content}&lt;/p&gt;
		...]]></description><link>https://zenn.dev/643866/articles/d8eb8e0e0d0fd3</link><guid isPermaLink="true">https://zenn.dev/643866/articles/d8eb8e0e0d0fd3</guid><pubDate>Sun, 23 Mar 2025 11:55:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aC48TGXE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:readonly%252C%2520%2520union%252C%2520Pick%252C%2520Extract%252C%2520Awaited%25E3%2581%25AA%25E3%2581%25A9%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2593%25E7%2584%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxZWY2MWJmNmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たこ焼き</dc:creator></item><item><title><![CDATA[await と then() の違いから学ぶ async/await の使い方]]></title><description><![CDATA[
 await と then() の決定的な違い
非同期関数 (Promise を返す関数)  を処理したいとき、行単位で見ると、JavaScript のモダンな方法では下記 2つが考えられます。

非同期関数の前に await をつける ( await AsyncFunction() )
非同期関数を then() メソッドでチェーンする ( AsyncFunction().then() )

この2つの方法の決定的な違いは、その行が非同期関数の実行の完了を待つかどうかです。
await を使った場合は、非同期関数が完了するまで次の行に進まないため同期処理になるのに対し、then() ...]]></description><link>https://zenn.dev/shebang/articles/db41860d8d15b8</link><guid isPermaLink="true">https://zenn.dev/shebang/articles/db41860d8d15b8</guid><pubDate>Sun, 23 Mar 2025 11:41:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Na3jPIeN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:await%2520%25E3%2581%25A8%2520then%2528%2529%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%258B%25E3%2582%2589%25E5%25AD%25A6%25E3%2581%25B6%2520async%252Fawait%2520%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yamahar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0ODg4ZWQxNjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yamahar</dc:creator></item><item><title><![CDATA[Javascript でマウス＆タッチ両対応なら pointer イベントを使おうよ、古いブラウザを見捨ててもよいならね]]></title><description><![CDATA[タイトルが言いたいことの10割。
とあるウェブアプリが、タッチパネル付きノートパソコンのトラックパッド操作で動作しなかったのでソースを見たところ、'ontouchstart' in document でタッチ対応と判別したらtouchstart/touchendを利用、非対応ならmousedown/mouseupを利用、という処理をしていた。
最近のブラウザならpointerdown/pointerupを使えば、タッチ操作でも、マウス操作でも、タッチ対応デバイスのマウス操作でも対応できるのになぁ。
軽くググってみると mouse イベントと touch イベントをいかに同居させるか、とい...]]></description><link>https://zenn.dev/19931/articles/2156b7172b89e6</link><guid isPermaLink="true">https://zenn.dev/19931/articles/2156b7172b89e6</guid><pubDate>Sun, 23 Mar 2025 10:07:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jtrjLNqj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Javascript%2520%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25A6%25E3%2582%25B9%25EF%25BC%2586%25E3%2582%25BF%25E3%2583%2583%25E3%2583%2581%25E4%25B8%25A1%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25AA%25E3%2582%2589%2520pointer%2520%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%258A%25E3%2581%2586%25E3%2582%2588%25E3%2580%2581%25E5%258F%25A4%25E3%2581%2584%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%2592%25E8%25A6%258B%25E6%258D%25A8%25E3%2581%25A6%25E3%2581%25A6%25E3%2582%2582%25E3%2582%2588%25E3%2581%2584%25E3%2581%25AA%25E3%2582%2589%25E3%2581%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ippei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhYTViMjM2ZWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ippei</dc:creator></item><item><title><![CDATA[JavaScriptを雰囲気で使っていたので背景知識を整理する]]></title><description><![CDATA[
 これは何?
JavaScriptを使おうと思ってみたものの歴史が長いため，特殊な仕様だったり，よくわからない言葉がたくさんある気がする。
最近は生成AIでなんとなく動くものは作れてしまうが，もやもやが晴れないので一念発起して気になっていることをちゃんと調べてまとめてみた。
これからJavaScript，TypeScriptを学習しようとする方や，自分のようになんとなく動くものは作れるけどもやっとすることがある方の助けになれば良いなと思う。

 なぜ，今JS/TSを学ぶ気になったのか

VSCodeの拡張のロジックはJS/TSで書かれるから
(GitHub Actionsの拡張作りたい...]]></description><link>https://zenn.dev/sigma_tom/articles/f6e10afb38049f</link><guid isPermaLink="true">https://zenn.dev/sigma_tom/articles/f6e10afb38049f</guid><pubDate>Sun, 23 Mar 2025 09:37:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BqWOrNHt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2582%2592%25E9%259B%25B0%25E5%259B%25B2%25E6%25B0%2597%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%2583%258C%25E6%2599%25AF%25E7%259F%25A5%25E8%25AD%2598%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sigma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiYzZiYTViMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sigma</dc:creator></item><item><title><![CDATA[Google Apps ScriptでOpenAI Responses APIのImages and visionを動かす]]></title><description><![CDATA[

 やりたいこと
Google Apps ScriptでOpenAI Responses APIのImages and visionを動かすことで、画像の解析をしたい

 写真の公開設定
リンクを知っている人はコピーというようになっている必要があります。
全体公開することが制約事項となります。全体公開が難しい場合は、スクリプトで公開設定を一時的にON/OFFをする実装をする必要があるでしょう。AWS S3のように10分だけ有効なURLのような細かい制御はGoogleドライブでは行うことができません。


 コード
function sample() {
  const secretKe...]]></description><link>https://zenn.dev/icck/articles/09e83927d6f790</link><guid isPermaLink="true">https://zenn.dev/icck/articles/09e83927d6f790</guid><pubDate>Sun, 23 Mar 2025 05:28:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xj0TZiky--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%2520Apps%2520Script%25E3%2581%25A7OpenAI%2520Responses%2520API%25E3%2581%25AEImages%2520and%2520vision...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:icck%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmYTRiZDQ3YzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>icck</dc:creator></item><item><title><![CDATA[ベータリリースされたOxlintを使ってみる]]></title><description><![CDATA[
 はじめに
JavaScript プロジェクトのリンターはデファクトスタンダードとして ESLint が使われてきました。しかし最近では実行速度の遅さや、Flat Config への移行コストなどが課題として挙げられるようになり ESLint に代わる次世代のリンターに注目が集まりつつあります。
そんな中、先日 Oxc から 「Oxlint」というリンターがベータリリースされました。Oxlint は、「ESLint より 50〜100 倍高速」と掲げており一度使ってみたいと思ったので、実際に手元で試してみることにしました。
この記事では、Oxlint の全体像と実際に使ってみた感想をま...]]></description><link>https://zenn.dev/h_yokoyama/articles/beta-oxlint-try</link><guid isPermaLink="true">https://zenn.dev/h_yokoyama/articles/beta-oxlint-try</guid><pubDate>Sun, 23 Mar 2025 03:58:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QKcdXbkk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2595%25E3%2582%258C%25E3%2581%259FOxlint%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hayato%2520Yokoyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYzMwMWVlMjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hayato Yokoyama</dc:creator></item><item><title><![CDATA[『レンダリングとマウント』をJavaScript、React、Nextjsで比較]]></title><description><![CDATA[下記の記事はClaudeに質問して出力してもらった内容を、自分で理解しながら追記/修正したものになります。


（Claudeによる出力）
↓↓↓↓ここから↓↓↓↓

 はじめに
Reactを学び始めると、「レンダリング」や「マウント」といった用語に出会います。これらは似ているようで異なる概念であり、しっかり理解することでより効率的なReactアプリケーションが作れるようになります。
この記事では、JavaScriptの基本から始めて、React、そしてNext.jsでの「レンダリング」と「マウント」の違いを初心者にもわかりやすく解説します。

 目次

基本概念：レンダリングとマウント...]]></description><link>https://zenn.dev/masato24524/articles/70a90ae2a5ae35</link><guid isPermaLink="true">https://zenn.dev/masato24524/articles/70a90ae2a5ae35</guid><pubDate>Sun, 23 Mar 2025 01:05:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K1dzJ1q9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258E%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E3%2583%259E%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2580%258F%25E3%2582%2592JavaScript%25E3%2580%2581React%25E3%2580%2581Nextjs%25E3%2581%25A7%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwODU5NjQ1YjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masato</dc:creator></item><item><title><![CDATA[console.log()をラップすると何かしら上手くいかない]]></title><description><![CDATA[
 想定要件
組み込みソフトのキャリアはそこそこあるけど JavaScript 初心者です。Zenn も。
console.log()など console メソッドのラッパ実装で以下の要件を全て満たしたく、既存の Web 記事をいろいろ参照して試行錯誤してみたけど完全な方法が見付からず挫折..

ログ出力の有効／無効を切り替えられる（空関数に置換できる）
表示文字列を横取りして編集できる（行頭/行末に付加情報を付けたりスタイルを変えたり）
書式付き文字列も正しく表示する（%s,%o とか printf 仕様のやつ）
ブラウザのコンソールに表示されるソースコード位置情報を維持する（ファイル...]]></description><link>https://zenn.dev/tmura_zzz/articles/5d383e0ac692ac</link><guid isPermaLink="true">https://zenn.dev/tmura_zzz/articles/5d383e0ac692ac</guid><pubDate>Sat, 22 Mar 2025 13:16:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QiUU7Drz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:console.log%2528%2529%25E3%2582%2592%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2597%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E4%25BD%2595%25E3%2581%258B%25E3%2581%2597%25E3%2582%2589%25E4%25B8%258A%25E6%2589%258B%25E3%2581%258F%25E3%2581%2584%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tmura_zzz%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmOWUyMDBmZjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tmura_zzz</dc:creator></item><item><title><![CDATA[よくあるサイトを訪れた際のアニメーション]]></title><description><![CDATA[備忘録
これまた非常によく見るあれ。
サイトを訪れた際のアニメーション。なんか最初は隠れてて時間差で出てくるあれ。
とりあえず超汎用的なコードを書いたので備忘録用に残しておきます。
function animation() {
    window.addEventListener('load', function () {
        setTimeout(function () {
            document.getElementById('hoge').classList.add('show');
        }, 1000)
    })
}
animati...]]></description><link>https://zenn.dev/riku_front/articles/29cac0995713bd</link><guid isPermaLink="true">https://zenn.dev/riku_front/articles/29cac0995713bd</guid><pubDate>Sat, 22 Mar 2025 10:59:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ujJ9gYzG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2588%25E3%2581%258F%25E3%2581%2582%25E3%2582%258B%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E8%25A8%25AA%25E3%2582%258C%25E3%2581%259F%25E9%259A%259B%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:riku%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDFUUUJxUVp5SzN3c0tBX0lfVkhOZWZfaEVCYnEzX1FZVE1aOWx3M3o5Rmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>riku</dc:creator></item><item><title><![CDATA[axiosのリトライはaxios-retryに任せよう！]]></title><description><![CDATA[みなさん、こんにちは！mikenekoです！
本日はaxiosのリトライ処理について詳しくお話ししたいと思います。
javascriptを使用している人であれば、axiosを使用している人も多いかと思います。
今回はそちらについて簡単に説明をした後、axios-retryを使用してaxiosのリトライ処理を実装する方法について解説します。

 はじめに
axiosは、HTTPリクエストを行うためのJavaScriptライブラリです。axiosは、PromiseベースのAPIを提供し、非同期処理を簡単に扱うことができます。
axios-retryは、axiosのリクエストを自動的にリトライ...]]></description><link>https://zenn.dev/haru507/articles/2025-03-20_zenn</link><guid isPermaLink="true">https://zenn.dev/haru507/articles/2025-03-20_zenn</guid><pubDate>Sat, 22 Mar 2025 02:31:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RQrP9BEQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axios%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2588%25E3%2583%25A9%25E3%2582%25A4%25E3%2581%25AFaxios-retry%25E3%2581%25AB%25E4%25BB%25BB%25E3%2581%259B%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mike_neko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmN2YyNTQ0ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mike_neko</dc:creator></item><item><title><![CDATA[フロントでのStrategyパターンの使い方]]></title><description><![CDATA[最近Reactアプリケーションでユーザーの支払い手段（例：credit、paypay、bankなど）によって処理を変える機能を作る時 if 文を多用してるのを見た。
これだとコードがどんどん煩雑になるので、Strategy（ストラテジー）パターンを使って、支払いごとの処理を整理する方法をメモする。


 ❌ よくある悪い例：条件分岐だらけの関数
まずは、よくある if 文だらけの例。
function pay(method, amount) {
  if (method === 'credit') {
    return fetch('/api/pay/credit', {
     ...]]></description><link>https://zenn.dev/billysama/articles/29e8e3366d4160</link><guid isPermaLink="true">https://zenn.dev/billysama/articles/29e8e3366d4160</guid><pubDate>Fri, 21 Mar 2025 19:50:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NJIr4T8v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E3%2581%25AEStrategy%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Billysama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlRkcFIydF9QeEREa0ZFR2E1OTZxbG9BbzVrcnpuUHFPRVU4Uy1MQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Billysama</dc:creator></item><item><title><![CDATA[Twitter interestsis no thank you.]]></title><description><![CDATA[
 だから「興味関心」のチェックを全て外すんです。
アルゴリズムごときが図に乗るな。知りたい情報は自分で探す。電子計算機ごときが人間を知った気になるな。

 概要
「興味関心」のチェックを全て外すんです。

 環境

モダン ブラウザー
Tampermonkey
https://www.tampermonkey.net/



 script
今見返すともう少し良いコードが書けそうだけど。。。

userscript.js
// ==UserScript==
// @name         だから「興味関心」のチェックを全て外すんです。
// @namespace    http://...]]></description><link>https://zenn.dev/libraplanet/articles/23aa1b8aff2fba</link><guid isPermaLink="true">https://zenn.dev/libraplanet/articles/23aa1b8aff2fba</guid><pubDate>Fri, 21 Mar 2025 16:43:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tCpbWpni--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Twitter%2520interestsis%2520no%2520thank%2520you.%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5ZjRkNTRiODQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi</dc:creator></item><item><title><![CDATA[JavaScript で range 配列を作る方法は結局どれが一番いいのか]]></title><description><![CDATA[太古の昔から存在する議論。
連番配列の作成、つまり n から [0, 1, 2, ...] を作る方法はどれがベストか。
歴史上、数多のヘルパー関数が作られてきたであろうことは想像に難くない。

 結論
素直に for で作る。
const arr = [];
for (let i = 0; i &lt; len; i++) {
  arr.push(i);
}
const arr = Array(len);
for (let i = 0; i &lt; len; i++) {
  arr[i] = i;
}

 理由

単純
読みやすい
速い

ワンライナーで書くやり方はどれもやや癖が...]]></description><link>https://zenn.dev/zakuro9715/articles/js-array-range-bench</link><guid isPermaLink="true">https://zenn.dev/zakuro9715/articles/js-array-range-bench</guid><pubDate>Fri, 21 Mar 2025 04:29:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ihXkf8_O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%25E3%2581%25A7%2520range%2520%25E9%2585%258D%25E5%2588%2597%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AF%25E7%25B5%2590%25E5%25B1%2580%25E3%2581%25A9%25E3%2582%258C%25E3%2581%258C%25E4%25B8%2580%25E7%2595%25AA%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zakuro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhMTljMmZmZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zakuro</dc:creator></item><item><title><![CDATA[AIがwebで使えるツール集を作った[Next.js]]]></title><description><![CDATA[
 はじめに
Copilotを積極的に活用し、通常よりも短期間で「PocketALL」というWebアプリを完成させることができました。的確なコード提案のおかげで、初心者ながらも複雑な実装にチャレンジでき、学習と開発を同時に進めることができました。このアプリは、日常的によく使う便利ツールを一箇所にまとめ、ブラウザ上で手軽に利用できるよう設計しています。
https://pocket-all.vercel.app

 実装した機能
現在、PocketALLには以下の4つの機能を実装しています：

 1. QRコード生成
URLやテキストを入力するだけで、すぐにQRコードが生成できる機能です。...]]></description><link>https://zenn.dev/yuto0623/articles/4fddf369f24ce6</link><guid isPermaLink="true">https://zenn.dev/yuto0623/articles/4fddf369f24ce6</guid><pubDate>Fri, 21 Mar 2025 04:09:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V2FuhuYH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AI%25E3%2581%258Cweb%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E9%259B%2586%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%255BNext.js%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuto0623%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjMDMyMjVmYTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuto0623</dc:creator></item><item><title><![CDATA[[TanStack Query v5] useMutation callback と mutate callback の挙動の違い]]></title><description><![CDATA[こんにちは、株式会社カナリーでソフトウェアエンジニアをやっている matsu です。
先日 TanStack Query の mutation 処理で思わぬ落とし穴に遭遇したのですが、ドキュメントや解説記事が見当たらなかったので、本記事にて知見を共有します 🐈‍⬛

 はじめに
TanStack Query の mutation 処理では、onSuccess / onError / onSettled オプションにより、mutation 処理後に実行される callback 関数を登録できます。
これらの callback 関数は、React の場合、useMutation と muta...]]></description><link>https://zenn.dev/canary_techblog/articles/c60c7ddb73e6a5</link><guid isPermaLink="true">https://zenn.dev/canary_techblog/articles/c60c7ddb73e6a5</guid><pubDate>Fri, 21 Mar 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EMKx-58o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTanStack%2520Query%2520v5%255D%2520useMutation%2520callback%2520%25E3%2581%25A8%2520mutate%2520callbac...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:matsu%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U3NzUwZmNjMzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Canary%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkM2Q2NzFjZWIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matsu</dc:creator></item><item><title><![CDATA[[Node.js] ループ内でstream.pipeline()を使ってはいけない]]></title><description><![CDATA[
 はじめに
仕事で以下のような仕様のコードを書いていました。

あるファイルを分割してダウンロード
ダウンロードしたファイルを逐次的に一時ファイルに保存
最後に保存した一時ファイルを結合し、1つのファイルにする

これを実現するためにstream/promisesのpipeline()をループ内で使っていたところ、実行が途中で止まってしまうという問題が発生しました。
備忘録として原因と対策を記載しておきます。

 問題のあるコード
import { createWriteStream, createReadStream } from 'fs';
import { pipeline } ...]]></description><link>https://zenn.dev/cococig/articles/12548670e3f642</link><guid isPermaLink="true">https://zenn.dev/cococig/articles/12548670e3f642</guid><pubDate>Thu, 20 Mar 2025 16:44:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--346V4aKA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNode.js%255D%2520%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E5%2586%2585%25E3%2581%25A7stream.pipeline%2528%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cococig%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2NzVlYTM4OGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cococig</dc:creator></item><item><title><![CDATA[WEBシステムとは？]]></title><description><![CDATA[今、あなたが読んでいるこの記事は、どのような仕組みで表示されているのでしょうか？
「WEBシステム」について調べると、ブラウザやサーバー、HTML、プログラミングといった言葉が出てきますが、これらはいったい何なのでしょうか。
この記事では、それらの基本的な用語を含め、WEBシステムの仕組みをわかりやすく解説していきます。

 WEBシステムの仕組み

 概要

私たちがインターネットで記事を読んだり、YouTubeの動画を見るとき、スマホやパソコンの「ブラウザ」は、「サーバー」というコンピュータに「このページを表示してください」とリクエストを送ります。サーバーは、そのリクエストに応えて記...]]></description><link>https://zenn.dev/frontline/articles/0a5d26964a29fc</link><guid isPermaLink="true">https://zenn.dev/frontline/articles/0a5d26964a29fc</guid><pubDate>Thu, 20 Mar 2025 12:12:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cH5zA2UC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WEB%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kota%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTIxOTFjNjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kota</dc:creator></item><item><title><![CDATA[Reactでモーダルが閉じるまで処理を待機させる方法]]></title><description><![CDATA[
 はじめに
今回はかなり難しいです。
非同期・Promise・useState・props・コールバック関数・移譲、あたりを知っている前提になるため、何を言っているいかわからない場合は先にこれらの記事を読むことをお勧めします。
Promiseについては後日、私も書きたいと思っていますが、今回結構ハマったのでタイトルの答えを先に公開します。

 考え方
モーダルの結果、画面遷移を伴う場合は何も難しくありません。
普通にnavigateなり、aタグなりでロケーションを変えるだけです。
しかし、同じ画面で独自仕様の確認モーダルを開いて、モーダルで押されたボタンによって処理を進めるか決めたいと...]]></description><link>https://zenn.dev/k_tabuchi/articles/20fe4fb5360556</link><guid isPermaLink="true">https://zenn.dev/k_tabuchi/articles/20fe4fb5360556</guid><pubDate>Thu, 20 Mar 2025 11:25:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8rhrSxre--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25AB%25E3%2581%258C%25E9%2596%2589%25E3%2581%2598%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25BE%2585%25E6%25A9%259F%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k-tabuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkMjhhY2RlZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k-tabuchi</dc:creator></item><item><title><![CDATA[Grapesjsを構築①-ノーコードWEBビルダー]]></title><description><![CDATA[
 GrapesJSとは？
GrapesJS（グレープスジェイエス） は、ドラッグ＆ドロップで簡単にWebサイトやメールテンプレートを作成できるオープンソースのWebビルダーです。
特に、コーディングの知識がなくてもWebページを作れるのが大きな特徴です。
GrapesJSを使えば、ノーコードでのデザイン作成やカスタムHTMLの編集が可能になるため、Webデザイナーやマーケター にも便利なツールとなっています。

参考：GrapesJSドキュメント（公式）
参考：GrapesJS (github)

自分なりに色々カスタムしています😀
https://pf-creater.com/gra...]]></description><link>https://zenn.dev/web_kuroko/articles/37fa74a7c25fc2</link><guid isPermaLink="true">https://zenn.dev/web_kuroko/articles/37fa74a7c25fc2</guid><pubDate>Thu, 20 Mar 2025 10:55:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KThXEuf1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Grapesjs%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E2%2591%25A0-%25E3%2583%258E%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589WEB%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2580%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:web%25E9%25BB%2592%25E5%25AD%2590%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTk2YjM5YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>web黒子</dc:creator></item><item><title><![CDATA[obs-websokcet-jsを使ってOBSと疎通をとる]]></title><description><![CDATA[
 はじめに
配信やスクリーンキャプチャなどで広く使われているOBS Studio（Open Broadcaster Software）は、多くのクリエイターにとって必須のツールとなっています。OBSを外部から制御できれば、配信の自動化やカスタムコントロールの作成など、様々な可能性が広がります。
本記事では、OBSとWebSocketを使った連携方法、特に「obs-websocket-js」ライブラリを使用してJavaScriptからOBSを制御する方法について解説します。

 OBSとは
OBS Studio（Open Broadcaster Software）は、無料でオープンソース...]]></description><link>https://zenn.dev/te2wow/articles/825623c90abddd</link><guid isPermaLink="true">https://zenn.dev/te2wow/articles/825623c90abddd</guid><pubDate>Thu, 20 Mar 2025 06:03:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KpIyCQOJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:obs-websokcet-js%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6OBS%25E3%2581%25A8%25E7%2596%258E%25E9%2580%259A%25E3%2582%2592%25E3%2581%25A8%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tetsuwo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlhvdUdteF9Uanh5VXdmalVwOGx3VEE2dEduVExXMXNLQzN3ck1RUTM0RERpSFJ2WGQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tetsuwo</dc:creator></item></channel></rss>