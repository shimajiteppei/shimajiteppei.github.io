<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 26 Apr 2025 09:43:54 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RINQ: Rust Integrated Queryの構想]]></title><description><![CDATA[
 RINQ：Rustのための型安全・ゼロコストな次世代クエリエンジン構想

 概要
RINQ（Rust Integrated Query） は、Rust言語向けに設計された、型安全・ゼロコスト・宣言的なクエリエンジン構想です。
C#のLINQから着想を得つつ、Rustの型システムとパフォーマンス特性を活かして、安全かつ高速なクエリ操作を実現します。
RINQは、メモリ上のコレクション（Vec、スライス）だけでなく、データベース、REST API、ファイルシステム、さらには将来的にはバイナリストリームまで、多様なデータソースに対して一貫した操作性を提供することを目指します。
また、Web...]]></description><link>https://zenn.dev/kazuma0606/articles/4591c0a3b10910</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/4591c0a3b10910</guid><pubDate>Sat, 26 Apr 2025 08:00:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rCwQa-Ej--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RINQ%253A%2520Rust%2520Integrated%2520Query%25E3%2581%25AE%25E6%25A7%258B%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwMWM1OTYyYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[トレイト境界は加法群なのか]]></title><description><![CDATA[Rustにおけるトレイトの記述をめぐって色々妄想する記事です
ほな早速

 結論
（トレイト境界は加法群では）ないです

 きっかけ
Rustでトレイトの制限を記述する際、複数のトレイトを実装していて欲しい場合は+記号を使って表現します
where T: Clone + Default, ..
Rust習いたてでこの記法を使い始めたとき、言葉にならない違和感がありました
初めのうちは足してるのに=記号がないうんぬん、という表記の問題かなと思っていましたが、色々考えていく内にそういうわけでもないんじゃないかと思う様になりました
使う側（関数とか）から見ると、気になるのはその型で何ができるの...]]></description><link>https://zenn.dev/cp_r/articles/ce022b7625bd13</link><guid isPermaLink="true">https://zenn.dev/cp_r/articles/ce022b7625bd13</guid><pubDate>Sat, 26 Apr 2025 00:20:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WM_HMFIH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E5%25A2%2583%25E7%2595%258C%25E3%2581%25AF%25E5%258A%25A0%25E6%25B3%2595%25E7%25BE%25A4%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:9kv8xiyi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE1NjljYjFhZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>9kv8xiyi</dc:creator></item><item><title><![CDATA[コードスニペット24選で学ぶRustの基本概念]]></title><description><![CDATA[
Rust は、安全性、パフォーマンス、および並行性に優れたシステムレベルのプログラミング言語であり、豊富でユニークな言語機能を備えています。この記事では、24 個の簡潔なコードスニペットを通じて、Rust のコア機能を紹介します。

 パターンマッチ（Pattern Matching）
Rust の match 式はパターンマッチを実現する構文であり、ある値が一連のパターンに一致するかを確認することができます。
let number = Some(42);
match number {
    Some(x) =&gt; println!("The number is {}", x),...]]></description><link>https://zenn.dev/leap_adam/articles/38cd93692f603f</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/38cd93692f603f</guid><pubDate>Fri, 25 Apr 2025 17:51:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Cko81JFn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25B9%25E3%2583%258B%25E3%2583%259A%25E3%2583%2583%25E3%2583%258824%25E9%2581%25B8%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6Rust%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E6%25A6%2582%25E5%25BF%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[0009-iter]]></title><description><![CDATA[iter()で高階関数とかにかかる
値はOptionalで扱う
fn main() {
    let mut c = vec![1,2,3,4,5,6,7,8,9,10];
    for v in c.iter_mut() {
        *v += 1;
    }
    println!("{:?}", c);
    
    let filtered = c.iter().filter(|&amp;x| *x &gt; 5).collect::&lt;Vec&lt;&amp;i32&gt;&gt;();
    println!("{:?}", filtered);

...]]></description><link>https://zenn.dev/yukinekonyan/articles/17d91e017d4120</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/17d91e017d4120</guid><pubDate>Fri, 25 Apr 2025 07:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0dk75JCb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0009-iter%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0008 read-lines, regex]]></title><description><![CDATA[use std::fs::read_to_string;
use std::env;
use regex::Regex;
fn main() {
    let args: Vec&lt;String&gt; = env::args().collect();

    let filename = &amp;args[1];
    println!("Reading file: {}", filename);
    let lines = read_lines(&amp;filename);
    let re = Regex::new(r"Alice").unwrap();
  ...]]></description><link>https://zenn.dev/yukinekonyan/articles/dd21d3dccae159</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/dd21d3dccae159</guid><pubDate>Fri, 25 Apr 2025 05:31:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lBC2pOlp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:0008%2520read-lines%252C%2520regex%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0007 file-open]]></title><description><![CDATA[std::path::Pathとか使う
use std::{fs::File, io::Read, path::Path};
fn main() {
    let path = Path::new("hello.txt");
    let display = path.display();

    let mut file = match File::open(&amp;path) {
        Err(why) =&gt; panic!("couldn't open {}: {}", display, why),
        Ok(file) =&gt; file,
 ...]]></description><link>https://zenn.dev/yukinekonyan/articles/d32171ba9ac74c</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/d32171ba9ac74c</guid><pubDate>Fri, 25 Apr 2025 05:29:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zGSCfKQc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0007%2520file-open%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Rustを書くときにやってはいけない間違い]]></title><description><![CDATA[
Rust は、安全性と並行処理を特徴とするシステムプログラミング言語として、近年多くの開発者から注目を集めています。しかし、強力で設計が優れたこの言語であっても、開発の過程でよく見られる悪い習慣が存在します。これらの悪習は、コードの保守性を低下させ、パフォーマンスに悪影響を及ぼし、さらにはセキュリティリスクを招く可能性もあります。この記事では、よくある悪習を紹介し、それらを改善するための提案を行います。

 一、unwrap と expect の過度な使用
Rust のOption型とResult型は強力なエラーハンドリング機能を提供しますが、多くの初心者は手軽さを求めてunwrapや...]]></description><link>https://zenn.dev/leap_adam/articles/429188484901ea</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/429188484901ea</guid><pubDate>Thu, 24 Apr 2025 18:51:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EVxk4uAv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E9%2596%2593%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[SQLxのクエリビルダーでよく使うパターン]]></title><description><![CDATA[RustのライブラリであるSQLxのクエリビルダーは文字列を結合していくだけの低レベルな機能しか提供しません。
毎回組み立てるのは大変なので、いくつかのよく使うパターンをここにメモすることにします。データベースはMariaDB(MySQL)を使いましたがPostgreSQLやSQLiteもたぶん同じです。

 VALUES句でまとめてINSERTしたいとき
いわゆるバルクインサートです。

出力
INSERT INTO users(id, name) VALUES (?, ?), (?, ?)


コード
use sqlx::QueryBuilder;
use sqlx::MySql;
...]]></description><link>https://zenn.dev/itte/articles/6d92065f718b2e</link><guid isPermaLink="true">https://zenn.dev/itte/articles/6d92065f718b2e</guid><pubDate>Thu, 24 Apr 2025 11:34:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xb4aDcyy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SQLx%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2580%25E3%2583%25BC%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakamura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhZmFmY2VlMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakamura</dc:creator></item><item><title><![CDATA[CocoIndex - AI向けオープンソースデータフレームワーク]]></title><description><![CDATA[
CocoIndexのオープンソースリリースを発表できることを大変嬉しく思います。CocoIndexは、データインデックス作成に特化したカスタム変換ロジックとインクリメンタルアップデートの両方をサポートする世界初のエンジンです。
https://github.com/cocoindex-io/cocoindex

CocoIndexは、セマンティック検索や検索拡張生成（RAG）などのAIアプリケーション向けにデータを準備するためのETLフレームワークです。データ駆動型のプログラミングモデルを提供し、データインデックス作成パイプラインの作成と維持を簡素化し、データの鮮度と一貫性を確保します...]]></description><link>https://zenn.dev/badmonster/articles/fd89b3a1a3dadc</link><guid isPermaLink="true">https://zenn.dev/badmonster/articles/fd89b3a1a3dadc</guid><pubDate>Thu, 24 Apr 2025 08:15:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R33phZdV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CocoIndex%2520-%2520AI%25E5%2590%2591%25E3%2581%2591%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25B3%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:BadMonster%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0tnNmhDWmNITUdEamFtN3VSYVlOekpDWF8yRnBZYWN2TmNxQmRHdzBXUzlVbXVYVT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>BadMonster</dc:creator></item><item><title><![CDATA[Rust 小ネタ: exec でループして FizzBuzz する]]></title><description><![CDATA[こんにちは。Fairy Devices株式会社 となんらかの関わりがある nogiro (Twitter (現 Twitter): @nogiro_iota) です。
sat さんの exec 解説を見たんですよね。
https://www.youtube.com/watch?v=0qsIC-lpP8E
それで、自分自身に exec したら再帰できてループできるよなと思って作成したプログラムを解説するのが今回の記事です。
個人的な趣味として変な FizzBuzz を作りたいという欲求があり、昔は GNU Make で FizzBuzz したり していました。要は、ループできれば Fizz...]]></description><link>https://zenn.dev/fairydevices/articles/ef84ebc7ef4b7c</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/ef84ebc7ef4b7c</guid><pubDate>Thu, 24 Apr 2025 08:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s5ESsbvw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520exec%2520%25E3%2581%25A7%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2581%2597%25E3%2581%25A6%2520FizzBuzz%2520%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nogiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NGU1YjkxNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nogiro</dc:creator></item><item><title><![CDATA[完全自分用：Rustの基本 - TypeScriptと比較して]]></title><description><![CDATA[Geminiが書いた


 ステップ1: 環境構築とHello, World!
概要:
Rustの開発を始めるための最初のステップです。コンパイラやビルドツールをインストールし、最初のプログラムを作成して実行します。
主要な概念と手順:


Rustのインストール (rustup):

Rustの公式インストーラー兼バージョン管理ツールである rustup を使います。これにより、Rustコンパイラ (rustc)、標準ライブラリ、ビルドツール兼パッケージマネージャー (cargo) などがインストールされます。
公式サイト (https://www.rust-lang.org/tool...]]></description><link>https://zenn.dev/chanpaya/articles/ba13c762679ee4</link><guid isPermaLink="true">https://zenn.dev/chanpaya/articles/ba13c762679ee4</guid><pubDate>Thu, 24 Apr 2025 06:01:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BvCORaEZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%258C%25E5%2585%25A8%25E8%2587%25AA%25E5%2588%2586%25E7%2594%25A8%25EF%25BC%259ARust%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%2520-%2520TypeScript%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%25E3%2581%2597%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:champaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmYmY1NGIxMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>champaya</dc:creator></item><item><title><![CDATA[0006 sqlx]]></title><description><![CDATA[use sqlx::{Executor};
#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();
    let pool = sqlx::mysql::MySqlPoolOptions::new()
        .max_connections(5)
        .connect("mysql://sample:password@localhost:3306/sample")
        .await
        .unwrap();
    pool.execute("DROP TA...]]></description><link>https://zenn.dev/yukinekonyan/articles/e3f2ac112b863d</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/e3f2ac112b863d</guid><pubDate>Thu, 24 Apr 2025 03:16:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---ofPYof0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0006%2520sqlx%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0005 axum]]></title><description><![CDATA[use axum::{
    routing::{get, post, Router},
    extract::{Json}
};

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();
    let app = Router::new()
        .route("/", get(root))
        .route("/users", post(create_user));

    let listener = tokio::net::TcpListener::bind("0....]]></description><link>https://zenn.dev/yukinekonyan/articles/a9939b3f7a7b6f</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/a9939b3f7a7b6f</guid><pubDate>Thu, 24 Apr 2025 02:34:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DpAkcfe3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0005%2520axum%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0004 memcahed-client]]></title><description><![CDATA[use memcache;
fn main() {
    let client = memcache::connect("memcache://127.0.0.1:11211").unwrap();
    client.flush().unwrap();
    client.set("foo", "bar", 10).unwrap();

    let value: Option&lt;String&gt; = client.get("foo").unwrap();

    assert_eq!(value, Some(String::from("bar")));
    as...]]></description><link>https://zenn.dev/yukinekonyan/articles/db451b14670867</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/db451b14670867</guid><pubDate>Thu, 24 Apr 2025 00:06:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K-D42EA8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:0004%2520memcahed-client%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Rustのパターンマッチング：実践ガイド]]></title><description><![CDATA[

 はじめに
Rust におけるパターンマッチングは、非常に強力な言語機能です。これにより、さまざまなパターンに基づいて異なる処理を実行することができます。マッチングは、列挙型の処理、タプルや構造体の分解、条件式の処理など、さまざまな場面で使用されます。本記事では、Rust のマッチング構文について詳しく紹介し、サンプルコードを通じてその使い方と利点を説明します。

 基本的な使い方
Rust においてマッチングは match キーワードを使って行います。match 式は複数の arm（分岐）から構成され、それぞれの arm にはパターンと、それにマッチしたときに実行されるコードブロッ...]]></description><link>https://zenn.dev/leap_adam/articles/8bb93ba0cc2055</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/8bb93ba0cc2055</guid><pubDate>Wed, 23 Apr 2025 22:31:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UCeapBMY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2583%259E%25E3%2583%2583%25E3%2583%2581%25E3%2583%25B3%25E3%2582%25B0%25EF%25BC%259A%25E5%25AE%259F%25E8%25B7%25B5%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[ubuntu24.04にRustとTypstの環境構築]]></title><description><![CDATA[※ubuntu24.04からどうやらaptでRustのインストールが可能になったらしい

 Rustのインストール
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
を実行。curlがインストールされていない場合は
sudo apt install -y curl
を実行しましょう。

なにかこだわりがなければそのままEnter。これでインストールが行われます。
. $HOME/.cargo/env
でバスを設定するスクリプトが実行されます。
cargo --version
 
rustc --version
バ...]]></description><link>https://zenn.dev/keyizhen/articles/9be6a2dd152225</link><guid isPermaLink="true">https://zenn.dev/keyizhen/articles/9be6a2dd152225</guid><pubDate>Wed, 23 Apr 2025 12:08:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xno98lcZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ubuntu24.04%25E3%2581%25ABRust%25E3%2581%25A8Typst%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Key%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjM3azFrUFpTZ1FJYm93MV9XU2ZoNXBJQzVuWVdXcDRjQjFDeGFuTEo4SUVwbTNvZlVaQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Key</dc:creator></item><item><title><![CDATA[0003 redis-client]]></title><description><![CDATA[async version
use redis::AsyncCommands;
use anyhow::Result;
#[tokio::main]
async fn main() -&gt; Result&lt;()&gt; {
    let client = redis::Client::open("redis://127.0.0.1/").unwrap();
    let mut connection = client.get_multiplexed_async_connection().await?;
    let _ : () = connection.set("my_k...]]></description><link>https://zenn.dev/yukinekonyan/articles/47ce4bc1b01e6f</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/47ce4bc1b01e6f</guid><pubDate>Wed, 23 Apr 2025 08:15:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_-IQ7Zx_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0003%2520redis-client%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0002 serde json]]></title><description><![CDATA[jsonのparseとbuild
use serde_json::json;
use serde_json::Value;
fn main() -&gt; Result&lt;(), serde_json::Error&gt; {
    let json_str = r#"{"name": "John Doe", "age": 30, "is_student": false}"#;
    let parsed:Value = serde_json::fro m_str(json_str)?;
    println!("{}", parsed["name"].to_string())...]]></description><link>https://zenn.dev/yukinekonyan/articles/6eccf5e18c251b</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/6eccf5e18c251b</guid><pubDate>Wed, 23 Apr 2025 07:13:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8hl0NimX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0002%2520serde%2520json%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0001 reqwest-http]]></title><description><![CDATA[use reqwest;
use anyhow::Result;
#[tokio::main]
async fn main() -&gt; Result&lt;()&gt;{
    let url = "https://google.com";
    let res = reqwest::get(url).await?;
    assert!(res.status().is_success());
    println!("{}", res.status());
    let _body = res.text().await?;
    //println!("{body}")...]]></description><link>https://zenn.dev/yukinekonyan/articles/3a1f78d3ac7973</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/3a1f78d3ac7973</guid><pubDate>Wed, 23 Apr 2025 01:51:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PKBJdpFN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0001%2520reqwest-http%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[RustのSizedトレイトと動的サイズ型の理解]]></title><description><![CDATA[

 序論
Rust は、安全性とパフォーマンスに優れたシステムレベルのプログラミング言語です。Rust において、型のサイズをコンパイル時に決定できることは非常に重要です。しかし、一部の型についてはそのサイズがコンパイル時に決定できません。これが、Rust における動的サイズ型（DST: Dynamically Sized Type）に関係しています。Rust では、コンパイル時に型のサイズを確定できるようにするために、Sized トレイトが導入されています。
この記事では、Rust の Sized トレイトについて深く掘り下げていきます。Sized トレイトの定義、役割、使用方法、そ...]]></description><link>https://zenn.dev/leap_adam/articles/394b78e55aad2b</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/394b78e55aad2b</guid><pubDate>Tue, 22 Apr 2025 16:55:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZO1KDp6v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AESized%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A8%25E5%258B%2595%25E7%259A%2584%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E5%259E%258B%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item></channel></rss>