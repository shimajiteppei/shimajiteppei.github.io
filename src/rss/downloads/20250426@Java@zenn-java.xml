<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 26 Apr 2025 01:54:41 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[AWS ECSからVertex AIを呼び出す; Workload Identityは使用しない]]></title><description><![CDATA[
 概要

サービスアカウントキーファイルの中身をAWS Secret Managerに登録する
Secret Managerの値をConfigurationPropertiesに紐付ける
ByteArrayInputStreamに変換し、Credentialsを作成
Credentialsを使用してサービスアカウントとして認証、Vertex AIを呼び出す


 1. Google Cloudの準備

 1.1 サービスアカウントを作成、JSONキーファイルをダウンロード
公式ドキュメントに従い、作業を行う。
https://cloud.google.com/iam/docs/serv...]]></description><link>https://zenn.dev/hayato8739/articles/call-vertex-ai-from-aws-ecs</link><guid isPermaLink="true">https://zenn.dev/hayato8739/articles/call-vertex-ai-from-aws-ecs</guid><pubDate>Fri, 25 Apr 2025 15:08:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yh2JxvoZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520ECS%25E3%2581%258B%25E3%2582%2589Vertex%2520AI%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%253B%2520Workload%2520Identity%25E3%2581%25AF%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yado%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwNzlhODMwYjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yado</dc:creator></item><item><title><![CDATA[Springを理解するためのスレッド＆スレッドローカル入門]]></title><description><![CDATA[この記事では、Javaのスレッドについて解説します。
普段Webアプリを開発する際にはあまり意識しませんが、Tomcatなどのアプリケーションサーバーが複数のリクエストを同時に受け付ける際は、1つのリクエストに対して1つのスレッドを割り当てて処理を実行しています。
スレッドローカルは、Spring SecurityやSpringトランザクションが内部的に使っている、スレッドごとの値の保存場所です。
自分でスレッドを使ったプログラムを書く機会は少ないと思いますが、アプリケーションサーバーやSpringの内部の理解するには欠かせない知識です。

 環境

JDK 21
logback-cla...]]></description><link>https://zenn.dev/masatoshi_tada/articles/d6e57c8a0247c7</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/d6e57c8a0247c7</guid><pubDate>Fri, 25 Apr 2025 02:23:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JqfDZYY3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25EF%25BC%2586%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Javaの「インポート」をざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaのインポートについてざっくり知りたい方


 目次
1. 他パッケージへのアクセス方法
2. インポートの方法
3. オンデマンドインポー...]]></description><link>https://zenn.dev/wakinoza/articles/d64024cfcb69f7</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/d64024cfcb69f7</guid><pubDate>Fri, 25 Apr 2025 01:38:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PvUh1wiG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2580%258D%25E3%2582%2592%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[Javaの「パッケージ」をざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaのパッケージの規則についてざっくり知りたい方


 目次
1. パッケージとは
2. パッケージの構造
3. 完全修飾クラス名
4. パッ...]]></description><link>https://zenn.dev/wakinoza/articles/23b648416ae9a1</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/23b648416ae9a1</guid><pubDate>Thu, 24 Apr 2025 07:38:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iwKj_TrK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2580%258D%25E3%2582%2592%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA["" '' ` の違い完全整理：Java・JavaScript・Pythonの文字列リテラル文化を横断解説！]]></title><description><![CDATA[
 テンプレートリテラルとは？


定義： 文字列中に ${式} や {式} を埋め込める構文

JS： `Hello ${name}`


Python： f"Hello {name}"


特に "（ダブルクオート）"、'（シングルクオート）'、`（バッククオート）` の違いは、  Java / JavaScript / Python で大きく扱いが異なります。


 ✅ Javaの場合



記号
用途
型
例
補足




""
文字列
String
"hello"
複数文字OK


''
単一文字
char
'h'
1文字のみ


`
×
―
―
存在しない構文、書けばエラー
...]]></description><link>https://zenn.dev/lia/articles/9fb5bc6a60918d</link><guid isPermaLink="true">https://zenn.dev/lia/articles/9fb5bc6a60918d</guid><pubDate>Tue, 22 Apr 2025 18:17:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u-9Lfyym--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2522%2522%2520%2527%2527%2520%2560%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E5%25AE%258C%25E5%2585%25A8%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%259AJava%25E3%2583%25BBJavaScript%25E3%2583%25BBPython%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2583%25AA%25E3%2583%2586%25E3%2583%25A9%25E3%2583%25AB%25E6%2596%2587%25E5%258C%2596%25E3%2582%2592%25E6%25A8%25AA%25E6%2596%25AD%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2581%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5ZmExMWM5MzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りあ</dc:creator></item><item><title><![CDATA[[Java]equalsIgnoreCaseメソッド とは （備忘録）]]></title><description><![CDATA[
 １．はじめに
大文字/小文字を区別せずに文字列が一致しているか比較したい場合、equalsIgnoreCase メソッドを使用します。

 ２．サンプルプログラム
〇例１:

Sapmple_1.java
public class Sample_1 {
    public static void main(String[] args) {
        String upperData = "ABC";
        String lowerData = "abc";

        if (upperData.equalsIgnoreCase(lowerData)) {
 ...]]></description><link>https://zenn.dev/yama_kawa/articles/4126372faf4067</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/4126372faf4067</guid><pubDate>Tue, 22 Apr 2025 13:19:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RpzOfuSn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255DequalsIgnoreCase%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2520%25E3%2581%25A8%25E3%2581%25AF%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[JavaSilver強化④関数型インターフェースとラムダ式]]></title><description><![CDATA[
 関数型インターフェースとは？
関数型インターフェースとは、1つの抽象メソッドだけを持つインターフェースのことです。
Java 8から導入され、ラムダ式で簡単に実装することができます。

 関数型インターフェースの特徴：


抽象メソッドが1つだけである。

@FunctionalInterface アノテーションがあると、コンパイラが関数型インターフェースであることをチェックします。


 例：Runnableインターフェース
@FunctionalInterface
public interface Runnable {
    void run();
}


 ラムダ式とは？
ラ...]]></description><link>https://zenn.dev/hyoni/articles/38804c9ca8cb77</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/38804c9ca8cb77</guid><pubDate>Tue, 22 Apr 2025 05:27:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o073_WJ---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaSilver%25E5%25BC%25B7%25E5%258C%2596%25E2%2591%25A3%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25A8%25E3%2583%25A9%25E3%2583%25A0%25E3%2583%2580%25E5%25BC%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[Spring Bootユーザーのためのサーブレット入門およびチュートリアル]]></title><description><![CDATA[近年の新人研修では、Javaの基本文法などを学んだ後にいきなりSpring Bootを学ぶため、サーブレットを知らない方も多いと思います。
普段の開発ではサーブレットを意識することはほぼ無いのですが、Spring Bootのカスタマイズなど込み入ったことをするには、サーブレットの知識が必要になります。
この記事では、必要最低限のサーブレットの知識および簡単なアプリケーションの作成方法を解説します。

 環境

JDK 21
Tomcat 10.1.40
Jakarta Servlet 6.0
macOS 15


 用語などの解説

 Webにおける静的コンテンツと動的コンテンツ
Web...]]></description><link>https://zenn.dev/masatoshi_tada/articles/ab53b6de8be77d</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/ab53b6de8be77d</guid><pubDate>Mon, 21 Apr 2025 06:42:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L6UVusxO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2588%25E5%2585%25A5%25E9%2596%2580%25E3%2581%258A%25E3%2582%2588%25E3%2581%25B3%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[DB負荷改善の道のり：技術的負債解消から始まった挑戦]]></title><description><![CDATA[
 はじめに
みなさま、こんにちは！！！
サービス機能開発チームの尾形です。
今回は、弊社のシステム基盤チームと共同で今まさに取り組んでいるDB負荷改善プロジェクトについて紹介します。

 DB負荷改善プロジェクトとは
弊社のインフラ構築、運用を担当しているシステム基盤チームから、システムの監視をしている中でDBサーバーへの負荷が高まっている時間があると報告を受けました。
このまま放置すれば、パフォーマンス低下やDBのクラッシュの恐れがあるため、DBの負荷を軽減するための改善プロジェクトが立ち上がりました。

 改修方針の決定
負荷の原因について調査をすると、重いバッチ処理が動いている時...]]></description><link>https://zenn.dev/wn_engineering/articles/1b0f2b7f2d53f6</link><guid isPermaLink="true">https://zenn.dev/wn_engineering/articles/1b0f2b7f2d53f6</guid><pubDate>Mon, 21 Apr 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S8vTdEz_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DB%25E8%25B2%25A0%25E8%258D%25B7%25E6%2594%25B9%25E5%2596%2584%25E3%2581%25AE%25E9%2581%2593%25E3%2581%25AE%25E3%2582%258A%25EF%25BC%259A%25E6%258A%2580%25E8%25A1%2593%25E7%259A%2584%25E8%25B2%25A0%25E5%2582%25B5%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E6%258C%2591%25E6%2588%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B0%25BE%25E5%25BD%25A2%2528ogata%2529%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE3MzZjZWRmZjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:WealthNavi%2520Engineeri...%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2ZmZhNDUzZDUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>尾形(ogata)</dc:creator></item><item><title><![CDATA[QuarkusのDevServicesでDynamoDBの初期化スクリプトを実行する]]></title><description><![CDATA[公式にプロパティの説明は記載されているものの、実装例等が見当たらなかったため、備忘も兼ねて。
devモード、QuarkusTest、QuarkusIntegrationTestの全てで、アプリの立ち上げ前に初期化処理を実行することができます。

 結論
下記にあたるプロパティを設定し、指定パスに初期化用のスクリプトを配置することでlocalStackの立ち上げ時に初期化スクリプトを実行することができます。
quarkus.aws.devservices.localstack.init-scripts-classpath
quarkus.aws.devservices.localstack...]]></description><link>https://zenn.dev/yo_yamada/articles/b72618e1047d26</link><guid isPermaLink="true">https://zenn.dev/yo_yamada/articles/b72618e1047d26</guid><pubDate>Sun, 20 Apr 2025 16:06:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C-3XLZU0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Quarkus%25E3%2581%25AEDevServices%25E3%2581%25A7DynamoDB%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yohei_yamada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlmYmRlYzliYTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yohei_yamada</dc:creator></item><item><title><![CDATA[Spring Securityチュートリアルを動かす]]></title><description><![CDATA[
 spring security を学んでみようと思う。

 モチベーション
Javaを使ってWebアプリを作ってみようとするときSpringが有名っぽいですよね。
私も例外ではなくSpringを使用してAPIサーバを作ってみていたんですが，
ある日「ログイン機能の実装はSpring Securityなるもので作ってね」と平然と言われ結局うまく作れませんでした；；
個人で遊びで作る分にはログイン機能はいらないやと作るのをサボって痛い目見ました…
ということでSpring Securityをつかって学んでみます。

 さっさと動かしてみる。
https://docs.spring.io/...]]></description><link>https://zenn.dev/lcyou/articles/ec97587816adf3</link><guid isPermaLink="true">https://zenn.dev/lcyou/articles/ec97587816adf3</guid><pubDate>Sun, 20 Apr 2025 14:29:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RnwKYcdu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Security%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:lCyou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlYzhlY2ExMzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>lCyou</dc:creator></item><item><title><![CDATA[Spring Boot ・Testcontainers・Flyway でテスト環境を作成]]></title><description><![CDATA[Testcontainersを使用すると、Dockerコンテナ上でデータベースやミドルウェアを立ち上げてテストを行えます。Spring BootアプリケーションにPostgreSQLとFlywayを組み合わせて、テストを行います。

 環境

Java21
Spring Boot 3.4.4


 依存関係
dependencies {
    implementation("org.springframework.boot:spring-boot-starter:3.4.4")
    implementation("org.springframework.boot:spring-bo...]]></description><link>https://zenn.dev/h_yamazaki/articles/2a7804e6d682ef</link><guid isPermaLink="true">https://zenn.dev/h_yamazaki/articles/2a7804e6d682ef</guid><pubDate>Sun, 20 Apr 2025 08:00:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hxwdKcAl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%25E3%2583%25BBTestcontainers%25E3%2583%25BBFlyway%2520%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:h_yamazaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKekxULWFXMFREdUhZU1dfZGdzQnJuMHUxd1ZFdzhSTFVEaWVmYV89czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>h_yamazaki</dc:creator></item><item><title><![CDATA[Spring WebMVC/WebFlux で実現する省エネなスキーマ駆動開発]]></title><description><![CDATA[
 はじめに
“スキーマ駆動開発 (Schema‑Driven Development)” という概念があります。APIのドキュメントをOpenAPIのスキーマとしてまず定義し、そのスキーマからサーバーコードとクライアントコードを自動生成することでドキュメントと実装の乖離を防ぎ、開発サイクルの高速化と品質を担保する手法です。
一方で、OpenAPIのスキーマを人間が手で書くのはやや体験が悪いです。
その解決策としてtypespecなどもありますが、今回は紹介しません。
Spring WebMVC/WebFluxにおいては、springdoc-openapiを使うことで、Springのコン...]]></description><link>https://zenn.dev/be_hase/articles/e55f96be2856e6</link><guid isPermaLink="true">https://zenn.dev/be_hase/articles/e55f96be2856e6</guid><pubDate>Sun, 20 Apr 2025 07:48:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RThayC8Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520WebMVC%252FWebFlux%2520%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E7%259C%2581%25E3%2582%25A8%25E3%2583%258D%25E3%2581%25AA%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:be-hase%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNaVhNZnFBWE9yTXdHZVdBMEpmaE5OX3FJRVExUWQzRUw2MVJtM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>be-hase</dc:creator></item><item><title><![CDATA[javacだとエラーにならないが、ECJだとエラーになることがあるらしい]]></title><description><![CDATA[
 この記事を書くに至った経緯
Java8 + Spring Bootで書かれたプログラムを、IntelliJ IDEAで開いて編集していた。
しかし、話題のAIエディタCursorを使用したくて、同じプログラムをCursor(VSCode)で開いてみた。
すると、なぜか大量のエラーが発生し、コンパイルできなくなった。
原因を探るのに1日溶かしてしまったので、戒めとして投稿する。

 エラーが起こったコード
要約すると、以下のようなコードである。
package com.example;

import java.util.List;

public class ServiceImpl&...]]></description><link>https://zenn.dev/luxun1910/articles/f56c36b0bd7ffd</link><guid isPermaLink="true">https://zenn.dev/luxun1910/articles/f56c36b0bd7ffd</guid><pubDate>Sat, 19 Apr 2025 02:25:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DQZXl570--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:javac%25E3%2581%25A0%25E3%2581%25A8%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2581%258C%25E3%2580%2581ECJ%25E3%2581%25A0%25E3%2581%25A8%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258B%25E3%2583%25BC%25E3%2581%2597%25E3%2582%2585%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dBZFdnQnc3NEMtSE9VekhVX05BcGxIeTlvaGdjQTdZMWptTnp3bVVFPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>るーしゅん</dc:creator></item><item><title><![CDATA[[Java]配列から無作為に値を抽出する方法について （備忘録）]]></title><description><![CDATA[
 １．はじめに
配列の要素数とMathクラスで用意されているrandomメソッドを併用して、配列から無作為に値を抽出します。

 ２．サンプルプログラム

Sample.java
public class Sample {
    public static void main(String[] args) {
        String[] fishes = {"鮪", "鱧", "鯉", "鰻", "鯛"};

        // 配列fishesの要素数を取得
        int fishesCount = fishes.length;

        /*
     ...]]></description><link>https://zenn.dev/yama_kawa/articles/4cedce24be707a</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/4cedce24be707a</guid><pubDate>Thu, 17 Apr 2025 14:26:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BvRh-i3A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255D%25E9%2585%258D%25E5%2588%2597%25E3%2581%258B%25E3%2582%2589%25E7%2584%25A1%25E4%25BD%259C%25E7%2582%25BA%25E3%2581%25AB%25E5%2580%25A4%25E3%2582%2592%25E6%258A%25BD%25E5%2587%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[Java の「static」についてざっくりまとめてみた[Java 初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者 Wakinoza と申します。
Java 勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Java を勉強中の方
Java SE Bronze 試験を勉強中の方
Java の「static」や静的メンバーについてざっくり知りたい方


 目次
1. インスタンスメンバーと静的メンバー
2. ...]]></description><link>https://zenn.dev/wakinoza/articles/ad7da3eda181e6</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/ad7da3eda181e6</guid><pubDate>Thu, 17 Apr 2025 11:57:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FVISSx76--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2581%25AE%25E3%2580%258Cstatic%25E3%2580%258D%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%2520%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[Javaでファイルを使用中、inodeレベルでは何が起きるか]]></title><description><![CDATA[Java でファイルを開いたまま mv で置き換えた場合、Java プログラムは新しい内容を読み取るのか？
Linux の inode の仕組みと合わせて挙動を確認してみました。

 結論：Javaはinodeを保持し続ける
Linux では「ファイル名」と「実体（inode）」は別物です。
Java はファイルを open() した時点で inode に紐付けられるため、途中で mv によりファイルが入れ替わっても、開いた時点の inode を参照し続けました。

 ファイル構成と inode 確認
テキストファイルに「1, 2, 3, 4, 5」と書いて、Java プログラムで読み取...]]></description><link>https://zenn.dev/daikinakajima/articles/java-inode-ls-mv-check</link><guid isPermaLink="true">https://zenn.dev/daikinakajima/articles/java-inode-ls-mv-check</guid><pubDate>Wed, 16 Apr 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cvQI0Ol---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E4%25B8%25AD%25E3%2580%2581inode%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258C%25E8%25B5%25B7%25E3%2581%258D%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daiki%2520Nakajima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YTJLTDZpWDVRM2VQZHJ0OUk5TXJlUC1OcTV4cGhQQmxXNmoxWWk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki Nakajima</dc:creator></item><item><title><![CDATA[継承（extends）、多態性（オーバーライド）]]></title><description><![CDATA[
 まえがき
chat-gptで作った学習ロードマップをプログラミング初学者が勉強する試みです
ロードマップはchat-gptを使用してますが、学習は公式のチュートリアルや技術系ブログなどを参考にしています
Goの復習も兼ねているのでGoとの違いについても言及します
今回は継承（extends）、多態性（オーバーライド）について内容をまとめていきます

 継承とは？

 概要
クラスAからクラスBへと派生させることで、クラスAのフィールドとメソッドをクラスBへと継承させること
それぞれの関係性はそれぞれからみて


クラスA
スーパークラス（基本クラス、親クラスとも呼ぶ）


クラスB
...]]></description><link>https://zenn.dev/miya_miya/articles/fcdd59fb6a4c27</link><guid isPermaLink="true">https://zenn.dev/miya_miya/articles/fcdd59fb6a4c27</guid><pubDate>Tue, 15 Apr 2025 16:34:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q0S6YLEr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B6%2599%25E6%2589%25BF%25EF%25BC%2588extends%25EF%25BC%2589%25E3%2580%2581%25E5%25A4%259A%25E6%2585%258B%25E6%2580%25A7%25EF%25BC%2588%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBLNnZLRXFYSzJFZVBmSG1WYnNuSXFvWlA2V1J3a2ZoV0FXeXdsZFp1NV92bjdnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miya</dc:creator></item><item><title><![CDATA[[Java]GitHubにアップされているJavaソースコードを解析  （備忘録）]]></title><description><![CDATA[
 １．はじめに
Java の理解を深めるために、他のエンジニアが作成したソースコードを解析してみました。
一部ソースコードを、自分なりに修正しています。

 ２．解析プログラム

Game.java
import java.util.Scanner;

public class Game {
    public static void main(String[] args) {
        // 標準入力（通常はキーボード）からの入力内容を受け付ける
        Scanner scanner = new Scanner(System.in);
        int sco...]]></description><link>https://zenn.dev/yama_kawa/articles/da7784e94364c5</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/da7784e94364c5</guid><pubDate>Tue, 15 Apr 2025 12:42:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c6OtEWay--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255DGitHub%25E3%2581%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%2595%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258BJava%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E8%25A7%25A3%25E6%259E%2590%2520%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[Javaの「カプセル化」についてざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java SE Bronze試験を勉強中の方
Javaのカプセル化・データ隠蔽ついてざっくり知りたい方


 目次
1. 変更に強い設計とは
2. カプセル化
3. データ隠蔽
4. ア...]]></description><link>https://zenn.dev/wakinoza/articles/51352b66d4e342</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/51352b66d4e342</guid><pubDate>Tue, 15 Apr 2025 12:19:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lFXDWbmN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2582%25AB%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25AB%25E5%258C%2596%25E3%2580%258D%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item></channel></rss>