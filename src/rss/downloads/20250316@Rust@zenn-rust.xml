<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 16 Mar 2025 08:59:06 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Unreal Engine で Rust を (上手に) 使いたい]]></title><description><![CDATA[
 はじめに
Unreal Engine で Rust を使いたい。
使うだけなら DLL をビルドして UE のプロジェクト内にコピーすればいいだけですが、 UE プロジェクト外での管理では Rust コードの更新を UE 側に反映するのが面倒だったり、そもそも当該 UE プロジェクト専用の Rust コードである場合はまとめて管理したくもなります。
という事で、その辺を解決する方法を調べてみました。
実証コードはこちらです (UE 5.5.4) 。 UE プロジェクトになっていますが C++ と Rust のみで Contents は本題ではないので削除しています。
https://...]]></description><link>https://zenn.dev/tan_y/articles/56a8cb4151590e</link><guid isPermaLink="true">https://zenn.dev/tan_y/articles/56a8cb4151590e</guid><pubDate>Sun, 16 Mar 2025 04:36:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7EcSvBuU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Unreal%2520Engine%2520%25E3%2581%25A7%2520Rust%2520%25E3%2582%2592%2520%2528%25E4%25B8%258A%25E6%2589%258B%25E3%2581%25AB%2529%2520%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TAN-Y%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2loekR1bXg3a1ktLWY5XzNoS3B3YzROTWhVcWtUMERPWmRTOWlKPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TAN-Y</dc:creator></item><item><title><![CDATA[EtherIP(RFC3378)をRustで実装した話ってよ]]></title><description><![CDATA[こんにちは、自称インチキ高校生のtuna2134です。
今回Rustを使ってEtherIPを実装してみました。なので、RFC3378の解説をしつつ、実装を説明しようと思います。

 そもそもEtherIPってなんですの？
RFC3378に定義されているプロトコルで、Ethernetフレーム(L2)をカプセル化して、IPプロトコル97番を使って転送することです。要はL2TP VPNと同じ仕組みですね。主にNEX IXなどといった業務用ルーターに入っている機能なのですが、Linuxでは標準でないので、使いたいときは自作するなりする必要があります。(Linuxに搭載されてなかったおかげで勉強す...]]></description><link>https://zenn.dev/dms_sub/articles/cb6ec3ca067c8a</link><guid isPermaLink="true">https://zenn.dev/dms_sub/articles/cb6ec3ca067c8a</guid><pubDate>Sun, 16 Mar 2025 00:34:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Px_fmZYc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:EtherIP%2528RFC3378%2529%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tuna2134%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlZDZhN2JjNDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tuna2134</dc:creator></item><item><title><![CDATA[Rust言語の基礎と最新トレンド]]></title><description><![CDATA[Rust言語は、高機能な型付け言語であり、安全性と高速性を兼ね備えているのが特徴です。特に、記憶障害を防ぐための新しいシステムを提供し、C++の代替として注目されています。今日では、システム開発、ゲーム、基盤ソフトウェアなど、広い分野で活用されています。
Rust言語の基礎
Rustの特徴
Rustの最大の特徴は、メモリ管理の安全性にあります。ガベージコレクションを使用せず、コンパイル時にメモリーのオーナーシップを確保することで、記憶障害やセキュリティの問題を無くします。このような特徴により、例えば安全で信頼性の高いシステムを開発することが可能です。
Rustの主な特徴は以下の通りです。...]]></description><link>https://zenn.dev/loyski/articles/392f2ff3891c3f</link><guid isPermaLink="true">https://zenn.dev/loyski/articles/392f2ff3891c3f</guid><pubDate>Sat, 15 Mar 2025 13:33:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G4DeLKdw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2581%25A8%25E6%259C%2580%25E6%2596%25B0%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:loyski%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGlfOFFhOFVpdW5paVlpYTc0ZTRHYmY2S1p3UXh6ZnVXOTc4OGhxbmI3NTlBci1RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>loyski</dc:creator></item><item><title><![CDATA[RustのBinaryHeapを少しだけ使いやすくした]]></title><description><![CDATA[
 背景
Rustの標準ライブラリにあるちょっとマイナーなコンテナのBinaryHeapは優先度付きキューを実現するもので、C++のpriority_queueやPythonのheapqに相当するものです。
Rustに限らずそれらの言語でも共通することですが、入れるアイテム自体が順序付可能であること(RustでいうOrd)が要求されていて任意の構造体をスコアと一緒に入れることができなくて個人的にはちょっと使いにくく感じています。
そこでスコア関数を含めて少しだけ使いやすくした構造体を作ってみました。
成果物

github: https://github.com/lucidfrontie...]]></description><link>https://zenn.dev/lucidfrontier45/articles/b591e3ee7e17ed</link><guid isPermaLink="true">https://zenn.dev/lucidfrontier45/articles/b591e3ee7e17ed</guid><pubDate>Sat, 15 Mar 2025 03:10:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9H-AgR75--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEBinaryHeap%25E3%2582%2592%25E5%25B0%2591%25E3%2581%2597%25E3%2581%25A0%25E3%2581%2591%25E4%25BD%25BF%25E3%2581%2584%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:lucidfrontier45%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxY2RkYzI0MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>lucidfrontier45</dc:creator></item><item><title><![CDATA[Rustのスマートポインタ解説：所有権、メモリ、安全性]]></title><description><![CDATA[

 Rust におけるスマートポインタとは
スマートポインタ（smart pointers）は、データの所有権と追加機能を持つポインタであり、ポインタの進化版と言えます。
ポインタ（pointer）は、メモリアドレスを保持する変数の一般的な概念です。このアドレスは、他のデータを参照、または「指す」（points at）ものです。Rust では、参照は&amp;記号で示され、参照先の値を借用します。通常の参照はデータを借用するだけで、特別な機能はありません。また、追加のオーバーヘッドもないため、Rust では非常に多用されます。
スマートポインタは、Rust における特別なデータ構造です...]]></description><link>https://zenn.dev/leap_adam/articles/4ea93da1be47ec</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/4ea93da1be47ec</guid><pubDate>Fri, 14 Mar 2025 19:55:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YkjqnGks--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2580%2581%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2580%2581%25E5%25AE%2589%25E5%2585%25A8%25E6%2580%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rustをもっと手軽に！ForgeScript + RVM の構想]]></title><description><![CDATA[
 はじめに
Rustはその高い安全性とパフォーマンスにより、多くの開発者に支持されるプログラミング言語ですが、所有権やライフタイムの概念は初心者にとって大きな障壁となります。また、Cargoを活用した依存関係の管理も強力である一方で、手動での設定が煩雑になりがちです。
このような課題を解決し、Rustのエコシステムをより手軽に活用できるようにするため、ForgeScript（FS）とRust Virtual Machine（RVM） を構想しました。

 ForgeScript + RVM とは？
ForgeScript（FS）はRustに準拠しつつ、所有権やライフタイム、mutの扱い...]]></description><link>https://zenn.dev/kazuma0606/articles/63490110db9e67</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/63490110db9e67</guid><pubDate>Fri, 14 Mar 2025 12:07:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZwSIxH4o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A3%25E3%2581%25A8%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25EF%25BC%2581ForgeScript%2520%252B%2520RVM%2520%25E3%2581%25AE%25E6%25A7%258B%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[Rustのバイナリってなんか無駄にでかいイメージがあったので調べてみた。]]></title><description><![CDATA[
 動機
タイトルの通りです。以前なんとなくC言語で作ったバイナリとサイズ比べたときに、Rustバイナリサイズデカくね？って思って以来、なんとなくRustのバイナリ＝大きいみたいなイメージを持っていたのでちゃんと調べてみる。

 検証方法
コードの内容によってだいぶ変わってくることは容易に想像できるが、今回はHelloWorldで比較。
それぞれのコードはこんな感じ。
fn main() {
    println!("Hello, world!");
}
#include &lt;stdio.h&gt;

int main(void)
{
        printf("Hello, ...]]></description><link>https://zenn.dev/kumasan903/articles/b9657aedc046da</link><guid isPermaLink="true">https://zenn.dev/kumasan903/articles/b9657aedc046da</guid><pubDate>Fri, 14 Mar 2025 10:18:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r9HKwqXm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25AA%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2581%258B%25E7%2584%25A1%25E9%25A7%2584%25E3%2581%25AB%25E3%2581%25A7%25E3%2581%258B%25E3%2581%2584%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%258C%25E3%2581%2582%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2581%25BE%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4MTUxNmMwMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くまさん</dc:creator></item><item><title><![CDATA[Rustのエラー処理を極める：ResultとOptionを超えて]]></title><description><![CDATA[
エラー処理は単に Result と Option を使うだけではありません。Rust のエラー処理は初心者にとって優しくなく、何度も苦しめられた末に、エラー処理に関する知識を整理することにしました。内容は主に二つの部分に分かれています。一つは Rust の公式が提供する Result に関連するメソッドについて、もう一つはエラーの定義と処理方法についてです。これらの知識を習得すれば、Rust のエラー処理を恐れることはなくなるでしょう。

 エラー処理に関するメソッド
エラーをスムーズに処理するには、公式が提供するメソッドを適切に活用することが重要です。うまく活用すれば効率が大幅に向上...]]></description><link>https://zenn.dev/leap_adam/articles/7190bde4efceeb</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/7190bde4efceeb</guid><pubDate>Thu, 13 Mar 2025 21:15:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--craIafIG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%25A5%25B5%25E3%2582%2581%25E3%2582%258B%25EF%25BC%259AResult%25E3%2581%25A8Option%25E3%2582%2592%25E8%25B6%2585%25E3%2581%2588%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[[Bevy] 平面の格子状グリッドを表示する]]></title><description><![CDATA[Bevyの真っ黒なWindowに平面のグリッドを表示させるとそれっぽくなります。

fn update(mut gizmos: Gizmos){
    gizmos.grid(
        Isometry3d::from_rotation(Quat::from_axis_angle(Vec3::X, PI * 0.5)),
        UVec2::new(30, 30),
        Vec2::splat(2.),
        Color::linear_rgb(0.7, 0., 0.4)
        )
        .outer_edges();
}
参...]]></description><link>https://zenn.dev/omini/articles/8889d35af30e02</link><guid isPermaLink="true">https://zenn.dev/omini/articles/8889d35af30e02</guid><pubDate>Thu, 13 Mar 2025 21:15:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OMfVh0MZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520%25E5%25B9%25B3%25E9%259D%25A2%25E3%2581%25AE%25E6%25A0%25BC%25E5%25AD%2590%25E7%258A%25B6%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[Rustで作る自作データベース：第1回「基本的なSQL対応RDBMSの設計と実装」]]></title><description><![CDATA[この記事では、前回
https://zenn.dev/kazuma0606/articles/9a086386fe8af2
に続いて早速基本的なCRUD操作が出来るインメモリのデータベースを設計・実装します。
🔸モノリスではコード量が多くなる可能性
🔸将来的な機能追加を考慮
🔸依存関係を整理
以上の点からクリーンアーキテクチャを採用しています。ただし、従来のクリーンアーキテクチャのようにユースケースを一つ一つ実装していくのはデータベースを実装する上では難しいので、ディレクトリ構成やDIパターンに基づいて実装しています。
※コード量が多いので、お急ぎの方はまずは保存して、時間のあるときにじ...]]></description><link>https://zenn.dev/kazuma0606/articles/0f73247666781d</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/0f73247666781d</guid><pubDate>Thu, 13 Mar 2025 11:56:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--83Y-mWM9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25EF%25BC%259A%25E7%25AC%25AC1%25E5%259B%259E%25E3%2580%258C%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AASQL%25E5%25AF%25BE%25E5%25BF%259CRDBMS%25E3%2581%25AE%25E8%25A8%25AD%25E8%25A8%2588%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[RustとRP2040マイコンでPWMを出力してみた（組み込み開発、PWM入門）]]></title><description><![CDATA[
 はじめに
多くのマイコンには、PWM（pulse width modulation：パルス幅変調）という波形を出力する機能があります。

https://ja.wikipedia.org/wiki/パルス幅変調
このPWMは、デューティー比とと言われるON/OFFの比率を変化させることで平均的な電圧値を下げることができ、デジタル出力をアナログ出力の様に扱うことができます。これを利用すれば擬似的な正弦波を出力することもできます。以下、ディーティ比の数式です。
 {\displaystyle D={\frac {\tau }{T}}\ } 
{\displaystyle \tau }は信...]]></description><link>https://zenn.dev/baker_link_lab/articles/51e2fca8571ca3</link><guid isPermaLink="true">https://zenn.dev/baker_link_lab/articles/51e2fca8571ca3</guid><pubDate>Thu, 13 Mar 2025 03:57:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gOjSlq25--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8RP2040%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B3%25E3%2583%25B3%25E3%2581%25A7PWM%25E3%2582%2592%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2588%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2581PWM%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Baker%2520link.%2520Lab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkNzkyZGRhODEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Baker link. Lab</dc:creator></item><item><title><![CDATA[Rust で書かれた高速な Python 型チェッカー 3 選]]></title><description><![CDATA[
 導入
昨今の Python 開発では、Ruff や uv といった Rust 製ツールの利用が広がっています。Python 製のこれまでのツールと Rust 製のツールを比較すると、Rust 製のツールはパフォーマンスが高く、短い時間でタスクを完了できます。
本稿では、Rust で書かれた高速な Python 型チェッカーを紹介します。型チェッカーは、Python コードの型を検査し、型エラーを検出するツールです。静的解析ツールとして利用でき、コードの品質を向上させるのに役立ちます。Meta が公開している記事では、2024 年に Python コミュニティに調査を行い、回答者の 8...]]></description><link>https://zenn.dev/nishikoh/articles/31441fa8fe1f73</link><guid isPermaLink="true">https://zenn.dev/nishikoh/articles/31441fa8fe1f73</guid><pubDate>Wed, 12 Mar 2025 03:00:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GZxqUI50--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258B%25E3%2582%258C%25E3%2581%259F%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25AA%2520Python%2520%25E5%259E%258B%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AB%25E3%2583%25BC%25203%2520%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nishikoh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MzI0MTlkMTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nishikoh</dc:creator></item><item><title><![CDATA[Rustで作る自作データベース：第零回 なぜRustでデータベースを実装するのか]]></title><description><![CDATA[
 はじめに
エンジニアとして成長するには、使用しているツールの内部構造を理解することが重要です。多くの開発者は日々データベースを使用していますが、その内部がどのように動作しているかを深く理解している人は意外と少ないのではないでしょうか。

この連載では、Rustを使ってゼロからデータベースを実装していきます。単なる玩具ではなく、最終的には実用レベルの機能を備えたデータベースを目指します。
🔸なぜRustなのか？
🔸なぜデータベースなのか？
そしてどのような実装アプローチを取るのか。この記事では、これから始まる連載の全体像と目的について説明します。

 なぜRustでデータベースを実装す...]]></description><link>https://zenn.dev/kazuma0606/articles/9a086386fe8af2</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/9a086386fe8af2</guid><pubDate>Wed, 12 Mar 2025 01:47:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AmsLxwRc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25EF%25BC%259A%25E7%25AC%25AC%25E9%259B%25B6%25E5%259B%259E%2520%25E3%2581%25AA%25E3%2581%259CRust%25E3%2581%25A7%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[ターミナルで使えるコマンドを作ろうとしたら苦労した話。]]></title><description><![CDATA[初めまして。趣味のRustで変なの書いてる者です。
久々にプログラミングがやりたくなったので、適当にアプデなんか済ませて書いてたら。。

 ディレクトリ分けるとき、mod.rs書くのだるくね？
昔からそうは思っていたのですが、不満を垂らすだけで解消する動きはなかったので、これを機にディレクトリ生成とそれに付随してmod.rsを行うシェルを組もうと思いました。
以下シェルになります。

rsdir.sh 
#!/bin/bash

# 引数チェック
if [ -z "$1" ]; then
    echo "Usage: rsdir &lt;module_name&gt;"
    ex...]]></description><link>https://zenn.dev/ennui/articles/d86d942dbfa12a</link><guid isPermaLink="true">https://zenn.dev/ennui/articles/d86d942dbfa12a</guid><pubDate>Tue, 11 Mar 2025 23:29:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JJ5uqc3d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E8%258B%25A6%25E5%258A%25B4%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ennui%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzYjUwMDBlMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ennui</dc:creator></item><item><title><![CDATA[【Rust】「クレート？パッケージ？モジュール？」をそろそろ理解しませんか？]]></title><description><![CDATA[どのプログラミング言語でも、最初は１つのファイルに適当に処理を書いて実行してみることを繰り返すと思います。しかし、プログラムが少し大きくなると、ファイルやディレクトリを分割したくなります。
Rustでは、コードを整理するために、「クレート」「パッケージ」「モジュール」 という概念が登場します。
この記事では、「クレート」「パッケージ」「モジュール」の違いをシンプルに解説し、適切にプログラムを管理できるようにすることを目的としています。

 「クレート」「パッケージ」「モジュール」の整理

 クレート
Rustのコンパイル単位。
クレートは２種類あり、バイナリクレートとライブラリクレートに...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/6fae346409df81</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/6fae346409df81</guid><pubDate>Tue, 11 Mar 2025 19:06:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sTQoO50N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2580%258C%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259F%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25EF%25BC%259F%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%259F%25E3%2580%258D%25E3%2582%2592%25E3%2581%259D%25E3%2582%258D%25E3%2581%259D%25E3%2582%258D%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[ライブラリクレートでは`doc_cfg`や`doc_auto_cfg`を有効にするのがおすすめ]]></title><description><![CDATA[rustdocでdoc_cfg機能やdoc_auto_cfg機能を有効にすると、条件付きコンパイルに関する情報をrustdocに伝えることができます。
これらの機能を有効にすると、以下のようにそのアイテムが特定のfeatureフラグが有効な場合や特定のプラットフォームでのみ利用可能なことを説明するバナーを表示できます。

unixモジュールはUnix環境でのみ利用可能

nowメソッドはstdフラグが有効な場合のみ利用可能

 設定方法
これらの機能はまだ不安定なのでcfg_attrを使ってdocsrsが定義されている場合にのみ機能を有効にします。

src/lib.rs
#![cfg_...]]></description><link>https://zenn.dev/sorairolake/articles/display-features-in-rustdoc</link><guid isPermaLink="true">https://zenn.dev/sorairolake/articles/display-features-in-rustdoc</guid><pubDate>Tue, 11 Mar 2025 03:34:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LKb8uAGP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A7%25E3%2581%25AF%2560doc_cfg%2560%25E3%2582%2584%2560doc_auto_cfg%2560%25E3%2582%2592%25E6%259C%2589%25E5%258A%25B9%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258C%25E3%2581%258A%25E3%2581%2599%25E3%2581%2599%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SorairoLake%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZGZiOGQyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SorairoLake</dc:creator></item><item><title><![CDATA[Rustのデータ構造をナビゲート：ベクターからハッシュセットへ]]></title><description><![CDATA[
Rust の標準ライブラリには、基本的なデータ構造として、ベクター（Vec&lt;T&gt;）、ハッシュマップ（HashMap&lt;K, V&gt;）、および集合（HashSet&lt;T&gt;）が提供されています。これらの 3 つのデータ構造は、ほとんどのプログラミングシナリオで最も一般的で有用なものです。Rust の目標である「安全性」「並行性」「実用性」に適合する形で設計・提供されており、データの格納とアクセスのニーズを満たしながら、標準ライブラリの軽量性と効率性を維持しています。

 ベクター（Vec&lt;T&gt;）
ベクターは、Rust で最も一般的に使用される動的配...]]></description><link>https://zenn.dev/leap_adam/articles/fb3d83d3fc0b3e</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/fb3d83d3fc0b3e</guid><pubDate>Sun, 09 Mar 2025 19:00:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nM9WK2Em--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E3%2583%258A%25E3%2583%2593%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259A%25E3%2583%2599%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%258B%25E3%2582%2589%25E3%2583%258F%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[ABC396:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 396のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc396/tasks/abc396_a
解説
隣接する3つの値が同じかどうかをチェックします。全て試して1箇所でも見つかればYes 、見つからなければ No を出力します。
コード

abc396a.rs
use proconio::input;
fn main() {
    // 入力
    input!{
        n: usize,
        a: [usize; n],
   ...]]></description><link>https://zenn.dev/nakst_hide/articles/f841b31744ee0d</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/f841b31744ee0d</guid><pubDate>Sun, 09 Mar 2025 14:02:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WhVeVOb7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC396%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[DuckDB の拡張を Rust で書けるらしいので調べてみた（2025年3月時点）]]></title><description><![CDATA[DuckDB は v1.2.0 で C extension API というものが追加されました。これによって、C で拡張を書けるのみならず、Rust や Go などの C FFI を使えるプログラミング言語でも（その C extension API へのバインディングがあれば）書けるようになりました。
https://duckdb.org/2025/02/05/announcing-duckdb-120.html
実際、Rust 実装の拡張を書くテンプレートが公式に用意されています。
https://github.com/duckdb/extension-template-rs
とはいえ...]]></description><link>https://zenn.dev/yutannihilation/articles/663c879b74343c</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/663c879b74343c</guid><pubDate>Sun, 09 Mar 2025 03:40:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e4XaMGjs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DuckDB%2520%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2591%25E3%2582%258B%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%25882025%25E5%25B9%25B43%25E6%259C%2588%25E6%2599%2582%25E7%2582%25B9%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[Rustのクロージャの仕組み：Fn、FnMut、FnOnce]]></title><description><![CDATA[
Rust プログラミング言語において、クロージャ（closures）は非常に強力で柔軟な機能であり、無名関数を定義し、その環境内の変数をキャプチャすることができます。Rust のクロージャシステムは、Fn、FnMut、FnOnce という 3 つのコアトレイトによって定義されます。これらのトレイトは、クロージャがキャプチャした変数とどのように相互作用するか、何回呼び出せるか、環境を変更できるかを決定します。これらの理解は、Rust のクロージャメカニズムを習得し、効率的で安全なコードを書くために不可欠です。
本記事では、Fn、FnMut、FnOnce の 3 つのトレイトについて詳しく...]]></description><link>https://zenn.dev/leap_adam/articles/a29c3ce6f5fd59</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/a29c3ce6f5fd59</guid><pubDate>Sat, 08 Mar 2025 21:34:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4JAa-ZJA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25EF%25BC%259AFn%25E3%2580%2581FnMut%25E3%2580%2581FnOnce%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item></channel></rss>