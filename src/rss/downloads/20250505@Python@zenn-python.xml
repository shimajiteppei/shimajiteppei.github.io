<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 05 May 2025 12:04:23 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Discord Bot経由でレシートをGoogle Drive/Sheetに保存したい]]></title><description><![CDATA[
 作りたいもの
Discord Botに次のような機能を搭載したものが欲しい

レシートの値段をspread sheet等に保存
買ったもののカテゴリーも上と同じように保存
画像をGoogle Driveに保存


 作ろうと思ったわけ
プログラミングを始めて2年になりますが、個人開発や業務でのプログラミング経験があまりないため、何か自分で作ってみたいと思いました。普段は競技プログラミングに取り組んでいますが、実用的なツールにも挑戦してみたいと考えています。
私情ですが、いつもGoogle Driveにレシートの画像をアップロードし、月末にまとめてGoogle Spreadsheetに...]]></description><link>https://zenn.dev/azukiii/articles/8bf9cffe617a87</link><guid isPermaLink="true">https://zenn.dev/azukiii/articles/8bf9cffe617a87</guid><pubDate>Mon, 05 May 2025 12:01:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nPQx05fS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Discord%2520Bot%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7%25E3%2583%25AC%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592Google%2520Drive%252FSheet%25E3%2581%25AB%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mame%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTG5pTjFRMk0wT2I3cFhWUXpzS29lNG1wcTgtdld6U1ZFZlFKbk5hNzQ2MWxBUzZycVg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mame</dc:creator></item><item><title><![CDATA[Pythonで始めるGraphQL【Strawberry】]]></title><description><![CDATA[
 はじめに
今回はStrawberryというライブラリを使って、PythonでGraphQLについて紹介したいと思います。
GraphQLは、FacebookによってRESTの課題を解決するために開発されたクエリ言語です。
具体的には以下のようなことができます。

 特定のフィールドだけ取得
Bookオブジェクトはtitle, autherというフィールドを持っているとします。
この時autherが不要なら、Bookのtitle一覧のみ取得することができます。

 ネストしたフィールドの取得
Userオブジェクトはid, name, follow_idsというフィールドを持っているとし...]]></description><link>https://zenn.dev/iharuoru/articles/ceb425fb6af669</link><guid isPermaLink="true">https://zenn.dev/iharuoru/articles/ceb425fb6af669</guid><pubDate>Mon, 05 May 2025 09:17:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wNDyeoIN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BGraphQL%25E3%2580%2590Strawberry%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:iharu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJkYWQyZjhkZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>iharu</dc:creator></item><item><title><![CDATA[「パパ、MCPを使えば献立考えるの楽になるよ」]]></title><description><![CDATA[
 とある平日の夕方
娘「ねぇパパ、今日の晩ご飯なに？」
ワイ「うーん……冷蔵庫にウインナーと残りもんのキャベツあるから、焼きそばにでもしよか」
娘「また焼きそば？　3日連続なんだけど」
ワイ「献立考えるのって、ほんま骨折れるんや！　仕事終わってクタクタやのにレシピ探す余裕ないねん」
娘「……だったらパパ、機械に任せればいいじゃん」
ワイ「機械て、お前また電子レンジに喋りかけるつもりか？」
娘「違うよ。MCPサーバー立てて、レシピをツールとして公開して、あとはLLMに献立考えさせればいいだけだよ」
ワイ「M…C…P？　なんやそれ新しい格闘ゲームか？」
娘「“Model Context P...]]></description><link>https://zenn.dev/moxak/articles/6df67410391d89</link><guid isPermaLink="true">https://zenn.dev/moxak/articles/6df67410391d89</guid><pubDate>Mon, 05 May 2025 08:33:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FQYt9sXL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2583%2591%25E3%2583%2591%25E3%2580%2581MCP%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%25B0%25E7%258C%25AE%25E7%25AB%258B%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%25E3%2581%25AE%25E6%25A5%25BD%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2582%2588%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ackkerman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NDY2ZTM5NTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ackkerman</dc:creator></item><item><title><![CDATA[Difyを用いたSlack要約エージェントの構築]]></title><description><![CDATA[
 はじめに
近年、目覚ましい発展を遂げるAI技術、特に大規模言語モデル（LLM）を活用したAIエージェントが、私たちの働き方や情報収集のあり方を大きく変えようとしています。タスクの自動化、情報検索の効率化、そしてコミュニケーションの円滑化など、その可能性は多岐にわたり、様々な分野で実用化が進んでいます。
そんな中、ローコードで高機能なAIアプリケーション開発を可能にするプラットフォーム「Dify」が注目を集めています。Difyを利用することで、複雑なコーディングを伴うことなく、高度な自然言語処理機能を組み込んだAIエージェントを比較的容易に構築できるのです。
本ブログでは、このDify...]]></description><link>https://zenn.dev/upgradetech/articles/6ffc4f59023a54</link><guid isPermaLink="true">https://zenn.dev/upgradetech/articles/6ffc4f59023a54</guid><pubDate>Mon, 05 May 2025 00:44:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9CGmjT8A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dify%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259FSlack%25E8%25A6%2581%25E7%25B4%2584%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:K.Kanke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4NmJmMzNhODkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UPGRADE%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg0NWFiOWRhMWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>K.Kanke</dc:creator></item><item><title><![CDATA[OCRに関する技術調査その２（PaddleOCRベースの精度改善検討）]]></title><description><![CDATA[
 0. はじめに
お疲れ様です。STARAI社員の中岸です！
前回、OCR（光学文字認識（こうがくもじにんしき、英: Optical character recognition）：活字、手書きテキストの画像を文字コードの列に変換する技術）に関する記事を書きましたが、今回はもう少し深堀りして精度向上に向けてなにかできることはないかと色々と苦戦しながら調べてみた結果についてまとめてみました。
今回は、PaddleOCRのOCRモデルについて色々と試してみました。以降では、それぞれ試してみたことをセクションにして、サンプル画像（今回の処理対象は前回と似たような日本語ベースのダミー請求書、手書...]]></description><link>https://zenn.dev/starai/articles/8871df599e967e</link><guid isPermaLink="true">https://zenn.dev/starai/articles/8871df599e967e</guid><pubDate>Sun, 04 May 2025 17:43:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uQEWDa_w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OCR%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E6%258A%2580%25E8%25A1%2593%25E8%25AA%25BF%25E6%259F%25BB%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2592%25EF%25BC%2588PaddleOCR%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E7%25B2%25BE%25E5%25BA%25A6%25E6%2594%25B9%25E5%2596%2584%25E6%25A4%259C%25E8%25A8%258E%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2520STAR%2520AI%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3YmI3MTFhYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>株式会社 STAR AI</dc:creator></item><item><title><![CDATA[Twitter(X)のデータをMarkdownに変換する]]></title><description><![CDATA[ChatGPTに聞いたら結構適当な回答だったのでメモ。

 Twitterアーカイブのダウンロード
あらかじめTwitterのアーカイブをダウンロードしておきます（ダウンロードできるようになるまで、人にもよりますが時間かかります（自分の場合は2,3日）。
この手順は省略します。GoogleかChatGPTで調べてください。

 アーカイブデータをMarkdownに変換
以下リポジトリを使います。
https://github.com/timhutton/twitter-archive-parser
ダウンロードしたデータを解凍して、対象のフォルダに移動します。
$ cd ~/Downlo...]]></description><link>https://zenn.dev/karaage0703/articles/961969f4f7762e</link><guid isPermaLink="true">https://zenn.dev/karaage0703/articles/961969f4f7762e</guid><pubDate>Sun, 04 May 2025 15:40:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--67oR3Kkv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Twitter%2528X%2529%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592Markdown%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%2589%25E3%2581%2582%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hDZEtvakJfZXdDTjNCV1Z0WXIteFNIZ0hmRjlXZmt3QzI5c0Y0aXYwPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>からあげ</dc:creator></item><item><title><![CDATA[【Python】ParamikoリモートサーバのOSがわからない時のチェックサム確認方法]]></title><description><![CDATA[
 🔄【Paramiko × SFTP】リモートサーバのOSがわからない時のチェックサム確認する方法
またもや、pythonの記事です！！
最近、SSH経由でリモートサーバーのファイルの整合性（チェックサム）を確認するタスクがありました。しかし、そのサーバーは Linuxではなく、md5sumやsha256sumなどのコマンドが使えない 環境でした。
通常であれば、paramiko を使って以下のようにリモートでチェックサムを計算できます。
ssh.exec_command("md5sum /path/to/file")
でも、対象のサーバーがLinuxでない or コマンドが使えない状...]]></description><link>https://zenn.dev/tokogreen/articles/1209311a799d16</link><guid isPermaLink="true">https://zenn.dev/tokogreen/articles/1209311a799d16</guid><pubDate>Sun, 04 May 2025 14:01:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xdg-IIAi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591Paramiko%25E3%2583%25AA%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%25AEOS%25E3%2581%258C%25E3%2582%258F%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E6%2599%2582%25E3%2581%25AE%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B5%25E3%2583%25A0%25E7%25A2%25BA%25E8%25AA%258D%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Greentomato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjNjYyMWI5NGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Greentomato</dc:creator></item><item><title><![CDATA[YOLOEの仕組みを整理してみた]]></title><description><![CDATA[
 概要
YOLOEと呼ばれるモデルがultralyticsで公開されました。今回は私なりにYOLOEの仕組みについて整理してみました。

本記事は、下記の記事 を日本語に翻訳し、筆者自身が理解のために補足・解説を加えたものです。内容の正確性については可能な限り努めていますが、誤訳などがある場合はご容赦ください。

https://medium.com/@nandinilreddy/yolo-e-in-detail-67a7d57eef6c

 背景
“see anything” がコンセプトのモデルになっている。

主に三つのタスクで検出およびセグメンテーションが可能


Text p...]]></description><link>https://zenn.dev/bamboo_nova/articles/be383ab6b0e902</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/be383ab6b0e902</guid><pubDate>Sun, 04 May 2025 12:57:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zTfy_jqE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:YOLOE%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[【Python】🐍 超初心者向け！Pythonのloggerってなに？printとの違いもやさしく解説！]]></title><description><![CDATA[
 🐍 超初心者向け！Pythonのloggerってなに？printとの違いもやさしく解説！
こんにちは、Greentomatoです！
今回は、業務で利用しているpythonについて記載します！！
Pythonを書いていると「print()じゃなくてlogger使いなよ」って言われること、ありませんか？（私は、1年目の時にprintを使わないで！！とよく言われました、、）
今回は、Pythonのloggerとは何か、なぜprintじゃダメなのかを初心者向けに、
たとえ話と実例でやさしく解説します！

 💬 loggerってなに？
💡 一言で言うと…
logger は「アプリの状態やエラー...]]></description><link>https://zenn.dev/tokogreen/articles/75a5e8fac5c7d4</link><guid isPermaLink="true">https://zenn.dev/tokogreen/articles/75a5e8fac5c7d4</guid><pubDate>Sun, 04 May 2025 12:53:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GyWUSodA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591%2520%2520%25E8%25B6%2585%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25EF%25BC%2581Python%25E3%2581%25AElogger%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2581%25AB%25EF%25BC%259Fprint%25E3%2581%25A8%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2582%25E3%2582%2584%25E3%2581%2595%25E3%2581%2597%25E3%2581%258F%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Greentomato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjNjYyMWI5NGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Greentomato</dc:creator></item><item><title><![CDATA[[CloudRun]Revision 'name' is not ready and cannot serve traffic.の解決方法]]></title><description><![CDATA[
 何が起こった？
Cloud Run functions（cloud function第2世代）で作成していた関数を一部修正したかったので、コンソールから修正してデプロイしたところ下記エラーが発生した。
Revision {Revision Name} is not ready and cannot serve traffic. The user-provided container failed to start and listen on the port defined provided by the PORT=8080 environment variable within t...]]></description><link>https://zenn.dev/umeru9/articles/fd9f57edf6e350</link><guid isPermaLink="true">https://zenn.dev/umeru9/articles/fd9f57edf6e350</guid><pubDate>Sun, 04 May 2025 12:40:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JXFgI_vc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BCloudRun%255DRevision%2520%2527name%2527%2520is%2520not%2520ready%2520and%2520cannot%2520serve%2520t...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:umeru9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0MDAyZGUwMTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>umeru9</dc:creator></item><item><title><![CDATA[Relearning testinfra 2025]]></title><description><![CDATA[インフラ構築結果のテストのため 2017年に一度触った testinfra の再学習です。職業プログラマではないので、単体テストフレームワークには詳しくありません。趣味プログラマとしては自動化できるところに嬉しさは感じるので、なるべく自分を嬉しい状態に置けるようセットアップはしておきたいものです。
今回も環境は Windows WSL 上の Ubuntu です。
$ head -1 /etc/os-release
PRETTY_NAME="Ubuntu 24.04.2 LTS"

 セットアップ
Ansible の 時に使った pipx でインストールしてもコマンドラインからの実行には問...]]></description><link>https://zenn.dev/kkzk/articles/2025-05-04_relearning-testinfra</link><guid isPermaLink="true">https://zenn.dev/kkzk/articles/2025-05-04_relearning-testinfra</guid><pubDate>Sun, 04 May 2025 11:20:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jLK9inHE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Relearning%2520testinfra%25202025%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kakizaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS1BBd1d6WGtYSmttSVpjNWY2clZ3bGxTTEpLa1VWUzlLbjFpelhMc1NHVDRFc1N3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kakizaki</dc:creator></item><item><title><![CDATA[Docker × Nuxt3 × Flask 開発環境構築手順（WSL2対応）]]></title><description><![CDATA[
 DockerでNuxt3とFlaskの開発環境構築を行い疎通確認まで

 環境

OS: Windows 11 + WSL2 (Ubuntu 22.04)
Docker Desktop for Windows
VSCode


 導入手順

プロジェクトのルートディレクトリの作成

mkdir nuxt-project

ルートディレクトリに移動してその他の必要なディレクトリを作成

cd nuxt-project
mkdir frontend
mkdir backend

frontendディレクトリに移動してDockerfileを作成します

cd frontend
touch ...]]></description><link>https://zenn.dev/tspk/articles/109ae479438a38</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/109ae479438a38</guid><pubDate>Sun, 04 May 2025 07:06:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2PF3hSC3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25C3%2597%2520Nuxt3%2520%25C3%2597%2520Flask%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E6%2589%258B%25E9%25A0%2586%25EF%25BC%2588WSL2%25E5%25AF%25BE%25E5%25BF%259C%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[PythonでDIする（Dependency Injector）]]></title><description><![CDATA[dependency_injector は Python 向けの依存性注入ライブラリです。

 基本的な使い方
Dependency Injector を利用して依存性注入を行う基本的な流れは、以下の手順で実現します。

サービスの定義
まず、抽象クラス（インターフェース）を定義し、その実装となる具体的なサービスクラスを作成します。
これにより、サービスの実装が呼び出し元から独立し、後から簡単に入れ替えやテストが行える設計になります。
コンテナの設定
次に、dependency_injector の containers.DeclarativeContainer を継承したコンテナクラス...]]></description><link>https://zenn.dev/hono8944/articles/python_di_22b76fa3410781</link><guid isPermaLink="true">https://zenn.dev/hono8944/articles/python_di_22b76fa3410781</guid><pubDate>Sun, 04 May 2025 06:11:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hI3fNzwe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7DI%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2588Dependency%2520Injector%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hono%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWxkYnktbHdTdmg3X3lGcTl6alF6M3hBRlNJdHI4LWw4OHl0U01FQXJ6dkIyZ2dRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hono</dc:creator></item><item><title><![CDATA[FastAPI × OpenAI ストリームで出力するAPIを作ってみた]]></title><description><![CDATA[
 はじめに
「ピロピロ」と一文字ずつ流れるような UI を実現したいとき、OpenAI API のストリーミング機能を使うと、サーバーからクライアントへリアルタイムにトークンを渡せます。FastAPI ならシンプルに実装できるらしいのでやってみました。
↓ こんな感じです。


 依存ライブラリ
簡単な実装例では使っていないものもありますが、以下のライブラリを使用します。
# requirements.txt
fastapi
uvicorn[standard]
dependency-injector
pytest
httpx
openai
OpenAI API を使用するためには、AP...]]></description><link>https://zenn.dev/sonicmoov/articles/fastapi_stream_openai_e4ea9f3e10f28a</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/fastapi_stream_openai_e4ea9f3e10f28a</guid><pubDate>Sun, 04 May 2025 06:11:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uqi91aea--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FastAPI%2520%25C3%2597%2520OpenAI%2520%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25A7%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258BAPI%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hono%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWxkYnktbHdTdmg3X3lGcTl6alF6M3hBRlNJdHI4LWw4OHl0U01FQXJ6dkIyZ2dRPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hono</dc:creator></item><item><title><![CDATA[🧩 Pythonの代表的なフレームワーク]]></title><description><![CDATA[
 📝 はじめに
Pythonは「書きやすく、読みやすい」言語として人気があり、多様な分野で利用されています。その中でも、開発を効率化し、保守性の高いアプリケーションを作るために欠かせないのが「フレームワーク」です。
この記事では、Pythonの主要なフレームワークをカテゴリ別に紹介し、それぞれの特徴や用途、選び方を解説します。

 🔹 Web開発フレームワーク

 ✅ Django

フルスタックWebフレームワーク
認証、管理画面、ORM、テンプレートなどが最初から搭載
大規模なWebアプリケーションに向いている

📌 こんな人におすすめ：ブログやSNSのような本格的なWebサービス...]]></description><link>https://zenn.dev/oit2003/articles/48c64b974c892e</link><guid isPermaLink="true">https://zenn.dev/oit2003/articles/48c64b974c892e</guid><pubDate>Sun, 04 May 2025 05:45:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qwOBhspR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520Python%25E3%2581%25AE%25E4%25BB%25A3%25E8%25A1%25A8%25E7%259A%2584%25E3%2581%25AA%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OIT2003%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUwxN0ZaM1B3YkZyak5GWFVZRnNva000aldZTWZaQzc0MVh1UzhtRDdlZUNJVT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OIT2003</dc:creator></item><item><title><![CDATA[Slackアイコンつき名札シールを作る]]></title><description><![CDATA[n番煎じですが、この前（すでにnヶ月前...）はこんな感じで作ってみた、という備忘録です。
2025年は巳年なのでPythonで作りました。
GASで無理くり作った時の備忘録はこちらです 　→ https://note.com/0375/n/n3f1def9a6c27
Slackのアイコンと名前が載った名札があると、オンラインでしか会ったことがない人とも「あ、あのアイコンの人だ！」と気軽に話しかけられますよね。
社内イベントや勉強会などで使える便利なツール、あるいは参考になれば幸いです。

 作るもの
特定のSlackチャンネルに参加しているメンバーの情報を取得し、以下のような名札シール...]]></description><link>https://zenn.dev/a03/articles/a700b68409f450</link><guid isPermaLink="true">https://zenn.dev/a03/articles/a700b68409f450</guid><pubDate>Sun, 04 May 2025 04:35:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ehNouvwj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Slack%25E3%2582%25A2%25E3%2582%25A4%25E3%2582%25B3%25E3%2583%25B3%25E3%2581%25A4%25E3%2581%258D%25E5%2590%258D%25E6%259C%25AD%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:a03%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3FCWGd0Q2R5aEMzOUo3bnpoRFNPNFlubFRjWDgtSE9NTmgtMGpSPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>a03</dc:creator></item><item><title><![CDATA[Python FastAPI 最速入門]]></title><description><![CDATA[Python がある程度できるようになったから、FastAPIを学んでみたい！って人のためのページです。

 1. 仮想環境を作る
まずは Python の仮想環境を作りましょう。
venv パッケージを利用して環境を作ります。
# 仮想環境を作成
python -m  venv venv

# 仮想環境を有効化
./venv/Scripts/activate
コンソールの前に (venv) と付いていたら成功です。

 2. FastAPIをインストール
仮想環境に、FastAPI と Uvicorn をインストールします。
python -m pip install fastapi ...]]></description><link>https://zenn.dev/code_gn/articles/fastest-introduction-fastapi</link><guid isPermaLink="true">https://zenn.dev/code_gn/articles/fastest-introduction-fastapi</guid><pubDate>Sun, 04 May 2025 02:43:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XgjUVzzn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%2520FastAPI%2520%25E6%259C%2580%25E9%2580%259F%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Code-GN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Code-GN</dc:creator></item><item><title><![CDATA[Great Expectations（GX Core）始め方と注意ポイント]]></title><description><![CDATA[
 はじめに
データ品質管理のフレームワークの Great Expectations（GX Core）。
Pythonライブラリとしてローカル環境に簡単に導入でき、期待値（Expectation）をコードで定義・実行し、HTMLベースのレポート（Data Docs）を自動生成できます。
本記事では、個人開発・小規模プロジェクト向けに GX Core の導入手順 と 注意ポイント をまとめます。

 GX Core (OSS版) とは
GX Core は、Great Expectations のオープンソース版です。

Python ライブラリとして提供され、自分のローカル環境やオンプレミ...]]></description><link>https://zenn.dev/kkk555/articles/21e5d310844f4e</link><guid isPermaLink="true">https://zenn.dev/kkk555/articles/21e5d310844f4e</guid><pubDate>Sun, 04 May 2025 00:34:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hJ7I-Iwj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Great%2520Expectations%25EF%25BC%2588GX%2520Core%25EF%25BC%2589%25E5%25A7%258B%25E3%2582%2581%25E6%2596%25B9%25E3%2581%25A8%25E6%25B3%25A8%25E6%2584%258F%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNTczYTI3ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkk</dc:creator></item><item><title><![CDATA[setup_db.py🌾🐖]]></title><description><![CDATA[
 📄 setup_db.py 仕様書

 概要

setup_project.pyの後に実行する事でflask+blueprint+DB機能を追加。
初回セットアップ後の専用スクリプト。
実行すると以下を自動化する。




機能
内容




.env管理
必要な MySQL / Supabase キーが不足していれば .env に追記


requirements補完

requirements.txt に不足パッケージを自動追記（重複回避）


ディレクトリ・ファイル作成

instance/、migrations/、app/models/ などを自動生成


app/init....]]></description><link>https://zenn.dev/solodev/articles/250504_setup_db</link><guid isPermaLink="true">https://zenn.dev/solodev/articles/250504_setup_db</guid><pubDate>Sat, 03 May 2025 22:22:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XB8EgboR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:setup_db.py%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BD%25E3%2583%25AD%25E3%2581%25A7%25E3%2581%25B6%25EF%25BC%2588solodev%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxNjMwNTBlMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ソロでぶ（solodev）</dc:creator></item><item><title><![CDATA[Pythonのenumerate()の使い方：インデックス付きループを簡単にする便利関数]]></title><description><![CDATA[
 はじめに
Pythonでリストなどをループ処理していると、
「インデックス（index）も一緒に取得したい」ことがあります。
当初は、以下のように書いていました。
items = ['apple', 'banana', 'cherry']

for i in range(len(items)):
    print(i, items[i])
しかしPythonには、もっと簡単にインデックスと要素を同時に取得できる便利な関数があります。
それが enumerate() です。
本記事では enumerate() の使い方とメリットを解説します。

 enumerate()の基本
enu...]]></description><link>https://zenn.dev/fd2025/articles/ed45f3e442d361</link><guid isPermaLink="true">https://zenn.dev/fd2025/articles/ed45f3e442d361</guid><pubDate>Sat, 03 May 2025 21:44:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rJaFVD60--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25AEenumerate%2528%2529%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25EF%25BC%259A%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2587%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E4%25BB%2598%25E3%2581%258D%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E4%25BE%25BF%25E5%2588%25A9%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fd2025%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzMzVlNTI5MmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fd2025</dc:creator></item></channel></rss>