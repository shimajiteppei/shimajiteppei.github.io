<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 31 Jan 2025 08:04:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Branded Typeを活用したドメイン知識の表現]]></title><description><![CDATA[メディカルフォースでCTOをしている畠中です。
メディカルフォースでは新規事業として警備業界向けのSaaS「警備フォース」を開発しています。
「警備フォース」ではDDDおよびオニオンアーキテクチャを積極的に取り入れており、そちらで用いられているtipsについて共有できればと思っております。

 要旨
かなりの長期間システムを運用する場合、DDDは強力な武器になると考えています。
コードを高凝集・低結合を保つことができ、変更がある際の変更箇所が明確になるという点と変更を行なった際の影響範囲が明確になるという点で特に価値を発揮します。
DDDにおいてドメイン層の中で不正なentityが発生し...]]></description><link>https://zenn.dev/medicalforce/articles/8b88e7e89740f8</link><guid isPermaLink="true">https://zenn.dev/medicalforce/articles/8b88e7e89740f8</guid><pubDate>Fri, 31 Jan 2025 08:00:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8c0mmEHi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Branded%2520Type%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E7%259F%25A5%25E8%25AD%2598%25E3%2581%25AE%25E8%25A1%25A8%25E7%258F%25BE%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E7%2595%25A0%25E4%25B8%25AD%25E7%25BF%2594%25E4%25B8%2580%252F%25E3%2583%25A1%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25B9CTO%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkyZjY0YWIzNTQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A1%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZFlQbjY1TWJkaW1Za25uZGRPbFFmaHdBemJwbzc0TXQ5VlowMlo9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>畠中翔一/メディカルフォースCTO</dc:creator></item><item><title><![CDATA[既存の型に対してzodのスキーマを実装する]]></title><description><![CDATA[
 背景
TypeScriptとzodを組み合わせる場合、一般的にzodのスキーマから型を生成する方法が使われます。
const shapeSchema = z.object({
  name: z.string(),
})

type Shape = z.infer&lt;typeof shapeSchema&gt;
このアプローチは型の作成とスキーマの定義を矛盾なく実装できるため便利ですが、次のような場合に課題が生じます。

外部の型定義ファイルを参照する必要がある場合
型定義が既に存在している場合

!
外部の型定義を参照する場合、ACL（腐敗防止層）を利用して解決する場合がありま...]]></description><link>https://zenn.dev/aprender/articles/0cc87245977602</link><guid isPermaLink="true">https://zenn.dev/aprender/articles/0cc87245977602</guid><pubDate>Fri, 31 Jan 2025 05:24:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XFsZTajQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2597%25A2%25E5%25AD%2598%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6zod%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BF%25E3%2581%25BF%25E3%2581%25A4%25E3%2581%258D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxNWYyNmY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Aprender%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1NWUwYWQyMGEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みみつき</dc:creator></item><item><title><![CDATA[クラスとインターフェイスの実装【個人学習まとめ】]]></title><description><![CDATA[
 インターフェイスの実装
クラスがインターフェイスの規約に沿うように設計されることをクラスがインターフェイスを実装(implement)すると表現する。
キーワードは、implement。構文は次の通り。
interface SampleInterface {
    ダミー
}
class SampleClassName implements SampleInterface {
    実装内容
}
実際に動くコードで確認してみる。
interface Rate {
    getTaxRate(): number;
}

Shohizei クラスは Rate インターフェイスを実装...]]></description><link>https://zenn.dev/o0rororo0o/articles/1dc085063e3343</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/1dc085063e3343</guid><pubDate>Fri, 31 Jan 2025 04:20:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zLO3oHn3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A4%25E3%2582%25B9%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item><item><title><![CDATA[【Blockchain/web3】Solanaトランザクションにおける二重トランザクションエラーの解決方法]]></title><description><![CDATA[
 はじめに
Solanaを用いたアプリケーション開発において、トランザクションの管理は非常に重要です。特に、ユーザーが意図せず同じトランザクションを複数回送信してしまう「二重トランザクションエラー」は、ユーザー体験を損なう重大な問題となります。今回の開発ではlogとしてそれぞれユニークなhashを出力してましたが、この二重トランザクションエラーが度重なって起こってしまいました。今回んの解決方法としてあまり推奨されませんがskipPreflightをオフにして解決しました。blockchain領域はどうしても海外のDocumentが多く困惑すると思いますので日本のengineerの皆様に...]]></description><link>https://zenn.dev/yusukekikuta/articles/6667515562d411</link><guid isPermaLink="true">https://zenn.dev/yusukekikuta/articles/6667515562d411</guid><pubDate>Fri, 31 Jan 2025 01:57:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mWwwV34O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Blockchain%252Fweb3%25E3%2580%2591Solana%25E3%2583%2588%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B6%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E4%25BA%258C%25E9%2587%258D%25E3%2583%2588%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B6%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2520Kikuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzOGI2NmM0ZDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke Kikuta</dc:creator></item><item><title><![CDATA[Standard Schemaで何が実現できる？]]></title><description><![CDATA[
 初めに
本記事では先日v1.0.0が公開されたStandard Schameについて紹介します。

 本記事で紹介すること


Standard Schemaとは何か

Standard Schemaで実現できること

Standard Schemaに準拠済みのツール・フレームワーク


 本記事で紹介しないこと

スキーマライブラリでの準拠方法

!
本記事はReadmeの雑目なまとめ記事です。
より詳細を知りたい方はこちらをご確認ください。


 Standard Schemaとは
Standard Schemaはzodやvalibotといったスキーマバリデーションライブラリの共...]]></description><link>https://zenn.dev/caffe_latte_623/articles/standard-schema</link><guid isPermaLink="true">https://zenn.dev/caffe_latte_623/articles/standard-schema</guid><pubDate>Fri, 31 Jan 2025 01:07:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6i2nwe_A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Standard%2520Schema%25E3%2581%25A7%25E4%25BD%2595%25E3%2581%258C%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2583%25BC%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4ZjhhZGMzMTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しーさん</dc:creator></item><item><title><![CDATA[Vitest Browser Mode が凄い]]></title><description><![CDATA[
 Vitest Browser Mode とは
https://vitest.dev/guide/browser/
Vitest Browser Mode（ブラウザモード）とは、2025/1/31 現在 Experimental として公開されている Vitest の API で、ブラウザ上でテストを実行できる機能のことです。
ブラウザ上で実行可能になったことで必要なモックを最小限に、実際に操作される環境と同じ環境でテストをすることができます。
実際に試してみた内容をこの記事では紹介します。

 試してみた
通常のテストと Browser Mode のテストをそれぞれ作成し、比較してみ...]]></description><link>https://zenn.dev/t0daaay/articles/db0985a1e54b1c</link><guid isPermaLink="true">https://zenn.dev/t0daaay/articles/db0985a1e54b1c</guid><pubDate>Fri, 31 Jan 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oUMgzlUq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vitest%2520Browser%2520Mode%2520%25E3%2581%258C%25E5%2587%2584%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A4%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3ZWJmY2U1MDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>つじ</dc:creator></item><item><title><![CDATA[playwrightのsnapshotでmask以外の方法で要素を隠す]]></title><description><![CDATA[Playwrightのスクリーンショットのテストをする際、差分として考慮したくない部分に関してmaskを指定できる。
test('snapshot', async ({ page }) =&gt; {
  await page.goto('https://playwright.dev/')
  await expect(page).toHaveScreenshot({
    mask: [
      page.locator(".navbar__title.text--truncate"),
      page.locator(".getStarted_Sjon"),
    ]
...]]></description><link>https://zenn.dev/terrierscript/articles/2025-01-31-playwright-snapshot-mask</link><guid isPermaLink="true">https://zenn.dev/terrierscript/articles/2025-01-31-playwright-snapshot-mask</guid><pubDate>Thu, 30 Jan 2025 16:02:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--21hssDiL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:playwright%25E3%2581%25AEsnapshot%25E3%2581%25A7mask%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%25AE%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A7%25E8%25A6%2581%25E7%25B4%25A0%25E3%2582%2592%25E9%259A%25A0%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:terrierscript%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhNzJjMjE0Y2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>terrierscript</dc:creator></item><item><title><![CDATA[Biome で特定のディレクトリ内のモジュールの import を制限する]]></title><description><![CDATA[
 特定のディレクトリからモジュールの import を制限したい
TypeScriptのプロジェクトで、アーキテクチャや依存関係の整合性を保つために、あるディレクトリから別のディレクトリへの import を制限したいことがあります。
具体的には下記のようなケース

foo ディレクトリ配下のコードでは、bar ディレクトリ配下のモジュールを使ってはいけない
ただし、bar ディレクトリ配下から、foo ディレクトリ配下のモジュールは使ってもよい


 ESLint での制限
ESLint であれば no-restricted-imports という便利なルールがあり、下記のようにpa...]]></description><link>https://zenn.dev/tetzng/articles/32ddacdc43790a</link><guid isPermaLink="true">https://zenn.dev/tetzng/articles/32ddacdc43790a</guid><pubDate>Thu, 30 Jan 2025 13:34:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7Rk5ud-N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%2520%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E5%2586%2585%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%2520import%2520%25E3%2582%2592%25E5%2588%25B6%25E9%2599%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tetzng%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY1MGY0ZjJkNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tetzng</dc:creator></item><item><title><![CDATA[【最低限抑えたい】SvelteKitの書き方（ルーン対応済み）]]></title><description><![CDATA[
 はじめに
皆さん、こんにちは。
今回はSvelteKitの基本的な使い方をご紹介します。最近Svelteはバージョンが上がり新しくルーンという表現が追加されました。今回の内容はSvelteのルーンに対応しております。
https://svelte.jp/tutorial/kit/introducing-sveltekit
https://svelte.jp/docs/kit/introduction

 サンプルコードのリポジトリ
https://github.com/peter-norio/svelte/tree/main/my-sveltekit

 雛形とファイル構成

 概要...]]></description><link>https://zenn.dev/peter_norio/articles/e396fea99aa6ec</link><guid isPermaLink="true">https://zenn.dev/peter_norio/articles/e396fea99aa6ec</guid><pubDate>Thu, 30 Jan 2025 12:39:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MEQZC7gI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E6%259C%2580%25E4%25BD%258E%25E9%2599%2590%25E6%258A%2591%25E3%2581%2588%25E3%2581%259F%25E3%2581%2584%25E3%2580%2591SvelteKit%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%25EF%25BC%2588%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25B3%25E5%25AF%25BE%25E5%25BF%259C%25E6%25B8%2588%25E3%2581%25BF%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2594%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2581%25AE%25E3%2582%258A%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTcwSTlWTjhXNHl3eWRJY1JlYzFWaUJtc3B6S3lfX3JzeTUyYmJhRFh0c29FVzJDZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ピーターのりお</dc:creator></item><item><title><![CDATA[zodを用いた条件分岐バリデーションを実装してみる]]></title><description><![CDATA[
 はじめに
1ヶ月後にモンスターハンターになる、ノベルワークスのりょうちん（ryotech34）です。
今回は、TypeScript向けに設計されたスキーマ宣言やバリデーションを助けてくれるライブラリである、zodを使用して条件分岐バリデーションを実装した際の備忘録です。
https://zod.dev/
ドメインモデルとzodを組み合わせた実装方法として、下記の記事を参考にさせていただきました。ぜひ確認してみてください。
https://zenn.dev/kimutyam/articles/zod-domain-model

 対象読者

zodに触れているもしくはこれから触ろうと思...]]></description><link>https://zenn.dev/ryoryo34/articles/7e60c176b1ab0a</link><guid isPermaLink="true">https://zenn.dev/ryoryo34/articles/7e60c176b1ab0a</guid><pubDate>Thu, 30 Jan 2025 10:04:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--af0r3FA5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:zod%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ryoryo34%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2ZDI5MjRhMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryoryo34</dc:creator></item><item><title><![CDATA[Expo Audioで音を鳴らす]]></title><description><![CDATA[
 はじめに

アプリの中で、「音を鳴らしたい」って思うことありますよね？
実際に、Expoアプリの中で音を鳴らせるようにするまでやってみました🍵
今回は「Expo Audio」と呼ばれる、expo-avをベースにした音声再生・録音ライブラリを使います。


 まとめ

Expo Audio（expo-av）を使えば、簡単に音声の再生・録音を実装できる
近い将来、expo-audioとして改良版がリリース予定。


 Expo AVとは？

https://docs.expo.dev/versions/latest/sdk/audio-av/

概要

Expo Audioは、expo-...]]></description><link>https://zenn.dev/deepbluemasao/articles/825087a1b1a9b9</link><guid isPermaLink="true">https://zenn.dev/deepbluemasao/articles/825087a1b1a9b9</guid><pubDate>Thu, 30 Jan 2025 09:55:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F_NXUydz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Expo%2520Audio%25E3%2581%25A7%25E9%259F%25B3%25E3%2582%2592%25E9%25B3%25B4%25E3%2582%2589%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:masa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3MjNkYjVhMWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>masa</dc:creator></item><item><title><![CDATA[【Web3 / Blockchain/React/TypeScript】Solanaでのトランザクション処理をコードから学ぶ]]></title><description><![CDATA[
 はじめに
仮想通貨やブロックチェーン上での取引は、実際にどのようにプログラムコードで行われているのでしょうか？
この記事では Solana を例に、Web3 ならではのネットワーク構造・RPC ノード・トランザクションの仕組みを、シンプルな入金(Deposit)コードをとおして解説します。


 1. Web3 / Blockchain とは？

 1-1. 従来のWeb2との違い


Web2: 中央サーバー or クラウド (例: AWS, GCP) がメイン。

Web3: 分散型ネットワークを使い、誰でもトランザクション(取引)を検証できる。

Solanaのようなブロックチ...]]></description><link>https://zenn.dev/yusukekikuta/articles/b8711d3b2d16c4</link><guid isPermaLink="true">https://zenn.dev/yusukekikuta/articles/b8711d3b2d16c4</guid><pubDate>Thu, 30 Jan 2025 09:30:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P1FDnDGp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Web3%2520%252F%2520Blockchain%252FReact%252FTypeScript%25E3%2580%2591Solana%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B6%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25BC...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2520Kikuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzOGI2NmM0ZDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke Kikuta</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜アフィン変換(平行移動)（028/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の28本目です。

 前回
https://zenn.dev/nyagato_00/articles/5d252ed19206f8

 実装

 お題

アフィン変換を利用して画像をx方向に+30、y方向に-30だけ平行移動させよ。
アフィン変換とは3x3の行列を用いて画像の変換を行う操作である。

https://github.com/minido/Gasyori100knock-1/tree/master/Question_21_30#q28-アフィン変換平行移動

 Coding
im...]]></description><link>https://zenn.dev/nyagato_00/articles/bd83bc3148f4ce</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/bd83bc3148f4ce</guid><pubDate>Thu, 30 Jan 2025 07:45:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vWZ9VQfA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2582%25A2%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25B3%25E5%25A4%2589%25E6%258F%259B%2528%25E5%25B9%25B3%25E8%25A1%258C%25E7%25A7%25BB%25E5%258B%2595%2529%25EF%25BC%2588028%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[【拡張機能】Google Chromeで使える自動クリック(左右の矢印キーのみ)【習作】]]></title><description><![CDATA[
 はじめに
拡張機能の習作として、左右の矢印キーを自動でクリックできる拡張機能を作りました。
漫画サイトでフリーハンドでスライドショーのようにページめくりできたらいいなと思ったのがきっかけです。ジャンプ＋などで試したところ上手く行きました。
PlasmoというReactベースで拡張機能を作れるフレームワークを使いました。まだまだ練習中ですが、Reactに慣れていると比較的楽に開発がすすめられました。
もし良ければ使ってみてください。

 拡張機能に追加する


zipファイルをダウンロードして解凍する


chrome://extensions/にアクセス


パッケージ化されていない...]]></description><link>https://zenn.dev/syab_syab/articles/57fe26bac5f0e7</link><guid isPermaLink="true">https://zenn.dev/syab_syab/articles/57fe26bac5f0e7</guid><pubDate>Wed, 29 Jan 2025 20:37:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VgtWSkhE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2580%2591Google%2520Chrome%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E8%2587%25AA%25E5%258B%2595%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25AF%2528%25E5%25B7%25A6%25E5%258F%25B3%25E3%2581%25AE%25E7%259F%25A2%25E5%258D%25B0%25E3%2582%25AD%25E3%2583%25BC%25E3%2581%25AE%25E3%2581%25BF%2529%25E3%2580%2590%25E7%25BF%2592%25E4%25BD%259C%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2582%25A4%25E3%2582%25B9%25E3%2582%25A2%25E3%2583%25BC%25E3%2583%259F%25E3%2583%25BC%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WlVLdDBZeHh0TzVNRVdqV3lrQlQtM0l0UWZPZ1JlaE1EbERNR0w9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スイスアーミーアプリ</dc:creator></item><item><title><![CDATA[GASをTypescriptで。(動作確認済み)]]></title><description><![CDATA[Google Apps Script (GAS) を TypeScript で開発し、VSCode を使ってスプレッドシートを操作する方法を以下に説明します。TypeScript を使うことで、型安全で保守性の高いコードを書けます。


 手順


必要なツールのインストール
まず、以下のツールをインストールします。


Node.js（npmが使える環境）

clasp（Google Apps Script の CLI ツール）

clasp のインストールコマンド:
npm install -g @google/clasp



Google アカウントで clasp を認証
cla...]]></description><link>https://zenn.dev/endeavor_robot/articles/24edc7b2400b4d</link><guid isPermaLink="true">https://zenn.dev/endeavor_robot/articles/24edc7b2400b4d</guid><pubDate>Wed, 29 Jan 2025 18:37:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RO8x9q4A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GAS%25E3%2582%2592Typescript%25E3%2581%25A7%25E3%2580%2582%2528%25E5%258B%2595%25E4%25BD%259C%25E7%25A2%25BA%25E8%25AA%258D%25E6%25B8%2588%25E3%2581%25BF%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:inumina%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NzZiMTdmZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>inumina</dc:creator></item><item><title><![CDATA[「npx create-xxx」で始めるnpmパッケージを自作したい]]></title><description><![CDATA[
 はじめに
create-next-app や npm init playwright のような便利なセットアップコマンドを利用した経験はありませんか？
これらのコマンドは、たった数秒でプロジェクトをセットアップし、開発の第一歩を大きく加速させてくれます。
ただ、その裏側を「どうやって作られているのだろう？」と考えたことがある方もいるのではないでしょうか。
本記事では、そんな「npx create-xxx で始める npm パッケージの自作方法」について、シンプルなパッケージの自作をしながら解説します。


npx create-xxx によるセットアップコマンドを作成する方法
モジュ...]]></description><link>https://zenn.dev/yuu104/articles/how-to-create-npx-create-package</link><guid isPermaLink="true">https://zenn.dev/yuu104/articles/how-to-create-npx-create-package</guid><pubDate>Wed, 29 Jan 2025 13:39:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--A3I82_Zt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258Cnpx%2520create-xxx%25E3%2580%258D%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258Bnpm%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMGVjMzFlNzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu</dc:creator></item><item><title><![CDATA[Hi👋.length は３なのか]]></title><description><![CDATA[以下のコードを実行すると何が出力されるでしょうか？
console.log("Hi👋".length);
実はこれを実行すると、4 になります。この記事では、なぜこのような結果になるのか、そして「正しく」文字数をカウントする方法をざっくりと解説します。
!
記事中「文字」に関する情報がでてきますが、詳細な説明等はありません。そのため誤りが含まれる場合があるかもしれませんが、その場合はご指摘いただけると幸いです。


 JavaScript の.length メソッド
私は JavaScript において.lengthは、その文字列の長さを返すメソッドだと認識していました。例えば以下のよう...]]></description><link>https://zenn.dev/dev_commune/articles/js-str-length</link><guid isPermaLink="true">https://zenn.dev/dev_commune/articles/js-str-length</guid><pubDate>Wed, 29 Jan 2025 12:44:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Yim7geWE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hi%2520.length%2520%25E3%2581%25AF%25EF%25BC%2593%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kenchandayo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1MTE3MTI5NDIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25B3%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5Y2Q5ZDdkNDYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kenchandayo</dc:creator></item><item><title><![CDATA[【TypeScript基礎②】型推論と型注釈の使い分け]]></title><description><![CDATA[
 結論
複雑な型(オブジェクトなど)や曖昧な型（ユニオン型やジェネリクス型など）は型注釈で明示的に型を指定し、型の安全性を保つ方が良いが、明確な型は型推論に任せるのがベストプラクティス

 型推論

TypeScriptが自動的に変数や関数の方を推測して決定するしくみ
型推論の例は下記

// 文字列型と推論
const name = "John"

 型推論を使うとき

シンプルな型を扱うときに使う

プリミティブ型など




 型注釈

TypeScriptで変数や関数に明示的に型を指定するしくみ
型注釈の例は下記

// 文字列型を明示
const name: string =...]]></description><link>https://zenn.dev/mof_moriko/articles/292b6ad4635ecc</link><guid isPermaLink="true">https://zenn.dev/mof_moriko/articles/292b6ad4635ecc</guid><pubDate>Wed, 29 Jan 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sxm_7vVs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E5%259F%25BA%25E7%25A4%258E%25E2%2591%25A1%25E3%2580%2591%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%25A8%25E5%259E%258B%25E6%25B3%25A8%25E9%2587%2588%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:moriko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkMGY2YWE3OTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>moriko</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜Bi-cubic補間（027/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の27本目です。

 前回
https://zenn.dev/nyagato_00/articles/b3355f806fb6ad

 実装

 お題

Bi-cubic補間により画像を1.5倍に拡大せよ。
Bi-cubic補間とはBi-linear補間の拡張であり、周辺の16画素から補間を行う。

https://github.com/minido/Gasyori100knock-1/tree/master/Question_21_30#q27-bi-cubic補間

 Coding
im...]]></description><link>https://zenn.dev/nyagato_00/articles/5d252ed19206f8</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/5d252ed19206f8</guid><pubDate>Wed, 29 Jan 2025 06:22:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lETDwIO6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259CBi-cubic%25E8%25A3%259C%25E9%2596%2593%25EF%25BC%2588027%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[TypeScriptで始めるTDDハンズオン：レイヤードアーキテクチャでのAPI開発]]></title><description><![CDATA[TypeScriptとjestを使用したアプリケーションのAPI開発を通じて、
テスト駆動開発（TDD）の実践的な手法を学ぶハンズオン形式の解説書です。

ソースコードの一部だけでなく完結と動作確認まで載せているので、
（未経験の方は少々難しいかもしれませんが）ポートフォリオの参考にもなると思います。実務で必要となる要素を着実に学べます。

【概要】
・TypeScriptとExpress.jsを使用したRESTful APIの開発 🚀
・Jestを使用したテスト駆動開発(TDD)の手法 🧪
・レイヤードアーキテクチャの実践 🏗️
・実務で使える設計・実装テクニック ⚙️
・関連オススメ書籍 📚

1. 段階的に整理しました 🔄
   - 各レイヤーを順に実装
   - TDDのサイクルを実践しながら進める
   - 実務で必要な機能を網羅

2. 実践的な内容を意識しました 🛡️
   - バリデーションの実装
   - エラーハンドリング
   - TypeScriptの型安全な開発

3. テスト駆動開発の実践 ✅
   - Red-Green-Refactorサイクルの具体例
   - 適切な粒度でのテスト実装
   - テストファーストの考え方
]]></description><link>https://zenn.dev/nezumizuki/books/3a7f70aab092f1</link><guid isPermaLink="true">https://zenn.dev/nezumizuki/books/3a7f70aab092f1</guid><pubDate>Wed, 29 Jan 2025 04:38:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sZ7qvQGh--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9jOTVmYmFlNDU2LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>MI(甘辛チキン)</dc:creator></item></channel></rss>