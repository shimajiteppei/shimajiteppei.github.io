<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 26 Aug 2025 12:04:53 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[typescriptいい]]></title><description><![CDATA[
 背景
ふとしたprを気にtypescriptをちょっと考えながら書いてみた

 目的

typescriptちょっとわかった気になる


 前提

typescript知らないです
変なこと言ってたらぜひコメントで教えていただきたいです（理解のレベル上げたい


 内容

 典型的な実装
まず、多くの開発者が最初に書きがちなCSVパーサーフックを見てみましょう
// ❌ 典型的な実装：一見動作するが、問題が潜んでいる
function useCSVParser() {
  const [data, setData] = useState(null);
  const [isLoadi...]]></description><link>https://zenn.dev/kiwamizamurai/articles/76e1f00b1208f1</link><guid isPermaLink="true">https://zenn.dev/kiwamizamurai/articles/76e1f00b1208f1</guid><pubDate>Tue, 26 Aug 2025 11:11:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KIcfare2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:typescript%25E3%2581%2584%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kiwamizamurai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNmlfQml4aE1xOXZXUzBiSk5VZ1ZYb2ZDNkVva0toRGNkZXJzSjg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kiwamizamurai</dc:creator></item><item><title><![CDATA[フロントエンドの .env 管理に疲れた方へ：環境差分を Bundler で吸収する]]></title><description><![CDATA[フロントエンド開発において、.envファイルによる環境変数の管理は一般的ですが、多くの課題も抱えています。.envファイルは通常 Git の管理下に置かれないため、チーム内での共有や CI/CD パイプラインへの組み込みが煩雑になりがちです。
この記事では、その問題を解決するための新しいアプローチを提案します。具体的には、開発・本番といった環境ごとに設定ファイルを分割して作成し、Bundler（Vite, Webpack など）のモジュール解決の仕組みを利用して、実行時に適切な設定ファイルを読み込むようにします。これにより、.envの利用をやめ、設定ファイルを安全に Git で管理し、さ...]]></description><link>https://zenn.dev/ventus/articles/d52fd0325f689f</link><guid isPermaLink="true">https://zenn.dev/ventus/articles/d52fd0325f689f</guid><pubDate>Tue, 26 Aug 2025 08:07:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kx64w-Hx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%2520.env%2520%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25AB%25E7%2596%25B2%25E3%2582%258C%25E3%2581%259F%25E6%2596%25B9%25E3%2581%25B8%25EF%25BC%259A%25E7%2592%25B0%25E5%25A2%2583%25E5%25B7%25AE%25E5%2588%2586%25E3%2582%2592%2520Bundler%2520%25E3%2581%25A7%25E5%2590%25B8%25E5%258F%258E%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%2520%2520%2520%2520%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlMmJkNTFhYTEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ventus%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzdjeWwzOTJQN0tFbmhpbDlZdm8tQTVzczNVTHRkOWxMNTM4NkFzMm9vc1E9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>🌱🌿☘️🍀</dc:creator></item><item><title><![CDATA[Angular v20 "スタイルガイド" の変更点まとめ]]></title><description><![CDATA[2025年5月にリリースされた Angular v20 には派手な新機能はありませんでしたが、実はスタイルガイドが大きく更新されました。
この記事では、スタイルガイドに注目して v19 からの変更点を見ていきたいと思います！
!
「v19 からの変更点」としていますが、v19 より前のバージョンでは細かい修正はありつつもほぼ変わっていませんでした。
v20 ではセクション分けから内容まで大きく変わっているため、v20 前後での変更点として見ていただければと思います！


 どう変わったかの概要
v19 では「Style 01-01」のようにナンバリングがされていましたが、v20 では普通...]]></description><link>https://zenn.dev/jigjp_engineer/articles/028f23f194510f</link><guid isPermaLink="true">https://zenn.dev/jigjp_engineer/articles/028f23f194510f</guid><pubDate>Tue, 26 Aug 2025 06:00:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fzElB3-6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular%2520v20%2520%2522%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2522%2520%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2599%25E3%2581%259A%25E3%2581%25A8%25E3%2582%2582%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5NGQxOTY3NzcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:jig.jp%2520Engineers%2527%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzOGVmN2MzMTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>すずとも</dc:creator></item><item><title><![CDATA[複数タブの状態同期に便利な BroadcastChannel APIを使ってみよう]]></title><description><![CDATA[最近、タブ間でのデータ同期方法としてBroadcast Channel APIの存在を知ったので、使い方やユースケースをなどを紹介します。
MDN - Broadcast Channel API

 Broadcast Channel APIとは
同一オリジンの複数コンテキスト（タブ/window/iframe/Worker）間で、シンプルなPub/Subを実現するWeb標準APIです。
同名のチャンネルを各コンテキストで生成し、messageイベントにリスナーを登録すると、postMessageで送った値が同名チャネルの全コンテキストに届きます。
&lt;script type="mo...]]></description><link>https://zenn.dev/galapagos/articles/f3efd726bb7391</link><guid isPermaLink="true">https://zenn.dev/galapagos/articles/f3efd726bb7391</guid><pubDate>Tue, 26 Aug 2025 00:25:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--T-_PBu2J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E6%2595%25B0%25E3%2582%25BF%25E3%2583%2596%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E5%2590%258C%25E6%259C%259F%25E3%2581%25AB%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%2520BroadcastChannel%2520API%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:rm.%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlMWFiMTkxYzQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25AC%25E3%2583%25A9%25E3%2583%2591%25E3%2582%25B4%25E3%2582%25B9%25EF%25BC%2588%25E6%259C%2589%25E5%25BF%2597%25EF%25BC%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyNDYyM2I3YjcuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rm.</dc:creator></item><item><title><![CDATA[AIファーストで全てを書き直す：エンジニアが知るべき新パラダイム]]></title><description><![CDATA[
 はじめに：コードを書くのをやめた日

先週、3日かけて書いていたTypeScriptのコードを全て捨てました。
代わりに、Claudeと30分話して、同じ機能を2時間で実装しました。しかも、元のコードより品質が高い。
これは「AIでコーディングが速くなった」という話ではありません。我々がソフトウェアを作る方法が、根本から変わったという話です。

 Context is King：なぜMarkdownが最強なのか
なぜか？


LLMのトークン効率: MarkdownはJSONより平均30%少ないトークンで同じ情報を表現

文脈の保持: 人間の思考プロセスをそのまま保存できる

バージ...]]></description><link>https://zenn.dev/gunta/articles/5b7a081fef8c71</link><guid isPermaLink="true">https://zenn.dev/gunta/articles/5b7a081fef8c71</guid><pubDate>Mon, 25 Aug 2025 23:44:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8xwbLzJl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AI%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A7%25E5%2585%25A8%25E3%2581%25A6%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258D%25E7%259B%25B4%25E3%2581%2599%25EF%25BC%259A%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E7%259F%25A5%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258D%25E6%2596%25B0%25E3%2583%2591%25E3%2583%25A9%25E3%2583%2580%25E3%2582%25A4%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Gunther%2520Brunner%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCOWhzUlhhNW5lUXlhNF81U2RyRnNDUWkxcll3WDB4RTlDRjB4eGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Gunther Brunner</dc:creator></item><item><title><![CDATA[Angular20 の SSR 時の HttpClient を考える]]></title><description><![CDATA[
 はじめに
前回、HonoとAngular20でSSRする方法をまとめました。
https://zenn.dev/nao50/articles/angular20-hono-ssr
今回はAngularのSSR時のHTTP Clientを比較していこうと思います。

'hono/client' の hc を使ったRPCを使う
'@angular/common/http' の HttpClient を使う
'@angular/common/http' の httpResource を使う


 'hono/client' の hc を使ったRPC機能を使う
Honoにはサーバー側で定義し...]]></description><link>https://zenn.dev/nao50/articles/angular20-ssr-httpclient-compare</link><guid isPermaLink="true">https://zenn.dev/nao50/articles/angular20-ssr-httpclient-compare</guid><pubDate>Mon, 25 Aug 2025 23:29:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jlvtSVMD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular20%2520%25E3%2581%25AE%2520SSR%2520%25E6%2599%2582%25E3%2581%25AE%2520HttpClient%2520%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nao%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiY2YzZDIyYTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nao</dc:creator></item><item><title><![CDATA[Zod v4におけるブランド型実装ガイド：unique symbolアプローチからの移行]]></title><description><![CDATA[
 はじめに
この記事は、uhyo氏の「TypeScriptの型レベルプログラミングでブランド型を作る」を参考に、Zod v4でのブランド型実装について解説したものです。
TypeScriptでブランド型を学ぶ際、uhyo氏の記事のようなunique symbolを使ったアプローチが多く紹介されています。しかし、実際にZod v4環境でこれらの記事を参考に実装しようとすると、APIの変更により動かないコードに遭遇することがあります。
私自身も、既存の記事を参考にしながらZod v4でブランド型を実装しようとした際、以下のような問題に直面しました


z.BRANDが存在しないエラー

z...]]></description><link>https://zenn.dev/ho_ri/articles/e672d12e11d1f2</link><guid isPermaLink="true">https://zenn.dev/ho_ri/articles/e672d12e11d1f2</guid><pubDate>Mon, 25 Aug 2025 15:31:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--238pErFZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%2520v4%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2589%25E5%259E%258B%25E5%25AE%259F%25E8%25A3%2585%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25EF%25BC%259Aunique%2520symbol%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hol1kgmg%2520%2528%25E3%2581%25BB%25E3%2582%258A%25E3%2581%258B%25E3%2582%258F%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NmM0YjRmYTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hol1kgmg (ほりかわ)</dc:creator></item><item><title><![CDATA[Biomeって何？ESLint / Prettierからの移行先として注目される理由]]></title><description><![CDATA[
 はじめに
最近、BiomeというツールをNEXT.JSに導入したので、記事に残そうかなと思います。
・これまでは ESLint + Prettier が定番だったので、気になり調べてみました。
・最近「Biome」が話題になっている → 今回はそのBiomeについての記事を記述したいと思います。

 Biomeとは？
Lint（コードチェック）、Formatter（コード整形）、一部の型解析を 1つのツール で実現できるのが特徴です。

 従来の課題
JS/TS 開発では複数のツールを組み合わせる必要がありました。

コードチェック → ESLint
コード整形 → Prettier...]]></description><link>https://zenn.dev/rrr068/articles/d7ed8d0e343197</link><guid isPermaLink="true">https://zenn.dev/rrr068/articles/d7ed8d0e343197</guid><pubDate>Mon, 25 Aug 2025 14:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hKDV3pF7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25EF%25BC%259FESLint%2520%252F%2520Prettier%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%25E5%2585%2588%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%25B3%25A8%25E7%259B%25AE%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E7%2590%2586%25E7%2594%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BA%2594%25E5%258F%25B3%25E8%25A1%259B%25E9%2596%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExY2Y0YjhkYTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>五右衛門</dc:creator></item><item><title><![CDATA[Vite + TypeScript で作る Chrome 拡張（MV3） Step1]]></title><description><![CDATA[
 Vite + TypeScript で作る Chrome 拡張（MV3）
今回はプロローグ的なものとハンズオン Step1「Vite + TypeScript + MV3 の最小スケルトンを作る」をお届けします。

 概要
本記事は「Vite + TypeScript で作る Chrome 拡張（MV3）」のハンズオンです。
Chrome 拡張の基礎的な知識も載せていきます。

 想定読者

Chrome 拡張機能を作りたい人。
TypeScript の最低限の基礎知識がある人


 HOW

 なぜ TypeScript を使うのか
以下個人的な感想になりますが、
型安全でエラーの...]]></description><link>https://zenn.dev/igusaya/articles/05b30ad43db74d</link><guid isPermaLink="true">https://zenn.dev/igusaya/articles/05b30ad43db74d</guid><pubDate>Mon, 25 Aug 2025 12:20:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bCJwvGRd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vite%2520%252B%2520TypeScript%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520Chrome%2520%25E6%258B%25A1%25E5%25BC%25B5%25EF%25BC%2588MV3%25EF%25BC%2589%2520Step1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BA%2595%25E8%258D%2589%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0Zm1YM2hHSGpEWFJmZEhCaS1VcXR2N1pQTEdBQzg4bDc1Z0xCdjZFVG11Z1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>井草屋</dc:creator></item><item><title><![CDATA[ユーザーを「あえて待たせる」UI【UI設計】]]></title><description><![CDATA[遅いのは良くないけど、速すぎるのも不安になる。

システムの制作では、ことにつけてパフォーマンスが重視されます。Webサイトならレスポンスタイムやロードタイムはユーザーの離脱率に直結しますし、その他のアプリやシステムでも様々思考を凝らしてなるべく効率的に・高速に処理をするのがベストだというのは共通認識かと思います。それは間違いありません。軽量・高速なものほど、ユーザーの快適性が上がり、ストレスなく作業ができます。
しかし、UIデザインでは、ユーザー体験（UX）の観点からあえて待たせることが重要な場面もあると私は考えています。今回は、最近制作したWebアプリで私が実際にユーザーを待たせる実...]]></description><link>https://zenn.dev/omu_tryangle/articles/f209fb5212cf8b</link><guid isPermaLink="true">https://zenn.dev/omu_tryangle/articles/f209fb5212cf8b</guid><pubDate>Mon, 25 Aug 2025 08:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LArCtv02--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2582%2592%25E3%2580%258C%25E3%2581%2582%25E3%2581%2588%25E3%2581%25A6%25E5%25BE%2585%25E3%2581%259F%25E3%2581%259B%25E3%2582%258B%25E3%2580%258DUI%25E3%2580%2590UI%25E8%25A8%25AD%25E8%25A8%2588%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25EF%25BC%2588%25E4%25BB%25AE%25EF%25BC%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwMmVhYjg4YTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TryAngle%2540%25E5%25A4%25A7%25E9%2598%25AA%25E5%2585%25AC%25E7%25AB%258B%25E5%25A4%25A7%25E5%25AD%25A6%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWViNWU2NjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>（仮）</dc:creator></item><item><title><![CDATA[[個人開発] Youtubeでいつもの勉強が「楽しみ!!」に変える配信にする Web アプリ]]></title><description><![CDATA[
 🌱 はじめに
今回は、個人開発で Youtube ライブ勉強配信をちょっと楽しくなる Web アプリを開発しました。
その内容についてご紹介します。
こちらは、Youtube の実際の配信画面です。

画面左下に表示されている"Focus tracker"が今回作成したアプリです
下記リンクから Youtube ライブ配信の様子を確認できます。


 🌱 サービスコンセプト
!
いつもの勉強が「楽しみ!!」に変える配信にする Web アプリ

いつもの勉強が「楽しみ!!」に変えるには、
多くの方が抱える悩み TOP3 を解消する必要があると考えております。
自分も社会人になってからち...]]></description><link>https://zenn.dev/aew2sbee/articles/personal-development-youtube-nextjs</link><guid isPermaLink="true">https://zenn.dev/aew2sbee/articles/personal-development-youtube-nextjs</guid><pubDate>Mon, 25 Aug 2025 05:35:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E0mYEVqN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%255D%2520Youtube%25E3%2581%25A7%25E3%2581%2584%25E3%2581%25A4%25E3%2582%2582%25E3%2581%25AE%25E5%258B%2589%25E5%25BC%25B7%25E3%2581%258C%25E3%2580%258C%25E6%25A5%25BD%25E3%2581%2597%25E3%2581%25BF%2521%2521%25E3%2580%258D%25E3%2581%25AB%25E5%25A4%2589%25E3%2581%2588%25E3%2582%258B%25E9%2585%258D%25E4%25BF%25A1%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B0%258F%25E5%2580%2589%25E3%2581%2582%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhN2I0MzQ2ZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>小倉あん</dc:creator></item><item><title><![CDATA[CommonJS アプリケーションを ESM に移行する。ついでに Vitest にも移行する]]></title><description><![CDATA[Node.js アプリケーションを CommonJS (CJS) から ES Modules (ESM) に移行したのでやったことを書き記します。
今回移行したアプリケーションは、バンドラーを伴わない純粋な Node.js アプリケーションです。TypeScript で書かれており、ビルド時には単に tsc で型を落としているだけです。ビルド成果物には require / module.exports が残っていて各ファイル同士が参照し合う、古典的なCJSアプリケーションとなります。
Node.js バージョンが 20 とやや古いので、残念ながら TypeScript のまま実行させるこ...]]></description><link>https://zenn.dev/chot/articles/migrate-from-cjs-jest-to-esm-vitest</link><guid isPermaLink="true">https://zenn.dev/chot/articles/migrate-from-cjs-jest-to-esm-vitest</guid><pubDate>Mon, 25 Aug 2025 04:51:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DUDYl3gT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CommonJS%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%2520ESM%2520%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A7%25E3%2581%25AB%2520Vitest%2520%25E3%2581%25AB%25E3%2582%2582%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2599%25E3%2581%25A6%25E3%2581%2583%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzMTEyZmJmM2MuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>すてぃん</dc:creator></item><item><title><![CDATA[VSCode拡張機能でCursor RulesとVSCode Custom Instructionsを相互変換する仕組みを作る]]></title><description><![CDATA[
 はじめに
近年、CursorやGitHub Copilot、Claude Codeなど、様々なAI開発支援ツールが登場しています。これらのツールは独自のルール形式を持っており、プロジェクトごとにコーディング規約やスタイルガイドを定義できます。
しかし、複数のツールを使い分ける際、それぞれの形式でルールを管理するのは煩雑です。
そこで、Cursor / VSCode 両エディタで使用できるVSCode拡張機能を作成し相互変換する仕組みを作ってみました。
本記事では、Cursor RulesとVSCode Custom Instructionsを相互変換するVSCode拡張機能の実装方法...]]></description><link>https://zenn.dev/dotdtech_blog/articles/9174c50cfabd53</link><guid isPermaLink="true">https://zenn.dev/dotdtech_blog/articles/9174c50cfabd53</guid><pubDate>Mon, 25 Aug 2025 01:19:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uDC8mUTK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A7Cursor%2520Rules%25E3%2581%25A8VSCode%2520Custom%2520Instructions%25E3%2582%2592%25E7%259B%25B8%25E4%25BA%2592%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:asano%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNTMxNmU4NDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:dotD%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3NWFmNmE1ZjcuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>asano</dc:creator></item><item><title><![CDATA[Angular20 を Hono で SSR する]]></title><description><![CDATA[
 はじめに
HonoとAngular20でServer Side Rendering(SSR)します。
Angular18 でSSRした記事は以下にあります。
https://zenn.dev/nao50/articles/angular18-hono-ssr

 Angular を Hono で SSR
Angularはプロジェクト生成時にSSRを指定することでexpressベースのサーバーコードが生成されます。
最近は以下の記事を参考にnpxでプロジェクトを作成しました。
https://kasaharu.hatenablog.com/entry/20241222/17348390...]]></description><link>https://zenn.dev/nao50/articles/angular20-hono-ssr</link><guid isPermaLink="true">https://zenn.dev/nao50/articles/angular20-hono-ssr</guid><pubDate>Sun, 24 Aug 2025 22:03:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X4zhw-g5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular20%2520%25E3%2582%2592%2520Hono%2520%25E3%2581%25A7%2520SSR%2520%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nao%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiY2YzZDIyYTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nao</dc:creator></item><item><title><![CDATA[MCPサーバー開発環境を構築するためのTypeScriptミニマルセットアップガイド]]></title><description><![CDATA[MCP (Model Context Protocol) サーバーを TypeScript で開発するための環境構築について
この記事では、新しいプロジェクトを立ち上げ、開発をスムーズに進めるための「TypeScript ミニマルセットアップ」を、順を追ってご紹介します。Linter/Formatter には Biome を、コード品質を保つ仕組みとして Husky を採用し、最終的には npm パッケージとして公開するまでの流れを解説します。
実際に開発したリポジトリは https://github.com/atman-33/mcp-ts-minimal で公開していますので、詳細はこ...]]></description><link>https://zenn.dev/atman/articles/1dd1d12d99bc4a</link><guid isPermaLink="true">https://zenn.dev/atman/articles/1dd1d12d99bc4a</guid><pubDate>Sun, 24 Aug 2025 14:43:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mC7tWlsc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AETypeScript%25E3%2583%259F%25E3%2583%258B%25E3%2583%259E%25E3%2583%25AB%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:atman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjl3SUJHQTRDUWZZOW54b1owcjI3WkN6N1I1Y0NsMnBzM2EwWkRnbGc0dXZHVlFnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>atman</dc:creator></item><item><title><![CDATA[React Router×TypeScriptで内部リンクを型で制限する]]></title><description><![CDATA[
 概要
友人と進めている個人開発でReact Router（フレームワークモード）を使っています。プロジェクト的に管理画面も作っていく中で、React Routerのルーティング定義をどうするか話題に上がりました。所謂ルーティングパスを定数化するかどうか的な話です。そこで、定数化するのではなく型推論で解決するアプローチを取ってみました。
取り組んだことは以下の2点です。

直感的かつフレームワークの詳細を気にしないルーティング定義を可能にする
aタグの薄いラッパーコンポーネントを用意し、型の制約を設ける

1に取り組んだ理由は型推論（実質型パズル）を頑張ることを考えた時にうまいこと定数...]]></description><link>https://zenn.dev/rinrin_yuuki/articles/3c91a43b50fc87</link><guid isPermaLink="true">https://zenn.dev/rinrin_yuuki/articles/3c91a43b50fc87</guid><pubDate>Sun, 24 Aug 2025 13:13:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tWbpRWZP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Router%25C3%2597TypeScript%25E3%2581%25A7%25E5%2586%2585%25E9%2583%25A8%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%2592%25E5%259E%258B%25E3%2581%25A7%25E5%2588%25B6%25E9%2599%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuuki.h%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxZThjOWI3NWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuuki.h</dc:creator></item><item><title><![CDATA[deno で WebTransport(unstable) を触ってみた記事がなかったので自分でやってみた]]></title><description><![CDATA[Zenn の記事は途中で GitHub 連携したんですが、 vscode を開いてコミットしないといけないのがめんどすぎたので連携を解除して今ブラウザでこの記事を書いています。
最近仕事が忙しすぎてめっきり記事を書いていなかったんですが、ここ数週間 deno に目覚めて色々使っているので備忘録の一つとしておいておきます。

 WebTransport?
普及率もかなり上がり一般的になってきた HTTP/3(QUIC) で、 UDP 通信を軸として双方向の通信を行える Web API です。
ブラウザ側の実装は(Safari は 26 以降かな...)比較的 stable になってきたんで...]]></description><link>https://zenn.dev/yamayuski/articles/48e829862ff48f</link><guid isPermaLink="true">https://zenn.dev/yamayuski/articles/48e829862ff48f</guid><pubDate>Sun, 24 Aug 2025 09:40:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dcagLhZT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:deno%2520%25E3%2581%25A7%2520WebTransport%2528unstable%2529%2520%25E3%2582%2592%25E8%25A7%25A6%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E8%25A8%2598%25E4%25BA%258B%25E3%2581%258C%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2584%25E3%2581%25BE%25E3%2582%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5NjI1OTZlMTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>やまゆ</dc:creator></item><item><title><![CDATA[C# × WASM化を使用してVS Code の拡張機能を作りたい(VS Code for Web)]]></title><description><![CDATA[!
本記事は以前に作成した以下記事の続き、類似にあたる記事です。ところどころで同じ内容を記載してますが、都度リンクを踏んでいただくのは読みづらいかと思うので、ほとんど一式を記述しています。以前の記事を読んだことがあるよ、という人は適宜読み飛ばしながら進んでいただけると幸いです。

C# × WASM化を使用してVS Code の拡張機能を作りたい(VS Code ローカル)




 はじめに
以前の記事では、VS Codeローカルの拡張機能をC#(.NET)で作ったWASMを使用して作成しました。
今回は、念願のVS Code for Web用の簡単なweb拡張機能をC#(.NET) ...]]></description><link>https://zenn.dev/srtia2318/articles/organize-info10-vscode-ex-wasm-f408da65b14e2f</link><guid isPermaLink="true">https://zenn.dev/srtia2318/articles/organize-info10-vscode-ex-wasm-f408da65b14e2f</guid><pubDate>Sun, 24 Aug 2025 09:33:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jEs5Orbm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:C%2523%2520%25C3%2597%2520WASM%25E5%258C%2596%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6VS%2520Code%2520%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%2528VS%2520Code%2520for%2520Web%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmOGRiNWI5MGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomo</dc:creator></item><item><title><![CDATA[Telegram Mini Apps の React SDK を v3 に上げたらフルスクリーンが効かなくなって困った]]></title><description><![CDATA[
 前提

Teregram Mini Apps環境
「リッチメッセージ／リッチシェア」 は Telegram Bot API の savePreparedInlineMessage を指す
記載の不具合は2025/06/30時点の観測結果で、以降のアップデートで解消されている場合がある


 起きたこと
v3 のリッチシェアを使うためにReact SDK を v2→v3 にアップグレードした。
目的だったリッチシェアは React SDK v3 で利用できた。
しかし、v2で機能していたフルスクリーンがv3では機能しなくなった。
フルスクリーンモード
Doc：https://docs....]]></description><link>https://zenn.dev/konpay/articles/2187b1b1f2904a</link><guid isPermaLink="true">https://zenn.dev/konpay/articles/2187b1b1f2904a</guid><pubDate>Sun, 24 Aug 2025 07:07:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gbrT3Ebz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Telegram%2520Mini%2520Apps%2520%25E3%2581%25AE%2520React%2520SDK%2520%25E3%2582%2592%2520v3%2520%25E3%2581%25AB%25E4%25B8%258A%25E3%2581%2592%25E3%2581%259F%25E3%2582%2589%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%258C%25E5%258A%25B9%25E3%2581%258B%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%25A6%25E5%259B%25B0%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:konpay%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5YWRlYjAwYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>konpay</dc:creator></item><item><title><![CDATA[openapi-codegenにuseTypeImportsのオプションを追加した]]></title><description><![CDATA[
 はじめに
openapi-codegenは、OpenAPIのスキーマファイルからクライアントやサーバーのコードを自動生成するためのツールです。
https://github.com/fabien0102/openapi-codegen
今回、useTypeImportsというオプションを追加しました。どんなオプションなのか？なぜこのオプションを追加したのか？簡単に変更内容やその背景について紹介します。以下PRになります。
https://github.com/fabien0102/openapi-codegen/pull/314
!
こちらのmainブランチにはマージされましたが、リ...]]></description><link>https://zenn.dev/watahaya/articles/30f695424231e5</link><guid isPermaLink="true">https://zenn.dev/watahaya/articles/30f695424231e5</guid><pubDate>Sun, 24 Aug 2025 05:22:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iQfdUXo_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:openapi-codegen%25E3%2581%25ABuseTypeImports%25E3%2581%25AE%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Isco%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y2MDllZGQ4M2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Isco</dc:creator></item></channel></rss>