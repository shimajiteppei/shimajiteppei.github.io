<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 14 Mar 2025 02:39:35 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[# fullPage.jsでスクロールを遅延させ、アニメーションが完了するまで待機する方法]]></title><description><![CDATA[
 はじめに
fullPage.jsのアニメーションを遅らせ、アニメーションが完了した後にスクロールを実行したい場合は、beforeLeave コールバックを使用できます。
このコールバックで false を返すと、スクロールは実行されません。
この機能を利用して、コールバック内に独自のロジックを追加し、スクロールをトリガーするタイミングを制御できます。

 JavaScript コード
次のコード例では、4回スクロールしないと次のセクションへスクロールできないように設定しています。
var cont = 0;
new fullpage('#fullpage', {
    before...]]></description><link>https://zenn.dev/alvarotrigo/articles/dc64f04519c683</link><guid isPermaLink="true">https://zenn.dev/alvarotrigo/articles/dc64f04519c683</guid><pubDate>Thu, 13 Mar 2025 15:46:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1pKSTb-I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523%2520fullPage.js%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E9%2581%2585%25E5%25BB%25B6%25E3%2581%2595%25E3%2581%259B%25E3%2580%2581%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%258C%25E5%25AE%258C%25E4%25BA%2586%25E3%2581%2599%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E5%25BE%2585%25E6%25A9%259F%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Alvaro%2520Trigo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzZTc5MDBkNTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Alvaro Trigo</dc:creator></item><item><title><![CDATA[【初心者向け】for文とwhile文の使い分け完全ガイド]]></title><description><![CDATA[プログラミングにおいて、同じ処理を繰り返し実行する「ループ処理」は非常に重要な要素です。この記事では、主なループ文であるfor文とwhile文の違いや、それぞれの特徴、適切な使い分けについて詳しく解説します。

 ループ処理とは？
ループ処理とは、特定の条件が満たされる間、同じ処理を繰り返し実行することです。例えば：

配列の全要素に対して同じ処理を行う
ユーザーが正しい入力をするまで質問を繰り返す
ファイルの終わりまでデータを読み込む

このような処理を、一行ずつ書くのではなく、ループを使って効率的に実現します。

 for文の基本

 基本構文
for (初期化; 条件式; 更新式)...]]></description><link>https://zenn.dev/homatsu_tech/articles/53b6ebc476901e</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/53b6ebc476901e</guid><pubDate>Thu, 13 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HJzklsN2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591for%25E6%2596%2587%25E3%2581%25A8while%25E6%2596%2587%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習 [JavaScript] JSONの定義と役割]]></title><description><![CDATA[JSONとは？
JSON(JavaScript Object Notation)は、データを保存して転送するための軽量データ形式である。
テキストベースのキー-値(Key-Value)構造を持ち、人間が読みやすく、機械が処理しやすい
やさしいデータ形式で設計されている。
JSONはプログラミング言語に独立しているため、Java、Python、JavaScript、C++など様々な言語で使用できる。
JSON(JavaScript Object Notation)의 役割。
主にウェブ開発及びAPI通信でデータ交換形式として使用される。
サーバーとクライアント間のデータ交換(RESTAPI...]]></description><link>https://zenn.dev/shubbydobob/articles/8ed819e7f5e148</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/8ed819e7f5e148</guid><pubDate>Thu, 13 Mar 2025 07:52:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CXB6F9o8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJavaScript%255D%2520JSON%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8%25E5%25BD%25B9%25E5%2589%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[Node.js Crypto モジュールと CryptoJS による暗号化・復号化]]></title><description><![CDATA[
 モジュールやライブラリの整理

 Crypto モジュール
まず Crytpo モジュールというのは Node.js に付属するもので、最新のブラウザでもこの crypto モジュールは導入されているらしい。

The node:crypto module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.
https://nodejs.org/api/cr...]]></description><link>https://zenn.dev/maztak/articles/c3333799f25d41</link><guid isPermaLink="true">https://zenn.dev/maztak/articles/c3333799f25d41</guid><pubDate>Thu, 13 Mar 2025 01:40:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1QwveH-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520Crypto%2520%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A8%2520CryptoJS%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E6%259A%2597%25E5%258F%25B7%25E5%258C%2596%25E3%2583%25BB%25E5%25BE%25A9%25E5%258F%25B7%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhNzEwZjYwZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まった</dc:creator></item><item><title><![CDATA[【第二回】discord.jsでbot制作。コマンド制作と登録]]></title><description><![CDATA[
 discord.js botのコマンドファイルの制作と登録

 コマンドはファイルを書くだけじゃダメという話
本稿ではスラッシュコマンドファイルの中身、そしてそれを使うためのメインファイル（本シリーズではindex.jsとする）、そしてスラッシュコマンドをdeploy-commands.jsを使って登録するという流れまで紹介します。ざーっと流していくので、色んなバリエーションを確認したい人は公式を読むようにしてください。マジで基本的な情報なので、この辺りはチュートリアル見てやった方が早いっす。
DIsocodのbotと言えば、やっぱりコマンド。開発的にはスラッシュコマンドと呼んでいま...]]></description><link>https://zenn.dev/semapho/articles/063582c32eff32</link><guid isPermaLink="true">https://zenn.dev/semapho/articles/063582c32eff32</guid><pubDate>Wed, 12 Mar 2025 16:58:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--93exIuXw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E7%25AC%25AC%25E4%25BA%258C%25E5%259B%259E%25E3%2580%2591discord.js%25E3%2581%25A7bot%25E5%2588%25B6%25E4%25BD%259C%25E3%2580%2582%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E5%2588%25B6%25E4%25BD%259C%25E3%2581%25A8%25E7%2599%25BB%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Semapho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyczI5dzNqTHdyaG41VTIwa05CVy1UcC04X1d6UFNJRS1nNmVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Semapho</dc:creator></item><item><title><![CDATA[Invoker Commands APIのイベントのまとめ]]></title><description><![CDATA[&lt;dialog&gt;、Popover、Invoker CommandsがHTML標準で整いつつあります。JavaScriptを書かずにHTMLだけでインタラクティブなUIを作ることができるようになっていっているわけですが、それでもイベントをフックして何かしらの処理を実行したいことはあります。これらのUIのイベントはいくつか種類があるので、それぞれのUIや呼び出し方法に対応するイベントをまとめてみました。

 前提

 &lt;dialog&gt;

&lt;dialog&gt;はHTML標準のダイアログUIです。このダイアログUIはモードレスダイアログとモーダルダイアログの2つの...]]></description><link>https://zenn.dev/yusukehirao/articles/event-of-invoker-commands</link><guid isPermaLink="true">https://zenn.dev/yusukehirao/articles/event-of-invoker-commands</guid><pubDate>Wed, 12 Mar 2025 16:25:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ae2vIVmH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Invoker%2520Commands%2520API%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%2586%25E3%2581%25A6%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kyUjJhZW0zYXB3MjFneHFmUGJGSlpDaG1ndEs2aG9jS0VNbV9JT3c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆうてん</dc:creator></item><item><title><![CDATA[JavaScript Arrayを使う]]></title><description><![CDATA[Next.js/Reactでは配列をよく使うことがあります。配列（Array）とは値が複数格納されたものです。文字だったり数字が入ってます。

MDNや分厚い専門書を読むことがあるのですがよくある書き方や仕事で使ったことがある書き方を本にして見たいなと思いました。検索とか配列の操作だとfilterやforEachを使うぐらいなのですが。

参考までに見てください。
著者: JboyHashimoto
]]></description><link>https://zenn.dev/joo_hashi/books/a0c26f9c5f6641</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/books/a0c26f9c5f6641</guid><pubDate>Wed, 12 Mar 2025 13:28:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tLIUNNed--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9hYWZhMzcyNzgyLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[【入門】条件分岐(if文)を理解してロジックを組み立てよう]]></title><description><![CDATA[プログラミングにおいて、条件に応じて処理を変えることは非常に重要です。この記事では、条件分岐の基本となるif文について、初心者にもわかりやすく解説します。

 if文とは？
if文は、「もし〜なら、これをする」という条件分岐を実現するための構文です。日常生活でも私たちは常に条件分岐を行っています：

もし雨が降っているなら、傘を持っていく
もし財布を忘れたなら、家に取りに戻る
もし電車が遅れているなら、別のルートを検討する

これらと同じように、プログラムでも状況に応じて異なる処理を行いたい場合にif文を使用します。

 if文の基本構文
JavaScriptを例に、if文の基本的な書き...]]></description><link>https://zenn.dev/homatsu_tech/articles/4a333c495c3939</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/4a333c495c3939</guid><pubDate>Wed, 12 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LG3YRnKE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2591%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%2528if%25E6%2596%2587%2529%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E7%25B5%2584%25E3%2581%25BF%25E7%25AB%258B%25E3%2581%25A6%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[クロージャーとReactのuseState・useRefについて]]></title><description><![CDATA[
 1. クロージャーとは？
まず、クロージャー（Closure） とは何かを簡単に説明します。
クロージャーとは、関数が外部のスコープ（関数の外側）にある変数を保持し続ける仕組み のことを指します。JavaScriptでは、関数内で外部スコープの変数を参照すると、その関数が閉じ込めた状態で変数を保持するため、関数の外側で変数が変わっても関数の内側では古い値が使われることがあります。

 クロージャーの例

function createCounter() {
  let count = 0;
  return function () {
    count += 1;
    cons...]]></description><link>https://zenn.dev/koheiwww/articles/72a2ee94256156</link><guid isPermaLink="true">https://zenn.dev/koheiwww/articles/72a2ee94256156</guid><pubDate>Wed, 12 Mar 2025 07:57:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C5qg7wmb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%25E3%2581%25A8React%25E3%2581%25AEuseState%25E3%2583%25BBuseRef%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B7%25A5%25E5%2585%25B5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5MGFjOTAxMzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>工兵</dc:creator></item><item><title><![CDATA[npmについての最低限知識]]></title><description><![CDATA[
 npmとは
Node Package Managerというパッケージマネージャー

 パッケージマネージャーとは？
ソフトウェア開発において必要な「部品」（ライブラリやフレームワークなど）を探して、インストールし、更新し、管理するためのツール。
パッケージマネージャーがなければ、必要なコードを自分で探してダウンロードし、正しい場所に配置し、バージョンを確認し、更新を手動で行う必要がある。
パッケージマネージャーはこれらの作業を自動化して、開発者がコードの作成に集中できるようにしてくれる。

 主な役割

 パッケージのインストール:
必要なコードをインターネットから自動的に探してダウ...]]></description><link>https://zenn.dev/gdf_takahashi/articles/d99de7ee4ed0dc</link><guid isPermaLink="true">https://zenn.dev/gdf_takahashi/articles/d99de7ee4ed0dc</guid><pubDate>Wed, 12 Mar 2025 05:18:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iD2J3kvn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:npm%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E6%259C%2580%25E4%25BD%258E%25E9%2599%2590%25E7%259F%25A5%25E8%25AD%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25AB%2598%25E6%25A9%258B%2520%25E9%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS1FoMHB4MkdnWXBCSXJKS2VVT0lwb0VPTS03N2stSUpWaGk2TWJncTYzbE1TbUt0bz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>高橋 遼</dc:creator></item><item><title><![CDATA[(備忘録) 奇数判定大喜利]]></title><description><![CDATA[
 たこたこたこたこ たこいかぱにっく！
「たこ」と言ったらたこ叩く！

 元凶(^ρ^)
https://x.com/fumokmm/status/1898690910013255750
https://x.com/fumokmm/status/1898695858859737496
https://x.com/arith_rose/status/1899300131658510802

 Let's お大喜利スクリプト


 ① 余算の無駄遣い (条件分岐を回避)

function isOdd(num) {
    return [false, true][num % 2];
}
...]]></description><link>https://zenn.dev/libraplanet/articles/0ced64f806fdb0</link><guid isPermaLink="true">https://zenn.dev/libraplanet/articles/0ced64f806fdb0</guid><pubDate>Tue, 11 Mar 2025 16:14:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ry8DOk1g--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2528%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2529%2520%25E5%25A5%2587%25E6%2595%25B0%25E5%2588%25A4%25E5%25AE%259A%25E5%25A4%25A7%25E5%2596%259C%25E5%2588%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5ZjRkNTRiODQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi</dc:creator></item><item><title><![CDATA[Astroで作るブログの仕組み]]></title><description><![CDATA[
 Astroでつくるブログの仕組み解説

 はじめに
こんにちは、坂爪です。この記事ではAstroを使ったブログシステムの基本的な仕組みについて解説します。Astroの特徴からディレクトリ構成、そして実際の実装方法まで、順を追って説明していきます。

 前提条件
この記事を理解するためには、以下の知識が必要です：

基礎的なWEBの仕組みやJavaScriptの理解


 Astroとは

Astroは、ブログやマーケティング、eコマースなど、コンテンツ駆動のウェブサイトを作成するためのウェブフレームワークです。Astroは、新しいフロントエンドアーキテクチャを開拓し、他のフレームワー...]]></description><link>https://zenn.dev/dume5579/articles/6ee7ee1e6b1231</link><guid isPermaLink="true">https://zenn.dev/dume5579/articles/6ee7ee1e6b1231</guid><pubDate>Tue, 11 Mar 2025 16:02:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Pb2ioK5Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Astro%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%259D%2582%25E7%2588%25AA%2520%25E8%25AA%25A0%25E4%25BA%25BA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA0Y2U4MmU3OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>坂爪 誠人</dc:creator></item><item><title><![CDATA[【第一回】discord.jsでbotを作る方法【基礎編】]]></title><description><![CDATA[
 discord.jsでDiscordのbotを作る（第一回）
基礎編です。気まぐれ更新なのでやる気がなくなれば途中で沈没するDisocrdのボット開発記事です。

 本シリーズでやること
この開発記事シリーズは基本備忘録的な感じです（備忘録ってなに？）。
基本的にはdiscord.js Guideに従って、ある程度までコマンドの基礎の解説あたりまで進めていきます。その後は筆者の個人開発の記録として綴っていきますが、いずれにせよここがスタート地点。ここがわからん場合はJSの基礎などをやると良き。筆者も基礎は分かってないけど。

 フォルダの作成とインストールをザーッと
とりあえず、テキ...]]></description><link>https://zenn.dev/semapho/articles/aaf90c395f6316</link><guid isPermaLink="true">https://zenn.dev/semapho/articles/aaf90c395f6316</guid><pubDate>Tue, 11 Mar 2025 16:00:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DfZLAKdo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E7%25AC%25AC%25E4%25B8%2580%25E5%259B%259E%25E3%2580%2591discord.js%25E3%2581%25A7bot%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2580%2590%25E5%259F%25BA%25E7%25A4%258E%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Semapho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyczI5dzNqTHdyaG41VTIwa05CVy1UcC04X1d6UFNJRS1nNmVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Semapho</dc:creator></item><item><title><![CDATA[JavaScript Objectを使う]]></title><description><![CDATA[Next.js/Reactを使っているときによく使う構文で、Objectがあります。分厚い本やMDNを見て学習することがあるのですが毎回検索しにいくのは大変です。

仕事でもよく使っていた構文の使い方を解説した本を書いてみることにしました。最近は初心者でもTypeScriptから勉強したほうがいいというが、JavaScriptで変数、配列、オブジェクト、　DOM操作を学んでから出ないと理解できないことがあるので、私はお勧めしてないです。

ちなみに私は、Node.jsでCloud Functionsを使うことが多かったのですが、Objectはよく使っていましたね。

使い方は多く存在するので、参考程度にみてください。
著者: JboyHashimoto]]></description><link>https://zenn.dev/joo_hashi/books/4c1e890ac259bb</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/books/4c1e890ac259bb</guid><pubDate>Tue, 11 Mar 2025 14:58:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FgAvwV2A--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9mYmRhNmRjYzZjLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[『RPGツクールMZ』のステータス表示周り]]></title><description><![CDATA[『RPGツクールMZ』関連記事 目次
『RPGツクールMZ』のステータス表示周りを調べてみました。
いわゆるHUD(Headup Display)と呼ばれる、HPなどの各種ゲージが並んでいる部分ですね。
個人的にはHUDは戦闘機のコクピットにあるやつ以外だと強い違和感があるのですが、もうゲーム制作界隈では標準的な用語になっているので、郷にいればの精神でやっていこうと思います。
関連記事としては、次のようなものがあります。

『RPGツクールMZ』のウィンドウ内容を調べてみた
『RPGツクールMZ』のウィンドウ文字表示を調べてみた
『RPGツクールMZ』文字表示関連のメソッド一覧

例によ...]]></description><link>https://zenn.dev/tonbi/articles/7b3a8c58812b48</link><guid isPermaLink="true">https://zenn.dev/tonbi/articles/7b3a8c58812b48</guid><pubDate>Tue, 11 Mar 2025 13:48:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NX3N9oXU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258ERPG%25E3%2583%2584%25E3%2582%25AF%25E3%2583%25BC%25E3%2583%25ABMZ%25E3%2580%258F%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B9%25E8%25A1%25A8%25E7%25A4%25BA%25E5%2591%25A8%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2582%2593%25E3%2581%25B3%2540%25E9%25B3%25B6%25E5%25B6%258B%25E5%25B7%25A5%25E6%2588%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pBYl9FRlAtZm9RQU1pN1VoM3hzYkNyQXZUSTZjUDFkZGJJMWJrPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>とんび@鳶嶋工房</dc:creator></item><item><title><![CDATA[「エラー発生時の状況を楽に正確に再現」Sentry Session Replayを活用する]]></title><description><![CDATA[
 導入の背景
フロントエンドのエラー発生時「状況再現」にに困ること、しばしばないでしょうか？
「Sentryにエラーが来た。エラーの内容はわかるが、これどういう経緯で発生したんだ、、？？」
という調査に時間がかかることが多く、なんとかしたいなと考えていました。
このような「エラー発生時の状況再現」に非常に便利なのがSentry Session Replay（以後Session Replay）です。
Session Replay導入の結果「状況再現」が精度良く、かつ迅速に行えるようになり、エラーの修正が非常に楽になりました。
ただ導入前は「具体的にどういうことができるんだ？」というイメー...]]></description><link>https://zenn.dev/kataokatsuki/articles/26d5f316f598f7</link><guid isPermaLink="true">https://zenn.dev/kataokatsuki/articles/26d5f316f598f7</guid><pubDate>Tue, 11 Mar 2025 12:48:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xdcoBQzq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E7%2599%25BA%25E7%2594%259F%25E6%2599%2582%25E3%2581%25AE%25E7%258A%25B6%25E6%25B3%2581%25E3%2582%2592%25E6%25A5%25BD%25E3%2581%25AB%25E6%25AD%25A3%25E7%25A2%25BA%25E3%2581%25AB%25E5%2586%258D%25E7%258F%25BE%25E3%2580%258DSentry%2520Session%2520Replay%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kataoka%2520Katsuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2plaEl4V2xYM3ctckJQMDNMUDVna0s2NDN3MVJBZTl6TW1LcWxnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kataoka Katsuki</dc:creator></item><item><title><![CDATA[【基礎から学ぶ】関数の作り方と使い方を徹底解説]]></title><description><![CDATA[プログラミングにおいて、関数は最も重要な基本要素の1つです。コードの再利用性を高め、プログラムを整理するために不可欠な存在です。この記事では、関数の基本的な概念から実践的な使い方まで、初心者にもわかりやすく解説します。

 関数とは？
関数は、特定の処理をまとめた「部品」のようなものです。一度作った関数は、必要なときに何度でも使うことができます。

 関数を使うメリット


コードの再利用

同じ処理を何度も書く必要がない
変更が必要な場合も1箇所を修正するだけでよい



プログラムの整理

処理をわかりやすい単位に分割できる
コードの見通しが良くなる



保守性の向上

バグの修正...]]></description><link>https://zenn.dev/homatsu_tech/articles/73895938c878a8</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/73895938c878a8</guid><pubDate>Tue, 11 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UVkv04w4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%259F%25BA%25E7%25A4%258E%25E3%2581%258B%25E3%2582%2589%25E5%25AD%25A6%25E3%2581%25B6%25E3%2580%2591%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2582%2592%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[静的なホームページで動的なお知らせ情報を表示する]]></title><description><![CDATA[静的な Web サイトでも動的なコンテンツを表示したいということがあるかもしれません。
今回はタイトルの通り「ホームページにお知らせ情報を表示する」というケースを例に、その方法を一つ実際のコードと合わせて紹介したいと思います。
※サンプルのホームページはこちらから確認できます。

 概要
今回紹介するのはお知らせを Google スプレッドシートで管理し、JS でそのスプレッドシートを取得するという方法になります。
上記のサンプルホームページや以下に記載するコード例ではこちらのスプレッドシートを参照しています。(このスプレッドシートではアクセス権の設定で「リンクを知っている人全員」を「閲...]]></description><link>https://zenn.dev/guitarinchen/articles/493ac2f501bfee</link><guid isPermaLink="true">https://zenn.dev/guitarinchen/articles/493ac2f501bfee</guid><pubDate>Tue, 11 Mar 2025 09:08:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tqd8XMsh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%2599%25E7%259A%2584%25E3%2581%25AA%25E3%2583%259B%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AA%25E3%2581%258A%25E7%259F%25A5%25E3%2582%2589%25E3%2581%259B%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:guitarinchen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyMjdmMGEzNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>guitarinchen</dc:creator></item><item><title><![CDATA[Honoでcurlコマンドを使うときのエラー]]></title><description><![CDATA[
 発生した経緯
HonoでAPI開発中、作成したリクエストをVScodeのターミナル上でリクエストを送ったところ、エラーが発生した。
API（デフォルトで記載されているもの）
app.get("/", (c) =&gt; {
  return c.text("Hello Hono!");
});
コマンド
curl -X GET http://localhost:3000
エラー
Invoke-WebRequest : パラメーター名 'X' に一致するパラメーターが見つかりません。

 考えられる原因
curl コマンドが Invoke-WebRequest として解釈されるのは、W...]]></description><link>https://zenn.dev/ashunar0/articles/f0f4f406d49952</link><guid isPermaLink="true">https://zenn.dev/ashunar0/articles/f0f4f406d49952</guid><pubDate>Tue, 11 Mar 2025 08:18:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--44-SpoAc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%25E3%2581%25A7curl%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%2599%25E3%2581%25AA%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlVJSTJuOHVoRXhKNjdHbGllMWo4M2VyVUJDeDJPS09TVnBtaHhjdmFYVjA4T1Z1c209czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あすなろ</dc:creator></item><item><title><![CDATA[Goで学ぶWebSocket：[JWT認証 & 負荷分散設計]]]></title><description><![CDATA[
 はじめに
前回の記事では、WebSocketを活用した通知システム、Redisを使ったWebSocketサーバーの構築方法を解説しました。
今回はさらに発展させて、JWT認証を組み込んだWebSocket実装と 負荷分散を考慮した設計について解説します。
対象読者

WebSocketに認証を組み込みたい方
負荷の高いWebSocketアプリを効率的にスケールアウトしたい方
セキュアなリアルタイム通信を実現したい方

目次

JWT認証を組み込んだセキュアなWebSocketの実装

JWT認証とは？
GoでのJWT認証の実装
WebSocketへのJWT認証の適用


負荷分散を考...]]></description><link>https://zenn.dev/urabexon/articles/13f981020eefc5</link><guid isPermaLink="true">https://zenn.dev/urabexon/articles/13f981020eefc5</guid><pubDate>Tue, 11 Mar 2025 05:06:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YTly41Nx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6WebSocket%25EF%25BC%259A%255BJWT%25E8%25AA%258D%25E8%25A8%25BC%2520%2526%2520%25E8%25B2%25A0%25E8%258D%25B7%25E5%2588%2586%25E6%2595%25A3%25E8%25A8%25AD%25E8%25A8%2588%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroki%2520Urabe%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4NmEwZTdkZjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroki Urabe</dc:creator></item></channel></rss>