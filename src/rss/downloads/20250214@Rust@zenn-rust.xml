<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 14 Feb 2025 10:05:10 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[快適なRust開発体験を求めて - マシンパワー盛り盛り編]]></title><description><![CDATA[Rustの開発を快適にするためにRyzen 9 9950Xを導入し、1週間ほど経過した。
乗り換え前に使っていたM3 Max MacBook Proと比較しての現時点での感想をまとめておく。

 動機
乗り換えの最大の動機はモンスターハンターワイルズをプレイするためにWindowsマシンが必要だったから仕事で書いているRustプロジェクトの開発体験が悪く、集中力を持続させながら開発を行うことが難しいと感じていたため。
具体的には、ある場所で型エラーが出ているとき、「.into()差し込めば直るかな～」といったお祈り修正をすることがあるのだが、ここで変更後に保存して、rust-analyz...]]></description><link>https://zenn.dev/magurotuna/articles/ryzen9-9950x</link><guid isPermaLink="true">https://zenn.dev/magurotuna/articles/ryzen9-9950x</guid><pubDate>Fri, 14 Feb 2025 10:03:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sfqt1wm---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25BF%25AB%25E9%2581%25A9%25E3%2581%25AARust%25E9%2596%258B%25E7%2599%25BA%25E4%25BD%2593%25E9%25A8%2593%25E3%2582%2592%25E6%25B1%2582%25E3%2582%2581%25E3%2581%25A6%2520-%2520%25E3%2583%259E%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2591%25E3%2583%25AF%25E3%2583%25BC%25E7%259B%259B%25E3%2582%258A%25E7%259B%259B%25E3%2582%258A%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:magurotuna%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNUGF0cWN1MUh1d1dEcG5uVzRETFVxZlI5aDlOM1NFc3FmaWdYZkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>magurotuna</dc:creator></item><item><title><![CDATA[Rust で預言を使ったプログラム検証器を自作しよう 3/3]]></title><description><![CDATA[Rust で預言を使ったプログラム検証器を自作しようブログの第3回になります。
読む前に第1回]、第2回の内容を読んでいただけると幸いです。
各回のリンク

第1回: Rust で預言を使ったプログラム検証器を自作しよう 1/3

第2回: Rust で預言を使ったプログラム検証器を自作しよう 2/3

第3回: Rust で預言を使ったプログラム検証器を自作しよう 3/3



 この記事の目的
私たちは、第1回、第2回を通して検証器に "変数の宣言"、"アサイン"、"外部関数の呼び出し"、"ユーザ定義関数の呼び出し"、"関数の戻り値"、"If"、"If のアサイン" をサポートさせて...]]></description><link>https://zenn.dev/isan_ethen/articles/3409d4796c9a23</link><guid isPermaLink="true">https://zenn.dev/isan_ethen/articles/3409d4796c9a23</guid><pubDate>Thu, 13 Feb 2025 05:34:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--woa8i_Y3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E9%25A0%2590%25E8%25A8%2580%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E6%25A4%259C%25E8%25A8%25BC%25E5%2599%25A8%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25203%252F3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:isan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlNTUwZGVlYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>isan</dc:creator></item><item><title><![CDATA[Rust で預言を使ったプログラム検証器を自作しよう 2/3]]></title><description><![CDATA[Rust で預言を使ったプログラム検証器を自作しようブログの第2回になります。
読む前に第1回の内容を読んでいただけると幸いです。
各回のリンク

第1回: Rust で預言を使ったプログラム検証器を自作しよう 1/3

第2回: Rust で預言を使ったプログラム検証器を自作しよう 2/3

第3回: Rust で預言を使ったプログラム検証器を自作しよう 3/3



 この記事の目的
この回は、第1回で作成した一言語機能のみサポートした検証器に機能を追加することを目的としています。
前回の実装で、検証器は、"変数の宣言"、"アサイン"、"外部関数の呼び出し"、言語機能をサポートしてい...]]></description><link>https://zenn.dev/isan_ethen/articles/ec7177040a8515</link><guid isPermaLink="true">https://zenn.dev/isan_ethen/articles/ec7177040a8515</guid><pubDate>Thu, 13 Feb 2025 05:34:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7CrFErA7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E9%25A0%2590%25E8%25A8%2580%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E6%25A4%259C%25E8%25A8%25BC%25E5%2599%25A8%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25202%252F3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:isan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlNTUwZGVlYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>isan</dc:creator></item><item><title><![CDATA[Rust で預言を使ったプログラム検証器を自作しよう 1/3]]></title><description><![CDATA[この記事は筆者がセキュリティ・キャンプ全国大会 2024 にて作成したプログラム検証器を元に作成しました。
記事は全部で3回まであります。
各回へはこちらからどうぞ。
各回のリンク

第1回: Rust で預言を使ったプログラム検証器を自作しよう 1/3

第2回: Rust で預言を使ったプログラム検証器を自作しよう 2/3

第3回: Rust で預言を使ったプログラム検証器を自作しよう 3/3



 この記事の目的
この記事は、プログラム検証器自作に関する情報が少なすぎる現状を改善し、初学者がより楽に基本的な機能を持つ検証器を完成させ、より早く各々がサポートしたい機能の追加のフェ...]]></description><link>https://zenn.dev/isan_ethen/articles/bb0316c17897ea</link><guid isPermaLink="true">https://zenn.dev/isan_ethen/articles/bb0316c17897ea</guid><pubDate>Thu, 13 Feb 2025 05:34:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q8P9Ps_8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E9%25A0%2590%25E8%25A8%2580%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E6%25A4%259C%25E8%25A8%25BC%25E5%2599%25A8%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25201%252F3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:isan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlNTUwZGVlYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>isan</dc:creator></item><item><title><![CDATA[azik_generatorを更新した]]></title><description><![CDATA[
 azik_generatorを更新した
hにennなどのシーケンスを割り当てていると、shでのしゃ行の打鍵をする際にはazik_generatorで生成されたテーブルの編集が必要でしたが。
編集が不要に……はなりませんが、若干楽になりました。

 具体的な変化
hにennを割り当てている状況下で以下のようになるようになった
変更前
sha	しゃ
変更後
せんa	しゃ
ただし、変更前のものが消えるわけではない。
何か消そうと思って色々ガチャガチャやってたけど、一切狙い通りにならなかったので。
悲しい、取り敢えず後回しにしてCorvusSKK用の物も出力できるようにしたい

 生成物に施...]]></description><link>https://zenn.dev/maki10645/articles/de35908f406000</link><guid isPermaLink="true">https://zenn.dev/maki10645/articles/de35908f406000</guid><pubDate>Thu, 13 Feb 2025 04:43:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6efXBkd7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:azik_generator%25E3%2582%2592%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVdVSlFjSU9wbWhyR2N5T0VPeXVXZnBsbDZscGdWTVpwcHRXTFdYRmxhZzNzbTNVZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まき</dc:creator></item><item><title><![CDATA[Rustでつくる仮想CPU]]></title><description><![CDATA[本書では、Intel x86-64を前提に、アセンブリ言語やCPUの基本を学びながら、Rustを用いてスクラッチから簡易的な仮想CPUを設計・実装します。仮想CPUとは、ソフトウェア上に実装されたCPUのことであり、マシン命令のフェッチ・デコード・実行をはじめ、レジスタや内部状態の管理など、CPUのコアとなる機能を実装します。]]></description><link>https://zenn.dev/kkent030315/books/ac3bea5f1434f5</link><guid isPermaLink="true">https://zenn.dev/kkent030315/books/ac3bea5f1434f5</guid><pubDate>Thu, 13 Feb 2025 00:18:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JYi12AnV--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci82ODI0YjNhZmJiLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>kkent030315</dc:creator></item><item><title><![CDATA[RustのAtomicUsize]]></title><description><![CDATA[
 AtomicUsizeとは
https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html
AtomicUsizeは、複数のスレッド間で安全に共有できる整数型（usize）をラップした構造体です。
通常の変数はスレッド間で同時に読み書きするとデータ競合が起こる可能性がありますが、AtomicUsizeはアトミック操作を用いることで、こうした競合を防ぎます。

 使い方

 値の書き込み(store)
use std::sync::atomic::{AtomicUsize, Ordering};

let atomic...]]></description><link>https://zenn.dev/hakoten/articles/f8c6cbcf20e74c</link><guid isPermaLink="true">https://zenn.dev/hakoten/articles/f8c6cbcf20e74c</guid><pubDate>Tue, 11 Feb 2025 05:10:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2JIG2Cj6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Rust%25E3%2581%25AEAtomicUsize%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hakotensan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNGM1MmE4MWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hakotensan</dc:creator></item><item><title><![CDATA[【Rust】配列の繰り返し処理の借用]]></title><description><![CDATA[
 はじめに
Rustで、以下のようなループ処理をするとどのような結果となるでしょうか？
結果は、println!("{:?}", numbers)で、エラーが発生します。
理由は、numbersのループ処理で所有権がnumberに移動するからです。
 fn main() {
  let mut numbers = Vec::new();
     numbers.push(1);
     numbers.push(2);
     numbers.push(3);
     
     for number in numbers {
         println!("{}", n...]]></description><link>https://zenn.dev/devtatsu/articles/04ea745f03ac3b</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/04ea745f03ac3b</guid><pubDate>Sun, 09 Feb 2025 10:46:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---A0GEXhk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AE%25E7%25B9%25B0%25E3%2582%258A%25E8%25BF%2594%25E3%2581%2597%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E5%2580%259F%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item><item><title><![CDATA[ABC392:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 392のA~F問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/ABC392/tasks/ABC392_a
解説
整数列 A を昇順に並び替えたとき、条件 A_1 \times A_2 = A_3 が成り立つかを判定します。
コード

abc392a.rs
use proconio::input;

fn main() {
    input!{
        mut a: [usize; 3],
    }   
    a.sort();
    
    pr...]]></description><link>https://zenn.dev/nakst_hide/articles/3d0b5e238487d5</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/3d0b5e238487d5</guid><pubDate>Sun, 09 Feb 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wRHQyNgM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC392%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Wikiリンクによるドキュメント記述静的サイトジェネレーター「Scraps」を作っている話]]></title><description><![CDATA[こんにちは。タイトルの通りOSSとして開発しているWikiリンクによるドキュメント記述静的サイトジェネレーター（以下、SSG）の紹介です。
!
Zennのスクラップ機能とは関連はありません

!
2024/02/10 追記
コメントでの議論を受け、「Wiki向け静的サイトジェネレーター」から「Wikiリンクによるドキュメント記述静的サイトジェネレーター」へ記載を変更しております


 Scrapsの概要
ScrapsはMarkdownファイル上で内部リンク（Wikiリンク）を容易にドキュメント記述できるSSGです。CLIによってMarkdownファイルを元に以下のような静的サイトのファイ...]]></description><link>https://zenn.dev/boykush/articles/0b13f54335dbb7</link><guid isPermaLink="true">https://zenn.dev/boykush/articles/0b13f54335dbb7</guid><pubDate>Sun, 09 Feb 2025 06:47:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b11ydqtY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Wiki%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E8%25A8%2598%25E8%25BF%25B0%25E9%259D%2599%25E7%259A%2584%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2580%258CScraps%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kush%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2ZTI1NWVlZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kush</dc:creator></item><item><title><![CDATA[Rustのブロックの返り値の式で借用するとエラーになることがある(2024Editionで解決予定)]]></title><description><![CDATA[
 これは何の記事？
先日week in rustを読んでいたところ、The Rust 2024 Edition takes shapeに気になる記述がありました。

The project is also fixing the order in which temporary expressions at the end of a block get cleaned up. Rust blocks have return values, which lets if statements be used as expressions, among other cases. But whe...]]></description><link>https://zenn.dev/hanao/articles/4c4f9d4adbc29d</link><guid isPermaLink="true">https://zenn.dev/hanao/articles/4c4f9d4adbc29d</guid><pubDate>Sun, 09 Feb 2025 06:14:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TiYTtijm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E8%25BF%2594%25E3%2582%258A%25E5%2580%25A4%25E3%2581%25AE%25E5%25BC%258F%25E3%2581%25A7%25E5%2580%259F%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%25282024Edition%25E3%2581%25A7%25E8%25A7%25A3%25E6%25B1%25BA%25E4%25BA%2588%25E5%25AE%259A%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2595%25E3%2583%25A9%25E3%2583%25AF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMGJhMzVlYjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>フラワー</dc:creator></item><item><title><![CDATA[【Rust】「Ownership？所有権？何それ・・・」を解決する]]></title><description><![CDATA[
 所有権(Ownership)とは？
Rustには「所有権（Ownership）」という仕組みがあります。これは、メモリ安全を保証しながらGCなしでリソース管理するためのものです。CやC++のように手動でメモリを解放するのではなく、所有権のルールに従うことで、安全なメモリ管理を実現できます。
この概念により、Rustではコンパイル時にメモリ管理の問題を防ぐことができます。
Rustでは、変数や関数の引数・戻り値がデータの所有者となるのが特徴です。
一方、多くの言語（例えばRuby）では、値は特定の変数に所有されず、自由にコピーできます。

 Rubyの例
Rubyでは、同じデータを複数...]]></description><link>https://zenn.dev/tsubasa_ryuto/articles/5ffa0e63f7e8f8</link><guid isPermaLink="true">https://zenn.dev/tsubasa_ryuto/articles/5ffa0e63f7e8f8</guid><pubDate>Sat, 08 Feb 2025 16:25:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oW75PpLM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2580%258COwnership%25EF%25BC%259F%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25EF%25BC%259F%25E4%25BD%2595%25E3%2581%259D%25E3%2582%258C%25E3%2583%25BB%25E3%2583%25BB%25E3%2583%25BB%25E3%2580%258D%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TsubasaRyuto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MzgwZDBlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TsubasaRyuto</dc:creator></item><item><title><![CDATA[[Rust] Ohkami の OpenAPI ドキュメント生成アプローチ]]></title><description><![CDATA[https://github.com/ohkami-rs/ohkami
Ohkami が v0.21 から提供している OpenAPI ドキュメント生成機能がマクロに頼らない独自のアプローチをとっているので紹介します。

 具体例
例として以下のコードを考えます。 README の openapi の例から OpenAPI 要素を抜いたもので、適当ユーザー API サーバーです。

main.rs
use ohkami::prelude::*;
use ohkami::typed::status;

#[derive(Deserialize)]
struct CreateUser&lt;...]]></description><link>https://zenn.dev/kanal/articles/ohkami-openapi-document-generation</link><guid isPermaLink="true">https://zenn.dev/kanal/articles/ohkami-openapi-document-generation</guid><pubDate>Sat, 08 Feb 2025 13:27:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qW6pqba8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Ohkami%2520%25E3%2581%25AE%2520OpenAPI%2520%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E7%2594%259F%25E6%2588%2590%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kanarus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0ZTQ5YjRjOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kanarus</dc:creator></item><item><title><![CDATA[自作 Web Framework が AWS Lambda で動くようになった (Experimental Support)]]></title><description><![CDATA[Ohkami v0.22 を出しました。
https://github.com/ohkami-rs/ohkami
native な async runtime ( tokio, async-std, smol, glommio, nio ) と Cloudflare Workers ( worker ) に加えて、今回 AWS Lambda を試験的にサポートしたので紹介します。

 できること

Function URLs での動作
API Gateway での動作
呼び出しモード BUFFERED でのレスポンス
呼び出しモード RESPONSE_STREAM でのストリーミング

...]]></description><link>https://zenn.dev/kanal/articles/ohkami-on-lambda</link><guid isPermaLink="true">https://zenn.dev/kanal/articles/ohkami-on-lambda</guid><pubDate>Sat, 08 Feb 2025 08:07:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KKJmsVDB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%2520Web%2520Framework%2520%25E3%2581%258C%2520AWS%2520Lambda%2520%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258F%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%2520%2528Experimental%2520Sup...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kanarus%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0ZTQ5YjRjOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kanarus</dc:creator></item><item><title><![CDATA[wit-bindgen / cargo-component が生成するstructにderiveを追加する(小ネタ)]]></title><description><![CDATA[例えば以下のようなWITがあったときに
package component:testing;

world run {
  export wasi:cli/run@0.2.0;
  import tests;
}

interface tests {
  record point { x: s32, y: s32 }
  roundtrip-point: func(a: point) -&gt; point;
}
wit-bindgen (0.17.0) はデフォルトではこういうコードを書いてくれる。
pub mod component {
  pub mod testing {
   ...]]></description><link>https://zenn.dev/tanishiking/articles/2025-02-wit-bindgen-rust</link><guid isPermaLink="true">https://zenn.dev/tanishiking/articles/2025-02-wit-bindgen-rust</guid><pubDate>Fri, 07 Feb 2025 08:18:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y5uxrIMt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:wit-bindgen%2520%252F%2520cargo-component%2520%25E3%2581%258C%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258Bstruct%25E3%2581%25ABderive%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%2528%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tanishiking%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2ZjcwZDg5NDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tanishiking</dc:creator></item><item><title><![CDATA[Rustの標準ライブラリで乱数生成ができるようになるかもしれない]]></title><description><![CDATA[現在のRustの標準ライブラリには実験的なモジュールとしてstd::randomがあります。
このモジュールには以下のアイテムが含まれています。


DefaultRandomSource構造体

Randomトレイト

RandomSourceトレイト

random関数

RandomトレイトとRandomSourceトレイトはno_std環境でも利用できます。
DefaultRandomSource構造体はgetrandomやProcessPrngなどのシステムの乱数生成器を表します。
Randomトレイトは指定したデータ型の乱数を取得するためのトレイトです。
現在はi32やu8な...]]></description><link>https://zenn.dev/sorairolake/articles/random-value-generation-in-rust-standard-library</link><guid isPermaLink="true">https://zenn.dev/sorairolake/articles/random-value-generation-in-rust-standard-library</guid><pubDate>Thu, 06 Feb 2025 02:59:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9CiB-k_v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%25A8%2599%25E6%25BA%2596%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25A7%25E4%25B9%25B1%25E6%2595%25B0%25E7%2594%259F%25E6%2588%2590%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%258B%25E3%2582%2582%25E3%2581%2597%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SorairoLake%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZGZiOGQyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SorairoLake</dc:creator></item><item><title><![CDATA[[Bevy] Android向けにビルドする]]></title><description><![CDATA[BevyでAndroidアプリを作成する方法がこちらです。
適当なディレクトリで
git clone https://github.com/NiklasEi/bevy_game_template.git
を実行して
cd bevy_game_template
cargo apk run -p mobile
を実行すると接続されているデバイスでアプリが立ち上がります。Android SDK, Android NDKのパスを設定するのを忘れないでください。
私はAndroidしか試していませんが他にもWindows, macos, Iphone, Webを対象にビルドできるようです。
コント...]]></description><link>https://zenn.dev/omini/articles/4fab71904a3090</link><guid isPermaLink="true">https://zenn.dev/omini/articles/4fab71904a3090</guid><pubDate>Tue, 04 Feb 2025 23:23:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uTOp-62I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520Android%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AB%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[Rustのドキュメント翻訳プロジェクト rust-lang-translations.org]]></title><description><![CDATA[
 はじめに
Rust の翻訳ドキュメントを公式にマージする取り組みをしばらくやっていますが、「やりたいんだけど現状は人手不足で無理」という形で断られることが多くなってきました。
RustのGitHubに集まる人というのは基本的には言語開発に興味のある人たちなので、時間がたっても翻訳に割り当てられるリソースが増えることはあまり期待できません。
そこで、公式へのマージはいったんあきらめて、それとは別に全言語の翻訳ドキュメントを集めるサイトを作ってみることにしました。
もしこのプロジェクトに多くの人が集まって、専属のメンテナーなども確保できるようになれば、それをもって再度公式へのマージも試み...]]></description><link>https://zenn.dev/dalance/articles/288c5acc772639</link><guid isPermaLink="true">https://zenn.dev/dalance/articles/288c5acc772639</guid><pubDate>Tue, 04 Feb 2025 09:30:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ckb0vjUo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E7%25BF%25BB%25E8%25A8%25B3%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2520rust-lang-translations.org%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dalance%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlYzIzM2VmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dalance</dc:creator></item><item><title><![CDATA[[Rust] 自作CLIツールをGitHubとcrate.ioで配布するまでの記録]]></title><description><![CDATA[
 はじめに
opという自作の個人的なCLIツール（元々はGo製でした）をRustで配布する為に行った記録を書きます。
RustでCLIツールを作った時、GitHubのリリースページとcrate.ioで公開すれば、色々な人が手軽にインストールしてみることができるようになるので良いと思います。（このツールは本当に個人的なので、ちょっと私以外に使う方がおられるのか謎ですが…笑）
このツール自体は、中々にザツなノリの開発でやってますので、記事に書いている手法はそこそこアナログです。以下のような方法でGitHubとcrate.ioでリリース配布してますので、1つの方法として参考にしてみてください...]]></description><link>https://zenn.dev/shimarisu_121/articles/1fa0c4c54ff6e5</link><guid isPermaLink="true">https://zenn.dev/shimarisu_121/articles/1fa0c4c54ff6e5</guid><pubDate>Mon, 03 Feb 2025 15:09:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--onOiszde--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E8%2587%25AA%25E4%25BD%259CCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592GitHub%25E3%2581%25A8crate.io%25E3%2581%25A7%25E9%2585%258D%25E5%25B8%2583%25E3%2581%2599%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%25AE%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shimarisu_121%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyYTA5YjFmMWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shimarisu_121</dc:creator></item><item><title><![CDATA[Android環境でRust製ライブラリをC/C++経由で使用する]]></title><description><![CDATA[
 簡単に言うと…
Rust言語で作成したライブラリをAndroidから簡単に呼び出したい。

C言語からRust製ライブラリの関数を簡単に呼び出せる
AndroidのJava/KotlinはJNIでC/C++言語の関数を呼び出せる

よって、
この様に簡単な方法で呼び出せるのでは？と思い、実行してみた結果、呼び出せることを確認しました。

 Rust言語とは
Rust言語は、メモリの安全性を確保しやすい言語機能を持っていることからC/C++の代用として昨今Windows、Linux、Android自身を含むさまざまな場面[1] [2] [3] [4] で採用されている言語です。

 な...]]></description><link>https://zenn.dev/ubiblog2/articles/36517cc91e4875</link><guid isPermaLink="true">https://zenn.dev/ubiblog2/articles/36517cc91e4875</guid><pubDate>Mon, 03 Feb 2025 05:26:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hBKKshZy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7Rust%25E8%25A3%25BD%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592C%252FC%252B%252B%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TechSavvy_24%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YTVmZDAwZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TechSavvy_24</dc:creator></item></channel></rss>