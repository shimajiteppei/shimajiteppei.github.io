<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 09 Sep 2025 00:36:44 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Jest mockResolvedValueの型エラーを1分で解決]]></title><description><![CDATA[
 概要
個人開発中に該当のエラーに遭遇し、AIに尋ねたのですが回りくどい解決策を提案されてしまい、「初めから公式を参照した方が早かったな」という体験をしたため、記事として投稿することにしました。
https://jestjs.io/docs/mock-function-api#mockfnmockresolvedvaluevalue

 問題
Jest + TypeScriptの組み合わせでmockResolvedValueを使うときに、下記のような型エラーに遭遇することがあります：
// ❌ 型エラー
const mockFn = jest.fn().mockResolvedValu...]]></description><link>https://zenn.dev/hasuto/articles/jest-typescript-mockresolvedvalue-fix</link><guid isPermaLink="true">https://zenn.dev/hasuto/articles/jest-typescript-mockresolvedvalue-fix</guid><pubDate>Mon, 08 Sep 2025 22:32:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e7LGshf2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jest%2520mockResolvedValue%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%25921%25E5%2588%2586%25E3%2581%25A7%25E8%25A7%25A3%25E6%25B1%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hasu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y2ODRhYzg3MTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hasu</dc:creator></item><item><title><![CDATA[レビューしやすいフロントエンドPR分割の型]]></title><description><![CDATA[
 はじめに
フロントエンド開発では、1つのPRに詰め込みすぎてレビューが大変になるケースがよくあります。
レビュワーも実装者と同じ時間を割けるわけではないですし、一方で、PRを細かく分けすぎてもレビューアーが全体像を掴みにくくなります。
つまり、ちょうどいい単位でPRを切る「型」を持つことが大切なのですが、
レビュワー目線を少し考えてPRを切って欲しいと思い、この記事を書いています。
この記事では、僕自身が実際に使っている フロントエンドPR分割の型 を紹介しますので
ご参考になれば嬉しいです。


 図解：PR分割の流れ
まず全体像を把握してもらうために、PR分割の流れを図にまとめま...]]></description><link>https://zenn.dev/junk/articles/4b8817ed385a9f</link><guid isPermaLink="true">https://zenn.dev/junk/articles/4b8817ed385a9f</guid><pubDate>Mon, 08 Sep 2025 14:49:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dEMtSSJW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2581%2597%25E3%2582%2584%25E3%2581%2599%25E3%2581%2584%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589PR%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25AE%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:junichi%2520kako%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmOGRlYWE1YTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>junichi kako</dc:creator></item><item><title><![CDATA[ArrayBufferって何なんだろう。]]></title><description><![CDATA[
 経緯
クライアントからbase64形式で送られてきた情報をサーバーで復元し保存するという実装をLLMに教えてもらった。
const fileBuffer = Buffer.from(base64Data, "base64");
const uint8Array = new Uint8Array(fileBuffer);
return new File([uint8Array], name, { type: contentType });
Buffer、ArrayBuffer、Base64、uint8Arrayなど見覚えはあるけれど、どんなもの達なのかしっかりと理解できていないので調べ...]]></description><link>https://zenn.dev/dotlog_techblog/articles/6e636824e7dd16</link><guid isPermaLink="true">https://zenn.dev/dotlog_techblog/articles/6e636824e7dd16</guid><pubDate>Mon, 08 Sep 2025 14:47:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6syliQa6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ArrayBuffer%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A0%25E3%2582%258D%25E3%2581%2586%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sinano%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiYjk5ODg5MDAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%2589%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ozaUYxV0NPZTlLakIyeHNpQVBPU0EtWXB1UVBVYzV2d2pJeUZPSVE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sinano</dc:creator></item><item><title><![CDATA[余計なuseMemoを1つ消したらtscが135秒高速化した話]]></title><description><![CDATA[
 余計なuseMemoを1つ消したらtscが135秒高速化した話

 はじめに
大規模なReact + TypeScriptプロジェクトにおいて、無意味なオブジェクトマッピングを行うuseMemoを1つ削除することで、TypeScriptコンパイル時間が146秒から11秒に短縮された（92%改善）事例について報告します。
根本原因の完全な特定には至らなかったものの、実際に発生した現象と問題特定のプロセスを記録します。
本件では、ある程度論理的に原因の当たりをつけたあと、先入観を排して特定するためにAIコーディングエージェントを活用して愚直な二分探索での検証を行わせ、最終的に135秒にも...]]></description><link>https://zenn.dev/meijin/articles/typescript-usememo-performance-pitfall</link><guid isPermaLink="true">https://zenn.dev/meijin/articles/typescript-usememo-performance-pitfall</guid><pubDate>Mon, 08 Sep 2025 08:44:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FOGZWMYU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BD%2599%25E8%25A8%2588%25E3%2581%25AAuseMemo%25E3%2582%25921%25E3%2581%25A4%25E6%25B6%2588%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589tsc%25E3%2581%258C135%25E7%25A7%2592%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:meijin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pPWmtyWk1nS3djRXl5a2w1X2lVTFZFVmtVVUpkNzkzcjlfejhERjRzPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>meijin</dc:creator></item><item><title><![CDATA[【TypeScript】instanceof演算子について]]></title><description><![CDATA[
 初めに
instanceof について自分自身でまとめてみようと思い、この記事を書いてます。
(初心者のため優しい目で見てください)

 instanceofとは？
オブジェクトが特定のクラスから生成されたかどうかを実行時に判定する。つまり、クラスベースの実行時型チェックとして便利な演算子です。

 構文
obj instanceof クラス名

obj　→　判定したいオブジェクト
クラス名　→　判定対象のクラス


 基本的な使い方
class Animal {
  name: string;
  constructor(name: string) {
    this.name ...]]></description><link>https://zenn.dev/daichi09167/articles/d362834e625478</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/d362834e625478</guid><pubDate>Mon, 08 Sep 2025 08:31:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9J0HAbEl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591instanceof%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi2724%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjODE0Yzk4ODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi2724</dc:creator></item><item><title><![CDATA[複数のデータ取得処理を高速にする]]></title><description><![CDATA[トップページなど情報量が多いページは、複数のfetch処理ををする場合があります。どのように実装する事が適切か説明します。

 1つずつデータを取得
fetchTopPageDataを内で、様々なデータを取得する為複数のfetchを実行しています。1つずつデータを取得する直列タイプです。
今は2つのfetchですが、fetch処理が増えると待ち時間が増えます。
type FetchResponse&lt;T&gt; = Promise&lt;
  | {
      isSuccess: true;
      data: T;
    }
  | {
      isSuccess: ...]]></description><link>https://zenn.dev/chot/articles/dc0d06627a9e40</link><guid isPermaLink="true">https://zenn.dev/chot/articles/dc0d06627a9e40</guid><pubDate>Mon, 08 Sep 2025 06:01:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UxFEUdf7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%258F%2596%25E5%25BE%2597%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2588%25E3%2583%259F%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSW1uc1FQOHJYaERqWUw3ZU5aTWlJdm1qOEhnNUVBSDZNTE5tR3BmbDZOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>トミー</dc:creator></item><item><title><![CDATA[Plan-and-Execute × Elasticsearch × Ollama で“惜しい検索”を卒業する]]></title><description><![CDATA[
 はじめに
「社内ドキュメントを探しても欲しい情報が見つからない...」
「全文検索は厳密な単語には強いけど、言い換えた表現が拾えない」
「ベクトル検索は幅広く拾うけど、ノイズが多すぎる」
こんな "惜しい検索体験" に悩んだことはありませんか？
この記事では、Plan-and-Execute型AIエージェント と Elasticsearch（全文検索）、Qdrant（ベクトル検索） を組み合わせて、この問題を解決する検索システムの実装方法を紹介します。
特徴的なのは、Ollama（ローカルLLM） を使用することで OpenAIなしでも動作 する点です。プライバシーが重要な社内システ...]]></description><link>https://zenn.dev/ein14/articles/e779d7dbaf1973</link><guid isPermaLink="true">https://zenn.dev/ein14/articles/e779d7dbaf1973</guid><pubDate>Mon, 08 Sep 2025 05:45:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--68dAzAE4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Plan-and-Execute%2520%25C3%2597%2520Elasticsearch%2520%25C3%2597%2520Ollama%2520%25E3%2581%25A7%25E2%2580%259C%25E6%2583%259C%25E3%2581%2597%25E3%2581%2584%25E6%25A4%259C%25E7%25B4%25A2%25E2%2580%259D%25E3%2582%2592%25E5%258D%2592%25E6%25A5%25AD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ein14%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YzZhOTgyYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ein14</dc:creator></item><item><title><![CDATA[React用のデバイス判別フック作ったので、みんなに共有]]></title><description><![CDATA[
 経緯
もともと、react-device-detectというライブラリを利用させてもらってたんだけど、思った動作をしないので(使い方が悪かったのかも？)、自分で作りました。

 前提環境

nodejs・npmインストール済み
React


 インストール
全体コード'use client';
import { useCallback, useEffect, useState } from 'react';

interface ReturnDeviceType {
    error: unknown;

    isMobile: boolean;
    isAndroid:...]]></description><link>https://zenn.dev/locu/articles/c01e05f4549056</link><guid isPermaLink="true">https://zenn.dev/locu/articles/c01e05f4549056</guid><pubDate>Mon, 08 Sep 2025 03:50:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---kWyunA3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E7%2594%25A8%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25B9%25E5%2588%25A4%25E5%2588%25A5%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E3%2581%25BF%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25AB%25E5%2585%25B1%25E6%259C%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AD%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlZTFiY2ZkNDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ロク</dc:creator></item><item><title><![CDATA[ブラウザストレージの状態管理をzustandで行うと簡単かつ高機能で便利]]></title><description><![CDATA[こんにちは。株式会社 Sally エンジニアの @piesukeです。
私たちは、マーダーミステリーを遊べることが出来るアプリ「ウズ」と、マーダーミステリーを制作してウズ上で遊べることが出来るアプリ「ウズスタジオ」を開発しています。
私が最近やって面白かったマーダーミステリーは プライト・フライト です。
弊社は状態管理ライブラリに zustand を使用しています。今回は zustand を使ってブラウザストレージへの状態の永続化を簡単かつ高機能に実現する方法を解説します。

 zustand とは
Zustand は、React のためのシンプルで高速な状態管理ライブラリです。「状態...]]></description><link>https://zenn.dev/uzu_tech/articles/browser-storage-zustand</link><guid isPermaLink="true">https://zenn.dev/uzu_tech/articles/browser-storage-zustand</guid><pubDate>Mon, 08 Sep 2025 03:30:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7NYGx2BS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592zustand%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2586%25E3%2581%25A8%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%258B%25E3%2581%25A4%25E9%25AB%2598%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:piesuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5NjI5NGIwZmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UZU%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjNDgyMGY2MzAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>piesuke</dc:creator></item><item><title><![CDATA[ReactやNext.jsでのステート管理ライブラリの比較]]></title><description><![CDATA[
 注意 : この記事はAIによるDeep researchの内容が含まれるため、一部ハルシネーションを含む場合がございます。また、勉強中の筆者の備忘録としてアウトプットしている記事になるため間違った情報も含まれる可能性があります。あくまで参考としていただき可能であればご指摘いただけますと幸いです。

 React・Next.js ステート管理ライブラリの比較
Reactアプリケーション及びNext.jsにおける主要な状態管理ライブラリを、実装コード、開発体験、パフォーマンス、使用場面の観点から詳しく比較します。ToDoアプリの例を通じて、それぞれのライブラリの特徴を理解していきましょう...]]></description><link>https://zenn.dev/ren21/articles/baa6271bfbfcd7</link><guid isPermaLink="true">https://zenn.dev/ren21/articles/baa6271bfbfcd7</guid><pubDate>Mon, 08 Sep 2025 01:32:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4Wvvh2iT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2582%2584Next.js%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2588%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258C%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4YTk2YTVjMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>れん</dc:creator></item><item><title><![CDATA[ReactやNext.jsでのAPIフェッチ方法の比較]]></title><description><![CDATA[
 注意 : この記事はAIによるDeep researchの内容が含まれるため、一部ハルシネーションを含む場合がございます。また、勉強中の筆者の備忘録としてアウトプットしている記事になるため間違った情報も含まれる可能性があります。あくまで参考としていただき可能であればご指摘いただけますと幸いです。

 ～この記事をまとめた経緯～
ReactやNext.jsでAPIを叩く際に、fetchやaxiosだけでなく、SWR、TanStack Queryなど様々な選択肢があります。
また、React19から登場したuseフックや、Reactのみで構築したアプリケーション、Next.jsで構築した...]]></description><link>https://zenn.dev/ren21/articles/4a257f80f03ef5</link><guid isPermaLink="true">https://zenn.dev/ren21/articles/4a257f80f03ef5</guid><pubDate>Mon, 08 Sep 2025 01:11:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ldfus63t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2582%2584Next.js%25E3%2581%25A7%25E3%2581%25AEAPI%25E3%2583%2595%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2581%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258C%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4YTk2YTVjMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>れん</dc:creator></item><item><title><![CDATA[TypeScript + Phaser で古典的なゲームAIを実装してみた]]></title><description><![CDATA[スマホ向けのミニWebゲームを作りました。
https://ikatako.kondroid.com
※ 音が出るので注意！！
このゲームはルールベースの自立駆動型エージェントを実装しており、タコとイカがマップ上を適当に彷徨い、敵を追いかけ回し、敵を攻撃して、HPや武器が減ったらアイテムを取りに行ったりします。いわゆる古典的なゲームAIを実装したゲームになります。
作った経緯については以下を参照ください。
https://zenn.dev/kondroid00/articles/48d1b3c5376e55#なぜ復刻させたのか

 入門の次のハードル
2Dゲームの開発はゲームプログラミン...]]></description><link>https://zenn.dev/kondroid00/articles/bf10cec130f510</link><guid isPermaLink="true">https://zenn.dev/kondroid00/articles/bf10cec130f510</guid><pubDate>Sun, 07 Sep 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ak9XhFXp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%252B%2520Phaser%2520%25E3%2581%25A7%25E5%258F%25A4%25E5%2585%25B8%25E7%259A%2584%25E3%2581%25AA%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0AI%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kondroid%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2YjY2YjcyNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kondroid</dc:creator></item><item><title><![CDATA[AI駆動開発勉強会の振り返り]]></title><description><![CDATA[
 1. はじめに
2025年7月と8月に、弊社の私が所属する組織内でAI駆動開発の勉強会を開催しました。どのような背景があり勉強会を開催したのか、良かった点/改善するべき点、具体的にどのような内容だったのかを共有したいと思います。

 2. 開催の背景
勉強会のタイトルはAI駆動開発で学ぶTypeScript開発トレーニングでした。GitHub CopilotやCursor、Claude Code、Codex、Jules、KiroなどAI駆動開発ができるツールがありますが、ツールの使い方を学ぶというよりはAI駆動開発を通して、コーディングを学ぶという趣旨でした。
この背景としては、弊社...]]></description><link>https://zenn.dev/acntechjp/articles/ca581cfda42b45</link><guid isPermaLink="true">https://zenn.dev/acntechjp/articles/ca581cfda42b45</guid><pubDate>Sun, 07 Sep 2025 14:36:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iiQRepu6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AI%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%25E5%258B%2589%25E5%25BC%25B7%25E4%25BC%259A%25E3%2581%25AE%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B5%25E3%2583%25B3%2520%2528Masanori%2520Yos...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2ZDA4MDY5ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Accenture%2520Japan%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MzkwNDBmYjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッサン (Masanori Yoshida)</dc:creator></item><item><title><![CDATA[【TS初級から中級へ】ジェネリクスで処理をまとめてスッキリ]]></title><description><![CDATA[なかなか理解が難しいTypeScriptのジェネリクス。特にプログラミングを始めたての頃は、なんかよくわかんないし、何に使うのかいまいちイメージができません。
でも、ジェネリクスを使いこなせるとかっこいいですよね。初級から中級になった感じがします。
実際に使えるようになるとすごく便利でコードもスッキリします。
詳しい説明はサバイバルTypeScriptにゆずるとして、簡単に、どんなふうに使えるの？というのを紹介します。

 似たような処理をまとめる
ジェネリクスのいいところは、似たような処理を1つにまとめてスッキリさせるところです。
並び替えの処理を例にしましょう。アプリのユーザーを特定...]]></description><link>https://zenn.dev/northrkyk/articles/c989c38a3d9926</link><guid isPermaLink="true">https://zenn.dev/northrkyk/articles/c989c38a3d9926</guid><pubDate>Sun, 07 Sep 2025 11:42:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XsdbbJDj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TS%25E5%2588%259D%25E7%25B4%259A%25E3%2581%258B%25E3%2582%2589%25E4%25B8%25AD%25E7%25B4%259A%25E3%2581%25B8%25E3%2580%2591%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E3%2581%25A7%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2582%25B9%25E3%2583%2583%25E3%2582%25AD%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kyokoNR%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS25zSWFyRW8tREg0X3BtRVpZWnFPUnNkMEg1NjBxYUZ4Y0F0eU53Tzg4bmtUdEdDdUkyZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kyokoNR</dc:creator></item><item><title><![CDATA[React開発におけるヘキサゴナルアーキテクチャの実践ガイド]]></title><description><![CDATA[Reactを用いたモダンなフロントエンド開発は、高い対話性とリッチなユーザー体験を実現する強力なパラダイムです。しかし、その自由度の高さとコンポーネントベースの性質は、プロジェクトがスケールするにつれて、しばしば技術的負債の温床となります。アプリケーション固有のロジック、UIコンポーネント、外部APIとの通信処理が単一のコンポーネント内に密結合し、コードは次第に変更やテストが困難な状態に陥ります。

本ドキュメントでは、この普遍的な課題への解決策として「ヘキサゴナルアーキテクチャ」をReactアプリケーションに適用する、具体的かつ実践的な設計ガイドを提案します。このアーキテクチャの核心は、アプリケーションの核となるロジックを、UIや外部APIといった具体的な技術的詳細から**質の高い分離（Quality Separation）**を実践することにあります。

この設計ガイドが目指すのは、単なる分離ではありません。副作用を特定の箇所に凝集させ、ロジックの振る舞いを予測可能にすることで、バックエンドの実装に依存しない、真に保守性とテスト容易性に優れたフロントエンドコードベースを構築します。これにより、将来の技術変更にも柔軟に対応し、持続可能でスケールするアプリケーションを実現することが可能になります。]]></description><link>https://zenn.dev/enook/books/e84bb524b64685</link><guid isPermaLink="true">https://zenn.dev/enook/books/e84bb524b64685</guid><pubDate>Sun, 07 Sep 2025 10:20:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XLsJGhZz--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8yOGQxNWQ0NDhjLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>enook</dc:creator></item><item><title><![CDATA[useQuery の queryFn における型推論の問題と解決策]]></title><description><![CDATA[
 1. 問題の概要
@tanstack/react-query の useQuery を使用した際に、APIからのレスポンスデータの型が正しく推論されず、any 型として扱われてしまう問題が発生しました。
これにより、以下のようなTypeScriptエラーが引き起こされていました。
プロパティ 'data' は型 'NonNullable&lt;NoInfer&lt;TQueryFnData&gt;&gt;' に存在しません。
パラメーター 'item' の型は暗黙的に 'any' になります。
これは、useQuery が返す data オブジェクトの型情報が失われていることが根本的...]]></description><link>https://zenn.dev/wyuma/articles/291ed6a57ce80a</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/291ed6a57ce80a</guid><pubDate>Sun, 07 Sep 2025 07:29:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d_x9HFAj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useQuery%2520%25E3%2581%25AE%2520queryFn%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%25AE%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25A8%25E8%25A7%25A3%25E6%25B1%25BA%25E7%25AD%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fanda-dev.com%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fanda-dev.com</dc:creator></item><item><title><![CDATA[Discord botコマンド登録の個人的チートシート]]></title><description><![CDATA[友人と2人で創作をやっているDiscordサーバに入れる用のbotを開発しました。
Vide Codingで終われるはずがbotのコマンド登録でつまづき、知見が得られたので自分用にまとめておきます。
ちなみに作ったbotはこちら:
https://github.com/t-esserac-t/meetingSetBot

 前提

 対象

Node.jsでDiscord botを開発する人

JavaScript初心者だけどやっていく人




 開発環境
プラットフォーム: Cloudflare Workers + Durable Objects
開発言語: TypeScript
W...]]></description><link>https://zenn.dev/tesseract/articles/fc8a1cf64dd7e2</link><guid isPermaLink="true">https://zenn.dev/tesseract/articles/fc8a1cf64dd7e2</guid><pubDate>Sun, 07 Sep 2025 06:32:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nKgJ62nG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Discord%2520bot%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E7%2599%25BB%25E9%258C%25B2%25E3%2581%25AE%25E5%2580%258B%25E4%25BA%25BA%25E7%259A%2584%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HANAE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hPS0Z0VGxtQlJEcGdZXzgzel9BdXZ5ajFhZ0ZuczdZajRWck8yUmE4PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HANAE</dc:creator></item><item><title><![CDATA[Next.jsでのURL状態管理を楽にするnuqsの使い方]]></title><description><![CDATA[Next.jsでフロント開発をしていると、「状態をURLに載せたい」という場面がよくあります。

検索条件を共有したい
戻る/進むで状態を復元したい
ページをリロードしても結果を維持したい

これを素直に実装すると useSearchParams や router.replace を手書きすることになり、煩雑さや型崩れに悩まされます。
そこで便利なのが nuqs。
https://nuqs.dev/
useStateライクなAPIでURLと状態を同期し、型安全かつ履歴制御も柔軟に扱えます。
この記事では、検索フォームやフィルタ、タブ切り替え、モーダルなどの実際によく出てくる場面を例にnu...]]></description><link>https://zenn.dev/shintaro/articles/0a3d0f7aabfe85</link><guid isPermaLink="true">https://zenn.dev/shintaro/articles/0a3d0f7aabfe85</guid><pubDate>Sun, 07 Sep 2025 01:40:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WMZ7a4fh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E3%2581%25AEURL%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E6%25A5%25BD%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258Bnuqs%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shintaro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzZDU4NjE5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shintaro</dc:creator></item><item><title><![CDATA[Claude Codeにlintエラーを段階的に修正してもらう]]></title><description><![CDATA[
 はじめに
eslint-seatbeltで管理されたlintエラーをClaude Codeに修正させてみた話です。

 モチベーション
個人でメンテナンスしているライブラリや過去プロジェクトで蓄積されたlintエラーを修正したくないという怠惰なお気持ちがありました。
そこでeslint-seatbeltをうまく利用するとAIアシスタントでも期待したlint修正が可能になり、効率的にエラーを解消できるのではないかと考えました。

 前提
この記事は、eslint-seatbeltの基本的な概念と使用方法を理解していることを前提としています。
https://zenn.dev/tetot...]]></description><link>https://zenn.dev/tetoteto/articles/eslint-seatbelt-claude-code-progressive-fixing</link><guid isPermaLink="true">https://zenn.dev/tetoteto/articles/eslint-seatbelt-claude-code-progressive-fixing</guid><pubDate>Sat, 06 Sep 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fdgtuJKj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%2520Code%25E3%2581%25ABlint%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E6%25AE%25B5%25E9%259A%258E%25E7%259A%2584%25E3%2581%25AB%25E4%25BF%25AE%25E6%25AD%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2582%2582%25E3%2582%2589%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TetoTeto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXlIN1NhY21HVFFmR3hWQ1d2R01nX29ETVR0WU82UXJ6WGg1Z3dZOUs4VWRJPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TetoTeto</dc:creator></item><item><title><![CDATA[Cloudflare Agentsコトハジメ]]></title><description><![CDATA[
 はじめに
https://agents.cloudflare.com/
最近自作コーディングエージェントShaft[1]の動作確認でWorkers AIを使っており、せっかくなのでCloudflareだけで完結するAIエージェントも作ろうと思い立ったのでCloudflare Agentsについて色々調べていたのですが、日本語・英語問わず内部の詳しい資料が全くなかった[2]ので、広範囲にわたり調べた内容をまとめることにしました。
今回はちゃんとTool Callingをやっていきます。
APIだけ知りたい人向けのCloudflare Agents Deep Diveはこちら。
http...]]></description><link>https://zenn.dev/tkithrta/articles/d5ab8579a527e9</link><guid isPermaLink="true">https://zenn.dev/tkithrta/articles/d5ab8579a527e9</guid><pubDate>Sat, 06 Sep 2025 22:06:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4-0vGTjo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Agents%25E3%2582%25B3%25E3%2583%2588%25E3%2583%258F%25E3%2582%25B8%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25BB%2592%25E3%2583%25B0%25E6%25A8%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NDRlMTA4ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>黒ヰ樹</dc:creator></item></channel></rss>