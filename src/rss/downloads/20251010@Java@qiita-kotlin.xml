<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-10T16:50:01+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090930</id>
    <published>2025-10-10T16:50:01+09:00</published>
    <updated>2025-10-10T16:50:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/804cf744bb8d2687b90b"/>
    <url>https://qiita.com/nozomi2025/items/804cf744bb8d2687b90b</url>
    <title>【Kotlin】Kotlin：`operator` 関数（演算子オーバーロード）徹底解説</title>
    <content type="text">はじめに
Kotlin では、
+, -, *, [], in などの演算子を
自作クラスに自然に使えるようにできます。
これが「operator overloading（演算子のオーバーロード）」です。

1. 基本構文
Kotlin では、
特定の関数名に oper...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090909</id>
    <published>2025-10-10T16:22:22+09:00</published>
    <updated>2025-10-10T16:22:22+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/22137a21ff04272ba8b1"/>
    <url>https://qiita.com/nozomi2025/items/22137a21ff04272ba8b1</url>
    <title> 【Kotlin】Kotlin：分解宣言 × 拡張関数 × operator の組み合わせ活用</title>
    <content type="text">はじめに
Kotlin の「分解宣言（Destructuring Declaration）」は、
単体でも便利ですが、拡張関数 (extension function) や operator 関数 と組み合わせると、
驚くほど表現力のあるコードが書けます。
この記事では、...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090902</id>
    <published>2025-10-10T16:07:59+09:00</published>
    <updated>2025-10-10T16:07:59+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/ed87911693d2ae7ff58a"/>
    <url>https://qiita.com/nozomi2025/items/ed87911693d2ae7ff58a</url>
    <title> 【Kotlin】Kotlin の「分解宣言（Destructuring Declaration）」徹底解説</title>
    <content type="text">はじめに
Kotlin の便利な構文のひとつに
「分解宣言（Destructuring Declaration）」 があります。
これは、オブジェクトを複数の変数に一度に分解して代入する 機能です。
Java では面倒だった値の取り出しを、Kotlin では直感的に書けま...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090810</id>
    <published>2025-10-10T10:53:44+09:00</published>
    <updated>2025-10-10T10:53:44+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/shin_usu/items/d4c9309f18e48a6985a3"/>
    <url>https://qiita.com/shin_usu/items/d4c9309f18e48a6985a3</url>
    <title>DroidKaigi/iOSDCに向けて、Raspberry Pi × Embedded Swiftでラジコンを作ってみた</title>
    <content type="text">1. はじめに
先日開催された「DroidKaigi 2025」と「iOSDC Japan 2025」の企業ブースにて、本田技研工業ではスマホから操作する「ラジコン縦列駐車ゲーム」を展示しました。

60秒以内にラジコンを操作して縦列駐車を成功させる、というシンプル...</content>
    <author>
      <name>shin_usu</name>
    </author>
  </entry>
</feed>
