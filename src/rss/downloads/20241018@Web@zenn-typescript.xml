<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 18 Oct 2024 00:48:20 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Serverless Framework v4でLambdaの実装にTypeScript+ESMを使う]]></title><description><![CDATA[
 概要
Serverless Framework v4 では TypeScript がネイティブにサポートされ、
serverless-esbuild 等のプラグインも含めずに本体が直接 ESBuild 経由でトランスパイルを行うことが出来ます。
v4.4.6 の時点では、serverless.ts をドキュメントに沿って書いているだけでは、
TypeScript + ESM で記述した関数を Lambda にデプロイしても ESM 形式の JS を処理できずエラーになってしまったため、どう対処したかを残しておこうと思います。

 結論
v4 で ESBuild でトランスパイルを行う...]]></description><link>https://zenn.dev/tristar/articles/use-typescript-esm-serverless-v4</link><guid isPermaLink="true">https://zenn.dev/tristar/articles/use-typescript-esm-serverless-v4</guid><pubDate>Thu, 17 Oct 2024 15:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Onq0chfH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Serverless%2520Framework%2520v4%25E3%2581%25A7Lambda%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25ABTypeScript%252BESM%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tristar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g4NGF5cUZVU1haNkluYXBZdGNLenRkSEpWQjVyclViWFN3cThiRmc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tristar</dc:creator></item><item><title><![CDATA[マツコの知らないJavascriptと派生言語の世界]]></title><description><![CDATA[
 JavaScriptの歴史
JavaScriptは1995年にBrendan Eichによって開発されました。最初はNetscape Navigatorというウェブブラウザに組み込まれ、インタラクティブなウェブページを作成するためのスクリプト言語として設計されました。当初は「Mocha」という名前でしたが、後に「LiveScript」、そして最終的に「JavaScript」と改名されました。名前の由来には、当時人気があったプログラミング言語「Java」の名前を借りてマーケティング効果を狙った背景がありますが、技術的にはJavaとは異なる言語です。

 ECMAScriptとの関係
J...]]></description><link>https://zenn.dev/qitaaa/articles/4c7c12e5a1c17d</link><guid isPermaLink="true">https://zenn.dev/qitaaa/articles/4c7c12e5a1c17d</guid><pubDate>Thu, 17 Oct 2024 14:07:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HKgGUTya--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259E%25E3%2583%2584%25E3%2582%25B3%25E3%2581%25AE%25E7%259F%25A5%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584Javascript%25E3%2581%25A8%25E6%25B4%25BE%25E7%2594%259F%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E4%25B8%2596%25E7%2595%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qitar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmZGNmMTg3OTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qitar</dc:creator></item><item><title><![CDATA[Next.jsとFirebaseとTypsScriptで構成されたリポジトリにJestを導入した記録]]></title><description><![CDATA[
 概要
Next.js（App Router）、Firebase、TypsScriptという組み合わせの環境でJestを導入した内容を忘れないようにメモしました。
Next.js公式の手順をベースにenvファイルの値を読み込めない事象に対応しています。

 開発環境など

Next.js(App Router) v14.2.7
TypeScript
Firebase Auth
Cloud Firestore
Node.js v20.15.0


 追加したnpmパッケージ

@testing-library/jest-dom ^6.5.0
@testing-library/react ...]]></description><link>https://zenn.dev/hossy000/articles/428767370d14a1</link><guid isPermaLink="true">https://zenn.dev/hossy000/articles/428767370d14a1</guid><pubDate>Thu, 17 Oct 2024 13:04:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U4oQIWil--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A8Firebase%25E3%2581%25A8TypsScript%25E3%2581%25A7%25E6%25A7%258B%25E6%2588%2590%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2583%25AA%25E3%2583%259D%25E3%2582%25B8%25E3%2583%2588%25E3%2583%25AA%25E3%2581%25ABJest%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2597%25E3%2581%259F%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kouichi.hoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZWYwNjZlNGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kouichi.hoshi</dc:creator></item><item><title><![CDATA[VisualStudioCodeでホバー時のTypeScriptの型ヒントをすべて表示したかったけど詰まった話]]></title><description><![CDATA[
 はじめに
Visual Studio Code（以下、VSCode）でTypeScriptの型ヒントをすべて表示する方法について、2件の参考記事を見て試してみましたが、一部で詰まってしまいました。そこで、私が実際にできた方法を補足して共有します。
参考記事:
https://zenn.dev/karan_coron/articles/dcab49bed5b2ff
https://qiita.com/fukasawah/items/2f8b37db8eb711448cd8

 環境

mac Apple M1 (Sonoma 14.5)
VSCode


 やるべきこと
結論から言うと...]]></description><link>https://zenn.dev/utoutonissy/articles/5b994d92050796</link><guid isPermaLink="true">https://zenn.dev/utoutonissy/articles/5b994d92050796</guid><pubDate>Thu, 17 Oct 2024 10:55:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a5wxqt76--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VisualStudioCode%25E3%2581%25A7%25E3%2583%259B%25E3%2583%2590%25E3%2583%25BC%25E6%2599%2582%25E3%2581%25AETypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2583%2592%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E3%2581%2599%25E3%2581%25B9%25E3%2581%25A6%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2597%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2591%25E3%2581%25A9%25E8%25A9%25B0%25E3%2581%25BE%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AB%25E3%2581%25A3%25E3%2581%2597%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnhsdW1iSTdlLWZnaXBMNW9VVFBCdFN6WFdmcWxsOEZjcm5WUkh1RUJtN3dwOEdtOHI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>にっしー</dc:creator></item><item><title><![CDATA[【TypeScript】ユーティリティ型をConditional Typesで再定義して、inferの理解を深める]]></title><description><![CDATA[こんにちは、ujitaです！
前回の記事に引き続き、ユーティリティ型をConditional Typesとinferを使ってどのように定義するのか解説していきます。ユーティリティ型やConditional Typesについては前回の記事で説明したので、省略します。知らない方や忘れてしまった方はぜひ前回の記事を読んでいただけると幸いです。
https://zenn.dev/ujita/articles/2327748327996c
本記事では、TypeScriptに標準で用意されているユーティリティ型であるParametersとInstanceTypeを、Conditional Types...]]></description><link>https://zenn.dev/ujita/articles/a4b462752c1ce8</link><guid isPermaLink="true">https://zenn.dev/ujita/articles/a4b462752c1ce8</guid><pubDate>Thu, 17 Oct 2024 09:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GM4fJcZp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2582%2592Conditional%2520Types%25E3%2581%25A7%25E5%2586%258D%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581infer%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%25E3%2582%2592%25E6%25B7%25B1%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ujita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3MmNmYWM3NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ujita</dc:creator></item><item><title><![CDATA[人間 vs AI！生成AIを使ったゲーム風アプリ『AmIAi』を開発してみた！]]></title><description><![CDATA[
 はじめに
◆ 生成AIを使ったアプリを作ってみた!!ということで、概要や使用した技術等をまとめてみました！

 作成したアプリ
⭐️ AmIAi という名のアプリです
ぜひ覗いてみてください
https://am-i-ai.com
!
名前は要検討かもしれない...

!
ページの内容は全て英語ですが、ゲーム自体は日本語に対応しています🙇


 概要
出題されるいくつかの質問に答えて、ゲーム形式でユーザの人間性を表現します！！
ユーザ vs ユーザ 形式でお互いの人間性をそれぞれのユーザがジャッジしていきます！
ジャッジ方法として、ユーザの中にAIを紛れ込ませて相対的な人間性を測って...]]></description><link>https://zenn.dev/feuring/articles/9dc469cd1c971f</link><guid isPermaLink="true">https://zenn.dev/feuring/articles/9dc469cd1c971f</guid><pubDate>Thu, 17 Oct 2024 09:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bbwfuphe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BA%25BA%25E9%2596%2593%2520vs%2520AI%25EF%25BC%2581%25E7%2594%259F%25E6%2588%2590AI%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E9%25A2%25A8%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2580%258EAmIAi%25E3%2580%258F%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuu8812%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTZPdXlJMUEwSW04Szc5TEhHSnU0T1hpX3JyN0VJV1RFaWhWVFg0c2Z5U3c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuu8812</dc:creator></item><item><title><![CDATA[TS使っている人のRust 0から勉強日記2]]></title><description><![CDATA[こんにちは！普段TypeScriptを使ってフロントエンド開発をしている人です🙌
今回は前回の日記1に引き続き、copyトレイトとcloneトレイトについてとなってます。
また今回も、内容は基礎の基礎(+TypeScriptとの比較？)で自分の勉強の記録用に書いています。


 所有権についてのおさらい
全ての値に「所有者」が存在し、その所有者が所有権を持っています。(1つの値に1つの所有者)
所有者がスコープから外れるとその所有者が持つ値はメモリから解放されます。
スコープ・束縛・参照・可変性・借用チェックについては日記1に書いているので気になる方は見てみてください〜

 Shallo...]]></description><link>https://zenn.dev/maru_contents/articles/rust_copytrait</link><guid isPermaLink="true">https://zenn.dev/maru_contents/articles/rust_copytrait</guid><pubDate>Thu, 17 Oct 2024 05:53:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GU7GHnb7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TS%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%25AERust%25200%25E3%2581%258B%25E3%2582%2589%25E5%258B%2589%25E5%25BC%25B7%25E6%2597%25A5%25E8%25A8%25982%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyZDVlZjUxOGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maru</dc:creator></item><item><title><![CDATA[VSCodeでホバー時のTypeScriptの型ヒントをすべて表示する]]></title><description><![CDATA[
 はじめに
こんにちは、からころです。
今回は、VSCode でホバー時の TypeScript の型ヒントをすべて表示する方法について書いていこうと思います。

 デフォルトの設定では型の情報量が増えると型が省略される
VSCode では、TypeScript を利用して開発する際に、ホバーすると以下のように型ヒントを表示することができます。

しかし、デフォルトの設定のままでは、下記のようにプロパティ数が多くなると型ヒントが省略されてしまいます。

上記の解決方法を以下で説明していこうと思います。

 tsconfig.json に noErrorTruncation:true を...]]></description><link>https://zenn.dev/karan_coron/articles/dcab49bed5b2ff</link><guid isPermaLink="true">https://zenn.dev/karan_coron/articles/dcab49bed5b2ff</guid><pubDate>Thu, 17 Oct 2024 01:43:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5aRBAF-W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25A7%25E3%2583%259B%25E3%2583%2590%25E3%2583%25BC%25E6%2599%2582%25E3%2581%25AETypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2583%2592%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E3%2581%2599%25E3%2581%25B9%25E3%2581%25A6%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%2589%25E3%2581%2593%25E3%2582%258D%2520%252F%2520karacoro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwNmQwMjRkZGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>からころ / karacoro</dc:creator></item><item><title><![CDATA[その js の設定ファイル補完効くかもよ]]></title><description><![CDATA[
 はじめに
Next.js のプロジェクトを作成すると、設定ファイルの next.config.js にこんな記述があります。

next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {};

この JSDoc コメントの @type タグは値に型を付与することができます。
import('next').NextConfig 部分はインポート型と呼ばれ TypeScript の型定義ファイルから型をインポートして取得することができます。
このコメントがあるおかげでエディタは宣言された変数の型...]]></description><link>https://zenn.dev/k0rosuke/articles/35e1fbd83719a0</link><guid isPermaLink="true">https://zenn.dev/k0rosuke/articles/35e1fbd83719a0</guid><pubDate>Wed, 16 Oct 2024 09:30:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LfUsT3nd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2581%25AE%2520js%2520%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E8%25A3%259C%25E5%25AE%258C%25E5%258A%25B9%25E3%2581%258F%25E3%2581%258B%25E3%2582%2582%25E3%2582%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:korosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFmODcxM2MxMTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>korosuke</dc:creator></item><item><title><![CDATA[【TypeScript】ユーティリティ型のReturnTypeをConditional Typesで再定義してinferを理解する]]></title><description><![CDATA[こんにちは、ujitaです！
前回の記事に引き続き、ユーティリティ型をConditional Typesを使ってどのように定義するのか解説していきます。ユーティリティ型やConditional Typesについては前回の記事で説明したので、省略します。知らない方や忘れてしまった方はぜひ前回の記事を読んでいただけると幸いです。
https://zenn.dev/ujita/articles/2327748327996c
本記事では、TypeScriptに標準で用意されているユーティリティ型であるReturnTypeを、Conditional Typesを用いてどのように定義するかを解説しま...]]></description><link>https://zenn.dev/ujita/articles/b88a5d513c2f27</link><guid isPermaLink="true">https://zenn.dev/ujita/articles/b88a5d513c2f27</guid><pubDate>Wed, 16 Oct 2024 09:01:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pwnlbfhh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2581%25AEReturnType%25E3%2582%2592Conditional%2520Types%25E3%2581%25A7%25E5%2586%258D%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2597%25E3%2581%25A6in...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ujita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3MmNmYWM3NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ujita</dc:creator></item><item><title><![CDATA[なぜuseStateを乱用してしまうのか？宣言型UIで考える状態管理]]></title><description><![CDATA[
 はじめに
こんにちは、Recustomer株式会社でインターンとしてフロントエンド開発に取り組んでいるRyoheiです。フロントエンド開発を始めて1年が経ち、様々な技術に触れてきましたが、特にReactにおいて、useStateの使い方に疑問を抱くようになりました。
useStateはReactの基本的なフックであり、状態を管理するために非常に便利な機能ですが、手軽に使えるがゆえに、適切な使用方法を考えずに乱用してしまうことがあります。これにより、コードが複雑になりやすく、保守性や可読性が低下するリスクがあることを実感しています。
そこで、useStateの役割や効果的な使い方を調べ...]]></description><link>https://zenn.dev/recustomer/articles/bb7b1b23f7f442</link><guid isPermaLink="true">https://zenn.dev/recustomer/articles/bb7b1b23f7f442</guid><pubDate>Wed, 16 Oct 2024 02:12:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h6n-6eeC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2581%259CuseState%25E3%2582%2592%25E4%25B9%25B1%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%25E5%25AE%25A3%25E8%25A8%2580%25E5%259E%258BUI%25E3%2581%25A7%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Ryohei%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMyNWNjODQ5ZDEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Recustomer%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4YzZlNWFmZTAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ryohei</dc:creator></item><item><title><![CDATA[Static Assets を使って Cloudflare Workers で Remix を動かす]]></title><description><![CDATA[
 Cloudflare Workers の Static Assets
https://developers.cloudflare.com/workers/static-assets/
Cloudflare Workers の Static Assets 対応によって、Cloudflare Pages を使わなくとも、静的コンテンツ配布時にリクエスト回数を消費せずに済むようになりました。これによって Remix を Cloudflare で使用する場合に、Pages を使わなければならない理由が減りました。対応機能の面で見れば、Pages から Workers に移行するメリットが増え...]]></description><link>https://zenn.dev/sora_kumo/articles/cloudflare-workers-remix</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/cloudflare-workers-remix</guid><pubDate>Wed, 16 Oct 2024 00:17:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a_nnt9LV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Static%2520Assets%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520Cloudflare%2520Workers%2520%25E3%2581%25A7%2520Remix%2520%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[Nest.jsとPrismaをDockerで環境構築]]></title><description><![CDATA[どうも、フリーランスエンジニアのFUMIYAです！
Express.jsはよく触ってましたが、Nest.jsを触ったことがなかったのでローカルに立ち上げてみました。
本記事では、Nest.jsで開発をして学んだことをまとめていきます。

 Nest.jsとは？
Nest.jsとは、フロントエンドからバックエンドまで一貫してTypeScriptでの開発を実現できるExpressをコアにして作られているフレームワークです。

 目的
Nest.jsをdockerでローカルに立ち上げてAPIを開発することを目的とします。

 1. Docker構築

下記コマンドをルートディレクトリで実行し、...]]></description><link>https://zenn.dev/to_ichi/articles/cd584b54b31d70</link><guid isPermaLink="true">https://zenn.dev/to_ichi/articles/cd584b54b31d70</guid><pubDate>Tue, 15 Oct 2024 13:20:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_NnBBaOh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nest.js%25E3%2581%25A8Prisma%25E3%2582%2592Docker%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:FUMIYA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdMNXdVSWlyUms0bV9FM0NnSmxGNXFINnhsaFBUZzdJYVFQNEd1MUtXVVYwVkZRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FUMIYA</dc:creator></item><item><title><![CDATA[Next.jsのディレクトリ構成を悩んだ結果…]]></title><description><![CDATA[こんにちは、大学1年のはるです
記事書くのも初めてだし、技術力も低いので、広〜い心で見てください

 テーマ
自由度の高いNext.jsのディレクトリ構成をどうしようってなった話

 使った技術周り

Next.js (AppRouter)
外部API

AppRouterですが、外部に用意されたAPIを使うためフロント目的のみで利用しています
!
あくまで今回自分が必要な要件に合わせて選択した構成です


 最終的な構成
├ app
│  ├ layout.tsx
│  ├ page.tsx  // それぞれのページも
│  └ components
│        ├ elemen...]]></description><link>https://zenn.dev/harurahu/articles/cdb1c16bd0b636</link><guid isPermaLink="true">https://zenn.dev/harurahu/articles/cdb1c16bd0b636</guid><pubDate>Tue, 15 Oct 2024 12:23:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6T2p8EML--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%25E3%2582%2592%25E6%2582%25A9%25E3%2582%2593%25E3%2581%25A0%25E7%25B5%2590%25E6%259E%259C%25E2%2580%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlYjJhNGU5NGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はる</dc:creator></item><item><title><![CDATA[靴をなくしたので、アプリを作ることにした vol1]]></title><description><![CDATA[
 靴をなくした
今日、靴をなくした。靴をなくした人が身近にいる人がどのくらいいるだろうか。靴がなくなったことよりも、なくしてしまった事実にがっかりしている。海外に３回行ったことがあるが、全てパスポートを無くしている。嫁から記念日にもらったネックレスも無くした。ネックレスを無くした時に、結婚指輪を外して、嫁に預けた。絶対に無くすと思ったから。先週の東京出張で、嫁が遠出する時には指輪をつけていって欲しがるのでつけていった。帰りの新幹線でなんか窮屈に感じて鞄にしまった。それを今思い出して、指輪がなくなっていないことに心底ほっとしている。
くらいに僕は物忘れがひどい。自身を ADHD という人...]]></description><link>https://zenn.dev/tattu/articles/lost-and-found-1</link><guid isPermaLink="true">https://zenn.dev/tattu/articles/lost-and-found-1</guid><pubDate>Tue, 15 Oct 2024 08:37:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Gr0aijfz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%25B4%25E3%2582%2592%25E3%2581%25AA%25E3%2581%258F%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%2520vol1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:katayama8000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmZmRhNTA5ZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>katayama8000</dc:creator></item><item><title><![CDATA[Astro, SolidJS で個人ブログを制作しました]]></title><description><![CDATA[S.Inoue と申します。非情報系の大学生ながら個人的に Web 制作に取り組んでおり、大学卒業という節目を迎えるにあたって何か新しく作りたいと思っていました。
特に、精力的に取り組んできた（と思っている）Web フロントエンドの分野でいくつか触ってみたい技術があり、また、以前作ったブログのリプレイスを行うも不満が残る部分が多かったため、いっそ新しく作り直そうということで Astro と SolidJS を使ったブログを制作 しました しております ので、紹介させていただきます。
作っているもの：
https://siwl.dev

 採用した技術

 フレームワーク

 Astro
...]]></description><link>https://zenn.dev/s_inoue0108/articles/blog-renewal-note</link><guid isPermaLink="true">https://zenn.dev/s_inoue0108/articles/blog-renewal-note</guid><pubDate>Tue, 15 Oct 2024 07:29:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2lFzBUuN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Astro%252C%2520SolidJS%2520%25E3%2581%25A7%25E5%2580%258B%25E4%25BA%25BA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592%25E5%2588%25B6%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:S.Inoue%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlZTc2ZmE4NzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>S.Inoue</dc:creator></item><item><title><![CDATA[Ionic AngularでOnPush変更検知にマイグレーションする]]></title><description><![CDATA[Ionic Angularでは、以前は「OnPush変更検知は予期せぬ不具合が起きる可能性があるから使わないでね」とされていました。しかし、ドキュメントを読み直したところ、現在ではOnPush変更検知が使えない箇所が明記されており、それ以外では問題なく使えそうです。

ion-nav または ion-router-outlet を使用するコンポーネントは、 OnPush 変更検出方式を使用しないでください。 ngOnInit などのライフサイクル・フックが実行されなくなります。また、非同期状態の変更は正しくレンダリングされない場合があります。
https://ionicframework...]]></description><link>https://zenn.dev/rdlabo/articles/c6623c6ccc16dd</link><guid isPermaLink="true">https://zenn.dev/rdlabo/articles/c6623c6ccc16dd</guid><pubDate>Tue, 15 Oct 2024 06:30:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YQ5oPDyV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ionic%2520Angular%25E3%2581%25A7OnPush%25E5%25A4%2589%25E6%259B%25B4%25E6%25A4%259C%25E7%259F%25A5%25E3%2581%25AB%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A6%258A%25E5%258E%259F%25E6%2598%258C%25E5%25BD%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hPaXJOMUlrUWZNc0J2Vlljc1NzOGRGYW9USjV1TnZNTHF5TUp4cWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>榊原昌彦</dc:creator></item><item><title><![CDATA[学習のすすめになるJS（TypeScript）ライブラリ2選]]></title><description><![CDATA[
 素朴なライブラリを読むのは学習に大変おすすめ
ReactやVueのない純粋なJavaScriptコードを見るのであればこれらの素朴なライブラリをチェックするのは学習の面からとても大変おすすめです。
そんな初心者や読みやすく、意外に知られていない（筆者も今日知りました）ライブラリをいくつか紹介します。
これらのコードは1ファイル、index.ts を読むだけで、いわゆるフロントエンドフレームワークやライブラリに左右されない素朴なTypeScript(JavaScript)のコードを見ることができます。
知られていないといっても開発元はGitHubであり、一定の品質は担保されていると思っ...]]></description><link>https://zenn.dev/osiro/articles/f6bb1748305ce5</link><guid isPermaLink="true">https://zenn.dev/osiro/articles/f6bb1748305ce5</guid><pubDate>Tue, 15 Oct 2024 01:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EfnsM7KO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25AE%25E3%2581%2599%25E3%2581%2599%25E3%2582%2581%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258BJS%25EF%25BC%2588TypeScript%25EF%25BC%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA2%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:webuilder240%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxNWM3OGQwOWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:OSIRO%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5OWUzODgyNWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>webuilder240</dc:creator></item><item><title><![CDATA[Prisma Accelerate の Self Hosting で Cloudflare + Remix + PostgreSQL]]></title><description><![CDATA[
 Prisma Accelerate の Self Hosting の必要性
Prisma Client でクエリを作ると、Prisma Engine を介して、各 DB に対応した SQL に変換されます。Prisma Engine は Rust で記述されており、環境ごとにバイナリが用意されています。しかし Cloudflare Workers/Pages や Vercel Edge Functions、Deno などではネイティブのバイナリが使用できないため、WebAssembly 版の Prisma Engine が提供されています。ただ、WebAssembly 版はサイズが大...]]></description><link>https://zenn.dev/sora_kumo/articles/prisma-accelerate-self-hosted</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/prisma-accelerate-self-hosted</guid><pubDate>Mon, 14 Oct 2024 23:41:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ENfU9zL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%2520Accelerate%2520%25E3%2581%25AE%2520Self%2520Hosting%2520%25E3%2581%25A7%2520Cloudflare%2520%252B%2520Remix%2520%252B%2520P...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[Deno v2がリリース🎉 - Deno v1.0.0の頃からの変化と現在のプラクティスについて]]></title><description><![CDATA[Deno v2が正式にリリースされました🎉
https://deno.com/blog/v2.0
https://www.youtube.com/watch?v=d35SlRgVxT8
この記事では、Deno v1.0.0リリース時点からDeno v2.0.0までのリリースに渡って起きた大きな変更などについて、当時の状況と比較しつつまとめます。

 GoスタイルAPIの見直し - Web標準への準拠を高める

 Deno v1.0.0時点でのDenoのAPIの設計について
Deno v1.0.0の時点ではDenoにおける様々なAPIやコマンドなどがGoの影響を強く受けていました:
例)
...]]></description><link>https://zenn.dev/uki00a/articles/deno-v2-what-has-changed-from-v1</link><guid isPermaLink="true">https://zenn.dev/uki00a/articles/deno-v2-what-has-changed-from-v1</guid><pubDate>Mon, 14 Oct 2024 23:21:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h-ughzyX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520v2%25E3%2581%258C%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%2520%2520-%2520Deno%2520v1.0.0%25E3%2581%25AE%25E9%25A0%2583%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E5%25A4%2589%25E5%258C%2596%25E3%2581%25A8%25E7%258F%25BE%25E5%259C%25A8%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:uki00a%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlMzg5NzFkZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>uki00a</dc:creator></item></channel></rss>