<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 15 Mar 2025 11:42:31 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[プログラミング自己主導学習 [Java] @NoArgsConstructorと@AllArgsConstructorの役割]]></title><description><![CDATA[
 1. @NoArgsConstructor

役割

パラメータのない基本生成者(No-Args-Constructor)を自動的に生成する。
JPAエンティティや直列化などのために基本生成者が必要な場合に有用。
import lombok.NoArgsConstructor;

@NoArgsConstructor
public class User {
    private String name;
    private int age;
}

public User() {}  // 基本生成者が自動的に生成
// クラスにfinal フィールドがある場合、基本的にコンパイ...]]></description><link>https://zenn.dev/shubbydobob/articles/8c0dee3810c54a</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/8c0dee3810c54a</guid><pubDate>Fri, 14 Mar 2025 13:44:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4V-iFSQc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJava%255D%2520%2540NoArgsConstructor%25E3%2581%25A8%2540AllArgsConstruct...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[JavaのGC：ZGCとは？]]></title><description><![CDATA[
 はじめに
はじめまして、三菱UFJインフォメーションテクノロジーの田中です。
最近、Javaアプリケーションのパフォーマンス計測に関わる機会があり、特にガベージコレクション（GC）の重要性を再認識しました。GCはJavaのパフォーマンスに大きな影響を与えるため、最新のGCアルゴリズムについて調べることにしました。
本記事では、Javaの歴史を振り返りながら、各バージョンで導入されたGCアルゴリズムについて詳しく解説します。
なお、調査したJavaはSun/Oracleのディストリビューションをベースに行いました。

 Javaの歴史
Javaの各バージョンの概要とGCのアルゴリズムを...]]></description><link>https://zenn.dev/muit_techblog/articles/11c4323fcbc96f</link><guid isPermaLink="true">https://zenn.dev/muit_techblog/articles/11c4323fcbc96f</guid><pubDate>Fri, 14 Mar 2025 01:08:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dwhfB8gA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AEGC%25EF%25BC%259AZGC%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E7%2594%25B0%25E4%25B8%25AD%25E3%2580%2580%25E5%25AE%258F%25E6%2598%258E%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxZGYyYTRkNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25B8%2589%25E8%258F%25B1UFJ%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2583%2586...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSy1fMzVwdVVlN25jZXVjX3AtVURxcUVFbW9yUlBxYm9zbHFFVFRQQktEQkx1ell3PXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>田中　宏明</dc:creator></item><item><title><![CDATA[リストに1000件分のランダム文字列を追加する方法]]></title><description><![CDATA['''
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
public class RandomStringGenerator {
public static void main(String[] args) {
List&lt;String&gt; randomStrings = generateRandomStrings(1000, 10);
    // 生成した文字列を確認（最初の10件を表示）
    for (int i = 0; i &lt; 10; i++) {
    ...]]></description><link>https://zenn.dev/ryudev2/articles/f4ad14ce327f6c</link><guid isPermaLink="true">https://zenn.dev/ryudev2/articles/f4ad14ce327f6c</guid><pubDate>Thu, 13 Mar 2025 01:56:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GQtJIE78--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AB1000%25E4%25BB%25B6%25E5%2588%2586%25E3%2581%25AE%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25A0%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2585%25E3%2583%25BC%25E3%2581%25BA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzA3U1dTSkM1V1dpZ1FWemR6LWJpZEpIelhQSWtpVGdSQ292emYzcWZUM195czN4OD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りゅーぺ</dc:creator></item><item><title><![CDATA[Java | ドメイン駆動設計とインターフェースの多重継承の活用]]></title><description><![CDATA[
 Java

 ドメイン駆動設計とインターフェースの多重継承の活用
ドメイン駆動設計（DDD）において、インターフェースの多重継承を活用した具体例。
この例では、エンティティ、リポジトリ、サービスの役割を持つインターフェースを定義し、それを実装するクラスを作成している。

DDDの構成要素




構成要素
内容




エンティティ
ユーザーや商品などの識別可能なオブジェクト。


リポジトリ
エンティティの永続化を管理するオブジェクト。


サービス
ビジネスロジックを実装するオブジェクト。




インターフェースの定義
エンティティ、リポジトリ、サービスのインターフェースを定義...]]></description><link>https://zenn.dev/v6qh2bxj/articles/fdb6f1c5a74dbd</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/articles/fdb6f1c5a74dbd</guid><pubDate>Wed, 12 Mar 2025 17:43:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7oINKq64--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%257C%2520%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E9%25A7%2586%25E5%258B%2595%25E8%25A8%25AD%25E8%25A8%2588%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E5%25A4%259A%25E9%2587%258D%25E7%25B6%2599%25E6%2589%25BF%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:v6qh2bxj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYmY4Njc4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[chat-gptによるJavaの学習ロードマップ]]></title><description><![CDATA[chat-gptに作ってもらった学習ロードマップをプログラミング初学者が勉強する試み
学んだ内容を随時リンクしていきます

 Javaの基本文法（基礎固め）
目標: Javaの基本的な構文と概念を理解する
学習内容:
•	Javaの特徴・Goとの違い（静的型付け、JVMなど）
•	変数・データ型・リテラル
•	演算子・制御構文（if, switch, for, while）
•	メソッドとスコープ（値渡し・参照渡しの違い）
•	配列・コレクション（ArrayList, HashMap）
⸻

 オブジェクト指向プログラミング（Goとの違いを意識）
目標: Javaのオブジェクト指向の基礎...]]></description><link>https://zenn.dev/miya_miya/articles/fd4726d595c8ad</link><guid isPermaLink="true">https://zenn.dev/miya_miya/articles/fd4726d595c8ad</guid><pubDate>Wed, 12 Mar 2025 14:08:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9uI22Qpj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chat-gpt%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BJava%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBLNnZLRXFYSzJFZVBmSG1WYnNuSXFvWlA2V1J3a2ZoV0FXeXdsZFp1NV92bjdnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miya</dc:creator></item><item><title><![CDATA[Java Sliver 勉強⑤]]></title><description><![CDATA[【出題項目の例】

Javaの基本データ型と文字列の操作
演算子と制御構造
配列の操作
クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム


 カプセル化の適用

アクセス修飾子の使用
クラスに対するカプセル化の適用


 アクセス修飾子の使用
Java のアクセス修飾子（Access Modifier：액세스 한정자）は、クラス・フィールド・メソッドのアクセス範囲を制限するためのキーワード。
適切に使うことでデータの隠蔽（カプセル化）や安全なコード設計が可能になる。


 アクセ...]]></description><link>https://zenn.dev/hyoni/articles/4e9b8fc19bb764</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/4e9b8fc19bb764</guid><pubDate>Wed, 12 Mar 2025 01:18:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yVWERxwt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%2520Sliver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[JUnitを使用した単体テストの基本]]></title><description><![CDATA[
 はじめに
こんにちは。私は現在新卒入社1年目で、スマホアプリの実装・テストを主に担当しています。
実装を行う中で、一番難しいと感じたのが、JUnitの単体テストだったので、自分の勉強もかねてまとめたいと思います。

 単体テストとは
単体テストとは、関数やメソッド単位で行われる小さい単位でのテストです。
小さな単位であらかじめ不具合を見つけることで、早期にバグの修正ができ、プログラム品質が上がるというメリットがあります。
(出典：Udemyメディア 「単体テストとは？メリットや手法、仕様書について詳しく解説！」
https://udemy.benesse.co.jp/developm...]]></description><link>https://zenn.dev/muit_techblog/articles/6668eb6bc88d0a</link><guid isPermaLink="true">https://zenn.dev/muit_techblog/articles/6668eb6bc88d0a</guid><pubDate>Tue, 11 Mar 2025 09:20:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gTEvyWSH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JUnit%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E5%258D%2598%25E4%25BD%2593%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%2590%2591%25E5%25B9%25B3%25E3%2580%2580%25E5%259C%25AD%25E4%25BD%2591%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxZGYyYTRkNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25B8%2589%25E8%258F%25B1UFJ%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2583%2586...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnBzTFVneFhQOE91RGV2cUYzbkRibXZjcENpMnBGcmFBVC13YnNnSlBleTl3V0pnPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>向平　圭佑</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習[Spring Framework] @Configuration]]></title><description><![CDATA[@Configuration基本的役割
Spring frameworkで使用されるエノテーションで、Spring IoCコンテナにビーン(Bean)を
登録するクラスであることを示します。
このアノテーションが宣言されたクラス内で@Beanを使用して直接スプリングビンを定義できます。



Springが管理するBeanを定義するクラスです。


内部で@Beanメソッドを使用してSpringビーンを登録することができます。


Springコンテナが該当クラスを読み、空のオブジェクトを作成および管理します


XML設定に代わるJavaベース設定


@Componentと違い、受動...]]></description><link>https://zenn.dev/shubbydobob/articles/6edf15a12fbbed</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/6edf15a12fbbed</guid><pubDate>Tue, 11 Mar 2025 07:27:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NX4rZ5Nd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%255BSpring%2520Framework%255D%2520%2540Configuration%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[【超初心者向け】Hello Worldを書いてみよう！（Python, JavaScript, Java）]]></title><description><![CDATA[プログラミングを始める時、最初に書くのが「Hello World」プログラムです。これは画面に「Hello World」という文字を表示する、最もシンプルなプログラムです。この記事では、3つの主要なプログラミング言語でHello Worldを書く方法を解説します。

 なぜHello Worldから始めるの？
Hello Worldプログラムには、以下のような意義があります：


最小限のコードで動作確認ができる

開発環境が正しく設定されているか確認できる
プログラムの基本的な構造を理解できる



プログラミングの第一歩として最適

成功体験を得やすい
言語の基本的な文法に触れられる...]]></description><link>https://zenn.dev/homatsu_tech/articles/40e7bfdfa62eae</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/40e7bfdfa62eae</guid><pubDate>Mon, 10 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l9vQ6VSI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E8%25B6%2585%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Hello%2520World%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25EF%25BC%2588Python%252C%2520JavaScript%252C%2520Java%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[Arrays.asListとList.of]]></title><description><![CDATA[
 はじめに
Listを作成する際に使用する、Arrays.asListとList.ofの違いやどちらを選択すればいいのかが曖昧だったため調査、整理を行いました。
誤りがありましたらコメントいただけますと幸いです。

 想定読者

Java初学者

 Arrays.asListとは

配列を操作するためのArraysクラスで定義されているasListメソッド。
可変のリスト(mutable)を返す。
リストの仮面を被った配列。


 List.ofとは

Java9で追加された、Listクラスのofメソッド。
不変のリスト(immutable)を返す。
作成時には、新しくリストが作成され...]]></description><link>https://zenn.dev/chibitaka/articles/1a0070eb9c45aa</link><guid isPermaLink="true">https://zenn.dev/chibitaka/articles/1a0070eb9c45aa</guid><pubDate>Mon, 10 Mar 2025 06:56:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W_6wK5js--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Arrays.asList%25E3%2581%25A8List.of%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%25B3%25E3%2581%259F%25E3%2581%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2ZDRjOWNlZjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちびたか</dc:creator></item><item><title><![CDATA[【Java】クラス入門 ― オブジェクト指向の基礎を最短で押さえる]]></title><description><![CDATA[クラスについて学び始めると、オブジェクト指向や継承、例外処理など新しい概念が次々と登場して混乱しがちです。本書では初心者向けに、それらの基本的な仕組みを「オブジェクトを使う側」の視点に絞って、コンパクトに整理しました。

Java のクラスやオブジェクトに初めて触れる人、一度学んだけれど整理し直したい人、限られた時間で要点を押さえたい人に向いています。説明は必要最小限にとどめているため、初めて学ぶ人は他の参考書などもあわせて読むことをおすすめします。

本書は、営利・非営利を問わず自由に利用・改変いただけます。クレジット表記も不要ですが、原著者を偽ることはご遠慮ください。]]></description><link>https://zenn.dev/gochaism/books/5a0ce59c91c3d7</link><guid isPermaLink="true">https://zenn.dev/gochaism/books/5a0ce59c91c3d7</guid><pubDate>Mon, 10 Mar 2025 02:34:52 GMT</pubDate><dc:creator>ごちゃ</dc:creator></item><item><title><![CDATA[Java Silver 勉強④]]></title><description><![CDATA[【出題項目の例】

Javaの基本データ型と文字列の操作
演算子と制御構造
配列の操作
クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム


 クラスの宣言とインスタンスの使用

 1. クラスの基本構造

public class Sample {
    // フィールド (メンバ変数)
    int num;
    String text;

    // コンストラクタ
    public Sample(int num, String text) {
        ...]]></description><link>https://zenn.dev/hyoni/articles/2dfbef232b1f40</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/2dfbef232b1f40</guid><pubDate>Mon, 10 Mar 2025 00:53:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OniYN1lK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%2520Silver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[HAPI FHIR入門 - 医療情報交換の標準化を実現するOSS]]></title><description><![CDATA[
 はじめに
医療情報システムの世界では、異なるシステム間でのデータ交換が長年の課題でした。患者情報、診療記録、検査結果など、様々な医療データが異なるフォーマットで管理されていると、医療機関間の連携や研究データの活用が困難になります。
この課題を解決するために登場したのが、HL7 FHIRという国際標準規格です。HL7 FHIRについては、以前の記事で解説しているので、興味がある方はそちらも参考にしてください。そしてHAPI FHIRは、このFHIR規格をJavaで実装した強力なオープンソースライブラリです。
今回は、HAPI FHIRの概要から簡単な実装例まで、初心者にも分かりやすく解...]]></description><link>https://zenn.dev/ispec_inc/articles/hapi-fhir-introduction</link><guid isPermaLink="true">https://zenn.dev/ispec_inc/articles/hapi-fhir-introduction</guid><pubDate>Sat, 08 Mar 2025 13:08:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pd3qWAJa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HAPI%2520FHIR%25E5%2585%25A5%25E9%2596%2580%2520-%2520%25E5%258C%25BB%25E7%2599%2582%25E6%2583%2585%25E5%25A0%25B1%25E4%25BA%25A4%25E6%258F%259B%25E3%2581%25AE%25E6%25A8%2599%25E6%25BA%2596%25E5%258C%2596%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258BOSS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Masaharu%2520Hori%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmN2Y5YzE4ZTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ispec%2520inc.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsMTBYY3R4TlFyTVZlODUyXzd4ZUtRNEJOR19PaVI2VU1nQlhlaGc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaharu Hori</dc:creator></item><item><title><![CDATA[JavaのHikariCPでConnectionの状態を確認する方法]]></title><description><![CDATA[
 はじめに
HikariCP の Connection Pool を使用してDBアクセスをする際に、取得した Connection が有効かどうかを確認する方法について調査しました。

 HikariCPのデフォルト動作
HikariCP は特別な設定をしなくても、コネクションの有効性を自動でチェックする仕組みがあります。
HikariCP では、以下のタイミングで Connection の有効性チェックが行われます。

Connection をプールから取得するとき
dataSource.getConnection() を呼び出す際、HikariCP は無効な Connection ...]]></description><link>https://zenn.dev/rescuenow/articles/4dac64ab021528</link><guid isPermaLink="true">https://zenn.dev/rescuenow/articles/4dac64ab021528</guid><pubDate>Fri, 07 Mar 2025 08:16:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--usg21dpT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AEHikariCP%25E3%2581%25A7Connection%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E3%2582%2592%25E7%25A2%25BA%25E8%25AA%258D%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nmatsu%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NWI1N2NlZmMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25AC%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%258A%25E3%2582%25A6%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzOThkNmZjMGEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nmatsu</dc:creator></item><item><title><![CDATA[Java | 2次元リスト]]></title><description><![CDATA[
]]></description><link>https://zenn.dev/v6qh2bxj/articles/385f214e54f671</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/articles/385f214e54f671</guid><pubDate>Thu, 06 Mar 2025 16:10:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yKKvl852--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%257C%25202%25E6%25AC%25A1%25E5%2585%2583%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:v6qh2bxj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYmY4Njc4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[Java開発者が勉強したJava vs Kotlin① 基礎文法（変数とNull処理）]]></title><description><![CDATA[
 はじめに
ひさしぶりの投稿です！
去年から、JavaとSpringを用いたプロジェクトに参加し、3月末にプロジェクト終わりますが、
Kotlinに興味を覚え始めました。まだ、Javaの中でもマルチスレッド関連の知識は足りてないため、KotlinのCoroutineのような非同期処理までまとめることは難しいですが、自分なりにオンライン講座から勉強した内容をまとめ、シェアしたいと考えました。

 変数

 var &amp; val

variable.java
int number = 1;
final int number2 = 2;
int onlyDeclare;


varia...]]></description><link>https://zenn.dev/eldorado215/articles/67b534dd6444b2</link><guid isPermaLink="true">https://zenn.dev/eldorado215/articles/67b534dd6444b2</guid><pubDate>Thu, 06 Mar 2025 13:39:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Mhum-zNb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2581%258C%25E5%258B%2589%25E5%25BC%25B7%25E3%2581%2597%25E3%2581%259FJava%2520vs%2520Kotlin%25E2%2591%25A0%2520%25E5%259F%25BA%25E7%25A4%258E%25E6%2596%2587%25E6%25B3%2595%25EF%25BC%2588%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25A8Null%25E5%2587%25A6%25E7%2590%2586%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hyon%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczOTFmMzVlZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hyon🇰🇷</dc:creator></item><item><title><![CDATA[Java SE 11 Silver]]></title><description><![CDATA[Java SE 11 Silver勉強用。]]></description><link>https://zenn.dev/v6qh2bxj/books/5652a0929f2e36</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/books/5652a0929f2e36</guid><pubDate>Thu, 06 Mar 2025 13:05:35 GMT</pubDate><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[How to create a simple API in Spring boot]]></title><description><![CDATA[
 Environment

Windows11
maven: 3.9.9
Java 21


 Create a Spring Boot Project

Access: Spring Initializr

Select each item

Choose Spring Web


Push GENERATE button




 Open the Project

Open the project your IDE


 Create a simple REST Controller

src/main/java/myblog/myapi/controller/HelloCont...]]></description><link>https://zenn.dev/shelpro/articles/a35bdf4d20b24b</link><guid isPermaLink="true">https://zenn.dev/shelpro/articles/a35bdf4d20b24b</guid><pubDate>Thu, 06 Mar 2025 02:20:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6K6FGxo8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:How%2520to%2520create%2520a%2520simple%2520API%2520in%2520Spring%2520boot%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shelner%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHAxZTQzc3N1YWdkLTJzSVE0bl9ZaWdQTlFrQmN4XzNFWGRfMHZBWDFnY3F2QlhyYz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shelner</dc:creator></item><item><title><![CDATA[Java Silver 勉強③]]></title><description><![CDATA[【出題項目の例】

Javaの基本データ型と文字列の操作
演算子と制御構造
⭐️配列の操作

クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム


 演算子と制御構造

 1. 演算子 (Operators)
Javaにはさまざまな演算子があります。以下に代表的なものを紹介します。

 (1) 算術演算子


+ : 加算

- : 減算

* : 乗算

/ : 除算

% : 剰余（余り）

例:
int a = 10, b = 3;
System.out.println(a ...]]></description><link>https://zenn.dev/hyoni/articles/6c5819a1f32e13</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/6c5819a1f32e13</guid><pubDate>Wed, 05 Mar 2025 04:45:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bHq-LEMw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%2520Silver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[IT技術解説①：Javaとは何か？]]></title><description><![CDATA[
 はじめに
Javaは1990年代初頭、サン・マイクロシステムズによる「Oak」というプロジェクトが源流となって開発されました。当時は家庭用機器や組み込み機器へのソフトウェア導入が増えつつあり、CやC++のようなネイティブ言語ではハードウェアに応じた移植作業やバッファオーバーフローといったメモリ管理のリスクが目立っていました。そこで、プラットフォームに依存せず動作し、安全かつ効率的に開発できる言語が求められたのです。Javaは「Write Once, Run Anywhere」という標語を掲げ、こうした課題の解決を目的として登場しました。しかし、その後の市場の変化によって、Javaが想...]]></description><link>https://zenn.dev/pdfractal/articles/7cb009e7724620</link><guid isPermaLink="true">https://zenn.dev/pdfractal/articles/7cb009e7724620</guid><pubDate>Tue, 04 Mar 2025 16:02:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ty0SWFVf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IT%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%25E2%2591%25A0%25EF%25BC%259AJava%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pdfractal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExMjhiODE1ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pdfractal</dc:creator></item></channel></rss>