<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/01c7f20365.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 29 Dec 2024 04:00:22 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dockerで複数 GitHub アカウントを簡単に運用　設定不要すぐ運用可能]]></title><description><![CDATA[
 概要
本記事では、Alpine Linux をベースにして最新バージョンの Git を含む軽量 Docker イメージを紹介します。
複数の GitHub アカウントを簡単に運用する方法の一例として、フォルダごとの .git/config やカスタム .gitconfig ファイルの活用法もあわせて解説します。


GitHub リポジトリ: https://github.com/softjapan/git


Docker Hub リポジトリ: https://hub.docker.com/r/softjpn/git



 使い方

 Docker Hub からプル
docker...]]></description><link>https://zenn.dev/japan/articles/625c8cf818c899</link><guid isPermaLink="true">https://zenn.dev/japan/articles/625c8cf818c899</guid><pubDate>Sun, 29 Dec 2024 02:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s7qsT06H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%2520GitHub%2520%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E9%2581%258B%25E7%2594%25A8%25E3%2580%2580%25E8%25A8%25AD%25E5%25AE%259A%25E4%25B8%258D%25E8%25A6%2581%25E3%2581%2599%25E3%2581%2590%25E9%2581%258B%25E7%2594%25A8%25E5%258F%25AF%25E8%2583%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SOFTBASE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmODJiNmYwZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SOFTBASE</dc:creator></item><item><title><![CDATA[Dockerfileのフロントエンドとバックエンドの構築、命令コマンドの使い方について]]></title><description><![CDATA[Dockerfileは、アプリケーションの実行環境を作るための「レシピ」のようなものです。この記事では、私がフロントエンドとバックエンド用に作成したDockerfileをもとに、その内容や命令コマンドの学習内容を記録します。

 フロントエンドのDockerfileを解説
Vue.jsを使用したフロントエンドをDockerで動かすDockerfileのコードを下のようにします。

Dockerfile
FROM node:18.17.1

RUN apt-get update &amp;&amp; yarn global add @vue/cli

RUN mkdir -p /front...]]></description><link>https://zenn.dev/toshi052312/articles/8ec413b47afb90</link><guid isPermaLink="true">https://zenn.dev/toshi052312/articles/8ec413b47afb90</guid><pubDate>Sun, 29 Dec 2024 01:53:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W880NOp0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dockerfile%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A8%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%25E3%2580%2581%25E5%2591%25BD%25E4%25BB%25A4%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:toshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyN2FlNzg3NGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>toshi</dc:creator></item><item><title><![CDATA[Docker]]></title><description><![CDATA[
 Docker



]]></description><link>https://zenn.dev/v6qh2bxj/articles/a14a462967b7b6</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/articles/a14a462967b7b6</guid><pubDate>Sat, 28 Dec 2024 19:20:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QhRMJuot--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:Docker%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:v6qh2bxj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYmY4Njc4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[PHP × Node.js 開発環境を一体化！Docker でラクラク Laravel 開発]]></title><description><![CDATA[
 PHP × Node.js 開発環境を一体化！Docker でラクラク Laravel 開発
Docker 上で PHP と Node.js の両方が使える便利なイメージを紹介します。softjpn/laravel-nodejs-dev は、php:8.2-fpm をベースにして、Laravel や Composer、Git、Node.js &amp; npm などの主要ツールをあらかじめインストールしたものです。このイメージを使えば、ローカル環境にこれらのツールをひとつずつインストールする必要がありません。


 このイメージに含まれているもの

PHP 8.2

Composer...]]></description><link>https://zenn.dev/japan/articles/3467cca2ea5bb2</link><guid isPermaLink="true">https://zenn.dev/japan/articles/3467cca2ea5bb2</guid><pubDate>Sat, 28 Dec 2024 17:12:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZbFMS58g--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PHP%2520%25C3%2597%2520Node.js%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E4%25B8%2580%25E4%25BD%2593%25E5%258C%2596%25EF%25BC%2581Docker%2520%25E3%2581%25A7%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25AF%2520Laravel%2520%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SOFTBASE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmODJiNmYwZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SOFTBASE</dc:creator></item><item><title><![CDATA[Docker Desktop上のKubernetesを利用]]></title><description><![CDATA[
 はじめに
久しぶりにKubernetesを触ってみたので備忘録として残す。
まえにMinikubeを試したが、今回はDocker Desktop上に作成できるKubernetesクラスタで試してみた。

 TL;DR
Docker Desktop上でKubernetesクラスタを有効にして、Dashboadまでアクセス。

 前提環境

OS: Windows 11
Docker Desktop: 4.37.1
Docker: 27.4.0
Kubernetes: 1.30.5


 Docker Desktop上でKubernetesクラスタの有効化

 (前提)Docker De...]]></description><link>https://zenn.dev/rihito/articles/ade5fe0249e3d2</link><guid isPermaLink="true">https://zenn.dev/rihito/articles/ade5fe0249e3d2</guid><pubDate>Sat, 28 Dec 2024 13:56:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EPbV-NG5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Desktop%25E4%25B8%258A%25E3%2581%25AEKubernetes%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kichi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhZjBjYjJiOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kichi</dc:creator></item><item><title><![CDATA[Dockerコンテナ負荷をRustで取得&Next.jsで表示]]></title><description><![CDATA[
 シンプルなプログラムで本番環境のサーバ負荷ログを取りたい
と思って、最初は Linux 環境の /proc 以下にある疑似ファイルを読む Rust コードを書こうとしていました。

本番環境では Docker で管理しているため、途中まで作ったところで 自分の本当に欲しいもののはちょっと違う気がする...... となり、Docker API を使ったコードに書き直しました。
Dockerを使っている皆さんお馴染みの、/var/run/docker.sock は REST API エンドポイントとして使えます。

Githubリポジトリはこちら。
https://github.com/...]]></description><link>https://zenn.dev/daiius/articles/8f38ae1893c166</link><guid isPermaLink="true">https://zenn.dev/daiius/articles/8f38ae1893c166</guid><pubDate>Sat, 28 Dec 2024 12:19:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E7p9g_Ib--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E8%25B2%25A0%25E8%258D%25B7%25E3%2582%2592Rust%25E3%2581%25A7%25E5%258F%2596%25E5%25BE%2597%2526Next.js%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daiius%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MzM1ZDg3MzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiius</dc:creator></item><item><title><![CDATA[Rancher Desktop のデフォルト設定は遅い？]]></title><description><![CDATA[先日、Docker Desktop から Rancher Desktop へそのまま移行できるか試してみた という記事を書きましたが、その際に細かい設定はデフォルトのままで使い始めました。
少し使ってみて気づいたのは、ストレージ書き込み速度が遅いように感じることでした。そこで、仮想化エンジンとボリュームマウントの設定を見直してみました。

 環境

Apple M2 MacBook Air(24GB RAM)
OS: Sonoma


 まずは最適設定から掲載
Docker Desktop と同じ構成が選択できるので、基本的にはこれを適用します。

 エミュレーションの設定
Ranche...]]></description><link>https://zenn.dev/killinsun/articles/0644709b66776b</link><guid isPermaLink="true">https://zenn.dev/killinsun/articles/0644709b66776b</guid><pubDate>Sat, 28 Dec 2024 08:45:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M_tFkjj3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rancher%2520Desktop%2520%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25AF%25E9%2581%2585%25E3%2581%2584%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25A6%2596%25E7%2584%25A1%25E3%2581%2597%25E3%2582%25AD%25E3%2583%25AA%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmYTM3MDU1NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>首無しキリン</dc:creator></item><item><title><![CDATA[Dockerノート]]></title><description><![CDATA[
 はじめに
Dockerが苦手だったため学習した。Dockerでよく使うコマンドを備忘録のため記載。

 基礎事項や基本コマンド

 シェルとカーネルの役割

カーネル：PC上で唯一ハードウェアと会話できるソフトウェア
シェル：ヒューマンの入力値を、シェル言語を通じてカーネルに翻訳して伝達するもの

シェルのSTDINとSTDOUTをターミナルに繋げることを「TTYをアタッチする」という。
→TTYをターミナルにアタッチすることで、ターミナルを使ってバックグラウンドプロセスと会話できる。
ドッカーの中にシェルで入る時は次のコマンドを使う
docker exec --interactiv...]]></description><link>https://zenn.dev/yadonn/articles/617d21e275a23a</link><guid isPermaLink="true">https://zenn.dev/yadonn/articles/617d21e275a23a</guid><pubDate>Fri, 27 Dec 2024 16:41:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fHQMs_LW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Docker%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YADON%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVkOTAyMjM0YTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YADON</dc:creator></item><item><title><![CDATA[コンテナに ssh で接続する際ちょっと便利になる .ssh/config の書き方]]></title><description><![CDATA[ときには、コンテナに ssh で接続したいというときがあると思います。私の場合は devcontainer で作った開発環境へ ssh で入っているので毎日使っています。
https://zenn.dev/goropikari/articles/nvim_devcontainer
一つのコンテナに対して ssh をするくらいならよいですが、複数のコンテナに対して同時に ssh しようと思うと port が衝突しないように port forward のことを考えなければならず面倒です。
ならいっそ port forward なんてしなければいいわけですが、その時 .ssh/config を...]]></description><link>https://zenn.dev/goropikari/articles/1094a0bf17d9e5</link><guid isPermaLink="true">https://zenn.dev/goropikari/articles/1094a0bf17d9e5</guid><pubDate>Fri, 27 Dec 2024 12:40:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uEQ40ICp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AB%2520ssh%2520%25E3%2581%25A7%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%2520.ssh%252Fconfig%2520%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:goropikari%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg2NTIwMGI5YzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>goropikari</dc:creator></item><item><title><![CDATA[Docker Desktop から Rancher Desktop へそのまま移行できるか試してみた]]></title><description><![CDATA[
 はじめに
Docker Desktop は現在、一定規模の企業で利用する場合に有料プランへ移行する必要がある。元々 Docker Desktop 自体使うのを辞めたいという理由もあったが、Rancher Desktop が良いという噂を聞いたので、試してみた。
※ Docker Desktop 辞めたいよねという話は for Mac の場合は内部的に Hyperkit を用いた VM を使っているためだが、Rancher Desktop に関しても同様なので移行する理由としては弱い

 手順
まず rancher を cask 経由でインストールする。
brew install --...]]></description><link>https://zenn.dev/killinsun/articles/18d81f3fc2e600</link><guid isPermaLink="true">https://zenn.dev/killinsun/articles/18d81f3fc2e600</guid><pubDate>Fri, 27 Dec 2024 07:05:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KfvexSx4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520Desktop%2520%25E3%2581%258B%25E3%2582%2589%2520Rancher%2520Desktop%2520%25E3%2581%25B8%25E3%2581%259D%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25BE%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2581%258B%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25A6%2596%25E7%2584%25A1%25E3%2581%2597%25E3%2582%25AD%25E3%2583%25AA%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmYTM3MDU1NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>首無しキリン</dc:creator></item><item><title><![CDATA[同一インスタンスに複数の GPU コンテナをデプロイする【ECS on EC2】]]></title><description><![CDATA[
 はじめに
Amazon ECS(AWS Fargate ではなく EC2 で稼働) 上に GPU コンテナをデプロイしようとすると、「タスクが 1 インスタンスに 1 つしか立ち上がらない」問題にぶつかりました。コンテナを複数個起動してGPUリソースを共有したいのに、これじゃあECSにしてる意味ないじゃん！ってことで、EC2 上で GPU リソースを最大限に活用するための ECS コンテナ配置方法を解説したいと思います。

 前提: なぜ 1 インスタンスに 1 タスクしか起動しないのか？
考えられる理由は以下の通りです。

ECSサービスの「タスク配置」が複数のアベイラビリティーゾ...]]></description><link>https://zenn.dev/1mono2/articles/a99b7a9ca3abc3</link><guid isPermaLink="true">https://zenn.dev/1mono2/articles/a99b7a9ca3abc3</guid><pubDate>Fri, 27 Dec 2024 05:24:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KgnWNZtU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2590%258C%25E4%25B8%2580%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25AB%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%2520GPU%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%2592%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590ECS%2520on%2520EC2%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:1mono2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dTeENxcFE2VXBZX2dJa1E4cTBmVzBEbFpMTnpIc0FoZWl1czJNaUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>1mono2</dc:creator></item><item><title><![CDATA[act を使ってローカルマシンで CI/CD:Linux 使い（略）Advent Calendar 2024]]></title><description><![CDATA[
 はじめに
これは「Linux 使いになりたい人のための Advent Calendar 2024」の記事です。
筆者は、Web エンジニアを志望する人には、セルフホスト Git サービスを稼働させて利用することをオススメしています。もし Git を使ったことがないなら、Git を学ぶときに、セルフホスト Git サービスを稼働させることも視野に含めながら学習するのが効率的だと考えています。
セルフホスト Git サービスを稼働させると良い理由については、これまでもいくつか説明してきていますが、個人的に一番大きかったのは、個人開発でも CI/CD 環境が必須となる時代になっていると感じ...]]></description><link>https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_18</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_18</guid><pubDate>Tue, 24 Dec 2024 09:40:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ww__LtL4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:act%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%259E%25E3%2582%25B7%25E3%2583%25B3%25E3%2581%25A7%2520CI%252FCD%253ALinux%2520%25E4%25BD%25BF%25E3%2581%2584%25EF%25BC%2588%25E7%2595%25A5%25EF%25BC%2589Advent%2520Calendar%25202024%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[ghcr.io docker container registry 個人利用方法]]></title><description><![CDATA[GitHub Container Registry(ghcr.io)にDockerイメージをpushする手順 #DockerHub - Qiita と同じような内容。詳しく知りたい人はそっちのほうがいいかも。
以下にデモを短く書く。


前提: Macを使う。Docker Desktop が起動していて docker コマンドが利用できること。
なんでもいいので docker imageを用意する。今回は以下の手順で ghcr.io/hoshinotsuyoshi/busybox というイメージをこしらえる。 hoshinotsuyoshi は 私のGitHubのアカウント名。

# な...]]></description><link>https://zenn.dev/hoshinotsuyoshi/articles/917e8f3848b572</link><guid isPermaLink="true">https://zenn.dev/hoshinotsuyoshi/articles/917e8f3848b572</guid><pubDate>Tue, 24 Dec 2024 02:22:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rBHuN7dT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ghcr.io%2520docker%2520container%2520registry%2520%25E5%2580%258B%25E4%25BA%25BA%25E5%2588%25A9%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hoshinotsuyoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c5ZDgwZ3l0akF1UnlQREJ5cHdLdWNqLVhiVE1JQllEazhBNUFpM2c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hoshinotsuyoshi</dc:creator></item><item><title><![CDATA[kmyblueをdockerで立ち上げる個人的メモ]]></title><description><![CDATA[
 おことわり

これは私個人のメモであり、参考程度にしてください


 前提

dockerがインストール済み
cloudflaredを使用している
nginxは今回使用してません。


 一番最初にすること
git clone https://github.com/kmycode/mastodon/
cd mastodon
cp .env.production.sample .env.production

 docker-compose.ymlの書き替え
web/sidekiq
#build .
image: ghcr.io/lqvp/kmyblue-ghcr:latest-16
...]]></description><link>https://zenn.dev/il/articles/cf3fb397a07b8a</link><guid isPermaLink="true">https://zenn.dev/il/articles/cf3fb397a07b8a</guid><pubDate>Tue, 24 Dec 2024 02:10:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MxKFLKab--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:kmyblue%25E3%2582%2592docker%25E3%2581%25A7%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%2592%25E3%2582%258B%25E5%2580%258B%25E4%25BA%25BA%25E7%259A%2584%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:il2cpp%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkZmFhNmE0MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>il2cpp</dc:creator></item><item><title><![CDATA[GitHub ActionsでGoのコンテナイメージをビルド・プッシュする際のベストプラクティスを考える]]></title><description><![CDATA[この記事は MICIN Advent Calendar 2024 の 24日目の記事です。
https://adventar.org/calendars/10022
前回は菅原さんの、「MiROHAのエンジニアとして入社してみて」 でした。


 はじめに
本記事では、GitHub ActionsでGoのコンテナイメージをビルド・プッシュする際のベストプラクティスを検討、紹介します。特に、キャッシュをどう設定するかに主軸を置いて展開していきます。
Goのコンテナイメージのビルド・プッシュに関する公式ドキュメント、記事などはたくさんある一方で、実際のプロダクト開発でどうCIを組めばベストな...]]></description><link>https://zenn.dev/micin/articles/build-and-push-go-app-iamge-in-github-actions</link><guid isPermaLink="true">https://zenn.dev/micin/articles/build-and-push-go-app-iamge-in-github-actions</guid><pubDate>Tue, 24 Dec 2024 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lbQ8V3xB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%2520Actions%25E3%2581%25A7Go%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2583%25BB%25E3%2583%2597%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AE%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:abekoh%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmZDEzMmY4YTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BEMICIN%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczYTY0YzEyYjkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>abekoh</dc:creator></item><item><title><![CDATA[Podman DesktopとWSL2上のPodmanを同期したい]]></title><description><![CDATA[本記事は、某企業アドベントカレンダー2024の24日目の記事です。
クリスマスイブですね。メリークリスマス！🎅
有馬記念で8000円失いましたが、自分へのクリスマスプレゼントに熱いレースの観戦チケットを8000円で購入したと思えば痛くありません。
痛くなんて...痛くなんてないんだからね！！ないん..だからね...。
さて、本題に入ります。
Docker Desktopの代替としてPodman DesktopをWindows環境へ導入にするあたり、普段開発で用いているWSL2上のPodmanとPodman Desktopを同期したいと思いました。途中詰まったところもありましたが、同期され...]]></description><link>https://zenn.dev/coffee_peng/articles/b7f1fc243dcbf9</link><guid isPermaLink="true">https://zenn.dev/coffee_peng/articles/b7f1fc243dcbf9</guid><pubDate>Mon, 23 Dec 2024 15:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wKQw9M9U--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Podman%2520Desktop%25E3%2581%25A8WSL2%25E4%25B8%258A%25E3%2581%25AEPodman%25E3%2582%2592%25E5%2590%258C%25E6%259C%259F%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%258F%2588%25E7%2590%25B2%25E3%2583%259A%25E3%2583%25B3%25E3%2582%25AE%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlN2JjM2EwYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>珈琲ペンギン</dc:creator></item><item><title><![CDATA[Docker 版 GitLab Runner で CI/CD:Linux 使い（略）Advent Calendar 2024]]></title><description><![CDATA[
 はじめに
これは「Linux 使いになりたい人のための Advent Calendar 2024」の記事です。
筆者は、Web エンジニアを志望する人には、セルフホスト Git サービスを稼働させて利用することをオススメしています。もし Git を使ったことがないなら、Git を学ぶときに、セルフホスト Git サービスを稼働させることも視野に含めながら学習するのが効率的だと考えています。
!
この記事は、次の3つの記事の続きです。





 Docker 版 GitLab Runner で CI/CD
前回まで、3回に渡ってcfssl で自己認証局、サーバー証明書を用意し、それら...]]></description><link>https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_17</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20241201_advent_calendar_2024_17</guid><pubDate>Mon, 23 Dec 2024 10:05:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vcoeY3S_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%25E7%2589%2588%2520GitLab%2520Runner%2520%25E3%2581%25A7%2520CI%252FCD%253ALinux%2520%25E4%25BD%25BF%25E3%2581%2584%25EF%25BC%2588%25E7%2595%25A5%25EF%25BC%2589Advent%2520Calendar...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[大人の学びなおしDocker（3）～ネットワーク編～]]></title><description><![CDATA[
 はじめに
前回はDockerの基礎の中身について書きました。
今回はさらにDockerのネットワーク部分について調べたいと思います。

 Dockerの内部ネットワークはどうなっているのか
ホストとコンテナ・ネットワークの関係は以下のようになっています。

引用：https://github.com/KamranAzeem/learn-docker/blob/master/docs/images/docker-bridge-network-1.png
docker network lsでネットワーク一覧を表示すると、bridgeという名前のネットワークがデフォルトで作成されています。...]]></description><link>https://zenn.dev/collabostyle/articles/58e1e7fb0a1f62</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/58e1e7fb0a1f62</guid><pubDate>Mon, 23 Dec 2024 02:33:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ed8GWSAh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25A4%25A7%25E4%25BA%25BA%25E3%2581%25AE%25E5%25AD%25A6%25E3%2581%25B3%25E3%2581%25AA%25E3%2581%258A%25E3%2581%2597Docker%25EF%25BC%25883%25EF%25BC%2589%25EF%25BD%259E%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E7%25B7%25A8%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:goro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3NGE1ZTI4NzUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>goro</dc:creator></item><item><title><![CDATA[Cantaloupe: Microsoft Azure Blob Storageに格納した画像を配信する]]></title><description><![CDATA[
 概要
IIIFイメージサーバの一つであるCantaloupe Image Serverについて、Microsoft Azure Blob Storageに格納した画像を配信する方法の備忘録です。
以下のMicrosoft Azure Blob Storage版です。
https://zenn.dev/nakamura196/articles/b59cdbca551984

 方法
今回はDocker版を使用します。
https://zenn.dev/nakamura196/articles/35b2192171c29e
以下のリポジトリをクローンしてください。
https://git...]]></description><link>https://zenn.dev/nakamura196/articles/2141a75d1e3e42</link><guid isPermaLink="true">https://zenn.dev/nakamura196/articles/2141a75d1e3e42</guid><pubDate>Mon, 23 Dec 2024 02:21:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rx_EIRRg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cantaloupe%253A%2520Microsoft%2520Azure%2520Blob%2520Storage%25E3%2581%25AB%25E6%25A0%25BC%25E7%25B4%258D%25E3%2581%2597%25E3%2581%259F%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592%25E9%2585%258D%25E4%25BF%25A1%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakamura196%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pkd3BpX1gzTWIzV3VqTnVnV2tPTlJlU3VsNFNTN1BNMWlPQm9LRm5JPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakamura196</dc:creator></item><item><title><![CDATA[よく使う起動コマンド_フルスタックWebアプリ開発_2]]></title><description><![CDATA[
 1. GitHub
GitHub自体はローカルで起動するものではなく、Webサービスとして利用します。ローカルでの操作は、主にGitコマンドを通じて行います。以下に一般的なGit操作のコマンドを示します。
# リポジトリのクローン
git clone &lt;repository_url&gt;

# リポジトリのブランチを作成
git branch &lt;branch_name&gt;

# ブランチの切り替え
git checkout &lt;branch_name&gt;

# 変更内容のステージング
git add .

# 変更内容のコミット
git commit -m ...]]></description><link>https://zenn.dev/kikigigi_teck6/articles/7ada9a5b2ba30d</link><guid isPermaLink="true">https://zenn.dev/kikigigi_teck6/articles/7ada9a5b2ba30d</guid><pubDate>Sun, 22 Dec 2024 20:23:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yHfAbMop--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E8%25B5%25B7%25E5%258B%2595%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589_%25E3%2583%2595%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AFWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA_2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nana%2520%257C%2520GAI%2520%25E3%2583%25BB%25E8%2587%25AA%25E7%2584%25B6%25E8%25A8%2580%25E8%25AA%259E%25E3%2583%2597%25E3%2583%25AD...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I1ZmNiMzg0NmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nana | GAI ・自然言語プログラミング探究家</dc:creator></item></channel></rss>