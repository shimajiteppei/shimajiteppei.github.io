<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 12 Apr 2025 10:08:14 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[JS/TSにおける null と undefined]]></title><description><![CDATA[
 はじめに
TypeScript や JavaScript の学習を進めると、早い段階で「null」と「undefined」という 2 つの特殊な値に出会うこととなる。
これらは一見似ているようでありながら、意味や使われ方には明確な違いが存在する。
今回は、これらの違いについてみていこう。

 undefinedとは何か
undefined は、「値がまだ定義されていない状態」を示す。これは、JavaScript および TypeScript において、変数が宣言されたが値が代入されていない場合や、関数が明示的な戻り値を返さない場合などに自動的に割り当てられる。
const age;
...]]></description><link>https://zenn.dev/takumi_machino/articles/null-undefined</link><guid isPermaLink="true">https://zenn.dev/takumi_machino/articles/null-undefined</guid><pubDate>Sat, 12 Apr 2025 09:53:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---yQuYWWV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JS%252FTS%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%2520null%2520%25E3%2581%25A8%2520undefined%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2520machino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0MTRhMTA5ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi machino</dc:creator></item><item><title><![CDATA[ラムダ式とコールバック関数]]></title><description><![CDATA[
 はじめに
業務でソースコードを読む際によく登場するのが、「関数を関数に渡す」「その場で関数を書く」といった考え方であり、中でも ラムダ式 や コールバック関数 は、非常によく使われる重要な概念である。
本記事では、TypeScript を用いてこれらの基礎について丁寧に解説する。

 ラムダ式とは
MDN によるとラムダ式は以下のように定義されている。

アロー関数式は、従来の関数式の簡潔な代替構文

つまり無名関数（名前のない関数）を簡潔に書くための構文ということ。
MDN に記載されているアロー関数 とは、JavaScript / TypeScript におけるラムダ式の構文（記...]]></description><link>https://zenn.dev/takumi_machino/articles/lambda-expression-and-callback-function</link><guid isPermaLink="true">https://zenn.dev/takumi_machino/articles/lambda-expression-and-callback-function</guid><pubDate>Sat, 12 Apr 2025 09:53:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--upDzkvqH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2583%25A0%25E3%2583%2580%25E5%25BC%258F%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2520machino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0MTRhMTA5ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi machino</dc:creator></item><item><title><![CDATA[null演算子]]></title><description><![CDATA[
 はじめに
プログラミングにおいてnullは避けて通れない存在である。特に、オブジェクトや変数が未定義であることによって生じるバグは、開発の現場で非常に多く発生する。
そのため、C#や TypeScript では、null を安全に扱うための演算子や型の仕組みが用意されている。
この記事では、以下の null 関連機能について、C#と TypeScript の両方で解説する。

 null 合体演算子（??）
null 合体演算子（??） は、左辺の値が null または undefined の場合に、右辺の値を返す演算子である。null や未定義値に対するフォールバック（代替値）を簡...]]></description><link>https://zenn.dev/takumi_machino/articles/kinda-null-operator</link><guid isPermaLink="true">https://zenn.dev/takumi_machino/articles/kinda-null-operator</guid><pubDate>Sat, 12 Apr 2025 09:53:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BRcdv_wG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:null%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2520machino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0MTRhMTA5ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi machino</dc:creator></item><item><title><![CDATA[tsconfig.json paths やめ方]]></title><description><![CDATA[
tsconfig.jsonのpaths設定でimport文にエイリアスを使えるようにしたものの、


tscでトランスパイルするとエイリアス形式のパスは変換されない
パスの変換のためにtsconfig-pathsなどの追加ライブラリが必要で、ビルドコマンドが冗長になる
jestなどはpathsを反映するために追加設定が必要

などで微妙な気持ちになってきたことはありませんか。
一度導入すると利用箇所が結構多くなってきて手動で戻すには大変すぎるし、まあ動いてるからいいか...みたいな。
そんな時のために自動で相対パスに戻せるeslintプラグインを作ってみました。

 やめ方
@mkiz...]]></description><link>https://zenn.dev/mkizka/articles/a6148876fa46bd</link><guid isPermaLink="true">https://zenn.dev/mkizka/articles/a6148876fa46bd</guid><pubDate>Sat, 12 Apr 2025 08:21:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BplhIcQi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tsconfig.json%2520paths%2520%25E3%2582%2584%25E3%2582%2581%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mkizka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dmcTEtdFdzZUczQUFqVmw0dHhWb2xlM2dlY1JKVS1Bdm5WYWNEPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mkizka</dc:creator></item><item><title><![CDATA[子コンポーネントから親コンポーネントにstate経由で値を渡す]]></title><description><![CDATA[家計簿アプリを作っていて、全体の金額を表示している画面で、明細行を削除する場合、明細削除時に全体の金額からも数字を引く必要があります。
子コンポーネントの明細行の削除ボタン起因で、親コンポーネントの金額を更新します。制御はこちらの記事を参考にさせていただきました。
https://zenn.dev/stray/books/e3dbdf3f7aeac6/viewer/chapter8

 現状とやりたいこと

親で金額を表示している。
金額は親で定義したinterfaceと変数で管理する。
親から子にsetStateを渡す。
子のボタン押下を起点に親の表示を更新する。


 子コンポーネン...]]></description><link>https://zenn.dev/kaikusakari/articles/88ace58484551e</link><guid isPermaLink="true">https://zenn.dev/kaikusakari/articles/88ace58484551e</guid><pubDate>Sat, 12 Apr 2025 04:35:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V6aq-beN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AD%2590%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%258B%25E3%2582%2589%25E8%25A6%25AA%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25ABstate%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7%25E5%2580%25A4%25E3%2582%2592%25E6%25B8%25A1%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%258D%2589%25E8%258B%2585%2520%25E5%25BF%25AB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxNDVmZjk5MzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>草苅 快</dc:creator></item><item><title><![CDATA[Nintendo Switch Pro コントローラーで、Phaserのブラウザゲームを操作する方法]]></title><description><![CDATA[JavaScript製ブラウザゲームフレームワークであるPhaserには、Gamepad APIが存在しています。
このAPIを使うことでPCに接続されたコントローラーを使用して、ブラウザゲームを操作できます。
今回は、Nintendo Switch Pro コントローラーをPCに接続し、Phaserのブラウザゲームを操作してみます。

 成果物

デモURL：https://t-tonyo-maru.github.io/pub_game_phaser_nintendo-switch-pro-controller_test/

リポジトリURL：https://github.com/t-...]]></description><link>https://zenn.dev/t_tonyo_maru/articles/dacae1477fda3f</link><guid isPermaLink="true">https://zenn.dev/t_tonyo_maru/articles/dacae1477fda3f</guid><pubDate>Sat, 12 Apr 2025 04:30:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1Xz5Qq1t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nintendo%2520Switch%2520Pro%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25A7%25E3%2580%2581Phaser%25E3%2581%25AE%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2582%2593%25E3%2582%2588%25E3%2583%25BC%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhNjVjZjg3MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>とんよー。</dc:creator></item><item><title><![CDATA[シンプルな utility で豊かなTypeScriptライフを送る]]></title><description><![CDATA[こんにちは。最近はもっぱらフロントエンドではなく、バックエンドの設計を行っている、フロントエンドエンジニアである oosawy です。
今回は設計やロジックの実装をするにあたって、冗長で複雑なTypeScriptコードをシンプルな utility 関数で見通しをよくすることができたので共有したいと思います。

 Result 型からエラーを伝播させる utility
まずは Result 型のような表現からエラーを伝播させる utility 関数です。前述したように TypeScript/JavaScript にはエラーハンドリングに課題があります。Golangのように変数の再宣言ができ...]]></description><link>https://zenn.dev/yutaosawa/articles/81b38ec2eff3b1</link><guid isPermaLink="true">https://zenn.dev/yutaosawa/articles/81b38ec2eff3b1</guid><pubDate>Sat, 12 Apr 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZgzGInfF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%2520utility%2520%25E3%2581%25A7%25E8%25B1%258A%25E3%2581%258B%25E3%2581%25AATypeScript%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%2592%25E9%2580%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:oosawy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhYmI1NTUzNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>oosawy</dc:creator></item><item><title><![CDATA[168. Excel Sheet Column Title]]></title><description><![CDATA[整数 columnNumber が与えられたとき、それに対応する Excel シートの列タイトルを返してください。
例えば：
A -&gt; 1  
B -&gt; 2  
C -&gt; 3  
...  
Z -&gt; 26  
AA -&gt; 27  
AB -&gt; 28  
...  


 例 1:
入力: columnNumber = 1
出力: "A"


 例 2:
入力: columnNumber = 28
出力: "AB"


 例 3:
入力: columnNumber = 701
出力: "ZY"

]]></description><link>https://zenn.dev/idapan/articles/98afa55816490d</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/98afa55816490d</guid><pubDate>Fri, 11 Apr 2025 21:26:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mB8Kjbvf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:168.%2520Excel%2520Sheet%2520Column%2520Title%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[TypeScriptが書けるなら、日本語もわかる？Typed Japaneseがそれを可能にする（かも）]]></title><description><![CDATA[最近、Yifeng Wang 氏と Satoshi Terasaki 氏が Typed Japanese というプロジェクトを公開しました。このプロジェクトは、TypeScript の型システムを活用して、日本語学習を支援することを目的としています。
本プロジェクトでは、「TypeScript が書けるなら、日本語も理解できる」をスローガンに掲げています。これは、自然言語の文法規則を TypeScript の型システムに対応させるというアイデアに基づいています。
また、日本語の文法規則を DSL（ドメイン固有言語）として、TypeScript の型レベル（type-level）で記述する...]]></description><link>https://zenn.dev/damiaozi/articles/d8310a6dce6cb0</link><guid isPermaLink="true">https://zenn.dev/damiaozi/articles/d8310a6dce6cb0</guid><pubDate>Fri, 11 Apr 2025 16:03:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--faduoBSu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%258C%25E6%259B%25B8%25E3%2581%2591%25E3%2582%258B%25E3%2581%25AA%25E3%2582%2589%25E3%2580%2581%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%258B%25EF%25BC%259FTyped%2520Japanese%25E3%2581%258C%25E3%2581%259D%25E3%2582%258C%25E3%2582%2592%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2588%25E3%2581%258B%25E3%2582%2582%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:damiaozi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmtuU0d6aVNXNkRKbUt2X2NsX3lHM1Q3eW9TOUNyN3lrV24xS1BuWEZ2XzlrdlNOYz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>damiaozi</dc:creator></item><item><title><![CDATA[minio + aws-sdk-js v3で「MissingContentMD5」エラーが出る場合の対処]]></title><description><![CDATA[AWS SDK for JavaScript v3 + minioを使ってCI上でテストを実行していたところ、次のようなエラーに遭遇しました。調べても日本語での情報が無さそうだったので、私が実施した解決策を備忘録的に書きます。
MissingContentMD5: Missing required header for this request: Content-Md5.

 原因
このエラーは、SDKのバージョンv3.729.0以降で発生する可能性があります。というのも、公式ドキュメントにもあるように、v3.729.0からデフォルトのチェックサム方式が変更になったようです（以前はMD5...]]></description><link>https://zenn.dev/pirosikick/articles/520bd3bdf467f5</link><guid isPermaLink="true">https://zenn.dev/pirosikick/articles/520bd3bdf467f5</guid><pubDate>Fri, 11 Apr 2025 14:50:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iT-0TbHE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:minio%2520%252B%2520aws-sdk-js%2520v3%25E3%2581%25A7%25E3%2580%258CMissingContentMD5%25E3%2580%258D%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pirosikick%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxOGNmY2QyZGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pirosikick</dc:creator></item><item><title><![CDATA[郵便番号から住所自動入力フォームをReact + TypeScriptで簡単実装（jposta使用）]]></title><description><![CDATA[郵便番号を打ち込むと住所が自動入力されるフォームを作る機会があり、jpostaを使って簡単に作れたので、備忘として残しておきます。

 jpostaとは？
郵便番号をgetAddress()に、await getAddress('1000001')のように渡すと、
{ pref: "東京都", prefNum: 13, city: "千代田区", area: "千代田" }のように、
都道府県、都道府県コード、市区町村、町域の4つがオブジェクトとして返ってくるライブラリです。
(郵便番号はハイフンありでawait getAddress('100-0001')のように渡してもOKです。)
...]]></description><link>https://zenn.dev/ohimusdev46301/articles/b76eb42b05f9ea</link><guid isPermaLink="true">https://zenn.dev/ohimusdev46301/articles/b76eb42b05f9ea</guid><pubDate>Fri, 11 Apr 2025 10:28:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--v8Wa54ui--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2583%25B5%25E4%25BE%25BF%25E7%2595%25AA%25E5%258F%25B7%25E3%2581%258B%25E3%2582%2589%25E4%25BD%258F%25E6%2589%2580%25E8%2587%25AA%25E5%258B%2595%25E5%2585%25A5%25E5%258A%259B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592React%2520%252B%2520TypeScript%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E5%25AE%259F%25E8%25A3%2585%25EF%25BC%2588jposta%25E4%25BD%25BF%25E7%2594%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Wataru%2520Takiguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkOTBhM2EyYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Wataru Takiguchi</dc:creator></item><item><title><![CDATA[Zod v4のβ版が公開されたぞ！注目すべき変更点]]></title><description><![CDATA[
 はじめに
お疲れさまです！あつあつのご飯にスクランブルエッグを乗せました。Meloです。
Zodは、TypeScriptで人気の高いスキーマ定義＋バリデーションライブラリです。このたびv4のベータ版が公開され、いくつかの注目すべき変更が加えられました。この記事では、特に私が興味深いと思った変更点をピックアップして紹介します。
なお、現在はベータ版のため、以下のコマンドでインストールできます：

Zod4
npm upgrade zod@next


 1. 文字列バリデーション関数のトップレベル化
これまでメソッドチェーンで記述していた文字列バリデーション（z.string().em...]]></description><link>https://zenn.dev/codeunit/articles/f99e3546c1574a</link><guid isPermaLink="true">https://zenn.dev/codeunit/articles/f99e3546c1574a</guid><pubDate>Fri, 11 Apr 2025 09:20:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sgb6KsTV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%2520v4%25E3%2581%25AE%25CE%25B2%25E7%2589%2588%25E3%2581%258C%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%259E%25EF%25BC%2581%25E6%25B3%25A8%25E7%259B%25AE%25E3%2581%2599%25E3%2581%25B9%25E3%2581%258D%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Melo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlZDUzODU0OWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMTY4ZGYzMWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Melo</dc:creator></item><item><title><![CDATA[入力フォームのコンポーネントを作ってOmitを理解する]]></title><description><![CDATA[
 Omitってなんだ？

OmitはTypescriptにあるユーティリティ型（型を操作するための型）
Omitは型から任意のプロパティを除外できる


 使い方
 type Sample = Omit&lt;任意の型, '除外したいプロパティ名'&gt;

 実際に使ってみた
まず、Omitをどんな時に使ったかなんですが、下のフォームをコンポーネント化する時に使いました。RHFとShadcnUIを組み合わせてFormを作ると下のようなコードになると思うんですけどこれ4つとかになるとめっちゃだるくない？って感じました。

BeforeInputForm.tsx
 return (
  ...]]></description><link>https://zenn.dev/kasshii18/articles/dbd4e246e212f9</link><guid isPermaLink="true">https://zenn.dev/kasshii18/articles/dbd4e246e212f9</guid><pubDate>Fri, 11 Apr 2025 06:47:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ERsH-0Fp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E5%258A%259B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6Omit%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kasshii%25EF%25BC%2588%25E3%2581%258B%25E3%2581%25A3%25E3%2581%2597%25E3%2583%25BC%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4NDljMWEyNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kasshii（かっしー）</dc:creator></item><item><title><![CDATA[【TypeScript】アロー関数]]></title><description><![CDATA[
 初めに
こんにちは！TypeScriptにおけるアロー関数についてまとめていきたいと思います。

 TypeScript

 基本的な構文
const 関数名: (引数: 型, ...) =&gt; 戻り値の型 = (引数1, 引数2, ...) =&gt; 戻り値;

 例
const add = (a: number, b: number): number =&gt; a + b;
console.log(add(2, 3)); 
実行結果
5

a: number, b: number → 引数の型指定
: number → 返り値の型指定


 オプション引数
const g...]]></description><link>https://zenn.dev/daichi09167/articles/d851144a632442</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/d851144a632442</guid><pubDate>Fri, 11 Apr 2025 06:23:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UUg4en84--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi09167%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM3YTc4OTEwMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi09167</dc:creator></item><item><title><![CDATA[OpenAPIレスポンスバリデーションでの500エラー]]></title><description><![CDATA[
 始めに
typescriptを初めて触れていく中でAPIの開発も初めてでわからないことだらけの状態ですが
API開発のチュートリアルを進めていく中で　解決に特に時間がかかった今回の問題を備忘録として
残したいと思います。
この記事では、OpenAPIによるレスポンスバリデーションを導入している開発環境で、
ユニットテストは通るのに、結合テスト(APIテスト（controller経由）)では突然500エラーが返ってくるという現象に直面した話と、その背景・原因・対処方法を備忘録として整理します。

 背景
OpenAPIバリデーションを使うと、以下のように リクエスト・レスポンスが仕様と...]]></description><link>https://zenn.dev/sonicmoov/articles/9a89f8492ca723</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/9a89f8492ca723</guid><pubDate>Fri, 11 Apr 2025 06:07:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EO0Bh952--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenAPI%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%25E3%2581%25AE500%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:n.kawashima%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3BkQkZZUGlFVEIwUzV6NWdBV2F2M0FEWUxWVG9tblJqSW0ybl93QjVaRGdrUm1nPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>n.kawashima</dc:creator></item><item><title><![CDATA[複雑な動的フォームを制覇する: Zustand Slice パターンによる状態管理戦略]]></title><description><![CDATA[
 はじめに
前回のテックブログ記事『【React】memo, useMemo, useCallback を使いこなす』ではメモ化 API について解説しました。その中で触れた、「企業活動における「手続き」や「申請」に利用する汎用的なフォーム生成モジュール」の設計に焦点を当てます。
DRESS CODEで扱うフォームは、「入社手続き」や「アカウント利用申請」などの実業務で使用されるため以下の特徴があります。


動的な構造: フォームの項目は固定ではなく、目的ごとに規定される定義によって動的に決定されます。

階層構造: フォームは複数の「コレクション (AttributeCollect...]]></description><link>https://zenn.dev/dress_code/articles/182c18acfa58b3</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/182c18acfa58b3</guid><pubDate>Fri, 11 Apr 2025 05:15:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cZd3ZyI7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E5%2588%25B6%25E8%25A6%2587%25E3%2581%2599%25E3%2582%258B%253A%2520Zustand%2520Slice%2520%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E6%2588%25A6%25E7%2595%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2582%258B%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzMmQ5N2Q0NmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふるしょう</dc:creator></item><item><title><![CDATA[「レンズ」でフォーカス！@hookform/lensesを使ったフォーム実装]]></title><description><![CDATA[こんにちは、フォルシア株式会社エンジニアの籏野です。
先日、React Hook Formの公式アカウントが以下のようなポストをしているのを見つけました。
https://x.com/HookForm/status/1894698099677028618
新たにリリースされた@hookform/lensesがどのようなライブラリなのか気になり調べてみました。

 @hookform/lensesとは
GitHubに記載の内容を訳すると以下のようになります。(日本語訳 by DeepL)

React Hook Form Lensesは、React Hook Formに関数型レンズのエレガ...]]></description><link>https://zenn.dev/forcia_tech/articles/202503_hookform_lenses_hatano</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/202503_hookform_lenses_hatano</guid><pubDate>Fri, 11 Apr 2025 04:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ESg933tu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25BA%25E3%2580%258D%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25AB%25E3%2582%25B9%25EF%25BC%2581%2540hookform%252Flenses%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[PydanticでUpdate用モデルを動的生成する：バリデーション継承＋Optional対応まで]]></title><description><![CDATA[
 はじめに
FastAPI + Pydantic でAPIを構築する中で、「部分更新」を実装するためには、すべてのフィールドがOptionalな UpdateModel を書く必要があります。しかしBaseModelと同じフィールドとvalidatorを持つ UpdateModel を毎回手で書くのは面倒ですし、バリデーションを忘れたり、間違った型を指定してしまうこともあります。
そこで、以下を満たす UpdateModel を自動生成する関数を作成しました：


Optional 変換：元のフィールドをすべて Optional に変換（部分更新対応）
バリデーション継承：元モデルの ...]]></description><link>https://zenn.dev/kicchan/articles/0012_llyssm_make_update_model</link><guid isPermaLink="true">https://zenn.dev/kicchan/articles/0012_llyssm_make_update_model</guid><pubDate>Thu, 10 Apr 2025 23:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--STJXcLni--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pydantic%25E3%2581%25A7Update%25E7%2594%25A8%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E7%259A%2584%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25EF%25BC%259A%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E7%25B6%2599%25E6%2589%25BF%25EF%25BC%258BOptional%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kicchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0NmExYWE4YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kicchan</dc:creator></item><item><title><![CDATA[160. Intersection of Two Linked Lists]]></title><description><![CDATA[2つの単方向連結リスト headA と headB の先頭ノードが与えられたとき、それらが交差しているノードを返してください。2つの連結リストが全く交差しない場合は null を返してください。
例えば、以下の2つの連結リストはノード c1 で交差を始めます：
（※図は省略）
テストケースは、連結構造の中にサイクルが一切存在しないように生成されています。
なお、関数が返された後も、連結リストの元の構造は保持されなければなりません。


 カスタムジャッジについて：
ジャッジに与えられる入力は以下の通りです（あなたのプログラムにはこれらは与えられません）：


intersectVal：交...]]></description><link>https://zenn.dev/idapan/articles/f753edcf51eaae</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/f753edcf51eaae</guid><pubDate>Thu, 10 Apr 2025 22:17:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--huhh2xIF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:160.%2520Intersection%2520of%2520Two%2520Linked%2520Lists%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[Angularのノードベースライブラリ ngx-vflow を使ってみた]]></title><description><![CDATA[
 はじめに
@denwaya34です。😆
angularのNodeベースのアプリケーション開発ライブラリ:ngx-vflowを使ってみたのでレポートします。

 ngx-vflow とは
ngx-vflowはノードベースのアプリケーションを作成するためのAngularライブラリです。
Reactにはreact-flowというライブラリがありますが、ngx-vflowはそれと類似のAngular向けのライブラリです。
こんな感じでフロー図を作成できます。


 使い方
Node(=図の四角部分)は以下のように定義します。
const node = {
    id: '1',      ...]]></description><link>https://zenn.dev/denwaya/articles/angular-ngx-vflow</link><guid isPermaLink="true">https://zenn.dev/denwaya/articles/angular-ngx-vflow</guid><pubDate>Thu, 10 Apr 2025 16:44:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LKHlHrM8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular%25E3%2581%25AE%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2589%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%2520ngx-vflow%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:denwaya34%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3NGM2YzM3MGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>denwaya34</dc:creator></item></channel></rss>