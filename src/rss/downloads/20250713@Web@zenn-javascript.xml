<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 13 Jul 2025 08:30:49 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[非同期処理 (memo)]]></title><description><![CDATA[
 実践的な非同期処理の使用例
APIから取得する関数をAIに書かせたのだが、その解説が非同期処理を理解するにはとてもいい解説だと思ったので残しておく。
実際のコード

js
const fetchOnsenList = async () =&gt; {
      try {
        const response = await fetch('http://localhost:3000/api/onsen');
        if (!response.ok) {
          throw new Error (`HTTP error! status: ${respon...]]></description><link>https://zenn.dev/tqw000402/articles/0e80954d0eb361</link><guid isPermaLink="true">https://zenn.dev/tqw000402/articles/0e80954d0eb361</guid><pubDate>Sun, 13 Jul 2025 04:50:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SlHLZl1C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%2520%2528memo%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tqqqqw%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc5ZmIyMTczNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tqqqqw</dc:creator></item><item><title><![CDATA[try...catch構文 (memo)]]></title><description><![CDATA[
 あまり習うことのないtry...catch

try...catch構文は、エラーが起きる可能性のあるコードを安全に実行し、失敗したときに変わりの処理を実行する構文。

.js
try {
  // ここに「エラーが出るかも？」なコードを書く
} catch (error) {
  // try 内でエラーが出たら、ここで代わりの処理を行う
}

あまり教材などで出てくる機会がないので、ここにメモっておく。
API関連でよく出てくる構文なので覚えておこう。
]]></description><link>https://zenn.dev/tqw000402/articles/1ebac8c4be0ad8</link><guid isPermaLink="true">https://zenn.dev/tqw000402/articles/1ebac8c4be0ad8</guid><pubDate>Sun, 13 Jul 2025 03:58:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3tir1Z4C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:try...catch%25E6%25A7%258B%25E6%2596%2587%2520%2528memo%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tqqqqw%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc5ZmIyMTczNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tqqqqw</dc:creator></item><item><title><![CDATA[第3回 kintoneでアプリの説明を非表示にする]]></title><description><![CDATA[
 kintoneでアプリの説明を非表示にする
〜詳細画面・編集画面対応の実装ステップ〜

 はじめに
前回は、JSEdit for kintoneプラグインの導入と設定方法を解説しました。
今回は、いよいよ実際のJavaScriptコードを書いて、「アプリの説明」を画面ごとに制御していきます！
目標：詳細画面と編集画面と新規作成画面で「アプリの説明」を非表示にする。一覧表示のときだけ表示させる


 JavaScriptカスタマイズの基本

 kintoneのイベントについて
kintoneでは、画面の状態変化に応じて様々なイベントが用意されています：


app.record.det...]]></description><link>https://zenn.dev/chiquwagohan/articles/knt03-202507130700</link><guid isPermaLink="true">https://zenn.dev/chiquwagohan/articles/knt03-202507130700</guid><pubDate>Sat, 12 Jul 2025 22:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ogJVRvmW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AC%25AC3%25E5%259B%259E%2520kintone%25E3%2581%25A7%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E8%25AA%25AC%25E6%2598%258E%25E3%2582%2592%25E9%259D%259E%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjMWE0NGVmYWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわ</dc:creator></item><item><title><![CDATA[JavaScriptでABC414(A-C)]]></title><description><![CDATA[https://atcoder.jp/contests/abc414

 A - Streamer Takahashi
https://atcoder.jp/contests/abc411/tasks/abc414_a
X_i \le LかつR \le Y_iとなるiの数をカウントすればOK
やるだけといえばやるだけですけど、入力もらうのがちょっとだるくない……？
https://atcoder.jp/contests/abc414/submissions/67509347
1分49秒 AC!

 B - String Too Long
https://atcoder.jp/contes...]]></description><link>https://zenn.dev/aya_koto/articles/639dbedacc2861</link><guid isPermaLink="true">https://zenn.dev/aya_koto/articles/639dbedacc2861</guid><pubDate>Sat, 12 Jul 2025 13:46:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tkLWsJcm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:JavaScript%25E3%2581%25A7ABC414%2528A-C%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ayasaka-Koto%2520%252F%2520Aya...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkNTRlMDBjYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ayasaka-Koto / AyagawaP</dc:creator></item><item><title><![CDATA[【JS・小ネタ】オブジェクトからプロパティを取り出す２つの方法]]></title><description><![CDATA[
 背景
僕は仕事でJSを使っていたのだ。
そこで、オブジェクト（所謂ディクショナリ）を使っていた。
const obj = {element1: 1, element2: 2}
const element1 = obj['element1']
こんな感じでオブジェクトからプロパティを取り出していたのだ。
ただ別の日、プライベートで僕は見てしまったんだ。
別の方法でオブジェクトからプロパティを取り出しているコードを。
const obj = {element1: 1, element2: 2}
const element2 = obj.element2
一体これは何なんだ？
どんな違いが...]]></description><link>https://zenn.dev/k__azuki/articles/d8d8ab574c168f</link><guid isPermaLink="true">https://zenn.dev/k__azuki/articles/d8d8ab574c168f</guid><pubDate>Sat, 12 Jul 2025 09:09:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0TBA6HPU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JS%25E3%2583%25BB%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%25E3%2580%2591%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%258B%25E3%2582%2589%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2582%2592%25E5%258F%2596%25E3%2582%258A%25E5%2587%25BA%25E3%2581%2599%25EF%25BC%2592%25E3%2581%25A4%25E3%2581%25AE%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%2589%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNzdjYzRlNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くらげ</dc:creator></item><item><title><![CDATA[【JS】React・Next.jsでよく見る変数への代入方法]]></title><description><![CDATA[
 はじめに

ReactやNext.jsのソースコードを見ていると、中々見慣れない代入方法が多数存在しました。
本記事では、これら高度な代入方法の紹介に焦点を当てています。


 代入方法

 1. 通常の代入方法

通常の代入方法は、以下のように一行ずつ代入する方法だと思います。
自分自身もプレーンなJSでコードを記載する際は、こちらを多用していました。

const name = 'kurage';
const age = 25;

 2. 複数の変数を1行で宣言・代入

複数の変数は、以下のように1行で宣言・代入することができます。

// 1行で宣言
let name, age...]]></description><link>https://zenn.dev/k__azuki/articles/3788d0cdbd3a4e</link><guid isPermaLink="true">https://zenn.dev/k__azuki/articles/3788d0cdbd3a4e</guid><pubDate>Sat, 12 Jul 2025 06:52:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iPnRXyUu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JS%25E3%2580%2591React%25E3%2583%25BBNext.js%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E8%25A6%258B%25E3%2582%258B%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25B8%25E3%2581%25AE%25E4%25BB%25A3%25E5%2585%25A5%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%2589%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNzdjYzRlNGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くらげ</dc:creator></item><item><title><![CDATA[オブジェクト操作を自由自在に操るProxy]]></title><description><![CDATA[JavaScriptのProxyは、オブジェクトの基本的な操作（プロパティの参照、代入、関数の呼び出しなど）をインターセプト（途中で捕捉し横取り）し、その挙動をカスタマイズするための非常に強力な機能です。
オブジェクトへのアクセスを監視・制御したり、新しい動作を追加したりする際に大変役立ちます。

 基本的な仕組み
Proxyは、ターゲットとなるオブジェクトと、そのオブジェクトに対する操作を定義するハンドラーオブジェクトの2つで構成されます。
const proxy = new Proxy(target, handler);



パラメータ
説明




target
プロキシの対象と...]]></description><link>https://zenn.dev/arima/articles/38aa4889d9dc14</link><guid isPermaLink="true">https://zenn.dev/arima/articles/38aa4889d9dc14</guid><pubDate>Sat, 12 Jul 2025 03:15:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AoqGF43H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%2593%258D%25E4%25BD%259C%25E3%2582%2592%25E8%2587%25AA%25E7%2594%25B1%25E8%2587%25AA%25E5%259C%25A8%25E3%2581%25AB%25E6%2593%258D%25E3%2582%258BProxy%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2582%258A%25E3%2581%25BE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4MzY5Y2MzN2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ありま</dc:creator></item><item><title><![CDATA[第2回 JSEdit for kintoneでJavaScriptを導入する]]></title><description><![CDATA[
 JSEdit for kintoneでJavaScriptを導入する
〜プラグインの設定とカスタマイズ準備〜

 はじめに
前回の記事では、kintoneの「アプリの説明」を画面ごとに制御したいというニーズと、標準機能では対応できない理由について紹介しました。
今回は、JavaScriptによるカスタマイズを実現するために、「JSEdit for kintone」プラグインの導入と設定方法を解説します。
このプラグインを使えば、コードを書いてすぐにアプリに反映できるので、カスタマイズの第一歩として非常におすすめです。


 JSEdit for kintoneとは？
JSEdit f...]]></description><link>https://zenn.dev/chiquwagohan/articles/knt02-202507120700</link><guid isPermaLink="true">https://zenn.dev/chiquwagohan/articles/knt02-202507120700</guid><pubDate>Fri, 11 Jul 2025 22:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rz-YiMjQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AC%25AC2%25E5%259B%259E%2520JSEdit%2520for%2520kintone%25E3%2581%25A7JavaScript%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjMWE0NGVmYWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわ</dc:creator></item><item><title><![CDATA[JavaScript の using と DisposableStack#defer で Go の defer 風]]></title><description><![CDATA[JavaScriptのExplicit Resource Managementという提案では using という構文が注目されがちな気がする。しかし実は構文以外にもいくつかのビルトインが追加される。
こないだExplicit Resource Managementで追加されたビルトインをSafariに実装したときに「へ〜」と思ったのでよくありそうな使い方を紹介する[1]。

 Go の defer
Go の defer をご存知だろうか。たとえばこういうコードがあるとする。
func main() {
    f := createFile("/tmp/defer.txt")
    d...]]></description><link>https://zenn.dev/sosukesuzuki/articles/697b059563a782</link><guid isPermaLink="true">https://zenn.dev/sosukesuzuki/articles/697b059563a782</guid><pubDate>Fri, 11 Jul 2025 13:57:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xkmKmYzJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%2520%25E3%2581%25AE%2520using%2520%25E3%2581%25A8%2520DisposableStack%2523defer%2520%25E3%2581%25A7%2520Go%2520%25E3%2581%25AE%2520defer%2520%25E9%25A2%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sosuke%2520Suzuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kzVm5WZHo2MC1CT3lMTS1VVnZaNmdNSDJlTlp1T0lTa1owT3lyNnc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sosuke Suzuki</dc:creator></item><item><title><![CDATA[JavaScriptがわからなくても大丈夫！Next.jsのやさしい入門ガイド]]></title><description><![CDATA[Webアプリ開発と聞くと「JavaScriptがわからないと難しそう…」と思うかもしれません。でも、最近では開発者をサポートする便利なフレームワークが登場していて、その中でも Next.js は「初心者にもやさしい」と人気があります。
この記事では、JavaScriptの経験がない方でも理解できるように、Next.jsの基本的な特徴や始め方をやさしく紹介していきます。


 🔰 Next.jsってなに？
Next.js（ネクストジェイエス）は、React（リアクト）というJavaScriptのライブラリをもっと便利に使えるようにした「フレームワーク」です。

 Next.jsでできること...]]></description><link>https://zenn.dev/kenta1114/articles/5d371859db4c23</link><guid isPermaLink="true">https://zenn.dev/kenta1114/articles/5d371859db4c23</guid><pubDate>Fri, 11 Jul 2025 09:18:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U5vB0MhL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%258C%25E3%2582%258F%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E3%2582%2582%25E5%25A4%25A7%25E4%25B8%2588%25E5%25A4%25AB%25EF%25BC%2581Next.js%25E3%2581%25AE%25E3%2582%2584%25E3%2581%2595%25E3%2581%2597%25E3%2581%2584%25E5%2585%25A5%25E9%2596%2580%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kenta1114%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmOGM0YTI4MzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kenta1114</dc:creator></item><item><title><![CDATA[もう「JavaScript」って名前やめない？]]></title><description><![CDATA[TypeScriptがある現代において、JavaScriptはもはや凡人が書くべきものではなくなっています。プロジェクト内のJavaScriptはTypeScriptで置き換えられ、「TS」もしくは「DT」バッジのないnpmパッケージは白い目で見られ、TypeScriptをそのまま実行できるDenoやBunが登場し、Node.jsにすらTypeScriptの大部分の構文のサポートが入り、⸺そういう時代です。
生JavaScriptを書くのをやめるだけでなく、JavaScriptの名前を出すこと自体をやめ、代わりにTypeScriptと呼びませんか。実行時の挙動の話であってもです。Type...]]></description><link>https://zenn.dev/yuhr/articles/8014536d20d4f9</link><guid isPermaLink="true">https://zenn.dev/yuhr/articles/8014536d20d4f9</guid><pubDate>Fri, 11 Jul 2025 03:11:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u4r0ldhH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2582%25E3%2581%2586%25E3%2580%258CJavaScript%25E3%2580%258D%25E3%2581%25A3%25E3%2581%25A6%25E5%2590%258D%25E5%2589%258D%25E3%2582%2584%25E3%2582%2581%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuhr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l2U2lnclBGSkhIOTRLRnhjWDk1d3Z1d3pMZnVKc091MUI4Nkg2PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuhr</dc:creator></item><item><title><![CDATA[実務未経験コーダーからフロントエンドエンジニアに挑戦している話]]></title><description><![CDATA[
 なぜこの記事を書いたか
zennやQiitaの記事を見ると実務未経験からエンジニアになった人は多いけど 現在進行系で目指してる人の記事はあまり見つからなかったのでそういう人の参考になったり、繋がったりできたらいいなと思ったのでこの記事を書きました。

 私の経歴
工業高校 電気科卒
デザイン系専門学校 WEB専攻卒
新卒でWEBで制作会社のスタートアップにコーダーとして入社
(スキルは デザイン力少し,HTML,CSS,JSが読める程度,CMSも少し)
会社の意向でフロントエンドエンジニアになるため学習中 ←なう
特に特別な資格を持っているわけでもなく特別な能力があるわけでもないごく...]]></description><link>https://zenn.dev/imaihayato/articles/b480b78d35103c</link><guid isPermaLink="true">https://zenn.dev/imaihayato/articles/b480b78d35103c</guid><pubDate>Fri, 11 Jul 2025 00:35:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--imP875kx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259F%25E5%258B%2599%25E6%259C%25AA%25E7%25B5%258C%25E9%25A8%2593%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258B%25E3%2582%2589%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2596%25B0%25E5%258D%2592%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmZWQzZDVmMGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>新卒エンジニア</dc:creator></item><item><title><![CDATA[[Nuxt.js] SPAで起こるリビジョンのズレ問題とその解決方法]]></title><description><![CDATA[
 はじめに
現在、Nuxt.jsを使ってSPA（Single Page Application）としてフロントエンドを構築しています。その中で、ユーザーが長時間アプリを開いたままにすることで発生する「リビジョンの不整合」問題に直面しました。この記事では、その問題の背景と、実際に導入した対策について紹介します。


 🐛 なぜリビジョンの不整合が起こるのか？
SPA（Single Page Application）では、初回アクセス時に1つのHTMLと、JavaScriptやCSSなどの静的ファイルが読み込まれます。その後はページ遷移しても画面全体が再読み込みされることはなく、クライアン...]]></description><link>https://zenn.dev/ota_rg/articles/63425bd8361b84</link><guid isPermaLink="true">https://zenn.dev/ota_rg/articles/63425bd8361b84</guid><pubDate>Thu, 10 Jul 2025 22:03:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i8HoriiL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNuxt.js%255D%2520SPA%25E3%2581%25A7%25E8%25B5%25B7%25E3%2581%2593%25E3%2582%258B%25E3%2583%25AA%25E3%2583%2593%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E3%2582%25BA%25E3%2583%25AC%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JoMmNKTGROM2VuNFFWSFFPR09IeW1EMnZuMy1lanJZMmNWUE9aPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumi</dc:creator></item><item><title><![CDATA[第1回 kintoneの“アプリの説明”を画面ごとに制御したい！]]></title><description><![CDATA[

 kintoneの“アプリの説明”を画面ごとに制御したい！
〜標準機能の限界とカスタマイズの必要性〜

 はじめに
kintoneを使っていると、「アプリの説明」が画面の上部に表示されるのを見たことがあると思います。
この説明文は、アプリの目的や使い方をユーザーに伝えるために便利ですが、すべての画面で表示される必要があるとは限りません。
たとえば、詳細画面や編集画面では「説明が邪魔」「スペースを取りすぎる」と感じることもあります。
今回はこの「アプリの説明」を画面ごとに制御したいというニーズに対して、標準機能では対応できない理由と、カスタマイズの方向性を紹介します。


 「アプリの...]]></description><link>https://zenn.dev/chiquwagohan/articles/knt01-202507110700</link><guid isPermaLink="true">https://zenn.dev/chiquwagohan/articles/knt01-202507110700</guid><pubDate>Thu, 10 Jul 2025 22:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Qjn6vVz9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AC%25AC1%25E5%259B%259E%2520kintone%25E3%2581%25AE%25E2%2580%259C%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E8%25AA%25AC%25E6%2598%258E%25E2%2580%259D%25E3%2582%2592%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%2594%25E3%2581%25A8%25E3%2581%25AB%25E5%2588%25B6%25E5%25BE%25A1%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjMWE0NGVmYWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわ</dc:creator></item><item><title><![CDATA[# 【コピペでOK】Apple Vision Pro風デザインをあなたのサイトに！簡単JSライブラリ「Liquid Glass UI」の使い]]></title><description><![CDATA[
 【コピペでOK】Apple Vision Pro風デザインをあなたのサイトに！簡単JSライブラリ「Liquid Glass UI」の使い方
こんにちは！Webサイト制作を楽しんでいる皆さん！
「Apple Vision Proみたいな、ガラスの向こうが透けて見える、あのカッコいいデザインを自分のサイトにも入れてみたい！」
そう思ったことはありませんか？
でも、なんだか難しそう… JavaScriptとかよく分からないし…と諦めていませんか？
大丈夫です！
そんなあなたのために、HTMLにコピペするだけで、あの未来的なデザインを再現できるライブラリ「Liquid Glass UI」を作...]]></description><link>https://zenn.dev/di2/articles/1854849f9ff4be</link><guid isPermaLink="true">https://zenn.dev/di2/articles/1854849f9ff4be</guid><pubDate>Thu, 10 Jul 2025 21:59:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5IuRA7qk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523%2520%25E3%2580%2590%25E3%2582%25B3%25E3%2583%2594%25E3%2583%259A%25E3%2581%25A7OK%25E3%2580%2591Apple%2520Vision%2520Pro%25E9%25A2%25A8%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E3%2581%2582%25E3%2581%25AA%25E3%2581%259F%25E3%2581%25AE%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AB%25EF%25BC%2581%25E7%25B0%25A1%25E5%258D%2598JS%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2580%258CLiquid...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:di2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVVSZVNpSTZkdlhXcUZaRThTamp0czZ3b2FTUmsxMlpGRXhhZ2RKR1BVMTRjTDFGUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>di2</dc:creator></item><item><title><![CDATA[remove() と innerHTML = '' の違い]]></title><description><![CDATA[
 状況
エリア内のHTMLを空にしようと思い、remove()を使ったところ、画面上に表示されるべきものが表示されなくなった

 結論
両方とも消すという点では似た挙動であるが、実際は違う動きをしている。
element.remove(): 指定したHTML要素（例えば指定したidのdiv全体）を、DOMツリーから完全に削除する。一度削除されると、その要素は全く存在しなかったことになるため、remove後にその要素を操作しようとしてもエラーになったり、期待通りに動作しなくなる。ないものを動かそうとしているので当然の挙動。
element.innerHTML = '': 指定したHTML...]]></description><link>https://zenn.dev/haru0510/articles/639f1087e16605</link><guid isPermaLink="true">https://zenn.dev/haru0510/articles/639f1087e16605</guid><pubDate>Thu, 10 Jul 2025 14:49:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NXfZFYnd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:remove%2528%2529%2520%25E3%2581%25A8%2520innerHTML%2520%253D%2520%2527%2527%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJhY2IxYzU2YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>haru</dc:creator></item><item><title><![CDATA[ボイラープレートも状態フックも仮想DOMも要らない、構造パスが創る新時代のフロントエンドフレームワーク]]></title><description><![CDATA[
 基本コンセプト
UIと状態は本質的に同じ情報の異なる表現と考え、構造パスをUIと状態の唯一の信頼できるソースとし第一級のオブジェクトとして扱い、Proxyなどの既存技術を駆使して、Webフロントエンド開発が抱える多くの課題を解決する。
ここでいう構造パスとは、データの構造的な位置を指し示すフルパスであり、抽象的に表現するために、リストの要素に対しては、ワイルドーカードを使って表現します。
例
user = { name: "Alice" };
=&gt; user.name
users = [ { name: "Alice" }, { name: "Bob" } ]
=&gt; us...]]></description><link>https://zenn.dev/mogera/articles/bb667a1fa190b2</link><guid isPermaLink="true">https://zenn.dev/mogera/articles/bb667a1fa190b2</guid><pubDate>Thu, 10 Jul 2025 14:33:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9exs-tu---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259C%25E3%2582%25A4%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2582%25E7%258A%25B6%25E6%2585%258B%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2582%25E4%25BB%25AE%25E6%2583%25B3DOM%25E3%2582%2582%25E8%25A6%2581%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2580%2581%25E6%25A7%258B%25E9%2580%25A0%25E3%2583%2591%25E3%2582%25B9%25E3%2581%258C%25E5%2589%25B5%25E3%2582%258B%25E6%2596%25B0%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mogera%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeU81R0xzNDk1VUxWUy1MTlZLdktsQWpMY3NuZnZueC00S1lYWUQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mogera</dc:creator></item><item><title><![CDATA[【JavaScript】即時実行と遅延実行の違い]]></title><description><![CDATA[コールバック関数を渡すべき処理に関数呼び出しを渡してしまい意図した動作にならない。開発中によく間違えたので、備忘録代わりにまとめます。

 TL;DR

「関数を渡す」= 遅延実行、「関数を呼び出して結果を渡す」= 即時実行という違い
関数そのものを渡すか関数の呼び出し結果を渡すかで実行されるタイミングが異なる
必要なときに関数を実行するなら関数を渡す。今すぐ実行したいなら関数をコールする


 具体例
Promise の処理が完了した後にログを出す実装を考えます。
まずは間違った実装から。
somePromise().then(console.log("done"));
// "don...]]></description><link>https://zenn.dev/keystone/articles/caa6125690a7b2</link><guid isPermaLink="true">https://zenn.dev/keystone/articles/caa6125690a7b2</guid><pubDate>Wed, 09 Jul 2025 23:29:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HzjXU3zs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591%25E5%258D%25B3%25E6%2599%2582%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25A8%25E9%2581%2585%25E5%25BB%25B6%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%25E3%2582%2593%25E3%2581%25A0%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYjc4MWNiNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>めんだこ</dc:creator></item><item><title><![CDATA[スプレッド構文を使った「条件付き挿入」のテクニック（オブジェクト & 配列）]]></title><description><![CDATA[
 はじめに
JavaScriptやTypeScriptで開発をしていると、「ある条件を満たすときだけ、オブジェクトや配列に値を追加したい」 というケースは多々あります。
そんなときに役立つのが、スプレッド構文（...）と条件演算子を組み合わせた書き方です。
本記事では、次の2つのパターンを紹介します：

✅ オブジェクトへの条件付きプロパティ追加
✅ 配列への条件付き要素追加


 1. オブジェクトへの条件付き追加
基本形
const name = "Alice"; // 空文字やnullになることもある

const userData = {
  age: 30,
  ...(na...]]></description><link>https://zenn.dev/oharu121/articles/b71b4d89b6f382</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/b71b4d89b6f382</guid><pubDate>Wed, 09 Jul 2025 15:29:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OTbUC9Jw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otfw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[【Javascript】|| と && と ?? の違い・活用例]]></title><description><![CDATA[
 はじめに
JavaScriptにおける ||（論理和）と &amp;&amp;（論理積）、そして ??（null合体演算子）は、条件分岐や値の選択処理で非常に便利な演算子です。ただの「真偽値チェック」ではなく、値の返し方に特徴がある点が重要です。
本記事では以下の内容を解説します：
* `||` / `&amp;&amp;` / `??` の違い


よくある活用パターン（if なしで書ける！）
React での使用例
使いこなしのコツと注意点


 || 、 &amp;&amp; 、 ?? の基本動作
JavaScriptでは、|| 、 &amp;&amp; 、 ?? は 条件に応...]]></description><link>https://zenn.dev/oharu121/articles/23f7502377b979</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/23f7502377b979</guid><pubDate>Wed, 09 Jul 2025 15:12:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TixkeR0D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Javascript%25E3%2580%2591%257C%257C%2520%25E3%2581%25A8%2520%2526%2526%2520%25E3%2581%25A8%2520%253F%253F%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2583%25BB%25E6%25B4%25BB%25E7%2594%25A8%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item></channel></rss>