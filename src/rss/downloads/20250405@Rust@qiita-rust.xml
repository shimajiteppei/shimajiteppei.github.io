<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-04-05T12:57:38+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2008741</id>
    <published>2025-04-05T12:57:38+09:00</published>
    <updated>2025-04-05T12:57:38+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Leapcell/items/f6e2be1c7e9685e55fec"/>
    <url>https://qiita.com/Leapcell/items/f6e2be1c7e9685e55fec</url>
    <title>RustのAnyを解説：リフレクションなしの型内省</title>
    <content type="html">
前書き
Rust がランタイムリフレクション（実行時リフレクション）を導入しない理由については、以下の RFC を参考にできます：
https://internals.rust-lang.org/…</content>
    <author>
      <name>Leapcell</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2008580</id>
    <published>2025-04-04T21:40:46+09:00</published>
    <updated>2025-04-04T21:40:46+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/CRUD5th/items/ada3d27c20a4adcd5228"/>
    <url>https://qiita.com/CRUD5th/items/ada3d27c20a4adcd5228</url>
    <title>純粋関数とは何か：状態と副作用を捨てると何が得られるか</title>
    <content type="html">概要
関数型プログラミング（FP）における核、それが**純粋関数（pure function）**である。
しかし「副作用がない関数」と言われても、それが設計にどう効くのかは直感的に理解しづらい。
…</content>
    <author>
      <name>CRUD5th</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2008487</id>
    <published>2025-04-04T17:50:13+09:00</published>
    <updated>2025-04-04T17:50:13+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yonaka15/items/1973014530dac8798957"/>
    <url>https://qiita.com/yonaka15/items/1973014530dac8798957</url>
    <title>安全と言われるRustの落とし穴</title>
    <content type="html">Rustは「安全な言語」として知られています。特にメモリ安全性の面では優れた言語設計が施されていますが、それだけですべての問題が解決するわけではありません。コンパイラは多くのバグを捕捉してくれますが…</content>
    <author>
      <name>yonaka15</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2008093</id>
    <published>2025-04-04T16:50:38+09:00</published>
    <updated>2025-04-04T16:50:39+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/ssc-riosato/items/64137a4517d168ba0fbf"/>
    <url>https://qiita.com/ssc-riosato/items/64137a4517d168ba0fbf</url>
    <title>色々な言語で作った複数のWASMコンポーネントを連携させる</title>
    <content type="html">はじめに
今回は WASI (WebAssembly System Interface) Preview2 という新しいWebAssembly（WASM）仕様で核となる、Component Modelという新しいWASM間の通信インターフェイスを試すべく、Rust・Go・JavaScriptでそれぞれWASMコンポーネントを作成しそれらを連携させてみました…</content>
    <author>
      <name>ssc-riosato</name>
    </author>
  </entry>
</feed>
