<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 18 May 2025 10:16:34 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[[Rust] Precise Capturing 精密キャプチャ `use<...>`]]></title><description><![CDATA[Rust 1.82 で安定化し 1.87 で trait にも拡張された impl use&lt;...&gt; という構文 (Precise Capturing, 拙訳: 精密キャプチャ) を, 備忘録として解説しておく.

 抽象戻り型についておさらい
抽象戻り型 (Abstract return types, 旧称: RPIT, Return Position impl Trait) とは, Rust の関数の戻り値において, 戻り値型を明示せずにそれが満たすべき trait 境界 (trait とライフタイムを指定するやつ) だけを impl Trait という構文で記述できる言...]]></description><link>https://zenn.dev/mikuroxina/articles/34bd62800b39a2</link><guid isPermaLink="true">https://zenn.dev/mikuroxina/articles/34bd62800b39a2</guid><pubDate>Sun, 18 May 2025 10:06:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kwoqt15V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Precise%2520Capturing%2520%25E7%25B2%25BE%25E5%25AF%2586%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3%2520%2560use%253C...%253E%2560%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mikuro%25E3%2581%2595%25E3%2581%2584%25E3%2581%25AA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnJpZ3k1cXBxQzkxSWwyR2xWcS1xMDJSVldsVFBzTWtKV2thcUFBYlQ1X2xvS3Zxcz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mikuroさいな</dc:creator></item><item><title><![CDATA[clapクレート入門]]></title><description><![CDATA[アプリケーションのコマンドライン引数の解析（パース）はお決まりの仕事であり、その開発は退屈で面倒な作業です。

clapクレートを使うと、Rustアプリケーションのコマンドライン引数の解析を簡単に実装することができます。

本書ではバージョン情報を表示するだけの簡単なアプリケーションから初めて、少しずつ複雑な課題をこなしながらclapを使ったコマンドライン引数解析について学びます。

なお各章の内容に対応するアプリケーションをGitHubに公開していますので、実際に手元で動作するアプリケーションを見ながら学ぶことができます。
]]></description><link>https://zenn.dev/seiichihorie/books/20250424-rust-clap-intro</link><guid isPermaLink="true">https://zenn.dev/seiichihorie/books/20250424-rust-clap-intro</guid><pubDate>Sun, 18 May 2025 07:06:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BB2k89oq--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci85NGYzN2I0MmVkLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>堀江誠一</dc:creator></item><item><title><![CDATA[OSSと継続的に関わる方法の模索]]></title><description><![CDATA[先日、Deno で働くmaguroさん主催のmaguro.dev #1 supported by KIKKAKE AGENTにて、本記事タイトルで LT をしました。
本記事は、そこで話した内容に加筆・修正して、テキスト形式でまとめたものです。ここでの OSS コミットは、余暇にボランティアで行うことを前提としており、業務で行うことはあまり想定していません。


 最初のコミット
継続的に取り組んでいる OSS はありますか。自分の場合は、Biomeという Rust 製の Web ツールチェイン（Linter/Formatter） に取り組んでいます。数ある OSS のうちの 1 つです...]]></description><link>https://zenn.dev/kirohi/articles/8177525b4e8ea0</link><guid isPermaLink="true">https://zenn.dev/kirohi/articles/8177525b4e8ea0</guid><pubDate>Sun, 18 May 2025 04:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TGoiBmAC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25A8%25E7%25B6%2599%25E7%25B6%259A%25E7%259A%2584%25E3%2581%25AB%25E9%2596%25A2%25E3%2582%258F%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AE%25E6%25A8%25A1%25E7%25B4%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:unvalley%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlNWU0YWY2ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>unvalley</dc:creator></item><item><title><![CDATA[Rust で Unix ライクな 自作 OS]]></title><description><![CDATA[octox は、Rust で 一からすべて(ビルドシステムも含め)実装された Unix ライクなオペレーティングシステムです。 xv6-riscv に触発された学習用 OS として実装を始めたものです(元々は Linux のような OS の勉強として始めました)。
この投稿では、octox の実装を通して経験したことから自身の Unix-like OS の実装において Rust の機能がどのように活用されているかについて触れてみたいと思います。
本記事は英語で公開していた以下の記事の日本語訳版です。
Writing a Unix-like OS in Rust
上記の記事を投稿後、いくつ...]]></description><link>https://zenn.dev/o8vm/articles/1f1ab4ba062f14</link><guid isPermaLink="true">https://zenn.dev/o8vm/articles/1f1ab4ba062f14</guid><pubDate>Sat, 17 May 2025 07:01:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qttkhq21--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520Unix%2520%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25AF%25E3%2581%25AA%2520%25E8%2587%25AA%25E4%25BD%259C%2520OS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:o8vm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiZmU4Y2JiYzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>o8vm</dc:creator></item><item><title><![CDATA[Rustで配列内の特定の値のみ処理する様々な方法]]></title><description><![CDATA[ここでは様々な方法を駆使して配列内の特定の値を処理する様々な方法が書かれています。
ここではfilterメソッドとfindメソッドを使ったやり方で、
特定の値を抽出する方法について説明していきます。
findメソッドを使用したやり方は、趣味でRustのBevyでゲーム開発をしている中で見つけたもので、
filterメソッドはこの記事を公開した時に記事を見てくれた方から教えてもらったものです。
それぞれのメソッドの書き方や、違いなども説明していきますのでよろしくお願いします。

 まずはデータを定義
まずは検証を行うためのデータを定義します。
今回は人のデータPerson構造体と、性別のタ...]]></description><link>https://zenn.dev/ittoku_ky73/articles/rust-iflet-control</link><guid isPermaLink="true">https://zenn.dev/ittoku_ky73/articles/rust-iflet-control</guid><pubDate>Fri, 16 May 2025 08:20:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--alGwqmyQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E9%2585%258D%25E5%2588%2597%25E5%2586%2585%25E3%2581%25AE%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E5%2580%25A4%25E3%2581%25AE%25E3%2581%25BF%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%25E6%25A7%2598%25E3%2580%2585%25E3%2581%25AA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ittoku%25EF%25BC%2588%25E3%2581%2584%25E3%2581%25A3%25E3%2581%25A8%25E3%2581%258F%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4NTc4ZWViYjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ittoku（いっとく）</dc:creator></item><item><title><![CDATA[0025-Arc-Mutex]]></title><description><![CDATA[RcとRefCellで実現していた共有変数の内部の値の変更はMultithreadだとArcとMutexでやることになります
use std::thread;
use std::sync::{Arc, Mutex};
#[derive(Debug)]
#[allow(dead_code)]
enum List {
    Cons(Arc&lt;Mutex&lt;i32&gt;&gt;, Arc&lt;List&gt;),
    Nil,
}
use List::{Cons, Nil};
fn main() {
    let value = Arc::new(Mutex::new(5...]]></description><link>https://zenn.dev/yukinekonyan/articles/8d51703e15184b</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/8d51703e15184b</guid><pubDate>Fri, 16 May 2025 05:19:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IDOqgqbM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0025-Arc-Mutex%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0024-Rc-RefCell]]></title><description><![CDATA[共有の値をRcで持ちつつ、その内部構造に対してRefCellでアクセスして値を変更していく
use std::{cell::RefCell, rc::Rc};

#[derive(Debug)]
#[allow(dead_code)]
enum List {
    Cons(Rc&lt;RefCell&lt;i32&gt;&gt;, Rc&lt;List&gt;),
    Nil,
}

use List::{Cons, Nil};

fn main() {
    let value = Rc::new(RefCell::new(5));
    let a = Rc::new(C...]]></description><link>https://zenn.dev/yukinekonyan/articles/4a97837b0987e9</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/4a97837b0987e9</guid><pubDate>Fri, 16 May 2025 03:43:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f6W4IofO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0024-Rc-RefCell%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[Rustで家計簿ツールを作ろう]]></title><description><![CDATA[モダンな言語でアプリ開発に挑戦したいけれど、具体的なプロジェクトがなかなか見つからない。また、より高速で安全なアプリケーションを作りたいと思ったことはありませんか？そんな方におすすめしたいのが、Rustを使った家計簿管理ツールの開発です。

この講座では、初めてプログラミングに触れる方や、Rustの特性に興味を持っている方に向けて、家計簿コマンドラインツールの開発方法を詳しく解説します。

また、開発過程を動画で見たいという声に応え、開発過程を収録した動画も用意しました。さらに詳細な情報や、Rust開発に必要なノウハウについては、記事内でソースコードとともに詳細に解説しています。興味がある方はぜひチェックしてみてください。

]]></description><link>https://zenn.dev/kenquichi/books/95f867cacc34e4</link><guid isPermaLink="true">https://zenn.dev/kenquichi/books/95f867cacc34e4</guid><pubDate>Thu, 15 May 2025 10:16:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OXPF0Cfv--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci80OWNkZjdlNTE1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[RustでAtCoderの過去問をやってみた]]></title><description><![CDATA[モダンな言語を使って他のエンジニアと差別化したいと思ったことはりませんか？
今回はモダンな言語であるRustで競技プログラミングAtcoderをやってみました。
なぜ競技プログラミングでRustなどのモダンな言語を使ったのかというと、モダン言語の書き方やアルゴリズムの組み方をトライアンドエラーしながら学習でき、点数として出来具合が表示されるため技術力に自信がつくと思ったからです。
前半ではRustとAtcoderについて、後半には実際にRustで回答したコードを記載しました。これを機にRustに挑戦してみましょう！

 Rust

 Rustの概要
Rustはメモリ安全性、並行性、および...]]></description><link>https://zenn.dev/headwaters/articles/4233c785a49a04</link><guid isPermaLink="true">https://zenn.dev/headwaters/articles/4233c785a49a04</guid><pubDate>Tue, 13 May 2025 12:23:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3giFegsG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7AtCoder%25E3%2581%25AE%25E9%2581%258E%25E5%258E%25BB%25E5%2595%258F%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25B1%25E3%2583%25B3%25E5%2590%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNGExY2UxMDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2598%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25B9%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTlSRFk5eEFXaDBwVGgyZnNJX0w2VnFXZmFfYWR4NG9Oc1JhQ1BVV3hkenNGa3hDLW49czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[uv + maturin + PyO3でRustをPythonから呼ぶ]]></title><description><![CDATA[PyO3/maturin は、Rust コードを Python から使えるようにバインディングを生成し、Pythonパッケージとしてビルド・配布するためのツールチェインです。
この記事では、maturin を用いて Rust ライブラリを Python から使用し、更に Rust 実装に基づき Python の型定義ファイル(.pyi)を自動生成したり、独自の Python 実装部分を記述する方法について説明します。

 準備
Python のモダンなパッケージマネージャである uv をインストールします。既にインストール済みの方は飛ばしてください。
他のパッケージマネージャを使いたいと...]]></description><link>https://zenn.dev/nahco3/articles/519560fe186cb0</link><guid isPermaLink="true">https://zenn.dev/nahco3/articles/519560fe186cb0</guid><pubDate>Tue, 13 May 2025 12:07:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bmfO1Dlr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:uv%2520%252B%2520maturin%2520%252B%2520PyO3%25E3%2581%25A7Rust%25E3%2582%2592Python%25E3%2581%258B%25E3%2582%2589%25E5%2591%25BC%25E3%2581%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nahco314%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U3ZmRiZWNiNDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nahco314</dc:creator></item><item><title><![CDATA[0023-RefCell]]></title><description><![CDATA[RefCellはCellと同じく構造体メンバーにアクセスして参照を取得し処理することができる
RefCell&lt;T&gt;で定義されているときに参照を借用(borrow)したときはRef&lt;T&gt;を、可変参照を借用したときはRefMut&lt;T&gt;を処理する
借用チェックはコンパイル時でなく、実行時に実施される
pub trait Messenger {
    fn send(&amp;self, msg: &amp;str);
}

pub struct LimitTracker&lt;'a, T: 'a + Messenger&gt; {
    messenge...]]></description><link>https://zenn.dev/yukinekonyan/articles/0eefeb655cccf1</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/0eefeb655cccf1</guid><pubDate>Tue, 13 May 2025 05:21:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EDQaEIc4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0023-RefCell%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0022-Cell]]></title><description><![CDATA[structのメンバーの値にアクセスする
Cellは即値でCellが覆う値はCopyが必要
use std::cell::Cell;

#[derive(Debug)]
pub struct SomeStruct {
    some_field: Cell&lt;i32&gt;,
    imutalbe_field: String
}
fn main() {
    let a = SomeStruct {
        some_field: Cell::new(1),
        imutalbe_field: String::from("hello")
    };  
...]]></description><link>https://zenn.dev/yukinekonyan/articles/6a9105be245c73</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/6a9105be245c73</guid><pubDate>Tue, 13 May 2025 05:04:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cjyIMhfF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0022-Cell%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[RustでGodot Engineを使ったテスト可能な設計: 依存性逆転の原則を活用する]]></title><description><![CDATA[
 はじめに

Godot EngineをRustで利用する際、Camera3DやInputEventMouseMotionなどのGodotクラスを直接操作するコードをそのまま書くと、テストが非常に難しくなります。
特に、new_allocといったGodot特有のメソッドは、Godot Engineのランタイム環境が必要なため、テスト環境ではエラーとなります。
そこで、依存性逆転の原則を活用して、Godot Engineに依存しない形で設計する方法を紹介します。これにより、テスト可能で拡張性の高いコードを実現できます。


 依存性逆転の原則とは

依存性逆転の原則は、SOLID原則の一...]]></description><link>https://zenn.dev/soyukke/articles/dfd29368ba7c77</link><guid isPermaLink="true">https://zenn.dev/soyukke/articles/dfd29368ba7c77</guid><pubDate>Mon, 12 May 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TceE7G7G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Godot%2520Engine%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%25E8%25A8%25AD%25E8%25A8%2588%253A%2520%25E4%25BE%259D%25E5%25AD%2598%25E6%2580%25A7%25E9%2580%2586%25E8%25BB%25A2%25E3%2581%25AE%25E5%258E%259F%25E5%2589%2587%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2582%2586%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MDU4YzBkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そゆっけ</dc:creator></item><item><title><![CDATA[[Bevy] アプリの終了アクションの変更点について]]></title><description><![CDATA[https://bevy-cheatbook.github.io/programming/app-builder.html#quitting-the-app
↑Xボタンなどでアプリを終了するシステムが解説されていますが、実際には動きません。
正しくは以下の通りです。

quit.rs
fn quit_system(
    mut interaction_query: Query&lt;&amp;Interaction, (Changed&lt;Interaction&gt;, With&lt;QuitButton&gt;),&gt;,
    mut exit: EventWriter...]]></description><link>https://zenn.dev/omini/articles/870cf995110feb</link><guid isPermaLink="true">https://zenn.dev/omini/articles/870cf995110feb</guid><pubDate>Mon, 12 May 2025 20:46:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E1DXDiwg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E7%25B5%2582%25E4%25BA%2586%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[爆速 Python 型チェッカーの ty を触ってみる]]></title><description><![CDATA[
 はじめに
今や Python の環境構築のスタンダードになりつつある uv (rye) や 高速 Linter の ruff などを管理する Astral から、Rust 製高速型チェッカーの ty がリリースされました。2025年5月現在、プレリリース版とのことで公式ドキュメントも整備されていない状態ではありますが、公式の README を読みながら試してみます。
https://github.com/astral-sh/ty

 インストール方法
uv を使っている方は以下のコマンドでグローバルにインストールできます。
uv tool install ty@latest
開発環境...]]></description><link>https://zenn.dev/prgckwb/articles/ty-type-checker</link><guid isPermaLink="true">https://zenn.dev/prgckwb/articles/ty-type-checker</guid><pubDate>Mon, 12 May 2025 15:19:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TBbs8nbM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2588%2586%25E9%2580%259F%2520Python%2520%25E5%259E%258B%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AB%25E3%2583%25BC%25E3%2581%25AE%2520ty%2520%25E3%2582%2592%25E8%25A7%25A6%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A1%25E3%2581%258F%25E3%2582%258F%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1MWU5MTZhMjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ちくわぶ</dc:creator></item><item><title><![CDATA[#94　Creating Solana Token Metadata]]></title><description><![CDATA[
 Introduction
Creating and managing tokens on the Solana blockchain has become a fundamental task for developers involved in decentralized finance (DeFi), NFTs, and other blockchain applications. However, the process involves more than just minting tokens; it also requires associating them with ...]]></description><link>https://zenn.dev/nxted_sapporo/articles/46288ae0d14f62</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/46288ae0d14f62</guid><pubDate>Mon, 12 May 2025 13:42:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XSYklTs3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%252394%25E3%2580%2580Creating%2520Solana%2520Token%2520Metadata%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[ABC405:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 405のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc405/tasks/abc405_a
解説
与えられた値 R（レート）と X（条件）に基づいて、R が「Rated対象」に該当するかを判定する問題です。
以下表の条件に従って判定します。



X
判定対象の R の範囲




1
1600 \leq R \leq 2999


2
1200 \leq R \leq 2399



コード

abc405a.rs
use proconio::inp...]]></description><link>https://zenn.dev/nakst_hide/articles/32bac535a03cf3</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/32bac535a03cf3</guid><pubDate>Mon, 12 May 2025 13:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dz8npuof--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC405%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[〚Rust〛GitHub ActionsでtauriのAndroidビルドを行う]]></title><description><![CDATA[https://github.com/tauri-apps/tauri-action/issues/525#issuecomment-2339980065
これを元に少し手を加えた。
name: Build

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  NDK_VERSION: 29.0.13113456

jobs:
  android:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4

 ...]]></description><link>https://zenn.dev/kinon/articles/4587c6b9e72fac</link><guid isPermaLink="true">https://zenn.dev/kinon/articles/4587c6b9e72fac</guid><pubDate>Mon, 12 May 2025 12:11:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bK_fJtMY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%259ARust%25E3%2580%259BGitHub%2520Actions%25E3%2581%25A7tauri%25E3%2581%25AEAndroid%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2590%2582%25E4%25B9%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZjVmM2M5OTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>㐂乃</dc:creator></item><item><title><![CDATA[0021-mpsc]]></title><description><![CDATA[use std::sync::mpsc;
use std::thread;
use std::time::Duration;
fn main() {
    let (tx, rx) = mpsc::channel();
    let tx1 = mpsc::Sender::clone(&amp;tx); // txをcloneしつつ、rxは同一のものを使用する

    thread::spawn(move || {
        let helloworld = vec![
            String::from("hello"),
            String...]]></description><link>https://zenn.dev/yukinekonyan/articles/88a19251ef9e66</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/88a19251ef9e66</guid><pubDate>Mon, 12 May 2025 09:52:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z_Xi-CDI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0021-mpsc%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0020-arc]]></title><description><![CDATA[use std::sync::{Arc, Mutex};
use std::thread;
fn main() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];
    for _ in 0..10 {
        let counter = Arc::clone(&amp;counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();
 ...]]></description><link>https://zenn.dev/yukinekonyan/articles/2ec8b3b337d0de</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/2ec8b3b337d0de</guid><pubDate>Mon, 12 May 2025 09:49:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D2SdUx9W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0020-arc%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item></channel></rss>