<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 27 Sep 2025 11:56:45 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ディープラーニングF/W (Define-by-Run)]]></title><description><![CDATA[
 要旨
近年のディープラーニングフレームワークは，大きく Define-and-Run（静的計算グラフ）方式と Define-by-Run（動的計算グラフ）方式の二つに大別される．前者は大規模展開や最適化に強みを持つ一方で，後者は柔軟性・可読性・研究開発における俊敏性に優れる．本稿では，Define-by-Run方式の理論的基盤，設計原則，研究への影響について概説し，Define-and-Run方式との比較を行う．

 はじめに
ディープラーニングの研究においては，計算グラフという抽象化が長らく重要な役割を担ってきた．従来の Define-and-Run フレームワーク（TensorF...]]></description><link>https://zenn.dev/sqlhkr/articles/21aa50b5c653a1</link><guid isPermaLink="true">https://zenn.dev/sqlhkr/articles/21aa50b5c653a1</guid><pubDate>Sat, 27 Sep 2025 08:25:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PlssbxE2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258B%25E3%2583%25B3%25E3%2582%25B0F%252FW%2520%2528Define-by-Run%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sql-hkr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzZTgxYmVhNDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sql-hkr</dc:creator></item><item><title><![CDATA[[ADK] 1.15.0で追加された Context Cachingと Static Instruction]]></title><description><![CDATA[こんにちは、サントリーこと大橋です。
本日(2025/09/26)、Agent Development Kit(以降ADK) 1.15.0と1.15.1がリリースされました。
https://github.com/google/adk-python/releases/tag/v1.15.0
https://github.com/google/adk-python/releases/tag/v1.15.1
※ 1.15.1はbugfixリリースです。
今回のリリースで追加された主な機能は以下です。

 1.15.0 (2025-09-24)

 機能 (Features)


[Core]...]]></description><link>https://zenn.dev/soundtricker/articles/6891fed2de91b0</link><guid isPermaLink="true">https://zenn.dev/soundtricker/articles/6891fed2de91b0</guid><pubDate>Sat, 27 Sep 2025 08:02:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7_SmamOu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BADK%255D%25201.15.0%25E3%2581%25A7%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%2520Context%2520Caching%25E3%2581%25A8%2520Static%2520Instruction%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keisuke%2520Oohashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2gzVXhkWXNLcWpLdFhESXlXRk50UHZyZUxmN2dXaFVsOWNBSVRHLVE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keisuke Oohashi</dc:creator></item><item><title><![CDATA[pandas でよくある集計パターンまとめ]]></title><description><![CDATA[
 パターン

CSV / Excel 読み込み

import pandas as pd

# CSV ファイル読み込み
df = pd.read_csv("data.csv")

# Excel ファイル読み込み（シート指定可）
df = pd.read_excel("data.xlsx", sheet_name="Sheet1")

# 最初の5行
print(df.head())

基本集計

# 件数・基本統計量
print(df.info())
print(df.describe())

# 行数・列数
print(df.shape)

# 特定列のユニーク数
print(d...]]></description><link>https://zenn.dev/ngt_masa/articles/8244e88eece60c</link><guid isPermaLink="true">https://zenn.dev/ngt_masa/articles/8244e88eece60c</guid><pubDate>Sat, 27 Sep 2025 03:49:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bk3Lo7Y_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:pandas%2520%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E3%2581%2582%25E3%2582%258B%25E9%259B%2586%25E8%25A8%2588%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258E%25E3%2581%25A1%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwNDBmZTQ2N2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぎちこ</dc:creator></item><item><title><![CDATA[PHP、Python、Node.js — 2025年の勝者は誰か？]]></title><description><![CDATA[Web開発の世界では、PHP、Python、Node.js をめぐる議論は決して止まりません。
「PHPはもう終わった」「Node.jsは時代遅れだ」…と毎年言われますが、2025年も3/4が過ぎた今、本当に優位なのはどれでしょうか？そして、2026年に向けてどの言語を学ぶべきでしょうか？

 


 PHP：依然としてWebの屋台骨
毎年「PHPは死んだのか？」と議論されますが、実際にはインターネット上の大多数のサイトは依然としてPHPで動いています。
WordPress や Drupal の圧倒的な普及は、PHPの存在感を確固たるものにしました。
特に PHP 8 以降は、JITコン...]]></description><link>https://zenn.dev/james_miller/articles/5a99dd66fcbaa2</link><guid isPermaLink="true">https://zenn.dev/james_miller/articles/5a99dd66fcbaa2</guid><pubDate>Sat, 27 Sep 2025 03:14:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d-z8lqd1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PHP%25E3%2580%2581Python%25E3%2580%2581Node.js%2520%25E2%2580%2594%25202025%25E5%25B9%25B4%25E3%2581%25AE%25E5%258B%259D%25E8%2580%2585%25E3%2581%25AF%25E8%25AA%25B0%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:james%2520miller%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWhFbWI3VDRXN0g3d05QbkY1WC1hVVFET2xSeF9KbkM1VHZiMDk2OHpZN1loM0Uwa2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>james miller</dc:creator></item><item><title><![CDATA[DDDとクリーンアーキテクチャをはじめよう-Python編]]></title><description><![CDATA[
 背景
ども！池田(ikedadada)です！前回はGolang編でDDD＋クリーンアーキテクチャの設計と実装方針をまとめました。本記事では、同じTodo
APIをPython（FastAPI + SQLAlchemy + MySQL）で組むときのキーポイントを紹介します。Node.js編の
AsyncLocalStorage、Go編のcontext.Contextに対応するPython特有の制約、特にSQLAlchemyのセッション管理とトランザクション境界の扱いに注目してください。
実装リポジトリ:
https://github.com/ikedadada/start-ddd-an...]]></description><link>https://zenn.dev/poporo/articles/20250927_1_start_ddd_and_clean_architecture_python</link><guid isPermaLink="true">https://zenn.dev/poporo/articles/20250927_1_start_ddd_and_clean_architecture_python</guid><pubDate>Sat, 27 Sep 2025 02:37:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FOmLkBv4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DDD%25E3%2581%25A8%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%25BC%25E3%2582%25AD%25E3%2583%2586%25E3%2582%25AF%25E3%2583%2581%25E3%2583%25A3%25E3%2582%2592%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2582%2588%25E3%2581%2586-Python%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ikedadada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzYjczNjc4ZDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ikedadada</dc:creator></item><item><title><![CDATA[小説「スネーク・ループ」コード梗概]]></title><description><![CDATA[
 小説「スネーク・ループ」コード梗概
# --- 起動ログ：都市の前提 -----------------------------------------------
PYTHON_CITY = {
    "governance": "binary",           # Yes / No で統治
    "origin": "AI_corp_experiment",   # 効率化の社会実験
    "watchdog": "auditor_bureau"      # 逸脱を監視・摘出
}

# --- 登場人物 -------------------------------...]]></description><link>https://zenn.dev/yasuna_ide/articles/3e5d17fdfdc231</link><guid isPermaLink="true">https://zenn.dev/yasuna_ide/articles/3e5d17fdfdc231</guid><pubDate>Sat, 27 Sep 2025 02:17:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--v8wxxI2m--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25B0%258F%25E8%25AA%25AC%25E3%2580%258C%25E3%2582%25B9%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%25BB%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2580%258D%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E6%25A2%2597%25E6%25A6%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasuna%2520Ide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY5NzBlNjljZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasuna Ide</dc:creator></item><item><title><![CDATA[回りくどすぎるPythonコードを書く]]></title><description><![CDATA[
 初めに
インタプリタ言語は、実行速度という最大の弱点を持つものの、
コードはとても簡潔に書けて読みやすい(ことが多い)。
そこで、僕が思ったのは

あえて長くコードを書くことはできるのか？

ということ。
インタプリタの恩恵を実感するためにも、あえて長くコードを書くことにした。

 対象

C言語がちょっとはわかる人 (#includeとint mainぐらい)


 今回作るもの
プログラミングと言ったら誰もが最初は通るであろう
「Hello world!\n」を出力するプログラムを書くことにした。
一応、通常のPythonでこれを書いてみると、
print("Hello worl...]]></description><link>https://zenn.dev/cheesecake2960/articles/675af351167f0a</link><guid isPermaLink="true">https://zenn.dev/cheesecake2960/articles/675af351167f0a</guid><pubDate>Sat, 27 Sep 2025 01:00:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7r7xukaR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259B%259E%25E3%2582%258A%25E3%2581%258F%25E3%2581%25A9%25E3%2581%2599%25E3%2581%258E%25E3%2582%258BPython%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Cheesecake2960%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Cheesecake2960</dc:creator></item><item><title><![CDATA[🛡️ FastAPI 実践入門：第十歩目で学ぶ セキュリティと認証の基本]]></title><description><![CDATA[
 🧱 はじめに
FastAPIの最終ステップでは、Webアプリケーションの根幹となる「セキュリティ対策」について深く掘り下げて学びます。セキュリティは、単にアクセスを制限するだけでなく、ユーザーのデータを守り、不正利用を防止し、信頼性の高いサービスを提供するための重要な要素です。
特に、ユーザー認証やパスワードの暗号化、OAuth2によるトークンベースの認可処理、さらにはJSON Web Token（JWT）を用いたより安全な認証方式など、実際のサービスで不可欠な機能を実装していきます。
この章では、FastAPIが提供する依存性注入（Depends）やセキュリティモジュールを駆使し、...]]></description><link>https://zenn.dev/oit2003/articles/5f942757dc589b</link><guid isPermaLink="true">https://zenn.dev/oit2003/articles/5f942757dc589b</guid><pubDate>Fri, 26 Sep 2025 23:41:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kgfDbAgZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520FastAPI%2520%25E5%25AE%259F%25E8%25B7%25B5%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E7%25AC%25AC%25E5%258D%2581%25E6%25AD%25A9%25E7%259B%25AE%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2581%25A8%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OIT2003%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUwxN0ZaM1B3YkZyak5GWFVZRnNva000aldZTWZaQzc0MVh1UzhtRDdlZUNJVT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OIT2003</dc:creator></item><item><title><![CDATA[Django REST FrameWorkのtest（unittest）をvscodeから実行する]]></title><description><![CDATA[
 概要
Django REST FrameWorkを用いていて、VscodeのTesting機能（Python testing in vscode）を用いてテストの実行とデバッグをしようと設定していたときに、結構苦戦したのでその備忘録

 設定ファイル
悪戦苦闘した結果、以下のような設定ファイルでできた。

 setting.json
{
    "python.defaultInterpreterPath": "&lt;path_to_your_interprter&gt;",
    "python.testing.unittestEnabled": true,
    "pyth...]]></description><link>https://zenn.dev/techliberty/articles/915180ea7c3029</link><guid isPermaLink="true">https://zenn.dev/techliberty/articles/915180ea7c3029</guid><pubDate>Fri, 26 Sep 2025 16:19:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wql3M7OW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%2520REST%2520FrameWork%25E3%2581%25AEtest%25EF%25BC%2588unittest%25EF%25BC%2589%25E3%2582%2592vscode%25E3%2581%258B%25E3%2582%2589%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:EM%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmVZdHpoalNsVi02V0N1WFppbXhoSWNFQUY2Z0oySzBfTDNVbGl5Nm5UR0M2b3pUZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>EM</dc:creator></item><item><title><![CDATA[(無料) WSL2へのMiniforge導入メモ]]></title><description><![CDATA[
 ダウンロードからインストーラー実行まで
Miniforgeのgithubのリリースから対象のインストーラーを見つける:

https://github.com/conda-forge/miniforge/releases

自身のCPUに応じて適切なインストーラのリンクをコピーしてダウンロード。
以下はIntel CPUの場合の例
sudo wget https://github.com/conda-forge/miniforge/releases/download/25.3.1-0/Miniforge3-25.3.1-0-Linux-x86_64.sh
ダウンロードしたファイルの権...]]></description><link>https://zenn.dev/kigishi/articles/5cb1f7ac00307c</link><guid isPermaLink="true">https://zenn.dev/kigishi/articles/5cb1f7ac00307c</guid><pubDate>Fri, 26 Sep 2025 15:55:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u-0B4I7M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2528%25E7%2584%25A1%25E6%2596%2599%2529%2520WSL2%25E3%2581%25B8%25E3%2581%25AEMiniforge%25E5%25B0%258E%25E5%2585%25A5%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%2599%25BD%25E5%25B2%25A9%2520%25E6%2599%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2OWIzOTFjMWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>白岩 景</dc:creator></item><item><title><![CDATA[【リリースノート】Baby Monitor Web App v1.0.0 - DockerとGCPですぐに使える見守りアプリ、堂々リリース！]]></title><description><![CDATA[

 はじめに
この度、リアルタイムで赤ちゃんの様子を確認できる「Baby Monitor Web App」の記念すべきファーストリリース v1.0.0 を公開しました！🎉
本プロジェクトは、手軽にセットアップできる見守りカメラのWebアプリケーションを提供することを目的としています。Docker Composeによる簡単なローカル環境構築から、Terraformを使ったGCPへの本格的なデプロイまで、幅広いユースケースに対応可能です。

 主な変更点 (Highlights)
v1.0.0は最初のリリースであり、アプリケーションの基盤となる多くの機能が実装されました。


✨ モダンな...]]></description><link>https://zenn.dev/sunwood_ai_labs/articles/20250923-baby-monitor-web-app-1-0-0-release</link><guid isPermaLink="true">https://zenn.dev/sunwood_ai_labs/articles/20250923-baby-monitor-web-app-1-0-0-release</guid><pubDate>Fri, 26 Sep 2025 15:08:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IEWLLvtQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%25E3%2580%2591Baby%2520Monitor%2520Web%2520App%2520v1.0.0%2520-%2520Docker%25E3%2581%25A8GCP%25E3%2581%25A7%25E3%2581%2599%25E3%2581%2590%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E8%25A6%258B...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Maki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdpSmVyNldLVlpKLUd4N054QWVuSFVtYXQ3MUhhd1NXaU5hRG5FTnZiMXZZdHBIaGs9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maki</dc:creator></item><item><title><![CDATA[PythonでPLCを動かす。PCからビットデバイスをON/OFFする簡単レシピ]]></title><description><![CDATA[
 目的
工場の自動化（FA）に欠かせないPLC（プログラマブルロジックコントローラ）。PLCの稼働データをPCで収集したり、PCからパラメータを変更したりしたいと考えたことはありませんか？
この記事では、Pythonのサードパーティライブラリであるkvhostlinkを使って、PCからキーエンスのPLC（KVシリーズなど）のデバイスに簡単にアクセスする方法を、具体的なサンプルコードを交えてご紹介します。

 kvhostlinkとは
kvhostlinkは、キーエンス社のPLCとEthernet経由で通信するためのPythonライブラリです。キーエンス社のPLCが標準でサポートしている...]]></description><link>https://zenn.dev/ninato/articles/d809e6d99139be</link><guid isPermaLink="true">https://zenn.dev/ninato/articles/d809e6d99139be</guid><pubDate>Fri, 26 Sep 2025 14:25:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I_tBBfgj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7PLC%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E3%2580%2582PC%25E3%2581%258B%25E3%2582%2589%25E3%2583%2593%25E3%2583%2583%25E3%2583%2588%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25B9%25E3%2582%2592ON%252FOFF%25E3%2581%2599%25E3%2582%258B%25E7%25B0%25A1%25E5%258D%2598%25E3%2583%25AC%25E3%2582%25B7%25E3%2583%2594%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ninato%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0hpczFGNmtUYndaMFlYd0ZIRVdtTUNJMWQ1NHJsNWlYMmZGNWt6WGVQb3NYei1RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ninato</dc:creator></item><item><title><![CDATA[Cyclic Reductionでポアソン方程式を解く【コードあり】]]></title><description><![CDATA[Cyclic Reductionの"くりっくり"の部分

 アブストラクト

ポアソン方程式を直交格子上で離散化すると、三重対角行列を係数行列とする線形連立方程式になる。
三重対角行列を係数行列とする線形連立方程式の解法としてCyclic Reduction法がある。
今回は一次元のポアソン方程式を対象とする。この場合Cyclic Reduction法は不等間隔格子にも対応できる。

pythonコードの全体は最後にあります。


 ポアソン方程式を不等間隔格子上で離散化する
今回解きたいのは一次元のポアソン方程式

\frac{d^2p}{d x^2}=S

です。p=p(x)、S=S...]]></description><link>https://zenn.dev/seco_han_man/articles/7a72c0611b541f</link><guid isPermaLink="true">https://zenn.dev/seco_han_man/articles/7a72c0611b541f</guid><pubDate>Fri, 26 Sep 2025 13:33:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Nk9BbZYB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cyclic%2520Reduction%25E3%2581%25A7%25E3%2583%259D%25E3%2582%25A2%25E3%2582%25BD%25E3%2583%25B3%25E6%2596%25B9%25E7%25A8%258B%25E5%25BC%258F%25E3%2582%2592%25E8%25A7%25A3%25E3%2581%258F%25E3%2580%2590%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2582%25E3%2582%258A%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%2589%25E3%2581%25BB%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTVlYWJmMWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はらほろ</dc:creator></item><item><title><![CDATA[Qiita記事"Python × 公開経済データで学ぶ マクロ経済学 入門（５）：マクロ経済指標から見るデフレギャップの時系列的分析（200]]></title><description><![CDATA[
 概要（要約）
この記事は「Python × 公開経済データで学ぶマクロ経済学」シリーズの第５回で、CPI（消費者物価指数）を使ってインフレ率を計算・比較する実務的な手順を示しています。World Bank（wbdata）を使ったデータ取得例、CPI から自分でインフレ率を計算する方法、World Bank が提供する既製のインフレ率との比較プロットなどを丁寧に解説しています（投稿日：2025-08-17）。(Qiita)

 この記事の流れ（ポイント）

公開データの取得：wbdata を使い、各種マクロ指標（GDP、消費、投資、CPI 等）を年次で取得する例を示しています。(Qii...]]></description><link>https://zenn.dev/masxkot/articles/62434c00f9478f</link><guid isPermaLink="true">https://zenn.dev/masxkot/articles/62434c00f9478f</guid><pubDate>Fri, 26 Sep 2025 12:40:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W61VbVh1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Qiita%25E8%25A8%2598%25E4%25BA%258B%2522Python%2520%25C3%2597%2520%25E5%2585%25AC%25E9%2596%258B%25E7%25B5%258C%25E6%25B8%2588%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E5%25AD%25A6%2520%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2588%25EF%25BC%2595%25EF%25BC%2589%25EF%25BC%259A%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E6%258C%2587%25E6%25A8%2599%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2582%258B%25E3%2583%2587%25E3%2583%2595%25E3%2583%25AC%25E3%2582%25AE%25E3%2583%25A3...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mas%2520x%2520kot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdkTkdwU3BkYkZMUkJtQU95OEsyNzF4UTNIeXhNMDFxTUM0ZzdIOFo4ZnMwQWVnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mas x kot</dc:creator></item><item><title><![CDATA[Qiita記事"Python × 公開経済データで学ぶ マクロ経済学 入門（４）：各国の政府支出はどう変わった？2000年以降の]]></title><description><![CDATA[
 記事の要約と詳しい解説（噛み砕き版）
いい記事ですね — マクロ指標を wbdata で取ってきて「2000年以降の各国の政府支出／財政の動き」を見よう、という内容です。記事名・著者・公開日などのメタ情報と目的は本文に明示されています。(Qiita)


 1) この記事の目的（ざっくり）

World Bank の公開データを Python (wbdata + pandas) で取得し、各国の GDP 構成要素（民間消費・投資・政府支出・輸出入・GDP）を整理して、政府支出や債務などのマクロ政策の変化を時系列で読み解く。(Qiita)



 2) コードの基本（データ取得／整形の...]]></description><link>https://zenn.dev/masxkot/articles/4529ecbcda61e8</link><guid isPermaLink="true">https://zenn.dev/masxkot/articles/4529ecbcda61e8</guid><pubDate>Fri, 26 Sep 2025 12:36:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SIuvXc-Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Qiita%25E8%25A8%2598%25E4%25BA%258B%2522Python%2520%25C3%2597%2520%25E5%2585%25AC%25E9%2596%258B%25E7%25B5%258C%25E6%25B8%2588%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E5%25AD%25A6%2520%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2588%25EF%25BC%2594%25EF%25BC%2589%25EF%25BC%259A%25E5%2590%2584%25E5%259B%25BD%25E3%2581%25AE%25E6%2594%25BF%25E5%25BA%259C%25E6%2594%25AF%25E5%2587%25BA%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%2586%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25EF%25BC%259F2...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mas%2520x%2520kot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdkTkdwU3BkYkZMUkJtQU95OEsyNzF4UTNIeXhNMDFxTUM0ZzdIOFo4ZnMwQWVnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mas x kot</dc:creator></item><item><title><![CDATA[Qiita記事（**「Python × 公開経済データで学ぶ マクロ経済学 入門（3）」**）]]></title><description><![CDATA[いいですね — 記事を読み込んだ上で「中身を丁寧に噛み砕いて」解説します。下は要点→コードの動き→得られた結果の読み方→統計的注意点と改良案、という順で整理しました。参照元はすべて該当Qiita記事です。(Qiita)


 1) 記事の目的と構成（サマリ）
この記事（「Python × 公開経済データで学ぶ マクロ経済学 入門（3）」）は、World Bank の公開データを wbdata で取得して（GDP と構成要素）、日本を例に 時系列的な「予測因果」＝グレンジャー因果性 を調べるワークフローを示しています。特に1975–2024年データを取得し、日本を 1975–2000（前期...]]></description><link>https://zenn.dev/masxkot/articles/3e3659e090278a</link><guid isPermaLink="true">https://zenn.dev/masxkot/articles/3e3659e090278a</guid><pubDate>Fri, 26 Sep 2025 12:31:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hchVUMEs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Qiita%25E8%25A8%2598%25E4%25BA%258B%25EF%25BC%2588%252A%252A%25E3%2580%258CPython%2520%25C3%2597%2520%25E5%2585%25AC%25E9%2596%258B%25E7%25B5%258C%25E6%25B8%2588%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E5%25AD%25A6%2520%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%25883%25EF%25BC%2589%25E3%2580%258D%252A%252A%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mas%2520x%2520kot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdkTkdwU3BkYkZMUkJtQU95OEsyNzF4UTNIeXhNMDFxTUM0ZzdIOFo4ZnMwQWVnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mas x kot</dc:creator></item><item><title><![CDATA[Qiita 記事**「Python × 公開経済データで学ぶ マクロ経済学 入門（２）：GDP成長率と構成比で読み解く世界経済の構造変化（]]></title><description><![CDATA[いいですね — 読んで要点を整理して分かりやすく解説します。以下はご指定の Qiita 記事
「Python × 公開経済データで学ぶ マクロ経済学 入門（２）：GDP成長率と構成比で読み解く世界経済の構造変化（1976–2024）」 の内容を踏まえた丁寧な解説です。本文の重要点に合わせて注釈（出典）を付けています。(Qiita)

 概要（この記事が何をしているか）
この記事は World Bank の公開データを wbdata で取得し、1976〜2024 年の長期データを使って各国の（1）GDP 成長率の変化 と（2）GDP に占める構成比（Consumption, Investm...]]></description><link>https://zenn.dev/masxkot/articles/68d073be110dff</link><guid isPermaLink="true">https://zenn.dev/masxkot/articles/68d073be110dff</guid><pubDate>Fri, 26 Sep 2025 12:25:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2RPQweVm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Qiita%2520%25E8%25A8%2598%25E4%25BA%258B%252A%252A%25E3%2580%258CPython%2520%25C3%2597%2520%25E5%2585%25AC%25E9%2596%258B%25E7%25B5%258C%25E6%25B8%2588%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E5%25AD%25A6%2520%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2588%25EF%25BC%2592%25EF%25BC%2589%25EF%25BC%259AGDP%25E6%2588%2590%25E9%2595%25B7%25E7%258E%2587%25E3%2581%25A8%25E6%25A7%258B%25E6%2588%2590%25E6%25AF%2594%25E3%2581%25A7%25E8%25AA%25AD%25E3%2581%25BF...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mas%2520x%2520kot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdkTkdwU3BkYkZMUkJtQU95OEsyNzF4UTNIeXhNMDFxTUM0ZzdIOFo4ZnMwQWVnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mas x kot</dc:creator></item><item><title><![CDATA[解説：`Python × 公開経済データで学ぶ マクロ経済学 入門：30年分のGDPと政府支出推移を日本と米国で比較`（Qiita 記事）読]]></title><description><![CDATA[
 解説：Python × 公開経済データで学ぶ マクロ経済学 入門：30年分のGDPと政府支出推移を日本と米国で比較（Qiita 記事）読み解きメモ
いい記事です — 要点ごとに丁寧に噛み砕いて解説します。元記事のコード・トラブルシューティング・結果解釈まで一緒に追っています。原稿は以下を参照しています。(Qiita)


 1) 目的と全体像（この記事で何をするか）

目的：公開データ（主に World Bank API）を Python (wbdata, pandas) で取得し、過去30年の GDP と政府支出（G）を国別に取得・比較することでマクロ経済の基本（支出面）を学ぶ。(...]]></description><link>https://zenn.dev/masxkot/articles/ace8cac5e02f72</link><guid isPermaLink="true">https://zenn.dev/masxkot/articles/ace8cac5e02f72</guid><pubDate>Fri, 26 Sep 2025 12:20:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H5e9dSGs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%2560Python%2520%25C3%2597%2520%25E5%2585%25AC%25E9%2596%258B%25E7%25B5%258C%25E6%25B8%2588%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E7%25B5%258C%25E6%25B8%2588%25E5%25AD%25A6%2520%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A30%25E5%25B9%25B4%25E5%2588%2586%25E3%2581%25AEGDP%25E3%2581%25A8%25E6%2594%25BF%25E5%25BA%259C%25E6%2594%25AF%25E5%2587%25BA%25E6%258E%25A8%25E7%25A7%25BB%25E3%2582%2592%25E6%2597%25A5%25E6%259C%25AC%25E3%2581%25A8%25E7%25B1%25B3%25E5%259B%25BD%25E3%2581%25A7%25E6%25AF%2594...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mas%2520x%2520kot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdkTkdwU3BkYkZMUkJtQU95OEsyNzF4UTNIeXhNMDFxTUM0ZzdIOFo4ZnMwQWVnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mas x kot</dc:creator></item><item><title><![CDATA[【Python】なんでabstractmethodだけimportするの？classmethodとの違い]]></title><description><![CDATA[今日は、Pythonの「abstractmethod」について、なぜこれだけインポートが必要なのかを説明します。

 まず基本的な違いを見てみよう
Pythonには、メソッドを特別な形で使うための仕組みがいくつかあります。

 classmethod と staticmethod（インポート不要）
class Sample:
    count = 0
    
    @classmethod  # インポートしなくても使える！
    def get_count(cls):
        return cls.count
    
    @staticmethod  # これもイ...]]></description><link>https://zenn.dev/hovinci/articles/49a33491dd3174</link><guid isPermaLink="true">https://zenn.dev/hovinci/articles/49a33491dd3174</guid><pubDate>Fri, 26 Sep 2025 09:45:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ub9DcWOK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A7abstractmethod%25E3%2581%25A0%25E3%2581%2591import%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25EF%25BC%259Fclassmethod%25E3%2581%25A8%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259B%25E3%2583%25B4%25E3%2582%25A3%25E3%2583%25B3%25E3%2583%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0MWFjY2M3YWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ホヴィンチ</dc:creator></item><item><title><![CDATA[誰でもわかる線形計画法の理論と実装]]></title><description><![CDATA[はじめまして、まつのです！
機械学習や生成AIの受託開発・AI学習サービス「aipass」の運営をしている株式会社dotConfという会社で、代表をしております！

この記事では、線形計画法の理論をシンプルに解説し、Pythonを用いた実装例を紹介します。

 線形計画法とは？
「限られた資源の中で、できるだけ得をしたい」  これが線形計画法の本質です。
もう少し数学的な表現をすると、与えられた制約条件のもとで、目的関数（コストや利益など）を最大化または最小化する問題を解くことための方法です。
例えば…

レストランが「限られた食材」で「利益を最大化」したい
工場が「限られた時間と材料」...]]></description><link>https://zenn.dev/dotconf/articles/2025-09-25-lp-theory-and-development</link><guid isPermaLink="true">https://zenn.dev/dotconf/articles/2025-09-25-lp-theory-and-development</guid><pubDate>Fri, 26 Sep 2025 09:01:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--X7pPnzQA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25AA%25B0%25E3%2581%25A7%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%258B%25E7%25B7%259A%25E5%25BD%25A2%25E8%25A8%2588%25E7%2594%25BB%25E6%25B3%2595%25E3%2581%25AE%25E7%2590%2586%25E8%25AB%2596%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BE%25E3%2581%25A4%25E3%2581%25AE%2520%257C%2520AI%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQwZjJjZjQxNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:dotConf%252C%2520Inc%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5MTFkZmZjMTUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まつの | AIエンジニア</dc:creator></item></channel></rss>