<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-03T15:14:00+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075485</id>
    <published>2025-09-03T15:14:00+09:00</published>
    <updated>2025-09-03T15:14:00+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/1699ea706e4c35e0b820"/>
    <url>https://qiita.com/nozomi2025/items/1699ea706e4c35e0b820</url>
    <title>【デザインパターン】ストラテジーパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ストラテジー（Strategy）パターン は、
アルゴリズムをカプセル化し、実行時に差し替え可能にする デザインパターンです。

解決する問題

複数のアルゴリズム（処理手順）を切り替えたい
if/else や switch 文が増えすぎて管理が大変...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075367</id>
    <published>2025-09-03T10:13:08+09:00</published>
    <updated>2025-09-03T10:13:08+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/8b059a600d7b3f419a7e"/>
    <url>https://qiita.com/majoLibrary/items/8b059a600d7b3f419a7e</url>
    <title>【Android】I/O境界はRepositoryに閉じ込めよ</title>
    <content type="text">結論
I/O境界はRepositoryに閉じ込め、
UI（や任意の上位層）はI/OやDispatcherを知らないようにする。

I/Oについて / 前提
ここでは「計算ではなく、外部とのやりとりで遅延が発生する処理」とする。

特別な対応が必要な理由

1. 時間が読め...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075080</id>
    <published>2025-09-02T16:17:45+09:00</published>
    <updated>2025-09-02T16:17:45+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/ccd4d9ae60593a6b8465"/>
    <url>https://qiita.com/nozomi2025/items/ccd4d9ae60593a6b8465</url>
    <title>【デザインパターン】オブザーバパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
オブザーバ（Observer）パターン は、
あるオブジェクト（Subject）の状態変化を、依存する複数のオブジェクト（Observer）に自動的に通知する デザインパターンです。

解決する問題

「状態が変わったら関連する処理を全部更新したい」...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073370</id>
    <published>2025-09-02T09:04:17+09:00</published>
    <updated>2025-09-03T15:39:36+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/gohan_t/items/288451d86c22be9303e6"/>
    <url>https://qiita.com/gohan_t/items/288451d86c22be9303e6</url>
    <title>Spring BootでjOOQを利用する</title>
    <content type="text">はじめに
jOOQはMyBatisなどと同じORマッパーの一つで型安全にSQLを組み立てることができます。
この記事では、SpringBootのアプリケーションにjOOQを導入し、利用するところまでをまとめてみました。

環境

Library
Version

...</content>
    <author>
      <name>gohan_t</name>
    </author>
  </entry>
</feed>
