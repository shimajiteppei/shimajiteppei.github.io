<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-02T16:17:45+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075080</id>
    <published>2025-09-02T16:17:45+09:00</published>
    <updated>2025-09-02T16:17:45+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/ccd4d9ae60593a6b8465"/>
    <url>https://qiita.com/nozomi2025/items/ccd4d9ae60593a6b8465</url>
    <title>【デザインパターン】オブザーバパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
オブザーバ（Observer）パターン は、
あるオブジェクト（Subject）の状態変化を、依存する複数のオブジェクト（Observer）に自動的に通知する デザインパターンです。

解決する問題

「状態が変わったら関連する処理を全部更新したい」...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073370</id>
    <published>2025-09-02T09:04:17+09:00</published>
    <updated>2025-09-02T09:04:17+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/gohan_t/items/288451d86c22be9303e6"/>
    <url>https://qiita.com/gohan_t/items/288451d86c22be9303e6</url>
    <title>Spring BootでjOOQを利用する</title>
    <content type="text">はじめに
jOOQはMyBatisなどと同じORマッパーの一つで型安全にSQLを組み立てることができます。
この記事では、SpringBootのアプリケーションにjOOQを導入し、利用するところまでをまとめてみました。

環境

Library
Version

...</content>
    <author>
      <name>gohan_t</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2074873</id>
    <published>2025-09-02T01:20:53+09:00</published>
    <updated>2025-09-02T01:20:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/koinunopochi/items/1f5f01c964feab486a78"/>
    <url>https://qiita.com/koinunopochi/items/1f5f01c964feab486a78</url>
    <title>(wip)kotlinなんもわからん</title>
    <content type="text">概要
kotlin初心者向けメモ
後で見返すようのやつ

環境

GraphQLやりたいのもあって、そのパッケージを入れてる
kotlinは、Node.jsみたいにLTSがないので特に細かく指定せずspringのinitializrに従う
Javaはひとまず新すぎな...</content>
    <author>
      <name>koinunopochi</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2074653</id>
    <published>2025-09-01T16:25:13+09:00</published>
    <updated>2025-09-01T16:29:41+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/7e636cf9cc25c86774fd"/>
    <url>https://qiita.com/nozomi2025/items/7e636cf9cc25c86774fd</url>
    <title>【デザインパターン】プロキシパターン解説（Flutter/Android 実例付き）</title>
    <content type="text">1. パターンの意図
プロキシ（Proxy)パターンは、
本物のオブジェクト（RealSubject)へのアクセスを代理するオブジェクトを提供するデザインパターンです。

解決する問題

オブジェクトの生成やアクセスにコストが高い（遅延生成したい）
セキュリティーのためア...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
