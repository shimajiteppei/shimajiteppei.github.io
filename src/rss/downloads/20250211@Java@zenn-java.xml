<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 11 Feb 2025 08:42:04 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Java】switch式について]]></title><description><![CDATA[
 従来のswitch文とは？
switch文は、ある値（例えば整数や文字）を比較し、それに応じた処理を行う制御構造
if文と似ていますが、分岐が多い場合にスッキリ書けるのが特徴

switch (変数) で判定する変数を指定。
caseに続けて比較する値を書く。
breakを入れないと、次のcaseまで実行されてしまう。
どのcase にも当てはまらない場合、defaultが実行される。

例）数値に応じたメッセージを表示する
package switchest;

public class SwitchExample {
    public static void main(Str...]]></description><link>https://zenn.dev/codek2/articles/962e23dcd88e19</link><guid isPermaLink="true">https://zenn.dev/codek2/articles/962e23dcd88e19</guid><pubDate>Tue, 11 Feb 2025 08:32:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q6q6u9A_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591switch%25E5%25BC%258F%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Udemy%25E3%2583%25BB%25E4%25BC%2581%25E6%25A5%25AD%25E3%2583%25BB%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWJNcXYyNnJHY2xGVDEtOURITHVZTjhrWUpWOVN1aTJWYmxkNU9aejljTmtNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Udemy・企業・オンラインプログラミングスクール講師♪codek2</dc:creator></item><item><title><![CDATA[Doma で many-to-many 型のリレーションシップを扱う（Criteria API版）]]></title><description><![CDATA[この記事では、Doma の Criteria API を使って many-to-many 型のリレーションシップを扱う方法を紹介します。
SQLを使ってmany-to-many 型のリレーションシップを扱う方法は以下の記事を参照ください。
https://zenn.dev/nakamura_to/articles/3bd731d3c50fa5

 DDL と初期データ
例えば、users、roles、users_roles の 3 つのテーブルがあるとしましょう。1 人のユーザーが複数のロールを持つことができ、1 つのロールが複数のユーザーに割り当てられることがある、というケースです（冒...]]></description><link>https://zenn.dev/nakamura_to/articles/64b35bfcbc3474</link><guid isPermaLink="true">https://zenn.dev/nakamura_to/articles/64b35bfcbc3474</guid><pubDate>Tue, 11 Feb 2025 01:16:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--j3kcJfAB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Doma%2520%25E3%2581%25A7%2520many-to-many%2520%25E5%259E%258B%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E6%2589%25B1%25E3%2581%2586%25EF%25BC%2588Criteria%2520API%25E7%2589%2588%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakamura_to%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lSWkNjYVdwdlhnTTRldkc0QmM1QjhlZVFGbTUxYm1FZjhXbERLPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakamura_to</dc:creator></item><item><title><![CDATA[Doma で many-to-many 型のリレーションシップを扱う]]></title><description><![CDATA[Doma 3.4.0 で導入された アグリゲート戦略 を利用することで、many-to-many 型のリレーションシップが簡単に扱えるようになりました。

 アグリゲートとは
「アグリゲート」という言葉は、DDD（ドメイン駆動設計）の用語として使われることもありますが、ここでは「関連先のエンティティの参照を持つエンティティ」といった意味で捉えてもらえればと思います。
（私の記憶では、DDD のアグリゲートという概念が登場する前から、一般的な用語として使われていたように思いますが、どうでしたっけ？）
Doma はアグリゲートの構築を簡単にする機能を持ちます。

 DDL と初期データ
例え...]]></description><link>https://zenn.dev/nakamura_to/articles/3bd731d3c50fa5</link><guid isPermaLink="true">https://zenn.dev/nakamura_to/articles/3bd731d3c50fa5</guid><pubDate>Mon, 10 Feb 2025 23:49:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RwCAsMCN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Doma%2520%25E3%2581%25A7%2520many-to-many%2520%25E5%259E%258B%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E6%2589%25B1%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakamura_to%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lSWkNjYVdwdlhnTTRldkc0QmM1QjhlZVFGbTUxYm1FZjhXbERLPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakamura_to</dc:creator></item><item><title><![CDATA[【Java】レコードクラスについて]]></title><description><![CDATA[
 レコードクラスとは？

Java16で正式に追加された機能。
「データを保持するためのクラス」を簡潔に記述できます。

今までは例えば以下のようにすべて手動で記述していたものを
※lombokを使わなかった場合
package recordTest;

import java.util.Objects;

public class Item {
	private final int id;
	private final String name;

	public Item(int id, String name) {
		this.id = id;
		this.name = nam...]]></description><link>https://zenn.dev/codek2/articles/cac9d0a5a2e237</link><guid isPermaLink="true">https://zenn.dev/codek2/articles/cac9d0a5a2e237</guid><pubDate>Mon, 10 Feb 2025 08:55:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1S1bnFa3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2583%25AC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Udemy%25E3%2583%25BB%25E4%25BC%2581%25E6%25A5%25AD%25E3%2583%25BB%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWJNcXYyNnJHY2xGVDEtOURITHVZTjhrWUpWOVN1aTJWYmxkNU9aejljTmtNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Udemy・企業・オンラインプログラミングスクール講師♪codek2</dc:creator></item><item><title><![CDATA[Java Springbootプロジェクト・Mavenを選択時のディレクトリ構成]]></title><description><![CDATA[
・src/main/java・・・javaソースを格納
・static・・・CSS・javascriptのファイルを入れる　staticフォルダ配下はサーバーにデプロイされるときにコンテキストルートにコピーされる。（コンテキストルート＝アプリケーションの最上位の）
・src/main/resources/templatesフォルダ・・テンプレートエンジンで使用されるファイルを格納する
・Maven依存関係・・Mavenが管理しているローカルリポジトリであり、.jarファイルの一覧を参照できる
Springbootプロジェクトの特別なファイル
・SpringStartApplicatio...]]></description><link>https://zenn.dev/masa_blog_tech/articles/ed9ec95da1c837</link><guid isPermaLink="true">https://zenn.dev/masa_blog_tech/articles/ed9ec95da1c837</guid><pubDate>Sun, 09 Feb 2025 11:18:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZDZFUmIo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Springboot%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25BBMaven%25E3%2582%2592%25E9%2581%25B8%25E6%258A%259E%25E6%2599%2582%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BB%25E3%2581%25BC%25E6%259C%25AA%25E7%25B5%258C%25E9%25A8%2593PG%25E3%2583%259E%25E3%2582%25B5%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E5%25AD%25A6...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRpT3FfeUNFNnJqeEJQSGsxX3Y3TUlLV2kxcDNnN0UyVnNla3BSaU5OMW5WUzRrd0k9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ほぼ未経験PGマサのプログラミング学習ブログ</dc:creator></item><item><title><![CDATA[macOS Sequoia で Subclipse + JavaHL による SVN操作を有効化する方法]]></title><description><![CDATA[Mac + Eclipse + Subclipse + JavaHL という組みあわせについて調べると、ヒットするネット知見がどうにも古い。
ただ古いだけなら良いが、手順に再現性がなくなっているため、試行錯誤して正解を探してみることにした。

 発端は？
Homebrew でインストールした svn に JavaHL のライブラリが付属されない。
（昔はbrew install subversionを叩けば勝手に付属されていたであろう記述が散見される）
JavaHLは、Subclipse を利用する際に通すIFとして、デフォルトのSVNKitの代替としての選択肢なのだが、現状は（おそらく...]]></description><link>https://zenn.dev/plesio/articles/5ecb338b1a361c</link><guid isPermaLink="true">https://zenn.dev/plesio/articles/5ecb338b1a361c</guid><pubDate>Sat, 08 Feb 2025 14:38:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pTragIKF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:macOS%2520Sequoia%2520%25E3%2581%25A7%2520Subclipse%2520%252B%2520JavaHL%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%2520SVN%25E6%2593%258D%25E4%25BD%259C%25E3%2582%2592%25E6%259C%2589%25E5%258A%25B9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:plesio_%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3NjgxN2M0NWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>plesio_</dc:creator></item><item><title><![CDATA[【備忘録】Java SpringBoot 取っ掛かり]]></title><description><![CDATA[
 導入
JavaのSpringBootを利用することはそこそこ多いが、新規で作成する際、毎回同じことを検索していることが多いので、ほぼ自分用に備忘録を作成することにしました。
今回は、とりあえずプロジェクトを作成して「プレゼンテーション層」と「ビジネスロジック層」の2つについて記載します。
※データアクセス層は後日作成予定

 実装

 やりたいこと
「プレゼンテーション層」と「ビジネスロジック層」の2つをメインで行うので以下が処理できるような超簡単なものを目標にしておきます。

新しくプロジェクトを作成してからRest APIとしてリクエストを受け取る
エラーが起きたときに共通の処理...]]></description><link>https://zenn.dev/taro_memo/articles/a57d7069976712</link><guid isPermaLink="true">https://zenn.dev/taro_memo/articles/a57d7069976712</guid><pubDate>Sat, 08 Feb 2025 08:01:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PA0rdYDy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E3%2580%2591Java%2520SpringBoot%2520%25E5%258F%2596%25E3%2581%25A3%25E6%258E%259B%25E3%2581%258B%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSS1MMGNtLTdqejBtYXBkUFhRWDB4TFFjRHVmaWh6cHNRa3ZrYXlpVjNicEMwPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taro</dc:creator></item><item><title><![CDATA[S3互換Objest Storageを使っている場合、SDK for Java 2.xを2.30.0以上にversion upする時は要注意]]></title><description><![CDATA[
 TL;DR
S3には次のようなData Integrity Protectionsの仕組みがあります。
https://docs.aws.amazon.com/sdkref/latest/guide/feature-dataintegrity.html
この仕組みが、SDK for Java 2.xの2.30.0より自動で有効化されるようになりました。
https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/s3-checksums.html
もしも使っているS3互換Object Storageがコレに対応してい...]]></description><link>https://zenn.dev/be_hase/articles/964abcf2f6978e</link><guid isPermaLink="true">https://zenn.dev/be_hase/articles/964abcf2f6978e</guid><pubDate>Sat, 08 Feb 2025 00:45:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fYm1GY63--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:S3%25E4%25BA%2592%25E6%258F%259BObjest%2520Storage%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2580%2581SDK%2520for%2520Java%25202.x%25E3%2582%25922.30.0%25E4%25BB%25A5%25E4%25B8%258A%25E3%2581%25ABvers...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:be-hase%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNaVhNZnFBWE9yTXdHZVdBMEpmaE5OX3FJRVExUWQzRUw2MVJtM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>be-hase</dc:creator></item><item><title><![CDATA[チャレンジパッドNeoのパスワードを突破した方法]]></title><description><![CDATA[今回は、チャレンジパッドNeo/Next において、どのようにして 開発者向けオプション のパスワードを回避したのかを解説します。

 AOSPの抜け穴を探す
まずは、ブラウザが開けるかどうかを確認します。
これは、APKをダウンロードしてインストールできるかどうかを確認するためです。
確認方法としては、Wi-Fi の設定からヘルプを開くか、OSSライセンスを開くか、キーボードショートカットを使うかです。
結論としては、無理です。
と言うか、仮にブラウザを開けたとしても無理でした。
と言うのも、この 開発者向けオプション を塞ぐ機能自体、ただパスワードを掛けるだけで無く、ブラウザ、検索ア...]]></description><link>https://zenn.dev/s1204it/articles/052297d5c37dd8</link><guid isPermaLink="true">https://zenn.dev/s1204it/articles/052297d5c37dd8</guid><pubDate>Fri, 07 Feb 2025 12:27:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s11-KyNn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%2591%25E3%2583%2583%25E3%2583%2589Neo%25E3%2581%25AE%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%25AA%2581%25E7%25A0%25B4%25E3%2581%2597%25E3%2581%259F%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2585%25E3%2583%25BC%25E3%2581%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MURKN3dkYjRLclFvRkx2U3hvcEl6X0pYVjFieXRjMVBzdHhxemZDUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しゅーご</dc:creator></item><item><title><![CDATA[「逆転ポインタ法によるガーベジコレクタ」を可視化してみた]]></title><description><![CDATA[ガーベージコレクション(GC)のアルゴリズムで、逆転ポインタ法というのがあります。
比較的簡単なアルゴリズムだとは思うのですが、文章で説明されても理解できないため、画面に表示するプログラムを作ってみました。
このプログラムはJava17で書いています。]]></description><link>https://zenn.dev/clazz/books/07e2c45b8d9478</link><guid isPermaLink="true">https://zenn.dev/clazz/books/07e2c45b8d9478</guid><pubDate>Wed, 05 Feb 2025 09:27:44 GMT</pubDate><dc:creator>clazz</dc:creator></item><item><title><![CDATA[【Java】String.format() の仕組みと使い方]]></title><description><![CDATA[
 String.format() の仕組みと使い方

String.format() は、指定したフォーマットに従って文字列を生成するメソッドです。
printf のようにフォーマット指定子（% を含むプレースホルダー）を使って、変数を埋め込むことができます。


 基本的な構文

String result = String.format("フォーマット文字列", 値1, 値2, ...);
この フォーマット文字列 には プレースホルダー（%で始まる指定子） を記述し、後続の 値1, 値2, ... に置き換えられます。


 主なフォーマット指定子




指定子
説明




...]]></description><link>https://zenn.dev/kaishigaki/articles/8afbbc04d5023b</link><guid isPermaLink="true">https://zenn.dev/kaishigaki/articles/8afbbc04d5023b</guid><pubDate>Wed, 05 Feb 2025 05:46:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fYCv_Crf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591String.format%2528%2529%2520%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M0MjQ2ZmVjOWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かい</dc:creator></item><item><title><![CDATA[WebClientでXML＋APIエラー時の特定条件でのRetryを定義する]]></title><description><![CDATA[
 はじめに
例えば、特定のエンドポイントにPostするとこのエラーコードのときだけリトライしてくれという仕様があったときにどう実装するかを解説していきます。
皆さんはWebClientを使用していますか？WebClientはSpring WebFluxから追加された新しいClientツールで、効率的にFunctionalに使用できますが、書き方が難しいと感じるかもしれません。今回は、特定の条件下でのRetryの設定方法について解説していきます。
WebClientの基礎からXMLでのParseの仕方。エラー時の挙動設定、Retry処理の設定を解説していきます。

 WebClient基...]]></description><link>https://zenn.dev/yoshiki__0428/articles/webclient-xml-parse-and-api-error</link><guid isPermaLink="true">https://zenn.dev/yoshiki__0428/articles/webclient-xml-parse-and-api-error</guid><pubDate>Mon, 03 Feb 2025 15:03:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2s3kTPQ1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WebClient%25E3%2581%25A7XML%25EF%25BC%258BAPI%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E6%2599%2582%25E3%2581%25AE%25E7%2589%25B9%25E5%25AE%259A%25E6%259D%25A1%25E4%25BB%25B6%25E3%2581%25A7%25E3%2581%25AERetry%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshiki-0428%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwYTNkODg1NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshiki-0428</dc:creator></item><item><title><![CDATA[SpringBoot3対応したので大体の対応を書いてみる]]></title><description><![CDATA[
 💡この記事でわかること・解決すること
SpringBoot2.7 から 3.0.x へVersionUpする際にぶつかった壁と解決策を載せています。困っている人がいれば参考にしてください。構成は gradle, groovy, spockな構成です。

 そもそもSpringBoot3対応とは？
Spring Bootは、Javaでエンタープライズグレードのアプリケーションを簡単に作成できる人気のあるフレームワークです。幅広い「スターター」テンプレートを提供することで、開発者が無駄な設定や手間を避け、ビジネスロジックに注力できるため、迅速なアプリケーション開発を支援しています。
Sp...]]></description><link>https://zenn.dev/yoshiki__0428/articles/version-up-spingboot3</link><guid isPermaLink="true">https://zenn.dev/yoshiki__0428/articles/version-up-spingboot3</guid><pubDate>Mon, 03 Feb 2025 15:03:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6bqD3rt_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:SpringBoot3%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E5%25A4%25A7%25E4%25BD%2593%25E3%2581%25AE%25E5%25AF%25BE%25E5%25BF%259C%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshiki-0428%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwYTNkODg1NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshiki-0428</dc:creator></item><item><title><![CDATA[Java Stream APIで2つの差分のLocalDateな日付Listを作るTips]]></title><description><![CDATA[
 💡結論として
結論これです。

 Stream APIで2つの日数の差分の日付リストを取得できるコード
LocalDate startDate = LocalDate.of(2023, 02, 14);

long numOfDays = ChronoUnit.DAYS.between(LocalDate.of(2023, 02, 14), LocalDate.of(2023, 02, 18));

List&lt;LocalDate&gt; daysRange = Stream
   .iterate(startDate, date -&gt; date.plusDays(1))
...]]></description><link>https://zenn.dev/yoshiki__0428/articles/tips-creating-localdate-date</link><guid isPermaLink="true">https://zenn.dev/yoshiki__0428/articles/tips-creating-localdate-date</guid><pubDate>Mon, 03 Feb 2025 15:03:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---W18qlju--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Stream%2520API%25E3%2581%25A72%25E3%2581%25A4%25E3%2581%25AE%25E5%25B7%25AE%25E5%2588%2586%25E3%2581%25AELocalDate%25E3%2581%25AA%25E6%2597%25A5%25E4%25BB%2598List%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258BTips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshiki-0428%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwYTNkODg1NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshiki-0428</dc:creator></item><item><title><![CDATA[Spring Integration Test Cassandraでハマったこと]]></title><description><![CDATA[
 💡この記事でわかること・解決すること
Spring Integration Test でCassandraへの接続をモックしたいときにハマったのでその解決方法を書いておく。

 そもそもAPIの結合テストとは
バックエンドでのマイクロサービス間の開発では、例えばBFF APIから荷物API → 配送方法APIなど API同士の通信が往々として増えてきます。そんなときに1APIとしてはJSONファイルを保存しておいて、JSONファイルの中身の一部を比較するテストを書いておけば、大規模リファクタしたときや新機能追加したときの開発でデグレードが起きづらくなります。
しかし、マイクロサービス...]]></description><link>https://zenn.dev/yoshiki__0428/articles/cassandra-spring-auto-configuration</link><guid isPermaLink="true">https://zenn.dev/yoshiki__0428/articles/cassandra-spring-auto-configuration</guid><pubDate>Mon, 03 Feb 2025 14:58:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yphOtfgK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Integration%2520Test%2520Cassandra%25E3%2581%25A7%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshiki-0428%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwYTNkODg1NTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshiki-0428</dc:creator></item><item><title><![CDATA[3コインで学ぶ！新入社員研修向け！現場では必須の知識！ソフトウェアテスト＆UML]]></title><description><![CDATA[開発未経験のあなたに現場で必要な最低限の知識をざっと学ぶ講座です。

実際に新入社員研修で使われている内容になっていますので、現場に必要な最低限の確実な知識を近道で学んで頂けます！

以下の知識と環境が必要です。
あなたに内容を分かりやすくお伝えするため、講座の中では説明しておりませんのでご注意下さい。

★講座で使用しているバージョンは、Windows11になります 。
　Macの場合は操作方法が異なる事がありますのでご了承頂けますと幸いです

★Javaの知識(出来ればオブジェクト指向まで)
https://zenn.dev/codek2/books/63c880c460c21e
https://zenn.dev/codek2/articles/22dce36b4ad458

講座ではEclipseを使用します
インストールの方法は↓
https://zenn.dev/codek2/articles/8e9295c77866d4

★PostgreSQLの知識
https://zenn.dev/codek2/articles/e8e52c0d5817be

インストールの方法は↓
https://zenn.dev/codek2/articles/7acb27a52cb2d1

★JDBCの知識
https://zenn.dev/codek2/books/cc252354d94052


ソフトウェアテストで使われる用語や内容、書き方などは企業や団体などによりさまざまなので、唯一の正解というのはありません。
現場により読み替えて頂ければ幸いです。

また、エンジニアを目指している方向けに、とりあえず最初に知っておいて欲しい知識について説明しておりますので、全ての内容は取り扱っておりません。

この本では一般的にという観点で説明していますのでご了承頂けますと幸いです。

しっかり学びたいあなたは↓がおすすめです！（動画＆練習問題あり）
新入社員研修向け！JDBC・Servlet/JSP・ソフトウェアテスト・UML・Webアプリケーション開発実習講座！
https://www.udemy.com/course/jdbcservletjsp/?referralCode=88203EF7B00BDA28198C]]></description><link>https://zenn.dev/codek2/books/a377e4d627e8e5</link><guid isPermaLink="true">https://zenn.dev/codek2/books/a377e4d627e8e5</guid><pubDate>Mon, 03 Feb 2025 08:38:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g6BtkGTy--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci81MjA5NWJmNDFiLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>Udemy・企業・オンラインプログラミングスクール講師♪codek2</dc:creator></item><item><title><![CDATA[CaffeineをKotlin Coroutinesでも使えるようにする方法 - caffeine-coroutinesの紹介]]></title><description><![CDATA[
 Motivation
JVMには、キャッシュを実装するときに広く使われているCaffeineというライブラリがあります。
https://github.com/ben-manes/caffeine
このライブラリはJavaで書かれているため、Coroutines上ではそのままだと使用することができません。
CaffeineにはAsyncサポート(ComletableFutureに対応したインタフェース)があるため、これを駆使することで一応Coroutines上でも動作させることが可能になります。ただし、CaffeineとCoroutinesへの理解が深くないとなかなか敷居が高いのかな...]]></description><link>https://zenn.dev/be_hase/articles/504f9261582486</link><guid isPermaLink="true">https://zenn.dev/be_hase/articles/504f9261582486</guid><pubDate>Sun, 02 Feb 2025 10:53:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3jMxQjqP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Caffeine%25E3%2582%2592Kotlin%2520Coroutines%25E3%2581%25A7%25E3%2582%2582%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2520-%2520caffeine-corouti...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:be-hase%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNaVhNZnFBWE9yTXdHZVdBMEpmaE5OX3FJRVExUWQzRUw2MVJtM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>be-hase</dc:creator></item><item><title><![CDATA[【Java】Listとオートボクシング・アンボクシングの関係]]></title><description><![CDATA[
 オートボクシングとは？
プリミティブ型（int, double など）を対応するラッパークラス（Integer, Double など）に自動変換するしくみ
int num = 10;
Integer boxedNum = num; // オートボクシング

 アンボクシングとは？
ラッパークラス（Integer, Double など）を対応するプリミティブ型に自動変換するしくみ
Integer boxedNum = 20;
int num = boxedNum; // アンボクシング

 Listとオートボクシング・アンボクシングの関係
List&lt;int&gt; のようにプリミ...]]></description><link>https://zenn.dev/codek2/articles/3359c729beeeef</link><guid isPermaLink="true">https://zenn.dev/codek2/articles/3359c729beeeef</guid><pubDate>Sun, 02 Feb 2025 06:10:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t0Kh0iEC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591List%25E3%2581%25A8%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2588%25E3%2583%259C%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%25BB%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%259C%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E9%2596%25A2%25E4%25BF%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Udemy%25E3%2583%25BB%25E4%25BC%2581%25E6%25A5%25AD%25E3%2583%25BB%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWJNcXYyNnJHY2xGVDEtOURITHVZTjhrWUpWOVN1aTJWYmxkNU9aejljTmtNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Udemy・企業・オンラインプログラミングスクール講師♪codek2</dc:creator></item><item><title><![CDATA[【Java】ジェネリクス（Generics）とは？]]></title><description><![CDATA[ジェネリクス（Generics）とは、データの型を柔軟に扱えるしくみのことです。

 もしジェネリクスがなかったら…？
たとえば、Box という「データを保存するクラス」を作るとします。
以下のようにデータの型ごとにクラスを作るのは面倒ですね・・・

 文字列（String）を保存する Box
class StringBox {
    private String value;

    public void set(String value) {
        this.value = value;
    }

    public String get() {
       ...]]></description><link>https://zenn.dev/codek2/articles/c597aa77808e1c</link><guid isPermaLink="true">https://zenn.dev/codek2/articles/c597aa77808e1c</guid><pubDate>Sat, 01 Feb 2025 08:38:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4UkmVKfW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25EF%25BC%2588Generics%25EF%25BC%2589%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Udemy%25E3%2583%25BB%25E4%25BC%2581%25E6%25A5%25AD%25E3%2583%25BB%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWJNcXYyNnJHY2xGVDEtOURITHVZTjhrWUpWOVN1aTJWYmxkNU9aejljTmtNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Udemy・企業・オンラインプログラミングスクール講師♪codek2</dc:creator></item><item><title><![CDATA[静的型付けと動的型付けの基本的な違い]]></title><description><![CDATA[
 静的型付けと動的型付けの基本的な違い

 静的型付け（Go、Java、C++など）
変数の型が コンパイル時に決まる。
一度決めた型は、プログラムが動作する間、基本的に変わらない。
型に関する間違い（例：型の不一致など）は、コンパイル時にエラーとして発見される。
動的型付け（Python、JavaScriptなど）
変数の型は 実行時に決まる。
同じ変数に異なる型の値を入れることが可能。
型の間違いによるエラーは、実行時までわからないことが多い。
Goの静的型付けの例
Goでは、変数を宣言する際に型を指定します。例えば：
package main

import "fmt"

fun...]]></description><link>https://zenn.dev/koounosuke/articles/e26f873a6b2a5d</link><guid isPermaLink="true">https://zenn.dev/koounosuke/articles/e26f873a6b2a5d</guid><pubDate>Sat, 01 Feb 2025 02:57:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MpjrdAnP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%2599%25E7%259A%2584%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25A8%25E5%258B%2595%25E7%259A%2584%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JavaJava%25E7%2594%25B7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHBqUDlLS2pjOGRlQ050RUQyVmYyOEZZVUU0TWFkQVZoRS1GNXpDLXd3YmJnYXZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JavaJava男</dc:creator></item></channel></rss>