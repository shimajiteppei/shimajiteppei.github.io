<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-06-20T09:20:26+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2042124</id>
    <published>2025-06-20T09:20:26+09:00</published>
    <updated>2025-06-20T09:20:26+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/h6591/items/d930c444f1a818013833"/>
    <url>https://qiita.com/h6591/items/d930c444f1a818013833</url>
    <title>Rust のOption, ResultそしてSome, None, Ok, Err, expect, unwrap, ?演算子,... なにこれ</title>
    <content type="html">概要
Rustを学んでいて最初に??と思ったのがよく出てくるOptionとResultとそれぞれのメソッドです。
なので、自分なりに使い方を調べて簡単にまとめたものです。
ドキュメント
Option
https://doc.rust-lang.org/std/option/enum.Option.htm…</content>
    <author>
      <name>h6591</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2042071</id>
    <published>2025-06-20T03:01:44+09:00</published>
    <updated>2025-06-20T03:01:44+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/pontryugen/items/79ef8959ebf352e7b9b0"/>
    <url>https://qiita.com/pontryugen/items/79ef8959ebf352e7b9b0</url>
    <title># インターネット老人会向け Omega Crafter 攻略ツール作ってみた</title>
    <content type="html">prelude::*
こんにちは，無職です．
みんな大好き Preferred Networks (PFN) のゲーム「Omega Crafter」が Steam から正式リリースされましたね！
P…</content>
    <author>
      <name>pontryugen</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2041804</id>
    <published>2025-06-19T15:58:41+09:00</published>
    <updated>2025-06-19T16:00:15+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nakky-breton/items/ecea8c7f354c739d86b3"/>
    <url>https://qiita.com/nakky-breton/items/ecea8c7f354c739d86b3</url>
    <title>Rustでの関数呼び出しインタフェース その２</title>
    <content type="html">関数呼び出しインタフェースでのオブジェクトの扱い（続き）
この稿ではRustで関数にデータを引き渡して処理を行わせるインタフェースについて説明します。
ヒープ上に確保された変数の扱い（コレクション …</content>
    <author>
      <name>nakky-breton</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2041760</id>
    <published>2025-06-19T14:42:52+09:00</published>
    <updated>2025-06-19T14:42:52+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nakky-breton/items/db3dbb565ae29aa8bde9"/>
    <url>https://qiita.com/nakky-breton/items/db3dbb565ae29aa8bde9</url>
    <title>Rustでの関数呼び出しインタフェース その１</title>
    <content type="html">関数呼び出しインタフェースでのオブジェクトの扱い
この稿ではRustで関数にデータを引き渡して処理を行わせるインタフェースについて説明します。
スタック上の変数の扱い（プリミティブ型の配列での例）
…</content>
    <author>
      <name>nakky-breton</name>
    </author>
  </entry>
</feed>
