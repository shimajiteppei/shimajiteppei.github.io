<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/python/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/python/feed"/>
  <title>Pythonタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでPythonタグが付けられた新着記事</description>
  <updated>2025-04-07T20:45:47+09:00</updated>
  <link>https://qiita.com/tags/python</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2009897</id>
    <published>2025-04-07T20:45:47+09:00</published>
    <updated>2025-04-07T20:45:47+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/CRUD5th/items/18bdc411c15ad18a140b"/>
    <url>https://qiita.com/CRUD5th/items/18bdc411c15ad18a140b</url>
    <title>Pythonで実装するCommandパターン：操作をオブジェクト化して履歴と再実行を設計する</title>
    <content type="html">概要
Command（コマンド）パターンは、
操作（命令）をオブジェクトとして抽象化し、呼び出し元と処理内容の結合を分離する構造的パターンである。
これにより、操作のキューイング・履歴管理・Undo…</content>
    <author>
      <name>CRUD5th</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2009896</id>
    <published>2025-04-07T20:45:30+09:00</published>
    <updated>2025-04-07T20:45:30+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/CRUD5th/items/7414b980c40598433520"/>
    <url>https://qiita.com/CRUD5th/items/7414b980c40598433520</url>
    <title>Pythonで実装するStateパターン：状態遷移を明示化する設計手法</title>
    <content type="html">概要
State（ステート）パターンは、
オブジェクトの内部状態が変化したときに、振る舞い（メソッドの実装）も変化するような構造を実現するためのパターンである。
これにより、状態ごとのロジックを明示…</content>
    <author>
      <name>CRUD5th</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2009895</id>
    <published>2025-04-07T20:45:10+09:00</published>
    <updated>2025-04-07T20:45:10+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/CRUD5th/items/10721c6f5151c7a68f52"/>
    <url>https://qiita.com/CRUD5th/items/10721c6f5151c7a68f52</url>
    <title>PythonにおけるProxyパターン：アクセス制御と遅延ロードをスマートに設計する</title>
    <content type="html">概要
Proxy（プロキシ）パターンは、
あるオブジェクトへのアクセスを制御するための**「代理人」オブジェクト**を設け、
本体の機能に対して、前処理・後処理・キャッシュ・ロギング・遅延実行などを…</content>
    <author>
      <name>CRUD5th</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2009893</id>
    <published>2025-04-07T20:44:50+09:00</published>
    <updated>2025-04-07T20:44:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/CRUD5th/items/865fd5bcb1137d58d373"/>
    <url>https://qiita.com/CRUD5th/items/865fd5bcb1137d58d373</url>
    <title>Pythonで実装するVisitorパターン：構造と振る舞いを分離して保守性を高める設計</title>
    <content type="html">概要
Visitor（ビジター）パターンは、
データ構造（オブジェクト群）の定義を変更することなく、
新しい振る舞い（操作）を追加可能にするための構造的デザインパターンである。
この設計により、「構…</content>
    <author>
      <name>CRUD5th</name>
    </author>
  </entry>
</feed>
