<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 22 Jun 2025 07:16:41 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Terminalから遊ぶ麻雀を作ってみた その２。]]></title><description><![CDATA[こんにちは k-jun です。Terminal から遊べる麻雀 (Mahjong TUI) を作ってみました！本記事では、この Mahjong TUI をできるだけ多くの人に見てもらうため、Mahjong TUI を紹介していきます！

 はじめに
「Terminal で遊べる麻雀」というコンセプトは、見てもらったほうが圧倒的にわかりやすいでしょう。身近な周りのエンジニアにも見せたのですが、実物を見せる前の反応は「？？」でした。

Mahjong TUI は麻雀の半荘戦全てを TUI として再現した麻雀ゲームです。上記はひたすらツモ切りを繰り返す CPU との対戦ですが、もちろん人間同士...]]></description><link>https://zenn.dev/kjun1221/articles/c43765537f0247</link><guid isPermaLink="true">https://zenn.dev/kjun1221/articles/c43765537f0247</guid><pubDate>Sun, 22 Jun 2025 06:50:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H_YWtmNA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Terminal%25E3%2581%258B%25E3%2582%2589%25E9%2581%258A%25E3%2581%25B6%25E9%25BA%25BB%25E9%259B%2580%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2592%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:keijun%2520kumagai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxYjcwOTEwNDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>keijun kumagai</dc:creator></item><item><title><![CDATA[法務局管轄マップ開発ドキュメント]]></title><description><![CDATA[法務局管轄マップをVibe Codingで開発する際に用いたドキュメントです。

記事はこちら

https://note.com/jolly_lilac46/n/nba60bb53352d

本当に使ったまま公開しているので、最後に変更した部分等反映されていない情報等があります。応援代のようなものだと思ってご購入ください。

反映を忘れている情報が多々あり、このままAIにVibe Codingさせても詰まる箇所があります。現時点で発見しているものとしては、以下の点があります。

- abr-geocoderが大量にCSVをダウンロードし組み立てる大量の.sqliteの対処法が抜けている。このまま実行するとおそらくSQLite組立てが長すぎてタイムアウトになります。
- 運用と保守は全部嘘です。見返してびっくりした。何もしてないこれ。

]]></description><link>https://zenn.dev/parmenion/books/c5e1a311372a5e</link><guid isPermaLink="true">https://zenn.dev/parmenion/books/c5e1a311372a5e</guid><pubDate>Sun, 22 Jun 2025 05:51:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--N9dQS-Qp--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci84Yzc3Y2I0Mzc1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>パルメニオン</dc:creator></item><item><title><![CDATA[Next.js + Supabase タスク管理アプリ]]></title><description><![CDATA[Next.jsの初学者向けチュートリアルコンテンツです。タスク管理アプリを Next.js 及び TypeScript で開発していきます。シンプルでモダンなUIに、優先度・重要フラグ、タグ情報、テーマ変更なども付加した、実用性の高いアプリとなっています。
入力したメモ情報の格納には、BaaS（Backend as a Service）であるSupabaseを利用します。Supabaseとの連携は、Next.jsの Server Actions を利用します。またDBスキーマの作成には、ORMと呼ばれるものとしてPrismaを利用しています。ORMは、直接SQLクエリを作成することなく、データベース操作を行えるようにするものです。
Next.js・ReactによるモダンUIの構築、クライアントコンポーネントからサーバーコンポーネントの実装までフルスタック型の開発を体得出来ます。]]></description><link>https://zenn.dev/amayann/books/18f5c79fb4778b</link><guid isPermaLink="true">https://zenn.dev/amayann/books/18f5c79fb4778b</guid><pubDate>Sun, 22 Jun 2025 05:23:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4vXro5JK--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9lMzU2Zjk3MjA1LmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>bauhaus</dc:creator></item><item><title><![CDATA[そのインフラ、次世代 IaC Pulumi を使って TypeScript で書いてみませんか？]]></title><description><![CDATA[
 TL;DR

あなたがクラウドインフラに馴染みがないからといって、クラウドプロバイダのコンソール画面からボタンぽちぽちして本番インフラは作らないで。複数環境を用意する場合、管理・運用コストが大変なことになります。
インフラ構成の管理方法として、CloudFormation、Terraform や CDK 等の IaC が使われますが、独自言語を学ぶ必要やベンダロックの問題があるため、非インフラエンジニアにとってハードルが高いという問題があります。
次世代 IaC Pulumi を使えば、慣れた TypeScript でインフラ構成を「ソースコード」として表現できます。クライアントもサ...]]></description><link>https://zenn.dev/utcarnivaldayo/articles/2025-06-22-pulumi-ts-svless</link><guid isPermaLink="true">https://zenn.dev/utcarnivaldayo/articles/2025-06-22-pulumi-ts-svless</guid><pubDate>Sun, 22 Jun 2025 05:18:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pty-8i2_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25A9%25E3%2580%2581%25E6%25AC%25A1%25E4%25B8%2596%25E4%25BB%25A3%2520IaC%2520Pulumi%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520TypeScript%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ut%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZTZiYzAwNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ut</dc:creator></item><item><title><![CDATA[【TypeScript】1%×100回=63%らしいので、コードを書いて検証してみた]]></title><description><![CDATA[
 検証内容
1%は100回やっても63%しか起こらないらしいです。
具体的に言うと、1%の確率で起こる事象を100回試行したときに1回でも起こる確率は63% です。
と言っても、私のような確率素人にとっては直感的ではない話です。
ネットもChatGPTもそう言ってるので正しいのでしょうが、いまいちピンときません。
ということで、本当なのか検証するためにコードを書きます。
!
私は確率初心者なので、確率周りの話が正確でない可能性があります。
そのためこの記事の内容は参考程度に留めてください。
確率について入門的なところから学びたい場合は、中学や高校の数学の教科書をひっぱり出すか、Chat...]]></description><link>https://zenn.dev/nanasi_1/articles/5559a60b343076</link><guid isPermaLink="true">https://zenn.dev/nanasi_1/articles/5559a60b343076</guid><pubDate>Sun, 22 Jun 2025 03:55:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oCLJxcYq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%25911%2525%25C3%2597100%25E5%259B%259E%253D63%2525%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nanasi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MDFiNWU4NjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nanasi</dc:creator></item><item><title><![CDATA[VSCode（Cursor）でTypeScriptのif文の前にコメントを入れると、Biomeにif文を勝手に消されてしまう人へ]]></title><description><![CDATA[
 TL;DR

原因は分かりませんが、設定のEditor: Format On Save Modeをfileにすると、直りました

modeをmodificationsかmodificationsIfAvailableにしていると、if 文が勝手に消されてしまう現象が発生する


 発生条件


Biome プラグインを入れて、 を TypeScript の format 設定を biome にする

"[typescript]": {
    "editor.defaultFormatter": "biomejs.biome"
}

厄介なのは、ある程度複雑度が高いファイルにおいての...]]></description><link>https://zenn.dev/dialbird/articles/40aecb10ef853c</link><guid isPermaLink="true">https://zenn.dev/dialbird/articles/40aecb10ef853c</guid><pubDate>Sun, 22 Jun 2025 00:21:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--15AMCER9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25EF%25BC%2588Cursor%25EF%25BC%2589%25E3%2581%25A7TypeScript%25E3%2581%25AEif%25E6%2596%2587%25E3%2581%25AE%25E5%2589%258D%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%2585%25A5%25E3%2582%258C%25E3%2582%258B%25E3%2581%25A8%25E3%2580%2581Biome%25E3%2581%25ABif%25E6%2596%2587%25E3%2582%2592%25E5%258B%259D%25E6%2589%258B%25E3%2581%25AB%25E6%25B6%2588%25E3%2581%2595...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dialbird%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lYZl96c2pGMDVnZlVCaUJYR1NwVlB3aXFYZlJKTElqWFlHYkVPdGc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dialbird</dc:creator></item><item><title><![CDATA[rafc, rafce, rafcp ~Reactの雛形を作ってくれるエイリアス~]]></title><description><![CDATA[
 概要
VS Codeやその他のエディタで使用できるReactコンポーネントの雛形を生成するスニペットエイリアスです。

 各エイリアスの違い

 rafc - React Arrow Function Component
import React from 'react'

const ComponentName = () =&gt; {
  return (
    &lt;div&gt;ComponentName&lt;/div&gt;
  )
}

export default ComponentName

 rafce - React Arrow Function Compo...]]></description><link>https://zenn.dev/hossy_worlds/articles/a8c10c129659e5</link><guid isPermaLink="true">https://zenn.dev/hossy_worlds/articles/a8c10c129659e5</guid><pubDate>Sat, 21 Jun 2025 17:49:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aNju3cVO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rafc%252C%2520rafce%252C%2520rafcp%2520%7EReact%25E3%2581%25AE%25E9%259B%259B%25E5%25BD%25A2%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258B%25E3%2582%25A8%25E3%2582%25A4%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25B9%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HossyWorlds%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NmE1YTdiNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HossyWorlds</dc:creator></item><item><title><![CDATA[tsconfig.build.json の設定解説 📝]]></title><description><![CDATA[!
tsconfig.build.json のように、特定の目的に特化した tsconfig.json ファイルを作成することは、TypeScriptプロジェクトの管理において非常に一般的かつ推奨されるプラクティスです。これは、開発環境とビルド環境で異なる設定を使い分けたい場合に特に役立ちます。🛠️

提供された tsconfig.build.json の設定は非常にシンプルですが、その背後にあるTypeScriptの設定継承の強力なメカニズムを示しています。


 tsconfig.build.json の各プロパティ解説 💡



プロパティ
設定値
解説




extends
"...]]></description><link>https://zenn.dev/mk_mokumoku/articles/0bb1f42c2ea809</link><guid isPermaLink="true">https://zenn.dev/mk_mokumoku/articles/0bb1f42c2ea809</guid><pubDate>Sat, 21 Jun 2025 17:35:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sgzRF7Wz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tsconfig.build.json%2520%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E8%25A7%25A3%25E8%25AA%25AC%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B8%25A1%25E9%2582%258A%25E7%2590%25A2%25E8%25B3%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0lhVUpwcVRGRGRZVFc5eW9lUHlzY1dLWllGb2pocmJHRFczWW9sU2JldllsdFhYR2I9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>渡邊琢資</dc:creator></item><item><title><![CDATA[tsconfig.json の設定解説 📝]]></title><description><![CDATA[!
tsconfig.json は、TypeScriptプロジェクトのルートに配置される設定ファイルで、TypeScriptコンパイラ tsc がコードをコンパイルする際の挙動を定義します。これにより、プロジェクトの要件に合わせて、TypeScriptの厳密さ、出力形式、モジュール解決方法などを細かく制御できます。🔧

提供された tsconfig.json の各オプションについて詳しく解説しますね！

 compilerOptions の各プロパティ解説 💡



プロパティ
設定値
解説




rootDir
.
プロジェクトのルートディレクトリを指定します。TypeScriptコ...]]></description><link>https://zenn.dev/mk_mokumoku/articles/bf2d690e131f6c</link><guid isPermaLink="true">https://zenn.dev/mk_mokumoku/articles/bf2d690e131f6c</guid><pubDate>Sat, 21 Jun 2025 17:28:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D-3VLFPv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tsconfig.json%2520%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E8%25A7%25A3%25E8%25AA%25AC%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B8%25A1%25E9%2582%258A%25E7%2590%25A2%25E8%25B3%2587%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0lhVUpwcVRGRGRZVFc5eW9lUHlzY1dLWllGb2pocmJHRFczWW9sU2JldllsdFhYR2I9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>渡邊琢資</dc:creator></item><item><title><![CDATA[Zod + Branded Typeで真の型安全へ]]></title><description><![CDATA[
 型安全、どうやって保証してる？
みなさんは普段どのように型の安全性を保証していますか？
TypeScriptを使っている方なら、型定義や型注釈、型推論で「型安全」を意識しているはずです。
しかし、実際のアプリケーション開発では「本当に型安全か？」と問われると、少し不安になることも多いのではないでしょうか。

 Zodのスキーマ定義・型生成・データ検証
TypeScript界隈で人気の型安全ライブラリ「Zod」。
Zodを使えば、スキーマ定義・型生成・データ検証が一気通貫で行えます。
https://www.npmjs.com/package/zod
例えば「idは5桁かつ英数字のみ、...]]></description><link>https://zenn.dev/saitogo/articles/88e93fdf0b1dd5</link><guid isPermaLink="true">https://zenn.dev/saitogo/articles/88e93fdf0b1dd5</guid><pubDate>Sat, 21 Jun 2025 17:07:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8VQH34Cw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%2520%252B%2520Branded%2520Type%25E3%2581%25A7%25E7%259C%259F%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:saitogo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVkOTUyMmM3ZDUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saitogo</dc:creator></item><item><title><![CDATA[僕の上司はTypeScript/LangChain/LangGraphでできている~僕の上司開発記~]]></title><description><![CDATA[皆さん上司や同僚、後輩はいますか？
一度デバックをするような鋭い目でこの記事を見るのをやめて、朗らかな笑顔で周りを見渡してみてください。可能ならこの記事をその顔のままお読みください。
さて、全然関係ない前振りを横におきまして、
皆さんは一度は経験してみたいシチュエーションというのはありますか？
学生時代に思いを馳せてもよいでしょう。
新入社員で入社したばかり、仕事で失敗して同僚と居酒屋で。なんてのもいいでしょう
私も色々ありますが今回はその一つを無理矢理叶えたいと思っています。
という事で、今回はもし上司がいればしてほしかった憧れナンバー1のあれをTypeScript/LangChain...]]></description><link>https://zenn.dev/5dai5/articles/b6277202dcee62</link><guid isPermaLink="true">https://zenn.dev/5dai5/articles/b6277202dcee62</guid><pubDate>Sat, 21 Jun 2025 14:27:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zpcxqdtv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2583%2595%25E3%2581%25AE%25E4%25B8%258A%25E5%258F%25B8%25E3%2581%25AFTypeScript%252FLangChain%252FLangGraph%25E3%2581%25A7%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%7E%25E5%2583%2595%25E3%2581%25AE%25E4%25B8%258A%25E5%258F%25B8%25E9%2596%258B%25E7%2599%25BA%25E8%25A8%2598%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:5dai5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTJsZGNuYXV1ZEc2MVUybDhmQlVkdGhreHpabXdnbGVqblZXMHdwTTZOLVhLZmxBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>5dai5</dc:creator></item><item><title><![CDATA[もう TypeScript だけでいい。次世代 IaC Pulumi で最高の体験にする AWS サーバレスアプリ開発]]></title><description><![CDATA[IaC のために新しい言語を学ぶ必要はもうありません。
TypeScript のみで、クライアント・サーバー・インフラ（プラットホーム）をすべて記述可能です。

IaC を導入したことがない、小規模な開発を行っているアプリケーションエンジニアには、普段から慣れている TypeScript を利用して、再現性のある開発環境を用意し、インフラ構築を自動化できるため新しい開発体験を得られるでしょう。

一方、すでに IaC を導入している現場では、TypeScript のみで、クライアント・サーバー・インフラ（プラットホーム）をすべて記述可能なため、開発メンバーが隣接領域の知見を得ることのハードルを下げ、開発の効率化の助けになるでしょう。

【無料 Chapter と 有料 Chapter について】
この本は、無料パートと有料パートに分かれています。
無料パートでは、Chapter 01 〜 Chapter 08 までで、Web アプリケーションを作成するための基本的な内容をカバーしています。
有料パートは、Chapter 09 以降で、書きかけの内容ですが、トピックによっては無料パートとして公開する場合もあります。
本書は、1000円で販売させて頂きますが、書き換えの内容を完成させるための、「応援代」としてご支援いただけると著者は嬉しいです。

また、有料パートの Chapter 内容は、今後の更新で予告なく変更される場合がありますが、あらかじめご了承ください。

【変更履歴】
 - 2025-06-22: Chapter 01「はじめに」について、わかりやすさのために大幅な修正を実施しました。
 - 2025-06-21: 初版リリース

【GitHub リポジトリ】
本書で紹介したコードは、以下の GitHub リポジトリで公開しています。
https://github.com/utcarnivaldayo/pulumi-aws-ts-svless

【コミュニティ】
この本の内容についての感想や質問・誤字・ご意見は、以下のコミュニティで受け付けています。
https://zenn.dev/utcarnivaldayo/scraps/cd28111f0b6489
]]></description><link>https://zenn.dev/utcarnivaldayo/books/pulumi-lambadlith</link><guid isPermaLink="true">https://zenn.dev/utcarnivaldayo/books/pulumi-lambadlith</guid><pubDate>Sat, 21 Jun 2025 13:38:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7ZD6RqHm--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9hNDA3OTczNTUwLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ut</dc:creator></item><item><title><![CDATA[TypeScriptで障害対応の効率化してみた話]]></title><description><![CDATA[
 はじめに
プロダクト開発において、障害報告を受け対応することは避けて通れない重要な業務です。しかし、この業務には多くの課題があります：報告内容の粒度がバラバラ、必要な情報が不足、ヒアリングに時間がかかる、複数の監視ツールを確認する必要がある...
この記事では、私が個人的に取り組んだ障害報告の効率化について紹介します。Google Formを起点に、Google Apps Script、GitHub Actions、TypeScriptを組み合わせて構築したAI駆動の重複検出システムの実装と、その過程で得た技術的な学びを共有します。
また、単純にTypeScriptで何か作りたいとい...]]></description><link>https://zenn.dev/eku/articles/897d11b4bd0e42</link><guid isPermaLink="true">https://zenn.dev/eku/articles/897d11b4bd0e42</guid><pubDate>Sat, 21 Jun 2025 13:28:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jyGXgUxU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E9%259A%259C%25E5%25AE%25B3%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25AE%25E5%258A%25B9%25E7%258E%2587%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takumi_T_JP%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I1NjNhYmE2NjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takumi_T_JP</dc:creator></item><item><title><![CDATA[型指定はsatisfiesを使っておけば大体大丈夫【Typescript】]]></title><description><![CDATA[satisfiesの挙動を勉強した際に、一般的に型指定に使われる「型注釈」やasと比較して優秀な特徴があることが分かったので記事にしてみました

 vs 「型注釈」
「型注釈」とsatisfiesは、型を満たしているかどうかを判定するという点では同じです
しかし、
「型注釈」はオブジェクトが保持している型を上書きしてしまうのに対して、
satisfiesは元の型の情報を保持した上で型を判定してくれます
これを具体的なコードで説明すると、「型注釈」の場合、下記のコードでエラーが発生します
// 「型注釈」の場合
const result: {type: 'success' | 'error...]]></description><link>https://zenn.dev/kanamo/articles/26769f9b787b09</link><guid isPermaLink="true">https://zenn.dev/kanamo/articles/26769f9b787b09</guid><pubDate>Sat, 21 Jun 2025 13:15:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HmPVjdht--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E6%258C%2587%25E5%25AE%259A%25E3%2581%25AFsatisfies%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258A%25E3%2581%2591%25E3%2581%25B0%25E5%25A4%25A7%25E4%25BD%2593%25E5%25A4%25A7%25E4%25B8%2588%25E5%25A4%25AB%25E3%2580%2590Typescript%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%25AA%25E3%2582%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4ZGZmMzkyOTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かなも</dc:creator></item><item><title><![CDATA[【JavaScript】??（Null合体演算子）と || の違いを解説]]></title><description><![CDATA[
 はじめに
JavaScriptで「値がないときにデフォルト値を使う」ための書き方として、
次のようなコードを見たことはありませんか？
const name = input || 'ゲスト';
このような書き方は、||（論理和）を使った「ショートサーキット評価」と呼ばれます。
左側の値が「falsy（偽とみなされる値）」なら、右側の値が使われるという便利な構文です。

詳しくは、以下の記事で解説しています👇
JavaScriptのtruthyとfalsyとは？ショートサーキット評価もあわせて解説

しかし、実務では「空文字（''）や0は有効な値として扱いたい」というケースもあります。
...]]></description><link>https://zenn.dev/fd2025/articles/61b480dcd8713e</link><guid isPermaLink="true">https://zenn.dev/fd2025/articles/61b480dcd8713e</guid><pubDate>Sat, 21 Jun 2025 10:25:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kE7lGiGn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591%253F%253F%25EF%25BC%2588Null%25E5%2590%2588%25E4%25BD%2593%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25EF%25BC%2589%25E3%2581%25A8%2520%257C%257C%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fd2025%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzMzVlNTI5MmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fd2025</dc:creator></item><item><title><![CDATA[npm, npx, 何もなしで実行の違い（ビルド）]]></title><description><![CDATA[
 何もなしでts-nodeコマンド使う
何もなしでというのは
ts-node src/index.ts
のようにts-nodeから始めること。
これを使えるようにするには、ts-nodeコマンドがグローバルインストールされていないといけない。
ちなみにこれはあまり推奨されない。

 npm, npxの違い

 npm (Node Package Manager)
パッケージのインストールと管理を担当するツール
package.jsonに記載された依存関係をnode_modulesディレクトリにインストール
（スクリプトを実行するときはrunをつける必要がある）
主なコマンド:

npm...]]></description><link>https://zenn.dev/hossy_worlds/articles/d7b1074360f3b0</link><guid isPermaLink="true">https://zenn.dev/hossy_worlds/articles/d7b1074360f3b0</guid><pubDate>Sat, 21 Jun 2025 10:18:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Vi9FXnEm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:npm%252C%2520npx%252C%2520%25E4%25BD%2595%25E3%2582%2582%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25EF%25BC%2588%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HossyWorlds%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NmE1YTdiNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HossyWorlds</dc:creator></item><item><title><![CDATA[tscとts-nodeの主な違い]]></title><description><![CDATA[
 tsc (TypeScript Compiler)

TypeScriptファイルをJavaScriptファイルにコンパイルするツール
実行すると.tsファイルから.jsファイルが生成される
コンパイル後、生成されたJavaScriptファイルをnodeコマンドで実行する必要がある
例：

  tsc src/index.ts  # index.jsが生成される
  node src/index.js # 生成されたJSファイルを実行
生成されたJSファイルを実行

 ts-node

TypeScriptファイルを直接実行できるツール
内部的にコンパイルと実行を同時に行う
一時的な...]]></description><link>https://zenn.dev/hossy_worlds/articles/372154fd6a349e</link><guid isPermaLink="true">https://zenn.dev/hossy_worlds/articles/372154fd6a349e</guid><pubDate>Sat, 21 Jun 2025 10:16:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0rj3HKT7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tsc%25E3%2581%25A8ts-node%25E3%2581%25AE%25E4%25B8%25BB%25E3%2581%25AA%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HossyWorlds%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NmE1YTdiNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HossyWorlds</dc:creator></item><item><title><![CDATA[FizzBuzzを完全な関数プログラミングで書いてみた]]></title><description><![CDATA[typescriptのブルーベリー本を読んでいて、王道のFizzBuzz問題に出会った。これを手続型プログラミングとなんちゃって関数型プログラミングで書いてみる。

 一般的な書き方
ブルーベリー本の模範解答でもある。
for (let i = 1; i &lt;= 100; i++) {
  if (i % 3 === 0 &amp;&amp; i % 5 === 0) {
    console.log("FizzBuzz");
  } else if (i % 3 === 0) {
    console.log("Fizz");
  } else if (i % 5 === 0)...]]></description><link>https://zenn.dev/hossy_worlds/articles/7198d493e7dad2</link><guid isPermaLink="true">https://zenn.dev/hossy_worlds/articles/7198d493e7dad2</guid><pubDate>Sat, 21 Jun 2025 10:14:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_uYR5TKf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FizzBuzz%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AA%25E9%2596%25A2%25E6%2595%25B0%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HossyWorlds%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NmE1YTdiNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HossyWorlds</dc:creator></item><item><title><![CDATA[そもそもビルドとは何か]]></title><description><![CDATA[TypeScriptで開発を進めていると、「ビルド」という言葉を頻繁に耳にする。
結論、TypeScriptからJavaScriptへの変換プロセスである。

 ビルドとは何か？
端的に言えば、TypeScriptにおける「ビルド」とは、TypeScriptのコードをコンパイラ（通常はtscコマンド）によってコンパイルし、JavaScriptのコードに変換する一連のプロセスを指す。

 なぜビルドが必要なのか？
TypeScriptは、Microsoftによって開発されたJavaScriptのスーパーセット。型安全性や高度なIDEサポートなど、大規模なアプリケーション開発において非常に強...]]></description><link>https://zenn.dev/hossy_worlds/articles/570bc4af726642</link><guid isPermaLink="true">https://zenn.dev/hossy_worlds/articles/570bc4af726642</guid><pubDate>Sat, 21 Jun 2025 10:03:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1WtDlQVa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2582%2582%25E3%2581%259D%25E3%2582%2582%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HossyWorlds%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M2NmE1YTdiNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HossyWorlds</dc:creator></item><item><title><![CDATA[なんとなく使うtsconfig.jsonをやめる]]></title><description><![CDATA[
 なんとなく使ってませんか？
TypeScript を使っているとtsconfig.jsonというファイルをよく見かけますよね。
とはいえ、内容はよくわからないまま、

とりあえずtsc --initで作ったやつそのまま
参考記事の設定内容をコピペするだけ

になってませんか？
私はなってます...。
ということで、自分の勉強＋同じような方の参考になればと思いこの記事を書くことにしました。
tsconfig.json の基本的な考え方から、最低限押さえておきたい設定項目をまとめていきます。

 🔧 tsconfig.json は何をするファイル？

Node.jsはそれ自身ではType...]]></description><link>https://zenn.dev/uniformnext/articles/e2106ba4d995b1</link><guid isPermaLink="true">https://zenn.dev/uniformnext/articles/e2106ba4d995b1</guid><pubDate>Sat, 21 Jun 2025 08:34:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iUBiC9Ay--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A8%25E3%2581%25AA%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586tsconfig.json%25E3%2582%2592%25E3%2582%2584%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Ibuki%2520Kamo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjMTE2MTQ2NWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%258D%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%2588%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0d1UGVJSU83LUw3UEhsblNacGMxZ0hmY2o1dUl5OXdRdFNYSFEtNjFWPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ibuki Kamo</dc:creator></item></channel></rss>