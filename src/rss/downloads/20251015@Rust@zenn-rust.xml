<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 15 Oct 2025 02:03:41 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rustでfishのプラグインマネージャーを作った]]></title><description><![CDATA[
 TL;DR
Rustでfishのプラグインマネージャーを作りました。
https://github.com/tetzng/pez

 なぜ作ったか
fish のプラグインマネージャーには、fisher や Oh My Fish などがあり、筆者自身も長らく fisher を愛用していました。
fisher は、それ自体が fish script のみで書かれているため、他ツールなどの依存もなく満足していたのですが、ロックファイルを用いて宣言的にバージョン管理を行う仕組みがないことや、アップデートのたびにプラグインが再インストールされることなど、いくつか自分のニーズに合わない点がありま...]]></description><link>https://zenn.dev/tetzng/articles/rust-based-fish-plugin-manager</link><guid isPermaLink="true">https://zenn.dev/tetzng/articles/rust-based-fish-plugin-manager</guid><pubDate>Mon, 13 Oct 2025 23:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bjumhtoI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7fish%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tetzng%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzliZjBiMmI2MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tetzng</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC427 A～D)]]></title><description><![CDATA[AtCoder Beginner Contest 427のA～D問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC427-A
問題
https://atcoder.jp/contests/abc427/tasks/abc427_a
文字列 S の中央の文字を削除する問題です。
解説
まず、文字列 S の長さを取得し、その中央の文字の位置を計算します。
中央の文字の位置は、文字列の長さを |S| としたとき、0-index で |S| / 2 番目に位置します。
この位置の文字を削除し、結果の文字列を出力します。
コード

abc427a...]]></description><link>https://zenn.dev/nakst_hide/articles/b6b9f2f6e001d1</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/b6b9f2f6e001d1</guid><pubDate>Mon, 13 Oct 2025 12:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NaKDjT-j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC427%2520A%25EF%25BD%259ED%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[cargo-expand を使ってみよう]]></title><description><![CDATA[前回は thiserror crate の基本的な使い方について書きました 。今回は cargo-expand の使い方を確認しつつ、 thiserror crate の提供する derive macro の展開結果を見ていきます。

 cargo-expand とは
cargo-expand は macro の展開結果を出力するコマンドです。
https://github.com/dtolnay/cargo-expand

 インストール方法
cargo install cargo-expand
README によると rustfmt もあれば使うらしいです。 cargo が入っていて...]]></description><link>https://zenn.dev/doctormate/articles/4d591d072253ca</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/4d591d072253ca</guid><pubDate>Mon, 13 Oct 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3a9GyK0x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-expand%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[LeetCodeでRustを学ぶ【Two Sum】]]></title><description><![CDATA[
 問題
https://leetcode.com/problems/two-sum/

 問題文

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return t...]]></description><link>https://zenn.dev/komugi8/articles/3f745d56f89143</link><guid isPermaLink="true">https://zenn.dev/komugi8/articles/3f745d56f89143</guid><pubDate>Sun, 12 Oct 2025 05:59:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QT1MXBhZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LeetCode%25E3%2581%25A7Rust%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%25E3%2580%2590Two%2520Sum%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:komugi8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRieEZpcDljaW90QUVIOFBySzdRLUlZTUNNazFlLXpLMWQ4d3dLcG5aY0E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>komugi8</dc:creator></item><item><title><![CDATA[RustでKMS v2対応のKMSを作ってみた]]></title><description><![CDATA[
 はじめに
Kagimoriは、Kubernetes向けのシンプルなKey Management System(KMS)です。Kubernetes KMS v2に対応し、ChaCha20-Poly1305とAES-GCM-SIVによる暗号化、エンベロープ暗号化、監査ログ機能を提供します。
https://github.com/kinorca/Kagimori
Rustで実装されており、パフォーマンスとメモリ安全性を両立しています。また、GPLv3ライセンスで公開しているため、個人開発や小規模プロジェクトでも自由に利用できます。

 どうして作ったの？

 Kubernetesにおける機...]]></description><link>https://zenn.dev/sileader/articles/911f07516887bd</link><guid isPermaLink="true">https://zenn.dev/sileader/articles/911f07516887bd</guid><pubDate>Sun, 12 Oct 2025 04:25:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2CNPIeN9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7KMS%2520v2%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25AEKMS%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SiLeader%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>SiLeader</dc:creator></item><item><title><![CDATA[DevcontainerでAtcoderの環境を構築してみた (Rust)]]></title><description><![CDATA[!
この記事は 2025年10月12日時点の内容です。AtCoderが対応するRustのバージョンやcargo-competeの仕様は今後変更される可能性があるため、最新情報は公式を確認してください。


 概要
Rustの勉強のため競技プログラミングをやってみようと思い、DevContainer + cargo-compete を使って構築しました。以下のような工夫を加えています：

DockerベースのRust開発環境をDevContainerで定義
Rustツールチェインと競プロ用ツールの自動インストール（cargo-equip, cargo-compete, cargo-udep...]]></description><link>https://zenn.dev/coxlessspcond/articles/d283b1f2ad1770</link><guid isPermaLink="true">https://zenn.dev/coxlessspcond/articles/d283b1f2ad1770</guid><pubDate>Sun, 12 Oct 2025 03:03:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uPFaDURi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Devcontainer%25E3%2581%25A7Atcoder%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%2528Rust%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Coxless%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmOGE3MGI4MGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Coxless</dc:creator></item><item><title><![CDATA[Rustで静的ファイルを配布するサーバーを作る]]></title><description><![CDATA[Rustはとても高速な汎用プログラミング言語です。これを使って静的ファイルを提供するサーバーを作ったら初回起動が速くなりそうなので作ってみましょう！
RustでWebサーバーを実装する方法を知りたい方や、簡単なプログラムでRustを知りたい方を対象としています。

 技術選定
RustのWebサーバーを実装できるcrateはいくつかありますが、今回はactix-webを使おうと思います。actix-webはactixというアクターモデルを提供するフレームワーク上に実装されたWebサーバーcrateです。
actix-webはマクロで思ったより簡単にAPIサーバーを作ることができる上にRu...]]></description><link>https://zenn.dev/sileader/articles/ce8e0d113de128</link><guid isPermaLink="true">https://zenn.dev/sileader/articles/ce8e0d113de128</guid><pubDate>Sat, 11 Oct 2025 13:32:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uVOhClLE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E9%259D%2599%25E7%259A%2584%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E9%2585%258D%25E5%25B8%2583%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SiLeader%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>SiLeader</dc:creator></item><item><title><![CDATA[もうprintlnデバッグは卒業。VSCodeで始めるRust実践デバッグ]]></title><description><![CDATA[
 はじめに
突然ですが、Rustでプログラムを書いていて、こんな経験はありませんか?
println!("ここまで到達");
println!("変数xの値: {:?}", x);
println!("デバッグ1");
println!("デバッグ2");
// ...あとでこれ消さないと...
println!でのデバッグは手軽ですが、コードが散らかり、デバッグ後に削除し忘れることも。
というか削除が面倒ですよね。
そんな時はVSCodeのデバッガーを使えば、コードを一切変更せずに変数の値を確認でき、問題を素早く解決できます。
この記事では、VSCodeを使ってRustプログラムを効...]]></description><link>https://zenn.dev/dokusy/articles/b3c34eee18afbb</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/b3c34eee18afbb</guid><pubDate>Sat, 11 Oct 2025 12:12:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zQ1LZKCB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2582%25E3%2581%2586println%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%25AF%25E5%258D%2592%25E6%25A5%25AD%25E3%2580%2582VSCode%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BRust%25E5%25AE%259F%25E8%25B7%25B5%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[DDDとクリーンアーキテクチャをはじめよう-Rust編]]></title><description><![CDATA[
 背景
ども！池田(ikedadada)です！
シリーズもいよいよRust編です。これまでNode.js、Go、Python、Javaの実装を紹介してきましたが、今回は同じTodo
APIの要件をRust（Axum + SQLx + MySQL）で実装するときの構成とキーポイントを整理します。
ソースコード:
https://github.com/ikedadada/start-ddd-and-clean-architecture/tree/main/backend_rust
!
Rustは所有権と非同期ランタイムが独特なので、「トランザクション境界」と「コンテキスト共有」をどう表現す...]]></description><link>https://zenn.dev/poporo/articles/20251011_1_start_ddd_and_clean_architecture_rust</link><guid isPermaLink="true">https://zenn.dev/poporo/articles/20251011_1_start_ddd_and_clean_architecture_rust</guid><pubDate>Sat, 11 Oct 2025 03:12:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LrkJo5fB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DDD%25E3%2581%25A8%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%25BC%25E3%2582%25AD%25E3%2583%2586%25E3%2582%25AF%25E3%2583%2581%25E3%2583%25A3%25E3%2582%2592%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2582%2588%25E3%2581%2586-Rust%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ikedadada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzYjczNjc4ZDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ikedadada</dc:creator></item><item><title><![CDATA[TPMを使った鍵の暗号化をRustで実装してみた（Windows API）]]></title><description><![CDATA[Windows 上で windows-sys を使用して、TPMベースの暗号化を実装しました。
最初は tss-esapi を使った鍵ラップを試みましたが、これは主に Linux 向けに設計されていて、Windows で使用するにはより複雑なセットアップが必要だったため、 windows-sys を採用しました。
この記事では、その実装コードと、各関数についての説明などを公式ドキュメントを用いて解説しています！

 Cargo.toml
windows-sys = { version = "0.61", features = [
    "Win32_Security_Cryptogra...]]></description><link>https://zenn.dev/tsuruko/articles/a62a074269d8c7</link><guid isPermaLink="true">https://zenn.dev/tsuruko/articles/a62a074269d8c7</guid><pubDate>Fri, 10 Oct 2025 10:48:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BgmKE1Y1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TPM%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E9%258D%25B5%25E3%2581%25AE%25E6%259A%2597%25E5%258F%25B7%25E5%258C%2596%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2588Windows%2520API%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsuruko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3ZmU0MDBjMGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tsuruko</dc:creator></item><item><title><![CDATA[magnusについて調べてみた]]></title><description><![CDATA[
 どのようなOSSか
Magnus は、Rust で ruby 拡張を書く、または、Ruby のコードをrust上で動作させることを可能にするライブラリです。
Ruby と Rust の間のバインディングを提供するオープンソースライブラリです。
https://github.com/matsadler/magnus
主な特徴は以下の通り：

Ruby 拡張の gem を Rust で書けるようにする。Rust 側で書いた関数やクラスを Ruby から呼び出すことができる。
逆に、Rust プログラムの中から Ruby を呼び出したり、Ruby のオブジェクト・メソッドを使ったりすること...]]></description><link>https://zenn.dev/sawawada8/articles/30690febe7419b</link><guid isPermaLink="true">https://zenn.dev/sawawada8/articles/30690febe7419b</guid><pubDate>Thu, 09 Oct 2025 12:24:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_R82bg96--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:magnus%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sawawada8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeGF1ZnJydWg3MnRBN1NUOEZIOUMzLVlISzNnU3BrMnQ3MHNRS2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>sawawada8</dc:creator></item><item><title><![CDATA[RustでUefiApplicationを作成する方法]]></title><description><![CDATA[
 RustでUefiApplicationを作成する方法
RustでUefi Applicationを作ろうと思った際に、情報が少なくて苦労したというのと
UEFI Applicationを作る際に便利なuefi crateが結構大きく変更されているため苦労した
そのため、2025/10/6時点で最新のuefi-0.35.0を使ったuefi applicationの作り方をまとめます

 crateの作成
基本的には下記を参照
https://rust-osdev.github.io/uefi-rs/tutorial/app.html
一点付け加えるなら
String, Vec&lt;...]]></description><link>https://zenn.dev/furiro/articles/eff5c317774f5f</link><guid isPermaLink="true">https://zenn.dev/furiro/articles/eff5c317774f5f</guid><pubDate>Thu, 09 Oct 2025 09:25:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bmbcFgOv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7UefiApplication%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:furiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS19yZWZtUGdzZEZ3dVFzRUhiZU44LWlJU01ZdmdPWVV2MDdHa2RIdHBQN3RXUm5RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>furiro</dc:creator></item><item><title><![CDATA[🚀 2025年：Webフレームワーク性能ランキングまとめ]]></title><description><![CDATA[TechEmpower Framework Benchmarks Round 23
※AIがまとめているので間違っていたらコメントください

 🧭 概要
TechEmpower 社が毎年公開している 「Web Framework Benchmarks」 は、
世界中のバックエンドフレームワークを同一条件で性能比較した信頼性の高い指標です。
Round 23（2025 年2 月発表）では 331 種類 のフレームワークがテストされ、
主に I/O 性能（通信やDBアクセス） に焦点を当てています。


 ⚙️ テスト環境



項目
内容




日付 / ラウンド
Round 23 （2...]]></description><link>https://zenn.dev/wyuma/articles/a472363fd8a59d</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/a472363fd8a59d</guid><pubDate>Thu, 09 Oct 2025 07:53:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UO_ZyRv_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%25202025%25E5%25B9%25B4%25EF%25BC%259AWeb%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E6%2580%25A7%25E8%2583%25BD%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fanda-dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>fanda-dev</dc:creator></item><item><title><![CDATA[Rustでセキュリティsandboxツールを作った]]></title><description><![CDATA[
 はじめに
ども
最近、仕事場にClaude Codeを導入して、チームのパフォーマンスが爆増して仕事が減ってきたゴリラです。
Claude Codeを導入する際に便利なMCP(serenaやcontext7、playwrightなど)をいくつか入れたんですが、セキュリティちゃんとしないとねという話しになり、それがきっかけでセキュリティsandboxツールのmoriを作った話しです。

https://github.com/skanehira/mori

 mori(杜)とは
セキュリティといっても、様々な観点で対策を打つ必要がありますが、今回開発したmoriはsandbox-exec...]]></description><link>https://zenn.dev/techlead/articles/2025-10-05-rust-sandbox-tool-mori</link><guid isPermaLink="true">https://zenn.dev/techlead/articles/2025-10-05-rust-sandbox-tool-mori</guid><pubDate>Wed, 08 Oct 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iUWQUElf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3sandbox%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%25B4%25E3%2583%25AA%25E3%2583%25A9%2540VimConf2025%25E3%2583%2581%25E3%2582%25B1%25E3%2583%2583...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmODRjMjM5ZTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ODg5MDIzNWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ゴリラ@VimConf2025チケット絶賛発売中</dc:creator></item><item><title><![CDATA[2600億回のモンテカルロを14秒で：Rust×rayon×SIMDで並列化してみた]]></title><description><![CDATA[
 1. 導入 🦀
モンテカルロ法はシンプルながらも膨大な試行回数を必要とするアルゴリズムです。数十億、数百億といった規模になると、素朴な実装では到底現実的な時間で終わりません。
今回はこのモンテカルロ法で円周率を推定しようと試みました。
今回取り組んだ末に得たものは「2600億回の試行を14秒で終わらせる」でした。Rustの安全性と低レベル最適化の両立、そして並列化のためのrayon、さらにCPUの演算能力を引き出すSIMDを組み合わせることで、CPUフレンドリーかつの余力を使い切る実装を目指しました。


 2. モンテカルロ法による円周率推定
モンテカルロ法で円周率を推定するために...]]></description><link>https://zenn.dev/yua134/articles/montecarlo-pi</link><guid isPermaLink="true">https://zenn.dev/yua134/articles/montecarlo-pi</guid><pubDate>Tue, 07 Oct 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MwRPX49A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2600%25E5%2584%2584%25E5%259B%259E%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%25AD%25E3%2582%259214%25E7%25A7%2592%25E3%2581%25A7%25EF%25BC%259ARust%25C3%2597rayon%25C3%2597SIMD%25E3%2581%25A7%25E4%25B8%25A6%25E5%2588%2597%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yua%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSV82Tzh6Znl0Y3hiRVFoTDdEYnJOeFlCM1V3eFBGUTVJMzRyNjFfU2lpRkxnMVNnaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>yua</dc:creator></item><item><title><![CDATA[KV260(arm64)のUbuntu用のプログラムをクロスコンパイルする]]></title><description><![CDATA[
 はじめに
私は普段は Kria-KV260 上で、arm64(aarch64) の Ubuntu を使い、C++ や Rust などのセルフコンパイルで動かしています。
一方で、近年は AI を使った開発なども増えてきて、特に Rust での開発では、VS-Code Remote Development などを使って、KV260 に接続すると、メモリやパフォーマンスの不足を感じるようになってきてしまいました。
そこで、KV260 用のプログラムをホスト PC (x86_64) 上でクロスコンパイルして、KV260 上で動かす方法を試してみましたので備忘録です。
同じく arm64 の...]]></description><link>https://zenn.dev/ryuz88/articles/kv260_ubuntu_crosscompile</link><guid isPermaLink="true">https://zenn.dev/ryuz88/articles/kv260_ubuntu_crosscompile</guid><pubDate>Mon, 06 Oct 2025 23:32:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tOKgP_fe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:KV260%2528arm64%2529%25E3%2581%25AEUbuntu%25E7%2594%25A8%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ryuz88%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4ODM0YjVlMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Ryuz88</dc:creator></item><item><title><![CDATA[thiserror crate の基本的な使い方]]></title><description><![CDATA[前回は Error の downcast について書きました 。今回は thiserror crate の基本的な使い方について書きます。

 thiserror crate とは
thiserror は std::error::Error trait の実装のための derive macro を提供する crate です。
thiserror は Rust におけるエラー関連の定番 crate のひとつだと思います。
std::error::Error trait については過去に書きました。
derive macro についてはそのうち書きます（たぶん）。

 インストール方法
ca...]]></description><link>https://zenn.dev/doctormate/articles/8305782244b7f4</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/8305782244b7f4</guid><pubDate>Mon, 06 Oct 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Pi9UMaO7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:thiserror%2520crate%2520%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AA%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[Rustのパターンマッチってアートだヨネ]]></title><description><![CDATA[こんにちワ！　Rust大好きなサーバーサイドエンジニアのnamniumと申します。
Rustのソースコードはしばしばアートのように振る舞います。その中でもRustのパターンマッチは言語を代表する機能だけあって、綺麗に書けた時の美しさといえば筆舌に尽くしがたいです！　今回はそんなRustパターンマッチの世界を皆様に紹介したく無理やり筆を執りました！
次の"アート"に違和感を持った方はぜひ本記事を読んでみてほしいです[1]！

let Point { x, y } = p;
let c @ 'A'..='Z' = v else { return; };
let () = {};
let ((...]]></description><link>https://zenn.dev/namn1125/articles/1a40205d9f8f9a</link><guid isPermaLink="true">https://zenn.dev/namn1125/articles/1a40205d9f8f9a</guid><pubDate>Mon, 06 Oct 2025 02:08:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BdUA_ci2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2583%259E%25E3%2583%2583%25E3%2583%2581%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25A2%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A0%25E3%2583%25A8%25E3%2583%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:namn1125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMTYxMjNiY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>namn1125</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC426 A～D)]]></title><description><![CDATA[AtCoder Beginner Contest 426のA～D問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC426-A
問題
https://atcoder.jp/contests/abc426/tasks/abc426_a
OSのバージョンがアップデート済みかを判定する問題です。
解説
この問題では、現在のOSバージョン X と対象バージョン Y を比較し、 Y が X のバージョンに対してアップデート済みかどうかを判定します。
この問題でのバージョンの関係性は以下の通りなので、このルールに従って判定します。


Ocelot ...]]></description><link>https://zenn.dev/nakst_hide/articles/d650765f8aca95</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/d650765f8aca95</guid><pubDate>Sun, 05 Oct 2025 13:12:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KPp4G7kR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC426%2520A%25EF%25BD%259ED%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Cargo Lambda で Slack にカスタムダイアログを出す]]></title><description><![CDATA[
 内容
Slack でダイアログに入力をさせたい場合、基本的にはワークフロービルダーを使ってノーコードで作成することができる。
しかし任意のスクリプトを実行したり、複雑な内容を表示したいときには外部のエンドポイントを作成して、叩く必要がある。
ここでは Cargo Lambda (Rust の Lambda) を使ってダイアログを出すサンプルを紹介する。
https://github.com/Creanciel/ZennCargoLambdaSlackDialog
大まかなフローとしては下図のように Slash Command で Lambda にリクエストを行い、ダイアログを表示する...]]></description><link>https://zenn.dev/creanciel/articles/cargo-lambda-slack-dialog</link><guid isPermaLink="true">https://zenn.dev/creanciel/articles/cargo-lambda-slack-dialog</guid><pubDate>Sun, 05 Oct 2025 08:49:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--urbF9FW_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cargo%2520Lambda%2520%25E3%2581%25A7%2520Slack%2520%25E3%2581%25AB%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2580%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Creanciel%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwOWFkYmIxNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Creanciel</dc:creator></item></channel></rss>