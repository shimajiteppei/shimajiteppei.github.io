<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 30 Mar 2025 10:58:20 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[@SWC製のExecutorを作った]]></title><description><![CDATA[
 はじめに
最初tsxを使っていたら速さに驚きが隠せなく,多機能で420kbくらいあったので愛用していました。
しかし慣れとは恐ろしいものでもっといいエグゼキューターを作れるんじゃないか？と模索していたら
作ることが出来たので紹介します。
ちなみにTSXは内部でesbuildを使用しているためラッパーしてパス解決をうまくやっているライブラリで、ウォッチャー機能とかcommonjsに対応していたりと最高のライブラリとなっています。
そんな中でTypeScriptのチェッカーがGoで書き直された最中、チェックは爆速になるはずなのですが実行はtscだと遅すぎます、なのでtsxが唯一の存在だっ...]]></description><link>https://zenn.dev/refirst11/articles/b5fa3a5a45e8fb</link><guid isPermaLink="true">https://zenn.dev/refirst11/articles/b5fa3a5a45e8fb</guid><pubDate>Sun, 30 Mar 2025 09:55:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Uxlu40MQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540SWC%25E8%25A3%25BD%25E3%2581%25AEExecutor%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Refirst%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NTFjOTI4YTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Refirst</dc:creator></item><item><title><![CDATA[Rustの derive ってなに？]]></title><description><![CDATA[
 はじめに
Rustのコードの中でよく見かけるこの記述：
#[derive(Debug, Clone, PartialEq)]
最初は「これって何だろう？」とよくわかりませんでした。でも調べていくうちに、この derive がRustで便利な機能を簡単に使えるようにする魔法のようなものだと知って感動しました！
「deriveって何？」という方の参考になればうれしいです。

 deriveとは
Rustにおける#[derive(...)]は、構造体（struct）や列挙型（enum）に対して、標準的なトレイト（機能）を自動実装するための属性です。
例えば、下記のコードでは、Rustコンパ...]]></description><link>https://zenn.dev/ha_maya0104/articles/9aebe7e92fdc9a</link><guid isPermaLink="true">https://zenn.dev/ha_maya0104/articles/9aebe7e92fdc9a</guid><pubDate>Sun, 30 Mar 2025 09:43:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3jKGrEXI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%2520derive%2520%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2581%25AB%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%25A7%25E3%2581%2599%25E3%2581%258E%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlMzJkOGNmYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆですぎコーン</dc:creator></item><item><title><![CDATA[OSCとSyphon を使った Tauri x TouchDesignerの（ほぼ）リアルタイム連携]]></title><description><![CDATA[私からのメッセージは Syphon (Spout) はいいぞ！ / Tauri最高!! 以上になります。
今日はこれだけ覚えて帰ってください。
ここ数年、歌詞と楽曲をリアルタイムで同期再生するアプリケーションの制作に取り組んでいます。
今回は Tauriで構築した音楽プレイヤーアプリケーションと、TouchDesigner を連携させてみました。
https://x.com/8beeeaaat/status/1905761465208103305
ちなみに上記のサンプル楽曲・歌詞は私がSuno AIで作成したものになります。
（こういったサンプル作成時に著作権を気にしなくて良いのでSun...]]></description><link>https://zenn.dev/8beeeaaat/articles/57b169f967efa6</link><guid isPermaLink="true">https://zenn.dev/8beeeaaat/articles/57b169f967efa6</guid><pubDate>Sun, 30 Mar 2025 07:54:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PGnAhp4E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSC%25E3%2581%25A8Syphon%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%2520Tauri%2520x%2520TouchDesigner%25E3%2581%25AE%25EF%25BC%2588%25E3%2581%25BB%25E3%2581%25BC%25EF%25BC%2589%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E9%2580%25A3%25E6%2590%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:8beeeaaat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZiOWJlODlkYzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>8beeeaaat</dc:creator></item><item><title><![CDATA[地理院タイルに使われている文字を調べてみた]]></title><description><![CDATA[
 きっかけ
MapLibre Meetup Japan #04 で MapLibre GL JS のフォントに関する発表があり、ぜんぜん仕組みを知らなかったのでおもしろいなと思いました。
https://mug-jp.connpass.com/event/345527/
とりあえず実際のデータを見てみよう、ということで、glyphs の .pbf をパースして覗くツールを作って、maplibre/demotiles のファイルをいくつか眺めてみました。
https://github.com/yutannihilation/dump-glyphs-pbf
で、眺めてみて思ったのは、「こん...]]></description><link>https://zenn.dev/yutannihilation/articles/d83b7b8e93673a</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/d83b7b8e93673a</guid><pubDate>Sun, 30 Mar 2025 06:39:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3osxfgq4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259C%25B0%25E7%2590%2586%25E9%2599%25A2%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E4%25BD%25BF%25E3%2582%258F%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E6%2596%2587%25E5%25AD%2597%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[Pushbullet相当の機能をRustとFirestoreで実装する]]></title><description><![CDATA[
 はじめに
Pushbulletを長年使用していましたが、最近Chromeの拡張機能が動作しなくなりました。Chromeはこれからもメインブラウザとして使用したいので、同等の機能を自作することにしました。Pushbulletの特に気に入っていた機能は、スマホで見ていたサイトをPCに送ると、自動的にタブとして開いてくれる点です。Pushbulletの全機能を実装するのは大変なので、この特定の機能のみ実装することにしました。

 アーキテクチャ


クライアント:


HTTP Request Shortcutsを使用してURLをFirestoreに送信



データベース（Firesto...]]></description><link>https://zenn.dev/stucci/articles/firestore-url-opener</link><guid isPermaLink="true">https://zenn.dev/stucci/articles/firestore-url-opener</guid><pubDate>Sun, 30 Mar 2025 00:59:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gDeLhmPn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pushbullet%25E7%259B%25B8%25E5%25BD%2593%25E3%2581%25AE%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592Rust%25E3%2581%25A8Firestore%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:stucci%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwNzY5ZDE2YWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>stucci</dc:creator></item><item><title><![CDATA[Rustのジェネリック関連型：それって何？]]></title><description><![CDATA[

 ジェネリック関連型 (GAT) について少し理解する
名前が長い！これ何なの？
大丈夫、最初から整理してみよう。まずは Rust の構文構造をおさらいしよう。Rust のプログラムは何で構成されている？ 答えは：アイテム（item）だ。
すべての Rust プログラムは一つ一つの「アイテム」で構成されている。たとえば、main.rs に構造体定義を書き、その後に実装定義を追加してメソッドを 2 つ定義し、最後に main 関数を書く。これは crate に対応するモジュールアイテムの中に 3 つのアイテムがあるということだ。
アイテムの説明が終わったところで、次に「関連アイテム」に...]]></description><link>https://zenn.dev/leap_adam/articles/a4d3880a19f30c</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/a4d3880a19f30c</guid><pubDate>Sat, 29 Mar 2025 21:57:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4eovtieH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25AF%25E9%2596%25A2%25E9%2580%25A3%25E5%259E%258B%25EF%25BC%259A%25E3%2581%259D%25E3%2582%258C%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[IT技術解説⑥：なぜ、非組込開発者はRustによるC言語置換えが簡単だと思うのか？]]></title><description><![CDATA[
 はじめに
近年、Rustという新しいプログラミング言語が注目を集めています。その安全性や抽象化能力の高さから、「システムプログラミング言語としてC言語を置き換えることが可能である」と広く宣伝されています。しかし、組込開発の現場において、RustがCを完全に置き換えることが難しいことは周知の事実であるにもかかわらず、非組込開発者は安易にその置換が可能だと誤解しがちです。本稿では、なぜこうした誤解が生じるのか、その理由を明らかにします。

 1. Rustが「システムプログラミング言語」という宣伝を真に受け過ぎている
Rustは「安全でモダンなCの代替言語」としてのマーケティングが非常に...]]></description><link>https://zenn.dev/pdfractal/articles/66945f851c4fe6</link><guid isPermaLink="true">https://zenn.dev/pdfractal/articles/66945f851c4fe6</guid><pubDate>Sat, 29 Mar 2025 15:37:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LXJ67exd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IT%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%25E2%2591%25A5%25EF%25BC%259A%25E3%2581%25AA%25E3%2581%259C%25E3%2580%2581%25E9%259D%259E%25E7%25B5%2584%25E8%25BE%25BC%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2581%25AFRust%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BC%25E8%25A8%2580%25E8%25AA%259E%25E7%25BD%25AE%25E6%258F%259B%25E3%2581%2588%25E3%2581%258C%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25A0%25E3%2581%25A8%25E6%2580%259D%25E3%2581%2586%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pdfractal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5MjFkMjlhMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pdfractal</dc:creator></item><item><title><![CDATA[MCPのRust SDKを使ってみた]]></title><description><![CDATA[
 MCPのRust SDKでDocComment生成ツールを作ってみた


 背景
関数や構造体、enum を作ったり修正したときに「あとでちゃんと doc comment 書こう」と思っても、PR作る直前になって、まあいっかとなってしまうことがよくあります。
それなら自動で書いてくれたら助かるなと思って、今回その仕組みを Rust SDK + MCP で作ってみました。とはいえ、正直これ Cursor の .cursorrules 使えばもっと簡単にできると思います。
今回はあくまで MCP や公式 Rust SDK の使い方を勉強してみたかったのが主な目的です。
MCP には Pr...]]></description><link>https://zenn.dev/immoraroutine/articles/2e8d7f4c82dca5</link><guid isPermaLink="true">https://zenn.dev/immoraroutine/articles/2e8d7f4c82dca5</guid><pubDate>Sat, 29 Mar 2025 12:10:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2jZejB_M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%25E3%2581%25AERust%2520SDK%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:blue-orange-yellow%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyYTA0NWExYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>blue-orange-yellow</dc:creator></item><item><title><![CDATA[Rustでpythonコードを呼び出してトラッキング]]></title><description><![CDATA[
 概要
仕様するモデルがonnxであればortを使って呼び出してrustのみで物体検出とかできるんですが、例えばトラッキングの場合は物体検出モデルを呼び出した後にカルマンフィルタなどを呼び出してIDを追跡するので、全てをRustで完結させるのは難しいです。
そこで、rustからpythonのコードを呼び出してトラッキングを行い、rust側で整形してクラウドと通信すれば良いんじゃないかと思い、rustとpythonを組み合わせてトラッキングをしてみました。
リポジトリは下記に公開しています。
https://github.com/bamboo-nova/rustraking
Mac上では...]]></description><link>https://zenn.dev/bamboo_nova/articles/e644750321cabc</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/e644750321cabc</guid><pubDate>Sat, 29 Mar 2025 07:05:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UeNBosmK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7python%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25AD%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[Rustジェネリクス入門]]></title><description><![CDATA[
プログラミングにおいてよくある要求のひとつは、同じ機能の関数で異なる型のデータを処理することです。ジェネリクス（総称型）をサポートしていないプログラミング言語では、通常はそれぞれの型ごとに別々の関数を書く必要があります。しかし、ジェネリクスがあれば、開発者にとって便利なだけでなく、冗長なコードを減らし、言語自体の表現力も大きく向上します。つまり、1 つの関数で異なる型のデータを処理する多くの関数を置き換えることができます。
たとえば、ジェネリクスを使わずに、引数が u8、i8、u16、i16、u32、i32……などの型を許容する double 関数を定義するには、次のように書く必要があ...]]></description><link>https://zenn.dev/leap_adam/articles/30fe48180dc20b</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/30fe48180dc20b</guid><pubDate>Sat, 29 Mar 2025 05:40:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QuGPfPBT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[　【Rust】【bacon】cargo-watch が使えなくなった時に読む]]></title><description><![CDATA[
 背景
非常に便利なコードの変更を検知してリロードしてくれるcargo-watchが今後更新されないようです。作者から代替案としてbacon の利用を推奨されています。

 対応

 旧:

 cargo-watchのコマンド
cargo watch -q -c -w src/ -x run

 新:

 bacon インストール
cargo install --locked bacon

 bacon コマンド
bacon run-long

コードを変更する度に自動検知するcargo-watch の様な機能で動くことができます。


 より細かい設定
bacon --init


...]]></description><link>https://zenn.dev/yuuki0206/articles/f06390cba19736</link><guid isPermaLink="true">https://zenn.dev/yuuki0206/articles/f06390cba19736</guid><pubDate>Sat, 29 Mar 2025 03:24:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FruH6RJH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2580%25E3%2580%2590Rust%25E3%2580%2591%25E3%2580%2590bacon%25E3%2580%2591cargo-watch%2520%25E3%2581%258C%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E8%25AA%25AD%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuuki0206%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMTZkMjc2ZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuuki0206</dc:creator></item><item><title><![CDATA[シェーダー言語のSlangをRustとVulkan (ash)で試してみる]]></title><description><![CDATA[
 はじめに
最近話題のSlangというシェーダー言語を、RustとVulkan (ash)で試してみました。
この記事ではSlangの機能を一部ピックアップして簡潔に紹介するとともに、RustとVulkan (ash)でSlangを使う際にcargo runでコンパイルが走るようにbuild.rsを設定する方法を紹介します。

 Slangとは
Slangはオープンソースのシェーダー言語の一種です。
元はNVIDIAがSIGGRAPH 2018あたりで発表した言語です。
D3D12, Vulkan, Metal, D3D11, OpenGL, CUDAなどで利用できる他、CPUでも実行...]]></description><link>https://zenn.dev/matcha_choco010/articles/2025-03-29-hello-slang-vulkan-ash</link><guid isPermaLink="true">https://zenn.dev/matcha_choco010/articles/2025-03-29-hello-slang-vulkan-ash</guid><pubDate>Fri, 28 Mar 2025 21:38:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m3Z3DMb7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AESlang%25E3%2582%2592Rust%25E3%2581%25A8Vulkan%2520%2528ash%2529%25E3%2581%25A7%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%258A%2598%25E7%2599%25BB%2520%25E6%25A8%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4OGNmZDY1YTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>折登 樹</dc:creator></item><item><title><![CDATA[Rustの並行処理入門：アトミック徹底解説]]></title><description><![CDATA[

 原子型とアトミック操作
アトム（atom）とは、CPU のコンテキストスイッチによって中断されない一連の機械命令のことです。これらの命令が組み合わさることでアトミック操作が形成されます。マルチコア CPU では、ある CPU コアがアトミック操作を開始する際に、他の CPU コアによるメモリアクセスを一時的に停止させ、アトミック操作が他の CPU コアに干渉されないようにします。
アトミック操作（atomic operation）とは、分割不可かつ中断不可の一つまたは複数の操作を指します。並行プログラミングにおいて、CPU レベルでこれらの操作が一体として扱われることを保証する必要...]]></description><link>https://zenn.dev/leap_adam/articles/f67f3e895d2fab</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/f67f3e895d2fab</guid><pubDate>Thu, 27 Mar 2025 21:10:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XMXKzWxJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E3%2582%25A2%25E3%2583%2588%25E3%2583%259F%25E3%2583%2583%25E3%2582%25AF%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rust 小ネタ: Debug トレイトを利用した等価比較]]></title><description><![CDATA[通常、値を (非)等価比較 したいときは PartialEq トレイトを付ける必要がありますが、本記事では Debug トレイトを用いた等価比較の方法と、その注意点について紹介します。
#[derive(Debug)]
struct S;

let foo = S;
let bar = S;
assert!(format!("{foo:?}") == format!("{bar:?}"));

 ユーザー定義型の等価比較
ユーザー定義型とは、 i32 や char などの言語組み込みのプリミティブ型とは異なり、 struct や enum といった ユーザーが定義する型 のことです。
こ...]]></description><link>https://zenn.dev/fairydevices/articles/39a4f536a52254</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/39a4f536a52254</guid><pubDate>Thu, 27 Mar 2025 20:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--quXCH6R_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520Debug%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E7%25AD%2589%25E4%25BE%25A1%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kumavale%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmMjU3OGQzNTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kumavale</dc:creator></item><item><title><![CDATA[Rustの形式検証ツールCreusotをWSLにインストールした記録]]></title><description><![CDATA[Rustの形式検証ツールCreusotをWSLにインストールした記録です。
ちょっと苦労したので一応備忘録としてひととおり書いておこうと思います。
Creusotとは何かについては公式リポジトリを見るか：
https://github.com/creusot-rs/creusot
kkobさんによる記事にある説明を読むとよいと思います：
https://zenn.dev/kk/articles/20230213_creusot_intro

 参考資料
以下のREADMEに従いました：
https://github.com/creusot-rs/creusot/blob/6bbb60fd...]]></description><link>https://zenn.dev/komorin95/articles/3a590330f612f9</link><guid isPermaLink="true">https://zenn.dev/komorin95/articles/3a590330f612f9</guid><pubDate>Thu, 27 Mar 2025 14:50:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_FQFlg8q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E5%25BD%25A2%25E5%25BC%258F%25E6%25A4%259C%25E8%25A8%25BC%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25ABCreusot%25E3%2582%2592WSL%25E3%2581%25AB%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%259F%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2582%2582%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSktzRERiajdPMWFlUGd4LUpNQjJWaTVqekZHaHd4Rld6REUtLWRIWHN4S0ZDUi1RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こもりん</dc:creator></item><item><title><![CDATA[Rustの並行処理入門：Fearless Concurrency]]></title><description><![CDATA[
並行プログラムとは、複数のタスクを実行するプログラム（あるいはマルチタスクのように見えるもの）を指します。つまり、2 つ以上のタスクが時間的に重なり合いながら交互に実行されることを意味します。これらのタスクは「スレッド」と呼ばれる最小の処理単位によって実行されます。
その背後で実際にマルチタスク（並列）処理が行われているわけではなく、スレッド同士が人間には知覚できない速度で高速にコンテキストを切り替えているだけです。このような錯覚に依存している現代のアプリケーションは多く、たとえばサーバーがリクエストを処理しつつ他のリクエストを待機する場合などがそれにあたります。
スレッド間でデータを...]]></description><link>https://zenn.dev/leap_adam/articles/6812315e79b17d</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/6812315e79b17d</guid><pubDate>Wed, 26 Mar 2025 21:29:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uvJmvx6E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259AFearless%2520Concurrency%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rust イテレータ操作まとめ｜よく使う16のメソッド＋実例]]></title><description><![CDATA[
 はじめに
Rustを勉強して感じたのが、「イテレータって便利だけど、最初はちょっと難しい」ということでした。
.iter() や .into_iter()、.map() や .filter() など、よく使われるけれど混乱しやすいメソッドがたくさんあって、私自身もよくつまずきました。
この記事は、自分自身が勉強したこと・つまずいたこと・「これ分かりやすかった！」という気づきを整理してまとめたものです。
同じようにRustを学んでいる方の少しでもヒントになれば嬉しいです。


 1. .iter() / .into_iter() / .iter_mut() - 文字列をイテレータに変換...]]></description><link>https://zenn.dev/ha_maya0104/articles/6cb18e99c5edbd</link><guid isPermaLink="true">https://zenn.dev/ha_maya0104/articles/6cb18e99c5edbd</guid><pubDate>Tue, 25 Mar 2025 06:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oP2ceNIM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2582%25A4%25E3%2583%2586%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E6%2593%258D%25E4%25BD%259C%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25EF%25BD%259C%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%258616%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25EF%25BC%258B%25E5%25AE%259F%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%25A7%25E3%2581%2599%25E3%2581%258E%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlMzJkOGNmYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆですぎコーン</dc:creator></item><item><title><![CDATA[Rustの並行処理入門：初心者のためのガイド]]></title><description><![CDATA[

 並行性と並列性
多くの人が並行性（Concurrence）と並列性（Parallel）の概念を混同しています。したがって、Rust における非同期プログラミングを学ぶ前に、まずこの二つの違いを理解しておく必要があります。
オペレーティングシステムに関する書籍では、よく次のように説明されています：


並行性とは、2 つ以上のイベントが同じ時間間隔内に発生することを指します。


並列性とは、システムが同時に計算や操作を行う能力を持っていることを指します。


説明その 1：並行性は、2 つ以上のイベントが同じ時間間隔で発生することを指し、並列性は 2 つ以上のイベントが同一時点で発...]]></description><link>https://zenn.dev/leap_adam/articles/f777027fee0849</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/f777027fee0849</guid><pubDate>Mon, 24 Mar 2025 20:25:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ymlVyhTc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rust 文字列操作完全ガイド｜よく使う26のメソッドまとめ]]></title><description><![CDATA[
 はじめに
Rustでは文字列操作が少し難しく感じる方も多いのではないでしょうか？
特に、&amp;strとStringの違い、イテレータとの組み合わせ、Unicode対応など、慣れるまでは取っ付きづらく感じるかもしれません。
そこで本記事では、Rustにおける
よく使う文字列操作メソッド
初心者の方は「こんな書き方があるんだ」と知るきっかけに、経験者の方はリファレンスとして使えるようにまとめています。
今後のRust開発で文字列まわりの表現力を上げたい方は、ぜひ参考にしてみてください！


 1. .trim() / .trim_start() / .trim_end()  - 前後...]]></description><link>https://zenn.dev/ha_maya0104/articles/28e85a94ca0847</link><guid isPermaLink="true">https://zenn.dev/ha_maya0104/articles/28e85a94ca0847</guid><pubDate>Mon, 24 Mar 2025 04:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--brXb3Pvv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25EF%25BD%259C%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%258626%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%25A7%25E3%2581%2599%25E3%2581%258E%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlMzJkOGNmYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆですぎコーン</dc:creator></item><item><title><![CDATA[ABC398:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 398のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc398/tasks/abc398_a
解説
長さ N の文字列を初期化し、中央の文字を = に置き換えたものを出力します。


N が奇数の場合
中央の文字を = に置き換えます。このとき、中央のインデックスは N / 2 です。


N が偶数の場合
中央の2つの文字を = に置き換えます。このとき、中央のインデックスは N / 2 - 1 と N / 2 です。


コード

ABC398a.r...]]></description><link>https://zenn.dev/nakst_hide/articles/a62a21128b03af</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/a62a21128b03af</guid><pubDate>Sun, 23 Mar 2025 22:36:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--n9fBFZXG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC398%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item></channel></rss>