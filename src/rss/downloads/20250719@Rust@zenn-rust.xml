<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 19 Jul 2025 06:50:14 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[脆弱性を探しに行って見つけた話]]></title><description><![CDATA[
 はじめに
no starch pressからFrom Day Zero to Zero Day[1]という本が出たので読んでいました。
第3章まで読んだので一旦実践してみようと思い自分で未知の脆弱性を探していたところ、運良く一個見つけたのでそこに至るまでの過程を書いていきたいと思います。

 ターゲットを探す
本には

Familiarity
Availability
Impact

を意識してターゲットを探すとよいというようなことが書いてあったので、まず自分の得意なRustで作られているOSSから脆弱性を探すことにしました。

 既知の脆弱性を探す
3章 Variant analy...]]></description><link>https://zenn.dev/hatoo/articles/66f9a9e4d65bc4</link><guid isPermaLink="true">https://zenn.dev/hatoo/articles/66f9a9e4d65bc4</guid><pubDate>Sat, 19 Jul 2025 06:23:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eB4QFQkb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2582%2592%25E6%258E%25A2%25E3%2581%2597%25E3%2581%25AB%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%25A6%25E8%25A6%258B%25E3%2581%25A4%25E3%2581%2591%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hatoo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMzRhZWY1YjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hatoo</dc:creator></item><item><title><![CDATA[文字とコードポイントを相互変換するコマンドを作成する]]></title><description><![CDATA[文字とコードポイントを相互変換する処理はシェル芸のよくある題材です。テストケースでこれらの相互変換をよく使うので Bash、Python、Rust でコマンドとして作成してみました。

 Bash での実装
ord と chr ファイルを用意して次のコードを記載します。

ord
input="$1"
echo -n "$input" \
  | grep -oP . \
  | while IFS= read -r char; do
      printf '%X ' "'$char"
    done
echo


chr
for cp in "$@"; do
  printf '...]]></description><link>https://zenn.dev/masakielastic/articles/20250718-chr-and-ord</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250718-chr-and-ord</guid><pubDate>Fri, 18 Jul 2025 22:55:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ABQ4P-Wv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E7%259B%25B8%25E4%25BA%2592%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[Booleanとは何なのかをRuby, Rust, Pythonで掘り下げる]]></title><description><![CDATA[
 はじめに
私のソフトウェアのエンジニアとしての入りはC言語でした。次にPythonを触り、Booleanを見たときに衝撃を覚えたのを思い出します。
今回は、普段使用しているBooleanをRuby, Rust, Pythonで掘り下げてみます。

 マシンスペック
MacBook Air M2 arm64
Docker上で実施

 準備

 Dockerの起動
mkdir bool_deepdive &amp;&amp; cd $_
mkdir -p ruby python rust
vim Dockerfile
# =================================...]]></description><link>https://zenn.dev/ka_kan/articles/21754a7a41738f</link><guid isPermaLink="true">https://zenn.dev/ka_kan/articles/21754a7a41738f</guid><pubDate>Fri, 18 Jul 2025 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EQJE0pYZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Boolean%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25E3%2582%2592Ruby%252C%2520Rust%252C%2520Python%25E3%2581%25A7%25E6%258E%2598%25E3%2582%258A%25E4%25B8%258B%25E3%2581%2592%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlOGJhYTMxOGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanda</dc:creator></item><item><title><![CDATA[Rust製のターミナル上で動くWindows用のシンプルなオーディオプレイヤー『Neiro』]]></title><description><![CDATA[Windowsで動作するシンプルなオーディオプレイヤー『Neiro』を作成しました。内部的にはcpalライブラリがサポートしていればどの環境でも動くはず。
https://github.com/c0b23092db/neiro

 Neiro（ねゐろ）

タイトル通り、ターミナル上でオーディオファイルを再生できるコマンドです。日本語で『ねゐろ』です。
ファイラー機能はyazi経由での起動を想定しているので導入していません。yaziと合わせてお使いください。

 インストール方法

 GitHubにあるバイナリをダウンロードする。
https://github.com/c0b23092db...]]></description><link>https://zenn.dev/yuhi_ili/articles/40c0430e11a862</link><guid isPermaLink="true">https://zenn.dev/yuhi_ili/articles/40c0430e11a862</guid><pubDate>Fri, 18 Jul 2025 12:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--520hIfM8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E4%25B8%258A%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258FWindows%25E7%2594%25A8%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AA%25E3%2583%2597%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25A4%25E3%2583%25BC%25E3%2580%258ENeiro%25E3%2580%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25A4%2595%25E6%2597%25A5%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzOTk2NzgwZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>夕日</dc:creator></item><item><title><![CDATA[RustとWASMでフロントエンド開発してみたら、意外と現実的だった話]]></title><description><![CDATA[最近Redditでこんなコメントを見かけました：

“I hate JS. I’ve done the HTML and CSS, but I’m stuck. I want to use Rust instead.”

正直、すごく共感しました。長年JavaScriptを使ってきて、特に大規模な開発では「型がない」「ツール壊れる」「謎エラー多い」と疲れることもしばしば…。
そこでふと考えました。
Rust + WASM（WebAssembly）でフロントエンド開発って、現実的に使えるのか？
この記事では、実際に小さなプロジェクトで試してみた体験と、よかった点・つらかった点をシェアします...]]></description><link>https://zenn.dev/zoe_nichika/articles/31335ea05be794</link><guid isPermaLink="true">https://zenn.dev/zoe_nichika/articles/31335ea05be794</guid><pubDate>Fri, 18 Jul 2025 10:03:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q81GEdi0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8WASM%25E3%2581%25A7%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2582%2589%25E3%2580%2581%25E6%2584%258F%25E5%25A4%2596%25E3%2581%25A8%25E7%258F%25BE%25E5%25AE%259F%25E7%259A%2584%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NichikaP%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiMDI5ZjQ1YmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NichikaP</dc:creator></item><item><title><![CDATA[cargo alias を使ってタスク登録したかった]]></title><description><![CDATA[つまり私には合わなかったということです.

Cargo には alias を使って独自のコマンドを定義することができます[1].
これを使えば Cargo を npm-scripts のようにタスクランナーとして利用することができます. 正直 cargo clippy -- -D warnings ですらめんどくさいので, cargo lint ぐらい簡単に使いたいです. というか npm-scripts はそれくらい気軽に使ってますよね.
具体的には .cargo/config.toml をプロジェクトディレクトリに配置するか, $CARGO_HOME/config.toml を配置す...]]></description><link>https://zenn.dev/toms74209200/articles/use-cargo-alias-task-runner</link><guid isPermaLink="true">https://zenn.dev/toms74209200/articles/use-cargo-alias-task-runner</guid><pubDate>Thu, 17 Jul 2025 15:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--z2bDAUmY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo%2520alias%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E7%2599%25BB%25E9%258C%25B2%25E3%2581%2597%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:toms%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTVLV3Rva3h5eWFxT0M5ajlpQXhVQjF1NVlndDV3QUprRjVEc0lXcEVDNnVoUD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>toms</dc:creator></item><item><title><![CDATA[[Rust] プロシージャル生成向け非同期・並列タスクランナーの実装]]></title><description><![CDATA[新しい Rust プロジェクトで地形生成をするときに、並列処理でパフォーマンスを向上させたくなりました。
先に結果から提示すると、次のようにズームやパンによって視界に入った部分の地形を順次生成していくのが見て取れると思います。
https://youtu.be/Dk_N4domMHU
これが並列化前だと次のようになります。順次処理されていく様子が見て取れ、前の動画よりも明らかに遅いことが分かると思います。
https://youtu.be/s1nbg-eHYaY
GitHub リポジトリは以下ですが、開発中のため内容はまとまっていません。どんなアプリケーションなのかは別の記事でまとめたい...]]></description><link>https://zenn.dev/msakuta/articles/rust-parallel-task-runner</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/rust-parallel-task-runner</guid><pubDate>Thu, 17 Jul 2025 13:31:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vMciaoWF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B7%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25AB%25E7%2594%259F%25E6%2588%2590%25E5%2590%2591%25E3%2581%2591%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2583%25BB%25E4%25B8%25A6%25E5%2588%2597%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%258A%25E3%2583%25BC%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[RustでのWinAPI叩きの勘所]]></title><description><![CDATA[こんにちは。Povoです。
今回はrustでwinAPIを叩く方法について話します。
Windows-rs自体の特徴以外も書いていたりしますが目をつぶっていてください。
（rust初心者なので当たり前のことを威張り腐って説明してるかもしれないです）

 使用するクレート

windows-rs
winAPIを叩くためのMicrosoft公式が出しているクレートです。
winAPIというクレートもあるらしいですが、直で触りすぎてコードが乱雑になりやすいのと、アップデートも最近減ってるらしいのでwindows-rsのほうがおすすめです。
↓GitHub
https://github.com/...]]></description><link>https://zenn.dev/povo/articles/d905c47ed5970b</link><guid isPermaLink="true">https://zenn.dev/povo/articles/d905c47ed5970b</guid><pubDate>Thu, 17 Jul 2025 11:41:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--45M_dgAZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%25AEWinAPI%25E5%258F%25A9%25E3%2581%258D%25E3%2581%25AE%25E5%258B%2598%25E6%2589%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Povo43%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxNGM2MjM3ZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Povo43</dc:creator></item><item><title><![CDATA[「まだgrep→awk→jq→pandas使い分けてるの？」hawk v0.2.1で統一された話]]></title><description><![CDATA[
 また新しいツール覚えなきゃ...
「ログ解析はgrep、JSONはjq、統計はpandas、文字列処理はawk...」
インフラエンジニアの机の上には、用途別のコマンドチートシートが散乱。毎回「あのコマンド何だっけ？」でググっている日々。
そんな 「ツール使い分け地獄」 を、hawk v0.2.1 で終わらせました。
前回の記事（120+ likes！）で大きな反響をいただいたhawkが、この度v0.2.1として大幅にパワーアップ。ついに 「一つのツールで全部できる」 世界が実現しました。

🆕 テキストファイル対応: ログ解析が可能に
🧵 文字列操作: 10種類以上の文字列関数を追...]]></description><link>https://zenn.dev/kyonaka/articles/8ba7f7c3810a63</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/8ba7f7c3810a63</guid><pubDate>Wed, 16 Jul 2025 17:53:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hGv8-Zuu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2581%25BE%25E3%2581%25A0grep%25E2%2586%2592awk%25E2%2586%2592jq%25E2%2586%2592pandas%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A6%25E3%2582%258B%25E3%2581%25AE%25EF%25BC%259F%25E3%2580%258Dhawk%2520v0.2.1%25E3%2581%25A7%25E7%25B5%25B1%25E4%25B8%2580%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NzcxODk2ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[ずっと欲しかったRustのWebAPIテストフレームワークを個人開発している話]]></title><description><![CDATA[
 自己紹介
アメリカのIT企業でRustを使ったWebAPI開発に携わっています。Rust以前はC++エンジニアとして経路探索WebサービスやMMORPGサーバー、証券取引システムの開発をしていました。2017年からRustでバックエンドの開発をしており、WebAPIテスト自動化の課題に長年取り組んできました。

 なぜRustでWebAPIを開発するのか
Rustを選ぶ理由は主に3つあります：

🛡️ 安全性: Rustのメモリ安全性により、セグメンテーション違反やデータレースといった問題を コンパイル時に検出できます。C++で開発していた時代には、ダングリング参照やデータレースによ...]]></description><link>https://zenn.dev/yukinarit/articles/597dfc7ee56bb0</link><guid isPermaLink="true">https://zenn.dev/yukinarit/articles/597dfc7ee56bb0</guid><pubDate>Wed, 16 Jul 2025 14:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7oeQTa1h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259A%25E3%2581%25A3%25E3%2581%25A8%25E6%25AC%25B2%25E3%2581%2597%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259FRust%25E3%2581%25AEWebAPI%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2582%2592%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukinarit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4YjFjZWY0NjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukinarit</dc:creator></item><item><title><![CDATA[hawk v0.2.0リリース - テキスト処理と統計機能で用途が大幅拡張]]></title><description><![CDATA[
 TL;DR
hawk v0.2.0をリリースしました！ 🎉
前回の記事（120+ likes！）で大きな反響をいただいたhawkが、コミュニティからのフィードバックを受けて大幅にパワーアップしました。

🆕 テキストファイル対応: ログ解析が可能に
🧵 文字列操作: 10種類以上の文字列関数を追加
📊 統計機能: median, stddev, unique, sort対応
🎨 カラー出力: 見やすい色付き表示
🔧 後方互換性: 既存のクエリはそのまま動作


 前回からの反響と成長

 コミュニティの反応


Zenn: 120+ likes, 40+ stocks

GitHub...]]></description><link>https://zenn.dev/kyonaka/articles/856c1487ccf37a</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/856c1487ccf37a</guid><pubDate>Wed, 16 Jul 2025 06:14:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TzKU1opl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:hawk%2520v0.2.0%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%2520-%2520%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25A8%25E7%25B5%25B1%25E8%25A8%2588%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25A7%25E7%2594%25A8%25E9%2580%2594%25E3%2581%258C%25E5%25A4%25A7%25E5%25B9%2585%25E6%258B%25A1%25E5%25BC%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NzcxODk2ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[ctrlc よりも簡単に Ctrl-C を検知する、小さな crate を作った]]></title><description><![CDATA[
 前提
CLI ツールを書いていると「Ctrl-C を検知したい」という場面がよくあります。
その度にこんな実装を書くわけですが、どうにも気持ち悪いとずっと思っていました。

main.rs
let flag = Arc::new(AtomicBool::new(false));
let f = flag.clone();

ctrlc::set_handler(move || {
    f.store(true, Ordering::SeqCst);
})?;

loop {
    if flag.load(Ordering::SeqCst) {
        println!...]]></description><link>https://zenn.dev/malt03/articles/a416872784bbca</link><guid isPermaLink="true">https://zenn.dev/malt03/articles/a416872784bbca</guid><pubDate>Wed, 16 Jul 2025 00:49:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R2gBr-mp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ctrlc%2520%25E3%2582%2588%25E3%2582%258A%25E3%2582%2582%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%2520Ctrl-C%2520%25E3%2582%2592%25E6%25A4%259C%25E7%259F%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2580%2581%25E5%25B0%258F%25E3%2581%2595%25E3%2581%25AA%2520crate%2520%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:malt03%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwMTJkOWYwYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>malt03</dc:creator></item><item><title><![CDATA[Rustでpingを実装してICMPを嗜む]]></title><description><![CDATA[
 はじめに
普段よく利用するpingコマンドですが、中身はどのようになっているのか気になったので今回はpingとICMPについて掘り下げてみます。
※使用するコードはLLMを使用しました。

 マシンスペック
MacBook Air M2 arm64

 事前知識

 ping
通信したいホストやルータなどにIPパケットが到達するか否かを確認するコマンドです。
下記の様に、ipアドレスかドメイン名などを指定して疎通を確認します。
ping xxxx.com
PING xxxx.com (xx.xx.xx.xx) 56(84) bytes of data.
64 bytes from x...]]></description><link>https://zenn.dev/ka_kan/articles/93a95b6da4ecbb</link><guid isPermaLink="true">https://zenn.dev/ka_kan/articles/93a95b6da4ecbb</guid><pubDate>Mon, 14 Jul 2025 21:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--POXBEaPF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7ping%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6ICMP%25E3%2582%2592%25E5%2597%259C%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlOGJhYTMxOGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanda</dc:creator></item><item><title><![CDATA[コンパイラが出力するCALL直後のマーカーには実際に意味があるという話]]></title><description><![CDATA[この記事はWindows x64 PE（Portable Executable）バイナリに関する話です。

 UBマーカー
このようなディスアセンブリを見たことはありますか。
.text:0000000140097D70                         panic_unwind::imp::exception_copy proc near
.text:0000000140097D70                                                                 ; DATA XREF: __rustc::__rust_st...]]></description><link>https://zenn.dev/kkent030315/articles/69ec171cf595e5</link><guid isPermaLink="true">https://zenn.dev/kkent030315/articles/69ec171cf595e5</guid><pubDate>Mon, 14 Jul 2025 08:52:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_AJ7VcPK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25A9%25E3%2581%258C%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258BCALL%25E7%259B%25B4%25E5%25BE%258C%25E3%2581%25AE%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25AF%25E5%25AE%259F%25E9%259A%259B%25E3%2581%25AB%25E6%2584%258F%25E5%2591%25B3%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkent030315%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwZDFmMjE4MjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkent030315</dc:creator></item><item><title><![CDATA[ABC414: Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 414のA-E問題をRustで解いた際の解法をまとめました。

 A 問題
問題
https://atcoder.jp/contests/abc414/tasks/abc414_a
解説
配信を開始時刻 L から終了時刻 R まで視聴できるリスナーの人数を数える問題です。
リスナーが配信を最初から最後まで見られる条件は、リスナーの視聴可能時間帯が配信の時間帯を完全に含むことになります。
つまり、 X_i \leq L かつ R \leq Y_i の条件を満たすリスナーの人数を数えれば答えが求まります。
コード

abc414a.rs
us...]]></description><link>https://zenn.dev/nakst_hide/articles/f5b3e3a3473e9d</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/f5b3e3a3473e9d</guid><pubDate>Sun, 13 Jul 2025 13:05:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uN1_bD-j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC414%253A%2520Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rust 製 OS、 Redox OS に UNIX ドメインソケットを実装した]]></title><description><![CDATA[
 はじめに
お久しぶりです。isan です。
5月から Rust 製 OS である Redox OS の Summer of Code に参加させていただいています。
先日、そのプログラム中のプロジェクトの1つである UNIX ドメインソケット(UDS) の初期実装が終わりましたので、記事にさせていただきます。(この記事は公式ブログで公開されている RSoC 2025: Implementing Unix Domain Sockets の日本語版です。)

 この記事の目的
この記事は、私が Summer of Code で行った UNIX ドメインソケット(UDS) 実装の経験を共有...]]></description><link>https://zenn.dev/isan_ethen/articles/66ed9050c3425d</link><guid isPermaLink="true">https://zenn.dev/isan_ethen/articles/66ed9050c3425d</guid><pubDate>Sun, 13 Jul 2025 07:44:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2-KALjxP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E8%25A3%25BD%2520OS%25E3%2580%2581%2520Redox%2520OS%2520%25E3%2581%25AB%2520UNIX%2520%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BD%25E3%2582%25B1%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:isan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlNTUwZGVlYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>isan</dc:creator></item><item><title><![CDATA[RustとWebAssemblyで作るブラウザゲームの最適化手法]]></title><description><![CDATA[
 はじめに
近年、Webブラウザ上で動作するゲームの需要が高まっています。特にRustとWebAssembly(Wasm)の組み合わせは、高性能なブラウザゲームを実現するための強力なツールとして注目されています。本記事では、RustとWasmを使用してブラウザゲームを開発する際の最適化手法について解説します。

 なぜRustとWebAssemblyなのか
JavaScriptだけでゲームを開発する場合と比較して、RustとWasmの組み合わせには以下の利点があります：


パフォーマンス: Rustはネイティブに近い速度で実行可能

メモリ安全: Rustの所有権システムによりメモリ...]]></description><link>https://zenn.dev/gregory/articles/c4e30e14c5b873</link><guid isPermaLink="true">https://zenn.dev/gregory/articles/c4e30e14c5b873</guid><pubDate>Sat, 12 Jul 2025 11:17:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Veb-LLqo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8WebAssembly%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:gregory%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzMDYyMjdjZmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>gregory</dc:creator></item><item><title><![CDATA[Go 言語という明快な選択 ― AI 時代に輝く、シンプルさの美学]]></title><description><![CDATA[Go 言語には、妥協を許さない明快さがあります。それは言語設計に込められた『簡潔さへの執念』が、まるで推敲を重ねた文章のように、無駄なく研ぎ澄まされているからです。

 明示的コードがもたらす保守性
Go 言語のコードには説明がほとんど不要です。
func fetchUserData(userID string) (*User, error) {
    user, err := db.GetUser(userID)
    if err != nil {
        return nil, fmt.Errorf("failed to fetch user %s: %w", user...]]></description><link>https://zenn.dev/jnst/articles/69191aa423f144</link><guid isPermaLink="true">https://zenn.dev/jnst/articles/69191aa423f144</guid><pubDate>Sat, 12 Jul 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PgK8jHfa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%2520%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E6%2598%258E%25E5%25BF%25AB%25E3%2581%25AA%25E9%2581%25B8%25E6%258A%259E%2520%25E2%2580%2595%2520AI%2520%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AB%25E8%25BC%259D%25E3%2581%258F%25E3%2580%2581%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%2595%25E3%2581%25AE%25E7%25BE%258E%25E5%25AD%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jnst%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5ZGY0MDdlOTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jnst</dc:creator></item><item><title><![CDATA[Rustでターミナル作業を革新！「tmux-rs」が拓く開発環境の自動化と効率化]]></title><description><![CDATA[
 Rustでターミナル作業を革新！「tmux-rs」が拓く開発環境の自動化と効率化

 概要
多くの開発者に愛用されているターミナルマルチプレクサtmuxに、このたびRustで実装された画期的なライブラリ「tmux-rs」が登場し、大きな注目を集めています。
tmux-rsは、Rustが持つ安全性と卓越したパフォーマンスを最大限に活かし、従来のtmux操作の枠を超えた柔軟な制御を可能にします。これにより、開発環境の自動化や複雑なワークフローの構築が、より堅牢かつ効率的に行えるようになります。
本記事では、tmux-rsの主な特徴や具体的な使い方、そして既存のtmux操作方法と比較した際...]]></description><link>https://zenn.dev/yusuke_sato_eh/articles/mcoizb85-rust-tmux</link><guid isPermaLink="true">https://zenn.dev/yusuke_sato_eh/articles/mcoizb85-rust-tmux</guid><pubDate>Sat, 12 Jul 2025 05:58:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0OkX4QFE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E4%25BD%259C%25E6%25A5%25AD%25E3%2582%2592%25E9%259D%25A9%25E6%2596%25B0%25EF%25BC%2581%25E3%2580%258Ctmux-rs%25E3%2580%258D%25E3%2581%258C%25E6%258B%2593%25E3%2581%258F%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%25A8%25E5%258A%25B9%25E7%258E%2587%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:CEO%2540Engineers%2520Hub%2520...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBXb3MtWm12c3Rhb0JVZXlmXzRDT2lJazNnVXFaaXVLNklIUnVjRmhIU3NKUVl3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>CEO@Engineers Hub Co. ,Ltd.</dc:creator></item><item><title><![CDATA[インフラエンジニアが作った『hawk』- なぜawkを再発明したのか？]]></title><description><![CDATA[
 TL;DR
AWSインフラエンジニアが、日常業務での「JSONやYAMLの構造把握」の課題を解決するために開発したCLIツールhawkの開発背景をお話しします。

💡 課題: AWS CLI出力やK8sマニフェストの構造把握に時間がかかる
🎯 解決: info機能による一発構造把握 + pandas風の統一クエリ言語
🚀 結果: 学習コストを下げながら、日常業務を効率化


 背景：インフラエンジニアの日常的な困りごと

 AWS CLIレスポンスとの格闘
aws ec2 describe-instances --instance-ids i-1234567890abcdef0 &g...]]></description><link>https://zenn.dev/kyonaka/articles/1905716e1514f0</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/1905716e1514f0</guid><pubDate>Fri, 11 Jul 2025 17:28:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Libt8aPa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2580%258Ehawk%25E3%2580%258F-%2520%25E3%2581%25AA%25E3%2581%259Cawk%25E3%2582%2592%25E5%2586%258D%25E7%2599%25BA%25E6%2598%258E%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NzcxODk2ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item></channel></rss>