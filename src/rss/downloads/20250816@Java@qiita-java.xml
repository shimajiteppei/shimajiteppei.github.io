<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/java/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/java/feed"/>
  <title>Javaタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでJavaタグが付けられた新着記事</description>
  <updated>2025-08-16T15:39:40+09:00</updated>
  <link>https://qiita.com/tags/java</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2067902</id>
    <published>2025-08-16T15:39:40+09:00</published>
    <updated>2025-08-16T15:39:40+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Yuki-max/items/8d0f2153cd41708eff7d"/>
    <url>https://qiita.com/Yuki-max/items/8d0f2153cd41708eff7d</url>
    <title>MyBatis のキャメルケース変換を有効化して createdAt / updatedAt が null になる問題を解決した話</title>
    <content type="text">① 結論
MyBatisの キャメルケース自動変換 を有効化することで、DBのスネークケースカラム (created_at / updated_at) をJavaのキャメルケースプロパティ (createdAt / updatedAt) に正しくマッピングできるようになり...</content>
    <author>
      <name>Yuki-max</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2067892</id>
    <published>2025-08-16T14:49:36+09:00</published>
    <updated>2025-08-16T14:50:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/19960417akiho/items/9bd2688aa5953ec87efb"/>
    <url>https://qiita.com/19960417akiho/items/9bd2688aa5953ec87efb</url>
    <title>Spring Boot の例外ハンドリング解説</title>
    <content type="text">Spring Boot の例外ハンドリング徹底解説（アノテーション編）

概要
Spring Boot で例外ハンドリングを行う際の主要アノテーションとその使い分けを図解で分かりやすく解説します。

例外ハンドリングの基本的な流れ

1. 例外が発生したときの処理の流れ
...</content>
    <author>
      <name>19960417akiho</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2067735</id>
    <published>2025-08-16T01:12:13+09:00</published>
    <updated>2025-08-16T01:12:13+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/sakurabajp/items/6bfdd1a0dfd93d95fa17"/>
    <url>https://qiita.com/sakurabajp/items/6bfdd1a0dfd93d95fa17</url>
    <title>MinecraftのPaperPluginでエンチャントテーブルに常にラピスラズリを配置する方法</title>
    <content type="text">まず、これは紛いもない某ゲーム (Annihilationって言うんですけど) の再現をしようとしているわけである。

エンチャントテーブルの設定をしたい！
まずInventoryOpenEventというイベントを使う。同時に、InventoryCloseEventを定義す...</content>
    <author>
      <name>sakurabajp</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2067488</id>
    <published>2025-08-15T14:21:36+09:00</published>
    <updated>2025-08-15T14:26:05+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/mirux/items/1ebdbd196dc7f5b651ec"/>
    <url>https://qiita.com/mirux/items/1ebdbd196dc7f5b651ec</url>
    <title>Scannerクラスを使わず、BufferedReaderとPrintWriterで標準入出力する</title>
    <content type="text">BufferedReaderクラスは標準入力を一括に読み取るため、Scannerよりも高速で読み取りが可能
今までScannerで入出力は十分であると思っていたが、atCoderやコーディングテストの出題で大規模データを扱う際に実行時間に間に合わないので、使えるようにしたい...</content>
    <author>
      <name>mirux</name>
    </author>
  </entry>
</feed>
