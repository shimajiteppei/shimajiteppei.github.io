<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-28T18:49:27+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073028</id>
    <published>2025-08-28T18:49:27+09:00</published>
    <updated>2025-08-28T18:49:27+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/59acacfca24ed405d54d"/>
    <url>https://qiita.com/nozomi2025/items/59acacfca24ed405d54d</url>
    <title>【デザインパターン】 デコレータパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
デコレータ（Decorator）パターン は、
既存のオブジェクトに動的に機能を追加できるようにする デザインパターンです。

解決する問題

継承で機能を拡張するとクラス数が爆発する
オブジェクトごとに「必要な機能だけ」柔軟に追加したい
動的に入れ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071740</id>
    <published>2025-08-28T09:19:58+09:00</published>
    <updated>2025-08-28T09:19:59+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tomori-ry/items/a971a383e3128f0f055f"/>
    <url>https://qiita.com/tomori-ry/items/a971a383e3128f0f055f</url>
    <title>【Android】MediaRecorderで録音機能を実装する</title>
    <content type="text">はじめに
Androidで簡易的な録音アプリの作り方を解説します。
録音機能を実装するには、Androidの標準クラスであるMediaRecorderかAudioRecordを利用します。
MediaRecorderは録音からファイル保存までをまとめて処理できる高レベルA...</content>
    <author>
      <name>tomori-ry</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2072583</id>
    <published>2025-08-27T17:31:22+09:00</published>
    <updated>2025-08-27T17:31:22+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/c2b75aea11a378f3adc3"/>
    <url>https://qiita.com/nozomi2025/items/c2b75aea11a378f3adc3</url>
    <title> 【デザインパターン】コンポジットパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
コンポジット（Composite）パターン は、
個々のオブジェクト（Leaf）と、それらをまとめたコンテナ（Composite）を同一視して扱えるようにする デザインパターンです。

解決する問題

階層構造（ツリー構造）を表現したい
「個」と「集...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2072074</id>
    <published>2025-08-26T16:08:32+09:00</published>
    <updated>2025-08-26T16:10:09+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/09b4217b91737f8cc3b8"/>
    <url>https://qiita.com/nozomi2025/items/09b4217b91737f8cc3b8</url>
    <title>【デザインパターン】ブリッジパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ブリッジ（Bridge）パターン は、
抽象（Abstraction）と実装（Implementation）を分離して、それぞれ独立に拡張可能にする デザインパターンです。

解決する問題

クラスの 多重継承の爆発（組み合わせ爆発） を防ぎたい
U...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
