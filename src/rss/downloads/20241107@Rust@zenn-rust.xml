<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 07 Nov 2024 11:49:55 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rust x WebAssembly x Yew でReactみたいに TODOアプリを作る]]></title><description><![CDATA[
 はじめに
最近、Rust x WebAssembly で React みたいなフロントエンドフレームワーク Yew の存在を知りました。調べてみると以下の記事が素晴らしかったので、まずは試してみて、プラスアルファで削除ボタンと API コールをやってみました。
以下の記事を試した後、API 呼び出しもしてみたいなぁと思った方に本記事も参考にしてもらえたら嬉しいです。
https://zenn.dev/azukiazusa/articles/rust-base-web-front-fremework-yew

 Yew って？
まず、Yew についてですが、Rust で React み...]]></description><link>https://zenn.dev/optimisuke/articles/c90bbedb4fd0f4</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/c90bbedb4fd0f4</guid><pubDate>Wed, 06 Nov 2024 13:49:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wWt0N_d9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520x%2520WebAssembly%2520x%2520Yew%2520%25E3%2581%25A7React%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AB%2520TODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[Rust x Actix Web x sqlx で TODO API]]></title><description><![CDATA[
 はじめに
Rust で TODO アプリようの API を作りました。

 ソースコード
https://github.com/optimisuke/hello-rust/tree/main/api
ここに置いてます。

 使ったもの
https://actix.rs/
Web フレームワークとして Actix Web を使いました。
Rust API で検索するとそこそこ情報出てくるので、そこそこ有名なのかなという印象です。
https://github.com/launchbadge/sqlx
まだ DB 周りは、sqlx で sqlite にアクセスしてます。

 ポイント

...]]></description><link>https://zenn.dev/optimisuke/articles/947d5208db2b0e</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/947d5208db2b0e</guid><pubDate>Wed, 06 Nov 2024 12:59:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---snrmmKJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520x%2520Actix%2520Web%2520x%2520sqlx%2520%25E3%2581%25A7%2520TODO%2520API%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[【作ったアプリの宣伝】ストレージの使用状況をサンバースト図により可視化するためのアプリを作成しました]]></title><description><![CDATA[
 作ったもの
https://github.com/fksms/DirWalker




 アプリの特徴


ストレージの使用状況をサンバースト図により可視化することができます。サンバースト図のアークを左クリックすると、サンバースト図やリストが自動的に更新されます。アークを右クリックすると、コンテキストメニューが開き、OSの標準ファイルマネージャーで該当のディレクトリを開いたり、該当のディレクトリ・ファイルのパスをクリップボードにコピーしたりすることが可能です。


デフォルトでは、OSのルートディレクトリをスキャンする仕様になっていますが、スキャンしたいディレクトリを指定することで...]]></description><link>https://zenn.dev/fksms/articles/2dbe1a2962ba51</link><guid isPermaLink="true">https://zenn.dev/fksms/articles/2dbe1a2962ba51</guid><pubDate>Wed, 06 Nov 2024 09:52:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V2opvyTe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E5%25AE%25A3%25E4%25BC%259D%25E3%2580%2591%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E4%25BD%25BF%25E7%2594%25A8%25E7%258A%25B6%25E6%25B3%2581%25E3%2582%2592%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E5%259B%25B3%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258A%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fksms%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MzEwZTU5N2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fksms</dc:creator></item><item><title><![CDATA[Rustできる人が考えていること[YouTube抜粋]]]></title><description><![CDATA[YouTubeで語っている人がいたのを抜粋
https://www.youtube.com/watch?v=Eojf_iTxNBw

Ruby出身の人はプログラミングを振る舞いの集合として捉えている傾向がある。「オブジェクトは振る舞いがあってデータはなんでもいい...」みたいな発送しがち。システムプログラミングではこの考え方はだめ。システムプログラミングではデータが大事。データを誰が持っているか、どこで初期化するか、どこでdropするかなどを中心に考えて、所有権を中心に設計を考える
振る舞いのことは忘れてデータに注目する。誰がものを管理するのか、どういうネスト関係にあるのか。
計算量も考...]]></description><link>https://zenn.dev/dotdotdot/articles/5f0962d12b9562</link><guid isPermaLink="true">https://zenn.dev/dotdotdot/articles/5f0962d12b9562</guid><pubDate>Wed, 06 Nov 2024 02:35:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1GQuXu23--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%258C%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%255BYouTube%25E6%258A%259C%25E7%25B2%258B%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B2%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNEJZZHdMWnZzcGtndzNQWGhhY0ViZ1p0WEgyODFVVjVteG9sdnotWUk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひげ</dc:creator></item><item><title><![CDATA[proc-macro-workshopの進め方（derive_builder編）]]></title><description><![CDATA[
 はじめに
Rustには、煩雑な記述を簡潔にできるマクロという言語機能があります。
マクロには大きく分けて


macro_rules!を用いたdeclarative（宣言的）マクロ
それ以外のprocedual（手続き的）マクロ

の2種類があり、手続き的マクロはさらに


#[derive]マクロ
attribute-likeマクロ
function-likeマクロ

の3種類に分かれます。
declarativeマクロの代表例としてはvec!マクロがあります。
#[derive]マクロの代表例にはDebugやSerializeなどがあります。構造体やenumの前に書くやつです。
...]]></description><link>https://zenn.dev/taro137/articles/bb45823b83d354</link><guid isPermaLink="true">https://zenn.dev/taro137/articles/bb45823b83d354</guid><pubDate>Mon, 04 Nov 2024 12:09:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--w9iw6sWv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:proc-macro-workshop%25E3%2581%25AE%25E9%2580%25B2%25E3%2582%2581%25E6%2596%25B9%25EF%25BC%2588derive_builder%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlOGE5ZGM1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[cargoでサブコマンドを簡単に作る]]></title><description><![CDATA[
 概要
Cargoのサブコマンドとして自作のコマンドを実行する方法を示します。Cargoを使ったプロジェクト内で簡単にカスタムコマンドを呼び出せるようになります。
今回は、src/bin/以下にあるファイルをfzfを使って選択して実行するコマンド(cargo-select)を自作します。


 手順
$HOME/.cargo/bin/以下にcargo-から始まる実行可能なファイルを置いておけばcargoのサブコマンドとして認識されます。

 1. 実行形式のファイルを作成する
src/bin/*.rsファイルをfzfで選択し、cargo run --binで実行するスクリプトを作成しま...]]></description><link>https://zenn.dev/yosaka/articles/yosaka-my-cargo-subcommand-20241104</link><guid isPermaLink="true">https://zenn.dev/yosaka/articles/yosaka-my-cargo-subcommand-20241104</guid><pubDate>Mon, 04 Nov 2024 10:37:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PoUUGtA---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yosaka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pCTWNUNV9CZ2FaNHZLVG1wNlFiR0lSY2lMclVseVA4N0stdDVzPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yosaka</dc:creator></item><item><title><![CDATA[次世代 PHP 静的解析リンター `Fennec`]]></title><description><![CDATA[$ fennec help
--------------------------------------------------------------------------
  /\   /\            |
 //\\_//\\     ____  | Fennec 🦊 is an all-in-one, oxidized PHP toolchain,
 \_     _/    /   /  | built to handle everything from static analysis and
  / * * \    /^^^]   | refactoring t...]]></description><link>https://zenn.dev/top/articles/34bac61119eee4</link><guid isPermaLink="true">https://zenn.dev/top/articles/34bac61119eee4</guid><pubDate>Mon, 04 Nov 2024 04:16:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--veUFgs2n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AC%25A1%25E4%25B8%2596%25E4%25BB%25A3%2520PHP%2520%25E9%259D%2599%25E7%259A%2584%25E8%25A7%25A3%25E6%259E%2590%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%2520%2560Fennec%2560%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:top%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgxYzUyMmRlMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>top</dc:creator></item><item><title><![CDATA[Tauri 2.0をフロント(js側)含めてVSCodeでデバッグしてみる]]></title><description><![CDATA[環境構築については下記記事で別途まとめています。
https://zenn.dev/playree/articles/966ebafc3d11f8
Tauri公式にも一応手順がまとめられています。
https://v2.tauri.app/develop/debug/vscode/
基本的にはTauri公式のサンプルを元にしていますが、自分なりに修正＆追加などを行っています。

 VSCodeプラグイン
下記プラグインが必要なので、まずはVSCodeに追加しておきます。
vscode-lldb

 最終的な設定ファイル
設定さえ分かればOKな方向けに、まずは設定を載せておきます。
内容の...]]></description><link>https://zenn.dev/playree/articles/7700251ea74f2f</link><guid isPermaLink="true">https://zenn.dev/playree/articles/7700251ea74f2f</guid><pubDate>Mon, 04 Nov 2024 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8oBO-vSB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2582%2592%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%2528js%25E5%2581%25B4%2529%25E5%2590%25AB%25E3%2582%2581%25E3%2581%25A6VSCode%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:playree%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzc1OVNMOTM4THJqcFl0OUxnSUZKS2NlYThMTVEwbkwyS3oteFBxbUcyQTB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>playree</dc:creator></item><item><title><![CDATA[KotlinとGoをメインで使うエンジニアから見たRust]]></title><description><![CDATA[業務ではKotlin、個人開発ではGoを中心に開発をしているエンジニアがRustに入門して感じた違いをまとめてみようと思います。
Rustに関してはまだまだ学習中なので見当違いな内容があればご指摘ください。

 各言語の違い

 表現力
Rustの言語としての表現力について一言で述べると、「丁度いい」だと思います。
KotlinとGoと比較してみます。

 Kotlin
Kotlinは非常に表現力が高いです。
例えばCollections(List・Map・Set・etc...)には欲しいと思ったメソッドは大体用意されています。例えば、filter、map、reduceといった高階関数や...]]></description><link>https://zenn.dev/k1e1n04/articles/56bb19328addbd</link><guid isPermaLink="true">https://zenn.dev/k1e1n04/articles/56bb19328addbd</guid><pubDate>Sun, 03 Nov 2024 06:36:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rko5UaRZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25A8Go%25E3%2582%2592%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2581%259FRust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ken%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkR6S0JTWW9ISDJ0Y2c5Z2wzSDlLYXJZcjlHTTlBRHFjcEhPRWM3bDQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ken</dc:creator></item><item><title><![CDATA[【Go&Rust】インターフェース(トレイト)を使用する上での違いとして考えていること]]></title><description><![CDATA[こんにちは。
私は最近業務ではGoを書いていて、プライベートではRustを書くことが多いです。
今回は、これらの言語における様々な違いの中でも、インターフェース(Rustではトレイト)に焦点を当て、個人的に印象深い点をまとめます。

 前提(それぞれの実装例)
まずは、動物を例に用いて、両者を使った簡単な実装例を以下に示します。

 Go
type Animal interface {
    Speak() string
}

type Dog struct {}
func (d *Dog) Speak() string {
    return "Woof!"
}

type Swa...]]></description><link>https://zenn.dev/penysho/articles/eeed7116c666e0</link><guid isPermaLink="true">https://zenn.dev/penysho/articles/eeed7116c666e0</guid><pubDate>Sun, 03 Nov 2024 03:29:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZnNCoWG4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Go%2526Rust%25E3%2580%2591%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%2528%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%2529%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E4%25B8%258A%25E3%2581%25A7%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2598%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZWRiMmQ4NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こじろう</dc:creator></item><item><title><![CDATA[Rustを使ってサーバーを構築する！]]></title><description><![CDATA[nodejsでもやったから次はRustどと思いました
環境:
OS: MacOS
editor: vscode
!
同じWiFiにつながってないと他のパソコンや端末からアクセスできません！


 デレクトリ
.
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── static
    └── index.html

3 directories, 4 files

 コード
cargo new server
cargo.toml
cargo.toml
[package]
name = "Server"
version = "0...]]></description><link>https://zenn.dev/nyanchu_program/articles/dd64ab605367ca</link><guid isPermaLink="true">https://zenn.dev/nyanchu_program/articles/dd64ab605367ca</guid><pubDate>Sun, 03 Nov 2024 01:43:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XEf8yJv9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyanchu%2520-%2520okabe%2Cx_90%2Cy_121/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyanchu - okabe</dc:creator></item><item><title><![CDATA[Rustにおけるメソッドの第一引数にて&selfとselfどちらを使用すべきか]]></title><description><![CDATA[こんにちは。
今回はRustを勉強中の開発者が一度は考えるであろう、メソッドの第一引数にて&amp;selfとselfどちらを使用すべきか、についてまとめておきます。

 結論

基本的には&amp;selfを使って実装する。
インスタンスの所有権を奪って、新しい何かに変換して返却するような場合にはselfを活用する。

https://doc.rust-jp.rs/book-ja/ch05-03-method-syntax.html#メソッドを定義する

 そもそもRustにおけるメソッドとは

メソッドは、構造体(enumやトレイトも)のインスタンスに紐づけて定義される関数と言える。...]]></description><link>https://zenn.dev/penysho/articles/2edf59b0c1969d</link><guid isPermaLink="true">https://zenn.dev/penysho/articles/2edf59b0c1969d</guid><pubDate>Sat, 02 Nov 2024 09:41:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UY72RLnl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AE%25E7%25AC%25AC%25E4%25B8%2580%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AB%25E3%2581%25A6%2526self%25E3%2581%25A8self%25E3%2581%25A9%25E3%2581%25A1%25E3%2582%2589%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2581%25B9%25E3%2581%258D%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2598%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZWRiMmQ4NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こじろう</dc:creator></item><item><title><![CDATA[Rust で仮想言語のインタプリタを作る]]></title><description><![CDATA[
 概要
Rust を使って自分で定義した仮想言語のインタプリタを作っているので,
途中経過として, 四則演算, 関数の定義と呼び出しを処理の方法をまとめます.
C++ は普段から触っているけど, Rust を始めて触るので簡単そうな?インタプリタを作って見ました.
作ったコードはこちら
https://github.com/nagato0614/NagatoInterpreter

 仮想言語の概要
対応しているのは

四則演算とmod

+, -, *, /, %


比較演算

==, !=, &lt;, &lt;=, &gt;, &gt;=


変数への代入

=


関数

f...]]></description><link>https://zenn.dev/kaito_73519/articles/3dce56712cc430</link><guid isPermaLink="true">https://zenn.dev/kaito_73519/articles/3dce56712cc430</guid><pubDate>Fri, 01 Nov 2024 02:46:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bBeBXW0J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E4%25BB%25AE%25E6%2583%25B3%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kaito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2YzU4NDk4MjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kaito</dc:creator></item><item><title><![CDATA[uvのデバッグ環境をVS Codeで構築する]]></title><description><![CDATA[
 TL;DR
Rustで書かれたPythonパッケージマネージャーuvのデバッグ環境をVisual Studio Codeで構築する方法を紹介します。

 動機
uvの挙動を詳しく調査したいケースがあります。特に、ブレークポイントを打って動作を確認したい場合があります。

 すること

uvのリポジトリをフォークします。
VS Codeに必要な拡張機能をインストールします。
デバッグ設定ファイル（launch.json）を作成します。
デバッグを実行します。


 やり方

 1. リポジトリのフォーク
GitHubでuvのリポジトリをフォークし、ローカルにクローンします。

 2. ...]]></description><link>https://zenn.dev/hiroga/articles/vscode-debugging-for-uv-rust</link><guid isPermaLink="true">https://zenn.dev/hiroga/articles/vscode-debugging-for-uv-rust</guid><pubDate>Fri, 01 Nov 2024 00:28:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4JISM9Uk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:uv%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592VS%2520Code%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiroga%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pfZHF2VHk5OFdpTG1EZ1Q1Ry1jLVNmWjRwaEdCcGdncGVKSjhqUzhzPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiroga</dc:creator></item><item><title><![CDATA[早くて安全、以外のRustの好きなところ]]></title><description><![CDATA[こんにちは。Rustを愛し、Rustに愛された男です。
BoostDraftでは、一部のシステムでRustで使用しています。そこそこQPSのあるAPIサーバーや、そこそこ量のあるデータの解析などです。
Wikipediaでは、Rustの説明として以下のような一文から始まっています。

Rust（ラスト）は、性能、メモリ安全性、安全な並行性を目指して設計された

引用元：Rust (プログラミング言語)
また公式サイトでは、Rustを使う理由として「パフォーマンス」「信頼性」「生産性」が挙げられています。
早くて安全！にフォーカスされがちなRustですが、僕がRustを使う一番の理由は「生...]]></description><link>https://zenn.dev/boostdraft/articles/31408406d1d867</link><guid isPermaLink="true">https://zenn.dev/boostdraft/articles/31408406d1d867</guid><pubDate>Thu, 31 Oct 2024 07:44:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rw7Mg8lV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2597%25A9%25E3%2581%258F%25E3%2581%25A6%25E5%25AE%2589%25E5%2585%25A8%25E3%2580%2581%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%25AERust%25E3%2581%25AE%25E5%25A5%25BD%25E3%2581%258D%25E3%2581%25AA%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yuta%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyMzNmMWZhZGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BoostDraft%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuta</dc:creator></item><item><title><![CDATA[Rust で学ぶクォータニオン]]></title><description><![CDATA[数の世界は、自然数に始まって実数、複素数と広がっていきます。この先に、さらにクォータニオンという数があります。本記事では、このクォータニオンについて基本的な事柄を解説し、Rustによる計算のしかたを述べます。
なお、クォータニオンは日本語で「四元数」と呼びます。数学の世界では日本語で呼ぶことがほとんどです。ただ、コンピューターの世界では「クォータニオン」と呼ぶことが多いです。本記事もその慣習にあわせています。

 クォータニオンとは
クォータニオンとは、次の形で定義される数です。ここで、w、x、y、z は実数です。

\mathtt{i}、\mathtt{j}、\mathtt{k} は虚...]]></description><link>https://zenn.dev/yumemi_inc/articles/quaternion-with-rust</link><guid isPermaLink="true">https://zenn.dev/yumemi_inc/articles/quaternion-with-rust</guid><pubDate>Tue, 29 Oct 2024 23:42:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4f57RKvs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2582%25AF%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:USAMI%2520Kosuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MzAxMTgwMzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%2586%25E3%2582%2581%25E3%2581%25BF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzNjkyMWMyN2YuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>USAMI Kosuke</dc:creator></item><item><title><![CDATA[AnchorでSolanaのProgramを作ってみた]]></title><description><![CDATA[AnchorでSolanaのProgramを作ってみました。
https://github.com/hirokisan/solprofile
所有するアカウントのプロフィールを管理するProgramです。
所有するアカウントに紐づくプロフィールをPDA(Program Derived Address)として作成し、
プロフィール情報としてnameを保持します。
ローカル環境で動かす際の手順はREADMEに記載の通りです。
Programの利用者側の実装例はexamples/solprofileに用意しています。
テストはtestsに用意してGitHub Actionsで実行される形にして...]]></description><link>https://zenn.dev/hirokisan/articles/a52acfa93f7e82</link><guid isPermaLink="true">https://zenn.dev/hirokisan/articles/a52acfa93f7e82</guid><pubDate>Tue, 29 Oct 2024 08:06:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yHxvlxYj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Anchor%25E3%2581%25A7Solana%25E3%2581%25AEProgram%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hirokisan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NjYjAzYWNkYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hirokisan</dc:creator></item><item><title><![CDATA[October 2024 Rust Melbourne Meetupで発表しました]]></title><description><![CDATA[
英語で発表した

kawarimidoll, 2024-10-28

2024/10/24に開催されたOctober 2024 Rust Melbourne Meetupで「My first practice of Rust」というタイトルでスライド発表をしました。
https://www.meetup.com/rust-melbourne/events/304034898/
こちらにスライドを公開しています↓
https://docs.google.com/presentation/d/197KjWTTnq8Qqlfy3DBUPw2Xr4maRhrc0I2rJ8qvrvzs/edit...]]></description><link>https://zenn.dev/kawarimidoll/articles/da74ebc5328112</link><guid isPermaLink="true">https://zenn.dev/kawarimidoll/articles/da74ebc5328112</guid><pubDate>Mon, 28 Oct 2024 10:12:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SgejJuKN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:October%25202024%2520Rust%2520Melbourne%2520Meetup%25E3%2581%25A7%25E7%2599%25BA%25E8%25A1%25A8%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kawarimidoll%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzNzlhYzhkODYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kawarimidoll</dc:creator></item><item><title><![CDATA[[Wasmtime]Rustのwasm32-wasip2でHTTPリクエストクライアントとWebサーバーを動かす(waki)]]></title><description><![CDATA[
 はじめに
https://zenn.dev/tkithrta/scraps/79805811a77a07
Rust Version 1.82.0 (2024-10-17)にPromote wasm32-wasip2 to Tier 2.がきたのでaxumをWASMで動かすために最近様々な情報を集めています。
Tokioのさらに低レイヤーにあるmio(Metal I/O)がwasm32-wasip2に対応していないのでほとんどのWebアプリケーションフレームワークは動きませんが、WASI専用のHTTPリクエストクライアント&amp;Webサーバーライブラリのwakiがwasm32-wa...]]></description><link>https://zenn.dev/tkithrta/articles/70f0489ddcfe30</link><guid isPermaLink="true">https://zenn.dev/tkithrta/articles/70f0489ddcfe30</guid><pubDate>Sun, 27 Oct 2024 10:28:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RJoyx7oh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BWasmtime%255DRust%25E3%2581%25AEwasm32-wasip2%25E3%2581%25A7HTTP%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A8Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2528...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25BB%2592%25E3%2583%25B0%25E6%25A8%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NDRlMTA4ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>黒ヰ樹</dc:creator></item><item><title><![CDATA[RustLadies第2回目を開催しました！]]></title><description><![CDATA[
 3行にまとめると

The Bookの2章までやりました！（数当てゲームの完成🙌）
雑談をしながら、気になることは引き続きその場で調べながら進めました！
次回はRustのもっと詳しい概念をみんなで進めます！


 実際やったこと
今回はThe Bookの2章まで進めるのを目標に行いました。
https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html
Rustを書いたことがある皆様なら一度はやったであろう「数当てゲーム」がある章です。
The Bookのコードを写経をしつつ、
🤔「use std::io::std...]]></description><link>https://zenn.dev/2323_code/articles/76670293c77551</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/76670293c77551</guid><pubDate>Sun, 27 Oct 2024 08:16:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P3gIUrRP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RustLadies%25E7%25AC%25AC2%25E5%259B%259E%25E7%259B%25AE%25E3%2582%2592%25E9%2596%258B%25E5%2582%25AC%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyZGQ3OTI1ODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item></channel></rss>