<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 30 Apr 2025 12:04:32 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Re:Zero Spring Boot実践#1 WebBlog開発#4 ThreadLocal]]></title><description><![CDATA[
 ThreadLocal とは
各スレッドに独立した変数のコピーを持たせることで、スレッドごとに安全にデータを保持する仕組み。

 なぜ必要か
通常、複数のスレッドが同じ変数を共有すると、データ競合や予期しない動作を引き起こすことがある。ThreadLocalを使えば、スレッドごとに「専用の変数領域」が与えられるため、他のスレッドに影響されることなく安全にデータを扱える。

 例
public class ThreadLocalTest {
private static ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt...]]></description><link>https://zenn.dev/willyang/articles/92a0856133f3fa</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/92a0856133f3fa</guid><pubDate>Wed, 30 Apr 2025 08:50:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3jad0yA_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253AZero%2520Spring%2520Boot%25E5%25AE%259F%25E8%25B7%25B5%25231%2520WebBlog%25E9%2596%258B%25E7%2599%25BA%25234%2520ThreadLocal%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[Re:Zero Spring Boot実践#1 WebBlog開発#3 ユーザ情報取得]]></title><description><![CDATA[
 機能一覧※再掲

ユーザ
1.1 新規登録
1.2 ログイン
1.3 ユーザ情報取得   ← 本記事の内容
1.4 ユーザ情報更新
1.5 アバター画像変更
1.6 パスワード変更
記事カテゴリ
略
記事管理
略


 API設計

 1.2 ログイン

 1.2.1 基本情報

リクエストパス：/user/info
リクエスト方式：GET
インターフェース概要：このインターフェースはログインに使用される。


 1.2.2 リクエストパラメータ
リクエストパラメータ形式：x-www-form-urlencoded
リクエストデータ例：
```json
{
    "code": 0...]]></description><link>https://zenn.dev/willyang/articles/cbfc44bc891b18</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/cbfc44bc891b18</guid><pubDate>Wed, 30 Apr 2025 08:09:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mcpma2-j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253AZero%2520Spring%2520Boot%25E5%25AE%259F%25E8%25B7%25B5%25231%2520WebBlog%25E9%2596%258B%25E7%2599%25BA%25233%2520%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E6%2583%2585%25E5%25A0%25B1%25E5%258F%2596%25E5%25BE%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[Java の環境構築方法(M1 Mac,Java 21)]]></title><description><![CDATA[
 はじめに
こんにちは、クラウドエースの許です。
今回は Java 21 の環境構築方法を紹介していきます。
Java の環境構築の記事は意外と少ない(執筆主調べ)と感じたので、こちらを参考に構築していただければと思います。

 前提環境

環境: Mac M1Pro
IDE: IntelliJ 2025.1 (Visual Studio Code でも問題ない)
JDK: Java 21
shell: zsh
distribution: Temurin


 環境構築手順
Java の環境構築は意外と簡単にできます。
以下の 3 ステップで完了します。


ディストリビューションのイ...]]></description><link>https://zenn.dev/cloud_ace/articles/9a2a3bc8c6d5fe</link><guid isPermaLink="true">https://zenn.dev/cloud_ace/articles/9a2a3bc8c6d5fe</guid><pubDate>Wed, 30 Apr 2025 07:48:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u7hWuIlX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E6%2596%25B9%25E6%25B3%2595%2528M1%2520Mac%252CJava%252021%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A6%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B9%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2OGMwYmM4MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クラウドエース株式会社</dc:creator></item><item><title><![CDATA[[Javaの基礎]配列について]]></title><description><![CDATA[
 はじめに
ここではJavaの配列ついてまとめています。

 配列とは
配列は同じ型の複数の値を一つにまとめて扱うためのデータ構造です。配列は固定長であり、一度作成するとサイズを変更できません。配列自体はオブジェクトであり、ヒープ領域に格納されます。

 宣言方法と初期化
宣言の方法は２つあります。
以下のようにC言語のようにも宣言できますが推奨されていません。
int[] numbers;      // 推奨される書き方
int numbers[];      // C言語スタイル、許容される
!
Javaでは「型の表現は一貫性と可読性重視」という設計思想があるため、C言語のような...]]></description><link>https://zenn.dev/kasai/articles/7ec86c23fa07d6</link><guid isPermaLink="true">https://zenn.dev/kasai/articles/7ec86c23fa07d6</guid><pubDate>Wed, 30 Apr 2025 06:09:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Zb-oLedY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%255D%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kasai%2520Ukyo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlYjgwMzQ4N2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kasai Ukyo</dc:creator></item><item><title><![CDATA[Re:Zero Spring Boot実践#1 WebBlog開発#3 ユーザログイン]]></title><description><![CDATA[
 機能一覧※再掲

ユーザ
1.1 新規登録
1.2 ログイン  ← 本記事の内容
1.3 ユーザ情報取得
1.4 ユーザ情報更新
1.5 アバター画像変更
1.6 パスワード変更
記事カテゴリ
略
記事管理
略


 API設計

 1.2 ログイン

 1.2.1 基本情報

リクエストパス：/user/login
リクエスト方式：POST
インターフェース概要：このインターフェースはログインに使用される。


 1.2.2 リクエストパラメータ
リクエストパラメータ形式：x-www-form-urlencoded
リクエストパラメータ説明：



パラメータ名
説明
型
必須
備...]]></description><link>https://zenn.dev/willyang/articles/5c647adcb672d6</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/5c647adcb672d6</guid><pubDate>Wed, 30 Apr 2025 06:02:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D-S3lbs3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253AZero%2520Spring%2520Boot%25E5%25AE%259F%25E8%25B7%25B5%25231%2520WebBlog%25E9%2596%258B%25E7%2599%25BA%25233%2520%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[[Javaの基礎]型について]]></title><description><![CDATA[
 はじめに
ここではJavaにおけるデータ型についてまとめています。

 データ型
Javaで用意されている基本データ型(プリミティブ型)は以下のようになってます。異なる型への再代入はできません。



データ型
値




byte
8ビット整数 (-128～127)


short
16ビット整数 (-32,768～32,767)


int
32ビット整数 (-2,147,483,648～2,147,483,647)


long
64ビット整数 (-9,223,372,036,854,775,808～9,223,372,036,854,775,807)


float
32ビッ...]]></description><link>https://zenn.dev/kasai/articles/5cf48ca57ea783</link><guid isPermaLink="true">https://zenn.dev/kasai/articles/5cf48ca57ea783</guid><pubDate>Wed, 30 Apr 2025 03:49:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YUxYTBdv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%255D%25E5%259E%258B%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kasai%2520Ukyo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlYjgwMzQ4N2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kasai Ukyo</dc:creator></item><item><title><![CDATA[[Android] JavascriptInterface の引数に渡された undefined はどう扱われる?]]></title><description><![CDATA[
 はじめに
Android 側:
class MyInterface {
    @JavascriptInterface
    fun greet(name: String?) { ... }
}
JavaScript 側:
myInterface.greet(undefined);
このような場合、Android 側の name: String? にはどのような値が渡るでしょうか？

 結論
引数が、

Java の byte, char, short, int, long, float, double に相当する型の場合: 0

Java の boolean に相当する型の場合...]]></description><link>https://zenn.dev/omtians9425/articles/2025-04-29_android-js-interface-nullability</link><guid isPermaLink="true">https://zenn.dev/omtians9425/articles/2025-04-29_android-js-interface-nullability</guid><pubDate>Mon, 28 Apr 2025 15:59:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5UCTWaUM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BAndroid%255D%2520JavascriptInterface%2520%25E3%2581%25AE%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AB%25E6%25B8%25A1%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%2520undefined%2520%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%2586%25E6%2589%25B1%25E3%2582%258F%25E3%2582%258C%25E3%2582%258B%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:korii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzYTdjNDlkMmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>korii</dc:creator></item><item><title><![CDATA[Re:Zero Spring Boot実践#1 WebBlog開発#2 Spring Validation]]></title><description><![CDATA[
 Spring Validationとは
Spring Validation（スプリングバリデーション）とは、
Spring Framework、特にSpring MVCやSpring Bootで、
**入力値チェック（バリデーション）**を簡単に行うための仕組みです。
ざっくりまとめると、



項目
説明




目的
フォーム入力やAPIリクエストのデータが正しいか検証するため


主なやり方
アノテーション（@NotNull, @Size, @Emailなど）を使う


使う技術
javax.validation (Jakarta Bean Validation) と Hibe...]]></description><link>https://zenn.dev/willyang/articles/f4c7ff0b5ae48d</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/f4c7ff0b5ae48d</guid><pubDate>Mon, 28 Apr 2025 08:53:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rq1bc0IL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253AZero%2520Spring%2520Boot%25E5%25AE%259F%25E8%25B7%25B5%25231%2520WebBlog%25E9%2596%258B%25E7%2599%25BA%25232%2520Spring%2520Validation%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[Re:Zero Spring Boot実践#1 WebBlog開発#1 ユーザ作成]]></title><description><![CDATA[
 機能一覧※再掲

ユーザ
1.1 新規登録  ← 本記事の内容
1.2 ログイン
1.3 ユーザ情報取得
1.4ユーザ情報更新
1.5 アバター画像変更
1.6 パスワード変更
記事カテゴリ
略
記事管理
略


 API設計

 1.基本情報
リクエストパス：/user/register
リクエストメソッド：post
説明：新規ユーザ登録用API

 2.リクエストパラメータ
パラメータフォーマット：x-www-form-urlencoded
リクエストパラメータ説明：



パラメータ名
説明
型
必須か
備考




username
ユーザー名
string
必須
5～16文...]]></description><link>https://zenn.dev/willyang/articles/6917d1df1bbd7a</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/6917d1df1bbd7a</guid><pubDate>Mon, 28 Apr 2025 06:17:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8lZwdoz8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253AZero%2520Spring%2520Boot%25E5%25AE%259F%25E8%25B7%25B5%25231%2520WebBlog%25E9%2596%258B%25E7%2599%25BA%25231%2520%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[Javaエンジニアの皆様、Kotlinいかがですか？（１）]]></title><description><![CDATA[
 はじめに
突然ですが、Kotlin（ことりん）というプログラミング言語をご存じでしょうか。
私はここ約1年半、サーバサイドエンジニアとしてKotlinを使って開発をしてきました。
それまではJavaでの開発がメインで、Kotlin何それ？という状態でプロジェクトに参画しましたが、
今では「Javaにはもう戻れないな・・・」と思えるほど、Kotlinの良さを実感しています。
要約すると 「めっちゃ簡潔！」「本質的なことに集中できる！」 に尽きます。
ここから3記事で、そう言わせる理由を語っていこうと思います。
1. （本記事）Null安全である
2. 検査例外チェックからの解放
3. ...]]></description><link>https://zenn.dev/agent_grow/articles/3098415c71f6ed</link><guid isPermaLink="true">https://zenn.dev/agent_grow/articles/3098415c71f6ed</guid><pubDate>Sun, 27 Apr 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wl1E739W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E7%259A%2586%25E6%25A7%2598%25E3%2580%2581Kotlin%25E3%2581%2584%25E3%2581%258B%25E3%2581%258C%25E3%2581%25A7%25E3%2581%2599%25E3%2581%258B%25EF%25BC%259F%25EF%25BC%2588%25EF%25BC%2591%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:RN%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkMDljNjAyYTYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Agent%2520Grow%2520Tech%2520Notes%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTFFVRDNtU0t4UDFNd21kSEo0Um1Zblgwd2Fwc3VBMnB2eGVqb3NrdWdpSXY1dG1RPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>RN</dc:creator></item><item><title><![CDATA[Lombok @SneakyThrowの挙動]]></title><description><![CDATA[
 lombokの@SneakyThrowの挙動について

 はじめに
Springなどでよくつかわれる便利なlombokライブラリの@SneakyThrowについて、
どのような挙動をするのか解説します。
@SneakyThrowは検査例外をcatchしなくてもよくするために使われるアノテーションです。

 @SneakyThrowとは
@SneakyThrowを使うと例外をスローするメソッドを呼び出す際に、例外をcatchしなくてもよくなります。
    @SneakyThrows
    public void throwException() {
        throw ne...]]></description><link>https://zenn.dev/wanderer_eel/articles/efe9585e51f98c</link><guid isPermaLink="true">https://zenn.dev/wanderer_eel/articles/efe9585e51f98c</guid><pubDate>Sun, 27 Apr 2025 05:09:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--70NiV1Zo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Lombok%2520%2540SneakyThrow%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2581%25AA%25E3%2581%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhOTk3Y2E1MzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うなぎ</dc:creator></item><item><title><![CDATA[Re:ゼロから始めるSpring Boot #8 カスタムスターター]]></title><description><![CDATA[
 カスタムスターターとは？

 **カスタムスターター（Custom Starter）**とは、
Spring Bootアプリケーションに簡単に機能を追加できる、パッケージ化されたライブラリのこと。
普通のスターター（例：spring-boot-starter-web）と同じように、

依存関係（ライブラリ群）
自動設定（AutoConfiguration）
をまとめた部品・機能である。


 カスタムスターターのユースケース・必要性
なぜカスタムスターターを作るのか？
代表的な場面はこんな感じです。
✅ よくあるユースケース

社内共通の機能（ログ設定、認証認可設定など）をまとめる
...]]></description><link>https://zenn.dev/willyang/articles/e9e05ecc17f15b</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/e9e05ecc17f15b</guid><pubDate>Sat, 26 Apr 2025 11:37:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zyUOlDZ2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253A%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BSpring%2520Boot%2520%25238%2520%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[Re:ゼロから始めるSpring Boot #7 AutoConfigureの仕組み]]></title><description><![CDATA[
 Spring BootにおけるAutoConfigurationの仕組みのまとめ


メインスタータークラスに@SpringBootApplicationアノテーションが付与されており、このアノテーションは@EnableAutoConfigurationアノテーションを内包しています。


@EnableAutoConfiguration アノテーションはさらに@Import アノテーションを内包しており、AutoConfigurationImportSelectorクラスをインポートしています。


AutoConfigurationImportSelector クラスはselec...]]></description><link>https://zenn.dev/willyang/articles/fb48dd0364e740</link><guid isPermaLink="true">https://zenn.dev/willyang/articles/fb48dd0364e740</guid><pubDate>Sat, 26 Apr 2025 06:48:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KwZZXcSp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Re%253A%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BSpring%2520Boot%2520%25237%2520AutoConfigure%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Willyang%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyNDZhMDk5NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Willyang</dc:creator></item><item><title><![CDATA[AWS ECSからVertex AIを呼び出す; Workload Identityは使用しない]]></title><description><![CDATA[
 概要

サービスアカウントキーファイルの中身をAWS Secret Managerに登録する
Secret Managerの値をConfigurationPropertiesに紐付ける
ByteArrayInputStreamに変換し、Credentialsを作成
Credentialsを使用してサービスアカウントとして認証、Vertex AIを呼び出す


 1. Google Cloudの準備

 1.1 サービスアカウントを作成、JSONキーファイルをダウンロード
公式ドキュメントに従い、作業を行う。
https://cloud.google.com/iam/docs/serv...]]></description><link>https://zenn.dev/hayato8739/articles/call-vertex-ai-from-aws-ecs</link><guid isPermaLink="true">https://zenn.dev/hayato8739/articles/call-vertex-ai-from-aws-ecs</guid><pubDate>Fri, 25 Apr 2025 15:08:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yh2JxvoZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520ECS%25E3%2581%258B%25E3%2582%2589Vertex%2520AI%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%253B%2520Workload%2520Identity%25E3%2581%25AF%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yado%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwNzlhODMwYjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yado</dc:creator></item><item><title><![CDATA[Springを理解するためのスレッド＆スレッドローカル入門]]></title><description><![CDATA[この記事では、Javaのスレッドについて解説します。
普段Webアプリを開発する際にはあまり意識しませんが、Tomcatなどのアプリケーションサーバーが複数のリクエストを同時に受け付ける際は、1つのリクエストに対して1つのスレッドを割り当てて処理を実行しています。
スレッドローカルは、Spring SecurityやSpringトランザクションが内部的に使っている、スレッドごとの値の保存場所です。
自分でスレッドを使ったプログラムを書く機会は少ないと思いますが、アプリケーションサーバーやSpringの内部の理解するには欠かせない知識です。

 環境

JDK 21
logback-cla...]]></description><link>https://zenn.dev/masatoshi_tada/articles/d6e57c8a0247c7</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/d6e57c8a0247c7</guid><pubDate>Fri, 25 Apr 2025 02:23:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JqfDZYY3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25EF%25BC%2586%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Javaの「インポート」をざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaのインポートについてざっくり知りたい方


 目次
1. 他パッケージへのアクセス方法
2. インポートの方法
3. オンデマンドインポー...]]></description><link>https://zenn.dev/wakinoza/articles/d64024cfcb69f7</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/d64024cfcb69f7</guid><pubDate>Fri, 25 Apr 2025 01:38:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PvUh1wiG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2580%258D%25E3%2582%2592%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[Javaの「パッケージ」をざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java Silver試験を勉強中の方
Javaのパッケージの規則についてざっくり知りたい方


 目次
1. パッケージとは
2. パッケージの構造
3. 完全修飾クラス名
4. パッ...]]></description><link>https://zenn.dev/wakinoza/articles/23b648416ae9a1</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/23b648416ae9a1</guid><pubDate>Thu, 24 Apr 2025 07:38:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iwKj_TrK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2580%258D%25E3%2582%2592%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA["" '' ` の違い完全整理：Java・JavaScript・Pythonの文字列リテラル文化を横断解説！]]></title><description><![CDATA[
 テンプレートリテラルとは？


定義： 文字列中に ${式} や {式} を埋め込める構文

JS： `Hello ${name}`


Python： f"Hello {name}"


特に "（ダブルクオート）"、'（シングルクオート）'、`（バッククオート）` の違いは、  Java / JavaScript / Python で大きく扱いが異なります。


 ✅ Javaの場合



記号
用途
型
例
補足




""
文字列
String
"hello"
複数文字OK


''
単一文字
char
'h'
1文字のみ


`
×
―
―
存在しない構文、書けばエラー
...]]></description><link>https://zenn.dev/lia/articles/9fb5bc6a60918d</link><guid isPermaLink="true">https://zenn.dev/lia/articles/9fb5bc6a60918d</guid><pubDate>Tue, 22 Apr 2025 18:17:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u-9Lfyym--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2522%2522%2520%2527%2527%2520%2560%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E5%25AE%258C%25E5%2585%25A8%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%259AJava%25E3%2583%25BBJavaScript%25E3%2583%25BBPython%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2583%25AA%25E3%2583%2586%25E3%2583%25A9%25E3%2583%25AB%25E6%2596%2587%25E5%258C%2596%25E3%2582%2592%25E6%25A8%25AA%25E6%2596%25AD%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2581%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5ZmExMWM5MzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りあ</dc:creator></item><item><title><![CDATA[[Java]equalsIgnoreCaseメソッド とは （備忘録）]]></title><description><![CDATA[
 １．はじめに
大文字/小文字を区別せずに文字列が一致しているか比較したい場合、equalsIgnoreCase メソッドを使用します。

 ２．サンプルプログラム
〇例１:

Sapmple_1.java
public class Sample_1 {
    public static void main(String[] args) {
        String upperData = "ABC";
        String lowerData = "abc";

        if (upperData.equalsIgnoreCase(lowerData)) {
 ...]]></description><link>https://zenn.dev/yama_kawa/articles/4126372faf4067</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/4126372faf4067</guid><pubDate>Tue, 22 Apr 2025 13:19:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RpzOfuSn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255DequalsIgnoreCase%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2520%25E3%2581%25A8%25E3%2581%25AF%2520%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[JavaSilver強化④関数型インターフェースとラムダ式]]></title><description><![CDATA[
 関数型インターフェースとは？
関数型インターフェースとは、1つの抽象メソッドだけを持つインターフェースのことです。
Java 8から導入され、ラムダ式で簡単に実装することができます。

 関数型インターフェースの特徴：


抽象メソッドが1つだけである。

@FunctionalInterface アノテーションがあると、コンパイラが関数型インターフェースであることをチェックします。


 例：Runnableインターフェース
@FunctionalInterface
public interface Runnable {
    void run();
}


 ラムダ式とは？
ラ...]]></description><link>https://zenn.dev/hyoni/articles/38804c9ca8cb77</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/38804c9ca8cb77</guid><pubDate>Tue, 22 Apr 2025 05:27:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o073_WJ---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaSilver%25E5%25BC%25B7%25E5%258C%2596%25E2%2591%25A3%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25A8%25E3%2583%25A9%25E3%2583%25A0%25E3%2583%2580%25E5%25BC%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item></channel></rss>