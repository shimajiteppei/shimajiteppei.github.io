<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 12 Jan 2025 03:56:36 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【React 19】 use Hookのアンチパターン]]></title><description><![CDATA[
 はじめに
今回は、React 19から搭載されたuseのアンチパターンについて解説します。
これまでにできなかった、Promiseを子コンポーネントに渡せたりと、便利で画期的なHookなのですが、使い方には、一定の注意が必要なので、そこを見ていきたいと思います。

 use とは
useはPromiseやContextなどのリソースから値を読み取るためのAPIです。
以下のように、Contextから値を読み取ったり、Promise解決ができたりするHookです。
import { use } from 'react'

const Example = () =&gt; {
  con...]]></description><link>https://zenn.dev/sc30gsw/articles/357c0e216e2411</link><guid isPermaLink="true">https://zenn.dev/sc30gsw/articles/357c0e216e2411</guid><pubDate>Sun, 12 Jan 2025 02:58:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d9Dx3tV5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%252019%25E3%2580%2591%2520use%2520Hook%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2581%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kaito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5ZmViMGZmOGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kaito</dc:creator></item><item><title><![CDATA[Node.jsイベントループ徹底解剖]]></title><description><![CDATA[

 Node.jsのシングルスレッドモデルの探求
Node.jsはイベント駆動と非同期I/Oのアプローチを採用し、シングルスレッドで高い並列性を持つJavaScriptランタイム環境を実現しています。シングルスレッドとは一度に一つのことしかできないことを意味するので、Node.jsはどのようにして一つのスレッドで高い並列性と非同期I/Oを実現しているのでしょうか？この記事ではこの問題を中心にNode.jsのシングルスレッドモデルを探求します。

 高並列性の戦略
一般的に、高並列性の解決策はマルチスレッドモデルを提供することです。サーバは各クライアントリクエストに一つのスレッドを割り当...]]></description><link>https://zenn.dev/leapcell/articles/a364a5cce400f7</link><guid isPermaLink="true">https://zenn.dev/leapcell/articles/a364a5cce400f7</guid><pubDate>Sat, 11 Jan 2025 12:30:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RRjXN3zi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E5%2589%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leapcell%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0N2E0MGQ3NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leapcell</dc:creator></item><item><title><![CDATA[ジェネレータが便利な理由：無限スクロールを例に学ぼう]]></title><description><![CDATA[広辞苑のように、机の上にただ置いてあった『JavaScript 第7版』。
久しぶりにちょと見てみようかなー、なんて気分で目次をパラパラ眺めていると…目に留まったのが 「ジェネレータ」。
存在は知っていたけど、いまいち理解していないなあというところで、AIのサポートのもと調べてみることに。
そして気づいてしまったのです。
ジェネレータって、めちゃくちゃ便利じゃないか！
というわけで、 その魅力と、「ジェネレータ」 を使った、スマホやパソコンでよく見る 無限スクロール を作る方法をわかりやすく説明します！

 1. ジェネレータって何？
ジェネレータは 「一度に全部動かない関数」 です。普...]]></description><link>https://zenn.dev/yoshikieee/articles/834079082202b7</link><guid isPermaLink="true">https://zenn.dev/yoshikieee/articles/834079082202b7</guid><pubDate>Sat, 11 Jan 2025 07:48:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qUIIjaCa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%258C%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AA%25E7%2590%2586%25E7%2594%25B1%25EF%25BC%259A%25E7%2584%25A1%25E9%2599%2590%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BE%258B%25E3%2581%25AB%25E5%25AD%25A6%25E3%2581%25BC%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoshikieee%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwN2Y1MmI5ZjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoshikieee</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜メディアンフィルタ（010/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の10本目です。

 前回
https://zenn.dev/nyagato_00/articles/0a309932643e53

 実装

 お題

メディアンフィルタ(3x3)を実装し、imori_noise.jpgのノイズを除去せよ。
メディアンフィルタとは画像の平滑化を行うフィルタの一種である。
これは注目画素の3x3の領域内の、メディアン値(中央値)を出力するフィルタである。 これもゼロパディングせよ。

https://github.com/minido/Gasyori100k...]]></description><link>https://zenn.dev/nyagato_00/articles/136ffd6ed7391a</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/136ffd6ed7391a</guid><pubDate>Sat, 11 Jan 2025 06:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mB9-2gKR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2583%25A1%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588010%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[もう少し楽にBranded Typeを使えるようにしたい]]></title><description><![CDATA[
 もう少し楽にBranded Typeを使えるようにしたい
と感じたので「Branded Type」を簡単に生成できるツールを作成しました。
https://branded-type-generator.pages.dev/
安直な理由ですが、「型定義ツール」のように、Branded Typeも気軽に作れる環境があればもっと広まるんじゃないかな？と思ったからです。
特に最近の開発で、似たような名前のIDやデータを扱う機会が多く、以下のような問題がありました。

同じ型（string, numberなど）でも意味が異なるデータが混在してしまう
間違った型を使う可能性がある

たとえば以下...]]></description><link>https://zenn.dev/sui_water/articles/ff94725a1be5e6</link><guid isPermaLink="true">https://zenn.dev/sui_water/articles/ff94725a1be5e6</guid><pubDate>Sat, 11 Jan 2025 04:46:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1TmZ7-D5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%2582%25E3%2581%2586%25E5%25B0%2591%25E3%2581%2597%25E6%25A5%25BD%25E3%2581%25ABBranded%2520Type%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4MGQ1MWNkOTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スイ</dc:creator></item><item><title><![CDATA[bcrypt (npm) パッケージのimportエラー対策]]></title><description><![CDATA[パスワードハッシュ化などで bcrypt npm モジュールを利用する際に、何らかの理由によって下記のようなエラーが発生するケースが有る。
treasure-app1_3  |  GET / 404 in 1ms
treasure-app1_3  |  ⚠ ./node_modules/@mapbox/node-pre-gyp/lib/util/compile.js
treasure-app1_3  | Module not found: Can't resolve 'node-gyp' in '/app/node_modules/@mapbox/node-pre-gyp/lib/uti...]]></description><link>https://zenn.dev/n2lab/articles/c613f1cd870738</link><guid isPermaLink="true">https://zenn.dev/n2lab/articles/c613f1cd870738</guid><pubDate>Sat, 11 Jan 2025 01:17:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tPz0D7Kq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:bcrypt%2520%2528npm%2529%2520%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AEimport%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E5%25AF%25BE%25E7%25AD%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:N2Lab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZEUtX1c3eC1NUHdEZUljeURmaEtaODQxTGtwTnRSeFh4SlFVc2kycjNoOHc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>N2Lab</dc:creator></item><item><title><![CDATA[深すぎるif文にサヨナラ！ガード句を使いこなしてスマートなコードへ]]></title><description><![CDATA[
 🚦 ガード句の実践的活用法：ネスト削減とコード可読性向上
プログラミング中、if 文による深いネストに頭を抱えた経験はありませんか？
特に TypeScript で条件分岐が多くなると、コードが読みづらく、保守性が下がる原因になります。
そんなときに有効な手法が 「ガード句（Guard Clause）」 です。
この記事では、ガード句を使って ネストを減らし、コードの可読性を向上させる方法 を、TypeScript のサンプルコードを交えて解説します。

 🔎 ガード句とは？
ガード句とは、ある条件が満たされない場合に、処理を早めに終了する 手法です。
これにより、無駄なネストを削減...]]></description><link>https://zenn.dev/53able/articles/0158f2a4585731</link><guid isPermaLink="true">https://zenn.dev/53able/articles/0158f2a4585731</guid><pubDate>Fri, 10 Jan 2025 16:26:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zSxOch4V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25B7%25B1%25E3%2581%2599%25E3%2581%258E%25E3%2582%258Bif%25E6%2596%2587%25E3%2581%25AB%25E3%2582%25B5%25E3%2583%25A8%25E3%2583%258A%25E3%2583%25A9%25EF%25BC%2581%25E3%2582%25AC%25E3%2583%25BC%25E3%2583%2589%25E5%258F%25A5%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25A6%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AA%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:53able%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiZWE2OGI5M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>53able</dc:creator></item><item><title><![CDATA[TypeScript のプロジェクト分割だけでは辛いので npm workspaces を使用する]]></title><description><![CDATA[
 はじめに
過去のコードが TypeScript の ProjectReferences により分割されていました。
分割自体はいいのですが、数が多く管理の手間が多いので、 npm の workspaces でまずは管理できるようにしようと思いました。

 TypeScript の ProjectReferences とは
https://www.typescriptlang.org/docs/handbook/project-references.html

tsconfig.json
{
    "compilerOptions": {
        // The usual
 ...]]></description><link>https://zenn.dev/shikazuki/articles/2c03f207c8827d</link><guid isPermaLink="true">https://zenn.dev/shikazuki/articles/2c03f207c8827d</guid><pubDate>Fri, 10 Jan 2025 15:21:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BCbEQ-Dc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2581%25AF%25E8%25BE%259B%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%2520npm%2520workspaces%2520%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shikazuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JlZDgyOGI0ZDUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shikazuki</dc:creator></item><item><title><![CDATA[ポケモンのAPIを使用してみよう！]]></title><description><![CDATA[
 はじめに
Poke APIという、ポケモンのタイプや種族値などの情報を取得できる、完全無料のAPIがあります。
この記事では、Poke APIでポケモンの情報を取得する方法を解説します。
!
レート制限はありませんが、APIのサーバー負荷を軽減するためにリクエストの頻度を極力減らすように心がけてください。


 Poke APIを使用したWebアプリの例
https://maitaketeikoku.github.io/maitake-pokedex/

 取得できる情報
dexNumberにはポケモンの図鑑番号を入れてください。
languageには言語の種類を入れてください。日本...]]></description><link>https://zenn.dev/kinakokyoryu/articles/07042ab630a9e1</link><guid isPermaLink="true">https://zenn.dev/kinakokyoryu/articles/07042ab630a9e1</guid><pubDate>Fri, 10 Jan 2025 15:00:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gRWlVPeL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259D%25E3%2582%25B1%25E3%2583%25A2%25E3%2583%25B3%25E3%2581%25AEAPI%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2593%25E6%2581%2590%25E7%25AB%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXBVSDh2UWZMQ0hYNlFxcHdQRWxFQlNMZlZnNGU4UDlvUDFvZVJOWHZNTmhPV05RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きなこ恐竜</dc:creator></item><item><title><![CDATA[【vite初心者】公式を参考に vite 環境を構築しようとして失敗した]]></title><description><![CDATA[
 事象
公式を参考に vite 環境を構築しようとして失敗した

yarn create vite
オプションを以下で設定

Vanilla
TypeScript


プロジェクトフォルダが生成されたら yarn install

yarn run build
エラー表示



src/main.ts:1:8 - error TS2307: Cannot find module './style.css' or its corresponding type declarations.

1 import './style.css'
         ~~~~~~~~~~~~~

src...]]></description><link>https://zenn.dev/ynghal/articles/a38e8f4f247ff1</link><guid isPermaLink="true">https://zenn.dev/ynghal/articles/a38e8f4f247ff1</guid><pubDate>Fri, 10 Jan 2025 14:34:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MLOhGcWU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590vite%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2580%2591%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%2592%25E5%258F%2582%25E8%2580%2583%25E3%2581%25AB%2520vite%2520%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E5%25A4%25B1%25E6%2595%2597%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yng%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZjMjE0YTg4ZmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yng</dc:creator></item><item><title><![CDATA[Webアプリ開発 React(Vite)でPWAを実装する]]></title><description><![CDATA[
 はじめに
今回は、React（Vite）で作成したWebサイトにPWAを実装したいと思います。

 前の記事
前回は、React（Vite）でWebサイトを作成し、Cloudflare Pagesで公開することができました。
https://zenn.dev/kinakokyoryu/articles/ee93e3e8b24826

 バージョン情報

vite: ^6.0.5
react: ^18.3.1
typescript: ~5.6.2
vite-plugin-pwa: ^0.21.1


 手順

publicフォルダに、自作のアイコン画像logo192.png、logo5...]]></description><link>https://zenn.dev/kinakokyoryu/articles/cb1cebfe203fa4</link><guid isPermaLink="true">https://zenn.dev/kinakokyoryu/articles/cb1cebfe203fa4</guid><pubDate>Fri, 10 Jan 2025 12:51:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6SIz02bX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Web%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%2520React%2528Vite%2529%25E3%2581%25A7PWA%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2593%25E6%2581%2590%25E7%25AB%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXBVSDh2UWZMQ0hYNlFxcHdQRWxFQlNMZlZnNGU4UDlvUDFvZVJOWHZNTmhPV05RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きなこ恐竜</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜ガウシアンフィルタ（009/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の9本目です。

 前回
https://zenn.dev/nyagato_00/articles/0a008e6bd4439b

 実装

 お題

ガウシアンフィルタ(3x3、標準偏差1.3)を実装し、imori_noise.jpgのノイズを除去せよ。
ガウシアンフィルタとは画像の平滑化（滑らかにする）を行うフィルタの一種であり、ノイズ除去にも使われる。
ノイズ除去には他にも、メディアンフィルタ(Q.10)、平滑化フィルタ(Q.11)、LoGフィルタ(Q.19)などがある。
ガウシアンフ...]]></description><link>https://zenn.dev/nyagato_00/articles/0a309932643e53</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/0a309932643e53</guid><pubDate>Fri, 10 Jan 2025 10:51:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---ngyN9f1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2582%25AC%25E3%2582%25A6%25E3%2582%25B7%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25EF%25BC%2588009%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[画面上の好きな位置にメッセージを配置できるSNSをReactで作ってみた]]></title><description><![CDATA[
 はじめに
皆さんはサマーウォーズという映画をご存知でしょうか？こちらの映画に登場するSNSでは以下の画像のようにメッセージが表示されます。画面を覆い尽くすように表示される感じが魅力的ですね。今回はこちらのSNSをモチーフにしたWebアプリを作成してみました。

サマーウォーズに登場するSNS [1]
!
以降の記事には著者の趣味でちいかわ要素が盛り込まれています


 アプリについて

 概要
今回作成したアプリです。
・ログイン
・投稿
・編集
・返信
・削除
などの基本的な機能を実装しています。
各機能について順にご紹介します。


 主な機能

 メッセージの投稿
1．画面右下...]]></description><link>https://zenn.dev/hrtr/articles/318b1e0a41836e</link><guid isPermaLink="true">https://zenn.dev/hrtr/articles/318b1e0a41836e</guid><pubDate>Fri, 10 Jan 2025 07:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bz6TFtgd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E9%259D%25A2%25E4%25B8%258A%25E3%2581%25AE%25E5%25A5%25BD%25E3%2581%258D%25E3%2581%25AA%25E4%25BD%258D%25E7%25BD%25AE%25E3%2581%25AB%25E3%2583%25A1%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E9%2585%258D%25E7%25BD%25AE%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258BSNS%25E3%2582%2592React%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HRTR-86%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M3MzMxZGQyNmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HRTR-86</dc:creator></item><item><title><![CDATA[VSC上で「モジュール '...' またはそれに対応する型宣言が見つかりません。ts(2307)」のエラーが出る]]></title><description><![CDATA[
 事象
TypeScript に対応しているはずのパッケージを import したのに、以下のようなエラーがでる。

モジュール '...' またはそれに対応する型宣言が見つかりません。ts(2307)
補足
VSC上にエラーは出るものの、コンパイルはとおる

 環境

VSCode
TypeScript
ESLint
Vite
Apple M2 Max


 対応
VSCの「TypeScript と JavaScript の言語機能」を無効にする。
やり方は以下の「ビルトイン拡張機能の切り方」を参考
https://zenn.dev/minamo/articles/6c935d0dc...]]></description><link>https://zenn.dev/ynghal/articles/ebfaa0c3d5919c</link><guid isPermaLink="true">https://zenn.dev/ynghal/articles/ebfaa0c3d5919c</guid><pubDate>Fri, 10 Jan 2025 06:58:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2KsLaWJy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSC%25E4%25B8%258A%25E3%2581%25A7%25E3%2580%258C%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%2520%2527...%2527%2520%25E3%2581%25BE%25E3%2581%259F%25E3%2581%25AF%25E3%2581%259D%25E3%2582%258C%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%25A3%25E8%25A8%2580%25E3%2581%258C%25E8%25A6%258B%25E3%2581%25A4%25E3%2581%258B%25E3%2582%258A%25E3%2581%25BE%25E3%2581%259B%25E3%2582%2593%25E3%2580%2582ts%25282307%2529%25E3%2580%258D%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yng%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZjMjE0YTg4ZmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yng</dc:creator></item><item><title><![CDATA[AI駆動開発を調べていたらCursorと出会った話]]></title><description><![CDATA[
 はじめに
FizzBuzz問題を解くコードをCursorで生成してみました。
ただ、CursorはAIでコードを生成させるだけではなく、テスト駆動開発を行ってみたいと思います。
参考資料の本を読めばCursorについては理解できるが、活用方法をハンズオン形式で記事にした方が馴染みやすいと思ったので今回の記事を作成しました。

 Cursorとは
The AI Code Editor
CursorはAIによるコード生成をサポートするコードエディタです。
CursorはVSCodeの拡張機能としてインストールできます。

 FizzBuzzとは
元は単純なパーティゲームでFizzBuzz...]]></description><link>https://zenn.dev/shunsuke_stack/articles/277e75e9b3df27</link><guid isPermaLink="true">https://zenn.dev/shunsuke_stack/articles/277e75e9b3df27</guid><pubDate>Fri, 10 Jan 2025 04:37:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--43BVnIiX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AI%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E3%2582%2589Cursor%25E3%2581%25A8%25E5%2587%25BA%25E4%25BC%259A%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakajima.js%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNjljNTJjOTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakajima.js</dc:creator></item><item><title><![CDATA[Node.js 23.6.0でTSの型がフラグ無しで除去されるようになった]]></title><description><![CDATA[Unflag --experimental-strip-types · Issue #17 · nodejs/typescript
が取り込まれた Node.js 23.6.0 がリリースされたので早速試してみる。
// greeting.mts
export function greet(message: string): string {
  return `Hello, ${message}!`
}
console.log(greet('world'))
$ node ./greeting.mts
Hello, world!
フラグなしでmtsファイルが実行された。
// gree...]]></description><link>https://zenn.dev/malformedx/articles/10238fdcba1b2d</link><guid isPermaLink="true">https://zenn.dev/malformedx/articles/10238fdcba1b2d</guid><pubDate>Fri, 10 Jan 2025 03:46:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d86uvgc3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%252023.6.0%25E3%2581%25A7TS%25E3%2581%25AE%25E5%259E%258B%25E3%2581%258C%25E3%2583%2595%25E3%2583%25A9%25E3%2582%25B0%25E7%2584%25A1%25E3%2581%2597%25E3%2581%25A7%25E9%2599%25A4%25E5%258E%25BB%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:beer-bearz%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhMTJhNzYyMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>beer-bearz</dc:creator></item><item><title><![CDATA[TypeScriptを用いたnpxコマンドの開発とnpm公開手順]]></title><description><![CDATA[
 はじめに
npx コマンドを知っていますでしょうか？npxコマンドは、ローカルにインストールしなくても  npm パッケージを実行できるコマンドです。
例えば、コード生成ツールやコードチェックの自動実行を、依存関係に影響を与えることなく実行できます。
本記事では、自作の npx コマンドを TypeScript で作成し、それを自身のスコープ（npmユーザー名）で、npm に公開する方法を解説します。npm公開することにより、他のユーザーも含めてオリジナルのコマンドを簡単に実行できるようになります。
!
本記事で紹介しているサンプル通りに実行すれば、自作のnpxコマンドを作成できます...]]></description><link>https://zenn.dev/thinkingsinc/articles/627ccdebff3b6f</link><guid isPermaLink="true">https://zenn.dev/thinkingsinc/articles/627ccdebff3b6f</guid><pubDate>Fri, 10 Jan 2025 02:26:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1Sw3ygto--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259Fnpx%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A8npm%25E5%2585%25AC%25E9%2596%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:atman%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExNDk2MTc4MWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Thinkings%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjl3SUJHQTRDUWZZOW54b1owcjI3WkN6N1I1Y0NsMnBzM2EwWkRnbGc0dXZHVlFnPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>atman</dc:creator></item><item><title><![CDATA[StripeのInvoice支払いの導入の流れ]]></title><description><![CDATA[
 StripeのInvoice支払いの導入

 流れ


開発環境

Stripe dashboard: Test modeに設定する

Publishable_keyとSecret_keyを設定、取得する



Stripe CLI

ローカルテスト用のWebhookを設定する
　　- Stripe CLIのインストール、設定


https://docs.stripe.com/stripe-cli

brew install stripe/stripe-cli/stripe
stripe login --api-key Secret_key


テスト環境のWebhook APIを...]]></description><link>https://zenn.dev/bizlink/articles/b77c0c0ebaa45b</link><guid isPermaLink="true">https://zenn.dev/bizlink/articles/b77c0c0ebaa45b</guid><pubDate>Fri, 10 Jan 2025 02:02:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kAfprKBg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Stripe%25E3%2581%25AEInvoice%25E6%2594%25AF%25E6%2589%2595%25E3%2581%2584%25E3%2581%25AE%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%25AE%25E6%25B5%2581%25E3%2582%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Zihan%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzllMzFlOGFkZGMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Bizlink%2520Developers%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M0NmM0OTllZDguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Zihan</dc:creator></item><item><title><![CDATA[Node.js v23.6.0：TypeScriptサポートが登場]]></title><description><![CDATA[
Node.js v23.6.0 が最近リリースされ、大きなアップデートとして --experimental-strip-types フラグが解除されました。これにより、Node.js は追加の設定なしで TypeScript ファイルをネイティブに実行できるようになりました。

 TypeScript の重要性
TypeScript は、JavaScript にオプションの静的型付けやインターフェース、ジェネリクス、型推論などの高度な機能を追加することで、JavaScript を拡張します。これにより、大規模な JavaScript アプリケーションのデファクトスタンダードとなっていま...]]></description><link>https://zenn.dev/leapcell/articles/67ee774d4a22d1</link><guid isPermaLink="true">https://zenn.dev/leapcell/articles/67ee774d4a22d1</guid><pubDate>Thu, 09 Jan 2025 19:30:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cWOe73ni--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%2520v23.6.0%25EF%25BC%259ATypeScript%25E3%2582%25B5%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%258C%25E7%2599%25BB%25E5%25A0%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Leapcell%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0N2E0MGQ3NGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Leapcell</dc:creator></item><item><title><![CDATA[自作のAIにソースコード投げるやつをnpmに公開した]]></title><description><![CDATA[https://zenn.dev/yamadashy/articles/ai-tool-repomix-5000-star#cli実装
たまたまTwitterで流れてきたこの投稿を見て、自分も似たようなもの作ってんだよな、やっぱり同じ考えの人って多いんだな～と思いつつ、「えっファイルの指定できないん！？！？」という驚きが。
そして上記リンクの方がまとめてくださっている類似のプロジェクトと比較しても、自作したものはカスタム性こそショボいもののClaudeから利用した際の利便性は負けてないなと感じたので、いろいろ調べつつnpmに公開してみました。
githubもほとんどprivate、ろくに...]]></description><link>https://zenn.dev/chiepu3/articles/12e5970af5e93e</link><guid isPermaLink="true">https://zenn.dev/chiepu3/articles/12e5970af5e93e</guid><pubDate>Thu, 09 Jan 2025 19:05:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JthRE3p---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%25AEAI%25E3%2581%25AB%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E6%258A%2595%25E3%2581%2592%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%25E3%2582%2592npm%25E3%2581%25AB%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:chiepu3%2Cx_90%2Cy_121/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chiepu3</dc:creator></item></channel></rss>