<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 01 Dec 2024 00:32:42 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rustの参照外しについて調べてみた]]></title><description><![CDATA[
 はじめに
はじめまして。レバウェル開発部のりょうすけです。
私の所属するレバウェル開発部のアドベントカレンダー1日目を担当させていただきます。
プライベートでRustを学習する中で、「参照」した変数がC言語と異なり、値まで自動的に参照外しされることに驚きました。「なぜRustは値まで自動的に参照外しされるのか？」「参照が深くなる場合、実行時にはどのように処理されているのか？」という疑問が浮かび、その答えを知るために内部実装を調べてみることにしました。

 CとRustの参照の動作
CとRustの参照動作の違いを確認します。
Cでは以下のようにプログラマーが明示的に参照外し（*）をしな...]]></description><link>https://zenn.dev/ryosuke0825/articles/ede5acb5c58818</link><guid isPermaLink="true">https://zenn.dev/ryosuke0825/articles/ede5acb5c58818</guid><pubDate>Sat, 30 Nov 2024 22:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CadSw7pr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E5%258F%2582%25E7%2585%25A7%25E5%25A4%2596%25E3%2581%2597%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2587%25E3%2581%2586%25E3%2581%2599%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5MzI0ZDczNGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りょうすけ</dc:creator></item><item><title><![CDATA[RustでSQLxで扱えるPostgreSQLの型について]]></title><description><![CDATA[
 目的
RustのSQLxが便利です。コネクションプールが独自に用意されていたり、SQLの結果とstructの変換が簡単だったりします。
PostgreSQLの型がどれだけ使えるか検証してみました。

 基本型
基本的な型のマッピングは以下の表になります。



PostgreSQL
Rust




BOOL
bool


BOOL[]
Vec&lt;bool&gt;


NULL::bool
Option&lt;bool&gt;


CHAR
i8


SMALLINT
i16


INT
i32


BIGINT
i64


REAL
f32


DOUBLE
f64


TEX...]]></description><link>https://zenn.dev/aoyagikouhei/articles/25e28a34ad3e04</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/25e28a34ad3e04</guid><pubDate>Sat, 30 Nov 2024 21:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EFK78_Sr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7SQLx%25E3%2581%25A7%25E6%2589%25B1%25E3%2581%2588%25E3%2582%258BPostgreSQL%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[Shuttle を使って 10 分で Rust と Postgres を動かす]]></title><description><![CDATA[あ…ありのまま 今 起こった事を話すぜ！
おれは Shuttle のコマンドを打っていたと思ったらいつのまにかデプロイされていた…
な… 何を言ってるのか わからねーと思うがおれも何をされたのかわからなかった…

 はじめに
Web の API を実装したい場合，まず Rust で書きたくなるのは自明である．しかしながら，Rust で API を実装したとしても，デプロイ先に困るのが常である．特に，何らかの DB を用いたい場合には途方に暮れることも多い．
実務であれば AWS などを使用するのが常套手段であるが，個人で簡単な API を作成して動かしたい場合は費用的に敬遠したくなるのが...]]></description><link>https://zenn.dev/taroosg/articles/20241129164038-b668ea75f7057f</link><guid isPermaLink="true">https://zenn.dev/taroosg/articles/20241129164038-b668ea75f7057f</guid><pubDate>Sat, 30 Nov 2024 15:01:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--malpfRQO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Shuttle%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%252010%2520%25E5%2588%2586%25E3%2581%25A7%2520Rust%2520%25E3%2581%25A8%2520Postgres%2520%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyOGZiYzgwODUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item><item><title><![CDATA[GitHubのアクティビティ分析ツールをRustで作ってみた]]></title><description><![CDATA[GitHubが提供するGraphQL APIを利用してGitHub上のアクティビティを分析するツールを作ってみました。
https://github.com/hirokisan/gh-lens

 用途
GitHubのIssuesでタスク管理をしていたり、Pull Requestsを利用して開発しているチームを念頭に置いています。
チームや個人のアクティビティを手軽に把握するために使います。

 準備する
使い方はREADMEに記載の通りですが、
CLIをインストールして、
$ cargo install gh-lens
環境変数にGITHUB_TOKENとしてPAT(personal ...]]></description><link>https://zenn.dev/hirokisan/articles/9815a2997a8798</link><guid isPermaLink="true">https://zenn.dev/hirokisan/articles/9815a2997a8798</guid><pubDate>Sat, 30 Nov 2024 08:35:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aOOgsfUz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2593%25E3%2583%2586%25E3%2582%25A3%25E5%2588%2586%25E6%259E%2590%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592Rust%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hirokisan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NjYjAzYWNkYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hirokisan</dc:creator></item><item><title><![CDATA[Rust組込み開発の可能性:デバッグプローブに頼らないエラー検出]]></title><description><![CDATA[
 Rust組込み開発の可能性：デバッグプローブに頼らないエラー検出
組み込みシステム開発において、リアルタイム性や安全性は極めて重要な要素です。長年、C言語とリアルタイムオペレーティングシステム（RTOS）の組み合わせが主流で、多くの開発者にとって馴染み深い選択肢となっています。C言語はその柔軟性と高いパフォーマンスから、多くのプロジェクトで採用されており、豊富なデバッグプローブやテストツールを含むエコシステムが整っています。
しかし、近年注目を集めているRustは、安全性と効率性を重視した設計が特徴で、組み込み開発に新たな可能性をもたらします。本記事では、C言語のメリットを尊重しつつ...]]></description><link>https://zenn.dev/kokimu/articles/ec230ad768ab6c</link><guid isPermaLink="true">https://zenn.dev/kokimu/articles/ec230ad768ab6c</guid><pubDate>Thu, 28 Nov 2024 09:43:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ydyxdxl5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E7%25B5%2584%25E8%25BE%25BC%25E3%2581%25BF%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AE%25E5%258F%25AF%25E8%2583%25BD%25E6%2580%25A7%253A%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2596%25E3%2581%25AB%25E9%25A0%25BC%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E6%25A4%259C%25E5%2587%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2583%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTkxNWRmMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こーき</dc:creator></item><item><title><![CDATA[ESP32をRustで使用するための環境構築]]></title><description><![CDATA[
 はじめに
自分がESP32をRustで動かす際に、環境構築で困ったところがあったため、備忘録として置いておきます。なお、下記のコマンドの実行環境はUbuntu22.04です。
(WindowsだとC関係の環境構築も必要となり、面倒なのが分かったのでやってないです)

 環境構築

 Rustのインストール
最初にRustのインストールを行います。下準備として、まず下記のコマンドを入力します。
sudo apt install git python3 python3-pip gcc build-essential curl pkg-config libudev-dev libtinfo...]]></description><link>https://zenn.dev/rk_work/articles/esp32_rust_setup</link><guid isPermaLink="true">https://zenn.dev/rk_work/articles/esp32_rust_setup</guid><pubDate>Wed, 27 Nov 2024 14:33:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VBQse7Rv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ESP32%25E3%2582%2592Rust%25E3%2581%25A7%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kr_work%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwYmQ0MDU2ZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kr_work</dc:creator></item><item><title><![CDATA[[Rust] NIH-plugでCLAPオーディオプラグインを作る]]></title><description><![CDATA[
 プラグインにGUIを実装したい
前回の記事 では、RustでCLAPオーディオプラグインを作る方法について解説しました。
https://zenn.dev/saisana299/articles/439fb4eed12acf
これにGUIを実装したかったのですが、上手くいかなかったためClackではなく別のライブラリを使ってみることにしました。

 前提

Pythonをインストール済み (pip、pipxを使います)
Rust開発環境を構築済み
CLAPに対応したDAWをインストール済み
Windows x86-64を想定


 NIH-plug
https://github.co...]]></description><link>https://zenn.dev/saisana299/articles/e9751a9e586681</link><guid isPermaLink="true">https://zenn.dev/saisana299/articles/e9751a9e586681</guid><pubDate>Wed, 27 Nov 2024 03:42:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IbmOatAD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520NIH-plug%25E3%2581%25A7CLAP%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AA%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Saisana299%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxZjY0OTBjZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Saisana299</dc:creator></item><item><title><![CDATA[忙しい人向けのRust]]></title><description><![CDATA[
 TL;DR
本当は時間があるなら書籍や他の方の記事でRustについて学ぶことを推奨します。
しかしながら、期限まで時間がない場合というものは多いと思うわけですよ、私は。
そういう場合の応急処置を目的として、他の言語でプログラミング経験がある、以下のような人を対象にしてRustに必要な知識をできるだけ最小限にまとめます。

いきなりRustで書かれたプログラムを理解しないといけなくなった人
Rustでプログラムを書かないといけないが詳細を学ぶ時間が残されていない人


 インストールからHello,worldまで

 インストール(Linux)
$ curl --proto '=htt...]]></description><link>https://zenn.dev/k_azuma/articles/c43044820017e4</link><guid isPermaLink="true">https://zenn.dev/k_azuma/articles/c43044820017e4</guid><pubDate>Tue, 26 Nov 2024 22:58:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k1lNZT_y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25BF%2599%25E3%2581%2597%25E3%2581%2584%25E4%25BA%25BA%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AERust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kentaro%2520Azuma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUl0YnZtbmMyRTZ5UTVCbUFsUlppVm9SNGlKdFNsT3pQdDJqeFYyLVBvQTI9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kentaro Azuma</dc:creator></item><item><title><![CDATA[RustによるESP32のデュアルコアの使用法]]></title><description><![CDATA[
 はじめに
なんとなく、RustでESP32のデュアルコアを触りたいなと思って、色々と調べながらやってみようとしたのですが、記事が全くと言ってよいほどなかったのでまとめました。
一応、私の作成したリポジトリを載せておきます。

 FreeRTOS
今回、デュアルコアでプログラムを作成するにあたって、ESP32のFreeRTOSを使います。
FreeRTOSについては、Lang-shipさんなどに詳しく記載されているので、気になった方はそちらを参照してください。

 タスク作成
デュアルコアを扱うには、それぞれにタスクを渡して実行する形をとります。タスクの作成には、C言語から関数を呼び出...]]></description><link>https://zenn.dev/rk_work/articles/esp32_dual_core</link><guid isPermaLink="true">https://zenn.dev/rk_work/articles/esp32_dual_core</guid><pubDate>Mon, 25 Nov 2024 14:10:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RmApsUj---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BESP32%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25A5%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B3%25E3%2582%25A2%25E3%2581%25AE%25E4%25BD%25BF%25E7%2594%25A8%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kr_work%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwYmQ0MDU2ZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kr_work</dc:creator></item><item><title><![CDATA[ABC381:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 381のA~E問題をRustで解いた際の解法をまとめました。

 A問題

問題

https://atcoder.jp/contests/abc381/tasks/abc381_a

解説

文字列の長さをN = 2x + 1とし、文字列内で1がx個、/が1個、2がx個になるかを判定します。
もしこれらの条件を満たさない場合はNoと出力し、条件を満たす場合はYesと出力します。

コード

use proconio::{input, marker::Chars};

fn main() {
    input! {
        n:...]]></description><link>https://zenn.dev/nakst_hide/articles/9e9d1d181053fe</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/9e9d1d181053fe</guid><pubDate>Sun, 24 Nov 2024 13:37:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RygLc8V2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC381%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rustが目指す「エラーは回復可能であるべき」という哲学]]></title><description><![CDATA[
 Rustが目指す「エラーは回復可能であるべき」という哲学

プログラムが動作している限り、エラーは必ず発生します。しかし、そのエラーをどう扱うかは言語設計者にとって大きな課題です。Rustは「エラーは回復可能であるべき」という哲学があるように感じます。そのことを示すのが、安全性と実用性を両立したエラーハンドリングの仕組みの提供です。
この記事では、Rustのエラー処理に関する設計思想を具体的なコード例を交えて解説しながら、Result型を中心に、関連する機能や補完的なツールを順を追って紹介します。


 1. エラー処理はなぜ重要か？

エラーハンドリングの設計は、ソフトウェア全体の...]]></description><link>https://zenn.dev/kokimu/articles/3a5a13baabc5a4</link><guid isPermaLink="true">https://zenn.dev/kokimu/articles/3a5a13baabc5a4</guid><pubDate>Sun, 24 Nov 2024 08:03:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fQKX3W2G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%258C%25E7%259B%25AE%25E6%258C%2587%25E3%2581%2599%25E3%2580%258C%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AF%25E5%259B%259E%25E5%25BE%25A9%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258D%25E3%2580%258D%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E5%2593%25B2%25E5%25AD%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2583%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTkxNWRmMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こーき</dc:creator></item><item><title><![CDATA[欧州サッカーの過密日程が酷いので試合日程管理アプリを作ってみた]]></title><description><![CDATA[
 背景

 欧州サッカーの過密日程
欧州サッカーに明るい方であれば、近年の過密日程問題についてはご存知かと思います。
これによって選手の怪我、試合の質低下などさまざまな問題が指摘されていますが
観る側も追いきれなくなっています。

 複数チームの日程を横断的にみたい
贔屓のチームが一つだけの方はチーム名検索を行えば日程が確認できます。

しかし、私のようなサッカー好きは

様々なチームの日程を調べて
観戦スケジュールを自分で計画して
睡眠時間を削って

観戦をしています。
流石にめんどくさいので今回、複数チームの試合日程を横断的に確認できるアプリを作成しました。
アプリ作る方がめんどく...]]></description><link>https://zenn.dev/reomash/articles/3ec2357148b752</link><guid isPermaLink="true">https://zenn.dev/reomash/articles/3ec2357148b752</guid><pubDate>Sat, 23 Nov 2024 14:42:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l9XW-J_M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AC%25A7%25E5%25B7%259E%25E3%2582%25B5%25E3%2583%2583%25E3%2582%25AB%25E3%2583%25BC%25E3%2581%25AE%25E9%2581%258E%25E5%25AF%2586%25E6%2597%25A5%25E7%25A8%258B%25E3%2581%258C%25E9%2585%25B7%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E8%25A9%25A6%25E5%2590%2588%25E6%2597%25A5%25E7%25A8%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mash%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxMTY0NzU2M2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mash</dc:creator></item><item><title><![CDATA[RustによるESP32とのシリアル通信]]></title><description><![CDATA[
 はじめに
研究でRustを使用して、ESP32とシリアル通信しようと調べたところ、"serialport"というクレートを用いた手法が出てきました。しかし、それではESP32とシリアル通信はできなかったので、解決方法を本記事にまとめようと思います。

 必要なクレート
esp_idf_svcクレートに、シリアル通信する際に必要な規格が揃ってました。
本記事では、uartを使用していきたいと思います。
cargo add esp_idf_svc

 esp_idf_svc
esp_idf_svcクレートは、ESP-IDFをRustで利用するためのラッパーです。ESP-IDFは、ESP3...]]></description><link>https://zenn.dev/rk_work/articles/serial_rust_esp32</link><guid isPermaLink="true">https://zenn.dev/rk_work/articles/serial_rust_esp32</guid><pubDate>Sat, 23 Nov 2024 11:31:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I1arZVTy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BESP32%25E3%2581%25A8%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E9%2580%259A%25E4%25BF%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kr_work%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwYmQ0MDU2ZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kr_work</dc:creator></item><item><title><![CDATA[Rustにおける「spawn」の意味と活用：RTICや組み込み開発での視点]]></title><description><![CDATA[
 Rustにおける「spawn」の意味と活用：RTICや組み込み開発での視点

Rustでの開発を始めたばかりの方にとって、「クレート」「トレイト」「所有権」「借用」など、他のプログラミング言語ではあまり聞き慣れない用語が登場し、少し戸惑うことがあるかもしれません。その中でも、「spawn」という単語は、特に並行処理やリアルタイムシステムのコードでよく目にする重要な概念です。
今回は、Rustにおける「spawn」に焦点を当て、その意味や利用例を解説するとともに、Rust以外の言語や組み込み開発での類似表現にも触れていきます。


 「spawn」とは？ その語源と基本的な意味

「s...]]></description><link>https://zenn.dev/kokimu/articles/42a07877552964</link><guid isPermaLink="true">https://zenn.dev/kokimu/articles/42a07877552964</guid><pubDate>Sat, 23 Nov 2024 09:32:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ISvpr9eg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2580%258Cspawn%25E3%2580%258D%25E3%2581%25AE%25E6%2584%258F%25E5%2591%25B3%25E3%2581%25A8%25E6%25B4%25BB%25E7%2594%25A8%25EF%25BC%259ARTIC%25E3%2582%2584%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%25AE%25E8%25A6%2596%25E7%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2583%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTkxNWRmMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こーき</dc:creator></item><item><title><![CDATA[Rustでコマンドラインツール開発　オプションをいい感じに設定！]]></title><description><![CDATA[
 目標
お手軽にコマンドライン引数を取得しつつ、ヘルプ表示にも対応させる
例：異常終了（存在しないコマンドを指定)
terminal
$ command -l # 存在しないコマンドを指定
Unrecognized option: 'l'

 書式: command [options]

Options:
    -V, --value 1 or 2 or 3 etc..
                        入力した値を表示
    -h, --help          ヘルプを表示
    -v, --version       バージョンを表示


例：正常終了（コマ...]]></description><link>https://zenn.dev/frabs/articles/c020d8171f44cc</link><guid isPermaLink="true">https://zenn.dev/frabs/articles/c020d8171f44cc</guid><pubDate>Sat, 23 Nov 2024 08:14:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LGDF61xX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2580%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E3%2581%2584%25E3%2581%2584%25E6%2584%259F%25E3%2581%2598%25E3%2581%25AB%25E8%25A8%25AD%25E5%25AE%259A%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:slacky%2520note%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMjg4ZmQyYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>slacky note</dc:creator></item><item><title><![CDATA[【Rust組み込み仮想開発環境の紹介】Dev Container🐳（Docker）×Baker link. Env🍞（probe-rs）]]></title><description><![CDATA[Dev ContainerとBaker link. Env（probe-rs）を利用した、Rust組み込み仮想開発環境をご紹介いたします。
構築図イメージ図（Baker link. Env）

!
本記事の環境構築方法については、以下の２つのサイトでご紹介しています。実際の環境構築の際には、そちらのサイトをご確認ください。

(Baker link. Dev) RustとRP2040マイコンでLチカしてみた-環境構築編-
Baker link. Dev公式チュートリアル



 組み込み開発の開発環境をDev Containerにするメリット
Dev Container vs. 従来の組...]]></description><link>https://zenn.dev/baker_link_lab/articles/0cccd575d7c0e7</link><guid isPermaLink="true">https://zenn.dev/baker_link_lab/articles/0cccd575d7c0e7</guid><pubDate>Sat, 23 Nov 2024 03:25:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LdgOG0Eo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E4%25BB%25AE%25E6%2583%25B3%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%25E3%2580%2591Dev%2520Container%2520%25EF%25BC%2588Docker%25EF%25BC%2589%25C3%2597Baker%2520link.%2520Env...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Baker%2520link.%2520Lab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkNzkyZGRhODEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Baker link. Lab</dc:creator></item><item><title><![CDATA[[簡単]Raspberry Pi PicoをRustでプログラミング🍞]]></title><description><![CDATA[Raspberry Pi Picoを用いたRust組み込み開発は、多くの方の記事やサポート、コミュニティがあります。本記事はRust初心者の著者でも10分でできたBaker link. Devシリーズを使った環境構築とLチカまでをご紹介します！！
!
先日、外部マイコン書き込み対応ファームウェアを標準搭載したBaker link. Dev（Rev.1）をリリースされました。

https://youtube.com/shorts/zO6Vnm8v96o?feature=shared
この外部マイコン書き込み機能を利用して、Raspberry Pi PicoにRustのプログラムを書き込ん...]]></description><link>https://zenn.dev/baker_link_lab/articles/4a267e244e5bf7</link><guid isPermaLink="true">https://zenn.dev/baker_link_lab/articles/4a267e244e5bf7</guid><pubDate>Fri, 22 Nov 2024 11:04:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TktFA59W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E7%25B0%25A1%25E5%258D%2598%255DRaspberry%2520Pi%2520Pico%25E3%2582%2592Rust%25E3%2581%25A7%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Baker%2520link.%2520Lab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkNzkyZGRhODEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Baker link. Lab</dc:creator></item><item><title><![CDATA[Rustでごく簡単なCLIバリデーションツールを作った]]></title><description><![CDATA[
 概要
Rustに入門したいなと思って公式のThe Bookを11章まで読みました。
ちょっとゴツすぎてそこで一旦読むのをやめたのですが、、、（全部で21章まである）
学んだ文法で何か作ってみたいなと思い、掲題のツールを作成しました。
作ったものの動画は以下です。
非常に簡単なレベルで、データの形式についてバリデーションっぽいことをしてくれます。

よい書き方・美しい書き方で書いた自信は全くなく、またChatGPTの力も多分に借りたので、初心者が初心者なりにちょっとしたものを作ってみたんだな、くらいの目で見ていただけますと幸いです。

 Cargo.toml
Cargo.tomlは以下...]]></description><link>https://zenn.dev/rinda_1994/articles/eb24de91d9382c</link><guid isPermaLink="true">https://zenn.dev/rinda_1994/articles/eb24de91d9382c</guid><pubDate>Fri, 22 Nov 2024 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--saZnr5ZW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%2594%25E3%2581%258F%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AACLI%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%25E3%2581%25A0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzODc5NzQ0YjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りんだ</dc:creator></item><item><title><![CDATA[Tauri 2.0でローカルファイルを読み込んでみる(plugin-fs)]]></title><description><![CDATA[下記、「ファイルを開く」ダイアログ(plugin-dialog)を利用してみる記事の続き的な内容になります。
折角、上記でローカルファイルのファイルパスを取得できたので、そのローカルファイルを読み込んでみたいと思います。
https://zenn.dev/playree/articles/5e2f1386dde48f
下記tauri-plugin-fsを利用します。
https://github.com/tauri-apps/tauri-plugin-fs

 プラグインの追加
フロントとRust側の両方に追加を行います。
&gt; yarn add @tauri-apps/plugin...]]></description><link>https://zenn.dev/playree/articles/04242346d343e6</link><guid isPermaLink="true">https://zenn.dev/playree/articles/04242346d343e6</guid><pubDate>Wed, 20 Nov 2024 11:05:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5c807pHj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2581%25A7%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2593%25E3%2581%25A7%25E3%2581%25BF%25E3%2582%258B%2528plugin-fs%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:playree%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzc1OVNMOTM4THJqcFl0OUxnSUZKS2NlYThMTVEwbkwyS3oteFBxbUcyQTB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>playree</dc:creator></item><item><title><![CDATA[Tauri 2.0で「ファイルを開く」ダイアログ(plugin-dialog)を使ってみる]]></title><description><![CDATA[Tauri 2.0ではさまざまなAPIがプラグインとして用意されていて、Rust側の実装(コーディング)不要でデスクトップ機能が利用できます。(プラグインとして用意されている機能であれば)
ただ、2.0だとまだ情報があまりなかったので、自分の為にもまとめておこうかと。
今回は、「ファイルを開く」ダイアログ(plugin-dialog)を利用してみます。
一応、Githubにも簡単な手順の記載があります。
https://github.com/tauri-apps/tauri-plugin-dialog

 前提
下記記事でまとめた環境をベースでの解説になります。
https://zenn...]]></description><link>https://zenn.dev/playree/articles/5e2f1386dde48f</link><guid isPermaLink="true">https://zenn.dev/playree/articles/5e2f1386dde48f</guid><pubDate>Tue, 19 Nov 2024 07:53:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bnputV5W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2581%25A7%25E3%2580%258C%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E9%2596%258B%25E3%2581%258F%25E3%2580%258D%25E3%2583%2580%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25AD%25E3%2582%25B0%2528plugin-dialog%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:playree%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzc1OVNMOTM4THJqcFl0OUxnSUZKS2NlYThMTVEwbkwyS3oteFBxbUcyQTB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>playree</dc:creator></item></channel></rss>