<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 24 Sep 2025 11:20:49 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[SeleniumとPlaywrightのパフォーマンスを簡単に比べてみる]]></title><description><![CDATA[TRUSTART株式会社でエンジニアとして働いているnagashunです！
最近、ブラウザ自動化ツールを使った開発でSeleniumからPlaywrightに移行する案件が増えているみたいですが、実際のパフォーマンスの違いってどれくらいあるんでしょうか？
今回は実際にコードを書いて、SeleniumとPlaywrightのパフォーマンスを比較してみたいと思います！

 SeleniumとPlaywrightの基本的な違い

 Selenium


リリース: 2004年から

特徴: 長い歴史があり、多くの言語をサポート

アーキテクチャ: WebDriverプロトコル経由でブラウザを制...]]></description><link>https://zenn.dev/trustart_dev/articles/920a4dc2d3212f</link><guid isPermaLink="true">https://zenn.dev/trustart_dev/articles/920a4dc2d3212f</guid><pubDate>Wed, 24 Sep 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P9Dm7UKF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Selenium%25E3%2581%25A8Playwright%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E6%25AF%2594%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nagashun%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4Y2I1MTc4ODAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TRUSTART%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4YTczMmFmNjEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nagashun</dc:creator></item><item><title><![CDATA[文書分類の実験]]></title><description><![CDATA[
Raspberry Pi 400上のollamaでGemma 3 270Mを動かすでGemma 3 270MをRaspberry Pi 400に実装したので、Gemma 3 270Mで文章を分類するファインチューンが出来ないかと考えました。想定したタスクは以下のものです。github.com/mahdikabootari/Software-Requirements-Classification の中にある。PROMISE.csvのclassを予測する分類モデルができないかという実験を行いました。これは要件定義の分類をまとめたもので機能要件・非機能要件などの分類が入っています。
結論から...]]></description><link>https://zenn.dev/gorn/articles/21747fe7026a11</link><guid isPermaLink="true">https://zenn.dev/gorn/articles/21747fe7026a11</guid><pubDate>Wed, 24 Sep 2025 08:46:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hrKiq8iL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E6%259B%25B8%25E5%2588%2586%25E9%25A1%259E%25E3%2581%25AE%25E5%25AE%259F%25E9%25A8%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:gorn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hIeXdFUmR2TnJESmpyZ1lRYUd3Y3hFYWhwaTVkclM1b2pNcGh3bXc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>gorn</dc:creator></item><item><title><![CDATA[Django REST FrameworkのView実装で迷った話]]></title><description><![CDATA[
 はじめに
早速導入背景の話となりますが、
社内向けのWebアプリケーションをpythonフレームワークのDjangoで作っており、
そのアプリケーション開発が進むにつれてAPIの実装が必要となりました。
API実装を進めるにあたって、
前述の通りDjangoを用いたアプリケーション開発を進めていたため、
自然にDjango REST Framework（以下DRF）の導入に行きつきました。
しかしながら実装を進めていく中で、

APIView
GenericAPIView（＋Mixins）/ generics.*APIView
ModelViewSet（ViewSet）

と、クラス...]]></description><link>https://zenn.dev/sanyodo/articles/e31bbbe24a58d5</link><guid isPermaLink="true">https://zenn.dev/sanyodo/articles/e31bbbe24a58d5</guid><pubDate>Wed, 24 Sep 2025 07:28:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RHUUv-0Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Django%2520REST%2520Framework%25E3%2581%25AEView%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25A7%25E8%25BF%25B7%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2582%2582%25E3%2581%25A1%25E3%2582%2583%25E3%2581%25AE%25E4%25B8%2589%25E6%25B4%258B%25E5%25A0%2582%2520%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E9%2583%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjZDQ1NjgyZTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おもちゃの三洋堂 システム部</dc:creator></item><item><title><![CDATA[PythonでNotion APIのファイルアップロード機能を使ってみた]]></title><description><![CDATA[
 はじめに
2025年5月ごろ、待望の機能がNotion APIに追加されました。それがファイルアップロード機能です。これまでAPI経由でのファイル追加はできませんでしたが、このアップデートにより、Notionの活用幅がさらに広がりそうですね。
今回は、PythonのNotion SDKを使って、実際にデータベースのfilesプロパティに画像をアップロードできるのか試してみたいと思います。

 導入
さっそく試していきたいと思いますが、まずは開発環境についてです。
今回は、Pythonのパッケージ管理ツールとしてuvを使用する環境を想定しています。notion-clientライブラリを...]]></description><link>https://zenn.dev/yamamoto666999/articles/18b77000066b16</link><guid isPermaLink="true">https://zenn.dev/yamamoto666999/articles/18b77000066b16</guid><pubDate>Wed, 24 Sep 2025 04:47:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---0haUli---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7Notion%2520API%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%259A%25E3%2581%258D%25E5%25B1%258B%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKektVQTc5TVBiV3Q2Mmh3SkswX1hFb3ZGZ2NvVDVMX3FJcFVtSXQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かずき屋さん</dc:creator></item><item><title><![CDATA[FastAPIをVercelへまた置いてみた。官報ビューワーアップデート]]></title><description><![CDATA[
 はじめに
官報ビューワーという簡易RSSビューワーを作成してからおよそ数ヶ月。
ほぼほぼ誰にも使われていない気がするけど、、
ちょいちょい自分で眺めては、ほぉこんなのがあるのかと自分がヘビーユーザー化してしまいました。
PDFもどうせならダウンロードしたいよなぁー。と思ってバックエンドを用意して実装することにしました。
この記事では、簡単にVercel上へのホスティングまでを記します。

 対象読者

FastAPIやPythonなどを使ったものをvercel上でホスティングしてみたい方


 過去の関連記事
https://zenn.dev/testkun08080/article...]]></description><link>https://zenn.dev/testkun08080/articles/vercel-fastapi-f9075f29818051</link><guid isPermaLink="true">https://zenn.dev/testkun08080/articles/vercel-fastapi-f9075f29818051</guid><pubDate>Wed, 24 Sep 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uNJyy4Xa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FastAPI%25E3%2582%2592Vercel%25E3%2581%25B8%25E3%2581%25BE%25E3%2581%259F%25E7%25BD%25AE%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%25E5%25AE%2598%25E5%25A0%25B1%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:testkun08080%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxMjE5ZTQ2YzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>testkun08080</dc:creator></item><item><title><![CDATA[青空文庫からテキストをとってきたい]]></title><description><![CDATA[
 ■テキスト欲しいな
なにかテキストを触ってみたいというときに、青空文庫はとても有り難い存在です。たまに、スクリプトで扱いたいとなったとき、毎回ちょっとはやってみるものの、その後忘れる、というのがよくありますね。
といったくらいの人向けのメモ書き。
!
ここでは、ローカルにダウンロードしたデータを検索するといった用途を想定しています。ダウンロードしたデータを機械学習等の素材等として利用するには著作権への配慮が必要です。


 ●想定層

ファイルパスの概念がわかる
CLIで pythonを叩ける
pip を知っている
import を知っている

あたり。

 ■まずは
青空文庫におけ...]]></description><link>https://zenn.dev/enjoetoh/articles/first_read_aozora</link><guid isPermaLink="true">https://zenn.dev/enjoetoh/articles/first_read_aozora</guid><pubDate>Wed, 24 Sep 2025 00:50:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iYExLCrn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%2592%25E7%25A9%25BA%25E6%2596%2587%25E5%25BA%25AB%25E3%2581%258B%25E3%2582%2589%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E3%2581%25A8%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258D%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:enjoetoh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUzMWU2OGQ3ZjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enjoetoh</dc:creator></item><item><title><![CDATA[データサイエンスの文脈で理解するデザインパターン]]></title><description><![CDATA[
 はじめに
エンジニアではなくデータサイエンティストとしてデザインパターンについて初めて勉強したとき、なんとなくは理解しつつも正直なところ実務での利用イメージがピンと来ませんでした。その理由の一つとして、データサイエンスの現場では特に、教科書的なデザインパターンの例がそっくりそのまま使われることは少ない、あるいはそれに気づかないことが多いためだと思われます。
そこで本記事では、データサイエンスのフレームワークやその使用例を通してそれぞれのパターンを見ることで、デザインパターンをより身近なものに感じられるようにすることを試みます。

 そもそもデザインパターンとは
デザインパターンとは、...]]></description><link>https://zenn.dev/suikabar/articles/d742c01a973923</link><guid isPermaLink="true">https://zenn.dev/suikabar/articles/d742c01a973923</guid><pubDate>Wed, 24 Sep 2025 00:14:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IvHLNy-X--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25AE%25E6%2596%2587%25E8%2584%2588%25E3%2581%25A7%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suikabar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0MGViZTg4ZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suikabar</dc:creator></item><item><title><![CDATA[dockerコンテナ内部でdebugpyで実行しVSコードからアタッチでのリモートデバッグの話]]></title><description><![CDATA[
 はじめに
当記事は
https://zenn.dev/tazzae999jp/articles/14073b30d62d95
この記事の続編として書いてる
この続きの設定である
発端となった環境構築は下記のとおり
2025/09の下旬の話である。
本番環境が古めのLinuxでpython 2.7.5のシステムの保守開発のため、
ローカルにその環境を再現する環境を作った

開発環境としてdocker compose環境を構築した
本番はRed HatだったがDockerHub公開イメージがないため、
ベースになってるcentOSの対応するバージョンでのイメージを使った

dockerコ...]]></description><link>https://zenn.dev/tazzae999jp/articles/a8e394f10a6c1f</link><guid isPermaLink="true">https://zenn.dev/tazzae999jp/articles/a8e394f10a6c1f</guid><pubDate>Tue, 23 Sep 2025 18:34:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P9VRaVi---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E5%2586%2585%25E9%2583%25A8%25E3%2581%25A7debugpy%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2597VS%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%258B%25E3%2582%2589%25E3%2582%25A2%25E3%2582%25BF%25E3%2583%2583%25E3%2583%2581%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%25AE%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25A4%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwZmVjMjAxYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たつお</dc:creator></item><item><title><![CDATA[Julia の World Age と他の JIT 言語の違いをサンプルコードで比較してみた]]></title><description><![CDATA[
 はじめに
動的言語では「関数を実行中に再定義できる」ことが大きな魅力の一つです。しかし、これを 高性能な JIT 最適化 と両立させるのは簡単ではありません。
Julia はこの問題を解決するために world age という独自の仕組みを採用しています。一方で、Java / .NET / JavaScript / Ruby / Python などの他の JIT 言語は、「推測して最適化 → 壊れたら捨てる」という方式で対応しています。
この記事では、Julia の world age の仕組みと、他の JIT 言語がどのように動的再定義を処理しているかを、サンプルコードとコア概念を...]]></description><link>https://zenn.dev/y_watanabe11/articles/d0cbc3d19a4460</link><guid isPermaLink="true">https://zenn.dev/y_watanabe11/articles/d0cbc3d19a4460</guid><pubDate>Tue, 23 Sep 2025 15:47:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--00CZDv5L--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Julia%2520%25E3%2581%25AE%2520World%2520Age%2520%25E3%2581%25A8%25E4%25BB%2596%25E3%2581%25AE%2520JIT%2520%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25A7%25E6%25AF%2594%25E8%25BC%2583%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Y-Watanabe11%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkMDAyYTNiOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Y-Watanabe11</dc:creator></item><item><title><![CDATA[Docker + Poetry で Django の開発環境を構築する]]></title><description><![CDATA[
 はじめに
こんにちわ！
今回は Docker を使用して Django の開発環境を構築していきます。
パッケージ管理は poetry を使用します。今まで pip で管理することが多かったのですが、最近 poetry を使用する機会があり、パッケージ管理を JavaScript の npm のように厳密に依存関係を管理できることを知りました。チーム開発をする上でも環境差分を極力減らせるので便利だなと思ったので、今回は Docker コンテナ内に poetry をインストールして開発環境を構築していこうと思います。

 対象読者

Docker + Poetry を使用して、Djan...]]></description><link>https://zenn.dev/tanaodev/articles/django-docker-poetry-20250902</link><guid isPermaLink="true">https://zenn.dev/tanaodev/articles/django-docker-poetry-20250902</guid><pubDate>Tue, 23 Sep 2025 14:35:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--a8PR8uNi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%2520%252B%2520Poetry%2520%25E3%2581%25A7%2520Django%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25AA%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVmODEyZjNhZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たなお</dc:creator></item><item><title><![CDATA[python venvのVIRTUAL_ENV環境変数はなんなのか]]></title><description><![CDATA[source .venv/bin/activateとかでセットされているけれどpythonの挙動に影響がない気がして不思議に思った。

 本質情報リンク
https://peps.python.org/pep-0405/

 定義なさそう
別にPEP 405で定義されている気配がなく、これは伝統的にそうなっている感がある。
他のツールに通知するのにはこれが必要。shellのprompt変えるとか。

 pythonの挙動はどうなってるのか

 pyvenv.cfgを探す
現在のディレクトリと、1階層上を探す。
シンボリックリンクだった場合は、シンボリックリンクを起点を探す。
.venv/...]]></description><link>https://zenn.dev/impactaky/articles/6441a489555ebb</link><guid isPermaLink="true">https://zenn.dev/impactaky/articles/6441a489555ebb</guid><pubDate>Tue, 23 Sep 2025 12:51:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S93j_Rot--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:python%2520venv%25E3%2581%25AEVIRTUAL_ENV%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AF%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taki4416%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxYjhmODg0ZTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taki4416</dc:creator></item><item><title><![CDATA[pandas merge関数を使って、表を拡張する]]></title><description><![CDATA[

 やりたいこと
例えばショッピングサイトで、ひとつの商品ページの中で、色やサイズのバリエーションを選んで注文出来たりすることがあります。この商品データを Excel とかで作ると、ほとんど共通のデータで、色やサイズや価格や Jancode といった部分的にちょっと違うデータの作成となります。そこで、共通部分のメインデータと、差分の部分だけのサブデータを作って、pandas の merge関数で合体させて拡張されたデータを作ってみようという話です。
※あくまでも、pandas の merge 関数の利用法のひとつの紹介が目的です。データも適当な小さい例ですのでご了承下さい。

 具体的...]]></description><link>https://zenn.dev/tanoue/articles/3eb5ebf82967bb</link><guid isPermaLink="true">https://zenn.dev/tanoue/articles/3eb5ebf82967bb</guid><pubDate>Tue, 23 Sep 2025 06:33:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e61TfI3J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:pandas%2520merge%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E8%25A1%25A8%25E3%2582%2592%25E6%258B%25A1%25E5%25BC%25B5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tanoue%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0NzVkYTgyOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tanoue</dc:creator></item><item><title><![CDATA[@メンションで返信を行ってくれるSlackアプリを作る]]></title><description><![CDATA[
 はじめに
この記事は【LLM+RAG】自分自身と会話できるナレッジベースシステムを作ってみたのナレッジベースシステムのconversation API をSlackメンションから叩けるようにした記事です。
画像赤枠の部分について書いています。


 できること
@メンションで質問を投げるとスレッドで返してくれます


 Slack アプリ作成
こちらのページからアプリを作り、アプリ経由でAIを介してナレッジベースにアクセスできるconversation APIを叩き、内容をスレッドに返信で返します。

 初期設定
こちらのページから「Create New App」をクリックし新しいア...]]></description><link>https://zenn.dev/nijigen_plot/articles/create_slack_app</link><guid isPermaLink="true">https://zenn.dev/nijigen_plot/articles/create_slack_app</guid><pubDate>Tue, 23 Sep 2025 04:19:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r6uf-ea_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540%25E3%2583%25A1%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%25E8%25BF%2594%25E4%25BF%25A1%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258BSlack%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nijigen-plot%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjZjdhNDYwNjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nijigen-plot</dc:creator></item><item><title><![CDATA[コード短編小説「エントロピー」]]></title><description><![CDATA[
 コード短編小説「エントロピー」
最初に失われたのは、挨拶だった。
人々はおはようを言わなくなり、かわりに短いシグナルを端末に流した。
signal("day.start")
それで十分だと思われていた。だが、応答はすぐに曖昧になり、やがて None が返るようになった。

神崎ユウは夜更けの街を歩きながら、残骸となったログを拾っていた。
アーカイブに保存されているのは、欠けた文字と時刻だけ。
[23:01] &gt;&gt;&gt; ???  
[23:01] &lt;&lt;&lt; None  
「会話は熱だった。だが熱は拡散し、戻ってこない」
彼はポケットのメモリスティックを握...]]></description><link>https://zenn.dev/yasuna_ide/articles/e9047c3ec42e30</link><guid isPermaLink="true">https://zenn.dev/yasuna_ide/articles/e9047c3ec42e30</guid><pubDate>Tue, 23 Sep 2025 00:09:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--89eWG96m--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E7%259F%25AD%25E7%25B7%25A8%25E5%25B0%258F%25E8%25AA%25AC%25E3%2580%258C%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%2594%25E3%2583%25BC%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasuna%2520Ide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY5NzBlNjljZmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasuna Ide</dc:creator></item><item><title><![CDATA[CUDA PythonではじめるCUDAプログラミング]]></title><description><![CDATA[
 1.はじめに
筆者はGPUプログラミングの勉強を進めています。GPU処理の背景にある仕組みを理解し、より効率的にGPUを利用できるようになることを目指しています。学習を進めながら並行して記事化を進めたいと思っており、同じような状況の人たちの役に立てると嬉しいです。
教科書は「Programming Massively Parallel Processors」（PMPP）を中心とします。この本の流れに沿って理論的な理解をすすめつつ、実験等を交えて一緒に理解を深められたら嬉しいです。
今回はGPUプログラミングの基本的な概念を整理のうえ、CUDAを用いた計算のコアとなる部分（CUDA K...]]></description><link>https://zenn.dev/bobtk/articles/26925007b68726</link><guid isPermaLink="true">https://zenn.dev/bobtk/articles/26925007b68726</guid><pubDate>Tue, 23 Sep 2025 00:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QPEOy3UL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CUDA%2520Python%25E3%2581%25A7%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2582%258BCUDA%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BC%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmE0SzgwSm1KVXMyRnZObHcwNjNUdkJVM3N2OGFXZHFpZ1VOVndvMmhMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぼぶ</dc:creator></item><item><title><![CDATA[Ollama + PostgreSQL + pg_vectorで作るプライベートRAGシステム]]></title><description><![CDATA[
 Ollama + PostgreSQL + pg_vectorで作るプライベートRAGシステム

 はじめに - なぜローカルRAGシステムなのか
企業の文書管理において、ChatGPTやClaudeのようなクラウドAIサービスは確かに強力ですが、機密性の高い文書を外部APIに送信することには大きなリスクが伴います。また、大量の文書処理時のAPI費用や、インターネット接続に依存する制約も無視できません。
そこで注目されているのが、完全ローカル環境で動作するRAG（Retrieval-Augmented Generation）システムです。本記事では、Ollama、PostgreSQL...]]></description><link>https://zenn.dev/okamyuji/articles/rag_system_for_japanese</link><guid isPermaLink="true">https://zenn.dev/okamyuji/articles/rag_system_for_japanese</guid><pubDate>Mon, 22 Sep 2025 23:55:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EbxhSkzG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ollama%2520%252B%2520PostgreSQL%2520%252B%2520pg_vector%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25BC%25E3%2583%2588RAG%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okamyuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY5YjFmNDYyYjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okamyuji</dc:creator></item><item><title><![CDATA[OpenTelemetryベースで始めるAzure Monitorでのアプリケーション監視]]></title><description><![CDATA[
 はじめに
アプリケーション開発・運用をしているとユーザー体験の継続的な改善のためにシステムのボトルネック分析といった作業はつきものです。
そこでアプリケーションを監視を構成し、改善のための情報を収集するのが重要です。
これは「Application Performance Monitoring（APM）」と呼ばれます。
APM を実現するためには、いわゆる APM ツールを導入し、アプリケーションのログデータやメトリクスなどを収集します。
本記事では、アプリケーションから OpenTelemetry ベースで Azure Monitor にテレメトリデータを集約し、アプリケーションの...]]></description><link>https://zenn.dev/yamaday/articles/opentelemetry-azure-monitor</link><guid isPermaLink="true">https://zenn.dev/yamaday/articles/opentelemetry-azure-monitor</guid><pubDate>Mon, 22 Sep 2025 17:01:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eazJsQUj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenTelemetry%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BAzure%2520Monitor%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E7%259B%25A3%25E8%25A6%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuki%2520Yamada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlNTRkZTk0ZWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuki Yamada</dc:creator></item><item><title><![CDATA[VSCode - GitHub CopilotをローカルLLMで動かしてみた(Ollama, gpt-oss:20b)]]></title><description><![CDATA[
 背景
セキュリティ上の理由でオンラインLLMを使えない環境でも、ローカルLLMはどの程度実用できるのか試してみました。

 読者層
「社外にコードを出せない」「ネット制限のある環境で開発」している人向け。

 Ollamaとは
Ollamaとは、大規模言語モデル（LLM）をWindows、Mac、Linuxなどのローカル環境で簡単に実行できるツールです。複雑な設定をすることなく、さまざまなオープンソースモデルをダウンロード、管理、実行できます。
https://ollama.com/

 gpt-oss:20bとは
gpt-oss:20bは、OpenAIによって開発・公開されたオープ...]]></description><link>https://zenn.dev/okyugog/articles/6666289d84fed6</link><guid isPermaLink="true">https://zenn.dev/okyugog/articles/6666289d84fed6</guid><pubDate>Mon, 22 Sep 2025 13:28:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MnyPxj2M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%2520-%2520GitHub%2520Copilot%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25ABLLM%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528Ollama%252C%2520gpt-oss%253A20b%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yugo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2MWM1Y2RiYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yugo</dc:creator></item><item><title><![CDATA[Pythonで図形グリッドとカラーパターンを自動生成するスクリプト]]></title><description><![CDATA[
 🧐 はじめに
グリッドデザインは、グラフィックデザインや映像制作でよく使われる手法です。しかし、グリッドの分割数や、どの部分に色を付けるかを一つひとつ決めるのは手間がかかります。
今回は、Pythonを使って、グリッドの分割数や形状、そして色をランダムに生成し、多様なデザインアイデアを効率的に生み出すためのスクリプトを紹介します。このスクリプトは、Adobe IllustratorやAfter Effects、Processingなどのツールでの作業を効率化するのに役立ちます。


 💡 スクリプトの概要
このスクリプトは、以下の処理を自動で行います。


グリッドのランダム設定:
...]]></description><link>https://zenn.dev/nagayamachiyuri/articles/283f89eaa9b810</link><guid isPermaLink="true">https://zenn.dev/nagayamachiyuri/articles/283f89eaa9b810</guid><pubDate>Mon, 22 Sep 2025 09:59:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--93eiGM2P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E5%259B%25B3%25E5%25BD%25A2%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2589%25E3%2581%25A8%25E3%2582%25AB%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nagayama%2520Chiyuri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxZDE4NjgwZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nagayama Chiyuri</dc:creator></item><item><title><![CDATA[Pythonで図形と色の組み合わせ設定を自動生成するスクリプト]]></title><description><![CDATA[
 🧐 はじめに
グラフィックデザインや映像制作では、図形の形や色、回転角度といった要素を組み合わせる作業が頻繁に発生します。多くのパターンを試したい時、一つひとつ手動で設定するのは非効率です。
今回は、Pythonを使って、多角形の形状、回転角度、そしてRGBカラーをランダムに生成し、様々なデザインパターンを効率的に作成するためのスクリプトを紹介します。


 💡 スクリプトの概要
このスクリプトは、以下の処理を自動で行います。


設定値の入力: ユーザーが「何種類の組み合わせを作成するか」と「何パターン作成するか」を入力します。

図形と回転角度のランダム生成: 入力されたパターン...]]></description><link>https://zenn.dev/nagayamachiyuri/articles/0832f4ea904810</link><guid isPermaLink="true">https://zenn.dev/nagayamachiyuri/articles/0832f4ea904810</guid><pubDate>Mon, 22 Sep 2025 09:58:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MlW6P83z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E5%259B%25B3%25E5%25BD%25A2%25E3%2581%25A8%25E8%2589%25B2%25E3%2581%25AE%25E7%25B5%2584%25E3%2581%25BF%25E5%2590%2588%25E3%2582%258F%25E3%2581%259B%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nagayama%2520Chiyuri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxZDE4NjgwZTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nagayama Chiyuri</dc:creator></item></channel></rss>