<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 06 Apr 2025 04:37:05 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[rustでonnxモデルを呼び出して必要なメタデータを取得]]></title><description><![CDATA[
 概要
物体検出モデルなどを呼び出す際に、学習モデルで定義されているクラス情報などを事前に推論前に取得したくなりました。
しかし、生成AIに聞いてもメタデータをうまく取り出す方法を教えてくれないし、事前にyamlファイル用意して呼び出せと言われてしまうし、tractの該当してそうなPRを見ても完全に対応が終わってなさそうなので、なんとかならないかと思い色々中身のソースコードを確認して弄っていたらできたので記事にしました。

 解説
今回はtractを使ってonnxモデルを呼び出して、必要なメタデータを取り出したいと思います。
ちなみに、メタデータと呼んでいるのは下図の右側に表示されてい...]]></description><link>https://zenn.dev/bamboo_nova/articles/b9c4e880083662</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/b9c4e880083662</guid><pubDate>Sun, 06 Apr 2025 02:11:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dDPpksDY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25A7onnx%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E5%25BF%2585%25E8%25A6%2581%25E3%2581%25AA%25E3%2583%25A1%25E3%2582%25BF%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[Rustでnixクレートのptyを使おうとした時にコンパイルエラーになった]]></title><description><![CDATA[Rustのnixクレートのpty系の機能を使おうとしたらコンパイルエラーになったので、備忘録として残します
同時にforkでもおそらく似た理由でハマったので、ptyについて書いた後に書きます

 1.Rustのnixクレートのptyを使おうとしたらコンパイルエラーになった

 1.1.前提

 使用ソフトバージョン



動作環境
バージョン




Rust
1.82.0


nix
0.29.0


macOS sequoia
15.3.1




 プロジェクト構成
.
├── Cargo.lock
├── Cargo.toml
├── README.md
└── src
    ...]]></description><link>https://zenn.dev/tiai1995/articles/cbb32fb7c26f8e</link><guid isPermaLink="true">https://zenn.dev/tiai1995/articles/cbb32fb7c26f8e</guid><pubDate>Sun, 06 Apr 2025 02:03:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tj_inRQa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7nix%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AEpty%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%258A%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tiai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tiai</dc:creator></item><item><title><![CDATA[Rust で Zip を展開する]]></title><description><![CDATA[
 結論
速度がほしいか？ならば ripunzip を使え
サンプルコード
https://github.com/nodamushi/zenn-program/tree/main/src/rust/unzip

 Rust で Zip を展開したい
Windows でポータブルな Python のビルドである Win Python の Zip をダウンロードしてWindows Explorer で展開したらくっそ遅かったです。
なんとその時間 2分 20 秒。びっくらするほど遅い。

というわけで、これを使って Rust で zip 展開して速度を確認してみます。

 比較ライブラリ
今...]]></description><link>https://zenn.dev/nodamushi/articles/daa25bc92543ce</link><guid isPermaLink="true">https://zenn.dev/nodamushi/articles/daa25bc92543ce</guid><pubDate>Sat, 05 Apr 2025 11:25:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0fdWy4te--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520Zip%2520%25E3%2582%2592%25E5%25B1%2595%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nodamushi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1OGJmMTkwNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nodamushi</dc:creator></item><item><title><![CDATA[タイムトラベルクエリ：リアルタイムシステムにおけるバグ修正とトラブル解決のためのデータタイムマシン]]></title><description><![CDATA[
 タイムトラベルクエリとは？
タイムトラベルクエリを使うと、特定の時点におけるテーブルの状態を取得できます。最新のデータだけでなく、「時間を巻き戻して」過去のレコードを確認することが可能です。
RisingWave において、タイムトラベルクエリは FOR SYSTEM_TIME AS OF 句を使用します：
SELECT * FROM table_name FOR SYSTEM_TIME AS OF timestamp_expression;
ここで、timestamp_expression には以下のような形式を使用できます：

Unix タイムスタンプ（例：1721024455）...]]></description><link>https://zenn.dev/rwcolinpeng/articles/784b708f05bc45</link><guid isPermaLink="true">https://zenn.dev/rwcolinpeng/articles/784b708f05bc45</guid><pubDate>Sat, 05 Apr 2025 06:11:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WaWeSBLc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2599%25E3%2583%25AB%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%2590%25E3%2582%25B0%25E4%25BF%25AE%25E6%25AD%25A3%25E3%2581%25A8%25E3%2583%2588%25E3%2583%25A9%25E3%2583%2596%25E3%2583%25AB%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%259E%25E3%2582%25B7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:RisingWave%2520Labs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZmFjMDNiZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>RisingWave Labs</dc:creator></item><item><title><![CDATA[RustのAnyを解説：リフレクションなしの型内省]]></title><description><![CDATA[

 前書き
Rust がランタイムリフレクション（実行時リフレクション）を導入しない理由については、以下の RFC を参考にできます：
https://internals.rust-lang.org/t/pre-rfc-runtime-reflection/11039
要点をまとめると、次のようになります：

DI（依存性注入）は必ずしもリフレクションを使って実現する必要はなく、Rust にはより優れた実装方法がある；
派生マクロと Trait の組み合わせにより、実装をランタイムからコンパイル時に移行できる；
例えば、プロシージャルマクロを用いて、依存性注入などのリフレクション機能を...]]></description><link>https://zenn.dev/leap_adam/articles/b497b0534adfc5</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/b497b0534adfc5</guid><pubDate>Sat, 05 Apr 2025 03:56:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lUocarYN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEAny%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%25E3%2583%25AA%25E3%2583%2595%25E3%2583%25AC%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25AE%25E5%259E%258B%25E5%2586%2585%25E7%259C%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【チートシート有】rust(locoってFW)で個人開発。Rubyistには良きかも。]]></title><description><![CDATA[
 Railsみたいな体験×Rustみたいな安全性を追い求めて...
※ Rubyistって書いちゃいましたが、Rails好きな人、ってニュアンスです💎
元々、Railsを主戦場に開発していた身としては、Railsの開発体験はなかなかに変えがたいです。
特に、Railsの実装柔軟性やgemの充実度、開発のスピード感にはいつも助けられています。
しかし、静的型付けを求めるとどうしても物足りなさがあります。
特にコードの保守性に関して課題を感じることがあります。
最近はTypescriptなど静的型付けの言語もよく触るので、
型安全なコードでバグの早期発見や保守性が上がることにもメリットを感...]]></description><link>https://zenn.dev/manabu/articles/f225a311fbab1e</link><guid isPermaLink="true">https://zenn.dev/manabu/articles/f225a311fbab1e</guid><pubDate>Sat, 05 Apr 2025 00:14:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TSUtG1R2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%25E6%259C%2589%25E3%2580%2591rust%2528loco%25E3%2581%25A3%25E3%2581%25A6FW%2529%25E3%2581%25A7%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2582Rubyist%25E3%2581%25AB%25E3%2581%25AF%25E8%2589%25AF%25E3%2581%258D%25E3%2581%258B%25E3%2582%2582%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Manabu%2520Kurita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hMZ0dORVhrSTM5eWlYU0pDZ2U2T0w4S2RFZmhBd2d2M2xUUU52PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Manabu Kurita</dc:creator></item><item><title><![CDATA[Android環境でRust製ライブラリを直接呼び出して使用する]]></title><description><![CDATA[
 今回は
前回は前提知識をなるべく活かす方向でC言語のレイヤーを挟みました。
今回は全体的な構成をシンプルに、なるべく使用言語などを少なくしたいのでRustでJNI用のライブラリを直接作成し呼び出します。
また、Pluginやビルドスクリプトの設定をしてRustのビルドも同時に行いたいと思います。
一応、比較のために今回の構成を図にすると以下の様になります。単純にJNIでRustで作成したライブラリを呼び出す形となります。

 手順
早速、実際の手順を確認していきます。
前提として前回で作成したJNIを使用したプロジェクトを使用します。
大まかに下記の手順で進めます。

Rust言語を...]]></description><link>https://zenn.dev/ubiblog2/articles/7c9e22d4341727</link><guid isPermaLink="true">https://zenn.dev/ubiblog2/articles/7c9e22d4341727</guid><pubDate>Thu, 03 Apr 2025 08:45:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mEzL9Jov--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7Rust%25E8%25A3%25BD%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E7%259B%25B4%25E6%258E%25A5%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TechSavvy_24%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3YTVmZDAwZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TechSavvy_24</dc:creator></item><item><title><![CDATA[ICP Ninjaを使ってみる]]></title><description><![CDATA[
 はじめに
分散型クラウドを実現するInternet Computer上で動作するCanisterの開発環境として、先日『ICP Ninja』が公開されました。
Webサイト上で動作する開発環境ですので、ローカルPC上に開発環境を用意する必要がありません。いくつかテンプレートが用意されていますので、初めての方でも今すぐたった3分で始められます。
20分間だけ利用可能な無料のPlayground環境へも簡単にデプロイできますので、ちょっとした動作確認やデモにも使えますし、保存したプロジェクトはダウンロードしたり、GitHubへExportする機能も用意されています。

 プロジェクトの作...]]></description><link>https://zenn.dev/halifax/articles/icp_ninja_tutorial</link><guid isPermaLink="true">https://zenn.dev/halifax/articles/icp_ninja_tutorial</guid><pubDate>Wed, 02 Apr 2025 16:35:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--N8Co-xbZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ICP%2520Ninja%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:halifax%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNWUxM2Q5YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>halifax</dc:creator></item><item><title><![CDATA[【Rust Nightly】コンパイル時文字列型を作ってみた]]></title><description><![CDATA[nightly環境であれば
const fn foo&lt;const N1: usize, const N2: usize&gt;(a: [u8; N1], b: [u8; N2]) -&gt; [u8; {N1 + N2}] {
    // 何かしらの処理
}
のようなジェネリック定数を計算できるのでコンパイル時文字列くらい作れるのではと思って試した。

 結果
完成したコードがこちら。
使用している箇所は最後のmain関数。
#![feature(generic_const_exprs)]

struct ConstString&lt;const N: usize&gt; ([u...]]></description><link>https://zenn.dev/block/articles/fab2ce44066e00</link><guid isPermaLink="true">https://zenn.dev/block/articles/fab2ce44066e00</guid><pubDate>Wed, 02 Apr 2025 16:10:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aM5xU0C7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%2520Nightly%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E6%2599%2582%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E5%259E%258B%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:block%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U3NDY3M2JlZGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>block</dc:creator></item><item><title><![CDATA[Rustで書かれたBiomeがNode.jsで動く仕組み]]></title><description><![CDATA[
 はじめに
Rust で自作したパッケージを Node.js のプロジェクトで動かしてみたくなりました。
同じく Rust で書かれた Biome ではどのように動かしているのだろう？と気になり調べてみました。
執筆時点(2025/03/15)での main ブランチのコードを読んでみたいと思います。

 結論
今回参考にした Biome では、
「各 OS 向けにビルドしたバイナリを Node.js のchild_process.spawnSync()で実行」していました。
具体的には、

各 OS 向けにバイナリファイルのビルドを行う
各 OS 向けのpackage.jsonを生成...]]></description><link>https://zenn.dev/aidemy/articles/run-rust-in-nodejs-20250315</link><guid isPermaLink="true">https://zenn.dev/aidemy/articles/run-rust-in-nodejs-20250315</guid><pubDate>Wed, 02 Apr 2025 11:33:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q6u_xmK4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258B%25E3%2582%258C%25E3%2581%259FBiome%25E3%2581%258CNode.js%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258F%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2584%25E3%2583%2581%25E3%2583%258E%25E3%2582%25B3%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhNmVhZTQ3ZDkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Aidemy%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNDk2MGJlYzIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ツチノコ</dc:creator></item><item><title><![CDATA[ゲームエンジンBevy【Rust言語】やってみた]]></title><description><![CDATA[
 まえがき
Rust言語が人気といわれて数年経つと思いますがさわってみようと調べていたら
Bevyというゲームエンジンもあるようなので一緒にさわってみました。

使用環境
・Windows 11 (24H2)
・Rust 1.85.1 (edition:2024)
・Bevy 0.15.3


 Rust環境のインストール
Playgroundというインストールなしでブラウザ上で実行できる環境もあります。
https://play.rust-lang.org/

BevyはRust言語で開発するためまずはRust環境をセットアップします。

以下から「RUSTUP-INIT.EXE(6...]]></description><link>https://zenn.dev/oxygen_tech/articles/b08b88fe5f452d</link><guid isPermaLink="true">https://zenn.dev/oxygen_tech/articles/b08b88fe5f452d</guid><pubDate>Wed, 02 Apr 2025 09:57:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EVRbw7RF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3Bevy%25E3%2580%2590Rust%25E8%25A8%2580%25E8%25AA%259E%25E3%2580%2591%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:OXYGeN%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FhMDA5MjhjMGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>OXYGeN</dc:creator></item><item><title><![CDATA[Rustの非同期タスクをリアルタイムで可視化するツール「await-tree」を作ってみた]]></title><description><![CDATA[Await-Tree：非同期タスクの正確で有益なツリー構造ダンプを生成します。このツールは Apache License（バージョン 2.0）のもとで配布されています。
Async Rust における Future は、様々な制御フローを実現するために、自由に合成・ネストすることが可能です。それぞれの Future の実行をノードとして表現するならば、非同期タスクの実行全体は、論理的なツリー構造として整理できます。そしてこのツリーは、Future のポーリング、完了、キャンセルの過程で絶えず変化していきます。
await-tree は、各 Future に instrument_awai...]]></description><link>https://zenn.dev/rwcolinpeng/articles/6eff75be218e6f</link><guid isPermaLink="true">https://zenn.dev/rwcolinpeng/articles/6eff75be218e6f</guid><pubDate>Tue, 01 Apr 2025 08:51:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wD2Hz6Iw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E3%2582%2592%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2581%25A7%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%258Cawait-tree%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:RisingWave%2520Labs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdmZmFjMDNiZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>RisingWave Labs</dc:creator></item><item><title><![CDATA[[Rust]Try smol ! Task + mpmc channel]]></title><description><![CDATA[
 目的
async_stdの開発サポートが終了し，smolへの移行が推奨されている．smolの雰囲気を知るために，非同期タスクとchannel周りを見てみる.
(基本的にTokioしか使ってこなかったためasync_stdをあまり知らず，かつasync_stdはsmolを内部で使用しているため、smol特有のものではないかもしれない..🙇‍♂️)

 Main

 Tokio
Tokioでは#[tokio::main]アトリビュートでmain関数をasyncにしている.
内部ではblock_onをしている.
#[tokio::main]
async fn main() {
    //...]]></description><link>https://zenn.dev/ryo_nakaya/articles/380981e0bf174a</link><guid isPermaLink="true">https://zenn.dev/ryo_nakaya/articles/380981e0bf174a</guid><pubDate>Tue, 01 Apr 2025 03:37:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pFH4HXlX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255DTry%2520smol%2520%2521%2520Task%2520%252B%2520mpmc%2520channel%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakaryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg4MDVhNjgyY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakaryo</dc:creator></item><item><title><![CDATA[業務でRustを採用してみた]]></title><description><![CDATA[Specteeでエンジニアをしている和山です。
最近あるプロジェクトでRustを採用してみました。
今回はRustの採用経緯や良かった点、課題点を紹介します。
今後業務で採用しようかと悩んでいる方の参考になれば幸いです。

 ✨️ 採用経緯
採用経緯は2点です。

パフォーマンスを向上する手段として利用できるか検証したかった
技術的挑戦をしたかった


 経緯1. パフォーマンスを向上する手段として利用できるか検証したかった
弊社が提供しているプロダクトの裏側では、さまざまな形式のデータを分析・処理するためのバッチ処理が稼働しています。
データは不定期・定期に入電し、形式も多岐にわたりま...]]></description><link>https://zenn.dev/spectee/articles/spectee-rust-project</link><guid isPermaLink="true">https://zenn.dev/spectee/articles/spectee-rust-project</guid><pubDate>Tue, 01 Apr 2025 00:08:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MRWnU09P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25A5%25AD%25E5%258B%2599%25E3%2581%25A7Rust%25E3%2582%2592%25E6%258E%25A1%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:N.Wayama%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwYzYyY2ZlNDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Spectee%2520Developers%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkY2ZhN2VlNzguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>N.Wayama</dc:creator></item><item><title><![CDATA[Rust のトレイトの解説：使い方から内部仕組みまで]]></title><description><![CDATA[
Rust の設計目標の中で「ゼロコスト抽象」は非常に重要な要素であり、Rust が高水準な言語表現能力を持ちながらも、性能の劣化を伴わないことを可能にしています。ゼロコストの基盤はジェネリクスとトレイトにあります。これらはコンパイル時に高水準の構文を効率的な低レベルコードへと変換し、実行時の高性能を実現しています。本記事では、trait の使い方とよくある 3 つの問題について説明し、それらの問題を掘り下げることでその実装原理を解説していきます。

 使用方法

 基本的な使い方
trait の主な目的は動作を抽象化することで、他のプログラミング言語における「インターフェース」に似てい...]]></description><link>https://zenn.dev/leap_adam/articles/60cd995145fb12</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/60cd995145fb12</guid><pubDate>Mon, 31 Mar 2025 20:54:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--41iv0IoI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AE%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%258B%25E3%2582%2589%25E5%2586%2585%25E9%2583%25A8%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[ABC399:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 399のA~D問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc399/tasks/abc399_a
解説
文字列 S と T の対応する文字を1文字ずつ比較し、異なる文字の個数を数えます。
コード

abc399a.rs
use proconio::{input, marker::Chars};

fn main() {
    // 入力
    input! {
        n: usize,
        s: Chars,
        t: ...]]></description><link>https://zenn.dev/nakst_hide/articles/4b263521d92027</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/4b263521d92027</guid><pubDate>Mon, 31 Mar 2025 13:00:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1GEfEleY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC399%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[[Rust] eBPF で TCP/UDP 通信を監視するプログラムを作成した。]]></title><description><![CDATA[
 はじめに
以前、ICMP パケットをキャプチャについての記事を書いたところから、ネットワークへの興味が強まっています。
本記事では、eBPF を使用して TCP/UDP の通信を監視するプログラムを、Rust で開発していきます。

 eBPFとは
eBPF（Extended Berkeley Packet Filter）は、Linuxカーネル内で安全に実行されるサンドボックス化されたプログラム環境です。ユーザースペースからカーネルに直接プログラムをロードし、JITコンパイルでネイティブコードに変換して高速に動作します。検証器によってプログラムの安全性がチェックされ、不正な動作やシス...]]></description><link>https://zenn.dev/shu_kitamura/articles/9dc1af87d6a4f0</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/9dc1af87d6a4f0</guid><pubDate>Mon, 31 Mar 2025 13:00:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NNp7AqUu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520eBPF%2520%25E3%2581%25A7%2520TCP%252FUDP%2520%25E9%2580%259A%25E4%25BF%25A1%25E3%2582%2592%25E7%259B%25A3%25E8%25A6%2596%25E3%2581%2599%25E3%2582%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rustのトレイトとトレイト境界を理解する]]></title><description><![CDATA[
Trait は他のプログラミング言語で一般的に「インターフェース（interface）」と呼ばれる機能に似ていますが、いくつかの違いがあります。Trait は特定の型が他の型と共有できる機能を持つことを Rust コンパイラに伝えます。Trait を使用することで、共通の動作を抽象的な方法で定義できます。Trait Bound を使えば、ジェネリック型が特定の動作を持つ型であることを指定できます。
簡単に言えば、Trait は Rust におけるインターフェースであり、ある型がそのインターフェースを使用する際の動作を定義するものです。Trait を使えば、複数の型間で共通の動作を制約で...]]></description><link>https://zenn.dev/leap_adam/articles/ba5950c0a0a17d</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/ba5950c0a0a17d</guid><pubDate>Sun, 30 Mar 2025 18:28:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pb8NJ2QL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A8%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E5%25A2%2583%25E7%2595%258C%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[@SWC製のExecutorを作った]]></title><description><![CDATA[
 はじめに
最初TSXを使っていたら速さに驚きが隠せなく,多機能で良いことづくめだったので愛用していました。
しかし慣れとは恐ろしいものでもっといいエグゼキューターを作りたいなと模索していたら出来たので紹介します。
ちなみにTSXは内部でesbuildを使用しているためラッパーしてパス解決をうまくやっているライブラリで、ウォッチャー機能とかcommonjsに対応していたりと最高のライブラリとなっています。
そんな中でTypeScriptのチェッカーがGoで書き直された最中、チェックは爆速になるはずなのですが実行はtscだと遅すぎます、なのでTSXが唯一の存在だったのですがもっと速くをコ...]]></description><link>https://zenn.dev/refirst11/articles/b5fa3a5a45e8fb</link><guid isPermaLink="true">https://zenn.dev/refirst11/articles/b5fa3a5a45e8fb</guid><pubDate>Sun, 30 Mar 2025 09:55:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Uxlu40MQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540SWC%25E8%25A3%25BD%25E3%2581%25AEExecutor%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Refirst%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3NTFjOTI4YTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Refirst</dc:creator></item><item><title><![CDATA[Rustの derive ってなに？]]></title><description><![CDATA[
 はじめに
Rustのコードの中でよく見かけるこの記述：
#[derive(Debug, Clone, PartialEq)]
最初は「これって何だろう？」とよくわかりませんでした。でも調べていくうちに、この derive がRustで便利な機能を簡単に使えるようにする魔法のようなものだと知って感動しました！
「deriveって何？」という方の参考になればうれしいです。

 deriveとは
Rustにおける#[derive(...)]は、構造体（struct）や列挙型（enum）に対して、標準的なトレイト（機能）を自動実装するための属性です。
例えば、下記のコードでは、Rustコンパ...]]></description><link>https://zenn.dev/ha_maya0104/articles/9aebe7e92fdc9a</link><guid isPermaLink="true">https://zenn.dev/ha_maya0104/articles/9aebe7e92fdc9a</guid><pubDate>Sun, 30 Mar 2025 09:43:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3jKGrEXI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%2520derive%2520%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2581%25AB%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%25A7%25E3%2581%2599%25E3%2581%258E%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlMzJkOGNmYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆですぎコーン</dc:creator></item></channel></rss>