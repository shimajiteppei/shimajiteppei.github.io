<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 02 Mar 2025 09:24:35 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Rust は関数型? なにそれ?]]></title><description><![CDATA[「Rust は所有権と借用がややこしい」「C++ の代替なんでしょ？」という先入観が先行しがちですが、じつは Rust には関数型プログラミング（FP）の考え方が色濃く取り入れられています。本記事では、FP の主要な概念に沿って Rust でどう活かせるのか を探っていきましょう。

 関数型プログラミングの重要な概念
一般的に、関数型プログラミング（FP）では以下のような特徴が強調されます。


イミュータビリティ (Immutability)

データを “変える” のでなく、常に “新しいデータ” を生成する



純粋関数 (Pure Functions)

関数が同じ入力に対し...]]></description><link>https://zenn.dev/tcool/articles/42c200a25253cc</link><guid isPermaLink="true">https://zenn.dev/tcool/articles/42c200a25253cc</guid><pubDate>Sun, 02 Mar 2025 04:33:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5OU_tB9O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AF%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%253F%2520%25E3%2581%25AA%25E3%2581%25AB%25E3%2581%259D%25E3%2582%258C%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-cool%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liVmViMFdEdFlWcUtvVDRvYktNeDNTUGZvRTVFOW9rNUV0c21Dc2RvPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-cool</dc:creator></item><item><title><![CDATA[リスキリングとしての取り組み（2025/2：第4週）]]></title><description><![CDATA[2025年2月第4週（2025/2/23～2025/3/1）にリスキリング（プログラミング）として取り組んだことをまとめました。

 ＜Topic＞
Chrome OS FlexがM133にアップデートされたり、Windows Insiderでアップデート配信があったりと慌ただしい
また、定期的に更新が発生するIDEの先行プレビュー版が順当に更新
そんな中、.NET 10のプレビューが開始され、Rustコンパイラも1.85になった模様。それぞれの更新内容は、追って検証したい

 詳細は、GitHubを参照ください

 【2/23】


＜.NET＞ Visual Studio 2022を...]]></description><link>https://zenn.dev/tatsukiyoshi/articles/5a130c0af4373e</link><guid isPermaLink="true">https://zenn.dev/tatsukiyoshi/articles/5a130c0af4373e</guid><pubDate>Sun, 02 Mar 2025 04:08:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M8j4clHC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25AE%25E5%258F%2596%25E3%2582%258A%25E7%25B5%2584%25E3%2581%25BF%25EF%25BC%25882025%252F2%25EF%25BC%259A%25E7%25AC%25AC4%25E9%2580%25B1%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25BE%25B0%25E8%2581%2596%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlRwMzFwR2w4eEFqS3YtSlVsQVgyRnUyZDBCSU9OaEJFNG9TTGJSQWtVXzE0UktwVnM0QT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>辰聖</dc:creator></item><item><title><![CDATA[RustのCopy & Cloneトレイト：違いを見分けられますか？]]></title><description><![CDATA[

 兄弟のような Copy と Clone
Rust において、Copy と Clone のトレイトは、型のコピーの挙動を制御するために使用されます。これらを使うことで、型の値をどのようにコピーするか、またどのような状況でコピーが可能かを定義できます。本記事では、この二つのトレイトの役割と使い方について詳しく説明し、コード例を交えてその使用方法を紹介します。

 Copy トレイト
Copy トレイトは、型がビット単位でコピーできることを示します。このトレイトを実装した型は、代入、関数への引数渡し、戻り値として返す際に自動的にコピーされます。

 Copy トレイトとは？
Copy ト...]]></description><link>https://zenn.dev/leap_adam/articles/fa34255d9d5986</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/fa34255d9d5986</guid><pubDate>Sat, 01 Mar 2025 21:32:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qFDwwVVJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AECopy%2520%2526%2520Clone%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25EF%25BC%259A%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E8%25A6%258B%25E5%2588%2586%25E3%2581%2591%25E3%2582%2589%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2599%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[RustでAWS Lambda上でFeatureFlagを扱う]]></title><description><![CDATA[
 目的
FeatureFlagを使ってデプロイせずにプログラムを動きを制御したいです。
AWS Lambdaで起動しているRustのコードで利用してみます。
FeatureFlagを作るのは以下の記事で説明しています。
AWS AppConfigのFeatureFlagをCDKでデプロイする
AWS Lambdaにデプロイする方法は以下の記事で説明しています。
AWS LambdaにRustのコードをデプロイする

 AWS Lambda Layer
Using AWS AppConfig Agent with AWS Lambda
にあるようにAppConfigの情報を取り出してくれ...]]></description><link>https://zenn.dev/aoyagikouhei/articles/7343f819008b50</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/7343f819008b50</guid><pubDate>Sat, 01 Mar 2025 05:36:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rUhY1kVk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7AWS%2520Lambda%25E4%25B8%258A%25E3%2581%25A7FeatureFlag%25E3%2582%2592%25E6%2589%25B1%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[AWS LambdaにRustのコードをデプロイする]]></title><description><![CDATA[
 目的
AWS LambdaにRustのコードをデプロイしたいです。
色々方法がありますが、手動でコンパイルして配置する方法でいきます。
またアーキテクチャはARM64にします。

 ディレクトリ構成
- apps
  - services
    - api
      Cargo.toml
      - src
        main.rs
- infra
  - cdk
    - lib
      cdk-lambda-stack.ts
  - build
    - api
      bootstrap

 Rust

 ツールの準備
sudo apt install...]]></description><link>https://zenn.dev/aoyagikouhei/articles/bc9d46f5749df4</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/bc9d46f5749df4</guid><pubDate>Sat, 01 Mar 2025 04:50:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oU7IHRwM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520Lambda%25E3%2581%25ABRust%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[Rust で WebAssembly? なにそれ?]]></title><description><![CDATA[
 はじめに
WebAssembly のエコシステムが充実してきた今日、プログラミング言語 Rust の話をよく耳にしますよね。そして、「そんなの知らないよ。はいはい。」と右から左に聞き流しているあなたのためにこの記事を書きました。内容は、Rust の未経験者を対象にしています。
Rust は「C++ のように速く、安全性が高い」と注目されているプログラミング言語です。「JavaScript で十分にやっていけるし…」と思っている方も、WebAssembly を使うなら Rust を覚えておくと何かと便利です。この記事では、Rust がどんな言語なのか、なぜそんなに注目されているのか、そ...]]></description><link>https://zenn.dev/tcool/articles/fa17600da4cf3a</link><guid isPermaLink="true">https://zenn.dev/tcool/articles/fa17600da4cf3a</guid><pubDate>Sat, 01 Mar 2025 00:06:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Av76Ctw7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520WebAssembly%253F%2520%25E3%2581%25AA%25E3%2581%25AB%25E3%2581%259D%25E3%2582%258C%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-cool%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liVmViMFdEdFlWcUtvVDRvYktNeDNTUGZvRTVFOW9rNUV0c21Dc2RvPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-cool</dc:creator></item><item><title><![CDATA[メモリと仲良しになろう！[超入門編]]]></title><description><![CDATA[!
次編でメモリアロケータの実装解説をします。記事作成中のため完成までお待ちください🥺


 はじめに
近年メモリのことをあまり考えずにプログラムが書けるので、メモリが寂しそうだなぁと思い一筆執りました。メモリ周りの知識でお役に立てれば幸いです。
余談
もしもメモリが女の子だったら「メモリン」っていう名前がいいなぁ...


 誰のための記事か？(for whom)

メモリの役割が分からない人
メモリ上でどのようにデータが載るのかが分からない人
アロケータが何か分からない人
どのようにアロケーションが行われるか分からない人


 なぜ学ぶのか？ (Why)

近年はメモリをあまり意識し...]]></description><link>https://zenn.dev/tomoikey/articles/ab2b065bdf334c</link><guid isPermaLink="true">https://zenn.dev/tomoikey/articles/ab2b065bdf334c</guid><pubDate>Fri, 28 Feb 2025 23:21:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ES1XLnot--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2581%25A8%25E4%25BB%25B2%25E8%2589%25AF%25E3%2581%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%255B%25E8%25B6%2585%25E5%2585%25A5%25E9%2596%2580%25E7%25B7%25A8%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomoikey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlZTJjNDgxYzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tomoikey</dc:creator></item><item><title><![CDATA[thiserror を使って、ソースコードの行数を削減した]]></title><description><![CDATA[
 概要
std::error::Error を使用して実装していたエラーの型を、
thiserror クレートを使用して実装するように変更した。
その結果、ソースコードを約半分に削減することできた。

 削減したソースコード
自作の正規表現コマンドで使用している ParseError を一例に、
std::error::Error と thiserror のそれぞれのソースコードを記載する。
他のエラーも含めた、変更時の commit は以下。
https://github.com/shu-kitamura/regular-expression/commit/d8b2535f1e2c9...]]></description><link>https://zenn.dev/shu_kitamura/articles/8a72e29d87a619</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/8a72e29d87a619</guid><pubDate>Fri, 28 Feb 2025 13:00:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0_VXy4MH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:thiserror%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E8%25A1%258C%25E6%2595%25B0%25E3%2582%2592%25E5%2589%258A%25E6%25B8%259B%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Rustにおける大規模プロジェクトの管理を極める]]></title><description><![CDATA[

 Rust プロジェクトの構造
Rust を学習している多くの方がよく困惑するのは、「自分のプロジェクトのファイル構造が正しいのか？標準的なのか？」という点です。そこで、今回は基本的な main.rs と lib.rs から始めて、大規模な Rust プロジェクトのコード構成について詳しく見ていきましょう。

 Crate（クレート）


Crate は Rust の基本的なコンパイル単位です。各 Crate は独立したコンパイルターゲットとなり、ライブラリ（lib crate）または実行可能ファイル（binary crate）のどちらかになります。
1 つの Crate には「ルー...]]></description><link>https://zenn.dev/leap_adam/articles/474270dd493357</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/474270dd493357</guid><pubDate>Fri, 28 Feb 2025 11:56:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GZsEL3Xm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E5%25A4%25A7%25E8%25A6%258F%25E6%25A8%25A1%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E6%25A5%25B5%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[今更ながらNESエミュレーターを作成した話 PPU編]]></title><description><![CDATA[
 はじめに
WED株式会社でレシート買取アプリONEのバックエンドエンジニアをしているsorakoroです。
前回のCPU編に続き、NESの画面の状態をレンダリングするコンポーネントであるPPU(Picture Processing Unit)について話をしたいと思います。

 メモリマップ
まずNESのPPUは独自のメモリ空間を持っており、メモリマップは以下のようになっています。



アドレス
サイズ
用途




0x0000-0x1FFF
0x2000
Pattern Tables


0x2000-0x2FFF
0x1000
Name Tables


0x3000-0x3E...]]></description><link>https://zenn.dev/wed_engineering/articles/95c65b0fe13b7b</link><guid isPermaLink="true">https://zenn.dev/wed_engineering/articles/95c65b0fe13b7b</guid><pubDate>Fri, 28 Feb 2025 10:07:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2-GcZiPe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%258A%25E6%259B%25B4%25E3%2581%25AA%25E3%2581%258C%25E3%2582%2589NES%25E3%2582%25A8%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2520PPU%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sorakoro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxYjlmMzI3YWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:WED%2520Engineering%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHhraEJuZTFYbG5LVFBKS2g1clBEZURYc2FQQmNtVDc5M2tsQzhfQ0pGdS1vPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sorakoro</dc:creator></item><item><title><![CDATA[RustのOrderingを活用して信頼性の高い並行処理を実現する]]></title><description><![CDATA[
並行プログラミングにおいて、メモリ操作の順序を正しく管理することは、プログラムの正確性を保証する上で重要な鍵となります。Rust は、アトミック操作とメモリ順序（Ordering）列挙型を提供することで、開発者がマルチスレッド環境で安全かつ効率的に共有データを操作できるようにしています。本記事では、Rust における Ordering の原理と使用方法を詳しく解説し、開発者がこの強力なツールをより深く理解し、適切に活用できるようにすることを目的とします。

 メモリ順序の基礎
現代のプロセッサやコンパイラは、パフォーマンスを最適化するために、命令やメモリ操作を並べ替えることがあります。...]]></description><link>https://zenn.dev/leap_adam/articles/de512e8cbfb6d1</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/de512e8cbfb6d1</guid><pubDate>Thu, 27 Feb 2025 16:51:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fMN5uCtD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEOrdering%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E4%25BF%25A1%25E9%25A0%25BC%25E6%2580%25A7%25E3%2581%25AE%25E9%25AB%2598%25E3%2581%2584%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[【Rust】Osaki.rsでLTしてきました！【イベントレポ】]]></title><description><![CDATA[
 🎉 参加したイベント
下記イベントに参加しました！
結論参加者の皆さんも運営の方も優しく気さくで、大変楽しい時間を過ごせました！
Rust気になっている方、Rustについて勉強されたい方、Rustについて学んだ結果をアウトプットしたい方にはとってもおすすめです！
https://osaki-rs.connpass.com/event/343903/

 🤔 何話してきたの？

 「Dioxusでフロントエンドへの苦手意識が減った話」
資料はこちら！
https://www.docswell.com/s/2323-code/ZP2XP6-2025-02-27-232611/1

 🤔 ...]]></description><link>https://zenn.dev/2323_code/articles/b8ed266c3857d1</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/b8ed266c3857d1</guid><pubDate>Thu, 27 Feb 2025 15:39:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UU4cC2fh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Osaki.rs%25E3%2581%25A7LT%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%25E3%2580%2590%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AC%25E3%2583%259D%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyZGQ3OTI1ODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item><item><title><![CDATA[VSCodeでRustの不要なインポートを削除する]]></title><description><![CDATA[
 TL;DR

インポート文全体を選択する

Cmd + . (macOS) または Ctrl + . (Windows) を押す

Remove the unused import を選択する

ファイルセーブ時に自動でやる方法があったら教えてください
]]></description><link>https://zenn.dev/local/articles/63cb3e920547a8</link><guid isPermaLink="true">https://zenn.dev/local/articles/63cb3e920547a8</guid><pubDate>Wed, 26 Feb 2025 19:57:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gA6eMw5l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25A7Rust%25E3%2581%25AE%25E4%25B8%258D%25E8%25A6%2581%25E3%2581%25AA%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E5%2589%258A%25E9%2599%25A4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Catfish%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzOGQ5MDdiN2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Catfish</dc:creator></item><item><title><![CDATA[Leptos の `<Show/>` コンポーネントを自分で実装しようとしたら地味に手強かった]]></title><description><![CDATA[こんにちは。Fairy Devices株式会社 となんらかの関わりがある nogiro (Twitter (現 Twitter): @nogiro_iota) です。
フロントエンドも Rust で書きたいなという欲求があるので、個人的に Leptos Book を読んでいます。コンポーネントにコンポーネントを渡す章 を読んで [1]、前の方の 制御フローを定義する章 で出てきた &lt;Show/&gt; コンポーネント [2] を自分で実装できそうだなと思ったら、ちょっとだけ苦戦したので紹介します。
最終的なソースコード
コメントのある行の ViewFn が調べないと実装できなかった...]]></description><link>https://zenn.dev/fairydevices/articles/08429899922072</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/08429899922072</guid><pubDate>Wed, 26 Feb 2025 09:01:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Sa4_IWqD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Leptos%2520%25E3%2581%25AE%2520%2560%253CShow%252F%253E%2560%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%2588%2586%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E5%259C%25B0%25E5%2591%25B3%25E3%2581%25AB%25E6%2589%258B%25E5%25BC%25B7%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nogiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NGU1YjkxNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nogiro</dc:creator></item><item><title><![CDATA[RustでRSAの素因数を解読する]]></title><description><![CDATA[
 RSA暗号
RSA（Rivest-Shamir-Adleman）暗号[1]は、公開鍵暗号方式[2]の一つで、データの暗号化と署名に使用されます。この方式は、ロナルド・リベスト[3][4]、アディ・シャミア[5]、レオナード・アデルマン[6]によって1977年に「A Method for Obtaining Digital Signatures and Public-Key Cryptosystems[7]」という論文として発表されました。RSAは、公開鍵と秘密鍵をキーペアとして、任意のデータを暗号化・復号化します。
RSAは、公開鍵と秘密鍵をキーペアとして、データの暗号化と復号化、デ...]]></description><link>https://zenn.dev/kkent030315/articles/9432b2e74bc7cc</link><guid isPermaLink="true">https://zenn.dev/kkent030315/articles/9432b2e74bc7cc</guid><pubDate>Wed, 26 Feb 2025 04:05:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tomdm8Bi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7RSA%25E3%2581%25AE%25E7%25B4%25A0%25E5%259B%25A0%25E6%2595%25B0%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkent030315%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0NTk2NTRjZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkent030315</dc:creator></item><item><title><![CDATA[Rust 100 % のモノリポ Web アプリを作りたい！(PostgreSQL初期設定編)]]></title><description><![CDATA[こんばんにちは❗️さらに加速していきます．はやく getting started したいので．
今回行うのは以下画像の 5. となります．

はやく 6. 以降を行いたくて記事書いてる所ある．

まずは起動前にユーザーやデータベースを作成する必要があると思ったのでサーバー起動の項は飛ばしました．

とりあえずここからは PostgreSQL 特有の内容が続くのでスクショ貼った後内容を説明していきます．






ハアハア……貼り終わったのでまとめていきます．
まずデータベースを作ろうとしてエラーを吐きました．
このエラーがどういう意味を持つかと言うと，

ユーザーがいないのでサーバーに...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-22</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-22</guid><pubDate>Tue, 25 Feb 2025 19:01:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6p1cSHID--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520100%2520%2525%2520%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AA%25E3%2583%259D%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528PostgreSQL%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[Rust 100 % のモノリポ Web アプリを作りたい！(ディレクトリ構築とPostgreSQLインストール編)]]></title><description><![CDATA[こんにちはこんばんは．
ところでこういう構成ってモノリポっていうらしいですね．
単一のリポジトリでやっていくのでモノ+リポ(ジトリ)と．
今回は文字多めでいきたい．なるべく．
……今回こそ……文字……

 Actix Web + Yew + SeaORM + PostgreSQL で構築する場合の構築手順とディレクトリがどうなるか教えて下さい


いつものって感じがしますねえ．
ちなみに PostgreSQL は

sudo apt install postgresql
とコマンド叩けばつくれます……
PostgreSQL のページから

の，Download をクリック．するとこんな画...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-21</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-21</guid><pubDate>Tue, 25 Feb 2025 13:16:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZKanTBzT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520100%2520%2525%2520%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AA%25E3%2583%259D%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A8PostgreSQL%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[Rustで一気通貫にWebアプリを作りたい！(要件定義編)]]></title><description><![CDATA[こんにちは．早いものでもうこの Zenn 投稿も 20 記事目となりました．
なお今回は Gemini 2.0 flash と対話しながら Rust だけで Web アプリを作って Vercel とかにデプロイしたいなーみたいな話です．僕が詰まったところの共有になれば幸いです．
以下，Gemini 2.0 flash との対話をスクリーンショットしたものを載せていきます

 Rust でWebアプリを作成して Vercel にデプロイする際の最適な技術スタックを教えてください



速さと非同期処理に強いとの面で Actix Web に惹かれました．フロントは Rust で書きたいので ...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-20</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-20</guid><pubDate>Tue, 25 Feb 2025 11:54:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z7J7tOJt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25B8%2580%25E6%25B0%2597%25E9%2580%259A%25E8%25B2%25AB%25E3%2581%25ABWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528%25E8%25A6%2581%25E4%25BB%25B6%25E5%25AE%259A%25E7%25BE%25A9%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[[Bevy] StandardMaterialを拡張する]]></title><description><![CDATA[BevyではStandardMaterialを使うことで基本的な物理ベースのレンダリングができます。
でも、、、
でも、、
でも、
もっとすごいことをしたい！
Shadertoyにあるようなかっこいいやつを作りたい！
そんなときどうすればよいのでしょうか？

 ExntendedMaterialでStandardMaterialをパワーアップ！
ExntendedMaterialを使うことでStandardMaterialの機能をさらに拡張してVertex, Frangmentの両方のシェーダーを編集できます。
使用例はこちらです。なんかそれっぽいやつが作れるみたいです。
Extende...]]></description><link>https://zenn.dev/omini/articles/763e52446de169</link><guid isPermaLink="true">https://zenn.dev/omini/articles/763e52446de169</guid><pubDate>Mon, 24 Feb 2025 19:15:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4TGrUL3x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520StandardMaterial%25E3%2582%2592%25E6%258B%25A1%25E5%25BC%25B5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[serdeに入門してSerializerとDeserializerを実装した]]></title><description><![CDATA[
自身のブログにも同じ内容の記事を投稿しています
https://www.tunamaguro.dev/articles/20250224-serdeに入門した/

serdeの入門として、serde::Serializerとserde::Deserializerを実装したので、serdeについて理解したことを記録として残します
https://github.com/tunamaguro/messagepack-rs
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, PartialE...]]></description><link>https://zenn.dev/tunamaguro/articles/415e5d38b7bf25</link><guid isPermaLink="true">https://zenn.dev/tunamaguro/articles/415e5d38b7bf25</guid><pubDate>Mon, 24 Feb 2025 16:00:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7UETtEik--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:serde%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6Serializer%25E3%2581%25A8Deserializer%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tunamaguro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tunamaguro</dc:creator></item></channel></rss>