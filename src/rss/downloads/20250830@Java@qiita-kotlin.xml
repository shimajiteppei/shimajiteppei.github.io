<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-30T20:37:52+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073828</id>
    <published>2025-08-30T20:37:52+09:00</published>
    <updated>2025-08-30T20:37:52+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/mikan0000/items/51bff294693c5182a65d"/>
    <url>https://qiita.com/mikan0000/items/51bff294693c5182a65d</url>
    <title>NASA APIを使って簡単なアプリ作ってみた③</title>
    <content type="text">今回は②の続きで今日の天文台画面の作成を記録する。
（異常系は考慮しない）

①NASA APIを使って簡単なアプリ作ってみた①
②NASA APIを使って簡単なアプリ作ってみた②　
③NASA APIを使って簡単なアプリ作ってみた③ ←こちら
④NASA APIを使って簡...</content>
    <author>
      <name>mikan0000</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073741</id>
    <published>2025-08-30T15:30:54+09:00</published>
    <updated>2025-08-30T15:32:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/c3366ee253964f0e498d"/>
    <url>https://qiita.com/nozomi2025/items/c3366ee253964f0e498d</url>
    <title>【デザインパターン】 フライウェイトパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
フライウェイト（Flyweight）パターン は、
オブジェクトの共通部分を共有し、メモリ使用量を削減する デザインパターンです。

解決する問題

同じようなオブジェクトを大量に生成するとメモリを圧迫する
共通の情報は 共有（intrinsic s...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073607</id>
    <published>2025-08-30T06:25:41+09:00</published>
    <updated>2025-08-30T06:25:41+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yuta-10112022/items/fa47976be51c1bf94e0a"/>
    <url>https://qiita.com/yuta-10112022/items/fa47976be51c1bf94e0a</url>
    <title>画像ライブラリのPicasso・Glide・Coilの違い</title>
    <content type="text">Android で画像を表示する方法でいくつかのやり方があります。Picasso・Glide・Coilの実装方法と特徴をまとめます。

Picasso
比較的古めのライブラリでシンプルで軽量、コードがわかりやすい。GIF・動画の扱いには工夫が必要
Picasso.get()...</content>
    <author>
      <name>yuta-10112022</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2073372</id>
    <published>2025-08-29T15:42:50+09:00</published>
    <updated>2025-08-29T16:24:32+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/d988e4e3a0e56dc39b69"/>
    <url>https://qiita.com/nozomi2025/items/d988e4e3a0e56dc39b69</url>
    <title>【デザインパターン】 ファサードパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ファサード（Facade）パターン は、
複雑なサブシステムにシンプルな統一インターフェースを提供する デザインパターンです。

解決する問題

複雑な処理（多くのクラスや API 呼び出し）が絡んでおり、クライアントから扱いにくい
クライアントがサ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
