<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/javascript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/javascript/feed"/>
  <title>JavaScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでJavaScriptタグが付けられた新着記事</description>
  <updated>2025-08-01T20:20:51+09:00</updated>
  <link>https://qiita.com/tags/javascript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061458</id>
    <published>2025-08-01T20:20:51+09:00</published>
    <updated>2025-08-01T20:20:51+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/qiita21409102/items/6447187d4e57f63e3b36"/>
    <url>https://qiita.com/qiita21409102/items/6447187d4e57f63e3b36</url>
    <title>#プログラミング #Javascript 人生収支をシミュレーションして必要預金を予測するツール</title>
    <content type="text">本内容を利用した場合の一切の責任を私は負いません。

概要
保険担当が保険会社のツールでしてくれたことが便利そうだったので作ってみた。

バージョン

OS
OS 名:Microsoft Windows 11 Home
OS バージョン:10.0.26100 N/A ビル...</content>
    <author>
      <name>qiita21409102</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061442</id>
    <published>2025-08-01T19:27:01+09:00</published>
    <updated>2025-08-01T19:27:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kkawaharanet/items/3ff9ff4e418e8633ebce"/>
    <url>https://qiita.com/kkawaharanet/items/3ff9ff4e418e8633ebce</url>
    <title>JavaScript の map() とかは他の言語でどう書くのか</title>
    <content type="text">JavaScript のあれはどう書くんだっけ、というのをまとめている。

every

  every() メソッドは、列内のすべての要素が指定された関数で実装されたテストに合格するかどうかをテストします。これは論理値を返します。

JavaScript
cons...</content>
    <author>
      <name>kkawaharanet</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061435</id>
    <published>2025-08-01T19:02:31+09:00</published>
    <updated>2025-08-01T19:06:54+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/ttatsf/items/5d5e69b6274b9bd7085c"/>
    <url>https://qiita.com/ttatsf/items/5d5e69b6274b9bd7085c</url>
    <title>[Paiza]二次元累積和やってみた</title>
    <content type="text">おもしろそうなのでやってみました。

あらかじめ累積和の二次元配列を作って、インデックスアクセスで値を表示する作戦。
累積和は、まず各rowごとに横方向に 足し算でscanして、縦方向に 足し算でzip でscanするとできるはず。
const scan //: ...</content>
    <author>
      <name>ttatsf</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061421</id>
    <published>2025-08-01T18:17:58+09:00</published>
    <updated>2025-08-01T18:17:58+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Yudai-HARA/items/fc5e755e17cedc1ed518"/>
    <url>https://qiita.com/Yudai-HARA/items/fc5e755e17cedc1ed518</url>
    <title>setTimeout(…, 0) って何の意味があるの？</title>
    <content type="text">概要
await new Promise(resolve =&amp;gt; setTimeout(resolve,0));

そのまま読めば「0ミリ秒待つ」。
何の影響も与えなそうに見えますが、そんなことはないです。
（実際にはわずかに処理遅延しますが、そういう意味ではありません。）...</content>
    <author>
      <name>Yudai-HARA</name>
    </author>
  </entry>
</feed>
