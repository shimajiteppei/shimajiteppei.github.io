<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-08-06T06:01:52+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2063414</id>
    <published>2025-08-06T06:01:52+09:00</published>
    <updated>2025-08-06T06:01:52+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kyooooonaka/items/cf6d16cbb20d7ec128b2"/>
    <url>https://qiita.com/kyooooonaka/items/cf6d16cbb20d7ec128b2</url>
    <title>【衝撃の結果】AWS SDK速度対決！Go vs Rust vs Python 実測してみた🚀</title>
    <content type="text">🎯  TL;DR（結論先出し）
Go圧勝！ でも、Rustも意外な健闘を見せました👀

🏆順位
言語
実行時間
CPU効率
一言コメント

🥇
Go
0.653秒
最高
やっぱりネットワーク処理最強

🥈
Rust
1.109秒
良好
CPU効率は優秀だけど....</content>
    <author>
      <name>kyooooonaka</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2062848</id>
    <published>2025-08-05T00:49:33+09:00</published>
    <updated>2025-08-05T00:49:33+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/isaac_leapcell/items/b9b30162cbc481d28b08"/>
    <url>https://qiita.com/isaac_leapcell/items/b9b30162cbc481d28b08</url>
    <title>Axum は Rust における Web 開発の未来を形作っている</title>
    <content type="text">Leapcell：サーバーレスWebホスティングの最高の選択肢

なぜAxumはRustエコシステムで最も有望なWebフレームワークなのか？
Rust開発者であれば、間違いなくAxumを耳にしたことがあるでしょう。Tokioチームによって開発されたこのWebフレームワーク...</content>
    <author>
      <name>isaac_leapcell</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2062587</id>
    <published>2025-08-04T14:03:36+09:00</published>
    <updated>2025-08-04T14:03:36+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/TechSavvy_24/items/98adf8e637a1e6979086"/>
    <url>https://qiita.com/TechSavvy_24/items/98adf8e637a1e6979086</url>
    <title>Rust言語のChumskyでパーサ入門</title>
    <content type="text">パーサとは
広義には、文字列をプログラミングで扱うデータ構造にするため、文字列の構文を解析すること(構文解析)で、その途中の文字列を単語単位に分割する処理(字句解析)を含む、全体の処理を指します。
つまり、文字列を解析してコンピューター上で使用するための前処理です。
例と...</content>
    <author>
      <name>TechSavvy_24</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061905</id>
    <published>2025-08-02T23:31:04+09:00</published>
    <updated>2025-08-02T23:31:04+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/neko_the_shadow/items/b9e9ba946d2b11a32bd4"/>
    <url>https://qiita.com/neko_the_shadow/items/b9e9ba946d2b11a32bd4</url>
    <title>Rustで2つのイテレータを結合する方法</title>
    <content type="text">Rustで2つのイテレータを結合する方法
Rustでは、2つのイテレータ（Iterator）を1つにつなげて連続的に扱いたい場面があります。そんなときに便利なのが、標準ライブラリに用意されている Iterator::chain メソッドです。

利用例

1. 基本：引数...</content>
    <author>
      <name>neko_the_shadow</name>
    </author>
  </entry>
</feed>
