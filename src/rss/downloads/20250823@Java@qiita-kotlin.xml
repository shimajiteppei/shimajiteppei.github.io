<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-23T17:09:49+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2070863</id>
    <published>2025-08-23T17:09:49+09:00</published>
    <updated>2025-08-23T17:09:49+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yuta317/items/cae320d6f0e360e93d0a"/>
    <url>https://qiita.com/yuta317/items/cae320d6f0e360e93d0a</url>
    <title>【Jetpack Compose】FABから共有・編集ボタンを展開するアニメーション実装</title>
    <content type="text">Jetpack Compose で FloatingActionButton (FAB) を使うと簡単に右下に丸いボタンを配置できます。
今回は、「追加」ボタンをタップすると 135° 回転して、そこから共有・編集のボタンがふわっと展開する UIを実装のサンプルです。
この...</content>
    <author>
      <name>yuta317</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2070818</id>
    <published>2025-08-23T14:52:12+09:00</published>
    <updated>2025-08-23T14:52:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/d774516c7f50e20ff9f9"/>
    <url>https://qiita.com/nozomi2025/items/d774516c7f50e20ff9f9</url>
    <title>【デザインパターン】ビルダーパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ビルダーパターン（Builder） は、複雑なオブジェクトを段階的に組み立てる仕組みを提供するデザインパターンです。

解決する問題

コンストラクタの引数が多すぎて可読性が落ちる（テレスコーピングコンストラクタ問題）
オプション項目が多いオブジェク...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2070481</id>
    <published>2025-08-22T16:09:01+09:00</published>
    <updated>2025-08-22T16:12:14+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/891abb001899b3e56763"/>
    <url>https://qiita.com/nozomi2025/items/891abb001899b3e56763</url>
    <title>【デザインパターン】抽象ファクトリパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
抽象ファクトリ（Abstract Factory） は、関連するオブジェクト群を一貫性のある形で生成するためのインターフェースを提供する デザインパターンです。

解決する問題

製品群（例：Button、TextField、Dialog）をまとめて...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2070130</id>
    <published>2025-08-21T17:23:54+09:00</published>
    <updated>2025-08-21T17:23:54+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/4a68d12a1fc539b1a582"/>
    <url>https://qiita.com/nozomi2025/items/4a68d12a1fc539b1a582</url>
    <title>【デザインパターン】 ファクトリーメソッド（Factory Method）パターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ファクトリーメソッド（Factory Method） は、オブジェクト生成の手順をサブクラスに委譲する デザインパターンです。

解決する問題

生成するオブジェクトの型を 実行時に切り替えたい

new を直接使うと 依存関係が強くなり拡張に弱い...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
