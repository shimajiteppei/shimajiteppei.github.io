<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-07-31T18:25:53+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2061013</id>
    <published>2025-07-31T18:25:53+09:00</published>
    <updated>2025-07-31T18:25:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/trgr/items/2a366e134922c3060c6b"/>
    <url>https://qiita.com/trgr/items/2a366e134922c3060c6b</url>
    <title>RustのAPIサーバーによる、PythonとSQLiteの役割の切り分けを行いました</title>
    <content type="text">何が出来るの？
Pythonで直接SQLiteを触らずに、RustのAPIを間に入れました。
Systemdで家庭内サーバーで自動化するだけならRustは重厚ですが、Node.jsのように迅速に作れ、ファイルや言語ごとに役割を明確にしました。
このプログラムはPython...</content>
    <author>
      <name>trgr</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2060340</id>
    <published>2025-07-30T07:57:01+09:00</published>
    <updated>2025-07-30T08:04:32+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/z-fujimori/items/89cf824705313f587197"/>
    <url>https://qiita.com/z-fujimori/items/89cf824705313f587197</url>
    <title>読書メモ [作って学ぶ]OSのしくみⅠ</title>
    <content type="text">はじめに

以前より少し気になっていた本を読んだ（読んでいる途中）ので記録します。
Rustをちゃんと使えるようになりたい、OSを理解したいと考えこの本を手に取りました。
初投稿につき、何卒ご容赦。ツッコミ所があればぜひ。

第2章
「Hello World!」を出...</content>
    <author>
      <name>z-fujimori</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2060213</id>
    <published>2025-07-29T23:12:48+09:00</published>
    <updated>2025-07-29T23:53:43+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/uldor-alberich13/items/8c9e2c60fa82fcf8b7f4"/>
    <url>https://qiita.com/uldor-alberich13/items/8c9e2c60fa82fcf8b7f4</url>
    <title>RustでC++のstd::variantみたいなものを作ってみた話</title>
    <content type="text">事の始まり
私はRustを主に使い、趣味程度に適当なものを作っては捨てるというのを繰り返している人なのですが、常々不満に思っているのがRustの列挙体の書きづらさです。
enum Example {
    A(i32),
    B(f64),
    C(String...</content>
    <author>
      <name>uldor-alberich13</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2060155</id>
    <published>2025-07-29T20:48:43+09:00</published>
    <updated>2025-07-30T20:10:22+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/AsahinaKei/items/4466500f507d4142fd2c"/>
    <url>https://qiita.com/AsahinaKei/items/4466500f507d4142fd2c</url>
    <title>Rust 関数</title>
    <content type="text">はじめに
Rust の関数を学習する。

Rust は 静的型付け言語 であるため、コンパイル時に変数の型は決定する。

immutable
変数の宣言には let キーワードを使用する。

変数を宣言する
let x = 10;

Rust では let で宣言し...</content>
    <author>
      <name>AsahinaKei</name>
    </author>
  </entry>
</feed>
