<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 23 May 2025 00:10:44 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Splide】スライド数が足りないときループスライダーを無効にする]]></title><description><![CDATA[Web制作において、SplideはJavaScriptのスライダーライブラリの一つとして広く使われており、特にループ処理と組み合わせて使用する方も多いと思います。
しかし、ループ処理を用いる際に注意が必要なのが、スライダーの幅に対してスライドの数が不足している場合です。このような状況では、意図しない挙動を防ぐために、スライダー自体を無効にするのが適切です。
たとえば、コーポレートサイトの新着記事をカード形式でスライド表示させる場合、投稿件数が少ないとスライダーとして機能させる必要がないことがあります。
それどころか、以下のように1件の記事が複数回表示されてしまい、意図しないループが発生す...]]></description><link>https://zenn.dev/ryo_hajime/articles/ad11b253a35199</link><guid isPermaLink="true">https://zenn.dev/ryo_hajime/articles/ad11b253a35199</guid><pubDate>Thu, 22 May 2025 23:38:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HwXtlg1R--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Splide%25E3%2580%2591%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E6%2595%25B0%25E3%2581%258C%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E7%2584%25A1%25E5%258A%25B9%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ryoichi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmN2NjODA5NTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ryoichi</dc:creator></item><item><title><![CDATA[ViteのBuildって何してるんだっけ]]></title><description><![CDATA[今までなんとなくで使っていたBuildって何してるんだっけー

 なんのためにBuildが行われているのか
私たちが書いたソースコードを、Webブラウザが効率的かつ正確に動作するように変換・最適化するため。。。ブラウザが理解し、効率的に実行できる『実行可能ファイル』を作成するため

 Buildすると何が起こるのか？　（ビルドプロセス）
ざっくり、、主に5つのことが行われる。

トランスパイル(Transpile)

JavaScript（ES6以降）、TypeScript、JSXなどの構文を、より広くブラウザがサポートしているJavaScript（主にES5）に変換


バンドル(Bu...]]></description><link>https://zenn.dev/kishida000/articles/5f9e49df653182</link><guid isPermaLink="true">https://zenn.dev/kishida000/articles/5f9e49df653182</guid><pubDate>Thu, 22 May 2025 14:16:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mRZd2HWY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vite%25E3%2581%25AEBuild%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25E3%2581%2597%25E3%2581%25A6%25E3%2582%258B%25E3%2582%2593%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kishida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmN2M5Nzc2MWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kishida</dc:creator></item><item><title><![CDATA[プログラミングメモ.ver1.0]]></title><description><![CDATA[授業、サークル、インターン、趣味などなど様々な機会で様々な言語に触れ頭が爆発しそうになっているので各セクションごとに新しく知ったことなどをまとめてみました。
HTML、CSS


 !でHTMLの定型分出現
ファイルを開きたいとき（編集）code test1.c      # ← VSCodeで開く（codeコマンドが使える場合）nano test1.c      # ← ターミナルで開く

 &lt;style&gt;は&lt;head&gt;の最後

 &lt;script&gt;は&lt;body&gt;の最後


 id（1つしか存在しない）	#container
.	class...]]></description><link>https://zenn.dev/oz_tech/articles/ae435f637399b8</link><guid isPermaLink="true">https://zenn.dev/oz_tech/articles/ae435f637399b8</guid><pubDate>Thu, 22 May 2025 05:12:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OpLubCZN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%25A1%25E3%2583%25A2.ver1.0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AA%25E3%2583%25BC%25E3%2582%25BA%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkOGM3NDdiYzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>オーズテック</dc:creator></item><item><title><![CDATA[JavaScriptオブジェクトのキー（プロパティ名）の書き方、全部解説します！]]></title><description><![CDATA[こんにちは！ JavaScriptでプログラミングをしていると、オブジェクトのキー（プロパティ名）の書き方がいくつかあって、「あれ？これはどういう意味だっけ？」と混乱することはありませんか？
{ key: value } だけでなく、[変数]: value とか、obj.key と obj['key'] の違いとか、ちょっとごちゃごちゃして見えますよね。
この記事では、そんなJavaScriptオブジェクトのキーに関するあらゆる表現方法を、一つ一つ丁寧に、オリジナルのサンプルコードを交えながら解説していきます。TypeScriptでの書き方も少し触れます。


 1. オブジェクトリテラ...]]></description><link>https://zenn.dev/noah11/articles/b789bcaa75c887</link><guid isPermaLink="true">https://zenn.dev/noah11/articles/b789bcaa75c887</guid><pubDate>Thu, 22 May 2025 02:49:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wffpKwZW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25EF%25BC%2588%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E5%2590%258D%25EF%25BC%2589%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%25E3%2580%2581%25E5%2585%25A8%25E9%2583%25A8%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2599%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yusuken%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjNjI1ODJjNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yusuken</dc:creator></item><item><title><![CDATA[Reactでよく出る"Each child in a list should have a unique key prop" のエラー対応]]></title><description><![CDATA[
 はじめに
Reactのmapで配列をループさせた時に、よく同じエラーが出ていたので備忘のために残しておきます。

 問題
一意の「キー」プロパティが必要です。と怒られていますね。
Each child in a list should have a unique "key" prop.
Reactは、リストの子要素が変更されたときに、どの要素が追加・削除・更新されたのかを高速に判断するためにkeyを使います。
keyがないと、仮想DOMの差分計算が正確にできず、値が更新出来なくなるためkeyは必須になります。
なのでkey は要素を取得する為に一意でないといけません。

 解決方法
...]]></description><link>https://zenn.dev/tsubasa0509/articles/01f28c0cd1f9d7</link><guid isPermaLink="true">https://zenn.dev/tsubasa0509/articles/01f28c0cd1f9d7</guid><pubDate>Wed, 21 May 2025 23:55:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gnnUEJkz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E3%2582%2588%25E3%2581%258F%25E5%2587%25BA%25E3%2582%258B%2522Each%2520child%2520in%2520a%2520list%2520should%2520have%2520a%2520unique%2520key%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TSUBASA_KK%2Cx_90%2Cy_121/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TSUBASA_KK</dc:creator></item><item><title><![CDATA[JavaScriptのreduce()がチョットワカル]]></title><description><![CDATA[
 初めに
仕事でjsを使用している際に、reduceについてあまり理解できていなかったなと思い、知識整理のため記事を作成しました。
!
この記事は、次の内容についてAIを使用しました。

文章表現改善
誤字脱字



 reduceとは
reduceは、配列に対して指定した関数を実行して、一つの値にまとめて返すメソッドのことである。
例えば、for文で配列の数字を全て足し合わせて、それを変数に代入すると下記の通りになる。
const nums = [1, 2, 3, 4, 5];
let sum = 0;

for (const num of nums) {
  sum += num;...]]></description><link>https://zenn.dev/sawa0369/articles/62012af0753831</link><guid isPermaLink="true">https://zenn.dev/sawa0369/articles/62012af0753831</guid><pubDate>Wed, 21 May 2025 23:34:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Fxx8aNeA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AEreduce%2528%2529%25E3%2581%258C%25E3%2583%2581%25E3%2583%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2582%25AB%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B2%25A2%25E3%2581%25AE%25E6%259D%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlZWFlMjc5NGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>沢の村</dc:creator></item><item><title><![CDATA[nullの扱いに注意...(TSでの工夫)]]></title><description><![CDATA[!
後日追記
この記事を読むにあたって私の知識の乏しさと勢いとノリで書いてしまった部分もあるので間違っている部分が多くあると思います。
数件コメントをいただきましたが、参考になるコメントです。
コメントを踏まえた上でリプレイスしてみました。
それも踏まえた上で読んでいただけると幸いです。

こんにちは。
てるし〜です。
JavascriptやTypescriptでプログラムを書いているとnullが出てくると思います。
みなさんはこれらを使っていますか？
nullを使う場合はしっかりとハンドリングする必要があります。
ですが、経験の浅い私はうっかり雑なハンドリングをしてしまいバグを起こして...]]></description><link>https://zenn.dev/terusi/articles/e243ead933d406</link><guid isPermaLink="true">https://zenn.dev/terusi/articles/e243ead933d406</guid><pubDate>Wed, 21 May 2025 19:04:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S3gUt41P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:null%25E3%2581%25AE%25E6%2589%25B1%25E3%2581%2584%25E3%2581%25AB%25E6%25B3%25A8%25E6%2584%258F...%2528TS%25E3%2581%25A7%25E3%2581%25AE%25E5%25B7%25A5%25E5%25A4%25AB%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2597%25E3%2580%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlM2M5MzkyNjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てるし〜</dc:creator></item><item><title><![CDATA[Sassのmixed-decls警告を自動で解消するStylelintカスタムルールを作ってみた]]></title><description><![CDATA[Sassのネスト機能は便利ですが、ネストされたルール（@mediaや入れ子セレクタ）の後に直接プロパティを宣言すると、将来的に挙動が変更される可能性があるため、mixed-declsの警告が表示されます。
既存コードが大量にある場合、手動で修正するのは大変です。そこで、--fix実行時に自動で警告を解消できるStylelintカスタムルールを作成しました。


 警告の説明
Sassでmixed-decls警告が発生するのは、ネストルールの後にプロパティ宣言を書くと、将来のCSS仕様に合わせて振る舞いが変わる可能性があるためです。例えば以下のような警告が表示されます：
Deprecati...]]></description><link>https://zenn.dev/mari_tt/articles/76aef135df0e88</link><guid isPermaLink="true">https://zenn.dev/mari_tt/articles/76aef135df0e88</guid><pubDate>Wed, 21 May 2025 12:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8lp8XCxM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Sass%25E3%2581%25AEmixed-decls%25E8%25AD%25A6%25E5%2591%258A%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%2599%25E3%2582%258BStylelint%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259E%25A0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MmR6R0NELUNvazhSZHppaDFQbkhVd1BDQjJmRTFhUWpMTzZuYlRsdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>鞠</dc:creator></item><item><title><![CDATA[Promiseの静的メソッド：Promise.all]]></title><description><![CDATA[
 はじめに
今私は、JSの非同期処理を100%理解したいと思い、以下の学習ロードマップを参考にして学習を進めています。
JSの非同期処理を理解するために必要だった知識と学習ロードマップ

この記事に

複数の Promise を扱うことのできる静的メソッドを学習することで単純な async/await でやるよりも効率的に目的をはたせることを理解できれば体感できるはずです。

とあったので、実際に体験したいと思います。今回は、Promise.allに特化して実践してきます。

 Promise.allとは
Promise.all() は複数の Promise をまとめて扱うための静的メ...]]></description><link>https://zenn.dev/akinko0915/articles/d73c044bdcf873</link><guid isPermaLink="true">https://zenn.dev/akinko0915/articles/d73c044bdcf873</guid><pubDate>Wed, 21 May 2025 10:33:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iiJmRVA4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Promise%25E3%2581%25AE%25E9%259D%2599%25E7%259A%2584%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25EF%25BC%259APromise.all%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akinko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSy13cHdwSE5jYThHWWJKMHBCb0NRU3A3WFlZd3Q0Wjc5SFY3clVhWENIUmFpSTlXZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akinko</dc:creator></item><item><title><![CDATA[Codexでdiff一括生成！Tetris実装からGitHub Actions自動デプロイまで]]></title><description><![CDATA[自分用の備忘録として、CodexやCodex Cloudに「リポジトリ全体に一度に適用可能なPR用のdiff」を一発で出力してもらうプロンプトを試してみた。結果は、Vanilla JavaScriptで動くTetrisのHTML/CSS/JS実装から、GitHub ActionsによるGitHub Pages自動デプロイ設定（.github/workflows/deploy.yml）まで、すべてまとめてdiff形式で返してくれて超便利。手順とコツを以下にまとめる。

プロンプト全体を「一度に適用可能なPull Requestのdiffを生成してください」と明示
目的（Tetrisの実装＋...]]></description><link>https://zenn.dev/unikoukokun/articles/d9f95ebea1ef80</link><guid isPermaLink="true">https://zenn.dev/unikoukokun/articles/d9f95ebea1ef80</guid><pubDate>Wed, 21 May 2025 02:52:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Sy7EQyDd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Codex%25E3%2581%25A7diff%25E4%25B8%2580%25E6%258B%25AC%25E7%2594%259F%25E6%2588%2590%25EF%25BC%2581Tetris%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%258B%25E3%2582%2589GitHub%2520Actions%25E8%2587%25AA%25E5%258B%2595%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25B3%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmYjA3NjA5OTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ユニコ🦄</dc:creator></item><item><title><![CDATA[アルゴリズム脳を鍛える！NeetCode問題（1〜17問）徹底解説]]></title><description><![CDATA[
 はじめに
Neetcodeのロードマップの内、1~17問をコードとともに解説していきます。Neetcodeとは就職・転職の面接を受ける際に出題データ構造とアルゴリズムに関わる問題をまとめたサイトで、アリゴリズム問題をどの順番で解いていくのが良いかというロードマップを提供してくれています。
https://neetcode.io/roadmap


 計算量オーダーについて
https://qiita.com/asksaito/items/59e0d48408f1eab081b5
アルゴリズムにおける計算量とは、アルゴリズムが問題を解くために必要とする時間やメモリの量を指し、主に2つの...]]></description><link>https://zenn.dev/arsaga/articles/81d909e002d7ca</link><guid isPermaLink="true">https://zenn.dev/arsaga/articles/81d909e002d7ca</guid><pubDate>Mon, 19 May 2025 23:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dsh2vwlq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B4%25E3%2583%25AA%25E3%2582%25BA%25E3%2583%25A0%25E8%2584%25B3%25E3%2582%2592%25E9%258D%259B%25E3%2581%2588%25E3%2582%258B%25EF%25BC%2581NeetCode%25E5%2595%258F%25E9%25A1%258C%25EF%25BC%25881%25E3%2580%259C17%25E5%2595%258F%25EF%25BC%2589%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BE%25E3%2581%2595%25E3%2581%258D%25E3%2581%25A1%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkN2YzMzc0YjcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Arsaga%2520Developers%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzczM2I3ZDlmZDUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まさきち</dc:creator></item><item><title><![CDATA[PrismaをAWS X-Rayで分析できるようにしてみる]]></title><description><![CDATA[LambdaなどでX-Rayを有効にするのは簡単に出来るので、最近は有効にすることが多いのですが、DBアクセスによく使うPrismaの部分も対象に出来ないかと試行錯誤してみました。
多少無理やり感はあるのですが、分析できるようには出来たので、備忘と共有として残しておきます。

 PrismaのX-Ray組み込みコード
早速ですが、下記がコードになります。
import AWSXRay from 'aws-xray-sdk'

const prisma = new PrismaClient({
  log: [{ level: 'query', emit: 'event' }],
}).$...]]></description><link>https://zenn.dev/playree/articles/58f26086025589</link><guid isPermaLink="true">https://zenn.dev/playree/articles/58f26086025589</guid><pubDate>Mon, 19 May 2025 13:07:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ssbe48vQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2582%2592AWS%2520X-Ray%25E3%2581%25A7%25E5%2588%2586%25E6%259E%2590%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:playree%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzc1OVNMOTM4THJqcFl0OUxnSUZKS2NlYThMTVEwbkwyS3oteFBxbUcyQTB3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>playree</dc:creator></item><item><title><![CDATA[TypeScriptの型のみで四則演算を実装する]]></title><description><![CDATA[
 TypeScriptの型のみで四則演算を実装する
型のみで四則演算を実装したので使った文法などのメモ

 実際の画面


 コード
そこまで高度なことはしていないと思うので、今回使った文法のみメモします。

 BuildArray&lt;A&gt; extends [...BuildArray&lt;B&gt;, ...infer Rest]


BuildArray&lt;B&gt;で配列を生成し、...で配列の要素を展開

infer Restで残りの要素をRestという型変数に推論

BuildArray&lt;A&gt; extends ~でA配列は[...BuildArra...]]></description><link>https://zenn.dev/mitate_gengaku/articles/type-level-arithmetic-operations</link><guid isPermaLink="true">https://zenn.dev/mitate_gengaku/articles/type-level-arithmetic-operations</guid><pubDate>Mon, 19 May 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RvyQhXSy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AE%25E3%2581%25BF%25E3%2581%25A7%25E5%259B%259B%25E5%2589%2587%25E6%25BC%2594%25E7%25AE%2597%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25BE%25A1%25E6%25A5%25AF%25E7%258E%2584%25E5%25B6%25BD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0tQOVRYWHQ5Qm1BLVplcURoLWdxUHl4RVFjMmNsRkhSNk95XzVVSVVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>御楯玄嶽</dc:creator></item><item><title><![CDATA[TypeScriptの型のみでシンプルなOXゲームを作ってみた]]></title><description><![CDATA[
 TypeScriptの型のみでシンプルなOXゲームを作ってみた
先日見かけたこの記事に衝撃を受けた。自由な型を設計できるTypeScriptのとりこになった。(けんた食堂さん風)

自分も型のみで何か作ってみたいと思いシンプルなOXゲームを実装しました。

 コード
色々な型を組み合わせることで実現しました。そこまで高度なことはしていないと思うので、今回使った文法のみメモします。
/**
 * 空のマス型
 */
type EmptyCell = " ";

/**
 * ユーザー型
 */
type Player = "O" | "X";

/**
 * 指定できるインデックス型
...]]></description><link>https://zenn.dev/mitate_gengaku/articles/type-level-tic-tac-toe</link><guid isPermaLink="true">https://zenn.dev/mitate_gengaku/articles/type-level-tic-tac-toe</guid><pubDate>Mon, 19 May 2025 09:59:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aQ6UodhC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AE%25E3%2581%25BF%25E3%2581%25A7%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AAOX%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25BE%25A1%25E6%25A5%25AF%25E7%258E%2584%25E5%25B6%25BD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0tQOVRYWHQ5Qm1BLVplcURoLWdxUHl4RVFjMmNsRkhSNk95XzVVSVVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>御楯玄嶽</dc:creator></item><item><title><![CDATA[初心者によるJavaScript講座2スコープについて「スコープの重要性とグローバルスコープ」]]></title><description><![CDATA[こんにちは。ブログ主です。今回はJavaScriptのスコープについてChatGPTと会話したり、jsprimerを読んだりしてわかったことがあったのでまとめます。

 概要
JavaScriptでプログラミングする上で避けては通れない「スコープ」の概念について実例を交えながら軽く説明します。内容については目次を活用し、欲しい内容をさらってください。この記事では「そもそもスコープとは」や「スコープの重要性」や「グローバルスコープ」について説明します。以下常体。

 そもそもスコープとは？
変数や関数にアクセスできる範囲(有効範囲)こと。scopeという英語の意味は「範囲」という意味からも...]]></description><link>https://zenn.dev/ripoh/articles/f8be6f52dadc28</link><guid isPermaLink="true">https://zenn.dev/ripoh/articles/f8be6f52dadc28</guid><pubDate>Mon, 19 May 2025 07:56:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Lr056uPN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BJavaScript%25E8%25AC%259B%25E5%25BA%25A72%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2580%258C%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AE%25E9%2587%258D%25E8%25A6%2581%25E6%2580%25A7%25E3%2581%25A8%25E3%2582%25B0%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2597%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:w4daka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0Y2ZjZDZhMmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>w4daka</dc:creator></item><item><title><![CDATA[Misoca API v3を使って、請求書を複製してみたいと思った]]></title><description><![CDATA[こんにちは☀️
TRUSTART株式会社のみつです！
Misocaは、無料プランである程度の機能が利用できる請求書サービス。
個人で活動されてる方たちにとっては、制限ありでもこの機能で無料はアツい？と勝手に思ってたり。
請求書の複製をターミナルからコマンドでできないかなぁとふと思い、Misoca API v3でどんなことができるのかなを覗いてみました！

 Misoca APIって便利なのでは・・・？
普段、見積書や請求書をパパッと作りたい時に利用しています！

 これまでのわたし
同じ会社様宛に毎月発行する請求書があります。

ログインをする ← ID, PASS入力とか地味に大変です...]]></description><link>https://zenn.dev/trustart_dev/articles/ef4a4ffbf386b4</link><guid isPermaLink="true">https://zenn.dev/trustart_dev/articles/ef4a4ffbf386b4</guid><pubDate>Mon, 19 May 2025 05:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---Z1sHH-i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Misoca%2520API%2520v3%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E8%25AB%258B%25E6%25B1%2582%25E6%259B%25B8%25E3%2582%2592%25E8%25A4%2587%25E8%25A3%25BD%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:mi2__user%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU4Y2I1MTc4ODAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TRUSTART%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI4Mzg0MzQ2ZDEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mi2__user</dc:creator></item><item><title><![CDATA[jest で test 間でオブジェクトを共有する]]></title><description><![CDATA[
 jest で global-setup をいい感じに使って backend にアクセスするための client を複数の .test ファイルで共有する
jestで、テストのファイルを複数に分割してシナリオを記述したい。
その際、beforeAll() などで全てのファイルで同じようなオブジェクト（例えば、ネットワークリクエストを行うクライアントなど）初期化をしている。
そんな経験はないでしょうか。
私は以下の方法によってそれを解決しました。
まず、テストが子ワーカープロセスを生成して並列実行されないようにします。
   "scripts": {
        "test:in-b...]]></description><link>https://zenn.dev/sabiuyack/articles/340bd6ce7daec2</link><guid isPermaLink="true">https://zenn.dev/sabiuyack/articles/340bd6ce7daec2</guid><pubDate>Mon, 19 May 2025 04:40:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fE58feLi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jest%2520%25E3%2581%25A7%2520test%2520%25E9%2596%2593%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E5%2585%25B1%25E6%259C%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:soya-miyoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwN2Y3N2I1MzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>soya-miyoshi</dc:creator></item><item><title><![CDATA[React開発での絶対パス設定まとめ]]></title><description><![CDATA[React でコンポーネントをインポートするたびに ../ を繰り返していて、見づらい・修正が大変と感じたことはありませんか？
この記事では、import useStyles from "../components/styles"; のような相対パスではなく、import useStyles from "components/styles"; のような絶対パスでインポートする設定方法を紹介します。

 ✅ やりたいこと
例えば以下のような構成のとき：
├── App.tsx
├── components/
│ └── styles.ts
通常は以下のような相対パスになります。
impor...]]></description><link>https://zenn.dev/leegrey/articles/7690d298f97d3d</link><guid isPermaLink="true">https://zenn.dev/leegrey/articles/7690d298f97d3d</guid><pubDate>Sun, 18 May 2025 13:24:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FjU3wbba--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%25AE%25E7%25B5%25B6%25E5%25AF%25BE%25E3%2583%2591%25E3%2582%25B9%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GlobalPaws%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwNTcxOWUyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GlobalPaws</dc:creator></item><item><title><![CDATA[Typescript 関数の理解を深める]]></title><description><![CDATA[日頃プログラミングをしていてTypescriptの関数について理解を深めたいなと思い記事を書きました。
内容は僕が理解不足だったり深めたい箇所がメインですのでそこをご了承いただけると嬉しいです！

 void関数における早期returnについて
戻り値の型がvoidである関数においても、returnによる処理の中断が可能です。
この性質を活用することで、条件によって処理を早期に終了させ、不要なネストや処理の継続を避けることができます。
function doSomething(): void {
  if (someCondition) return;
  console.log("続行...]]></description><link>https://zenn.dev/you_ik/articles/a1f48acb35f6ec</link><guid isPermaLink="true">https://zenn.dev/you_ik/articles/a1f48acb35f6ec</guid><pubDate>Sun, 18 May 2025 09:56:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KO67HafI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%2520%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%25E3%2582%2592%25E6%25B7%25B1%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A8%25E3%2583%25AB%25E3%2582%25B7%25E3%2582%25AB%25E3%2581%25B5%25E3%2581%2581%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjYTY1YmYwYWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヨルシカふぁん</dc:creator></item><item><title><![CDATA[バーコードリーダー実装に使えるライブラリを比べてみた]]></title><description><![CDATA[
 背景
バーコードスキャン機能付きのアプリの開発に興味を持ち、色々と調べていました。私は本を読むのが好きで、読んだ本を簡単に管理できるアプリがあればなぁと思って試しに簡単なアプリを作ってみました。
今まで考えたことがなかったのですが、バーコードスキャンを使う場面はたくさんあると気づきました。

在庫管理
モバイル決済
チケット認証
レジでの買い物
棚卸し作業

などなど、バーコード／QR コードの読み取りはいろんな業務で便利ですね。
そう思ってから、巷のバーコードスキャンライブラリにどんな種類があるのか、比較検討するための調査をしてみました。
この記事では、

どのバーコードスキャンラ...]]></description><link>https://zenn.dev/maidog/articles/bb5fdaebba1f8c</link><guid isPermaLink="true">https://zenn.dev/maidog/articles/bb5fdaebba1f8c</guid><pubDate>Sat, 17 May 2025 18:43:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SC7kVpzD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E6%25AF%2594%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Marina%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA2NDA3ZjJiOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Marina</dc:creator></item></channel></rss>