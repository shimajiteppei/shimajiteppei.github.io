<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 21 Mar 2025 12:04:13 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Java Silver 勉強⑦インタフェースによる抽象化]]></title><description><![CDATA[【出題項目の例】
Javaの基本データ型と文字列の操作
演算子と制御構造
配列の操作
クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム


 1. インタフェースとは？

インタフェースは、クラスが実装しなければならないメソッドの「設計図」を定義するものです。インタフェース自体は実装を持たず、メソッドのシグネチャ（引数、戻り値など）のみを定義します。クラスは、このインタフェースを実装することで、実際の処理を定義します。


インタフェースの特徴:

メソッドの実装は持たず、メソッド...]]></description><link>https://zenn.dev/hyoni/articles/e065e312e5ac47</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/e065e312e5ac47</guid><pubDate>Fri, 21 Mar 2025 05:54:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BL8yYUVw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Silver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E6%258A%25BD%25E8%25B1%25A1%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[Java Silver 勉強⑥継承による実装の再利用]]></title><description><![CDATA[【出題項目の例】

Javaの基本データ型と文字列の操作
演算子と制御構造
配列の操作
クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム



 1. 継承の基本
Java では extends キーワードを使って、既存のクラス（親クラス）を継承できます。
継承したクラス（子クラス）は、親クラスのフィールドやメソッドを引き継ぐことができます。
// 親クラス（スーパークラス）
class Animal {
    String name = "動物";

    void make...]]></description><link>https://zenn.dev/hyoni/articles/d1dd53b4ff1b38</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/d1dd53b4ff1b38</guid><pubDate>Fri, 21 Mar 2025 05:07:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rselv06O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Silver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A5%25E7%25B6%2599%25E6%2589%25BF%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%25AE%25E5%2586%258D%25E5%2588%25A9%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[AtCoderにJavaで出るための対策～AtCoder Beginners Selection編～]]></title><description><![CDATA[AtCoder Beginners Selectionをやっていきます。
自分で解きながら備忘録という意味でも解説を載せています。
パッと自分で解法が思いつかなかったときは、AtCoderに載っているユーザー解説などを参考に、Java版のコードにしたものを回答として載せています。
以下、問題のページです。

PracticeA Welcome to AtCoder


ABC086A	Product
ABC081A	Placing Marbles
ABC081B	Shift only
ABC087B	Coins
ABC083B	Some Sums
ABC088B	Card Game fo...]]></description><link>https://zenn.dev/haru330/articles/0daddf40ba18c8</link><guid isPermaLink="true">https://zenn.dev/haru330/articles/0daddf40ba18c8</guid><pubDate>Thu, 20 Mar 2025 09:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lHJZyFmd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AtCoder%25E3%2581%25ABJava%25E3%2581%25A7%25E5%2587%25BA%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E5%25AF%25BE%25E7%25AD%2596%25EF%25BD%259EAtCoder%2520Beginners%2520Selection%25E7%25B7%25A8%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2582%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3NzQyOWFkM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はる</dc:creator></item><item><title><![CDATA[Java データ型]]></title><description><![CDATA[
 基本型
基本型は以下の8種類です。
扱えるリテラルがそれぞれ異なります。



型
リテラル




byte
8ビット整数


short
16ビット整数


int
32ビット整数


long
64ビット整数


float
32ビット単精度浮動小数点数


double
64ビット倍精度浮動小数点数


char
16ビットUnicode文字


boolean

true, false




小さい型は大きい型に自動で変換されます。
大きい型を小さい型に変換するときは、キャストが必要です。
/*
byte → short → int → long → float → do...]]></description><link>https://zenn.dev/itohisamitsu0/articles/e9c8f5f80eb760</link><guid isPermaLink="true">https://zenn.dev/itohisamitsu0/articles/e9c8f5f80eb760</guid><pubDate>Thu, 20 Mar 2025 08:24:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b1GeId-C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Java%2520%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsumugi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzY0c0ZzSWQ4TEVkUU9RMHRkdFVjanB0dWRubVBZczhCOTlJdXNDdjYxZ1Q3b1BIRl89czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsumugi</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習 [Java] インターフェースの定義と役割]]></title><description><![CDATA[
 インタフェース(Interface)とは？
抽象メソッド（実装されていないメソッド）の集合で、クラスが特定の機能を
具現するよう強制する役割をする。
インターフェイスを使用すると、オブジェクト間の結合度を下げ、多形性をサポートして柔軟なコード作成が可能である。
インターフェースの主な役割
ポリモーフィズム（多態性）の提供
インターフェースを使用すると、1つのインターフェースを複数のクラスが異なる方法で実装できるため、多態性を容易に活用できます。
例）List インターフェースには ArrayList、LinkedList などの多様な実装が存在し、インターフェースを通じてオブジェクト...]]></description><link>https://zenn.dev/shubbydobob/articles/bc3ae570a852f0</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/bc3ae570a852f0</guid><pubDate>Wed, 19 Mar 2025 07:56:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tfgw_qWx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJava%255D%2520%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8%25E5%25BD%25B9%25E5%2589%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[Javaの基本文法（基礎固め）]]></title><description><![CDATA[
 目標
Javaの基本的な構文を理解する

 Javaの特徴・Goとの違い（静的型付け、JVMなど）
JavaもGoも静的型付けの言語である
両者ともに型推論に対応しているのでこれと言って違いはなさそう？
JVMとはJava Virtual Machineの略でJavaを実行するのに必要なソフトウェア
主な役割はコンパイルされたclassファイルを変換してJavaで実行できるようにしたり、メモリ領域を管理したりする
JavaはJVMを経由する事によってプラットフォーム（OS）を選ばずに実行出来る
Goはクロスコンパイルが出来るので各プラットフォーム毎に対応する実行ファイルをコンパイル出...]]></description><link>https://zenn.dev/miya_miya/articles/f3cfdaebd80caa</link><guid isPermaLink="true">https://zenn.dev/miya_miya/articles/f3cfdaebd80caa</guid><pubDate>Tue, 18 Mar 2025 03:30:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D5XlTZdT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E6%2596%2587%25E6%25B3%2595%25EF%25BC%2588%25E5%259F%25BA%25E7%25A4%258E%25E5%259B%25BA%25E3%2582%2581%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBLNnZLRXFYSzJFZVBmSG1WYnNuSXFvWlA2V1J3a2ZoV0FXeXdsZFp1NV92bjdnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miya</dc:creator></item><item><title><![CDATA[Spring AIの紹介]]></title><description><![CDATA[
 Spring AIの紹介
Spring AIは、Spring Frameworkを使って、OpenAI(ChatGPT)やGeminiなどのAIサービスと連携するためのライブラリです。
Spring Frameworkの機能を利用しながら、AIサービスを利用するプログラムを開発することができます。
2025年3月時点でまだ開発中の段階ですが、SpringBootアプリケーションに構成することができます。
今回は以下の開発環境をもとに、Spring AIを使ってOpen AIのチャットを利用するプログラムの基本的な実装方法を紹介していきます。

Java 21
Gradle Groov...]]></description><link>https://zenn.dev/cariot_dev/articles/9677ef63469559</link><guid isPermaLink="true">https://zenn.dev/cariot_dev/articles/9677ef63469559</guid><pubDate>Mon, 17 Mar 2025 06:05:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H3i3YguA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:Spring%2520AI%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Ogawa%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZjMjE5NTM5MjkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%25AA%25E3%2582%25AA%25E3%2583%2583%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGZTQUY5Q3pFZHFqVlEtUDZxa29tU3lqc1dRTW9YZXk2MTJHZ2hLV3pfSmY5cGV3PXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ogawa</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習 [Java] DTO(Data Transfer Object)の定義と役割]]></title><description><![CDATA[
 DTO(Data Transfer Object)
階層間データを伝達するために使用されるオブジェクト。
データのカプセル化(encapsulation)によって不要なデータの露出を放置し、
ネットワークコスト削減及び性能最適化を目的に使用される。


データ配信専用:データを保存する役割のみで、別途のビジネスロジックを含まない。


読み込み専用または変更可能:不変(immutable)に設計されたり、必要に応じて


可変（mutable）に使用できる。


階層間データ移動最適化:クライアント-サーバー、コントローラ-サービス、サービス-リポジトリ間のデータ移動に使用される。
...]]></description><link>https://zenn.dev/shubbydobob/articles/1c1edb2fedaba5</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/1c1edb2fedaba5</guid><pubDate>Mon, 17 Mar 2025 05:36:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4OIoCydZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJava%255D%2520DTO%2528Data%2520Transfer%2520Object%2529%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A8%25E5%25BD%25B9%25E5%2589%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[Webサーバーについて知識ゼロの人がさくらVPSを使用してJavaWebアプリ環境を整えた]]></title><description><![CDATA[
 前提知識

Javaで作成したWebアプリケーションを.warファイルで作成できる
Tomcatのディレクトリ構造が理解できていて、/Tomcatルートディレクトリ/webappsに.warファイルを配置してTomcat起動すると.warファイルが展開できることを理解していること
さくらVPSでパケットフィルタのカスタム設定でTCP 8080を開けれること

さくらVPSの状態は以下でスタート(ただ、レンタルしただけの状態)
本来は、Apache(Webサーバー)を導入するのが推奨されているようですが、今回は使用するほどの規模ではないため、Tomcat(アプリケーションサーバー)のみ...]]></description><link>https://zenn.dev/favopg/articles/cfb20bedaefc4d</link><guid isPermaLink="true">https://zenn.dev/favopg/articles/cfb20bedaefc4d</guid><pubDate>Sun, 16 Mar 2025 11:04:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DGhmsoZo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E7%259F%25A5%25E8%25AD%2598%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%25AE%25E4%25BA%25BA%25E3%2581%258C%25E3%2581%2595%25E3%2581%258F%25E3%2582%2589VPS%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6JavaWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E3%2581%2588%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25A4%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4NWJkZTE0NzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>イッシー</dc:creator></item><item><title><![CDATA[[Java]カプセル化 とは（備忘録）]]></title><description><![CDATA[
 １．はじめに
・メンバ変数のアクセス修飾子を private に設定し、メンバ変数に関連するメソッドは public と（基本的に）設定することを、カプセル化といいます。
・メンバ変数を private に設定することで、直接アクセスによりメンバ変数が変更されることの防止や意図しないアクセスを防止することができ、バグの防止とプログラムの安全性が強化されるというメリットがあります。
・ソースコードの記述量が増えることが、デメリットとして挙げられます。

 ２．ゲッター（getter）とは
・ゲッター（getter）とは、メンバ変数の値を取得するために利用されるメソッドです。
・一般的に...]]></description><link>https://zenn.dev/yama_kawa/articles/430dc1555bf9e2</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/430dc1555bf9e2</guid><pubDate>Sun, 16 Mar 2025 05:27:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--66_aCqoK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255D%25E3%2582%25AB%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25AB%25E5%258C%2596%2520%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1ZjYyZjIwYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[★ "C# deligate" implement "java"]]></title><description><![CDATA[
 C#独自の概念であるdeligate処理をJavaにマイグレーションするとどうなるか？

 deligateを理解するために、JavaへMigration


C#の"deligate"をJavaへMigrationする際、Javaには直接的な関数ポインタに相当する機能がないため、代わりに"Interface"や"ラムダ式"を活用することで、同等の動作を実現できる。


以下は、C#のdeligate処理コードをJavaに変換した例。C#のdeligateが提供する柔軟な関数参照と呼び出しのメカニズムを、Javaでも効果的に再現することができる。


/* [java] */
imp...]]></description><link>https://zenn.dev/v6qh2bxj/articles/c7b65da9026b7b</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/articles/c7b65da9026b7b</guid><pubDate>Sat, 15 Mar 2025 13:59:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mu7j2S4p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E2%2598%2585%2520%2522C%2523%2520deligate%2522%2520implement%2520%2522java%2522%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:v6qh2bxj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYmY4Njc4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習 [Java] @NoArgsConstructorと@AllArgsConstructorの役割]]></title><description><![CDATA[
 1. @NoArgsConstructor

役割

パラメータのない基本生成者(No-Args-Constructor)を自動的に生成する。
JPAエンティティや直列化などのために基本生成者が必要な場合に有用。
import lombok.NoArgsConstructor;

@NoArgsConstructor
public class User {
    private String name;
    private int age;
}

public User() {}  // 基本生成者が自動的に生成
// クラスにfinal フィールドがある場合、基本的にコンパイ...]]></description><link>https://zenn.dev/shubbydobob/articles/8c0dee3810c54a</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/8c0dee3810c54a</guid><pubDate>Fri, 14 Mar 2025 13:44:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4V-iFSQc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%2520%255BJava%255D%2520%2540NoArgsConstructor%25E3%2581%25A8%2540AllArgsConstruct...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[JavaのGC：ZGCとは？]]></title><description><![CDATA[
 はじめに
はじめまして、三菱UFJインフォメーションテクノロジーの田中です。
最近、Javaアプリケーションのパフォーマンス計測に関わる機会があり、特にガベージコレクション（GC）の重要性を再認識しました。GCはJavaのパフォーマンスに大きな影響を与えるため、最新のGCアルゴリズムについて調べることにしました。
本記事では、Javaの歴史を振り返りながら、各バージョンで導入されたGCアルゴリズムについて詳しく解説します。
なお、調査したJavaはSun/Oracleのディストリビューションをベースに行いました。

 Javaの歴史
Javaの各バージョンの概要とGCのアルゴリズムを...]]></description><link>https://zenn.dev/muit_techblog/articles/11c4323fcbc96f</link><guid isPermaLink="true">https://zenn.dev/muit_techblog/articles/11c4323fcbc96f</guid><pubDate>Fri, 14 Mar 2025 01:08:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dwhfB8gA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AEGC%25EF%25BC%259AZGC%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E7%2594%25B0%25E4%25B8%25AD%25E3%2580%2580%25E5%25AE%258F%25E6%2598%258E%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxZGYyYTRkNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25B8%2589%25E8%258F%25B1UFJ%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2583%2586...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSy1fMzVwdVVlN25jZXVjX3AtVURxcUVFbW9yUlBxYm9zbHFFVFRQQktEQkx1ell3PXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>田中　宏明</dc:creator></item><item><title><![CDATA[リストに1000件分のランダム文字列を追加する方法]]></title><description><![CDATA['''
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
public class RandomStringGenerator {
public static void main(String[] args) {
List&lt;String&gt; randomStrings = generateRandomStrings(1000, 10);
    // 生成した文字列を確認（最初の10件を表示）
    for (int i = 0; i &lt; 10; i++) {
    ...]]></description><link>https://zenn.dev/ryudev2/articles/f4ad14ce327f6c</link><guid isPermaLink="true">https://zenn.dev/ryudev2/articles/f4ad14ce327f6c</guid><pubDate>Thu, 13 Mar 2025 01:56:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GQtJIE78--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AB1000%25E4%25BB%25B6%25E5%2588%2586%25E3%2581%25AE%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25A0%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2585%25E3%2583%25BC%25E3%2581%25BA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzA3U1dTSkM1V1dpZ1FWemR6LWJpZEpIelhQSWtpVGdSQ292emYzcWZUM195czN4OD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りゅーぺ</dc:creator></item><item><title><![CDATA[★ Java | ドメイン駆動設計とインターフェースの多重継承の活用]]></title><description><![CDATA[
 Java

 ドメイン駆動設計とインターフェースの多重継承の活用
ドメイン駆動設計（DDD）において、インターフェースの多重継承を活用した具体例。
この例では、エンティティ、リポジトリ、サービスの役割を持つインターフェースを定義し、それを実装するクラスを作成している。

DDDの構成要素




構成要素
内容




エンティティ
ユーザーや商品などの識別可能なオブジェクト。


リポジトリ
エンティティの永続化を管理するオブジェクト。


サービス
ビジネスロジックを実装するオブジェクト。




インターフェースの定義
エンティティ、リポジトリ、サービスのインターフェースを定義...]]></description><link>https://zenn.dev/v6qh2bxj/articles/fdb6f1c5a74dbd</link><guid isPermaLink="true">https://zenn.dev/v6qh2bxj/articles/fdb6f1c5a74dbd</guid><pubDate>Wed, 12 Mar 2025 17:43:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rA-01xZQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E2%2598%2585%2520Java%2520%257C%2520%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E9%25A7%2586%25E5%258B%2595%25E8%25A8%25AD%25E8%25A8%2588%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E5%25A4%259A%25E9%2587%258D%25E7%25B6%2599%25E6%2589%25BF%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:v6qh2bxj%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgzYmY4Njc4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>v6qh2bxj</dc:creator></item><item><title><![CDATA[chat-gptによるJavaの学習ロードマップ]]></title><description><![CDATA[chat-gptに作ってもらった学習ロードマップをプログラミング初学者が勉強する試み
学んだ内容を随時リンクしていきます

 Javaの基本文法（基礎固め）

目標: Javaの基本的な構文と概念を理解する
学習内容:
•	Javaの特徴・Goとの違い（静的型付け、JVMなど）
•	変数・データ型・リテラル
•	演算子・制御構文（if, switch, for, while）
•	メソッドとスコープ（値渡し・参照渡しの違い）
•	配列・コレクション（ArrayList, HashMap）
⸻

 オブジェクト指向プログラミング（Goとの違いを意識）
目標: Javaのオブジェクト指向の基...]]></description><link>https://zenn.dev/miya_miya/articles/fd4726d595c8ad</link><guid isPermaLink="true">https://zenn.dev/miya_miya/articles/fd4726d595c8ad</guid><pubDate>Wed, 12 Mar 2025 14:08:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9uI22Qpj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chat-gpt%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258BJava%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBLNnZLRXFYSzJFZVBmSG1WYnNuSXFvWlA2V1J3a2ZoV0FXeXdsZFp1NV92bjdnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miya</dc:creator></item><item><title><![CDATA[Java Sliver 勉強⑤ カプセル化の適用]]></title><description><![CDATA[【出題項目の例】

Javaの基本データ型と文字列の操作
演算子と制御構造
配列の操作
クラスの宣言とインスタンスの使用
メソッドの作成と使用
カプセル化の適用
継承による実装の再利用
インタフェースによる抽象化
例外処理
モジュール・システム


 カプセル化の適用

アクセス修飾子の使用
クラスに対するカプセル化の適用


 アクセス修飾子の使用
Java のアクセス修飾子（Access Modifier：액세스 한정자）は、クラス・フィールド・メソッドのアクセス範囲を制限するためのキーワード。
適切に使うことでデータの隠蔽（カプセル化）や安全なコード設計が可能になる。


 アクセ...]]></description><link>https://zenn.dev/hyoni/articles/4e9b8fc19bb764</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/4e9b8fc19bb764</guid><pubDate>Wed, 12 Mar 2025 01:18:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hIVOnCeq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520Sliver%2520%25E5%258B%2589%25E5%25BC%25B7%25E2%2591%25A4%2520%25E3%2582%25AB%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25AB%25E5%258C%2596%25E3%2581%25AE%25E9%2581%25A9%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[JUnitを使用した単体テストの基本]]></title><description><![CDATA[
 はじめに
こんにちは。私は現在新卒入社1年目で、スマホアプリの実装・テストを主に担当しています。
実装を行う中で、一番難しいと感じたのが、JUnitの単体テストだったので、自分の勉強もかねてまとめたいと思います。

 単体テストとは
単体テストとは、関数やメソッド単位で行われる小さい単位でのテストです。
小さな単位であらかじめ不具合を見つけることで、早期にバグの修正ができ、プログラム品質が上がるというメリットがあります。
(出典：Udemyメディア 「単体テストとは？メリットや手法、仕様書について詳しく解説！」
https://udemy.benesse.co.jp/developm...]]></description><link>https://zenn.dev/muit_techblog/articles/6668eb6bc88d0a</link><guid isPermaLink="true">https://zenn.dev/muit_techblog/articles/6668eb6bc88d0a</guid><pubDate>Tue, 11 Mar 2025 09:20:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gTEvyWSH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JUnit%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E5%258D%2598%25E4%25BD%2593%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%2590%2591%25E5%25B9%25B3%25E3%2580%2580%25E5%259C%25AD%25E4%25BD%2591%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxZGYyYTRkNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E4%25B8%2589%25E8%258F%25B1UFJ%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2583%2586...%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnBzTFVneFhQOE91RGV2cUYzbkRibXZjcENpMnBGcmFBVC13YnNnSlBleTl3V0pnPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>向平　圭佑</dc:creator></item><item><title><![CDATA[プログラミング自己主導学習[Spring Framework] @Configuration]]></title><description><![CDATA[@Configuration基本的役割
Spring frameworkで使用されるエノテーションで、Spring IoCコンテナにビーン(Bean)を
登録するクラスであることを示します。
このアノテーションが宣言されたクラス内で@Beanを使用して直接スプリングビンを定義できます。



Springが管理するBeanを定義するクラスです。


内部で@Beanメソッドを使用してSpringビーンを登録することができます。


Springコンテナが該当クラスを読み、空のオブジェクトを作成および管理します


XML設定に代わるJavaベース設定


@Componentと違い、受動...]]></description><link>https://zenn.dev/shubbydobob/articles/6edf15a12fbbed</link><guid isPermaLink="true">https://zenn.dev/shubbydobob/articles/6edf15a12fbbed</guid><pubDate>Tue, 11 Mar 2025 07:27:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NX4rZ5Nd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%2587%25AA%25E5%25B7%25B1%25E4%25B8%25BB%25E5%25B0%258E%25E5%25AD%25A6%25E7%25BF%2592%255BSpring%2520Framework%255D%2520%2540Configuration%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sanghyun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDZhNjJlMDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sanghyun</dc:creator></item><item><title><![CDATA[【超初心者向け】Hello Worldを書いてみよう！（Python, JavaScript, Java）]]></title><description><![CDATA[プログラミングを始める時、最初に書くのが「Hello World」プログラムです。これは画面に「Hello World」という文字を表示する、最もシンプルなプログラムです。この記事では、3つの主要なプログラミング言語でHello Worldを書く方法を解説します。

 なぜHello Worldから始めるの？
Hello Worldプログラムには、以下のような意義があります：


最小限のコードで動作確認ができる

開発環境が正しく設定されているか確認できる
プログラムの基本的な構造を理解できる



プログラミングの第一歩として最適

成功体験を得やすい
言語の基本的な文法に触れられる...]]></description><link>https://zenn.dev/homatsu_tech/articles/40e7bfdfa62eae</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/40e7bfdfa62eae</guid><pubDate>Mon, 10 Mar 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l9vQ6VSI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E8%25B6%2585%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Hello%2520World%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25EF%25BC%2588Python%252C%2520JavaScript%252C%2520Java%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item></channel></rss>