<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 07 Oct 2025 09:02:18 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【React】return の後に関数定義をする Hoisting Pattern を提唱したい]]></title><description><![CDATA[私が React でよく使うデザインパターン（？）を紹介します。
JavaScript の Hoisting (宣言の巻き上げ) を使うので Hoisting Pattern と勝手に呼んでいます。
といっても何か特別な書き方をするわけでなく、ただ return の後に function を書くだけです。
以下のコードを見比べてみてください。
ただし、ゆっくりスクロールしてどんな UI になるかを想像しながら見てみてください。
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

 MyButton.tsx
'use client';

import { ReactNode,...]]></description><link>https://zenn.dev/hcproduce_blog/articles/905689ad3918c4</link><guid isPermaLink="true">https://zenn.dev/hcproduce_blog/articles/905689ad3918c4</guid><pubDate>Tue, 07 Oct 2025 08:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z9v5KJx---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591return%2520%25E3%2581%25AE%25E5%25BE%258C%25E3%2581%25AB%25E9%2596%25A2%25E6%2595%25B0%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2520Hoisting%2520Pattern%2520%25E3%2582%2592%25E6%258F%2590%25E5%2594%25B1%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:kazeusagi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0NzRmNjJhOGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:HC%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2587%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS01hTm01UnBhQzd1VlNwdHJfaFEzVEwwRG9JaWJpek1mekdqWG4tTnlsQnQwdWdPZnY9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>kazeusagi</dc:creator></item><item><title><![CDATA[OpenCode Viewer（opencode-viewer）入門 ─ OpenCodeセッションを可視化・操作する]]></title><description><![CDATA[OpenCodeを使ったAIコーディングが加速する中、対話ログやツール実行履歴を「見える化」して、再開・中断・履歴の俯瞰をサクッとこなせるウェブクライアントが欲しくなります。そこで、Codex Viewerをベースに派生した「OpenCode Viewer（opencode-viewer）」を公開しました。


リポジトリ: https://github.com/nogataka/opencode-viewer/

OpenCode概要: https://qiita.com/nogataka/items/87bc09f33dd4ac105b9a

Codex Viewerの記事:

ht...]]></description><link>https://zenn.dev/taka000/articles/8734e0e49acbf5</link><guid isPermaLink="true">https://zenn.dev/taka000/articles/8734e0e49acbf5</guid><pubDate>Tue, 07 Oct 2025 03:24:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bvbbDC1r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenCode%2520Viewer%25EF%25BC%2588opencode-viewer%25EF%25BC%2589%25E5%2585%25A5%25E9%2596%2580%2520%25E2%2594%2580%2520OpenCode%25E3%2582%25BB%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2583%25BB%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeXpCR01mazY0b29ScWlKUC12VnpBaERrLVJ4ZjNONGJ5QkhyaEM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Taka</dc:creator></item><item><title><![CDATA[子ども向け学習アプリ開発ログ：タグで単語を整理！フィルタリング機能を追加]]></title><description><![CDATA[今回は、タグ別に単語を絞り込んで表示できるフィルタリング機能を実装しました。
単語登録時にタグを設定しておくことで、特定のカテゴリだけを選んで勉強できるようになります。

 前回

単語カードを API から取得



 今回

タグ別検索・フィルタリングの実装



 ① タグ選択UI
ユーザがタグを選択できるように、検索・フィルタリング用の UI コンポーネントを作成。
UIを分離して共通化 することで、LessonCard・TestPageなど複数のページで再利用できるようにしました。
"use client";
import { useEffect, useState } fro...]]></description><link>https://zenn.dev/hyoni/articles/3badb72ac101b2</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/3badb72ac101b2</guid><pubDate>Tue, 07 Oct 2025 00:50:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tl4lCTL1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AD%2590%25E3%2581%25A9%25E3%2582%2582%25E5%2590%2591%25E3%2581%2591%25E5%25AD%25A6%25E7%25BF%2592%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25E3%2583%25AD%25E3%2582%25B0%25EF%25BC%259A%25E3%2582%25BF%25E3%2582%25B0%25E3%2581%25A7%25E5%258D%2598%25E8%25AA%259E%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25EF%25BC%2581%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[React ハンバーガーメニュー]]></title><description><![CDATA[個人開発でシンプルにしたい画面が、機能が増えてごちゃごちゃしてきたのでハンバーガーメニューを実装することにしました。


 完成イメージ
この記事で作成するハンバーガーメニューの特徴：

TypeScriptで型安全な実装
アニメーション付きの開閉動作
オーバーレイクリックで閉じる
アクセシビリティ対応
クリーンで再利用可能なコンポーネント


 基本的な実装

 1. コンポーネントの構造
まずは、TypeScriptのインターフェースと基本構造から見ていきましょう。
interface HamburgerMenuProps {
  onShowWineList: () =&gt; v...]]></description><link>https://zenn.dev/junwineone/articles/b8c41f134f505a</link><guid isPermaLink="true">https://zenn.dev/junwineone/articles/b8c41f134f505a</guid><pubDate>Mon, 06 Oct 2025 23:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Nq7NYial--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25AC%25E3%2583%25BC%25E3%2583%25A1%25E3%2583%258B%25E3%2583%25A5%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:junwine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNmYzOGZmNzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>junwine</dc:creator></item><item><title><![CDATA[Next.js 15とDDDで作る堅牢なシステム設計【第2部: Domain層編】]]></title><description><![CDATA[
 はじめに
[第1部: 設計編]では、DDDの基礎とレイヤードアーキテクチャの全体像を解説しました。
第2部では、DDDの心臓部であるDomain層の実装に焦点を当てます。エンティティ、値オブジェクト、リポジトリパターンを実際のコードで解説し、ビジネスロジックをどのように設計・実装するかを学びます。

 この記事で学べること

エンティティの設計思想と実装
値オブジェクトの使い方
リポジトリパターンの理解
不変性とファクトリメソッド
ドメインロジックのテスト手法


 前提知識

[第1部: 設計編]を読んでいること
TypeScriptの基本構文を理解していること
クラスとインターフ...]]></description><link>https://zenn.dev/7788/articles/a485c60d0f6581</link><guid isPermaLink="true">https://zenn.dev/7788/articles/a485c60d0f6581</guid><pubDate>Mon, 06 Oct 2025 14:31:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f4ovP3pK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%252015%25E3%2581%25A8DDD%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E5%25A0%2585%25E7%2589%25A2%25E3%2581%25AA%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E8%25A8%25AD%25E8%25A8%2588%25E3%2580%2590%25E7%25AC%25AC2%25E9%2583%25A8%253A%2520Domain%25E5%25B1%25A4%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:7788%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ppRXlBZ0E1dW1LSnJrMkNGUGJHX0hZS0xmcDFadi1IaHZmLVpVNVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>7788</dc:creator></item><item><title><![CDATA[VSCodeでnode_modulesから始まるパスが補完される問題とTS Serverの仕組み]]></title><description><![CDATA[
 🧠 はじめに
VSCodeを使っていて、クイックフィックス（インポート補完）でnode_modules/から始まるパスが出てくる…
この他でも、なんか補完がうまくいかない…とモヤるのはあるあるですよね。
同じ構成のリポジトリでも 補完が正しく動く場合と動かない場合 があり、原因がつかみにくい問題です。
この記事では、実際に遭遇したケースをもとに

VSCodeのクイックフィックスがどこを参照しているか
なぜnode_modules/が補完に出るのか
原因となったexportsの書き方とその直し方

を解説します。
ちょっと細かい話ですが、似た問題に直面している方のお役に立てればと思い...]]></description><link>https://zenn.dev/kawakamiakari/articles/140007cf674399</link><guid isPermaLink="true">https://zenn.dev/kawakamiakari/articles/140007cf674399</guid><pubDate>Mon, 06 Oct 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BqAeC33i--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25A7node_modules%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2581%25BE%25E3%2582%258B%25E3%2583%2591%25E3%2582%25B9%25E3%2581%258C%25E8%25A3%259C%25E5%25AE%258C%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25A8TS%2520Server%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258B%25E3%2582%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VhZDViNDgwZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>あかり</dc:creator></item><item><title><![CDATA[Prismaとデータベース最適化で検索パフォーマンスを10倍改善した話]]></title><description><![CDATA[
 概要
メール管理システムの検索機能で、当初クライアント側でフィルタリングしていた処理をデータベース側に移行し、適切なインデックスを追加することで、検索パフォーマンスを劇的に改善しました。また、UIをダイアログからスライドパネルに変更することで、ユーザー体験も大幅に向上させました。本記事では、具体的な最適化手法とPrismaでの実装方法を紹介します。

 技術スタック


Next.js 14+: App Router使用

Prisma ORM: データベースアクセス層

PostgreSQL: データベース

React Query: データフェッチとキャッシュ管理

Server...]]></description><link>https://zenn.dev/91works/articles/c0e01c92e452fb</link><guid isPermaLink="true">https://zenn.dev/91works/articles/c0e01c92e452fb</guid><pubDate>Mon, 06 Oct 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--prvJWwRu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25A8%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%25A7%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%259210%25E5%2580%258D%25E6%2594%25B9%25E5%2596%2584%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:YoshikiAgatsuma%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ZDA5N2JmNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:91works%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiMzIwNDk2ZTUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>YoshikiAgatsuma</dc:creator></item><item><title><![CDATA[ts-morphとClaude Code ActionsでFeature Flagクリーンアップ作業を半自動化]]></title><description><![CDATA[
 はじめに
まず、TimeTreeのWeb版ではOpenFeatureによるトランクベース開発をしています。
詳しくは弊社のエンジニアのメンバーがまとめてくれた記事がありますので参考にしてみてください。
https://zenn.dev/timetree/articles/89a2a927db1398

 Feature Flagを運用していくことで起きる課題

新機能の開発やバグ修正と違い、Feature Flagの削除はユーザーに直接価値を届けないの
で誰も積極的にやろうと思わない
Feature Flagを削除するためのタスクを作成するのも面倒

結果として、コードベースが複雑化...]]></description><link>https://zenn.dev/timetree/articles/0f115b695635d3</link><guid isPermaLink="true">https://zenn.dev/timetree/articles/0f115b695635d3</guid><pubDate>Mon, 06 Oct 2025 08:09:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h0KvBTYI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ts-morph%25E3%2581%25A8Claude%2520Code%2520Actions%25E3%2581%25A7Feature%2520Flag%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E4%25BD%259C%25E6%25A5%25AD%25E3%2582%2592%25E5%258D%258A%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Isco%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U1MDU4MGVlNDguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TimeTree%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y2MDllZGQ4M2QuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Isco</dc:creator></item><item><title><![CDATA[【React修行日記】カスタムHookの作成]]></title><description><![CDATA[
 学習の目的

カスタムフックの基本とルールを理解する
useLocalStorageを作成して実装してみる


 カスタムフックとは
カスタムフックは、Reactのフック（useStateやuseEffectなど）を組み合わせて作る、再利用可能なロジックの集まり。これを使うことで、コンポーネント間で状態管理や副作用のロジックを簡単に共有できる。
例えば、フォームの入力値を管理するロジックや、APIからデータを取得するロジックなど、複数のコンポーネントで共通して使いたい処理をカスタムフックとして切り出すことで、コードの重複を避け、保守性を高めることができる。

 カスタムフックのルール...]]></description><link>https://zenn.dev/tsunadog/articles/972b5dc045625c</link><guid isPermaLink="true">https://zenn.dev/tsunadog/articles/972b5dc045625c</guid><pubDate>Mon, 06 Oct 2025 07:26:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6RCDAWR6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E4%25BF%25AE%25E8%25A1%258C%25E6%2597%25A5%25E8%25A8%2598%25E3%2580%2591%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0Hook%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsunadog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZDZiMjViNzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tsunadog</dc:creator></item><item><title><![CDATA[「実践プロパティベーステスト」を読んで]]></title><description><![CDATA[tokadev です。
「実践プロパティベーステスト」を最近読んだので、備忘録がてら書き残しておきます。
https://www.lambdanote.com/products/proper
本書のサンプルコードは Erlang で記述されていますが、勉強と理解のために TypeScript fast-check を使用して書いています。
https://fast-check.dev/


 第1章：プロパティベーステストの基礎
プロパティベーステスト（Property-Based Testing: PBT）は、少ないコードで強力なテストを実現する手法。従来の例示ベースのテストとは違い、...]]></description><link>https://zenn.dev/rescuenow/articles/75b40ced2bc254</link><guid isPermaLink="true">https://zenn.dev/rescuenow/articles/75b40ced2bc254</guid><pubDate>Mon, 06 Oct 2025 06:57:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YnLjkmWu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E5%25AE%259F%25E8%25B7%25B5%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2580%258D%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:tokadev%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NWI1N2NlZmMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25AC%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%258A%25E3%2582%25A6%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3JxTTg0Q1RtVkFiekhqbFhldWJlYnowRG1nMEt6WHVtVmxMQUs3PXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tokadev</dc:creator></item><item><title><![CDATA[【TypeScript】カスタムエラーのすすめ]]></title><description><![CDATA[TypeScriptで開発をしていると、APIエラーやバリデーションエラーなど、さまざまなエラーを扱う場面があります。
そんなときに、標準のErrorクラスだけで対応していませんか。
この記事では、カスタムエラーを導入するメリットと、ボイラープレートを減らしてカスタムエラーを楽に定義出来るライブラリを紹介します。

 カスタムエラーを作る理由
標準のErrorクラスを使用することで楽にエラーを作成できますが、次のような問題があります。

エラーの種類を区別しづらい
追加の情報（HTTPステータスやエラーコードなど）を持たせづらい
メッセージが一貫しない

たとえば次のような例を考えてみま...]]></description><link>https://zenn.dev/praha/articles/a8b72ba36294fe</link><guid isPermaLink="true">https://zenn.dev/praha/articles/a8b72ba36294fe</guid><pubDate>Mon, 06 Oct 2025 04:40:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KNgurxLA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E3%2581%2599%25E3%2581%2599%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Karibash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiZDIyMmFjMTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PrAha%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dPMW45d0ZmU3FpV21hNW9HWlAzczc4YnRIN0VBUXE5aDdaOU5VZ3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>Karibash</dc:creator></item><item><title><![CDATA[次世代ツールBunをNext.jsで検証したら高速だった - pnpmとの比較]]></title><description><![CDATA[はじめまして、_minoです！
この記事では、「pnpmとbunってどのような違いがあるのか」、「Next.jsプロジェクトにBunを導入してもいいのでは」と思い、最新トレンドやパフォーマンスを比較しながらまとめました。
また、10月22日に行われる Next Conf のキャストにBun関係者がいるらしく、BunとNext.jsの連携について何か発表があるかもしれないので、早めにキャッチアップしておきたいと思いまとめています。
「パッケージマネージャについてって何？」という方には、こちらの解説記事がわかりやすいです！
https://www.hitachi-solutions.co.j...]]></description><link>https://zenn.dev/m_noto/articles/4efa5a70f8ca98</link><guid isPermaLink="true">https://zenn.dev/m_noto/articles/4efa5a70f8ca98</guid><pubDate>Mon, 06 Oct 2025 03:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ixE5TbX0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AC%25A1%25E4%25B8%2596%25E4%25BB%25A3%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25ABBun%25E3%2582%2592Next.js%25E3%2581%25A7%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%2520-%2520pnpm%25E3%2581%25A8%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:_mino%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M0ZTUzNzYzMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>_mino</dc:creator></item><item><title><![CDATA[z.inferを使いたくない]]></title><description><![CDATA[
 z.inferを使いたくない

型を制御できない
zodが生成した型を使いたくない
自前の型でzodのスキーマを制御したい


 z.inferを使う場合
import z from "zod";

const user = z.object({
	id: z.string(),
	email: z.string(),
	name: z.string(),
	age: z.number().optional(),
});
type User = z.infer&lt;typeof user&gt;;


 z.inferを使わない場合
import z from "zod";

ty...]]></description><link>https://zenn.dev/tomyn/articles/e79b27841451b7</link><guid isPermaLink="true">https://zenn.dev/tomyn/articles/e79b27841451b7</guid><pubDate>Mon, 06 Oct 2025 01:57:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lXKzJ1y7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:z.infer%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tomyn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwZGVlODljMmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tomyn</dc:creator></item><item><title><![CDATA[VSCode拡張開発メモ]]></title><description><![CDATA[
 はじめに
「VSCodeでSQLMesh」で、SQLMesh の VSCode 拡張を確認して、ソースコードもあるし、拡張を拡張しちゃうぞ。と思ったのですが、ソースコードの気持ちが全くわからず…。ということで、ネットにたくさんある VSCode 拡張の作り方の Yet Another なんとかですが、できるだけ最新の公式から。

 概要


 拡張機能でできること(の例)

VS Code の外観を色やファイルアイコンのテーマで変更する - Theming

UI にカスタム コンポーネントとビューを追加する - ワークベンチの拡張

HTML/CSS/JS で構築されたカスタム W...]]></description><link>https://zenn.dev/robon/articles/a8ef580909c553</link><guid isPermaLink="true">https://zenn.dev/robon/articles/a8ef580909c553</guid><pubDate>Mon, 06 Oct 2025 00:56:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UO_pWGm7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E6%258B%25A1%25E5%25BC%25B5%25E9%2596%258B%25E7%2599%25BA%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E8%258D%2592%25E6%259C%25A8%2520%25E5%25B2%25B3%25E5%25A4%25AB%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3NDIzMjE0NTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BEROBON%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YUpBSVQ1V0NaaVBRUmF6TkswS1dFVkEybkRJMGdaN1lvMjdJdDIyQT1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>荒木 岳夫</dc:creator></item><item><title><![CDATA[【初心者でもわかる】TypeScriptの型推論だけでフィボナッチ数列を計算する]]></title><description><![CDATA[TypeScript は JavaScript に静的型付けを与えるだけでなく、コンパイル時に型同士で計算を行う機構を備えています。本記事では「実行時にコードを走らせず、型推論だけでフィボナッチ数列を求める」という一風変わったテクニックを解説します。実務に役立つわけではありませんが、条件付き型や再帰的な型定義への理解が深まるでしょう。

 はじめに
フィボナッチ数列は「0 と 1 を初項とし、次の項が直前 2 つの項の和になる数列」です。値レベルでは次のように表せます。
F(0) = 0
F(1) = 1
F(n) = F(n - 1) + F(n - 2)  (n ≥ 2)
通常はルー...]]></description><link>https://zenn.dev/syuya2036/articles/7c10c6645140f6</link><guid isPermaLink="true">https://zenn.dev/syuya2036/articles/7c10c6645140f6</guid><pubDate>Sun, 05 Oct 2025 15:48:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eYCeiHo1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25A7%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%258B%25E3%2580%2591TypeScript%25E3%2581%25AE%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A3%25E3%2583%259C%25E3%2583%258A%25E3%2583%2583%25E3%2583%2581%25E6%2595%25B0%25E5%2588%2597%25E3%2582%2592%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JhNGYyNjRjNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>sh</dc:creator></item><item><title><![CDATA[PixiJS v8 におけるシーン切替（Container切替）を実装してみる]]></title><description><![CDATA[Phaser でゲーム開発をしていて、「そういえば PixiJS におけるシーン切替ってどうするのだろうか？」と、何気なく思いまして…。
少し調査 &amp; サンプルコードを作成してみました。

 PixiJS v8 のシーンとは？
公式サイトを確認しましたが、PixiJS v8 には、いわゆるシーンは存在しない様子。
一応、ドキュメントには Scene のページが存在しますが、あくまでドキュメントのカテゴリータイトルとして Scene と命名しているだけのようでした。
試しに GPT-5 mini にも聞いてみました。
以下が解答になります。

PixiJS v8 では「シーン」は単...]]></description><link>https://zenn.dev/t_tonyo_maru/articles/924434befaf146</link><guid isPermaLink="true">https://zenn.dev/t_tonyo_maru/articles/924434befaf146</guid><pubDate>Sun, 05 Oct 2025 14:12:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FF20MB6l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PixiJS%2520v8%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%25B3%25E5%2588%2587%25E6%259B%25BF%25EF%25BC%2588Container%25E5%2588%2587%25E6%259B%25BF%25EF%25BC%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2582%2593%25E3%2582%2588%25E3%2583%25BC%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhNjVjZjg3MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>とんよー。</dc:creator></item><item><title><![CDATA[isXXX を簡単に構築してみいひん？]]></title><description><![CDATA[みなさん、こんにちは！もうそろそろ紅葉の季節ですね 🍁
フロントエンドエンジニアの @nyaomaru です！

 🧪 きっかけ
TypeScript で開発していると、「value is Foo」っていう型ガードを何度も何度も手書きしてるな… と思うことあらへん？
しかも、型とランタイムの判定がズレないように神経をすり減らすのも、地味にストレス。
そこで登場するのが is-kit や！

https://github.com/nyaomaru/is-kit
軽量・ゼロ依存の 「ガード生成キット」 として、退屈な boilerplate を一刀両断やで ✂️

 🎁 なんで is-kit...]]></description><link>https://zenn.dev/nyaomaru/articles/introduce-is-kit</link><guid isPermaLink="true">https://zenn.dev/nyaomaru/articles/introduce-is-kit</guid><pubDate>Sun, 05 Oct 2025 12:03:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2swkJygd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:isXXX%2520%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%2584%25E3%2581%25B2%25E3%2582%2593%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyaomaru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZiNzViM2IxYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>nyaomaru</dc:creator></item><item><title><![CDATA[Next.js 15とDDDで作る堅牢なシステム設計【第1部: 設計編】]]></title><description><![CDATA[
 はじめに
Next.js 15のApp RouterとServer Actionsが登場し、フロントエンド開発のパラダイムが大きく変わりました。しかし、新しい技術を使うだけでは、保守性の高いシステムは作れません。
本シリーズでは、ドメイン駆動設計（DDD） の思想をNext.js 15と組み合わせ、変更に強く、テストしやすい、プロフェッショナルなシステム設計を4部構成で解説します。

 📚 シリーズ構成


【第1部: 設計編】 ← 今回

DDDの基礎理解
レイヤードアーキテクチャ設計
ディレクトリ構成の決定



【第2部: Domain層編】

エンティティと値オブジェクトの実...]]></description><link>https://zenn.dev/7788/articles/f58adf9ecd42da</link><guid isPermaLink="true">https://zenn.dev/7788/articles/f58adf9ecd42da</guid><pubDate>Sun, 05 Oct 2025 03:53:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_r6_5Zuq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%252015%25E3%2581%25A8DDD%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E5%25A0%2585%25E7%2589%25A2%25E3%2581%25AA%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E8%25A8%25AD%25E8%25A8%2588%25E3%2580%2590%25E7%25AC%25AC1%25E9%2583%25A8%253A%2520%25E8%25A8%25AD%25E8%25A8%2588%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:7788%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ppRXlBZ0E1dW1LSnJrMkNGUGJHX0hZS0xmcDFadi1IaHZmLVpVNVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>7788</dc:creator></item><item><title><![CDATA[【React修行日記】Context API + TypeScript 型の渡し方]]></title><description><![CDATA[
 学習の目的

Contextについて理解する
Context APIの使い方について理解する
Context APIとTypeScriptを使用してテーマ切替の実装ができるようになる


 Contextとは
Reactでは通常、コンポーネント間でデータを受け渡すときにpropsを使い、親コンポーネントから子コンポーネントへ情報が伝達される。
しかし、階層が深くなると 「props drilling」と呼ばれる状態が発生しやすくなる。（情報のバケツリレー）
そこで、Contextを使用することによってあらかじめ上位コンポーネントで用意された値を、任意の子孫コンポーネントで参照できるよ...]]></description><link>https://zenn.dev/tsunadog/articles/36d0503c0c924f</link><guid isPermaLink="true">https://zenn.dev/tsunadog/articles/36d0503c0c924f</guid><pubDate>Sun, 05 Oct 2025 03:22:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pf9wHTwh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E4%25BF%25AE%25E8%25A1%258C%25E6%2597%25A5%25E8%25A8%2598%25E3%2580%2591Context%2520API%2520%252B%2520TypeScript%2520%25E5%259E%258B%25E3%2581%25AE%25E6%25B8%25A1%25E3%2581%2597%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsunadog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZDZiMjViNzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>tsunadog</dc:creator></item><item><title><![CDATA[[TS] クラスのコンストラクタを Awaitable にする]]></title><description><![CDATA[
 はじめに
TypeScript のコンストラクタで非同期処理を行い、インスタンスを直接 await したいことってありますよね？
私は別にありません
// 例: DB への接続
const db = await new Db(url)
これについて、Promise を継承することで実現できるのではと思い試してみました

 PromiseLikeBase
まず「コンストラクタの返り値が Awaitable なクラス」を書くにあたって生じるボイラープレートを汎用クラスとして定義します

 実装
class PromiseLikeBase&lt;T&gt; extends Promise&...]]></description><link>https://zenn.dev/482f/articles/ts-extends-promise</link><guid isPermaLink="true">https://zenn.dev/482f/articles/ts-extends-promise</guid><pubDate>Sun, 05 Oct 2025 00:07:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ntfFxAIs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTS%255D%2520%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25A9%25E3%2582%25AF%25E3%2582%25BF%25E3%2582%2592%2520Awaitable%2520%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:482F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiZWVmY2NlM2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png?_a=BACAGSGT" length="0" type="false"/><dc:creator>482F</dc:creator></item></channel></rss>