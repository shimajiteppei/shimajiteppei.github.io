<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 05 Jul 2025 12:04:04 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【TypeScript】enum, union, as constって意思を持って使い分けてる？]]></title><description><![CDATA[TypeScriptで、UIや挙動を切り替える時に使うキーを複数の値を一つにまとめたい事ってそこそこあると思うんですが、何で定義するのがいいんでしょうか？
パッと思い付くのはenum, ユニオン型, as constオブジェクトの３つですが、正直それぞれを明確な意思を持って選べていなかったので今回比較してみることにしました。

 結論
楽したいならユニオン型、幅広いケースに対応したいならas constオブジェクトを使うのが良さそう

 前提
今回は全てのTypeScriptの記法でこれらを使うべき/べきでないを論じるつもりはありません。あくまで複数の数値や文字列をひとまとまりとして表し...]]></description><link>https://zenn.dev/arfes/articles/e90c3b0bc30b08</link><guid isPermaLink="true">https://zenn.dev/arfes/articles/e90c3b0bc30b08</guid><pubDate>Sat, 05 Jul 2025 11:09:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U5yOZXre--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591enum%252C%2520union%252C%2520as%2520const%25E3%2581%25A3%25E3%2581%25A6%25E6%2584%258F%25E6%2580%259D%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A6%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:arfes%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d1S2NhVjV1T1Jkdk05N3JVZHBmZVR4S0gxRmt4aFFHNlduUklKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>arfes</dc:creator></item><item><title><![CDATA[[初心者向け] Typescriptプロジェクトを始める]]></title><description><![CDATA[
 はじめに
TypeScriptを使用することで、型を通じて早期にエラーを発見し、大規模アプリケーションのための強力な機能を活用することができます。


 1. TypeScriptプロジェクトの初期化
プロジェクトにpackage.jsonファイルがまだない場合は、新しいNode.jsプロジェクトを初期化して始めます：
npm init -y
次に、TypeScriptとts-nodeをインストールします。ts-nodeを通じてTypeScriptファイルを直接実行できます。
npm install typescript ts-node @types/node --save-dev
...]]></description><link>https://zenn.dev/oharu121/articles/9746aaa87fc944</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/9746aaa87fc944</guid><pubDate>Sat, 05 Jul 2025 08:49:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CjpT91OY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%255D%2520Typescript%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[Typescriptでやっておきたいこと]]></title><description><![CDATA[
 1. 型アサーション
型アサーションは、開発者がTypeScriptの型チェッカーに対して、「私はこの値の型を知っている、そしてそれを特定の型として扱いたい」と伝える方法です。
(async () =&gt; {
+  type User = {
+    name: string;
+    age: number;
+  };

  const result = await fetch("www.example.com/getUser/taro");
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${...]]></description><link>https://zenn.dev/oharu121/articles/d88733fb8d093c</link><guid isPermaLink="true">https://zenn.dev/oharu121/articles/d88733fb8d093c</guid><pubDate>Sat, 05 Jul 2025 08:34:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dGlIfLJV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258D%25E3%2581%259F%25E3%2581%2584%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:O%2520Haru%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdQdmFwaGptVTIwMkxrb29lbU5jcDFRREdnRU40NE5RVTB5U0VKdHBqUUJWSjNQMFM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>O Haru</dc:creator></item><item><title><![CDATA[Codex や Claude Code で子ども向け学習サイト「Enplayn」を作成した話]]></title><description><![CDATA[
 はじめに
長男が中学生に、次男が小学生に入学するタイミングで、楽しく勉強してくれたらいいなと思い、学習用の Web アプリケーション「Enplayn」を作成しました。
https://enplayn.com
バックエンドエンジニアながらフロントエンドを触るのも好きな私にとって、自身の学習も兼ねてアプリケーションをデプロイしてみたかったという動機もありました。
Enplayn の開発体験と、AI コーディングエージェントがもたらした開発効率の向上について紹介します。

 Enplaynとは
Enplayn (エンプレイン) は「遊んで楽しく学べるサイト」をコンセプトとした学習アプリケー...]]></description><link>https://zenn.dev/shuzaburo/articles/e3b6ba4738657d</link><guid isPermaLink="true">https://zenn.dev/shuzaburo/articles/e3b6ba4738657d</guid><pubDate>Sat, 05 Jul 2025 04:04:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_Vmoy6fG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Codex%2520%25E3%2582%2584%2520Claude%2520Code%2520%25E3%2581%25A7%25E5%25AD%2590%25E3%2581%25A9%25E3%2582%2582%25E5%2590%2591%25E3%2581%2591%25E5%25AD%25A6%25E7%25BF%2592%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2580%258CEnplayn%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%2581%2593%25E5%25A0%25B4%2520%25E7%25A7%2580%25E4%25B8%2589%25E9%2583%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiYTBhYjEyYjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>道場 秀三郎</dc:creator></item><item><title><![CDATA[[自作ライブラリ] VersaLog.js]]></title><description><![CDATA[
 VersaLog.jsとは？
VersaLog.js は、多機能で柔軟なログ出力を簡単に実現できる TypeScript/JavaScript ライブラリです。
シンプルな表示から詳細な実行情報まで、用途に応じたログ形式を選べます。
詳細・導入方法はこちら：
リポジトリ

 どんな機能があるの？
大きく分けて、3つです。



機能モード
説明




simple
シンプルで見やすいログを出力します。色付き・レベル付き


detailed
実行時間、レベル付きログ


file
ファイル名、行数、関数名付きログ



!
ログを出力する前に、必ず const logger = n...]]></description><link>https://zenn.dev/kayu0514/articles/ebaae3ba464cac</link><guid isPermaLink="true">https://zenn.dev/kayu0514/articles/ebaae3ba464cac</guid><pubDate>Fri, 04 Jul 2025 18:00:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--w1QWHbQX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%255D%2520VersaLog.js%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%2580%25AC%25E3%2580%2585%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViY2U4YmVmYjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>瀬々</dc:creator></item><item><title><![CDATA[1人目ポジション採用に完全特化した採用マッチングサービス「Hitorime」を開発しました！]]></title><description><![CDATA[
 はじめに

 日本で一番「採用」の熱い場所をお届けしたい
こんにちは！！
株式会社APILLOXの山下です！
このたび、1人目ポジションに完全特化した採用マッチングサービス「Hitorime（ヒトリメ）」を正式にリリースしました！！
【サービスサイト(お仕事をお探しの方向け)】
https://hitorime.net
【サービスサイト(採用担当の方向け)】
https://hitorime.net/lp

 Hitorimeってどんなサービス？
Hitorimeは、採用に前のめりな企業と裁量の大きな仕事に挑戦して大きく成長したい求職者が1人目ポジションを通じてマッチングする採用プラ...]]></description><link>https://zenn.dev/hitorime/articles/2be9001fcadf8c</link><guid isPermaLink="true">https://zenn.dev/hitorime/articles/2be9001fcadf8c</guid><pubDate>Fri, 04 Jul 2025 09:32:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4Iw8xnox--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:1%25E4%25BA%25BA%25E7%259B%25AE%25E3%2583%259D%25E3%2582%25B8%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E6%258E%25A1%25E7%2594%25A8%25E3%2581%25AB%25E5%25AE%258C%25E5%2585%25A8%25E7%2589%25B9%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E6%258E%25A1%25E7%2594%25A8%25E3%2583%259E%25E3%2583%2583%25E3%2583%2581%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2580%258CHitorime%25E3%2580%258D%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:myrcm%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2ZTZiM2Y1ZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Hitorime%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNWFkMWVhMmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myrcm</dc:creator></item><item><title><![CDATA[TypeScriptのユーティリティ型について知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりユーティリティ型を理解しようの会
とは言っても、具体的なものはそんなに書かないので説明だけ。

 ユーティリティ型とは
TypeScriptで元々設定されている型を変換したり操作したりする型。
色々なものがあるので一覧はこちらを参照。
例えば Record&lt;Keys, Type&gt; はオブジェクトのkeyと値の型を定義して以下のように使用。
const hoge: Record&lt;string, number&gt; = { first: 1, second: 2, third: 3 };
Pick&lt;Type, Keys&gt; はオブジ...]]></description><link>https://zenn.dev/mt5/articles/5705445b847cf9</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/5705445b847cf9</guid><pubDate>Fri, 04 Jul 2025 09:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EMQNFphu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[GitHub Apps (およびCheck Run REST API) 入門]]></title><description><![CDATA[
 この記事は何ですか?
僕は毎日GitHub Appsのお世話になっているのですが、その背後にある仕組みがいまいち分かっていませんでした。ソフトウェア開発者である以上、実際に作ってみることで仕組みを理解したいと思い、この記事では小さな GitHub App を自作して GitHub Apps の仕組みを学ぶことにしました。本記事で作成する GitHub App を Hello World App と呼びます。
成果物のソースコードはGitHubで公開しています。これをインストールすると、GitHubのプルリクエストに対して "Hello, world!" というチェックが実行されます。...]]></description><link>https://zenn.dev/mahata/articles/intro-to-github-apps</link><guid isPermaLink="true">https://zenn.dev/mahata/articles/intro-to-github-apps</guid><pubDate>Fri, 04 Jul 2025 08:29:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lY9mT3t3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%2520Apps%2520%2528%25E3%2581%258A%25E3%2582%2588%25E3%2581%25B3Check%2520Run%2520REST%2520API%2529%2520%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasunori%2520MAHATA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pNUGNmdW9MOU95NkxjbTlwSjk0d1Joc1dLS2ZxdVBodUllbFdxNmc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasunori MAHATA</dc:creator></item><item><title><![CDATA[TypeScriptのPromiseLikeについて知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりPromiseLikeを理解しようの会

 PromiseLikeとは
Promiseのcatchメソッドがない版。
ここで記載されている定義によると
interface PromiseLike&lt;T&gt; {
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * ...]]></description><link>https://zenn.dev/mt5/articles/83a37a8aa4006d</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/83a37a8aa4006d</guid><pubDate>Fri, 04 Jul 2025 08:10:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--n0bE_tBl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEPromiseLike%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのPromise<T>について知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりPromise&lt;T&gt;を理解しようの会

 Promise&lt;T&gt;とは
Promiseの型を指定する書き方。
TにはPromiseが成功した際に解決される型を格納する。
と言っても若干 🤔 なのでまずはPromiseから。

 Promiseとは
非同期処理でまだ結果がわからない値を管理するもの。
一般的にコードを上から順に処理を行うが、APIの通信などで時間がかかる処理が走るとその後もズルズル待たなきゃいけなくなってしまうので非同期処理として並列で処理するようにする。
参考: https://developer.mozilla.org/...]]></description><link>https://zenn.dev/mt5/articles/a8f0457a7d8638</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/a8f0457a7d8638</guid><pubDate>Fri, 04 Jul 2025 07:46:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SDeGGybD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEPromise%253CT%253E%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのMapped Typesについて知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりMapped Typesを理解しようの会

 Mapped Typesとは
リテラル型を反復処理してそれをプロパティ名とした新しい型を作成するもの。
参考: https://www.typescriptlang.org/docs/handbook/2/mapped-types.html
下記のようにリテラル型Keysを反復処理して型Hogeを作成できる。
type Keys = "name" | "message";
type Hoge = { [Mapped in Keys]: string }; // リテラル型 Keys を反復処理して Hoge を作...]]></description><link>https://zenn.dev/mt5/articles/6dff7ab2b6e55e</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/6dff7ab2b6e55e</guid><pubDate>Fri, 04 Jul 2025 06:46:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kxAAfJNJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEMapped%2520Types%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[useEffectの使い方について]]></title><description><![CDATA[
 useEffectとは
Reactの副作用フック。コンポーネントのライフサイクルに応じて処理を実行する。

 基本構文
useEffect(() =&gt; {
  // 実行したい処理
}, [依存配列]);

 実行タイミングのパターン

 1. 毎回実行（依存配列なし）
useEffect(() =&gt; {
  console.log('レンダリング毎に実行');
  // APIコール、DOM操作など
});


実行タイミング: 毎回レンダリング後

用途: あまり使わない（パフォーマンス問題）


 2. マウント時のみ実行（空の依存配列）
useEffect(() ...]]></description><link>https://zenn.dev/shogo/articles/b0bcc7cbed3644</link><guid isPermaLink="true">https://zenn.dev/shogo/articles/b0bcc7cbed3644</guid><pubDate>Fri, 04 Jul 2025 06:06:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ym5PPZBu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useEffect%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shogo.yamada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxNEFZQWpMeDhSUzhxZmFZSjlzaXJ2VXNDQkpxVUFDVmVHRXNndWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shogo.yamada</dc:creator></item><item><title><![CDATA[【Next.js】ホットリロード（Fast Refresh）が効かない！？それ、メモ化が原因かも]]></title><description><![CDATA[こんにちは!
株式会社Sally 新人エンジニアの @haruten です♪
私たち株式会社Sallyでは、マーダーミステリーをスマホやPCで遊べるアプリ「ウズ」や、マーダーミステリーを制作してウズ上で公開・プレイできるエディターツール「ウズスタジオ」などを開発・運営しています。
https://sally-inc.jp/
弊社で複数のNext.jsプロジェクトを開発している中で、ホットリロード（以下、Fast Refresh）のパフォーマンスが大きく低下する問題が発生しました。
本記事では、その原因と対応策をまとめてご紹介します。
※ 本記事で扱う事象は、Next.js 15.3.3 ...]]></description><link>https://zenn.dev/uzu_tech/articles/fb415b45c9a68a</link><guid isPermaLink="true">https://zenn.dev/uzu_tech/articles/fb415b45c9a68a</guid><pubDate>Fri, 04 Jul 2025 05:44:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ydg7fFrS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Fast%2520Refresh%25EF%25BC%2589%25E3%2581%258C%25E5%258A%25B9%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%25EF%25BC%259F%25E3%2581%259D%25E3%2582%258C%25E3%2580%2581%25E3%2583%25A1%25E3%2583%25A2%25E5%258C%2596%25E3%2581%258C%25E5%258E%259F%25E5%259B%25A0%25E3%2581%258B%25E3%2582%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:haruten%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5NjI5NGIwZmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UZU%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNzI0NDRkNGMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>haruten</dc:creator></item><item><title><![CDATA[TypeScriptによるcreate関数を使わないドメインモデルの関数型アプローチ]]></title><description><![CDATA[
 はじめに
TypeScriptでドメイン駆動設計（DDD）を実践する際、ドメインモデルの表現方法はプロジェクトの保守性や開発体験に大きな影響を与えます。一般的に、モデルの型定義と、そのインスタンスを生成するファクトリ関数は別々に定義されることが多いのではないでしょうか。
例えば、Userという型と、それを生成するためのcreateUserという関数。このアプローチは直感的ですが、モデルに関する知識が「型定義」と「ファクトリ関数」という二つの場所に分散してしまい、ドメインモデルの凝集度を下げてしまう一因になり得ます。
この記事では、classを使わずにTypeScriptの言語機能を活...]]></description><link>https://zenn.dev/mackay/articles/57267630e47296</link><guid isPermaLink="true">https://zenn.dev/mackay/articles/57267630e47296</guid><pubDate>Fri, 04 Jul 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jiC8Mz67--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258Bcreate%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E4%25BD%25BF%25E3%2582%258F%25E3%2581%25AA%25E3%2581%2584%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B1%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EyNzI5NWRmYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッケイ</dc:creator></item><item><title><![CDATA[Vue 2からVue 3移行に伴うOptions APIとComposition APIの比較]]></title><description><![CDATA[!
この記事は Qiita に2023年1月に投稿した内容の移行版です。


 概要
現在参画中のプロジェクトでアプリのフロントエンド開発環境がVue2からVue3に変わろうとしているタイミングに差し掛かったため、これを機に自身もリマインドを書こうと思います。
ver3がベータ版だったこともあり、使用がメジャーになるまでは個人開発でもPENDしている状態だったのですが、こちらも機を見て導入したいです。

 本記事の前提
Vue 2では、基本的に Options API という記述方法を使うのがメジャーでした。
Vue 3ではこれに加え、 Composition API という記述方法も使...]]></description><link>https://zenn.dev/xinome/articles/19a55109e177ad</link><guid isPermaLink="true">https://zenn.dev/xinome/articles/19a55109e177ad</guid><pubDate>Fri, 04 Jul 2025 02:53:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--obc_cFNb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue%25202%25E3%2581%258B%25E3%2582%2589Vue%25203%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%25AB%25E4%25BC%25B4%25E3%2581%2586Options%2520API%25E3%2581%25A8Composition%2520API%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:xinome%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzMTQ2NWJhZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>xinome</dc:creator></item><item><title><![CDATA[【React × Typescript】マウスイベントについて]]></title><description><![CDATA[
 初めに
こんにちは！今回は、React × TypeScriptでの 「クリック」や「ホバー」 といったマウスイベントの実装について、あらためて整理してみたいと思います。
マウスイベントとは、マウスカーソルの動きやボタンの操作によって発生する一連のイベントのことを指します。
本記事では、特に使用頻度の高い「クリックイベント」と「ホバー効果」にフォーカスしてまとめてみようと思います！

 クリックイベント

 基本的なクリックの実装
ボタンがクリックされるたびにクリック回数を数え、表示する例をもとに考えていきます。
import React, { useState } from 're...]]></description><link>https://zenn.dev/daichi09167/articles/dd273ac428872e</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/dd273ac428872e</guid><pubDate>Fri, 04 Jul 2025 02:44:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XdFmMnuj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%2520%25C3%2597%2520Typescript%25E3%2580%2591%25E3%2583%259E%25E3%2582%25A6%25E3%2582%25B9%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi09167%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM3YTc4OTEwMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi09167</dc:creator></item><item><title><![CDATA[TypeScriptのタプルを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりタプルを理解しようの会

 タプル型とは
配列のうち、要素の数と各要素の型を固定した型。
参考: https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types
配列の型定義だと string[] や number[]、要素の型が異なる場合は any[] のように指定した。
が、このタプル型で指定することで配列の要素数やその要素ごとの型を定義しより縛りを強くし安全性を保つことができる。
type Hoge = any[];
// ↑異なる型の要素を持つ指定方法  ↓こちらにするこ...]]></description><link>https://zenn.dev/mt5/articles/42a3cf06e6343e</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/42a3cf06e6343e</guid><pubDate>Fri, 04 Jul 2025 00:28:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VZgz5zZo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのtypeとinterfaceの違いを解説]]></title><description><![CDATA[
 基本的な違い

 interface（インターフェース）

オブジェクトの形状を定義するのに特化
同じ名前で再宣言すると自動的にマージされる
extendsで継承可能


 type（型エイリアス）

あらゆる型を定義できる（オブジェクト、ユニオン型、プリミティブ型など）
再宣言できない
&amp;（交差型）で拡張可能


 具体例で比較

 1. 基本的な使い方
// ✅ どちらも同じように使える
interface UserInterface {
  id: number
  name: string
}

type UserType = {
  id: number
  nam...]]></description><link>https://zenn.dev/shigerufukada/articles/f48cf72d329500</link><guid isPermaLink="true">https://zenn.dev/shigerufukada/articles/f48cf72d329500</guid><pubDate>Thu, 03 Jul 2025 22:31:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IDhEpSEN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEtype%25E3%2581%25A8interface%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Fukada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmZGZhNTRjOGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Fukada</dc:creator></item><item><title><![CDATA[Typescriptの一部完全に理解してた。。(思ったことをそのまま書きます)]]></title><description><![CDATA[みなさんはTypescriptは大好きですか？
私は。。。😇
Typescriptは難しい言語だと思っています。
先日TSKaigiに参加をしてきましたが「まだまだ知らないことがたくさんあるな」「ものすごく勉強になった」というような内容がたくさんありました！
https://2025.tskaigi.org/
「カンファレンスは、、いいよなぁ〜〜〜」
また来年もあったら行きたいなと思いました！
話は変わって、以前このような記事を書いたと思います。
https://zenn.dev/terusi/articles/46abffaaf7f002
この記事を書いてから時間が経ちふと、疑問に思っ...]]></description><link>https://zenn.dev/terusi/articles/542f75deb6dd66</link><guid isPermaLink="true">https://zenn.dev/terusi/articles/542f75deb6dd66</guid><pubDate>Thu, 03 Jul 2025 18:58:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u6XO4t-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2581%259F%25E3%2580%2582%25E3%2580%2582%2528%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E3%2581%259D%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25BE%25E6%259B%25B8%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2599%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2597%25E3%2580%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlM2M5MzkyNjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てるし〜</dc:creator></item><item><title><![CDATA[MCPサーバーをスクリプトのように書き捨てよう]]></title><description><![CDATA[
 はじめに
みなさん、MCPを活用していますか？
良質なMCPサーバーを探したり開発したりするのも良いですが、MCPサーバーは実際のところ非常に簡単に作成できるため、ちょっとした自動化やタスクの解決にスクリプト感覚で使い捨てることができます。
この記事では、スタンドアローンで動作する非常にシンプルなMCPサーバーを作成し、適当なAIエージェントで動作させる方法を紹介します。

 簡単なMCPサーバーの例
以下は基本的なMCPサーバーの例です。
このMCPサーバーは、エージェントからの入力をそのまま返すだけのEchoツールを提供します。
このように、MCPサーバーは30行程度のボイラープ...]]></description><link>https://zenn.dev/esnir/articles/disposable-mcp-server</link><guid isPermaLink="true">https://zenn.dev/esnir/articles/disposable-mcp-server</guid><pubDate>Thu, 03 Jul 2025 15:23:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SrzcDiTi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E6%259B%25B8%25E3%2581%258D%25E6%258D%25A8%25E3%2581%25A6%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%25E3%2581%2599%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwNzU3NzQ4MGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りんす</dc:creator></item></channel></rss>