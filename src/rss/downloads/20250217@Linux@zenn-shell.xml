<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「shell」のフィード]]></title><description><![CDATA[Zennのトピック「shell」のRSSフィードです]]></description><link>https://zenn.dev/topics/shell</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/c8d33e6510.jpeg</url><title>Zennの「shell」のフィード</title><link>https://zenn.dev/topics/shell</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 17 Feb 2025 12:04:09 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/shell/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[AWS CDKの環境構築しすぎて自動化したくなったので自動化してみた]]></title><description><![CDATA[株式会社Specteeセキュリティチームの都築です。

 導入と背景
AWS CDKは、インフラをコードで管理できる便利なツールですが、プロジェクトごとの環境構築や初期設定に手間がかかることがあります。
毎回同じようなコマンドを打ち、構成ファイルを用意するのが面倒に感じたため、環境構築を自動化して効率化を図ることにしました。
本記事では、AWS CDKの環境構築作業を自動化する方法を紹介し、セットアップの手間を大幅に減らす手法を解説します。特に、複数プロジェクトを管理する人にとって役立つ内容です。

 方法
今回のディレクトリ構造

ディレクトリツリー
-+- Dockerfile
 +...]]></description><link>https://zenn.dev/spectee/articles/c8cbac2533bd20</link><guid isPermaLink="true">https://zenn.dev/spectee/articles/c8cbac2533bd20</guid><pubDate>Mon, 17 Feb 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rbzxSNmO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AWS%2520CDK%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2597%25E3%2581%2599%25E3%2581%258E%25E3%2581%25A6%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:LACO46%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwYzYyY2ZlNDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Spectee%2520Developers%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjMTVmNDM3MDUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>LACO46</dc:creator></item><item><title><![CDATA[その手間ムダじゃない？3分で時短できるエイリアス（ alias ）設定法！]]></title><description><![CDATA[
 0. Docker と Git のエイリアス設定で開発効率を向上させる
開発中に何度も打つ長いコマンド、毎回入力するのが面倒だと感じたことはありませんか？そんな手間をなくし、たった3分で作業を効率化するエイリアス設定法を紹介します。
シェルのエイリアスと Git のエイリアスを活用すれば、よく使うコマンドを短縮して日々の開発をより快適に進めることができます。
本記事では、Docker や Git のエイリアスを設定し、無駄なタイピングを削減する方法を詳しく解説します。

 1. Zsh のエイリアス設定
まず、Zsh の設定ファイル ~/.zshrc を開きます。
nano ~/.z...]]></description><link>https://zenn.dev/take_tech/articles/c1573931f955c3</link><guid isPermaLink="true">https://zenn.dev/take_tech/articles/c1573931f955c3</guid><pubDate>Sun, 16 Feb 2025 20:27:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ok3tFma9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%259D%25E3%2581%25AE%25E6%2589%258B%25E9%2596%2593%25E3%2583%25A0%25E3%2583%2580%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%259F3%25E5%2588%2586%25E3%2581%25A7%25E6%2599%2582%25E7%259F%25AD%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25A8%25E3%2582%25A4%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25B9%25EF%25BC%2588%2520alias%2520%25EF%25BC%2589%25E8%25A8%25AD%25E5%25AE%259A%25E6%25B3%2595%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Take%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyNThiNDQ2YTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Take</dc:creator></item><item><title><![CDATA[シェルスクリプトの curl にとりあえず付けておくべきオプション（＋たまに使うオプションのまとめ）]]></title><description><![CDATA[
 はじめに
シェルスクリプト中で API からデータを取得する際など、 curl でどんなオプションを指定しておくか毎回悩んでしまうのでまとめておきます。
ついでに必要に応じて使うオプションもまとめておきます。
※シェルスクリプトに限らず CLI でも有用です

 とりあえず指定しておくオプション
curl -fsSL &lt;URL&gt;

 各オプションの説明

 -f, --fail
http ステータスコードがエラーの場合にスクリプトを異常終了します。
curl はデフォルトだとサーバーがエラーのステータスコードを返した場合、サーバーが返したエラーのHTMLを表示し、スクリプ...]]></description><link>https://zenn.dev/shuh/articles/shellscript-curl</link><guid isPermaLink="true">https://zenn.dev/shuh/articles/shellscript-curl</guid><pubDate>Sun, 16 Feb 2025 16:53:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dZXL1-iP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25AE%2520curl%2520%25E3%2581%25AB%25E3%2581%25A8%25E3%2582%258A%25E3%2581%2582%25E3%2581%2588%25E3%2581%259A%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%25E3%2581%25B9%25E3%2581%258D%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25EF%25BC%2588%25EF%25BC%258B%25E3%2581%259F%25E3%2581%25BE%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2586%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shusch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0ODg1Y2EwN2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shusch</dc:creator></item><item><title><![CDATA[# UNIXプログラミング環境]]></title><description><![CDATA[
 UNIXプログラミング環境 (1章)
TIL: Today I Learned　の1タイトル目にはUNIXプログラミング環境という本を選択しました。
毎日学んだことを1章ずつ記事にしていきます。まぁ備忘録です。
プロフィールにある通り端くれのエンジニアで普段はpython等々を使用して分析など行なっているのですが、サービス開発してみたいという思いから、基礎の基礎から学び直そうとしている所存です。
といってもLinuxコマンドを触ったことがあるので、新たな学びを中心に記載します。網羅的に学びたい方はぜひ↓の書籍を！
UNIXプログラミング環境

 1章 初心者のためのUNIX

 wh...]]></description><link>https://zenn.dev/rgrey/articles/854706f0153999</link><guid isPermaLink="true">https://zenn.dev/rgrey/articles/854706f0153999</guid><pubDate>Sun, 16 Feb 2025 16:00:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S3_FnTfe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523%2520UNIX%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E7%2592%25B0%25E5%25A2%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25AB%25AF%25E3%2581%258F%25E3%2582%258C%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UxYTQxODM3ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>端くれエンジニア</dc:creator></item><item><title><![CDATA[OAuthをcurlとphpでやってみる]]></title><description><![CDATA[去年10月から ソーシャルPLUS にフロントエンドエンジニアとして業務委託で参画しているほっしゃん(https://github.com/hotsum92)です!!!
あまりログイン関連の技術については、触ったことがなかったのですが、ソーシャルPLUSに参画してから、OIDCを勉強させていただきました。今回は、その基本となるOAuth演舞を舞ってやろうとおもいます。
勉強はしてみたけど、よくわからないみたいな状況をぬけだすために、とりあえず動くものを作ってみることにします。なるべくシンプルな環境で動作確認をしていきたいので、curlとphpで、OAuthの動きを真似してみようとおもいま...]]></description><link>https://zenn.dev/socialplus/articles/35f27f5b1814ee</link><guid isPermaLink="true">https://zenn.dev/socialplus/articles/35f27f5b1814ee</guid><pubDate>Fri, 14 Feb 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rEfKjapi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OAuth%25E3%2582%2592curl%25E3%2581%25A8php%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hotsum%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4Mjg2YmNjMDEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SocialPLUS%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5MjFmMmZlYmEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hotsum</dc:creator></item><item><title><![CDATA[Macのデフォルトのシェルをzshからfishに切り替える方法]]></title><description><![CDATA[
 なぜシェルを切り替えるか
飽くなきシェルへのこだわり…などは全然なくて、VS CodeエディタのAIコーディングのためのCline（Roo Code）という拡張機能のためです。
本来は、ClineがVS Codeエディタのターミナルでコマンドを実行したり、その出力を読んでくれるはずなのですが、どうしてもターミナル出力を読んでくれなくて、同じように困っている人のClineのissueに「シェルをzshからfishに切り替えた」という力技があったので、試したらうまくいったし、fishも結構いい感じなので切り替えちゃおうかなという感じです。
https://x.com/karaage070...]]></description><link>https://zenn.dev/karaage0703/articles/275bf8f906cc66</link><guid isPermaLink="true">https://zenn.dev/karaage0703/articles/275bf8f906cc66</guid><pubDate>Wed, 12 Feb 2025 15:40:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ci_exqPC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mac%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%2592zsh%25E3%2581%258B%25E3%2582%2589fish%25E3%2581%25AB%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%2589%25E3%2581%2582%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hDZEtvakJfZXdDTjNCV1Z0WXIteFNIZ0hmRjlXZmt3QzI5c0Y0aXYwPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>からあげ</dc:creator></item><item><title><![CDATA[Amazon linux 2023で SL🚂 コマンドを使えるようにする！]]></title><description><![CDATA[
 Amazon linux 2023

参考：https://blog.serverworks.co.jp/create-package-for-al2023-01

 概要：
コツは、Amazon linux 2023ではRHELリポジトリが利用できないため、ソースコードからビルドしてインストールを行うことです。

 手順：

ビルドツールをインストール
ソースコードをダウンロード
ソースコードをビルド
ビルドされたコマンドをインストール

ビルドツールをインストール
$ sudo dnf install rpm-build

ソースコードをダウンロード
$ sudo wget ht...]]></description><link>https://zenn.dev/apo_zenn/articles/c1eacb2a50e5cf</link><guid isPermaLink="true">https://zenn.dev/apo_zenn/articles/c1eacb2a50e5cf</guid><pubDate>Sat, 08 Feb 2025 00:12:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hKl3Tdvy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Amazon%2520linux%25202023%25E3%2581%25A7%2520SL%2520%2520%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:apo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVhNmY0NWNjMjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>apo</dc:creator></item><item><title><![CDATA[TeXの出力を文字列として得る術（テコテフ⹀TecoTeX）]]></title><description><![CDATA[
 TeXの出力を文字列として得る術（テコテフ⹀TecoTeX）
今日は立春の前日、節分ですね。
聞くところによると節分は、TeXへの理解を整理し節目とする日だそうです。
そんなわけで、この記事を仕上げることにしました。

 TeX言語を組版以外にも利用したい
TeXの出力は、PDFへの変換元となるDVIという形式です。
通常の方法では、TeXが処理した完成形の文章を文字列として取り出して別の用途で使うことはできません。
しかし、TeXで整形した完成形の文章を文字列で得たいというのは、誰しもが思うところでしょう。
文字列として得られれば、HTMLやマークダウンなどの他の形にしたり、校正や...]]></description><link>https://zenn.dev/tyty/articles/e4b62474657e79</link><guid isPermaLink="true">https://zenn.dev/tyty/articles/e4b62474657e79</guid><pubDate>Sun, 02 Feb 2025 10:09:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JQ3tyYys--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TeX%25E3%2581%25AE%25E5%2587%25BA%25E5%258A%259B%25E3%2582%2592%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E5%25BE%2597%25E3%2582%258B%25E8%25A1%2593%25EF%25BC%2588%25E3%2583%2586%25E3%2582%25B3%25E3%2583%2586%25E3%2583%2595%25E2%25B9%2580TecoTeX%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25B4%25A5%25E8%258C%25B6%25E5%2588%25A9%25E4%25BC%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2YjY0ZmU2NWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>津茶利休</dc:creator></item><item><title><![CDATA[イシューのコピーをスクリプトでやってみてた]]></title><description><![CDATA[
 はじめに
手動でイシューを何度も複製するのが面倒だったので試しにスクリプトを作ってみました。
以下のツールを使用しているので任意の方法でインストールして使えるようにしておきます。

jq
GitHub CLI


 ローカルリポジトリに移動
$ cd /リポジトリのパス

 スクリプト用のファイルを設置
任意の場所にスクリプト用のファイルを設置します。
$ mkdir sh
$ cd sh
$ touch cp-issue
リポジトリ内に以下のように作成されます。
sh
 ┗ cp-issue

 スクリプトを書く
作成したcp-issueファイルに以下の内容を記述します。

cp-...]]></description><link>https://zenn.dev/s_takashi/articles/f1ec1e14731764</link><guid isPermaLink="true">https://zenn.dev/s_takashi/articles/f1ec1e14731764</guid><pubDate>Fri, 31 Jan 2025 00:57:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RaBnSO4k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A4%25E3%2582%25B7%25E3%2583%25A5%25E3%2583%25BC%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2582%2592%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25A6%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shiratori%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiOTZmNDhhMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shiratori</dc:creator></item><item><title><![CDATA[[課題振り返り] minishell 前編]]></title><description><![CDATA[
 はじめに
今回は42の一番の山場ともいわれるminishellについて振り返っていきます。

 課題概要
C言語で基本的な機能を持ったshell(bash)を実装します。

 実装方法
一番参考にするのはBash Reference Manualだと思います。(terminalでman bashでも見れます)
https://www.gnu.org/software/bash/manual/bash.html#What-is-Bash_003f
bashの実際のソースコードじゃないの？と思った方もいると思います。が、正直bashのソースコードを全て読もうと思うと果てしなく時間がかかる...]]></description><link>https://zenn.dev/kodyi/articles/0bea756f0ce23c</link><guid isPermaLink="true">https://zenn.dev/kodyi/articles/0bea756f0ce23c</guid><pubDate>Mon, 27 Jan 2025 10:15:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g_dwjEWo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E8%25AA%25B2%25E9%25A1%258C%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%255D%2520minishell%2520%25E5%2589%258D%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViMWY1YjBmMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カイ</dc:creator></item><item><title><![CDATA[シェルスクリプトとは]]></title><description><![CDATA[
シェルスクリプトとはシェルで実行するコマンドなどがまとまったドキュメントのようなものだ。
このドキュメントを用意しておくと、上から順番にコマンドが実行されていくので、いちいちコマンドを打たなくて済む。例えば、定期的な保守作業など、シェルスクリプトを用意しておけば、コマンドを打たずにすぐに実行できる。

(参照元：【1分でわかる】シェルスクリプトとは？)
らしいです。
コマンドラインとかで実行するような、
ディレクトリ移動のためのcd ...とか、ファイル編集のためのvim ...とかが
コマンドって呼ばれてますが、
こういうコマンドを自作して、まとめて書いておけるのが
シェルスクリプト...]]></description><link>https://zenn.dev/iizukasan/articles/what_is_shell-script</link><guid isPermaLink="true">https://zenn.dev/iizukasan/articles/what_is_shell-script</guid><pubDate>Sat, 25 Jan 2025 08:31:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--24UEx5ba--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:iizk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwMGM0NzA2ZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>iizk</dc:creator></item><item><title><![CDATA[m2 mac環境構築備忘録]]></title><description><![CDATA[
 背景
m1 mac -&gt; intel mac -&gt; ubuntu -&gt; windows11(wsl) -&gt; m2 mac と、ここ一年で環境が変わりすぎて疲れた。
そろそろセットアップシェルスクリプト書いとくか...と思ったので、何をしたのか整理する。

 ssh-keyの作成
githubでdotfilesを管理してるからまずssh-keyを作るよ。
ssh-keygen -t ed25519 -C "your_email@example.com"
出力の意味がわからなかったら Enter 4~5回叩くといいよ。

 dotfilesのclone、シンボリッ...]]></description><link>https://zenn.dev/mum26/articles/a46c61bb09e34a</link><guid isPermaLink="true">https://zenn.dev/mum26/articles/a46c61bb09e34a</guid><pubDate>Fri, 24 Jan 2025 21:51:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YEKTFQfk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:m2%2520mac%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2581%25B6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkhqVGx0SGJLUVpadllrTWpWNFplbnd4X3l6Nzl5aDBmektjYkhPZDY3bWxfbUxnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろぶ</dc:creator></item><item><title><![CDATA[[macOS] 'ls'コマンドの出力をオシャレにする]]></title><description><![CDATA[
 やったこと

Warpのインストール

ezaコマンドのインストール

lsのエイリアス設定
アイコンフォントのインストール
Warpのフォント設定


 Warpのインストール
WarpはRustで書かれた高機能なターミナルエミュレータ。Homebrewでインストールできる。
brew install --cask warp

 ezaコマンドのインストール
ezaはlsの現代的な代替コマンド。Homebrewでインストールできる。
brew install eza

 lsのエイリアス設定
~/.zshrcに以下を追記する。source ~/.zshrcを忘れずに。

~/.zs...]]></description><link>https://zenn.dev/niikei/articles/2a4df1093ebc45</link><guid isPermaLink="true">https://zenn.dev/niikei/articles/2a4df1093ebc45</guid><pubDate>Thu, 23 Jan 2025 10:24:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D8z7O9wL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BmacOS%255D%2520%2527ls%2527%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E5%2587%25BA%25E5%258A%259B%25E3%2582%2592%25E3%2582%25AA%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AC%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:niikei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmFabjhjTGZRRmdkX3hfUkR2S1VOOUJ3WjFoc1NkQlhBaWg2QzZGUktlb3BEYnZxbng9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>niikei</dc:creator></item><item><title><![CDATA[[macOS]'rm'コマンドでファイルをゴミ箱に移動させる]]></title><description><![CDATA[
 やったこと


trashコマンドをインストール

rmをtrashにエイリアスする

trashコマンドがない場合、警告を出すようにする


 trashコマンドをインストール
trashコマンドはファイルをゴミ箱に移動させる。Homebrewでインストールできる。
brew install trash
trash -Fを使うと削除後にゴミ箱から戻せる。

 rmをtrashにエイリアスする
~/.zshrcに以下を追記する。

~/.zshrc
export PATH="/opt/homebrew/opt/trash/bin:$PATH"
if type trash &gt; /...]]></description><link>https://zenn.dev/niikei/articles/52c1a07b2f742e</link><guid isPermaLink="true">https://zenn.dev/niikei/articles/52c1a07b2f742e</guid><pubDate>Wed, 22 Jan 2025 12:30:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fcX7KaKk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BmacOS%255D%2527rm%2527%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25B4%25E3%2583%259F%25E7%25AE%25B1%25E3%2581%25AB%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:niikei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSmFabjhjTGZRRmdkX3hfUkR2S1VOOUJ3WjFoc1NkQlhBaWg2QzZGUktlb3BEYnZxbng9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>niikei</dc:creator></item><item><title><![CDATA[ターミナル上でgitのプロジェクトを見やすくするやつ]]></title><description><![CDATA[.bash_profileに追記するとカレントディレクトリのブランチやファイルの状態をPS1に表示する。

.bash_profile
# get current branch in git repo
function parse_git_branch() {
  BRANCH=`git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=`parse_git_dirty`
    echo "[${BRANCH}${STA...]]></description><link>https://zenn.dev/shin_dev/articles/e6f47eb1d77307</link><guid isPermaLink="true">https://zenn.dev/shin_dev/articles/e6f47eb1d77307</guid><pubDate>Mon, 20 Jan 2025 03:02:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5vNR4GzL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E4%25B8%258A%25E3%2581%25A7git%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E8%25A6%258B%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shin_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmOTA3MWYyNmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shin_dev</dc:creator></item><item><title><![CDATA[[Ubuntu 22.04] systemctl(systemd)でシェルスクリプトを自動実行]]></title><description><![CDATA[Ubuntu起動時にシェルスクリプトを自動実行する手順の備忘録です。bashシェルを想定しているためzshなどを使用している方は適宜読み替えてください。

 手順

 1. シェルスクリプトを作成
任意の場所でシェルスクリプトを作成します。

sample.sh
#!/bin/bash

# 例) pythonスクリプトを実行
/home/ubuntu/.pyenv/versions/3.12.7/bin/python3.12 /home/ubuntu/example/main.py


ファイルは絶対パスで表記
カレントディレクトリを移動する必要がある場合はcd /home/ubunt...]]></description><link>https://zenn.dev/amano_spica/articles/ubuntu-systemctl-service</link><guid isPermaLink="true">https://zenn.dev/amano_spica/articles/ubuntu-systemctl-service</guid><pubDate>Sun, 19 Jan 2025 12:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fo7vimeJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BUbuntu%252022.04%255D%2520systemctl%2528systemd%2529%25E3%2581%25A7%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%25AE%259F%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SP1CA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmMzI3MDZlMjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SP1CA</dc:creator></item><item><title><![CDATA[Linux 特定の文字列に一致するファイルを一括置換]]></title><description><![CDATA[_path_配下の_serch_に一致するファイル内の_serch_を_replace_に一括置換してバックアップ（xxx.bak）を作成。
-- 実行前に確認
grep -e "_serch_" -rl /_path_ | xargs sed -n 's/_serch_/_replace_/p'

-- 実行
grep -e "_serch_" -rl /_path_ | xargs sed -i.bak -e 's/_serch_/_replace_/g'
]]></description><link>https://zenn.dev/stnr_kai/articles/c393de98ff44e1</link><guid isPermaLink="true">https://zenn.dev/stnr_kai/articles/c393de98ff44e1</guid><pubDate>Sun, 19 Jan 2025 03:04:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eUhLDNH7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%2520%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25AB%25E4%25B8%2580%25E8%2587%25B4%25E3%2581%2599%25E3%2582%258B%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25B8%2580%25E6%258B%25AC%25E7%25BD%25AE%25E6%258F%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ4ZDRkZjAyYzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kai</dc:creator></item><item><title><![CDATA[プロセス置換 (Process Substitution)について]]></title><description><![CDATA[bash や zsh にはプロセス置換 (Process Substitution)という機能があるのだが、あまり使うことがなく、毎回忘れるのでメモ。

 プロセス置換 (Process Substitution)とは
コマンドの結果をファイルのように扱うことができる機能。以下のように書く。


&lt;(list)

リストの結果を入力ファイルに置き換える



&gt;(list)

リストの結果を出力ファイルに置き換える



これはリストの結果をもう一方のプロセスに送るために/dev/fd/&lt;n&gt;のファイルディスクリプタを使っているっぽい。

 使用例
例えば com...]]></description><link>https://zenn.dev/danimal141/articles/97688b48eafa27</link><guid isPermaLink="true">https://zenn.dev/danimal141/articles/97688b48eafa27</guid><pubDate>Sun, 19 Jan 2025 00:34:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uf-nrvU4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25BB%25E3%2582%25B9%25E7%25BD%25AE%25E6%258F%259B%2520%2528Process%2520Substitution%2529%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:danimal141%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlMzc0YjE0N2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>danimal141</dc:creator></item><item><title><![CDATA[シェル設定ファイル　~/.bash_profile　~/.bashrc]]></title><description><![CDATA[!
移行してきた記事なので投稿日よりも前に書いたものになります。


 概要
以下のシェル設定ファイルの用途、違い、読み込まれるタイミングについて説明する。

~/.bash_profile
~/.bashrc


 用途

 用途A：設定の永続化
https://zenn.dev/417yr/articles/de38ecfdecf7f5

上記の記事でせっかくシェル変数を環境変数に変換し、外部コマンドからも値を参照できるようにしても、ログインシェルを終了させると全て消えてしまいます。
設定として永続化したいですよね?
なのでログインシェル起動後、自動で実行されるシェルの設定ファイルに...]]></description><link>https://zenn.dev/417yr/articles/aa3ab155c6718e</link><guid isPermaLink="true">https://zenn.dev/417yr/articles/aa3ab155c6718e</guid><pubDate>Fri, 17 Jan 2025 16:39:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1clnuod6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E8%25A8%25AD%25E5%25AE%259A%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2580%2580%7E%252F.bash_profile%25E3%2580%2580%7E%252F.bashrc%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:417yr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY5NDJhY2ViOTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>417yr</dc:creator></item><item><title><![CDATA[.zshrcと.zprofile って何が違うの？]]></title><description><![CDATA[anaconda や pyenv などの環境設定を行う際に .zshrc と .zprofile の違いについて忘れてしまっていたので，自分の備忘録として残しておきます。

 TD;LR


.zshrc：シェルが起動するたびに実行したい設定を書く

.zprofile：ログイン時に 1 回だけ実行したい設定を書く


 もう少し詳しく
一応，bash_profile についても簡単に記述しておきます。
macOS Catalina 以降では，デフォルトのシェルが zsh に変更されたみたいです。
https://mykii.blog/what-is-shell-bash-and-zsh...]]></description><link>https://zenn.dev/os515/articles/2025-01-17-shell_file</link><guid isPermaLink="true">https://zenn.dev/os515/articles/2025-01-17-shell_file</guid><pubDate>Fri, 17 Jan 2025 15:17:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6QsCAkm3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:.zshrc%25E3%2581%25A8.zprofile%2520%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25E3%2581%258C%25E9%2581%2595%25E3%2581%2586%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:soso%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzYmUxOGY4MzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>soso</dc:creator></item></channel></rss>