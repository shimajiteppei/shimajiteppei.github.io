<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2025-10-28T18:58:02+00:00</updated>

    
    <entry>
        <title>Project goals for 2025H2</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/10/28/project-goals-2025h2/" type="text/html" title="Project goals for 2025H2" />
        <published>2025-10-28T00:00:00+00:00</published>
        <updated>2025-10-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/10/28/project-goals-2025h2/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/10/28/project-goals-2025h2/">&lt;p&gt;On Sep 9, we merged &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3849&quot;&gt;RFC 3849&lt;/a&gt;, declaring our goals for the &quot;second half&quot; of 2025H2 -- well, the last 3 months, at least, since &quot;yours truly&quot; ran a bit behind getting the goals program organized.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;flagship-themes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#flagship-themes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Flagship themes&lt;/h2&gt;
&lt;p&gt;In prior goals programs, we had a few major flagship goals, but since many of these goals were multi-year programs, it was hard to see what progress had been made. This time we decided to organize things a bit differently. We established four flagship &lt;em&gt;themes&lt;/em&gt;, each of which covers a number of more specific goals. These themes cover the goals we expect to be the most impactful and constitute our major focus as a Project for the remainder of the year. The four themes identified in the RFC are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Beyond the &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;, making it possible to create user-defined smart pointers that are as ergonomic as Rust&#x27;s built-in references &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unblocking dormant traits&lt;/strong&gt;, extending the core capabilities of Rust&#x27;s trait system to unblock long-desired features for language interop, lending iteration, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexible, fast(er) compilation&lt;/strong&gt;, making it faster to build Rust programs and improving support for specialized build scenarios like embedded usage and sanitizers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Higher-level Rust&lt;/strong&gt;, making higher-level usage patterns in Rust easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;beyond-the&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#beyond-the&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&quot;Beyond the &lt;code&gt;&amp;amp;&lt;/code&gt;&quot;&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Goal&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Point of contact&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Team(s) and Champion(s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/autoreborrow-traits.html&quot;&gt;Reborrow traits&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/aapoalas&quot;&gt;Aapo Alasuutari&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;Tyler Mandry&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;Design a language feature to solve Field Projections&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/BennoLossin&quot;&gt;Benno Lossin&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;Tyler Mandry&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;Continue Experimentation with Pin Ergonomics&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/frank-king&quot;&gt;Frank King&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/traviscross&quot;&gt;TC&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;One of Rust&#x27;s core value propositions is that it&#x27;s a &quot;library-based language&quot;â€”libraries can build abstractions that feel built-in to the language even when they&#x27;re not. Smart pointer types like &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt; are prime examples, implemented purely in the standard library yet feeling like native language features. However, Rust&#x27;s built-in reference types (&lt;code&gt;&amp;amp;T&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt;) have special capabilities that user-defined smart pointers cannot replicate. This creates a &quot;second-class citizen&quot; problem where custom pointer types can&#x27;t provide the same ergonomic experience as built-in references.&lt;/p&gt;
&lt;p&gt;The &quot;Beyond the &lt;code&gt;&amp;amp;&lt;/code&gt;&quot; initiative aims to share the special capabilities of &lt;code&gt;&amp;amp;&lt;/code&gt;, allowing library authors to create smart pointers that are truly indistinguishable from built-in references in terms of syntax and ergonomics. This will enable more ergonomic smart pointers for use in cross-language interop (e.g., references to objects in other languages like C++ or Python) and for low-level projects like Rust for Linux that use smart pointers to express particular data structures.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;unblocking-dormant-traits&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#unblocking-dormant-traits&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&quot;Unblocking dormant traits&quot;&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Goal&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Point of contact&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Team(s) and Champion(s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/evolving-traits.html&quot;&gt;Evolving trait hierarchies&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;libs-api&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;In-place initialization&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/Darksonn&quot;&gt;Alice Ryhl&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/next-solver.html&quot;&gt;Next-generation trait solver&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/polonius.html&quot;&gt;Stabilizable Polonius support on nightly&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;RÃ©my Rakic&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/scalable-vectors.html&quot;&gt;SVE and SME on AArch64&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Rust&#x27;s trait system is one of its most powerful features, but it has a number of longstanding limitations that are preventing us from adopting new patterns. The goals in this category unblock a number of new capabilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./polonius.html&quot;&gt;Polonius&lt;/a&gt; will enable new borrowing patterns, and in particular &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/92985&quot;&gt;unblock &quot;lending iterators&quot;&lt;/a&gt;. Over the last few goal periods, we have identified an &quot;alpha&quot; version of Polonius that addresses the most important cases while being relatively simple and optimizable. Our goal for 2025H2 is to implement this algorithm in a form that is ready for stabilization in 2026.&lt;/li&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./next-solver.html&quot;&gt;next-generation trait solver&lt;/a&gt; is a refactored trait solver that unblocks better support for numerous language features (implied bounds, negative impls, the list goes on) in addition to closing a number of existing bugs and sources of unsoundness. Over the last few goal periods, the trait solver went from being an early prototype to being in production use for coherence checking. The goal for 2025H2 is to prepare it for stabilization.&lt;/li&gt;
&lt;li&gt;The work on &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./evolving-traits.html&quot;&gt;evolving trait hierarchies&lt;/a&gt; will make it possible to refactor some parts of an existing trait into a new supertrait so they can be used on their own. This unblocks a number of features where the existing trait is insufficiently general, in particular stabilizing support for custom receiver types, a prior Project goal that wound up blocked on this refactoring. This will also make it safer to provide stable traits in the standard library while preserving the ability to evolve them in the future.&lt;/li&gt;
&lt;li&gt;The work to &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./scalable-vectors.html&quot;&gt;expand Rust&#x27;s &lt;code&gt;Sized&lt;/code&gt; hierarchy&lt;/a&gt; will permit us to express types that are neither &lt;code&gt;Sized&lt;/code&gt; nor &lt;code&gt;?Sized&lt;/code&gt;, such as extern types (which have no size) or Arm&#x27;s Scalable Vector Extension (which have a size that is known at runtime but not at compilation time). This goal builds on &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3729&quot;&gt;RFC #3729&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3838&quot;&gt;RFC #3838&lt;/a&gt;, authored in previous Project goal periods.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./in-place-initialization.html&quot;&gt;In-place initialization&lt;/a&gt; allows creating structs and values that are tied to a particular place in memory. While useful directly for projects doing advanced C interop, it also unblocks expanding &lt;code&gt;dyn Trait&lt;/code&gt; to support &lt;code&gt;async fn&lt;/code&gt; and &lt;code&gt;-&amp;gt; impl Trait&lt;/code&gt; methods, as compiling such methods requires the ability for the callee to return a future whose size is not known to the caller.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;flexible-fast-er-compilation&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#flexible-fast-er-compilation&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&quot;Flexible, fast(er) compilation&quot;&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Goal&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Point of contact&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Team(s) and Champion(s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/build-std.html&quot;&gt;build-std&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/ehuss&quot;&gt;Eric Huss&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/parallel-front-end.html&quot;&gt;Promoting Parallel Front End&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/SparrowLii&quot;&gt;Sparrow Li&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/production-ready-cranelift.html&quot;&gt;Production-ready cranelift backend&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/folkertdev&quot;&gt;Folkert de Vries&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf&quot;&gt;wg-compiler-performance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The &quot;Flexible, fast(er) compilation&quot; initiative focuses on improving Rust&#x27;s build system to better serve both specialized use cases and everyday development workflows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are improving compilation performance through (1) &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./parallel-front-end.html&quot;&gt;parallel compilation in the compiler front-end&lt;/a&gt;, which delivers 20-30% faster builds, and (2) &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./production-ready-cranelift.html&quot;&gt;making the Cranelift backend production-ready for development use&lt;/a&gt;, offering roughly 20% faster code generation compared to LLVM for debug builds.&lt;/li&gt;
&lt;li&gt;We are working to &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./build-std.html&quot;&gt;stabilize a core MVP of the &lt;code&gt;-Zbuild-std&lt;/code&gt; feature&lt;/a&gt;, which allows developers to rebuild the standard library from source with custom compiler flags. This unblocks critical use cases for embedded developers and low-level projects like Rust for Linux while also enabling improvements like using sanitizers with the standard library or building &lt;code&gt;std&lt;/code&gt; with debug information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;higher-level-rust&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#higher-level-rust&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&quot;Higher-level Rust&quot;&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Goal&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Point of contact&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Team(s) and Champion(s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-script.html&quot;&gt;Stabilize cargo-script&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;lang-docs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/ergonomic-rc.html&quot;&gt;Ergonomic ref-counting: RFC decision and preview&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;Santiago Pastorino&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;People generally start using Rust for foundational use cases, where the requirements for performance or reliability make it an obvious choice. But once they get used to it, they often find themselves turning to Rust even for higher-level use cases, like scripting, web services, or even GUI applications. Rust is often &quot;surprisingly tolerable&quot; for these high-level use cases -- except for some specific pain points that, while they impact everyone using Rust, hit these use cases particularly hard. We plan two flagship goals this period in this area:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We aim to stabilize &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./cargo-script.html&quot;&gt;cargo script&lt;/a&gt;, a feature that allows single-file Rust programs that embed their dependencies, making it much easier to write small utilities, share code examples, and create reproducible bug reports without the overhead of full Cargo projects.&lt;/li&gt;
&lt;li&gt;We aim to finalize the design of &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/./ergonomic-rc.html&quot;&gt;ergonomic ref-counting&lt;/a&gt; and to finalize the experimental impl feature so it is ready for beta testing. Ergonomic ref-counting makes it less cumbersome to work with ref-counted types like &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt;, particularly in closures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;what-to-expect-next&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-to-expect-next&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What to expect next&lt;/h2&gt;
&lt;p&gt;For the remainder of 2025 you can expect monthly blog posts covering the major progress on the Project goals.&lt;/p&gt;
&lt;p&gt;Looking at the broader picture, we have now done three iterations of the goals program, and we want to judge how it should be run going forward. To start, Nandini Sharma from CMU has been conducting interviews with various Project members to help us see what&#x27;s working with the goals program and what could be improved. We expect to spend some time discussing what we should do and to be launching the next iteration of the goals program next year. Whatever form that winds up taking, Tomas Sedovic, the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/06/30/program-management-update-2025-06/&quot;&gt;Rust program manager&lt;/a&gt; hired by the Leadership Council, will join me in running the program.&lt;/p&gt;
&lt;h1 id&#x3D;&quot;appendix-full-list-of-project-goals&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#appendix-full-list-of-project-goals&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Appendix: Full list of Project goals.&lt;/h1&gt;
&lt;details&gt;
&lt;summary&gt;Read the full slate of Rust Project goals.&lt;/summary&gt;
&lt;p&gt;The full slate of Project goals is as follows. These goals all have identified points of contact who will drive the work forward as well as a viable work plan.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Invited goals.&lt;/strong&gt; Some of the goals below are &quot;invited goals&quot;, meaning that for that goal to happen we need someone to step up and serve as a point of contact. To find the invited goals, look for the &lt;strong&gt;&quot;Help wanted&quot;&lt;/strong&gt; badge in the table below. Invited goals have reserved capacity for teams and a mentor, so if you are someone looking to help Rust progress, they are a great way to get involved.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Goal&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Point of contact&lt;/th&gt;&lt;th style&#x3D;&quot;text-align: left&quot;&gt;Team(s) and Champion(s)&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/FLS-up-to-date-capabilities.html&quot;&gt;Develop the capabilities to keep the FLS up to date&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/PLeVasseur&quot;&gt;Pete LeVasseur&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust&quot;&gt;bootstrap&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/kobzol&quot;&gt;Jakub BerÃ¡nek&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/opsem-team&quot;&gt;opsem&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/spec&quot;&gt;spec&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/PLeVasseur&quot;&gt;Pete LeVasseur&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/Rust-for-Linux-compiler.html&quot;&gt;Getting Rust for Linux into stable Rust: compiler features&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;Tomas Sedovic&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/WesleyWiser&quot;&gt;Wesley Wiser&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/Rust-for-Linux-language.html&quot;&gt;Getting Rust for Linux into stable Rust: language features&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;Tomas Sedovic&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;lang-docs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/traviscross&quot;&gt;TC&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/a-mir-formality.html&quot;&gt;Borrow checking in a-mir-formality&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/autoreborrow-traits.html&quot;&gt;Reborrow traits&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/aapoalas&quot;&gt;Aapo Alasuutari&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;Tyler Mandry&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/build-std.html&quot;&gt;build-std&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/ehuss&quot;&gt;Eric Huss&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-build-analysis.html&quot;&gt;Prototype Cargo build analysis&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/weihanglo&quot;&gt;Weihang Lo&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/weihanglo&quot;&gt;Weihang Lo&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-build-dir-layout.html&quot;&gt;Rework Cargo Build Dir Layout&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/ranger-ross&quot;&gt;Ross Sullivan&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/weihanglo&quot;&gt;Weihang Lo&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-plumbing.html&quot;&gt;Prototype a new set of Cargo &quot;plumbing&quot; commands&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;img src&#x3D;&quot;https://img.shields.io/badge/Help%20wanted-yellow&quot; alt&#x3D;&quot;Help Wanted&quot; /&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-script.html&quot;&gt;Stabilize cargo-script&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;lang-docs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-semver-checks.html&quot;&gt;Continue resolving &lt;code&gt;cargo-semver-checks&lt;/code&gt; blockers for merging into cargo&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/obi1kenobi&quot;&gt;Predrag Gruevski&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust&quot;&gt;rustdoc&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/adotinthevoid&quot;&gt;Alona Enraght-Moony&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/codegen_retags.html&quot;&gt;Emit Retags in Codegen&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/icmccorm&quot;&gt;Ian McCormack&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/RalfJung&quot;&gt;Ralf Jung&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/opsem-team&quot;&gt;opsem&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/RalfJung&quot;&gt;Ralf Jung&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/comprehensive-niche-checks.html&quot;&gt;Comprehensive niche checks for Rust&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/1c3t3a&quot;&gt;Bastian Kersting&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/saethlin&quot;&gt;Ben Kimock&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/opsem-team&quot;&gt;opsem&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/saethlin&quot;&gt;Ben Kimock&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/const-generics.html&quot;&gt;Const Generics&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/ergonomic-rc.html&quot;&gt;Ergonomic ref-counting: RFC decision and preview&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;Santiago Pastorino&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/evolving-traits.html&quot;&gt;Evolving trait hierarchies&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;libs-api&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;Design a language feature to solve Field Projections&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/BennoLossin&quot;&gt;Benno Lossin&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;Tyler Mandry&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/finishing-gpu-offload.html&quot;&gt;Finish the std::offload module&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/ZuseZ4&quot;&gt;Manuel Drehwald&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/ZuseZ4&quot;&gt;Manuel Drehwald&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/traviscross&quot;&gt;TC&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/gcc-backend-tests.html&quot;&gt;Run more tests for GCC backend in the Rust&#x27;s CI&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/WesleyWiser&quot;&gt;Wesley Wiser&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/infra-team&quot;&gt;infra&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/marcoieni&quot;&gt;Marco Ieni&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/in-place-initialization.html&quot;&gt;In-place initialization&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/Darksonn&quot;&gt;Alice Ryhl&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/cramertj&quot;&gt;Taylor Cramer&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/interop-problem-map.html&quot;&gt;C++/Rust Interop Problem Space Mapping&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/baumanj&quot;&gt;Jon Bauman&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;Tyler Mandry&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/dtolnay&quot;&gt;David Tolnay&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/opsem-team&quot;&gt;opsem&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/libtest-json.html&quot;&gt;Finish the libtest json output experiment&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;libs-api&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;testing-devex&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/mir-move-elimination.html&quot;&gt;MIR move elimination&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/opsem-team&quot;&gt;opsem&lt;/a&gt;, &lt;a href&#x3D;&quot;https://forge.rust-lang.org/compiler/working-areas.html&quot;&gt;wg-mir-opt&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/next-solver.html&quot;&gt;Next-generation trait solver&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/open-namespaces.html&quot;&gt;Implement Open API Namespace Support&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;img src&#x3D;&quot;https://img.shields.io/badge/Help%20wanted-yellow&quot; alt&#x3D;&quot;Help Wanted&quot; /&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/b-naber&quot;&gt;b-naber&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io&quot;&gt;crates-io&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/carols10cents&quot;&gt;Carol Nichols&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/parallel-front-end.html&quot;&gt;Promoting Parallel Front End&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/SparrowLii&quot;&gt;Sparrow Li&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pin-ergonomics.html&quot;&gt;Continue Experimentation with Pin Ergonomics&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/frank-king&quot;&gt;Frank King&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/traviscross&quot;&gt;TC&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/polonius.html&quot;&gt;Stabilizable Polonius support on nightly&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;RÃ©my Rakic&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/production-ready-cranelift.html&quot;&gt;Production-ready cranelift backend&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/folkertdev&quot;&gt;Folkert de Vries&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustc-perf&quot;&gt;wg-compiler-performance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pub-priv.html&quot;&gt;Stabilize public/private dependencies&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;img src&#x3D;&quot;https://img.shields.io/badge/Help%20wanted-yellow&quot; alt&#x3D;&quot;Help Wanted&quot; /&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;Ed Page&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/reference-expansion.html&quot;&gt;Expand the Rust Reference to specify more aspects of the Rust language&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams&quot;&gt;lang-docs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/spec&quot;&gt;spec&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/reflection-and-comptime.html&quot;&gt;reflection and comptime&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oliver Scherer&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;Scott McMurray&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/relink-dont-rebuild.html&quot;&gt;Relink don&#x27;t Rebuild&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/yaahc&quot;&gt;Jane Lusby&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/rust-vision-doc.html&quot;&gt;Rust Vision Document&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council&quot;&gt;leadership-council&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/rustc-perf-improvements.html&quot;&gt;rustc-perf improvements&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/Jamesbarford&quot;&gt;James&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/infra-team&quot;&gt;infra&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/rustdoc-doc-cfg.html&quot;&gt;Stabilize rustdoc &lt;code&gt;doc_cfg&lt;/code&gt; feature&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust&quot;&gt;rustdoc&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/rustdoc-team-charter.html&quot;&gt;Add a team charter for rustdoc team&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust&quot;&gt;rustdoc&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/GuillaumeGomez&quot;&gt;Guillaume Gomez&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/scalable-vectors.html&quot;&gt;SVE and SME on AArch64&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/libs-team&quot;&gt;libs&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/Amanieu&quot;&gt;Amanieu d&#x27;Antras&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/stabilization-of-sanitizer-support.html&quot;&gt;Rust Stabilization of MemorySanitizer and ThreadSanitizer Support&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/jakos-sec&quot;&gt;Jakob Koschel&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust&quot;&gt;bootstrap&lt;/a&gt;, &lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/infra-team&quot;&gt;infra&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-exploit-mitigations&quot;&gt;project-exploit-mitigations&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/typesystem-docs.html&quot;&gt;Type System Documentation&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/types-team&quot;&gt;types&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/unsafe-fields.html&quot;&gt;Unsafe Fields&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;https://github.com/jswrenn&quot;&gt;Jack Wrenn&lt;/a&gt;&lt;/td&gt;&lt;td style&#x3D;&quot;text-align: left&quot;&gt;&lt;a href&#x3D;&quot;http://github.com/rust-lang/compiler-team&quot;&gt;compiler&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/jswrenn&quot;&gt;Jack Wrenn&lt;/a&gt;), &lt;a href&#x3D;&quot;http://github.com/rust-lang/lang-team&quot;&gt;lang&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;Scott McMurray&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/details&gt;
&lt;!-- Github usernames --&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    <entry>
        <title>docs.rs: changed default targets</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/10/16/docsrs-changed-default-targets/" type="text/html" title="docs.rs: changed default targets" />
        <published>2025-10-16T00:00:00+00:00</published>
        <updated>2025-10-16T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/10/16/docsrs-changed-default-targets/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/10/16/docsrs-changed-default-targets/">&lt;h1 id&#x3D;&quot;changes-to-default-build-targets-on-docs-rs&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#changes-to-default-build-targets-on-docs-rs&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Changes to default build targets on docs.rs&lt;/h1&gt;
&lt;p&gt;This post announces two changes to the list of default targets used to build
documentation on docs.rs.&lt;/p&gt;
&lt;p&gt;Crate authors can specify a custom list of targets using
&lt;a href&#x3D;&quot;https://docs.rs/about/metadata&quot;&gt;docs.rs metadata in &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/a&gt;. If this
metadata is not provided, docs.rs falls back to a default list. We are updating
this list to better reflect the current state of the Rust ecosystem.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;apple-silicon-arm64-replaces-x86-64&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#apple-silicon-arm64-replaces-x86-64&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Apple silicon (ARM64) replaces x86_64&lt;/h2&gt;
&lt;p&gt;Reflecting Apple&#x27;s transition from x86_64 to its own ARM64 silicon, the Rust
project has updated its platform support tiers. The &lt;code&gt;aarch64-apple-darwin&lt;/code&gt;
target is now Tier 1, while &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; has moved to Tier 2. You can
read more about this in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3671&quot;&gt;RFC 3671&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3841&quot;&gt;RFC 3841&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To align with this, docs.rs will now use &lt;code&gt;aarch64-apple-darwin&lt;/code&gt; as the default
target for Apple platforms instead of &lt;code&gt;x86_64-apple-darwin&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;linux-arm64-replaces-32-bit-x86&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#linux-arm64-replaces-32-bit-x86&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Linux ARM64 replaces 32-bit x86&lt;/h2&gt;
&lt;p&gt;Support for 32-bit &lt;code&gt;i686&lt;/code&gt; architectures is declining, and major Linux
distributions have begun to phase it out.&lt;/p&gt;
&lt;p&gt;Consequently, we are replacing the &lt;code&gt;i686-unknown-linux-gnu&lt;/code&gt; target with
&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt; in our default set.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;new-default-target-list&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#new-default-target-list&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
New default target list&lt;/h2&gt;
&lt;p&gt;The updated list of default targets is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt; (replaces &lt;code&gt;x86_64-apple-darwin&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt; (replaces &lt;code&gt;i686-unknown-linux-gnu&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i686-pc-windows-msvc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;opting-out&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#opting-out&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Opting out&lt;/h2&gt;
&lt;p&gt;If your crate requires the previous default target list, you can explicitly
define it in your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;package&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;metadata&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;docs&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;rs&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;targets&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;    &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;x86_64-unknown-linux-gnu&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;    &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;x86_64-apple-darwin&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;    &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;x86_64-pc-windows-msvc&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;    &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;i686-unknown-linux-gnu&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;    &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;i686-pc-windows-msvc&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that docs.rs continues to support any target available in the Rust
toolchain; only the &lt;em&gt;default&lt;/em&gt; list has changed.&lt;/p&gt;
</content>

        <author>
            <name>Denis Cornehl</name>
        </author>
    </entry>
    <entry>
        <title>Announcing the New Rust Project Directors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/" type="text/html" title="Announcing the New Rust Project Directors" />
        <published>2025-10-15T00:00:00+00:00</published>
        <updated>2025-10-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/10/15/announcing-the-new-rust-project-directors-2025/">&lt;p&gt;We are happy to announce that we have completed the annual process to elect new Project Directors.&lt;/p&gt;
&lt;p&gt;The new Project Directors are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco/&quot;&gt;David Wood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jackh726/&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis/&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They will join &lt;a href&#x3D;&quot;https://github.com/rylev&quot;&gt;Ryan Levick&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/carols10cents&quot;&gt;Carol Nichols&lt;/a&gt; to make up the five members of the Rust Foundation Board of Directors who represent the Rust Project.&lt;/p&gt;
&lt;p&gt;We would also like to thank the outgoing going Project Directors for contributions and service:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/JakobDegen&quot;&gt;Jakob Degen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;Santiago Pastorino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;Scott McMurray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The board is made up of Project Directors, who come from and represent the Rust Project, and Member Directors, who represent the corporate members of the Rust Foundation. Both of these director groups have equal voting power.&lt;/p&gt;
&lt;p&gt;We look forward to working with and being represented by this new group of project directors.&lt;/p&gt;
&lt;p&gt;We were fortunate to have a number of excellent candidates and this was a difficult decision. We wish to express our gratitude to all of the candidates who were considered for this role! We also extend our thanks to the project as a whole who participated by nominating candidates and providing additional feedback once the nominees were published.&lt;/p&gt;
&lt;p&gt;Finally, we want to share our appreciation for &lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;Tomas Sedovic&lt;/a&gt; for facilitating the election process. An overview of the election process can be found in a previous blog post &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/08/30/electing-new-project-directors/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Leadership Council</name>
        </author>
    </entry>
    <entry>
        <title>crates.io: Malicious crates faster_log and async_println</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/" type="text/html" title="crates.io: Malicious crates faster_log and async_println" />
        <published>2025-09-24T00:00:00+00:00</published>
        <updated>2025-09-24T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/24/crates.io-malicious-crates-fasterlog-and-asyncprintln/">&lt;p&gt;&lt;strong&gt;Updated September 24th, 2025 17:34:38 UTC&lt;/strong&gt; - Socket has also published their own &lt;a href&#x3D;&quot;https://socket.dev/blog/two-malicious-rust-crates-impersonate-popular-logger-to-steal-wallet-keys&quot;&gt;accompanying blog post&lt;/a&gt; about the attack.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;summary&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#summary&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Summary&lt;/h2&gt;
&lt;p&gt;On September 24th, the crates.io team was notified by Kirill Boychenko from the &lt;a href&#x3D;&quot;https://www.socket.dev/&quot;&gt;Socket Threat Research Team&lt;/a&gt; of two malicious crates which were actively searching file contents for Etherum private keys, Solana private keys, and arbitrary byte arrays for exfiltration.&lt;/p&gt;
&lt;p&gt;These crates were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;faster_log&lt;/code&gt; - Published on May 25th, 2025, downloaded 7181 times&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_println&lt;/code&gt; - Published on May 25th, 2025, downloaded 1243 times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The malicious code was executed at runtime, when running or testing a project depending on them. Notably, they did not execute any malicious code at build time. Except for their malicious payload, these crates copied the source code, features, and documentation of legitimate crates, using a similar name to them (a case of typosquatting&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-typosquatting-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-typosquatting&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;actions-taken&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#actions-taken&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Actions taken&lt;/h2&gt;
&lt;p&gt;The users in question were immediately disabled, and the crates in question were deleted&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-deletion-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-deletion&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; from crates.io shortly after. We have retained copies of all logs associated with the users and the malicious crate files for further analysis.&lt;/p&gt;
&lt;p&gt;The deletion was performed at 15:34 UTC on September 24, 2025.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;analysis&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#analysis&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Analysis&lt;/h2&gt;
&lt;p&gt;Both crates were copies of a crate which provided logging functionality, and the logging implementation remained functional in the malicious crates. The original crate had a feature which performed log file packing, which iterated over an associated directories files.&lt;/p&gt;
&lt;p&gt;The attacker inserted code to perform the malicious action during a log packing operation, which searched the log files being processed from that directory for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quoted Ethereum private keys (0x + 64 hex)&lt;/li&gt;
&lt;li&gt;Solana-style Base58 secrets&lt;/li&gt;
&lt;li&gt;Bracketed byte arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The crates then proceeded to exfiltrate the results of this search to &lt;code&gt;https://mainnet[.]solana-rpc-pool[.]workers[.]dev/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These crates had no dependent downstream crates on crates.io.&lt;/p&gt;
&lt;p&gt;The malicious users associated with these crates had no other crates or publishes, and the team is actively investigating associative actions in our retained&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-retention-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-retention&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; logs.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;thanks&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Thanks&lt;/h2&gt;
&lt;p&gt;Our thanks to Kirill Boychenko from the &lt;a href&#x3D;&quot;https://www.socket.dev/&quot;&gt;Socket Threat Research Team&lt;/a&gt; for reporting the crates. We also want to thank Carol Nichols from the crates.io team, Pietro Albini from the Rust Security Response WG and Walter Pearce from the &lt;a href&#x3D;&quot;https://foundation.rust-lang.org/&quot;&gt;Rust Foundation&lt;/a&gt; for aiding in the response.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol class&#x3D;&quot;footnotes-list&quot;&gt;
&lt;li id&#x3D;&quot;fn-typosquatting&quot;&gt;
&lt;p&gt;typosquatting is a technique used by bad actors to initiate dependency confusion attacks where a legitimate user might be tricked into using a malicious dependency instead of their intended dependency â€” for example, a bad actor might try to publish a crate at &lt;code&gt;proc-macro3&lt;/code&gt; to catch users of the legitimate &lt;code&gt;proc-macro2&lt;/code&gt; crate. &lt;a href&#x3D;&quot;#fr-typosquatting-1&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-deletion&quot;&gt;
&lt;p&gt;The crates were preserved for future analysis should there be other attacks, and to inform scanning efforts in the future. &lt;a href&#x3D;&quot;#fr-deletion-1&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-retention&quot;&gt;
&lt;p&gt;One year of logs are retained on crates.io, but only 30 days are immediately available on our log platform. We chose not to go further back in our analysis, since IP address based analysis is limited by the use of dynamic IP addresses in the wild, and the relevant IP address being part of an allocation to a residential ISP. &lt;a href&#x3D;&quot;#fr-retention-1&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Walter Pearce</name>
        </author>
    </entry>
    <entry>
        <title>Announcing Rust 1.90.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/" type="text/html" title="Announcing Rust 1.90.0" />
        <published>2025-09-18T00:00:00+00:00</published>
        <updated>2025-09-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/18/Rust-1.90.0/">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.90.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via &lt;code&gt;rustup&lt;/code&gt;, you can get 1.90.0 with:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;console&quot; class&#x3D;&quot;language-console z-code&quot;&gt;&lt;code class&#x3D;&quot;language-console&quot; data-lang&#x3D;&quot;console&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ rustup update stable
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/releases.html#version-1900-2025-09-18&quot;&gt;detailed release notes for 1.90.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-s-in-1-90-0-stable&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-s-in-1-90-0-stable&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What&#x27;s in 1.90.0 stable&lt;/h2&gt;
&lt;h1 id&#x3D;&quot;lld-is-now-the-default-linker-on-x86-64-unknown-linux-gnu&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#lld-is-now-the-default-linker-on-x86-64-unknown-linux-gnu&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
LLD is now the default linker on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; target will now use the LLD linker for linking Rust crates by default. This should result in improved linking performance vs the default Linux linker (BFD), particularly for large binaries, binaries with a lot of debug information, and for incremental rebuilds.&lt;/p&gt;
&lt;p&gt;In the vast majority of cases, LLD should be backwards compatible with BFD, and you should not see any difference other than reduced compilation time. However, if you do run into any new linker issues, you can always opt out using the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; compiler flag. Either by adding it to the usual &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, or to a project&#x27;s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; configuration file,
like so:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;target&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;x86_64-unknown-linux-gnu&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;rustflags&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;-Clinker-features&#x3D;-lld&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you encounter any issues with the LLD linker, please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;let us know&lt;/a&gt;. You can read more about the switch to LLD, some benchmark numbers and the opt out mechanism &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;cargo-adds-native-support-for-workspace-publishing&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#cargo-adds-native-support-for-workspace-publishing&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Cargo adds native support for workspace publishing&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo publish --workspace&lt;/code&gt; is now supported, automatically publishing all of
the crates in a workspace in the right order (following any dependencies
between them).&lt;/p&gt;
&lt;p&gt;This has long been possible with external tooling or manual ordering of
individual publishes, but this brings the functionality into Cargo itself.&lt;/p&gt;
&lt;p&gt;Native integration allows Cargo&#x27;s publish verification to run a build across
the full set of to-be-published crates &lt;em&gt;as if&lt;/em&gt; they were published, including
during dry-runs. Note that publishes are still not atomic -- network errors or
server-side failures can still lead to a partially published workspace.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#demoting-x86-64-apple-darwin-to-tier-2-with-host-tools&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Demoting &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; to Tier 2 with host tools&lt;/h3&gt;
&lt;p&gt;GitHub will soon &lt;a href&#x3D;&quot;https://github.blog/changelog/2025-07-11-upcoming-changes-to-macos-hosted-runners-macos-latest-migration-and-xcode-support-policy-updates/#macos-13-is-closing-down&quot;&gt;discontinue&lt;/a&gt; providing free macOS x86_64 runners for public repositories. Apple has also announced their &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Apple_silicon#Timeline&quot;&gt;plans&lt;/a&gt; for discontinuing support for the x86_64 architecture.&lt;/p&gt;
&lt;p&gt;In accordance with these changes, as of Rust 1.90, we have &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3841&quot;&gt;demoted the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target&lt;/a&gt; from &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-1-with-host-tools&quot;&gt;Tier 1 with host tools&lt;/a&gt; to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/platform-support.html#tier-2-with-host-tools&quot;&gt;Tier 2 with host tools&lt;/a&gt;. This means that the target, including tools like &lt;code&gt;rustc&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;, will be guaranteed to build but is not guaranteed to pass our automated test suite.&lt;/p&gt;
&lt;p&gt;For users, this change will not immediately cause impact. Builds of both the standard library and the compiler will still be distributed by the Rust Project for use via &lt;code&gt;rustup&lt;/code&gt; or alternative installation methods while the target remains at Tier 2. Over time, it&#x27;s likely that reduced test coverage for this target will cause things to break or fall out of compatibility with no further announcements.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.checked_sub_signed&quot;&gt;&lt;code&gt;u{n}::checked_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.overflowing_sub_signed&quot;&gt;&lt;code&gt;u{n}::overflowing_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.saturating_sub_signed&quot;&gt;&lt;code&gt;u{n}::saturating_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.usize.html#method.wrapping_sub_signed&quot;&gt;&lt;code&gt;u{n}::wrapping_sub_signed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/enum.IntErrorKind.html#impl-Copy-for-IntErrorKind&quot;&gt;&lt;code&gt;impl Copy for IntErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/enum.IntErrorKind.html#impl-Hash-for-IntErrorKind&quot;&gt;&lt;code&gt;impl Hash for IntErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3C%26CStr%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3CCString%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CString&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html#impl-PartialEq%3CCow%3C&amp;#x27;_,+CStr%3E%3E-for-CStr&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;Cow&amp;lt;CStr&amp;gt;&amp;gt; for CStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3C%26CStr%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3CCStr%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CStr&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#impl-PartialEq%3CCow%3C&amp;#x27;_,+CStr%3E%3E-for-CString&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;Cow&amp;lt;CStr&amp;gt;&amp;gt; for CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3C%26CStr%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;&amp;amp;CStr&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3CCStr%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CStr&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html#impl-PartialEq%3CCString%3E-for-Cow%3C&amp;#x27;_,+CStr%3E&quot;&gt;&lt;code&gt;impl PartialEq&amp;lt;CString&amp;gt; for Cow&amp;lt;CStr&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These previously stable APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::reverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.floor&quot;&gt;&lt;code&gt;f32::floor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.ceil&quot;&gt;&lt;code&gt;f32::ceil&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.trunc&quot;&gt;&lt;code&gt;f32::trunc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.fract&quot;&gt;&lt;code&gt;f32::fract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.round&quot;&gt;&lt;code&gt;f32::round&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.round_ties_even&quot;&gt;&lt;code&gt;f32::round_ties_even&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.floor&quot;&gt;&lt;code&gt;f64::floor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.ceil&quot;&gt;&lt;code&gt;f64::ceil&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.trunc&quot;&gt;&lt;code&gt;f64::trunc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.fract&quot;&gt;&lt;code&gt;f64::fract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.round&quot;&gt;&lt;code&gt;f64::round&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.round_ties_even&quot;&gt;&lt;code&gt;f64::round_ties_even&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;platform-support&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#platform-support&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Platform Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt; is now a tier 2 target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to Rustâ€™s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/platform-support.html&quot;&gt;platform support page&lt;/a&gt; for more information on Rustâ€™s tiered platform support.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;other-changes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.90.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html#cargo-190-2025-09-18&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-190&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;contributors-to-1-90-0&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#contributors-to-1-90-0&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Contributors to 1.90.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.90.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.90.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    <entry>
        <title>crates.io phishing campaign</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/" type="text/html" title="crates.io phishing campaign" />
        <published>2025-09-12T00:00:00+00:00</published>
        <updated>2025-09-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/">&lt;p&gt;We received multiple reports of a phishing campaign targeting crates.io users
(from the &lt;code&gt;rustfoundation.dev&lt;/code&gt; domain name), mentioning a compromise of our
infrastructure and asking users to authenticate to limit damage to their crates.&lt;/p&gt;
&lt;p&gt;These emails are malicious and come from a domain name not controlled by  the
Rust Foundation (nor the Rust Project), seemingly with the purpose of stealing
your GitHub credentials. We have no evidence of a compromise of the crates.io
infrastructure.&lt;/p&gt;
&lt;p&gt;We are taking steps to get the domain name taken down and to monitor for
suspicious activity on crates.io. Do not follow any links in these emails if you
receive them, and mark them as phishing with your email provider.&lt;/p&gt;
&lt;p&gt;If you have any further questions please reach out to &lt;a href&#x3D;&quot;mailto:security@rust-lang.org&quot;&gt;security@rust-lang.org&lt;/a&gt;
and &lt;a href&#x3D;&quot;mailto:help@crates.io&quot;&gt;help@crates.io&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Rust Security Response WG, crates.io team</name>
        </author>
    </entry>
    <entry>
        <title>Rust compiler performance survey 2025 results</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/" type="text/html" title="Rust compiler performance survey 2025 results" />
        <published>2025-09-10T00:00:00+00:00</published>
        <updated>2025-09-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/">&lt;p&gt;Two months ago, we launched the first &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025&quot;&gt;Rust Compiler Performance Survey&lt;/a&gt;, with the goal of helping us understand the biggest pain points of Rust developers related to build performance. It is clear that this topic is very important for the Rust community, as the survey received over 3 700 responses! We would like to thank everyone who participated in the survey, and especially those who described their workflows and challenges with an open answer. We plan to run this survey annually, so that we can observe long-term trends in Rust build performance and its perception.&lt;/p&gt;
&lt;p&gt;In this post, we&#x27;ll show some interesting results and insights that we got from the survey and promote work that we have already done recently or that we plan to do to improve the build performance of Rust code. If you would like to examine the complete results of the survey, you can find them &lt;a href&#x3D;&quot;https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2025/compiler-performance-survey/report/compiler-performance-2025-report.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And now strap in, as there is a lot of data to explore! As this post is relatively long, here is an index of topics that it covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#overall-satisfaction&quot;&gt;Overall satisfaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#important-workflows&quot;&gt;Important workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#incremental-rebuilds&quot;&gt;Incremental rebuilds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#type-checking-and-ide-performance&quot;&gt;Type checking and IDE performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#clean-and-ci-builds&quot;&gt;Clean and CI builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#debug-information&quot;&gt;Debug information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#workarounds-for-improving-build-performance&quot;&gt;Workarounds for improving build performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/#understanding-why-builds-are-slow&quot;&gt;Understanding why builds are slow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;overall-satisfaction&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#overall-satisfaction&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Overall satisfaction&lt;/h2&gt;
&lt;p&gt;To understand the overall sentiment, we asked our respondents to rate their satisfaction with their build performance, on a scale from 0 (worst) to 10 (best). The average rating was 6, with most people rating their experience with 7 out of 10:&lt;/p&gt;
&lt;!-- Chart satisfaction start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;satisfaction&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;satisfaction&quot; src&#x3D;&quot;satisfaction.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;satisfaction.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;satisfaction.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart satisfaction end --&gt;
&lt;p&gt;To help us understand the overall build experience in more detail, we also analyzed all open answers (over a thousand of them) written by our respondents, to help us identify several recurring themes, which we will discuss in this post.&lt;/p&gt;
&lt;p&gt;One thing that is clear from both the satisfaction rating and the open answers is that the build experience differs wildly across users and workflows, and it is not as clear-cut as &quot;Rust builds are slow&quot;. We actually received many positive comments about users being happy with Rust build performance, and appreciation for it being improved vastly over the past several years to the point where it stopped being a problem.&lt;/p&gt;
&lt;p&gt;People also liked to compare their experience with other competing technologies. For example, many people wrote that the build performance of Rust is not worse, or is even better, than what they saw with C++. On the other hand, others noted that the build performance of languages such as Go or Zig is much better than that of Rust.&lt;/p&gt;
&lt;p&gt;While it is great to see some developers being happy with the state we have today, it is clear that many people are not so lucky, and Rust&#x27;s build performance limits their productivity. Around 45% respondents who answered that they are no longer using Rust said that at least one of the reasons why they stopped were long compile times.&lt;/p&gt;
&lt;p&gt;In our survey we received a lot of feedback pointing out real issues and challenges in several areas of build performance, which is what we will focus on in this post.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;important-workflows&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#important-workflows&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Important workflows&lt;/h2&gt;
&lt;p&gt;The challenges that Rust developers experience with build performance are not always as simple as the compiler itself being slow. There are many diverse workflows with competing trade-offs, and optimizing build performance for them might require completely different solutions. Some approaches for improving build performance can also be quite unintuitive. For example, stabilizing certain language features could help remove the need for certain build scripts or proc macros, and thus speed up compilation across the Rust ecosystem. You can watch &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;-jy4HaNEJCo&quot;&gt;this talk&lt;/a&gt; from RustWeek about build performance to learn more.&lt;/p&gt;
&lt;p&gt;It is difficult to enumerate all possible build workflows, but we at least tried to ask about workflows that we assumed are common and could limit the productivity of Rust developers the most:&lt;/p&gt;
&lt;!-- Chart limiting-workflows start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;limiting-workflows&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;limiting-workflows&quot; src&#x3D;&quot;limiting-workflows.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;limiting-workflows.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;limiting-workflows.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart limiting-workflows end --&gt;
&lt;p&gt;We can see that all the workflows that we asked about cause significant problems to at least a fraction of the respondents, but some of them more so than others. To gain more information about the specific problems that developers face, we also asked a more detailed, follow-up question:&lt;/p&gt;
&lt;!-- Chart problems start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;problems&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;problems&quot; src&#x3D;&quot;problems.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;problems.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;problems.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart problems end --&gt;
&lt;p&gt;Based on the answers to these two questions and other experiences shared in the open answers, we identified three groups of workflows that we will discuss next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incremental rebuilds after making a small change&lt;/li&gt;
&lt;li&gt;Type checking using &lt;code&gt;cargo check&lt;/code&gt; or with a code editor&lt;/li&gt;
&lt;li&gt;Clean, from-scratch builds, including CI builds&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;incremental-rebuilds&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#incremental-rebuilds&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Incremental rebuilds&lt;/h3&gt;
&lt;p&gt;Waiting too long for an incremental rebuild after making a small source code change was by far the most common complaint in the open answers that we received, and it was also the most common problem that respondents said they struggle with. Based on our respondents&#x27; answers, this comes down to three main bottlenecks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changes in workspaces trigger unnecessary rebuilds.&lt;/strong&gt; If you modify a crate in a workspace that has several dependent crates and perform a rebuild, all those dependent crates will currently have to be recompiled. This can cause a lot of unnecessary work and dramatically increase the latency of rebuilds in large (or deep) workspaces. We have some ideas about how to improve this workflow, such as the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/relink-dont-rebuild.html&quot;&gt;&quot;Relink, don&#x27;t rebuild&quot;&lt;/a&gt; proposal, but these are currently in a very experimental stage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The linking phase is too slow.&lt;/strong&gt; This was a very common complaint, and it is indeed a real issue, because unlike the rest of the compilation process, linking is always performed &quot;from scratch&quot;. The Rust compiler usually delegates linking to an external/system linker, so its performance is not completely within our hands. However, we are attempting to switch to faster linkers by default. For example, the most popular target (&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;) will very soon switch to the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable&quot;&gt;LLD linker&lt;/a&gt;, which provides significant performance wins. Long-term, it is possible that some linkers (e.g. &lt;a href&#x3D;&quot;https://github.com/davidlattimore/wild&quot;&gt;wild&lt;/a&gt;) will allow us to perform even linking incrementally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental rebuild of a single crate is too slow.&lt;/strong&gt; The performance of this workflow depends on the cleverness of the incremental engine of the Rust compiler. While it is already very sophisticated, there are some parts of the compilation process that are not incremental yet or that are not cached in an optimal way. For example, expansion of derive proc macros is not currently cached, although work is underway to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/145354&quot;&gt;change that&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several users have mentioned that they would like to see Rust perform hot-patching (such as the &lt;code&gt;subsecond&lt;/code&gt; system used by the Dioxus UI framework or similar approaches used e.g. by the Bevy game engine). While these hot-patching systems are very exciting and can produce truly near-instant rebuild times for specialized use-cases, it should be noted that they also come with many limitations and edge-cases, and it does not seem that a solution that would allow hot-patching to work in a robust way has been found yet.&lt;/p&gt;
&lt;p&gt;To gauge how long is the typical rebuild latency, we asked our respondents to pick a single Rust project that they work on and which causes them to struggle with build times the most, and tell us how long they have to wait for it to be rebuilt after making a code change.&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;rebuild-wait-time&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time&quot; src&#x3D;&quot;rebuild-wait-time.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time end --&gt;
&lt;p&gt;Even though many developers do not actually experience this latency after each code change, as they consume results of type checking or inline annotations in their code editor, the fact that 55% of respondents have to wait more than ten seconds for a rebuild is far from ideal.&lt;/p&gt;
&lt;p&gt;If we partition these results based on answers to other questions, it is clear that the rebuild times depend a lot on the size of the project:&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time-code-size start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;rebuild-wait-time-code-size&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time-code-size&quot; src&#x3D;&quot;rebuild-wait-time-code-size.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-code-size.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-code-size.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time-code-size end --&gt;
&lt;p&gt;And to a lesser factor also on the number of used dependencies:&lt;/p&gt;
&lt;!-- Chart rebuild-wait-time-dep-count start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;rebuild-wait-time-dep-count&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;rebuild-wait-time-dep-count&quot; src&#x3D;&quot;rebuild-wait-time-dep-count.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-dep-count.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;rebuild-wait-time-dep-count.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart rebuild-wait-time-dep-count end --&gt;
&lt;p&gt;We would love to get to a point where the time needed to rebuild a Rust project is dependent primarily on the amount of performed code changes, rather than on the size of the codebase, but clearly we are not there yet.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;type-checking-and-ide-performance&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#type-checking-and-ide-performance&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Type checking and IDE performance&lt;/h3&gt;
&lt;p&gt;Approximately 60% of respondents say that they use &lt;code&gt;cargo&lt;/code&gt; terminal commands to type check, build or test their code, with &lt;code&gt;cargo check&lt;/code&gt; being the most commonly used command performed after each code change:&lt;/p&gt;
&lt;!-- Chart cargo-commands start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;cargo-commands&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;cargo-commands&quot; src&#x3D;&quot;cargo-commands.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;cargo-commands.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;cargo-commands.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart cargo-commands end --&gt;
&lt;p&gt;While the performance of &lt;code&gt;cargo check&lt;/code&gt; does not seem to be as big of a blocker as e.g. incremental rebuilds, it also causes some pain points. One of the most common ones present in the survey responses is the fact that &lt;code&gt;cargo check&lt;/code&gt; does not share the build cache with &lt;code&gt;cargo build&lt;/code&gt;. This causes additional compilation to happen when you run e.g. &lt;code&gt;cargo check&lt;/code&gt; several times to find all type errors, and when it succeeds, you follow up with &lt;code&gt;cargo build&lt;/code&gt; to actually produce a built artifact. This workflow is an example of competing trade-offs, because sharing the build cache between these two commands by unifying them more would likely make &lt;code&gt;cargo check&lt;/code&gt; itself slightly slower, which might be undesirable to some users. It is possible that we might be able to find some middle ground to improve the status quo though. You can follow updates to this work in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/3501&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A related aspect is the latency of type checking in code editors and IDEs. Around 87% of respondents say that they use inline annotations in their editor as the primary mechanism of inspecting compiler errors, and around 33% of them consider waiting for these annotations to be a big blocker. In the open answers, we also received many reports of Rust Analyzer&#x27;s performance and memory usage being a limiting factor.&lt;/p&gt;
&lt;p&gt;The maintainers of Rust Analyzer are working hard on improving its performance. Its caching system is &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;tn6qwhMNBJo&quot;&gt;being improved&lt;/a&gt; to reduce analysis latency, the distributed builds of the editor are now &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-analyzer/pull/19582&quot;&gt;optimized with PGO&lt;/a&gt;, which provided 15-20% performance wins, and work is underway to integrate the compiler&#x27;s &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-analyzer/pull/20329&quot;&gt;new trait solver&lt;/a&gt; into Rust Analyzer, which could eventually also result in increased performance.&lt;/p&gt;
&lt;p&gt;More than 35% users said that they consider the IDE and Cargo &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/4282&quot;&gt;blocking one another&lt;/a&gt; to be a big problem. There is an existing workaround for this, where you can configure Rust Analyzer to use a different target directory than Cargo, at the cost of increased disk space usage. We realized that this workaround has not been documented in a very visible way, so we added it to the &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/book/faq.html#rust-analyzer-and-cargo-compete-over-the-build-lock&quot;&gt;FAQ section&lt;/a&gt; of the Rust Analyzer book.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;clean-and-ci-builds&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#clean-and-ci-builds&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Clean and CI builds&lt;/h3&gt;
&lt;p&gt;Around 20% of participants responded that clean builds are a significant blocker for them. In order to improve their performance, you can try a recently introduced experimental Cargo and compiler option called &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/07/15/call-for-testing-hint-mostly-unused&quot;&gt;&lt;code&gt;hint-mostly-unused&lt;/code&gt;&lt;/a&gt;, which can in certain situations help improve the performance of clean builds, particularly if your dependencies contain a lot of code that might not actually be used by your crate(s).&lt;/p&gt;
&lt;p&gt;One area where clean builds might happen often is Continuous Integration (CI). 1495 respondents said that they use CI to build Rust code, and around 25% of them consider its performance to be a big blocker for them. However, almost 36% of respondents who consider CI build performance to be a big issue said that they do not use any caching in CI, which we found surprising. One explanation might be that the generated artifacts (the &lt;code&gt;target&lt;/code&gt; directory) is too large for effective caching, and runs into usage limits of CI providers, which is something that we saw mentioned repeatedly in the open answers section. We have recently introduced an experimental Cargo and compiler option called &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#no-embed-metadata&quot;&gt;&lt;code&gt;-Zembed-metadata&lt;/code&gt;&lt;/a&gt; that is designed to reduce the size of the &lt;code&gt;target&lt;/code&gt; directories, and work is also underway to regularly &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13136&quot;&gt;garbage collect&lt;/a&gt; them. This might help with the disk space usage issue somewhat in the future.&lt;/p&gt;
&lt;p&gt;One additional way to significantly reduce disk usage is to reduce the amount of generated debug information, which brings us to the next section.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;debug-information&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#debug-information&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Debug information&lt;/h2&gt;
&lt;p&gt;The default Cargo &lt;code&gt;dev&lt;/code&gt; profile generates full debug information (debuginfo) both for workspace crates and also all dependencies. This enables stepping through code with a debugger, but it also increases disk usage of the &lt;code&gt;target&lt;/code&gt; directory, and crucially it makes compilation and linking slower. This effect can be quite large, as our benchmarks show a possible improvement of &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;0d0f4eac8b98133e5da6d3604d86a8f3b5a67844&amp;amp;end&#x3D;71ea9a0cacc3473c7b6852c17453259f74635c62&amp;amp;stat&#x3D;cycles%3Au&amp;amp;doc&#x3D;false&amp;amp;check&#x3D;false&amp;amp;opt&#x3D;false&quot;&gt;2-30% in cycle counts&lt;/a&gt; if we reduce the debuginfo level to &lt;code&gt;line-tables-only&lt;/code&gt; (which only generates enough debuginfo for backtraces to work), and the improvements are &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;bea625f3275e3c897dc965ed97a1d19ef7831f01&amp;amp;end&#x3D;87c3e1ecd699573f7cb4c9074b8727956bd37a74&amp;amp;stat&#x3D;cycles%3Au&amp;amp;check&#x3D;false&amp;amp;opt&#x3D;false&amp;amp;doc&#x3D;false&quot;&gt;even larger&lt;/a&gt; if we disable debuginfo generation completely&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-lld-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-lld&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, if Rust developers debug their code after most builds, then this cost might be justified. We thus asked them how often they use a debugger to debug their Rust code:&lt;/p&gt;
&lt;!-- Chart debugger start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;debugger&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;debugger&quot; src&#x3D;&quot;debugger.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;debugger.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;debugger.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart debugger end --&gt;
&lt;p&gt;Based on these results, it seems that the respondents of our survey do not actually use a debugger all that much&lt;sup class&#x3D;&quot;footnote-reference&quot; id&#x3D;&quot;fr-why-not-debug-1&quot;&gt;&lt;a href&#x3D;&quot;#fn-why-not-debug&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, when we asked people if they require debuginfo to be generated by default, the responses were much less clear-cut:&lt;/p&gt;
&lt;!-- Chart required-debuginfo start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;required-debuginfo&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;required-debuginfo&quot; src&#x3D;&quot;required-debuginfo.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart required-debuginfo end --&gt;
&lt;p&gt;This is the problem with changing defaults: it is challenging to improve the workflows of one user without regressing the workflow of another.  For completeness, here are the answers to the previous question partitioned on the answer to the &quot;How often do you use a debugger&quot; question:&lt;/p&gt;
&lt;!-- Chart required-debuginfo-debugger start --&gt;
&lt;div&gt;
    &lt;div class id&#x3D;&quot;required-debuginfo-debugger&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;required-debuginfo-debugger&quot; src&#x3D;&quot;required-debuginfo-debugger.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo-debugger.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;required-debuginfo-debugger.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart required-debuginfo-debugger end --&gt;
&lt;p&gt;It was surprising for us to see that around a quarter of respondents who (almost) never use a debugger still want to have full debuginfo generated by default.&lt;/p&gt;
&lt;p&gt;Of course, you can always disable debuginfo manually to improve your build performance, but not everyone knows about that option, and defaults matter a lot. The Cargo team is &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/15931&quot;&gt;considering&lt;/a&gt; ways of changing the status quo, for example by reducing the level of generated debug information in the &lt;code&gt;dev&lt;/code&gt; profile, and introducing a new built-in profile designed for debugging.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;workarounds-for-improving-build-performance&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#workarounds-for-improving-build-performance&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Workarounds for improving build performance&lt;/h2&gt;
&lt;p&gt;Build performance of Rust is affected by many different aspects, including the configuration of the build system (usually Cargo) and the Rust compiler, but also the organization of Rust crates and used source code patterns. There are thus several approaches that can be used to improve build performance by either using different configuration options or restructuring source code. We asked our respondents if they are even aware of such possibilities, whether they have tried them and how effective they were:&lt;/p&gt;
&lt;!-- Chart compile-time-improvement-mechanisms start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;compile-time-improvement-mechanisms&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;compile-time-improvement-mechanisms&quot; src&#x3D;&quot;compile-time-improvement-mechanisms.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;compile-time-improvement-mechanisms.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;compile-time-improvement-mechanisms.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart compile-time-improvement-mechanisms end --&gt;
&lt;p&gt;It seems that the most popular (and effective) mechanisms for improving build performance are reducing the number of dependencies and their activated features, and splitting larger crates into smaller crates. The most common way of improving build performance without making source code changes seems to be the usage of an alternative linker. It seems that especially the mold and LLD linkers are very popular:&lt;/p&gt;
&lt;!-- Chart alternative-linker start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;bar-chart&quot; id&#x3D;&quot;alternative-linker&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;alternative-linker&quot; src&#x3D;&quot;alternative-linker.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;alternative-linker-wordcloud.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download open answers as wordcloud PNG&quot;&gt;Wordcloud of open answers&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart alternative-linker end --&gt;
&lt;p&gt;We have good news here! The most popular &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; Linux target will start using the LLD linker in the next Rust stable release, resulting in faster link times &lt;em&gt;by default&lt;/em&gt;. Over time, we will be able to evaluate how disruptive is this change to the overall Rust ecosystem, and whether we could e.g. switch to a different (even faster) linker.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;build-performance-guide&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#build-performance-guide&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Build performance guide&lt;/h3&gt;
&lt;p&gt;We were surprised by the relatively large number of users who were unaware of some approaches for improving compilation times, in particular those that are very easy to try and typically do not require source code changes (such as reducing debuginfo or using a different linker or a codegen backend). Furthermore, almost 42% of respondents have not tried to use &lt;em&gt;any&lt;/em&gt; mechanism for improving build performance whatsoever. While this is not totally unexpected, as some of these mechanisms require using the nightly toolchain or making non-trivial changes to source code, we think that one the reasons is also simply that Rust developers might not know about these mechanisms being available. In the open answers, several people also noted that they would appreciate if there was some sort of official guidance from the Rust Project about such mechanisms for improving compile times.&lt;/p&gt;
&lt;p&gt;It should be noted that the mechanisms that we asked about are in fact workarounds that present various trade-offs, and these should always be carefully considered. Several people have expressed dissatisfaction with some of these workarounds in the open answers, as they find it unacceptable to modify their code (which could sometimes result e.g. in increased maintenance costs or worse runtime performance) just to achieve reasonable compile times. Nevertheless, these workarounds can still be incredibly useful in some cases.&lt;/p&gt;
&lt;p&gt;The feedback that we received shows that it might be beneficial to spread awareness of these mechanisms in the Rust community more, as some of them can make a really large difference in build performance, but also to candidly explain the trade-offs that they introduce. Even though several great resources that cover this topic already exist online, we decided to create an &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15924&quot;&gt;official guide&lt;/a&gt; for optimizing build performance (currently work-in-progress), which will likely be hosted in the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo&quot;&gt;Cargo book&lt;/a&gt;. The aim of this guide is to increase the awareness of various mechanisms for improving build performance, and also provide a framework for evaluating their trade-offs.&lt;/p&gt;
&lt;p&gt;Our long-standing goal is to make compilation so fast that similar workarounds will not be necessary anymore for the vast majority of use-cases. However, there is no free lunch, and the combination of Rust&#x27;s strong type system guarantees, its compilation model and also heavy focus on runtime performance often go against very fast (re)build performance, and might require usage of at least some workarounds. We hope that this guide will help Rust developers learn about them and evaluate them for their specific use-case.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;understanding-why-builds-are-slow&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#understanding-why-builds-are-slow&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Understanding why builds are slow&lt;/h2&gt;
&lt;p&gt;When Rust developers experience slow builds, it can be challenging to identify where exactly is the compilation process spending time, and what could be the bottleneck. It seems that only very few Rust developers leverage tools for profiling their builds:&lt;/p&gt;
&lt;!-- Chart profiling-tools start --&gt;
&lt;div&gt;
    &lt;div class&#x3D;&quot;matrix-chart&quot; id&#x3D;&quot;profiling-tools&quot;&gt;&lt;noscript&gt;
&lt;img alt&#x3D;&quot;profiling-tools&quot; src&#x3D;&quot;profiling-tools.png&quot;/&gt;
&lt;/noscript&gt;&lt;/div&gt;
    &lt;div style&#x3D;&quot;display: flex; margin-bottom: 10px;&quot;&gt;
        &lt;span&gt;[&lt;a href&#x3D;&quot;profiling-tools.png&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as PNG&quot;&gt;PNG&lt;/a&gt;]&lt;/span&gt;&amp;nbsp;&lt;span&gt;[&lt;a href&#x3D;&quot;profiling-tools.svg&quot; target&#x3D;&quot;_href_&quot; title&#x3D;&quot;Download chart as SVG&quot;&gt;SVG&lt;/a&gt;]&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- Chart profiling-tools end --&gt;
&lt;p&gt;This hardly comes as a surprise. There are currently not that many ways of intuitively understanding the performance characteristics of Cargo and &lt;code&gt;rustc&lt;/code&gt;. Some tools offer only a limited amount of information (e.g. &lt;code&gt;cargo build --timings&lt;/code&gt;), and the output of others (e.g. &lt;code&gt;-Zself-profile&lt;/code&gt;) is very hard to interpret without knowledge of the compiler internals.&lt;/p&gt;
&lt;p&gt;To slightly improve this situation, we have recently added support for displaying &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15923&quot;&gt;link times&lt;/a&gt; to the &lt;code&gt;cargo build --timings&lt;/code&gt; output, to provide more information about the possible bottleneck in crate compilation (note this feature has not been stabilized yet).&lt;/p&gt;
&lt;p&gt;Long-term, it would be great to have tooling that could help Rust developers diagnose compilation bottlenecks in their crates without them having to understand how the compiler works. For example, it could help answer questions such as &quot;Which code had to be recompiled after a given source change&quot; or &quot;Which (proc) macros take the longest time to expand or produce the largest output&quot;, and ideally even offer some actionable suggestions. We plan to work on such tooling, but it will take time to manifest.&lt;/p&gt;
&lt;p&gt;One approach that could help Rust compiler contributors understand why are Rust (re)builds slow &quot;in the wild&quot; is the opt-in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h1/metrics-initiative.html&quot;&gt;compilation metrics collection initiative&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-s-next&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-s-next&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What&#x27;s next&lt;/h2&gt;
&lt;p&gt;There are more interesting things in the survey results, for example how do answers to selected questions differ based on the used operating system. You can examine the full results in the &lt;a href&#x3D;&quot;https://raw.githubusercontent.com/rust-lang/surveys/main/surveys/2025/compiler-performance-survey/report/compiler-performance-2025-report.pdf&quot;&gt;full report PDF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We would like to thank once more everyone who has participated in our survey. It helped us understand which workflows are the most painful for Rust developers, and especially the open answers provided several great suggestions that we tried to act upon.&lt;/p&gt;
&lt;p&gt;Even though the Rust compiler is getting increasingly faster every year, we understand that many Rust developers require truly significant improvements to improve their productivity, rather than &quot;just&quot; incremental performance wins. Our goal for the future is to finally stabilize long-standing initiatives that could improve build performance a lot, such as the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/production-ready-cranelift.html&quot;&gt;Cranelift codegen backend&lt;/a&gt; or the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/parallel-front-end.html&quot;&gt;parallel compiler frontend&lt;/a&gt;. One such initiative (using a &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable&quot;&gt;faster linker by default&lt;/a&gt;) will finally land soon, but the fact that it took many years shows how difficult it is to make such large cutting changes to the compilation process.&lt;/p&gt;
&lt;p&gt;There are other ambitious ideas for reducing (re)build times, such as &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/relink-dont-rebuild.html&quot;&gt;avoiding unnecessary workspace rebuilds&lt;/a&gt; or e.g. using some form of &lt;a href&#x3D;&quot;https://github.com/davidlattimore/wild&quot;&gt;incremental linking&lt;/a&gt;, but these will require a lot of work and design discussions.&lt;/p&gt;
&lt;p&gt;We know that some people are wondering why it takes so much time to achieve progress in improving the build performance of Rust. The answer is relatively simple. These changes require a lot of work, domain knowledge (that takes a relatively long time to acquire) and many discussions and code reviews, and the pool of people that have time and motivation to work on them or review these changes is very limited. Current compiler maintainers and contributors (many of whom work on the compiler as volunteers, without any funding) work very hard to keep up with maintaining the compiler and keeping it working with the high-quality bar that Rust developers expect, across many targets, platforms and operating systems. Introducing large structural changes, which are likely needed to reach massive performance improvements, would require a lot of concentrated effort and funding.&lt;/p&gt;
&lt;!-- Chart scripts --&gt;
&lt;script charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;/scripts/plotly-basic-2.29.0.min.js&quot;&gt;&lt;/script&gt;
&lt;script src&#x3D;&quot;charts.js&quot;&gt;&lt;/script&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol class&#x3D;&quot;footnotes-list&quot;&gt;
&lt;li id&#x3D;&quot;fn-lld&quot;&gt;
&lt;p&gt;This benchmark was already performed using the fast LLD linker. If a slower linker was used, the build time wins would likely be even larger. &lt;a href&#x3D;&quot;#fr-lld-1&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn-why-not-debug&quot;&gt;
&lt;p&gt;Potentially because of the strong invariants upheld by the Rust type system, and partly also because the Rust debugging experience might not be optimal for many users, which is a feedback that we received in the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2025/02/13/2024-State-Of-Rust-Survey-results/#challenges&quot;&gt;State of Rust 2024 survey&lt;/a&gt;. &lt;a href&#x3D;&quot;#fr-why-not-debug-1&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Jakub BerÃ¡nek</name>
        </author>
    </entry>
    <entry>
        <title>Welcoming the Rust Innovation Lab</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/" type="text/html" title="Welcoming the Rust Innovation Lab" />
        <published>2025-09-03T00:00:00+00:00</published>
        <updated>2025-09-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/">&lt;p&gt;TL;DR: &lt;a href&#x3D;&quot;https://github.com/rustls/rustls&quot;&gt;Rustls&lt;/a&gt; is the inaugural project of the &lt;a href&#x3D;&quot;https://rustfoundation.org/rust-innovation-lab&quot;&gt;Rust Innovation Lab&lt;/a&gt;, which is a new home for Rust projects under the Rust Foundation.&lt;/p&gt;
&lt;p&gt;At the Rust Foundation&#x27;s August meeting, the Project Directors and the rest of the Rust Foundation board voted to approve &lt;a href&#x3D;&quot;https://github.com/rustls/rustls&quot;&gt;Rustls&lt;/a&gt; as the first project housed under the newly formed Rust Innovation Lab. Prior to the vote, the Project Directors consulted with the Leadership Council who confirmed the Project&#x27;s support for this initiative.&lt;/p&gt;
&lt;p&gt;The Rust Innovation Lab (RIL) is designed to provide support for funded Rust-based open source projects from the Rust Foundation in the form of governance, legal, networking, marketing, and administration, while keeping the technical direction solely in the hands of the current maintainers. As with the other work of the Rust Foundation (e.g. its many existing &lt;a href&#x3D;&quot;https://rustfoundation.org/initiatives/&quot;&gt;initiatives&lt;/a&gt;), the purpose of the RIL is to strengthen the Rust ecosystem generally.&lt;/p&gt;
&lt;p&gt;The Foundation has been working behind the scenes to establish the Rust Innovation Lab, which includes setting up infrastructure under the Foundation to ensure smooth transition for Rustls into RIL. More details are available in &lt;a href&#x3D;&quot;https://rustfoundation.org/media/rust-foundation-launches-rust-innovation-lab-with-rustls-as-inaugural-project/&quot;&gt;the Foundation&#x27;s announcement&lt;/a&gt; and on &lt;a href&#x3D;&quot;https://rustfoundation.org/rust-innovation-lab&quot;&gt;the Rust Innovation Lab&#x27;s page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are all excited by the formation of the Rust Innovation Lab. The support this initiative will provide to Rustls (and, eventually, other important projects that are using Rust) will improve software security for the entire industry. The Rust Project is grateful for the support of the Rust Foundation corporate members who are making this initiative possible for the benefit of everyone.&lt;/p&gt;
&lt;p&gt;More information on the criteria for projects wishing to become part of the RIL and the process for applying will be coming soon. The Project Directors and Leadership Council have been and will continue working with the Foundation to communicate information, questions, and feedback with the Rust community about the RIL as the details are worked out.&lt;/p&gt;
</content>

        <author>
            <name>Carol Nichols</name>
        </author>
    </entry>
    <entry>
        <title>Faster linking times with 1.90.0 stable on Linux using the LLD linker</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/" type="text/html" title="Faster linking times with 1.90.0 stable on Linux using the LLD linker" />
        <published>2025-09-01T00:00:00+00:00</published>
        <updated>2025-09-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/">&lt;p&gt;TL;DR: rustc will start using the LLD linker by default on the &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; target starting with the next stable release (1.90.0, scheduled for 2025-09-18), which should significantly reduce linking times. Test it out on beta now, and please report any encountered issues.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;some-context&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#some-context&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Some context&lt;/h4&gt;
&lt;p&gt;Linking time is often a big part of compilation time. When rustc needs to build a binary or a shared library, it will usually call the default linker installed on the system to do that (this can be changed on the command-line or by the target for which the code is compiled).&lt;/p&gt;
&lt;p&gt;The linkers do an important job, with concerns about stability, backwards-compatibility and so on. For these and other reasons, on the most popular operating systems they usually are older programs, designed when computers only had a single core. So, they usually tend to be slow on a modern machine. For example, when building ripgrep 13 in debug mode on Linux, roughly half of the time is actually spent in the linker.&lt;/p&gt;
&lt;p&gt;There are different linkers, however, and the usual advice to improve linking times is to use one of these newer and faster linkers, like LLVM&#x27;s &lt;a href&#x3D;&quot;https://lld.llvm.org/&quot;&gt;&lt;code&gt;lld&lt;/code&gt;&lt;/a&gt; or Rui Ueyama&#x27;s &lt;a href&#x3D;&quot;https://github.com/rui314/mold&quot;&gt;&lt;code&gt;mold&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of Rust&#x27;s wasm and aarch64 targets already use &lt;code&gt;lld&lt;/code&gt; by default. When using rustup, rustc ships with a version of &lt;code&gt;lld&lt;/code&gt; for this purpose. When CI builds LLVM to use in the compiler, it also builds the linker and packages it. It&#x27;s referred to as &lt;code&gt;rust-lld&lt;/code&gt; to avoid colliding with any &lt;code&gt;lld&lt;/code&gt; already installed on the user&#x27;s machine.&lt;/p&gt;
&lt;p&gt;Since improvements to linking times are substantial, it would be a good default to use in the most popular targets. This has been discussed for a long time, for example in issues &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/39915&quot;&gt;#39915&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/71515&quot;&gt;#71515&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To expand our testing, we have enabled rustc to use &lt;code&gt;rust-lld&lt;/code&gt; by default on nightly, &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html&quot;&gt;in May 2024&lt;/a&gt;. No major issues have been reported since then.&lt;/p&gt;
&lt;p&gt;We believe we&#x27;ve done all the internal testing that we could, on CI, crater, on our benchmarking infrastructure and on nightly, and plan to enable &lt;code&gt;rust-lld&lt;/code&gt; to be the linker used by default on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; for stable builds in 1.90.0.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;benefits&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#benefits&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Benefits&lt;/h4&gt;
&lt;p&gt;While this also enables the compiler to use more linker features in the future, the most immediate benefit is much improved linking times.&lt;/p&gt;
&lt;p&gt;Here are more details from the ripgrep example mentioned above: for an incremental rebuild, linking is reduced 7x, resulting in a 40% reduction in end-to-end compilation times. For a from-scratch debug build, it is a 20% improvement.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/ripgrep-comparison.png&quot; alt&#x3D;&quot;Before/after comparison of a ripgrep incremental debug build&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Most binaries should see some improvements here, but it&#x27;s especially significant with e.g. bigger binaries, or for incremental rebuilds, or when involving debuginfo. These usually see bottlenecks in the linker.&lt;/p&gt;
&lt;p&gt;Here&#x27;s &lt;a href&#x3D;&quot;https://perf.rust-lang.org/compare.html?start&#x3D;b3e117044c7f707293edc040edb93e7ec5f7040a&amp;amp;end&#x3D;baed03c51a68376c1789cc373581eea0daf89967&amp;amp;stat&#x3D;instructions%3Au&amp;amp;tab&#x3D;compile&quot;&gt;a link&lt;/a&gt; to the complete results from our benchmarks.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;possible-drawbacks&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#possible-drawbacks&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Possible drawbacks&lt;/h4&gt;
&lt;p&gt;From our prior testing, we don&#x27;t really expect issues to happen in practice. It is a drop-in replacement for the vast majority of cases, but &lt;code&gt;lld&lt;/code&gt; is not &lt;em&gt;bug-for-bug&lt;/em&gt; compatible with GNU ld.&lt;/p&gt;
&lt;p&gt;In any case, using &lt;code&gt;rust-lld&lt;/code&gt; can be disabled if any problem occurs: use the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; flag to revert to using the system&#x27;s default linker.&lt;/p&gt;
&lt;p&gt;Some crates somehow relying on these differences could need additional link args, though we also expect this to be quite rare. Let us know if you encounter problems, by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;opening an issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Some of the big gains in performance come from parallelism, which could be undesirable in resource-constrained environments, or for heavy projects that are already reaching hardware limits.&lt;/p&gt;
&lt;h4 id&#x3D;&quot;summary-and-call-for-testing&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#summary-and-call-for-testing&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Summary, and call for testing&lt;/h4&gt;
&lt;p&gt;rustc will use &lt;code&gt;rust-lld&lt;/code&gt; on &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, starting with the 1.90.0 stable release, for much improved linking times. Rust 1.90.0 will be released next month, on the 18th of September 2025.&lt;/p&gt;
&lt;p&gt;This linker change is already available on the current beta (&lt;code&gt;1.90.0-beta.6&lt;/code&gt;). To help everyone prepare for this landing on stable, please test your projects on beta and let us know if you encounter problems, by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;opening an issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If that happens, you can revert to the default linker with the &lt;code&gt;-C linker-features&#x3D;-lld&lt;/code&gt; flag. Either by adding it to the usual &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, or to a project&#x27;s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; configuration file,
like so:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;target&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;x86_64-unknown-linux-gnu&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;rustflags&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;-Clinker-features&#x3D;-lld&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>

        <author>
            <name>RÃ©my Rakic</name>
        </author>
    </entry>
    <entry>
        <title>Demoting x86_64-apple-darwin to Tier 2 with host tools</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/" type="text/html" title="Demoting x86_64-apple-darwin to Tier 2 with host tools" />
        <published>2025-08-19T00:00:00+00:00</published>
        <updated>2025-08-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/">&lt;p&gt;In Rust 1.90.0, the target &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; will be demoted to Tier 2 with host tools.
The standard library and the compiler will continue to be built and distributed,
but automated tests of these components are no longer guaranteed to be run.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;background&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#background&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Background&lt;/h2&gt;
&lt;p&gt;Rust has supported macOS for a long time,
with some amount of support dating back to Rust 0.1 and likely before that.
During that time period,
Apple has changed CPU architectures from x86 to x86_64 and now to Apple silicon,
ultimately announcing the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Apple_silicon#Timeline&quot;&gt;end of support&lt;/a&gt; for the x86_64 architecture.&lt;/p&gt;
&lt;p&gt;Similarly,
&lt;a href&#x3D;&quot;https://github.blog/changelog/2025-07-11-upcoming-changes-to-macos-hosted-runners-macos-latest-migration-and-xcode-support-policy-updates/#macos-13-is-closing-down&quot;&gt;GitHub has announced&lt;/a&gt; that they will no longer provide free macOS x86_64 runners for public repositories.
The Rust Project uses these runners to execute automated tests for the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target.
Since the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/rustc/target-tier-policy.html&quot;&gt;target tier policy&lt;/a&gt; requires that Tier 1 platforms must run tests in CI,
the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target must be demoted to Tier 2.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-changes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-changes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What changes?&lt;/h2&gt;
&lt;p&gt;Starting with Rust 1.90.0, &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; will be Tier 2 with host tools.
For users,
nothing will change immediately;
builds of both the standard library and the compiler will still be distributed by the Rust Project for use via &lt;code&gt;rustup&lt;/code&gt; or alternative installation methods.&lt;/p&gt;
&lt;p&gt;Over time,
this target will likely accumulate bugs faster due to reduced testing.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;future&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#future&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Future&lt;/h2&gt;
&lt;p&gt;If the &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; target causes concrete problems,
it may be demoted further.
No plans for further demotion have been made yet.&lt;/p&gt;
&lt;p&gt;For more details on the motivation of the demotion, see &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3841-demote-x86_64-apple-darwin.html&quot;&gt;RFC 3841&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Jake Goulding</name>
        </author>
    </entry>
</feed>
