<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-11T14:17:58+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2078966</id>
    <published>2025-09-11T14:17:58+09:00</published>
    <updated>2025-09-11T14:18:21+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/4b3fc1564e44fd8f1fe1"/>
    <url>https://qiita.com/nozomi2025/items/4b3fc1564e44fd8f1fe1</url>
    <title>【デザインパターン】インタプリタパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
インタプリタ（Interpreter）パターン は、
特定の言語（ルールや文法）を表現し、それを解釈・実行する仕組みを提供する デザインパターンです。

解決する問題

独自のミニ言語やルールを実装したい
文法規則をオブジェクト化し、式を解釈・評価し...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2078549</id>
    <published>2025-09-10T15:53:02+09:00</published>
    <updated>2025-09-10T15:53:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/9a5163446fe11d2a5ecc"/>
    <url>https://qiita.com/nozomi2025/items/9a5163446fe11d2a5ecc</url>
    <title>【デザインパターン】イテレータパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
イテレータ（Iterator）パターン は、
集合体（コレクション）の要素に順次アクセスする方法を提供し、内部構造を隠す デザインパターンです。

解決する問題

配列・リスト・ツリーなど、データ構造ごとにアクセス方法が違うとクライアントが複雑になる...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2078393</id>
    <published>2025-09-10T10:54:11+09:00</published>
    <updated>2025-09-10T10:54:11+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/rickeysan95/items/b3fcb4b340af03a3ed74"/>
    <url>https://qiita.com/rickeysan95/items/b3fcb4b340af03a3ed74</url>
    <title>PHPerがKotlinを勉強するNo.1〜DI注入が簡単にできる〜</title>
    <content type="text">静的型付け言語に挑戦したいと思い、Kotlinを勉強していこうと思います。
当面の間、教材は以下のものを使って進めていきます。
https://zenn.dev/msksgm/books/implementing-server-side-kotlin-development...</content>
    <author>
      <name>rickeysan95</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2078048</id>
    <published>2025-09-09T15:22:05+09:00</published>
    <updated>2025-09-10T15:54:34+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/193f4bea1a3a79a2a39f"/>
    <url>https://qiita.com/nozomi2025/items/193f4bea1a3a79a2a39f</url>
    <title>【デザインパターン】 メディエータパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
メディエータ（Mediator）パターン は、
複数オブジェクト間の複雑な依存関係を「仲介者（Mediator）」に集約して、疎結合にする デザインパターンです。

解決する問題

多数のオブジェクトが相互に直接やり取りすると依存関係がスパゲッティ化...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
