<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:media="http://search.yahoo.com/mrss/" >

<channel>
	<title>Kotlin : A concise multiplatform language developed by JetBrains | The JetBrains Blog</title>
	<atom:link href="https://blog.jetbrains.com/kotlin/feed/" rel="self" type="application/rss+xml" />
	<link>https://blog.jetbrains.com</link>
	<description>Developer Tools for Professionals and Teams</description>
	<lastBuildDate>Mon, 20 Oct 2025 17:06:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-32x32.png</url>
	<title>Kotlin : A concise multiplatform language developed by JetBrains | The JetBrains Blog</title>
	<link>https://blog.jetbrains.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Koog 0.5.0 Is Out: Smarter Tools, Persistent Agents, and Simplified Strategy Design</title>
		<link>https://blog.jetbrains.com/ai/2025/10/koog-0-5-0-is-out-smarter-tools-persistent-agents-and-simplified-strategy-design/</link>
		
		<dc:creator><![CDATA[Daniela Bentrup]]></dc:creator>
		<pubDate>Fri, 17 Oct 2025 07:19:48 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/JB-social-BlogFeatured-1280x720-1-6.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[ai-agents]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=ai&#038;p=651225</guid>

					<description><![CDATA[We recently released Koog 0.5.0, introducing full Agent2Agent (A2A) protocol support, which makes it easier than ever to build systems of interconnected AI agents in Kotlin. But A2A is just the beginning. Koog 0.5.0 brings a host of improvements that make agents more persistent, tools smarter, and strategy design more intuitive. Let‚Äôs dive into the [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>We recently released<a href="https://github.com/JetBrains/koog/releases/tag/0.5.0" target="_blank" rel="noopener"> Koog 0.5.0</a>, introducing full <a href="https://blog.jetbrains.com/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/">Agent2Agent (A2A) protocol support</a>, which makes it easier than ever to build systems of interconnected AI agents in Kotlin.</p>



<p>But A2A is just the beginning. Koog 0.5.0 brings a host of improvements that make agents more persistent, tools smarter, and strategy design more intuitive. Let‚Äôs dive into the highlights.</p>



<h2 class="wp-block-heading">üí° Non-graph API for strategies</h2>



<p>Koog 0.5.0 introduces a <a href="https://github.com/JetBrains/koog/pull/560" target="_blank" rel="noopener">non-graph API</a> for defining agent strategies. You can now create and modify agent strategies directly in Kotlin, without working with graphs. The new non-graph API keeps most of Koog‚Äôs core features, including state management and history compression, so you can prototype custom strategies faster.&nbsp;</p>



<p>You can now streamline your development cycle. Start simple with the out-of-the-box AIAgent using the default strategy. Then, experiment with the non-graph API to quickly test and find the best configuration for your task through straightforward code. Once you‚Äôre ready, scale it into a graph workflow to take full advantage of persistence for maximum reliability, as well as nested event tracing for deeper insights to build and test strategies more efficiently.</p>



<h2 class="wp-block-heading">üîÅ Agent persistence and checkpointing improvements</h2>



<p>Complex AI workflows often depend on <a href="https://github.com/JetBrains/koog/pull/856" target="_blank" rel="noopener">persistence</a> ‚Äì the ability to save and restore state without losing context or causing unintended side effects. Since we introduced persistence in Koog 0.4.0, we‚Äôve <a href="https://github.com/JetBrains/koog/pull/856" target="_blank" rel="noopener">continued to build on it</a> to make agent state management much more reliable and flexible.</p>



<p>The new RollbackToolRegistry enables agents to undo side effects from tool calls when checkpointing, ensuring that rollbacks don‚Äôt leave your environment in an inconsistent state.</p>



<p>You can now also toggle between full state-machine persistence and message history persistence, giving you control over how much of the agent‚Äôs internal state to preserve.</p>



<h2 class="wp-block-heading">‚öíÔ∏è Tool API enhancements</h2>



<p>Tools are the backbone of Koog‚Äôs agent capabilities. This release refines the <a href="https://github.com/JetBrains/koog/pull/791" target="_blank" rel="noopener">Tool API</a> to make tool development and integration smoother.</p>



<p>Tool descriptors are now automatically generated for class-based tools across all platforms. With this update, defining tools on multiplatform works just as smoothly as on the JVM, removing redundant setup and keeping your Tool API definitions concise and consistent.</p>



<p>With improvements to subgraphWithTask and subgraphWithVerification, finishTools is no longer required, and neither is the SubgraphResult type. You can now specify any input type, output type (including primitive types), task, tools, and models, and everything works automatically. There‚Äôs no more boilerplate ‚Äì Koog infers and generates it all for you.</p>



<h2 class="wp-block-heading">üëã Introducing AIAgentService</h2>



<p>Managing multiple agents is now easier with the new AIAgentService. It allows you to run and manage multiple AI agents as single-use, state-managed services.</p>



<h2 class="wp-block-heading">üßë‚Äç‚öñÔ∏è New components and smarter interactions</h2>



<p>Koog 0.5.0 also introduces new components that enhance reasoning and control in agent systems.&nbsp;</p>



<p><a href="https://github.com/JetBrains/koog/pull/866" target="_blank" rel="noopener">LLM as a judge</a> is a new component that uses large language models to evaluate outputs or guide decision-making processes.</p>



<p>In version 0.5.0, we‚Äôve added a <a href="https://github.com/JetBrains/koog/pull/829" target="_blank" rel="noopener">strategy</a> for iterative tool calling with structured outputs. This makes it much easier to obtain typed results from any agent without having to write custom code.&nbsp;</p>



<p><a href="https://github.com/JetBrains/koog/pull/747" target="_blank" rel="noopener">Streaming now supports tool calls</a>, allowing the use of tools while receiving results from an LLM on the fly. With this update, front-end integrated agents can now stream partial outputs to the user interface while still invoking tools as needed.</p>



<h2 class="wp-block-heading">Wrapping up</h2>



<p>Koog 0.5.0 isn‚Äôt just about connecting agents ‚Äì it‚Äôs about empowering them to be smarter, more persistent, and easier to design. Whether you‚Äôre experimenting with lightweight strategies, managing long-lived agent sessions, or creating sophisticated toolchains, this release brings significant improvements across the board.</p>



<h2 class="wp-block-heading">‚ú® Try Koog 0.5.0</h2>



<p>If you‚Äôre building agents that need to be more connected, persistent, and easier to design, Koog 0.5.0 is the right choice. Explore the <a href="https://docs.koog.ai/" target="_blank" rel="noopener">docs</a>, build systems of multiple AI agents, and experiment faster while still benefiting from Koog‚Äôs advanced features.</p>



<h2 class="wp-block-heading">ü§ù Your contributions make a difference</h2>



<p>We‚Äôd like to take this opportunity to extend a huge thank-you to the entire community! Your feedback, issue reports, and pull requests have been invaluable for the development of Koog!</p>



<p>A special shoutout to this release‚Äôs top contributors:</p>



<ul>
<li><a href="https://github.com/dosier" target="_blank" rel="noopener">Stan</a> ‚Äì refactored the streaming API to support tool calls.</li>



<li><a href="https://github.com/siarhei-luskanau" target="_blank" rel="noopener">Siarhei Luskanau</a> ‚Äì added the iOS target and enabled web support for demo-compose-app.</li>



<li><a href="https://github.com/ptitjes" target="_blank" rel="noopener">Didier Villevalois</a> ‚Äì added an option to dynamically adjust context window sizes for Ollama.</li>



<li><a href="https://github.com/rubencagnie" target="_blank" rel="noopener">Ruben Cagnie</a> ‚Äì implemented support for the tool-calling strategy in structured output.</li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Build a Kotlin Multiplatform Project and Win a Trip to KotlinConf 2026</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/kotlin-multiplatform-contest-2026/</link>
		
		<dc:creator><![CDATA[Ksenia Shneyveys]]></dc:creator>
		<pubDate>Thu, 09 Oct 2025 13:29:03 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-3.png</featuredImage>		<category><![CDATA[education]]></category>
		<category><![CDATA[news]]></category>
		<category><![CDATA[contest]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=647355</guid>

					<description><![CDATA[This year‚Äôs Kotlin Multiplatform Contest for students and recent graduates is open. Build a project using KMP, and it could take you to KotlinConf 2026 in Munich, Germany! Whether you are already exploring Kotlin Multiplatform or just curious about how far you can take shared Kotlin code, seize the chance to challenge yourself, stand out, [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>This year‚Äôs <a href="https://jb.gg/f7vo0v" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform Contest</a> for students and recent graduates is open. Build a project using KMP, and it could take you to KotlinConf 2026 in Munich, Germany!</p>



<p>Whether you are already exploring Kotlin Multiplatform or just curious about how far you can take shared Kotlin code, seize the chance to challenge yourself, stand out, and be part of the Kotlin community‚Äôs biggest event.</p>



<p align="center"><a class="ek-link jb-download-button" title="Join the contest" href="https://jb.gg/f7vo0v" target="_blank" rel="noopener">Join the contest</a></p>



<p>Kotlin Multiplatform lets you create apps for Android, iOS, desktop, web, and server ‚Äì all from a single codebase. We‚Äôll support you in a <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">dedicated Slack channel</a> where you can ask questions, share progress, and meet fellow participants.</p>



<p>This year, you can explore Kotlin for AI-powered apps and optionally add intelligent features to your projects. Check out our <a href="https://kotlinlang.org/docs/kotlin-ai-apps-development-overview.html" target="_blank" rel="noreferrer noopener">Kotlin AI examples</a> to see how.</p>



<h2 class="wp-block-heading">Prizes</h2>



<ul>
<li>The creators of the top three projects will win a trip to KotlinConf 2026 in Munich, Germany, taking place May 21‚Äì22, 2026. This will include travel, accommodation, exclusive swag, and a spotlight on the KotlinConf, Kotlin, and Kotlin Foundation social media and public channels, as well as at the event itself.</li>



<li>All authors of valid entries will receive Kotlin souvenirs and a warm welcome to the community.</li>



<li>All prizes are proudly sponsored by the <a href="https://kotlinfoundation.org" target="_blank" rel="noreferrer noopener">Kotlin Foundation</a>.</li>
</ul>



<h2 class="wp-block-heading">Dates</h2>



<p>Contest opens: September 15, 2025</p>



<p>Submission deadline: January 12, 2026</p>



<p>Winners announced: January 22, 2026</p>



<h2 class="wp-block-heading">How to enter</h2>



<ol>
<li>Join the <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">#kotlin-multiplatform-contest</a> channel on the Kotlinlang Slack workspace.<br>Stay up to date, ask questions, and get support from the community and Kotlin experts.</li>



<li><a href="https://kotlinconf.com/contest-rules/" target="_blank" rel="noreferrer noopener">Review the rules</a> and eligibility criteria. Make sure your submission meets the eligibility and technical requirements.</li>



<li>Build your project using Kotlin Multiplatform.</li>



<li>Submit your entry:
<ul>
<li>Upload your project to GitHub, including a detailed README with installation instructions and feature descriptions for all supported platforms.</li>



<li>Consider including a short screencast (three to five minutes long) demonstrating your project‚Äôs main features in action. This will help the jury quickly understand your project and evaluate its functionality and creative merit.</li>
</ul>
</li>
</ol>



<p align="center"><a class="ek-link jb-download-button" title="Submit your project" href="https://jb.gg/z1tir1" target="_blank" rel="noopener">Submit your project</a></p>



<h2 class="wp-block-heading">Resources</h2>



<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform official documentation</a></p>



<p><a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmyL2O0OaTYPfmOwODlLIeX9" target="_blank" rel="noreferrer noopener">Kotlin Multiplatform Hits</a> ‚Äì YouTube playlist</p>



<p><a href="https://www.youtube.com/watch?v=5_W5YKPShZ4" target="_blank" rel="noreferrer noopener">Compose Multiplatform</a> ‚Äì video tutorial</p>



<p><a href="https://github.com/joreilly/PeopleInSpace" target="_blank" rel="noreferrer noopener">PeopleInSpace</a> ‚Äì sample KMP projects</p>



<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-samples.html" target="_blank" rel="noreferrer noopener">More samples of multiplatform projects</a></p>



<h2 class="wp-block-heading">Previous years‚Äô winners</h2>



<p>Meet the developers who impressed us in previous years with their creativity and skill. Check out <a href="https://youtube.com/playlist?list=PLlFc5cFwUnmzJm4IRyfainQpYhpZ9kvYP&amp;si=xPqo_NANLlVOE-zx" target="_blank" rel="noreferrer noopener">this video playlist</a> featuring interviews with the previous winners from 2024 and 2023.</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe title="KMP Contest" width="500" height="281" src="https://www.youtube.com/embed/videoseries?list=PLlFc5cFwUnmzJm4IRyfainQpYhpZ9kvYP" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<h2 class="wp-block-heading">Join the community</h2>



<p>Participating in the Kotlin Multiplatform Contest is a chance to learn and connect. Join the <a href="https://slack-chats.kotlinlang.org/c/kotlin-multiplatform-contest" target="_blank" rel="noreferrer noopener">Slack channel</a> to meet other students and Kotlin experts.</p>



<p>Take the leap ‚Äì show us what you can do!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Crafting Your KotlinConf Proposal: Expert Tips to¬† Help You Stand Out</title>
		<link>https://blog.jetbrains.com/kotlin/2025/10/crafting-your-kotlinconf-proposal-expert-tips/</link>
		
		<dc:creator><![CDATA[Daria Voronina]]></dc:creator>
		<pubDate>Wed, 08 Oct 2025 16:26:27 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/10/Blog-Featured-1280x720-1-2.png</featuredImage>		<category><![CDATA[news]]></category>
		<category><![CDATA[events]]></category>
		<category><![CDATA[kotlinconf]]></category>
		<category><![CDATA[tips]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=647268</guid>

					<description><![CDATA[Thinking about sharing your Kotlin expertise on the big stage? KotlinConf is the premier event for all things Kotlin, and getting a talk accepted for inclusion in the conference is a fantastic way to contribute to the community and elevate your profile. However, submitting a talk proposal, especially for the first time, can feel daunting. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Thinking about sharing your Kotlin expertise on the big stage? <a href="https://kotlinconf.com/" target="_blank" data-type="link" data-id="https://kotlinconf.com/" rel="noreferrer noopener">KotlinConf</a> is the premier event for all things Kotlin, and getting a talk accepted for inclusion in the conference is a fantastic way to contribute to the community and elevate your profile. However, submitting a talk proposal, especially for the first time, can feel daunting. With so many brilliant minds around, how do you give your proposal the best shot at being accepted?</p>



<p>In this post, we‚Äôll share some ways to make your submission stand out, combining best practices for conference proposals with insider advice from JetBrains speakers, KotlinConf program committee members, and experienced presenters.</p>



<p>The tips are tailored to KotlinConf in particular, but most of these ideas are applicable to any developer conference.</p>



<h2 class="wp-block-heading">1. Make sure your title is clear and compelling</h2>



<p>You never get a second chance to make a first impression, and your talk‚Äôs title is your earliest opportunity to capture attention. Reviewers and attendees alike may decide whether to read further based solely on those first few words.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Untitled-design-2.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Pamela Hill. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/pamelaahill" target="_blank">X</a>, <a href="https://bsky.app/profile/pamelaahill.bsky.social" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/pamelaahill/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">A carefully-selected title can make all the difference! Audience members often lack the time or attention span to read more than the title when deciding whether to attend a talk. Prefer clarity over a catchy or fun title that doesn‚Äôt give a good idea of what the talk is about in a nutshell.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Choose a title that communicates your topic in plain terms, hints at the level, and makes the benefit to the audience obvious.</p>



<div style="background-color: #f1f6fe; margin-bottom: 2px; padding: 5px; margin-right: 0%; text-align: left; min-height: px;">
<p><i><a href="https://www.youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noreferrer noopener"><em>Your Voice Belongs Here: Creating Compelling KotlinConf Proposals</em></a></i> is a supportive and practical livestream for people from underrepresented groups in tech ‚Äì whether you&#8217;re preparing for your first talk or have speaking experience and want to take the next step onto a bigger stage like KotlinConf. Join Pamela Hill and Cheuk Ting Ho, seasoned speakers, CFP writers, and friendly program committee members, as they share what makes a proposal stand out, how to shape your Kotlin journey into a strong submission, and what reviewers are really looking for. Watch the livestream recording.</p>
</div>
<p></p>



<p align="center"><a class="ek-link jb-download-button" title="Watch now" href="https://www.youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noopener">Watch now</a></p>



<h2 class="wp-block-heading">2. Tell a story with your abstract ‚Äì with the audience in mind</h2>



<p>Crafting a great talk is not just about presenting information ‚Äì it‚Äôs also about storytelling. Think of your proposal as a promise to provide a valuable learning experience wrapped in a story that makes it engaging.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U014J262P1A-41f465128ee6-512.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Sebastian Sellmair. Software Developer, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/Sellmair" target="_blank">X</a>, <a href="https://bsky.app/profile/sellmair.dev" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.youtube.com/@s.sellmair" target="_blank" rel="noopener">YouTube</a></p>
<p><i><span style="font-weight: 400;">Talking at KotlinConf is a great experience and a huge achievement for any Kotlin developer. While choosing a great title, having highly polished animations, and curating high-quality memes might enhance your talk, the most important thing is having a story worth telling. Do you have something novel and technically interesting to present? Can you break down a topic in a way that is engaging and truly fun? Can you inspire fellow developers?</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Your abstract should explain what you‚Äôll cover, what the attendees will gain, and why your talk matters. Reviewers don‚Äôt need a full script, but they do need a clear, detailed impression of your talk.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>M√°rton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">While we don‚Äôt need a full script for your talk as the abstract, we‚Äôre also unlikely to accept a talk where the abstract is just a single sentence. Two or three paragraphs are usually enough to provide meaningful detail.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Think of your abstract as a preview, not a transcript ‚Äì just enough detail to show the value and flow of your talk.</p>



<p align="center"><a class="ek-link jb-download-button" title="Submit your session" href="https://jb.gg/l1dymy" target="_blank" rel="noopener">Submit your session</a></p>



<h2 class="wp-block-heading">3. Start with the problem and build anticipation</h2>



<p>When writing your proposal, set the stage by outlining the challenge or pain point your talk addresses. Create curiosity before giving the solution. This builds anticipation and helps the audience connect with your topic.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U03B9EX5MNY-68f44def26a8-512.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Jodie Burchell. Developer Advocate and Data Scientist</h4>
                                                <p><a href="https://www.linkedin.com/in/jodieburchell/" target="_blank" rel="noopener">LinkedIn</a>, <a href="https://fosstodon.org/@t_redactyl" target="_blank" rel="noopener">Mastodon</a>, <a href="https://bsky.app/profile/t-redactyl.bsky.social" target="_blank" rel="noopener">Bluesky</a></p>
<p><i><span style="font-weight: 400;">Hook your audience by telling them the problem you&#8217;re going to be solving. People love mystery books for a reason, and that&#8217;s because they build up a bit of suspense before they jump into the solution. A great proposal will do the same thing.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<h2 class="wp-block-heading">4. Think like an attendee: What&#8217;s their takeaway?</h2>



<p>The best proposals start with the audience. Instead of asking, <em>‚Äú</em>What do I want to present?<em>‚Äù</em>, consider what the attendees will learn and why they will find it valuable.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/1FqLye0HTHxz.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Svetlana Isakova. Team Lead in Kotlin Developer Advocacy, KotlinConf Program Committee member, KotlinConf speaker </h4>
                                                <p><a href="https://x.com/sveta_isakova" target="_blank">X</a></p>
<p><i><span style="font-weight: 400;">When submitting a talk, think like an attendee: Would you want to sit through this? What‚Äôs in it for the audience? That‚Äôs why we ask about key takeaways. What do you want people to learn, try, do, or feel inspired by?</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Be precise with key takeaways. Avoid vague statements like ‚ÄúYou‚Äôll learn best practices.‚Äù Instead, be concrete and specific.</p>



<p>Here are a few examples from KotlinConf 2025 talks:</p>



<ul>
<li>‚ÄúLearn how native dependencies interact, how they are loaded, and the unexpected complexities of the native world.‚Äù (<a href="https://youtu.be/n0LpCCv3VEY?si=UJ1zXMJx7FwSniWL" target="_blank" rel="noreferrer noopener"><em>Dependencies and Kotlin/Native</em></a> | Tadeas Kriz).</li>
</ul>



<ul>
<li>‚ÄúYou&#8217;ll learn how to effectively use built-in tools, recognize problematic patterns, and implement proven optimization strategies.‚Äù (<a href="https://youtu.be/QTX5_JV4TVU?si=7kpUPi3wopjC7HLV" target="_blank" rel="noreferrer noopener"><em>Taming Asynchronous Beasts: Debugging and Performance Tuning in a Coroutine World</em></a> | Marcin Moska≈Ça).</li>
</ul>



<ul>
<li>‚ÄúWe&#8217;ll learn how KMP provides a unified framework for code sharing and execution across various platforms to solve the challenge of different codebases targeting different runtimes.‚Äù (<a href="https://youtu.be/OuX5325yq_I?si=LpT4Cs3aF7mwRMy9" target="_blank" rel="noreferrer noopener"><em>Kotlin Multiplatform&#8217;s Cross-Platform Brilliance at Norway&#8217;s 377-Year-Old National Postal Service</em></a> | Anshika Koul)</li>
</ul>



<p>Specific takeaways not only strengthen your proposal for reviewers but also make your talk more attractive to attendees when the schedule is published.</p>



<h2 class="wp-block-heading">5. Make it Kotlin-centric</h2>



<p>KotlinConf focuses on Kotlin itself and its ecosystem. Reviewers look for proposals that highlight Kotlin‚Äôs features, multiplatform capabilities, or language design, or relevant tools from the ecosystem.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>M√°rton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Keep in mind that your talk should be related to Kotlin! For example, not every Android talk is necessarily a good fit for the KotlinConf audience. Or talks about Jetpack Compose often cover things that work the exact same way with Compose Multiplatform, and the latter is much more likely to be accepted at KotlinConf!</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>If your talk covers a popular theme, put your own unique spin on it. A case study, a personal experience, or a surprising insight can make your submission stand out.</p>



<h2 class="wp-block-heading">6. Showcase your speaking skills</h2>



<p>Even the most brilliant idea can fall short without effective delivery. The KotlinConf program committee wants to see that you can engage the audience.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/1FqLye0HTHxz.jpeg" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Svetlana Isakova. Team Lead in Kotlin Developer Advocacy, KotlinConf Program Committee member, KotlinConf speaker </h4>
                                                <p><a href="https://x.com/sveta_isakova" target="_blank">X</a></p>
<p><i><span style="font-weight: 400;">Examples of your talks help us make better choices. If you‚Äôre a first-time speaker and don‚Äôt have recordings, no worries! You can simply record yourself (even just part of your proposed talk) on your laptop and share the link. We would really appreciate it.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>The KotlinConf Call for Speakers form includes a <em>Recordings of previous talks</em> field, which is a fantastic opportunity to demonstrate your presentation style and energy. If you&#8217;re new to speaking, a short, self-recorded video can make a huge difference.</p>



<p>If you don‚Äôt have formal recordings, consider including links to blog posts, open-source projects, or short demo videos related to your topic.</p>



<h2 class="wp-block-heading">7. Polishing matters: Make your proposal shine</h2>



<p>A strong proposal isn‚Äôt just about content; presentation matters too. Typos, inconsistent formatting, or vague writing can work against you.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>M√°rton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Your submission should show that you‚Äôve put some thought and energy into preparing it. Check your submission for formatting issues and typos, and please don‚Äôt submit abstracts that were generated by LLMs.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>Reviewers want to see that you‚Äôve taken care in preparing your proposal. A polished submission suggests you‚Äôll bring the same care to your talk.</p>



<h2 class="wp-block-heading">8. Consider different formats and feel free to submit more than one talk</h2>



<p>If your topic doesn‚Äôt quite fit a full-length slot, consider proposing a lightning talk instead.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/T0288D531-U05RAPGGJAK-8766042aed05-512.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>M√°rton Braun. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/zsmb13" target="_blank">X</a>, <a href="https://bsky.app/profile/zsmb.co" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/zsmb13/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Don‚Äôt forget that we also accept lightning talks! If you feel like your content would have to be padded to fill a regular session, it might be more enjoyable as a lightning talk.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<p>And here‚Äôs another strategic tip: Submitting multiple proposals increases your chances of being selected.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/10/Untitled-design-2.png" alt="" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Pamela Hill. Developer Advocate, KotlinConf Program Committee member, KotlinConf speaker</h4>
                                                <p><a href="https://x.com/pamelaahill" target="_blank">X</a>, <a href="https://bsky.app/profile/pamelaahill.bsky.social" target="_blank" rel="noopener">Bluesky</a>, <a href="https://www.linkedin.com/in/pamelaahill/" target="_blank" rel="noopener">LinkedIn</a></p>
<p><i><span style="font-weight: 400;">Submit more than one talk! It gives you more chances to join in on the KotlinConf fun.</span></i></p>
                    </div>
                            </div>
        </div>
    </div>



<h2 class="wp-block-heading">9. Don‚Äôt be afraid to get creative</h2>



<p>There&#8217;s always room for talks that are purely fun or explore unexpected aspects of Kotlin. If you have an amazing side project or discovered something truly surprising about the language, don&#8217;t hesitate to submit it!</p>



<p>The KotlinConf&#8217;26 Call for Speakers is opem! Share your Kotlin expertise with the world ‚Äì server-side, web, desktop, mobile, AI/ML, and more! Submit your proposal and get a chance to speak at the year&#8217;s biggest Kotlin event!</p>



<p align="center"><a class="ek-link jb-download-button" title="Submit your session" href="https://jb.gg/l1dymy" target="_blank" rel="noopener">Submit your session</a></p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Getting a talk accepted to a prestigious conference like KotlinConf is a significant achievement. It‚Äôs an opportunity to share your insights, experiences, or even fun discoveries with the Kotlin community. However, the competition is stiff, and each year, many good proposals don‚Äôt make the cut.</p>



<p>Don‚Äôt get discouraged if your submission isn‚Äôt accepted. Keep refining your ideas, practice your presentation skills, and continue to engage with the Kotlin community. Every submission is a learning experience and valuable practice. With preparation and care, the next KotlinConf stage could be yours.</p>



<p>Good luck preparing your submission for KotlinConf&#8217;26!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Amper Update, October 2025 ‚Äì Compose Hot Reload and UX Improvements</title>
		<link>https://blog.jetbrains.com/amper/2025/10/amper-update-october-2025/</link>
		
		<dc:creator><![CDATA[Joffrey Bion]]></dc:creator>
		<pubDate>Fri, 03 Oct 2025 16:55:44 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/05/AMP-social-BlogFeatured-2560x1440-1.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=amper&#038;p=644436</guid>

					<description><![CDATA[Amper 0.8.0 is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see the release notes for the full list of changes and bug fixes. To get support for Amper‚Äôs [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><a href="https://github.com/JetBrains/amper/releases/tag/v0.8.0" target="_blank" rel="noopener">Amper 0.8.0</a> is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see <a href="https://github.com/JetBrains/amper/releases/tag/v0.8.0" target="_blank" rel="noopener">the release notes</a> for the full list of changes and bug fixes.</p>



<p><em>To get support for Amper‚Äôs latest features, use </em><a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener"><em>IntelliJ IDEA 2025.3 EAP</em></a><em> (or newer).</em></p>



<h2 class="wp-block-heading">Compose Hot Reload support</h2>



<p>You can now use <a href="https://github.com/JetBrains/compose-hot-reload" target="_blank" rel="noopener">Compose Hot Reload</a> to automatically load code changes without having to restart your application:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/compose-hot-reload.mp4"></video></figure>



<p>To do so, make sure your module has a JVM (desktop) target. Then, in IntelliJ IDEA, use the<em> Run with Compose Hot Reload</em> button wherever it is possible to run your application:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img decoding="async" fetchpriority="high" width="922" height="324" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/run-with-compose-hot-reload.png" alt="Dialog with multiple &quot;run&quot; options, with &quot;Run with Compose Hot Reload&quot; highlighted" class="wp-image-644606" style="aspect-ratio:2.845679012345679;object-fit:contain;width:500px" /></figure></div>


<p>Read more <a href="https://github.com/JetBrains/amper/blob/HEAD/docs/Documentation.md#compose-hot-reload-experimental" target="_blank" rel="noopener">in the documentation</a>.</p>


                    <div class="alert ">
            <p><strong>Note:</strong> In 0.8.0, Amper required some special configuration to enable Compose Hot Reload. With the latest 0.8.1 patch release, this setting was removed and Compose Hot Reload is enabled by default in all compatible modules.</p>
        </div>
    






<h2 class="wp-block-heading">Custom Kotlin compiler version support</h2>



<p>If you‚Äôre eager to try new Kotlin compiler versions before the next Amper release, you can now customize the Kotlin compiler version with a simple setting:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">settings:
¬†¬†kotlin:
¬†¬†¬†¬†version: 2.2.20-rc</pre>



<p><em>Note: only versions 2.0.0 and above are supported</em>.</p>



<h2 class="wp-block-heading">Simplified single-platform experience</h2>



<p>If you are not using multi-platform modules, choosing between the <code>src</code> and <code>src@jvm</code> directories might be confusing.</p>



<p>In Amper 0.8.0, <code>jvm/app</code> and <code>android/app</code> modules have been simplified to only support <code>src</code>, and the <code>@jvm</code> qualifier is no longer permitted in their <code>module.yaml</code> files. We also introduced the new, dedicated product type <code>jvm/lib</code> for JVM-only libraries, which offers the same benefits and better conveys your intent.</p>



<h2 class="wp-block-heading">JavaScript and Wasm targets support</h2>



<p>Amper now supports the <code>js</code>, <code>wasmJs</code>, and <code>wasmWasi</code> target platforms. You can use them in your multiplatform library modules or via one of our new application product types: <code>js/app</code>, <code>wasmJs/app</code>, and <code>wasmWasi/app</code>.</p>



<p>These application product types are very basic for now. Amper simply produces an executable JavaScript or Wasm file, but it cannot run it with <code>./amper run</code> because it doesn‚Äôt currently install any JavaScript runtime or browser.&nbsp;</p>



<p>We are eager to hear what you need in terms of tooling support for these product types ‚Äì please let us know in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack‚Äôs #amper channel</a>.</p>



<h2 class="wp-block-heading">Maven-local dependency resolution</h2>



<p>Previously, Amper only used the Maven local repository to optimize the downloads of artifacts, but never trusted its data. We always verified the artifact‚Äôs checksums against the remote repositories to ensure their integrity. This effectively prevented using this repository for artifacts that were locally built and never published to a remote repository.</p>



<p>Now, you can ask Amper to consider the Maven local repository as a regular repository to resolve from so you can depend on your local artifacts. To add this repository, use the special <code>mavenLocal</code> URL like this:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">repositories:
¬†¬†- url: mavenLocal
¬†¬†¬†¬†resolve: true</pre>



<h2 class="wp-block-heading">IDE improvements</h2>



<h3 class="wp-block-heading">Adding dependencies from unresolved code</h3>



<p>When your code references a symbol from a library that your existing sources don‚Äôt currently depend on, you can now use a quick-fix to add the relevant dependency.</p>



<p>You might recall from our <a href="https://blog.jetbrains.com/amper/2025/05/amper-update-may-2025/#adding-dependencies-for-unresolved-references">previous blog post</a> that we added this quick-fix in 0.7.0, but back then it only allowed users to add dependencies on local modules. Now, this feature also works for third-party maven dependencies that are already used in another module of your project:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/add-dependency-qf-coroutines.mov"></video></figure>



<p>For some specific symbols, it even works if the corresponding library isn&#8217;t in your project at all (we&#8217;ll support more in the future!):</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/add-dependency-qf-spring.mov"></video></figure>



<h3 class="wp-block-heading">Add Spring starter dependencies from inlay hints</h3>



<p>After enabling Spring Boot with <code>springBoot: enabled</code>, the <code>dependencies</code> section of the module file now offers a link to add the Spring Boot starters you may need:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/spring-starters-hint.mp4"></video></figure>



<h3 class="wp-block-heading">Updated <em>New Directory</em> popup</h3>



<p>When creating new directories in a new Amper module, you can now choose from several predefined options depending on your platforms:</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img decoding="async" width="520" height="467" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/new-directory-popup.png" alt="" class="wp-image-644617" style="aspect-ratio:1.113490364025696;object-fit:cover;width:340px" /></figure>



<h2 class="wp-block-heading">CLI improvements</h2>



<h3 class="wp-block-heading">Dependency insights</h3>



<p>A new CLI command, <code>./amper show dependencies</code>, allows you to view the dependency graph of a module:</p>



<figure class="wp-block-video"><video autoplay controls loop muted src="https://blog.jetbrains.com/wp-content/uploads/2025/09/show-dependencies-1.mp4"></video></figure>



<h3 class="wp-block-heading">Custom working directory in ./amper run</h3>



<p>When using <code>./amper run</code>, Amper now respects your current working directory by default, even if you specify <code>--root my/project/is/elsewhere</code>.</p>



<p>You can also choose to run your applications in any working directory with the new CLI option <code>--working-dir</code>.</p>



<h3 class="wp-block-heading">Removal of Gradle-based Amper</h3>



<p>Amper used to be available as a Gradle plugin, where it acted as a fa√ßade that allowed configuring the project with Amper files while still running the build with Gradle.</p>



<p>As was <a href="https://blog.jetbrains.com/amper/2025/05/amper-update-may-2025/#the-future-of-standalone-amper-and-gradle-based-amper">announced previously</a>, we are phasing out Gradle-based Amper. The last release of Amper as a Gradle plugin was 0.7.0, and there will be no further releases of this plugin in this form.</p>



<p>We are aware that Gradle-based Amper allows users to integrate with plugins or to configure their builds in ways that are not yet possible in the standalone version of Amper. This is why one of our highest priorities is to provide a prototype of Amper extensibility to enable more use cases. We‚Äôre also striving to cover the most important use cases directly out of the box. If something you need is not supported yet, feel free to share your suggestions in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack‚Äôs #amper channel</a> or open a <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noopener">YouTrack issue</a>.</p>



<h2 class="wp-block-heading">Updated default versions</h2>



<p>We updated our default versions for toolchains and frameworks:</p>



<ul>
<li>Kotlin 2.2.10</li>



<li>KSP 2.2.10-2.0.2</li>



<li><code>kotlinx.serialization</code> 1.9.0</li>



<li>Ktor 3.2.3</li>



<li>Spring Boot 3.5.5</li>



<li>Compose 1.8.2</li>



<li>Android API level 36</li>
</ul>



<h2 class="wp-block-heading">Try Amper 0.8.0</h2>



<p>To update an existing project, use the update command:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">./amper update</pre>



<p>To get started with Amper, take a look at the <a href="https://github.com/JetBrains/amper/tree/HEAD/examples" target="_blank" rel="noopener">sample projects</a> in the repository.</p>



<p>To enjoy full support for the latest Amper features, use <a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener">IntelliJ IDEA 2025.3 EAP</a> (or newer).</p>


    <div class="buttons">
        <div class="buttons__row">
                                                <a href="https://github.com/JetBrains/amper" class="btn" target="" rel="noopener">Try Amper</a>
                                                    </div>
    </div>







<h2 class="wp-block-heading">Share your feedback</h2>



<p>Amper is still experimental and under active development. You can provide feedback about your experience by joining the discussion in the <a href="https://slack-chats.kotlinlang.org/c/amper" target="_blank" rel="noopener">Kotlinlang Slack‚Äôs #amper channel</a> or sharing your suggestions and ideas in a <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noopener">YouTrack issue</a>. Your input and use cases help shape the future of Amper!</p>



<h2 class="wp-block-heading">What‚Äôs next?</h2>



<h3 class="wp-block-heading">Extensibility prototype</h3>



<p>We‚Äôre actively working on our prototype for Amper‚Äôs extensibility and are almost done with the first iteration. In the next release, you‚Äôll be able to try implementing your own local plugin.</p>



<h3 class="wp-block-heading">Libraries publication</h3>



<p>We know that Maven publication is a critical missing feature for library authors, and we‚Äôve heeded your requests. The publication of JVM libraries to Maven repositories has been unofficially supported for some time (and used to publish Amper itself!), but we are working on providing official support for this.</p>



<p>We will also work on streamlining Maven Central publication out of the box and plan to add support for multiplatform libraries publication.</p>
]]></content:encoded>
					
		
		
		<media:content url="https://blog.jetbrains.com/wp-content/uploads/2024/02/amper_vc_1.mp4" medium="video" width="1600" height="1000">
			<media:player url="https://blog.jetbrains.com/wp-content/uploads/2024/02/amper_vc_1.mp4" />
			<media:title type="plain">Amper | The Amper Blog</media:title>
			<media:description type="html"><![CDATA[Amper 0.8.0 is out, with Compose Hot Reload, a customizable Kotlin compiler version, new JavaScript and Wasm platforms, and many other improvements to both the IDE and CLI experience. Read on for all of the details, and see the release notes for the full list of changes and bug fixes.]]></media:description>
			<media:thumbnail url="https://blog.jetbrains.com/wp-content/uploads/2025/05/AMP-social-BlogFeatured-2560x1440-1.png" />
			<media:rating scheme="urn:simple">nonadult</media:rating>
		</media:content>
	</item>
		<item>
		<title>Koog √ó A2A: Building Connected AI Agents in Kotlin</title>
		<link>https://blog.jetbrains.com/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</link>
		
		<dc:creator><![CDATA[Andrey Bragin]]></dc:creator>
		<pubDate>Thu, 02 Oct 2025 14:48:45 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/Blog-Featured-1280x720-2-1.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[ai-agents]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=ai&#038;p=645319</guid>

					<description><![CDATA[If you‚Äôve ever tried building a system of multiple AI agents, you‚Äôve probably run into the problem. It starts simple enough: You‚Äôve got one agent writing blog posts, another proofreading them, and maybe a third suggesting or generating images. Individually, they‚Äôre effective. But getting them to work together? That&#8217;s where things might start falling apart. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>If you‚Äôve ever tried building a system of multiple AI agents, you‚Äôve probably run into <em>the problem</em>. It starts simple enough: You‚Äôve got one agent writing blog posts, another proofreading them, and maybe a third suggesting or generating images. Individually, they‚Äôre effective. But getting them to work together? That&#8217;s where things might start falling apart.</p>



<p>Each agent speaks its own &#8220;language&#8221;: One uses a different API interface, another has its own message format, and they all might come with specific authentication requirements. Making them communicate means writing custom integration code for every single connection. Instead of focusing on making your agents smarter, faster, or more useful, you&#8217;re stuck building bridges between them.</p>



<h2 class="wp-block-heading">What A2A does: The cross-agent communication layer</h2>



<p><strong>This is where the </strong><a href="https://a2a-protocol.org/latest/" target="_blank" rel="noopener"><strong>Agent2Agent (A2A) Protocol</strong></a><strong> takes over.</strong></p>



<p>With A2A, your agents can communicate directly through a standardized protocol, working as a universal translator for your AI ecosystem. Your blog-writing agent seamlessly passes content to your proofreader, which triggers your image generator, while the proofreader loops back with corrections and the image generator requests style clarifications. All orchestrated through a single, unified communication layer.</p>



<p>Instead of managing dozens of point-to-point connections, A2A provides:</p>



<ul>
<li><strong>Plug-and-play connectivity</strong>: Agents automatically discover and connect with each other.</li>



<li><strong>Standardized messaging</strong>: Unified format, clear protocol, and zero translation headaches.</li>



<li><strong>Built-in orchestration:</strong> Define workflows once, and let A2A handle the coordination.</li>



<li><strong>Scalability without complexity</strong>: Add or reuse agents without rewriting existing connections.</li>
</ul>



<p>What is the result? You spend time improving your agents&#8217; capabilities, not debugging their conversations. And the best part ‚Äì you can implement your agents using any language or framework you like. For JVM users, Koog is a top choice, and as of version 0.5.0, it integrates seamlessly with the A2A ecosystem.</p>



<h2 class="wp-block-heading">What Koog does: The internal orchestration engine</h2>



<p><a href="https://www.jetbrains.com/koog/" target="_blank" rel="noopener">Koog</a> is a Kotlin-based framework for building AI agents targeting JVM, Android, iOS, WebAssembly, and in-browser applications. It excels at:</p>



<ul>
<li><strong>Complex workflow management</strong>: Design graph-based strategies with support for loops, branches, fallbacks, and parallel branch execution.</li>



<li><strong>Ready-to-use components</strong>: Benefit from its built-in nodes for calling LLMs and external tools, summarizing message history, and executing entire strategies.</li>



<li><strong>Tool orchestration</strong>: Turn any function in your code into a tool your AI agent can use, whether sequentially or even in parallel</li>



<li><strong>Native MCP integration</strong>: Connect seamlessly to any MCP server using the Kotlin MCP SDK.</li>



<li><strong>Memory and storage support</strong>: Built-in support for agent memory and RAG (retrieval-augmented generation) workflows with efficient context management.</li>



<li><strong>Fault tolerance</strong>: Built-in retries, checkpointing, recovery mechanisms, and state persistence to ensure reliable execution.</li>



<li><strong>Observability</strong>: Full agent event handling, logging, and support for OpenTelemetry with built-in integrations with Langfuse and W&amp;B Weave.</li>
</ul>



<p>In short, Koog is great for building reliable AI agents.</p>



<h2 class="wp-block-heading">Why pair Koog with A2A</h2>



<p>Koog and A2A cover different layers of the AI agent stack. When used together, they complement each other and fill the gaps.</p>



<p><strong>Koog already handles the hardest parts </strong>of AI orchestration needed for real-world enterprise use.</p>



<p><strong>A2A adds the missing piece: </strong>It enables your Koog agents to communicate with any other A2A-compatible agents in your ecosystem. Instead of building custom integrations for each external service, your Koog AI workflows can automatically discover and use other agents.</p>



<p><strong>The result is a perfect match</strong>: Koog‚Äôs advanced workflows become A2A tasks that any agent can request, while your Koog agents tap into the full power of the A2A ecosystem. And since Koog runs on backend, on-device, and in-browser environments, you can deliver inter-connected AI more broadly and effectively than ever before.</p>



<p>How is this possible? Let‚Äôs see!</p>



<h2 class="wp-block-heading">A2A protocol</h2>



<p>The A2A protocol defines the essential building blocks for agent-to-agent communication:</p>



<ul>
<li><strong>Agent discovery</strong> through standardized agent cards (JSON documents that describe capabilities).</li>



<li><strong>Message formats</strong> for requests and responses with consistent schemas.</li>



<li><strong>Task lifecycle</strong> management with clear states: submitted ‚Üí working ‚Üí completed/failed.</li>



<li><strong>Transport layers</strong> such as JSON-RPC, gRPC, and REST.</li>



<li><strong>Security schemes</strong> using standard OAuth2, API keys, and JWT tokens.</li>



<li><strong>Error handling</strong> with standardized error codes.</li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1008" height="752" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-50.png" alt="" class="wp-image-645498"/></figure>



<h3 class="wp-block-heading">Agent cards: Digital business cards</h3>



<p>Every agent in the A2A ecosystem publishes its capabilities through an &#8220;agent card&#8221; ‚Äì a standardized JSON file hosted at some URL, e.g. <em>/.well-known/agent-card.json</em>, on the agent&#8217;s domain. The agent card acts as a digital business card, allowing other agents to discover the services it provides.</p>



<p>An agent card typically contains:</p>



<ul>
<li><strong>Basic information: </strong>Such as agent name, description, and version.</li>



<li><strong>Skills</strong>: What the agent can do (e.g. draft documents, proofread text, analyze data, and generate images).</li>



<li><strong>Endpoints</strong>: How to reach the agent.&nbsp;</li>



<li><strong>Other optional information: </strong>Enabled capabilities, authentication, and more.</li>
</ul>



<p>This discovery mechanism eliminates the need for manual integration work. When an agent needs a specific skill, it simply checks the relevant agent card to understand how to interact with that service.</p>



<p>In Koog, agent cards are defined using Kotlin data classes:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentCard = AgentCard(
    name = "Blog Writer",
    description = "AI agent that creates high-quality blog posts and articles",
    url = "https://api.blog-writer.com/a2a/v1",
    version = "1.0.0",
    capabilities = AgentCapabilities(streaming = true),
    defaultInputModes = listOf("text/plain"),
    defaultOutputModes = listOf("text/markdown"),
    skills = listOf(
        AgentSkill(
            id = "write-post",
            name = "Blog Post Writing",
            description = "Generate engaging blog posts on any topic",
            tags = listOf("writing", "content", "blog"),
            examples = listOf("Write a post about AI trends")
        )
    )
)</pre>



<h3 class="wp-block-heading">Universal messaging: One simple pattern</h3>



<p>A2A uses a single, standardized message format for all inter-agent communication. This simplicity is powerful ‚Äì instead of learning dozens of different APIs, agents only need to understand one communication pattern.</p>



<p>Every interaction follows the same flow:</p>



<ol>
<li><strong>Send a message</strong> with the task request and parameters.</li>



<li><strong>Receive </strong>either immediate results or a task for tracking.</li>



<li><strong>Get updates</strong> via real-time channels for longer operations.</li>
</ol>



<p>This universal approach means adding new agent capabilities doesn&#8217;t require changing communication protocols. Whether you&#8217;re asking an agent to summarize text or generate a complex report, the message structure remains consistent.</p>



<p>In Koog, creating and sending a message is straightforward using already implemented objects and protocols:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val message = Message(
    role = Role.User,
    parts = listOf(
        TextPart("Write a blog post about the future of AI agents")
    ),
    contextId = "blog-project-456"
)

val request = Request(
    data = MessageSendParams(
        message = message,
        configuration = MessageConfiguration(
            blocking = false, // Get first response
            historyLength = 5 // Include context
        )
    )
)

val response = client.sendMessage(request)</pre>



<p>The message format supports rich content through different <em>Part</em> types, including TextPart for plain text content, FilePart for file attachments and DataPart for structured JSON data.</p>



<p>This unified structure means your Koog agents can seamlessly communicate with any A2A-compatible agent, whether it&#8217;s for text processing, file analysis, or complex data transformations.</p>



<h3 class="wp-block-heading">Task lifecycle: Smart workflows</h3>



<p>A2A intelligently manages different types of work based on complexity and duration:</p>



<p><strong>Immediate messages</strong>: Simple operations like text formatting or quick calculations return results directly in the AI‚Äôs response. No waiting, no tracking needed.</p>



<p><strong>Long-running tasks</strong>: Complex operations like document analysis or multi-step workflows are scheduled and return a task. The requesting agent can then monitor progress and retrieve the task results once ready.</p>



<p><strong>Real-time updates</strong>: For time-consuming operations, Server-Sent Events (SSE) provide live progress updates. This keeps agents informed without requiring constant polling.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class BlogWriterExecutor : AgentExecutor {
    override suspend fun execute(
        context: RequestContext&lt;MessageSendParams>,
        eventProcessor: SessionEventProcessor
    ) {
        val task = Task(
            contextId = context.contextId,
            status = TaskStatus(
                state = TaskState.Submitted,
                message = Message(
                    role = Role.Agent,
                    parts = listOf(TextPart("Blog writing request received")),
                    contextId = context.contextId,
    			taskId = context.taskId,
                )
            )
        )

        eventProcessor.sendTaskEvent(task)
	 ...
    }
}
</pre>



<h3 class="wp-block-heading">Built-in security: Industry standards only</h3>



<p>A2A doesn&#8217;t reinvent security. Instead, it relies on proven, widely-adopted standards like OAuth2, API keys, and standard HTTPS.</p>



<p>This approach means developers don&#8217;t need to learn new authentication schemes. If you understand modern web API security, you already understand A2A security. The system inherits all the tooling, best practices, and security audits that come with these established standards.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">"securitySchemes": {
   "google": {
       "openIdConnectUrl": "https://accounts.google.com/.well-known/openid-configuration",
       "type": "openIdConnect"
   }
}
</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class AuthorizedA2AServer(
    agentExecutor: AgentExecutor,
    agentCard: AgentCard,
    agentCardExtended: AgentCard? = null,
    taskStorage: TaskStorage = InMemoryTaskStorage(),
    messageStorage: MessageStorage = InMemoryMessageStorage(),
    private val authService: AuthService, // Service responsible for authentication
) : A2AServer(
    agentExecutor = agentExecutor,
    agentCard = agentCard,
    agentCardExtended = agentCardExtended,
    taskStorage = taskStorage,
    messageStorage = messageStorage,
) {

    private suspend fun authenticateAndAuthorize(
        ctx: ServerCallContext,
        requiredPermission: String
    ): AuthenticatedUser {
        val token = ctx.headers["Authorization"]?.firstOrNull()
            ?: throw A2AInvalidParamsException("Missing Authorization token")

        val user = authService.authenticate(token)
            ?: throw A2AInvalidParamsException("Invalid Authorization token")

        if (requiredPermission !in user.permissions) {
            throw A2AUnsupportedOperationException("Insufficient permissions")
        }

        return user
    }

   override suspend fun onSendMessage(
        request: Request&lt;MessageSendParams>,
        ctx: ServerCallContext
    ): Response&lt;CommunicationEvent> {
        val user = authenticateAndAuthorize(ctx, requiredPermission = "send_message")

        // Pass user data to the agent executor via context state
        val enrichedCtx = ctx.copy(
            state = ctx.state + (AuthStateKeys.USER to user)
        )

        // Delegate to parent implementation with enriched context
        return super.onSendMessage(request, enrichedCtx)
    }

   // the rest of wrapped A2A methods 
   // ...
}</pre>



<h2 class="wp-block-heading">How to integrate Koog agents with A2A</h2>



<p>The Koog framework comes with both the A2A client and server built right in. This means your Koog agents can seamlessly talk to other A2A-enabled agents while also making themselves discoverable to the outside world. Here&#8217;s a simple example demonstrating how you can implement this.</p>



<h3 class="wp-block-heading">How to wrap Koog agents into A2A servers</h3>



<p>First, define a strategy for the agent. Koog provides convenient converters (<em>toKoogMessage</em>, <em>toA2AMessage</em>) to seamlessly transform between Koog and A2A message formats, eliminating the need for manual serialization. Specialized nodes such as <em>nodeA2ASendMessage</em> handle the message exchange process, making communication workflows straightforward to implement:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun blogpostWritingStrategy() = strategy&lt;MessageSendParams, A2AMessage>("blogpost-writer-strategy") {
    val blogpostRequest by node&lt;MessageSendParams, A2AMessage> { input ->
        val userMessage = input.toKoogMessage().content

        llm.writeSession {
            user {
                +"Write a blogpost based on the user request"
                +xml {
                    tag("user_request") {
                        +userMessage
                    }
                }
            }

            requestLLM().toA2AMessage()
        }
    }

    val sendMessage by nodeA2ARespondMessage()

    nodeStart then blogpostRequest then sendMessage then nodeFinish
}</pre>



<p>Second, define the agent itself. Once you install the <em>A2AServer</em> feature, your agent becomes discoverable and accessible to others in the ecosystem, enabling the creation of sophisticated networks where specialized agents collaborate seamlessly.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun createBlogpostWritingAgent(
    requestContext: RequestContext&lt;MessageSendParams>,
    eventProcessor: SessionEventProcessor
): AIAgent&lt;MessageSendParams, A2AMessage> {
     // Get existing messages for the current conversation context
     val messageHistory = requestContext.messageStorage.getAll().map { it.toKoogMessage() }

     val agentConfig = AIAgentConfig(
        prompt = prompt("blogpost") {
            system("You are a blogpost writing agent")

            messages(messageHistory)
        },
        model = GoogleModels.Gemini2_5Flash,
        maxAgentIterations = 5
    )

    return agent = AIAgent&lt;FullWeatherForecastRequest, FullWeatherForecast>(
        promptExecutor = MultiLLMPromptExecutor(
            LLMProvider.Google to GoogleLLMClient(System.getenv("GOOGLE_API_KEY")),
        ),
        strategy = blogpostWritingStrategy(),
        agentConfig = agentConfig
    ) {
        install(A2AAgentServer) {
            this.context = requestContext
            this.eventProcessor = eventProcessor
        }

        handleEvents {
            onAgentFinished { ctx ->
                // Update current conversation context with response from the agent
                val resultMessge = ctx.result as A2AMessage
                requestContext.messageStorage.save(resultMessge)
            }
        }
    }
}</pre>



<p>Third, we need to wrap the agent into the executor and then define a server.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class BlogpostAgentExecutor : AgentExecutor {
    override suspend fun execute(
        context: RequestContext&lt;MessageSendParams>,
        eventProcessor: SessionEventProcessor
    ) {
        createBlogpostWritingAgent(context, eventProcessor)
            .run(context.params.message)
    }
}

val a2aServer = A2AServer(
    agentExecutor = BlogpostAgentExecutor(),
    agentCard = agentCard,
)</pre>



<p>The final step is to define a server transport and run the server.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val transport = HttpJSONRPCServerTransport(
    requestHandler = a2aServer
)

transport.start(
    engineFactory = Netty,
    port = 8080,
    path = "/a2a",
    wait = true,
    agentCard = agentCard,
    agentCardPath = A2AConsts.AGENT_CARD_WELL_KNOWN_PATH
)</pre>



<p>Now your agent is ready to handle requests!&nbsp;</p>



<h3 class="wp-block-heading">How to call other A2A-enabled agents from a Koog agent</h3>



<p>First, you need to configure an A2A client and connect it to fetch an Agent Card.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentUrl = "https://example.com"

val cardResolver = UrlAgentCardResolver(
    baseUrl = agentUrl,
    path = A2AConsts.AGENT_CARD_WELL_KNOWN_PATH,
)

val transport = HttpJSONRPCClientTransport(
    url = agentUrl,
)

val a2aClient = A2AClient(
    transport = transport,
    agentCardResolver = cardResolver
)

// Initialize client and fetch the card
a2aClient.connect()</pre>



<p>Then you can use <em>nodeA2ASendMessage </em>or <em>nodeA2ASendMessageStreaming</em> in your strategy to call these clients and receive a message<em> </em>or task response.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agentId = "agent_id"
val agent = AIAgent&lt;String, String>(
    promptExecutor = MultiLLMPromptExecutor(
        LLMProvider.Google to GoogleLLMClient(System.getenv("GOOGLE_API_KEY")),
    ),
    strategy = strategy&lt;String, String>("a2a") {
        val nodePrepareRequest by node&lt;String, A2AClientRequest&lt;MessageSendParams>> { input ->
            A2AClientRequest(
                agentId = agentId,
                callContext = ClientCallContext.Default,
                params = MessageSendParams(
                    message = A2AMessage(
                        messageId = Uuid.random().toString(),
                        role = Role.User,
                        parts = listOf(
                            TextPart(input)
                        )
                    )
                )
            )
        }
        val nodeA2A by nodeA2AClientSendMessage(agentId)
        
        val nodeProcessResponse by node&lt;CommunicationEvent, String> {
            // Process event
            when (it) {
                is A2AMessage -> it.parts
                    .filterIsInstance&lt;TextPart>()
                    .joinToString(separator = "\n") { it.text }
                
                is Task -> it.artifacts
                    .orEmpty()
                    .flatMap { it.parts }
                    .filterIsInstance&lt;TextPart>()
                    .joinToString(separator = "\n") { it.text }
            }
        }

        nodeStart then nodePrepareRequest then nodeA2A then nodeProcessResponse then nodeFinish

    },
    agentConfig = agentConfig
) {
   install(A2AAgentClient) {
        this.a2aClients = mapOf(agentId to client)
    }
}

agent.run("Write blog post about A2A and Koog integration")</pre>



<h2 class="wp-block-heading">Next steps</h2>



<p>To dive deeper into Koog and A2A, check out these useful materials:</p>



<p><a href="https://docs.koog.ai/" target="_blank" rel="noopener">Koog documentation</a></p>



<p><a href="https://a2a-protocol.org/latest/specification/" target="_blank" rel="noopener">A2A specification</a></p>



<p><a href="https://github.com/JetBrains/koog/tree/develop/examples/simple-examples/src/main/kotlin/ai/koog/agents/example/a2a" data-type="link" data-id="https://github.com/JetBrains/koog/tree/develop/examples/simple-examples/src/main/kotlin/ai/koog/agents/example/a2a" target="_blank" rel="noopener">Koog A2A examples</a></p>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[ko]]></code>
                        <url>https://blog.jetbrains.com/ko/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</url>
                    </language>
                                    <language>
                        <code><![CDATA[fr]]></code>
                        <url>https://blog.jetbrains.com/fr/ai/2025/10/koog-a2a-building-connected-ai-agents-in-kotlin/</url>
                    </language>
                	</item>
		<item>
		<title>The Kotlin AI Stack: Build AI Agents With Koog, Code Smarter With Junie, and More</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/</link>
		
		<dc:creator><![CDATA[Alyona Chernyaeva]]></dc:creator>
		<pubDate>Wed, 24 Sep 2025 08:26:32 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-1-2.png</featuredImage>		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=644363</guid>

					<description><![CDATA[AI is changing how we build software, and Kotlin is ready to meet that change by empowering developers to build AI-powered apps and by enhancing the developer experience through AI-based tools. This post explores both angles: the tools for developing AI-powered apps, both from JetBrains and from the community, and the ways Kotlin is evolving [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>AI is changing how we build software, and Kotlin is ready to meet that change by empowering developers to build AI-powered apps and by enhancing the developer experience through AI-based tools.</p>



<p>This post explores both angles: the tools for developing AI-powered apps, both from JetBrains and from the community, and the ways Kotlin is evolving to make development more productive by incorporating AI tools.</p>



<h3 class="wp-block-heading">Highlights</h3>



<ul>
<li>Koog ‚Äì A Kotlin-native framework for building and running AI agents.
<ul>
<li><a href="https://docs.koog.ai/" target="_blank" rel="noreferrer noopener">Try it out</a></li>
</ul>
</li>



<li>Junie ‚Äì The AI coding agent integrated into JetBrains IDEs (GitHub EAP available).
<ul>
<li><a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Try Junie in IDEs</a></li>



<li><a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">Join the Junie for GitHub EAP</a></li>
</ul>
</li>
</ul>



<h1 class="wp-block-heading">Using Kotlin to develop AI-powered apps</h1>



<p>Kotlin isn‚Äôt just well-suited for AI ‚Äì it‚Äôs already being used in large-scale AI systems. Deutsche Telekom, for example, used Kotlin to build <a href="https://youtu.be/mQhtLCMiUMA" target="_blank" rel="noreferrer noopener">one of Europe‚Äôs largest LLM-powered chatbots</a>. At JetBrains, we rely on Kotlin to build our entire AI stack. <a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Junie</a> and <a href="https://www.jetbrains.com/ai-assistant/" target="_blank" rel="noreferrer noopener">AI Assistant</a> in our IDEs, <a href="https://blog.jetbrains.com/ai/2025/05/meet-koog-empowering-kotlin-developers-to-build-ai-agents/" target="_blank" rel="noreferrer noopener">Koog</a> for agents, and <a href="https://kineto.dev/" target="_blank" rel="noreferrer noopener">Kineto</a> for no-code app creation are all written in Kotlin.</p>



<p>What makes Kotlin a strong fit for AI development is how naturally it supports everything from low-level model access to structured, multi-step agent logic. Let‚Äôs walk through what that looks like in practice.&nbsp;</p>



<h3 class="wp-block-heading"><strong>1. Starting simple: Calling AI models via SDKs</strong></h3>



<p>One of the simplest ways to integrate AI into your Kotlin app is by using the Java SDKs from OpenAI or Anthropic (which are both written in Kotlin under the hood). This gives you low-level access to models with full control over prompts, parameters, and data handling.</p>



<p>It‚Äôs perfect for experiments or building minimal AI features like a quick chatbot, summarizer, or code generator.</p>



<p>Here are some examples to explore:</p>



<p><strong>OpenAI SDK</strong></p>



<ul>
<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/openai/OpenAI%20Java%20SDK%20Overview.ipynb" target="_blank" rel="noreferrer noopener">OpenAI Java SDK Overview</a>.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/openai/OpenAI%20Image%20Recognition.ipynb" target="_blank" rel="noreferrer noopener">OpenAI Image Recognition</a>.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/projects/mcp/mcp-demo/composeApp/src/desktopMain/kotlin/io/github/devcrocod/MCPClient.kt" target="_blank" rel="noreferrer noopener">OpenAI SDK Integration With the MCP.<br></a></li>
</ul>



<p><strong>Anthropic SDK&nbsp;</strong></p>



<ul>
<li><a href="https://github.com/modelcontextprotocol/kotlin-sdk/blob/main/samples/kotlin-mcp-client/src/main/kotlin/io/modelcontextprotocol/sample/client/MCPClient.kt" target="_blank" rel="noreferrer noopener">Anthropic SDK Integration With the MCP</a>.</li>
</ul>



<h3 class="wp-block-heading"><strong>2. Leveling up: Using high-level libraries like Spring AI</strong></h3>



<p>When you want to move beyond raw API calls, Spring AI offers a smooth experience for Kotlin users.</p>



<p>It allows you to:</p>



<ul>
<li>Swap model providers with minimal effort.</li>



<li>Register Kotlin functions as AI tools.</li>



<li>Embed structured AI interactions directly into your application logic.</li>
</ul>



<p>This makes it easier to build useful features without getting bogged down in infrastructure details.&nbsp;</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1200" height="675" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-39.png" alt="Spring AI" class="wp-image-644376"/></figure>



<p>If you want to see it in action, check out these resources from the Kotlin-AI-Examples repository:</p>



<ul>
<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/spring-ai-examples" target="_blank" rel="noreferrer noopener">spring-ai-examples</a> includes classification, chat, and summarization use cases.</li>



<li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer noopener">springAI-demo</a> demonstrates how to fully integrate LLM responses into your application logic using Qdrant and OpenAI.</li>



<li><a href="https://kotlinlang.org/docs/spring-ai-guide.html" target="_blank" rel="noreferrer noopener">Build a Kotlin app with Spring AI (Tutorial)</a> walks you through the process of building a Kotlin app that answers questions based on documents stored in Qdrant</li>
</ul>



<p>Other options like <a href="https://docs.langchain4j.dev/tutorials/kotlin" target="_blank" rel="noreferrer noopener">LangChain4j</a> are also available, and you can find a Kotlin-based<a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j" target="_blank" rel="noreferrer noopener"> LangChain4j Spring Boot example</a> in the same repository.</p>



<h3 class="wp-block-heading"><strong>3. Standardizing: Exposing tools via the Model Context Protocol (MCP)</strong></h3>



<p>As your AI tools get more useful, you‚Äôll probably want to share them ‚Äì across agents, teams, or even apps. But how do you make sure they‚Äôre accessible, consistent, and easy to plug in?</p>



<p>That‚Äôs where the Model Context Protocol (MCP) comes in, and there‚Äôs an official <a href="https://github.com/modelcontextprotocol/kotlin-sdk" target="_blank" rel="noreferrer noopener">MCP Kotlin SDK </a>to help you implement it. The MCP is a standard that defines how agents can discover and use tools without custom integrations or glue code. With the MCP Kotlin SDK, you can expose your tools in a way that works seamlessly with any compliant agent. It‚Äôs a simple way to make your Kotlin code part of a larger, connected AI system.</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1200" height="675" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/image-38.png" alt="Kotlin MCP SDK" class="wp-image-644364"/></figure>



<p>Learn more:</p>



<ul>
<li><a href="https://modelcontextprotocol.io/quickstart/server#kotlin" target="_blank" rel="noreferrer noopener">Build an MCP server in Kotlin</a></li>



<li><a href="https://modelcontextprotocol.io/quickstart/client#kotlin" target="_blank" rel="noreferrer noopener">Build an MCP client in Kotlin</a></li>
</ul>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Model Context Protocol in Kotlin | Alexander Sysoev" width="500" height="281" src="https://www.youtube.com/embed/D3hCBrxJHLo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<h3 class="wp-block-heading"><strong>4. Using Koog: Building and running AI Agents in Kotlin</strong></h3>



<p>At the highest level, you may want to create <a href="https://www.anthropic.com/engineering/building-effective-agents" target="_blank" rel="noreferrer noopener">intelligent agents</a> ‚Äì systems that can reason, adapt, and use tools.</p>



<p>JetBrains has open-sourced Koog, the JVM‚Äôs most advanced AI framework and the first to bring full-scale agentic flows to backend, Android, and iOS. With Koog, you build agents that are observable, testable, and deployable anywhere Kotlin runs.</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Kickstarting AI Agent Development in Kotlin With Koog" width="500" height="281" src="https://www.youtube.com/embed/vysVNg4IuUo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<p>Koog provides:</p>



<ul>
<li>Persistence and checkpointing to resume agents exactly where they left off.</li>



<li>Observability via OpenTelemetry with Langfuse and W&amp;B Weave.</li>



<li>Structured output and typed streaming for predictable results and real-time UIs.</li>



<li>Smart retries and robust error handling at both workflow and client levels.<br></li>



<li>Drop-in integrations with Spring Boot and a new Ktor plugin.</li>



<li>Multi-model flexibility to swap or route tasks between LLMs without losing context.</li>



<li>MCP tool support, RAG, memory, and reusable graph-based strategies for designing advanced agent logic.</li>
</ul>



<p>Because Koog is Kotlin Multiplatform, your agents can run not just on the JVM but also on Android, JS/WasmJS, and iOS. Whether you&#8217;re prototyping a simple agent or building a more complex system with tools and memory, Koog gives you the flexibility to start small and have your project evolve as it grows.</p>



<p><a href="https://docs.koog.ai/" target="_blank" rel="noreferrer noopener">Try Koog</a>&nbsp;</p>



<p>Other agent frameworks are also emerging in the Kotlin ecosystem, including:</p>



<ul>
<li><a href="https://eclipse.dev/lmos/arc2/index.html" target="_blank" rel="noreferrer noopener">Arc</a> ‚Äì a custom agent framework developed by Deutsche Telekom for their LLM-powered chatbot.</li>



<li><a href="https://github.com/embabel" target="_blank" data-type="link" data-id="https://github.com/embabel" rel="noreferrer noopener">Embabel</a> ‚Äì an open-source Kotlin-based framework built on Spring and LangChain4j.</li>



<li><a href="https://sca.aliyun.com/en/ai/" target="_blank" rel="noreferrer noopener">Spring AI Alibaba</a> ‚Äì an extension of Spring AI focused on LLM tool orchestration.</li>
</ul>



<p>These options, each with different approaches and integrations, reflect the growing interest in using Kotlin to build agents.</p>



<h1 class="wp-block-heading">AI tooling for Kotlin</h1>



<p>While Kotlin is a powerful language for building AI systems, it&#8217;s also being supplemented by AI-based tools to make your development workflow faster and more enjoyable. To help you stay focused and in control, we‚Äôre integrating AI tools into your IDE experience.</p>



<h2 class="wp-block-heading">Junie: AI coding agent in JetBrains IDEs</h2>



<p>Junie is JetBrains‚Äô new AI coding agent. It can take care of your routine tasks, update complex parts of your project, or even fully take over some of them ‚Äì giving you more time to focus on the fun and creative parts of coding. And it works particularly well with Kotlin.</p>



<p>Unlike a generic tool for autocompletion, it handles structured tasks, which means it can:</p>



<ul>
<li>Build full features end to end (for example, a random talk generator for the KotlinConf app).</li>



<li>Plan architectural changes.</li>



<li>Execute tests.</li>



<li>Suggest improvements.</li>
</ul>



<p>JetBrains is also working on Junie‚Äôs ability to contribute code to open-source projects. It‚Äôs already <a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">available in GitHub</a> as part of an Early Access Program, where it can analyze issues, suggest fixes, and open pull requests. Join the waitlist to try it for free.</p>



<ul>
<li><a href="https://www.jetbrains.com/junie/" target="_blank" rel="noreferrer noopener">Try Junie in JetBrains IDEs</a></li>



<li><a href="https://www.jetbrains.com/junie-github/" target="_blank" rel="noreferrer noopener">Join the waitlist to try Junie on GitHub</a></li>
</ul>



<h3 class="wp-block-heading"><strong>Mellum: Now open source</strong></h3>



<p>Powering Junie is Mellum, JetBrains‚Äô in-house LLM for code, already in production and now open source. It powers code completion in JetBrains IDEs, and there‚Äôs a version of it fine-tuned specifically for Kotlin.&nbsp;</p>



<p>This means the Kotlin community can now experiment with, contribute to, and build their own custom tooling on top of Mellum.</p>



<ul>
<li><a href="https://huggingface.co/JetBrains/Mellum-4b-sft-kotlin" target="_blank" rel="noreferrer noopener">Get Mellum for Kotlin</a></li>
</ul>



<h1 class="wp-block-heading">Why Kotlin?</h1>



<p>In short, here‚Äôs what makes Kotlin a natural fit for both building with AI and being supported by it:</p>



<ul>
<li>Modern language features that make code clear, safe, and concise.</li>



<li>Seamless Java interop for accessing existing AI SDKs and libraries.</li>



<li>Multiplatform support for sharing logic between server-side, mobile, and web applications.</li>



<li>A growing ecosystem of Kotlin-native AI libraries and frameworks, including Koog, the MCP Kotlin SDK, and Spring AI integration.</li>



<li>An AI-powered development experience through JetBrains AI Assistant and Junie, which is integrated into IntelliJ IDEA and available via plugins in Android Studio</li>
</ul>



<h3 class="wp-block-heading"><strong>Other resources to read and watch</strong></h3>



<ul>
<li>üìñ <a href="https://kotlinlang.org/docs/kotlin-ai-apps-development-overview.html" target="_blank" rel="noreferrer noopener">Kotlin for AI-Powered App Development</a></li>



<li>üìñ <a href="https://blog.jetbrains.com/kotlin/2025/04/smarter-kotlin-development-with-jetbrains-ai-junie-and-ai-assistant-in-your-ide/" target="_blank" rel="noreferrer noopener">Smarter Kotlin Development With JetBrains AI: Junie and AI Assistant in IntelliJ IDEA</a></li>



<li>üé• <a href="https://www.youtube.com/watch?v=vDtnqQmiyck" target="_blank" rel="noreferrer noopener"><em>Building Smarter AI Agents With Koog</em></a><em> </em>|<em> </em>Vadim Brilliantov and Andrey Bragin</li>



<li>üé• <a href="https://youtu.be/NcAW-FZtpzk" target="_blank" rel="noreferrer noopener"><em>Kotlin and Spring: The modern server side stack</em></a> | Rod Johnson</li>



<li>üé• <a href="https://youtu.be/zBgb0z1pQkM" target="_blank" rel="noreferrer noopener"><em>From 0 to h-AI-ro: high-speed track to AI for Kotlin developers</em></a> | Urs Peter</li>



<li>üé•<em> </em><a href="https://youtu.be/D3hCBrxJHLo" target="_blank" rel="noreferrer noopener"><em>Model Context Protocol in Kotlin</em></a> | Alexander Sysoev</li>



<li>üé• <a href="https://youtu.be/hxEM5J6QfLY" target="_blank" rel="noreferrer noopener"><em>LangChain4j with Quarkus</em></a> | Max Rydahl Andersen and Konstantin Pavlov</li>



<li>üé• <a href="https://youtu.be/K2PN03AepC0" target="_blank" rel="noreferrer noopener"><em>Large Scale Changes with AI ‚Äì Migrating millions of lines of Java to Kotlin at Uber</em></a> | Ty Smith</li>



<li>üé•<a href="https://www.youtube.com/watch?v=434WFSiYj9k" target="_blank" rel="noreferrer noopener"><em>Kotlin&#8217;s Gamebit: LLM less AI for Board Games</em></a> | Dmytro Kurets</li>



<li>üé•<a href="https://www.youtube.com/watch?v=mQhtLCMiUMA" target="_blank" rel="noreferrer noopener"><em>Building an Agentic Platform with Kotlin: Powering one of Europe&#8217;s Largest LLM Bot</em></a> | Patrick Whelan</li>
</ul>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[ko]]></code>
                        <url>https://blog.jetbrains.com/ko/kotlin/2025/09/the-kotlin-ai-stack-build-ai-agents-with-koog-code-smarter-with-junie-and-more/</url>
                    </language>
                	</item>
		<item>
		<title>Ktor Roadmap and Previews</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/ktor-roadmap-2025/</link>
		
		<dc:creator><![CDATA[Simon Vergauwen]]></dc:creator>
		<pubDate>Tue, 23 Sep 2025 19:00:47 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-2x-2.png</featuredImage>		<product ><![CDATA[ktor]]></product>
		<category><![CDATA[ktor]]></category>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[release]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=644121</guid>

					<description><![CDATA[Like in previous years, we have been working on the Ktor roadmap, and we want to thank everyone for their contributions and feedback to help us prioritize our areas of development for Ktor! The OpenAPI and WebRTC support is already in preview since Ktor 3.3.0. Check out the What‚Äôs New section for a full overview [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Like in previous years, we have been working on the Ktor roadmap, and we want to thank everyone for their contributions and feedback to help us prioritize our areas of development for Ktor!</p>



<p>The OpenAPI and WebRTC support is already in preview since Ktor 3.3.0. Check out the <a href="https://ktor.io/docs/whats-new-330.html" data-type="link" data-id="https://ktor.io/docs/whats-new-330.html" target="_blank" rel="noopener">What‚Äôs New</a> section for a full overview of Ktor 3.3.0.</p>



<h2 class="wp-block-heading">üöÄ Get started with ktor</h2>



<p>Ready to explore Ktor? Start building your next project today with our interactive project generator at <a href="https://kotl.in/ixiien" target="_blank" rel="noopener">start.ktor.io</a>. Your feedback and contributions are always welcome!<br><br>üîó<a href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener"> Get Started With Ktor</a> | üì¢ Join the Community on<a href="https://www.reddit.com/r/ktor/" target="_blank" rel="noopener"> Reddit</a> and<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA.." target="_blank" rel="noopener"> Slack</a></p>



<div class="buttons">
        <div class="buttons__row">
            <a class="ek-link jb-download-button" title="Get Started With Ktor" href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener" data-test="blog-article-cta" data-cl="true">Get Started With Ktor</a>
         </div>
</div>



<h2 class="wp-block-heading">Ktor library improvement process</h2>



<p>The Ktor team is always looking for feedback, and therefore we fully develop everything in the open, including creating feature proposals similar to KEEPs but for Ktor. This is called KLIP, or Ktor library improvement process, and it can be found on <a href="https://github.com/ktorio/ktor-klip" target="_blank" rel="noopener">GitHub</a>. So keep an eye out for future proposals in case you‚Äôve missed it, and please provide any feedback you might have.</p>



<h2 class="wp-block-heading">(Open)API documentation</h2>



<p>API documentation, currently one of the most requested features, has gone into development. üéâ In Ktor 3.3.0, it was included in an early preview so you can provide early feedback. Check out the<a href="https://github.com/ktorio/ktor-klip/pull/3" target="_blank" rel="noopener"> OpenAPI KLIP</a> or the <a href="https://github.com/bjhham/open-api-eap-template" target="_blank" rel="noopener">Ktor OpenAPI Template project</a>.</p>



<p>Ktor can automatically provide an OpenAPI model from analyzing your code at compile-time, and can be set up in a simple way from Gradle. The <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noopener">Ktor Gradle Plugin</a> has a new openapi configuration which can be used to provide OpenAPI information and set up project-related configurations. The plugin currently only supports Kotlin 2.2.20. Additionally, you&#8217;ll need to add a Maven dependency for the <code>ktor-server-openapi</code> module, or <code>ktor-server-swagger</code> depending on your preference.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">plugins {
    kotlin(libs.plugins.kotlin)
    alias(libs.plugins.ktor)
}

ktor {
    @OptIn(OpenApiPreview::class)
    openapi {
        target = project.layout.projectDirectory.file("api.json")
        
        title = "My Service"
        summary = "What it does"
        description = "A longer description of the service"
        version = "1.0.0"        
        // contact, termsOfService, license...
    }
}

dependencies {
    implementation(libs.ktor.server.core)
    implementation(libs.ktor.server.openapi)
}</pre>



<p>}</p>



<p>To find out more about the api documentation support, check out <a href="https://github.com/ktorio/ktor-klip/pull/3" target="_blank" rel="noopener">the proposal</a> or try it yourself in your project using <a href="https://github.com/bjhham/open-api-eap-template" target="_blank" rel="noopener">the template project</a>.</p>



<h2 class="wp-block-heading">Service discovery</h2>



<p>In distributed systems, service discovery is a critical part of the distributed system. As servers become available, clients need to be able to discover them. The Service Discovery plugin eliminates the need to manually <em>register</em> the services, and <em>resolve</em> the client. The plugin offers a unified abstraction layer over popular discovery mechanisms (<a href="https://developer.hashicorp.com/consul" target="_blank" rel="noopener">Consul</a>, <a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a>, <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>, <a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">Eureka</a>) while offering both client-side and server-side discovery patterns. This allows you to configure service discovery in a way that&#8217;s idiomatic for Ktor and Kotlin.</p>



<p>In the example below, we configure the <code>ServiceDiscovery</code> plugin to automatically register our <code>sample-service</code> on port <code>8080</code> with the consul service registry on <code>localhost:8500</code>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">install(ServiceDiscovery) {
   consul {
      connection {
         host = "localhost"
         port = 8500
      }

      registration {
         serviceName = "sample-service"
         instanceId = "sample-service:$host:$port"
         port = 8080
      }
   }
}</pre>



<p>Another service needs to be able to communicate with the <code>sample-service</code>. In a distributed system, it doesn‚Äôt matter which instance we use, so we rely on the service registry to resolve the <code>serviceName</code> into a registered <code>instanceId</code>. The <code>HttpClient</code> <code>ServiceDiscovery</code> plugin allows us to conveniently do so.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val client = HttpClient {
    install(ServiceDiscovery) {
       consul {
          connection {
             host = "localhost"
             port = 8500
          }
       }
    }
}
client.get("service://sample-service")</pre>



<p>The <code>HttpClient</code> is configured with the <code>ServiceDiscovery</code> plugin connected to the same Consul service registry as our server example. Once configured, we can use <code>service://name</code> to resolve a service within our distributed system, which in this case is the <code>sample-service</code>.</p>



<p><br>To find out more about the service discovery support, check out <a href="https://github.com/ktorio/ktor-klip/pull/2" target="_blank" rel="noopener">the proposal</a>, and please share your feedback.</p>



<h2 class="wp-block-heading">WebRTC</h2>



<p>Real-time peer-to-peer communication is becoming increasingly useful for various applications, ranging from video calls to multiplayer and collaborative tools. We&#8217;re working on bringing WebRTC Client support to Ktor with a unified, multiplatform API that works seamlessly across browsers, Android, and potentially other platforms.</p>



<p>Signaling (WebSocket, HTTP, etc.) still manually needs to be managed but we&#8217;re focusing on making the peer-to-peer connection part as smooth as possible. Ktor 3.3.0 supports JS/Wasm and Android platforms, with more platforms like JVM, iOS, Native coming. Support for an experimental Rust-based WebRTC client is also planned. This could pave the way for integrating Rust components in other areas of Ktor. More details can be found in the <a href="https://github.com/ktorio/ktor-klip/pull/4" target="_blank" rel="noopener">KLIP</a>, or the full stack KMP <a href="https://github.com/ktorio/ktor-chat/" target="_blank" rel="noopener">Ktor Video Chat</a> example.</p>



<p>A <code>WebRtcClient</code> is created by providing the engine instance and configuring the platform-specific configuration similar to <code>HttpClient</code>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val jsClient = WebRtcClient(JsWebRtc) {
 defaultConnectionConfig = {
   iceServers = listOf(WebRtc.IceServer("stun:stun.l.google.com:19302"))
 }
}
val androidClient = WebRtcClient(AndroidWebRtc) {
 context = appContext // provide Android context
 defaultConnectionConfig = { /* Same default config*/ }
}</pre>



<p>WebRTC clients need to create an RTC peer-to-peer connection which they establish using the Interactive Connectivity Establishment (ICE). After the peers have connected, they can send and receive data from each other using the channels.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val jsConnection = jsClient.createPeerConnection()
jsConnection.addIceCandidate(WebRtc.IceCandidate(candidateString, sdpMid, sdpMLineIndex))
jsConnection.awaitIceGatheringComplete()


jsConnection.dataChannelEvents.collect { event ->
   when (event) {
     is Open -> println("Another peer opened a chanel: ${event.channel}")
     is Closed -> println("Data channel is closed")
     is Closing, is BufferedAmountLow, is Error -> println(event)
   }
}
</pre>



<p><br>To find out more about the WebRTC support check out <a href="https://github.com/ktorio/ktor-klip/pull/4" target="_blank" rel="noopener">the proposal</a>, and please share any feedback you may have.</p>



<h2 class="wp-block-heading">gRPC: powered by kotlinx-rpc</h2>



<p>gRPC support in Ktor is finally here! But with a catch. The kotlinx-rpc library is doing all the heavy lifting of bringing gRPC support to Ktor. kotlinx-rpc is dedicated to bringing you the best gRPC experience in Kotlin. Let&#8217;s define a new <code>GrpcService</code> in a <em>common module</em> and then use it on both the server side and client side.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Grpc
interface GrpcService {
    suspend fun sayHello(request: HelloRequest): HelloResponse
}</pre>



<p>Our server-side implementation might look like this, and we can register it in our Ktor <code>Application</code> using the <code>grpc</code> DSL.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">interface GrpcServiceImpl : MyService {
    suspend fun sayHello(request: HelloRequest): HelloResponse {
        return HelloResponse { content = "Hello, ${request.name}" }
    }
}

fun Application.installGrpc() = grpc {
    registerService&lt;MyService> { MyServiceImpl() }
}</pre>



<p>Depending on your use cases or existing systems, you might prefer working with <code>.proto</code> files instead. The <code>interface GrpcService</code> can also be defined from <code>.proto</code>, and it‚Äôll generate the same interface as above, allowing the same implementation and Ktor usage.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">syntax = "proto3";

package io.ktor;

service MyService {
  rpc sayHello(HelloRequest) returns (HelloResponse);
}</pre>



<p>You can also use generated messages from <code>.proto</code> files.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">message HelloRequest {
  string name = 1;
}

message HelloResponse {
  string content = 1;
}</pre>



<p>Alternatively, you can also use KotlinX‚Äôs <code>@Seriazable</code> or your preferred serialization techniques.<br><br>Support for Apple and Linux, beyond the JVM, is planned. Check out our <a href="https://github.com/Kotlin/kotlinx-rpc" target="_blank" rel="noopener">kotlinx-rpc</a> for more details.</p>



<h2 class="wp-block-heading">Koog integration</h2>



<p>The new Ktor Koog Plugin makes it easy for you to create agentic services with Ktor and Koog. It aims to provide a deep integration between Koog and Kotlin‚Äôs AI ecosystem.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun Application.module() {
    install(Koog)
    
    routing {
        get("/execute/{prompt}") {
            val prompt = call.parameters.getOrFail("prompt")
            val output = aiAgent(customStrategy(), GPT4_1, prompt)
            call.respond(HttpStatusCode.OK, output)
        }
    }
}</pre>



<h2 class="wp-block-heading">Dependency injection</h2>



<p>Dependency injection support was released earlier this year, as discussed in last year&#8217;s roadmap post. In the OpenAPI Documentation feature, we‚Äôre introducing a compiler plugin to Ktor to generate documentation at compile time. This is the perfect opportunity to further enhance our dependency injection support with compile-time verification and provide better support for other platforms.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun Application.dependencies() = dependencies {
   provide&lt;HikariDataSource> { hikariSource() }
   provide&lt;R2dbcDatabase> { exposed(get()) } 
   provide&lt;MyService>(::MyServiceImpl)
}</pre>



<h2 class="wp-block-heading"><strong>üöÄ </strong>&nbsp;Get started with Ktor 3.3.0</h2>



<p>Ready to explore Ktor 3.3.0? Start building your next project today with our interactive project generator at <a href="https://kotl.in/ixiien" target="_blank" rel="noopener">start.ktor.io</a>. Your feedback and contributions are always welcome!</p>



<p>We want to thank<a href="https://github.com/MarcusDunn" target="_blank" rel="noopener"> </a>everyone in the community for your support and feedback, as well as for reporting issues.</p>



<p>üîó<a href="https://ktor.io/docs/welcome.html" target="_blank" rel="noopener"> Get Started With Ktor</a> | üì¢ Join the Community on <a href="https://www.reddit.com/r/ktor/" target="_blank" rel="noopener">Reddit</a> and<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA.." target="_blank" rel="noopener"> Slack</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Compose Multiplatform 1.9.0 Released:¬†Compose Multiplatform for Web Goes Beta</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/</link>
		
		<dc:creator><![CDATA[Ekaterina Volodko]]></dc:creator>
		<pubDate>Mon, 22 Sep 2025 10:45:12 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/KT-social-BlogFeatured-1280x720-2x-1.png</featuredImage>		<category><![CDATA[multiplatform]]></category>
		<category><![CDATA[compose-for-web]]></category>
		<category><![CDATA[compose-multiplatform]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=621449</guid>

					<description><![CDATA[Compose Multiplatform for web, powered by Wasm, is now in Beta! This major milestone shows that Compose Multiplatform for web is no longer just experimental, but ready for real-world use by early adopters. This is more than a technical step forward. It‚Äôs a community achievement, made possible by feedback from early adopters of the Alpha [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><strong>Compose Multiplatform for web, powered by Wasm, is now in Beta! </strong>This major milestone shows that Compose Multiplatform for web is no longer just experimental, but ready for <strong>real-world use by early adopters</strong>.</p>



<p>This is more than a technical step forward. It‚Äôs a community achievement, made possible by feedback from early adopters of the Alpha version, the demos they built, and the contributions of open-source projects.</p>



<p>With the Beta release, you can now confidently <strong>bring your existing Compose skills and coding patterns to the web with minimal effort</strong>, creating new apps or extending ones from mobile and desktop.</p>



<p>Beyond Compose Multiplatform for web going Beta, the Compose Multiplatform 1.9.0 release also brings Android, iOS, and desktop improvements, showing that Compose Multiplatform is maturing into a truly unified UI framework.</p>



<h1 class="wp-block-heading">Bringing your Compose code and skills to the web</h1>



<p>With Compose Multiplatform, you can share most of your UI code and rely on the same Compose skills you already have from working on Android when building for the web ‚Äì no need to learn a new UI toolkit. Out of the box, you get:</p>



<ul>
<li><strong>Material 3 components</strong> for design fidelity, so your UI looks polished and modern.</li>



<li><strong>Adaptive layouts</strong> that resize seamlessly between different devices and screen sizes, with <strong>animations</strong> that make transitions feel smooth and natural.</li>



<li><strong>Browser navigation integration</strong> with forward and back buttons, deep links, and history.</li>



<li><strong>Support for system and browser preferences</strong>, like dark mode.</li>
</ul>



<p>You can easily bring your Compose experience to the browser and start building web apps quickly.</p>



<h1 class="wp-block-heading">Everything you need to build modern web apps</h1>



<p>Compose Multiplatform for web now includes everything you need to build beautiful, reliable UIs for real-world apps in the browser:</p>



<ul>
<li><strong>Core APIs that work on the web</strong>, available in common code.</li>



<li><strong>Interoperability with HTML</strong> for mixing Compose UI and native web elements.</li>



<li><strong>Type-safe navigation with deep linking</strong>.</li>



<li><strong>Fundamental accessibility support</strong> for assistive technologies.</li>



<li><strong>Cross-browser compatibility</strong>, including fallback for older browsers.</li>
</ul>



<p>Compose Multiplatform 1.9.0 ensures the core API surface implementation works on the web and introduces targeted improvements to accessibility and navigation, alongside a wide range of bug fixes and developer experience enhancements (see the <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" data-type="link" data-id="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">1.9.0 What‚Äôs New page</a> for details). With this Beta release of Compose Multiplatform for web, major APIs are stable enough for you to adopt them confidently, with minimal breaking changes expected in the future.</p>



<p>The foundation provided by this release is supported by a <strong>growing ecosystem of multiplatform libraries extending to the web</strong>. Many popular Kotlin libraries for networking, serialization, coroutines, and dependency injection already work across web platforms, and many community projects have already added support for Wasm. You can explore these in the official Kotlin Multiplatform catalog at<a href="https://klibs.io?utm_source=chatgpt.com" target="_blank" rel="noopener"> klibs.io</a>, where more and more libraries are being marked as web-ready all the time.</p>



<h1 class="wp-block-heading">Development tools for better productivity&nbsp;</h1>



<p>For developing web applications with Compose Multiplatform, you can use <strong>IntelliJ IDEA</strong> or <strong>Android Studio</strong> and you‚Äôll get the most benefits with the new <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform" target="_blank" rel="noopener">Kotlin Multiplatform plugin</a> installed.</p>



<p>In addition to macOS, the Kotlin Multiplatform plugin for IntelliJ IDEA is now available on <strong>Linux and Windows</strong>, providing the full set of features for web, Android, and desktop development. The only exceptions are iOS and macOS targets, which require Apple hardware due to system limitations. For Android Studio, Windows and Linux support will be added later.</p>



<p>With the Kotlin Multiplatform plugin, you can:</p>



<ul>
<li><strong>Create new projects with a web target</strong>, with shared or non-shared UIs, using the integrated project wizard.</li>



<li><strong>Run your apps in the browser right from the IDE</strong>, thanks to automatically created run configurations.</li>



<li><strong>Use gutter icons for web entry points</strong> to launch and debug your Compose apps instantly.</li>
</ul>



<p>In addition, you can:</p>



<ul>
<li><strong>Debug in the browser</strong> with custom formatters for a smoother experience in DevTools.</li>



<li><strong>Debug directly in IntelliJ IDEA Ultimate (2025.3 or later)</strong> with the JavaScript Debugger plugin. Note that currently <a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noopener">only an EAP version of 2025.3</a> is available.</li>
</ul>



<p>Together, these features make it easy to go from project setup to running and debugging your app ‚Äì all without leaving the IDE.</p>



<h1 class="wp-block-heading">Compose Multiplatform for web in action</h1>



<p>The <a href="https://play.kotl.in/compose" target="_blank" rel="noopener">Kotlin Playground</a> and the <a href="https://jetbrains.github.io/kotlinconf-app/" target="_blank" rel="noopener">KotlinConf app</a> are powerful examples of Compose Multiplatform for web in action, showing how you can bring Compose UIs directly into the browser.</p>



<p>Other demos worth exploring include:</p>



<ul>
<li><a href="https://github.com/fethij/Rijksmuseum" target="_blank" rel="noopener">Rijksmuseum Demo</a> ‚Äì Museum collections in a rich, interactive UI.</li>



<li><a href="https://zal.im/wasm/jetsnack/" target="_blank" rel="noopener">Jetsnack Wasm Demo</a> ‚Äì A playful sample e-commerce experience.</li>



<li><a href="https://terrakok.github.io/compose-material-3-gallery/" target="_blank" rel="noopener">Compose Material 3 Gallery</a> ‚Äì A showcase of Material 3 components built with Compose.</li>



<li><a href="https://kotlin.github.io/Storytale/" target="_blank" rel="noopener">Storytale</a> ‚Äì A storybook-style gallery for exploring, previewing, and sharing UI components.</li>
</ul>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1611" height="1024" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/web-apps.png" alt="" class="wp-image-623399"/></figure>



<p>These projects highlight the flexibility of Compose Multiplatform for web in use cases ranging from interactive prototypes to production-quality apps.</p>



<h1 class="wp-block-heading">Get started with Compose Multiplatform for web</h1>



<p>The easiest way to try Compose Multiplatform for web is with the <a href="https://play.kotl.in/compose" target="_blank" rel="noopener">Kotlin Playground</a>. It doesn‚Äôt require any installation or setup. Just open your browser and start writing UI code:</p>



<p align="center"><a class="ek-link jb-download-button" title="Try in the Kotlin Playground" href="https://play.kotl.in/compose" target="_blank" rel="noopener">Try in the Kotlin Playground</a></p>



<p>If you‚Äôd like to use Compose Multiplatform for web in your IDE, simply follow our step-by-step guide:</p>



<p align="center"><a class="ek-link jb-download-button" title="Try in your IDE" href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-create-first-app.html" target="_blank" rel="noopener">Try in your IDE</a></p>



<p>Looking for ideas about what to build?</p>



<ul>
<li><strong>Quickly build demos and prototypes</strong> ‚Äì Spin up interactive proof-of-concepts, internal tools, or small experiments. You can leverage your existing Compose skills for fast results, which makes this perfect for testing ideas with your team.<br></li>



<li><strong>Create UI component galleries</strong> ‚Äì Build living UI libraries in a storybook-style format, showcase reusable components, preview design systems, or share prototypes directly in the browser with no extra setup.</li>
</ul>



<h1 class="wp-block-heading">Influence the future of Compose Multiplatform for web</h1>



<p>Compose Multiplatform for web is now in Beta. We see this release as the foundation for broader adoption, and with your feedback we‚Äôll keep improving it on the path to a stable release.</p>



<p>Tell us what works well, what needs refinement, and what you‚Äôd like to see next. We‚Äôll work alongside the community to polish features, fix bugs, and make Compose Multiplatform for web more reliable and enjoyable to use.</p>



<p>Share your thoughts in the <a href="https://slack-chats.kotlinlang.org/c/compose-web" target="_blank" rel="noopener">#compose-web</a> and <a href="https://slack-chats.kotlinlang.org/c/compose" target="_blank" rel="noopener">#compose</a> channels of our Kotlin Slack workspace and help shape the future of multiplatform development.</p>



<h1 class="wp-block-heading">Compose Multiplatform beyond the web</h1>



<p>Compose Multiplatform 1.9.0 also brings improvements for iOS, desktop, and common code.</p>



<h3 class="wp-block-heading"><strong>iOS</strong></h3>



<p>You now have more control over performance and output. You can configure the frame rate to better balance smoothness and battery life, and also have the ability to customize text input behavior, which makes Compose apps feel more natural on iOS.&nbsp;</p>



<h3 class="wp-block-heading"><strong>Desktop</strong></h3>



<p>Desktop apps gain new window management features, including the ability to configure windows before they appear, making it easier to manage multiple windows or custom layouts.</p>



<h3 class="wp-block-heading"><strong>All platforms</strong></h3>



<p>For every target, the design and preview experience is becoming more powerful. Variation testing has been simplified thanks to more configurable previews, while deeper shadow customization gives you finer control over UI depth and style.</p>



<p>See the full list of Compose Multiplatform 1.9.0 updates on our <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">What‚Äôs new page</a>.</p>



<h2 class="wp-block-heading">Read more</h2>



<ul>
<li><a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.9.0" target="_blank" rel="noopener">Compose Multiplatform 1.9.0</a> ‚Äì release notes on GitHub</li>



<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-190.html" target="_blank" rel="noopener">What‚Äôs new in Compose Multiplatform 1.9.0</a> ‚Äì detailed release notes on the documentation portal</li>



<li><a href="https://jb.gg/e03vhv" target="_blank" rel="noopener">Get started with Compose Multiplatform</a> ‚Äì a tutorial</li>



<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-and-jetpack-compose.html" target="_blank" rel="noopener">Compose Multiplatform and Jetpack Compose</a></li>
</ul>
]]></content:encoded>
					
		
		
		                    <language>
                        <code><![CDATA[zh-hans]]></code>
                        <url>https://blog.jetbrains.com/zh-hans/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/</url>
                    </language>
                	</item>
		<item>
		<title>Your Voice Belongs Here: Creating Compelling KotlinConf Proposals [Livestream]</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/creating-kotlinconf-proposals/</link>
		
		<dc:creator><![CDATA[Ksenia Shneyveys]]></dc:creator>
		<pubDate>Fri, 12 Sep 2025 16:57:17 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/Featured_Blog_1280x720.png</featuredImage>		<category><![CDATA[news]]></category>
		<category><![CDATA[kotlinconf]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=599668</guid>

					<description><![CDATA[Have you given a talk before ‚Äì maybe at a meetup, online event, or a smaller conference ‚Äì and wondered if you&#8217;re ready for a bigger stage like KotlinConf? This supportive and practical webinar is designed for people from underrepresented groups in tech who already have some speaking experience and are ready to level up. [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Have you given a talk before ‚Äì maybe at a meetup, online event, or a smaller conference ‚Äì and wondered if you&#8217;re ready for a bigger stage like KotlinConf?</p>



<p>This <a href="http://youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noreferrer noopener">supportive and practical webinar</a> is designed for people from underrepresented groups in tech who already have some speaking experience and are ready to level up. If you‚Äôre passionate about Kotlin and want to share your story, knowledge, or unique perspective with the wider community ‚Äì this is for you.</p>



<p>Hosted by Pamela Hill and Cheuk Ting Ho, two seasoned CFP writers, experienced speakers, and friendly faces from multiple program committees (including KotlinConf!), this session will cover:</p>



<ul>
<li>What makes a CFP stand out</li>



<li>How to shape your Kotlin journey into a strong proposal</li>



<li>What reviewers are really looking for</li>
</ul>



<div class="buttons">
        <div class="buttons__row">
            <a class="ek-link jb-download-button" title="Join us on October 14" href="youtube.com/watch?v=cTfHRUSDnS0" target="_blank" rel="noopener" data-test="blog-article-cta" data-cl="true">Join us on October 14</a>
         </div>
</div>



<p>This isn‚Äôt just a tutorial ‚Äì it‚Äôs a space to connect, gain confidence, and have a little fun while preparing to share your voice with the Kotlin world.</p>



<p>Let‚Äôs get your KotlinConf talk ready ‚Äì because your voice belongs here.</p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/Pamela-Hill-Web-Size-31-of-50.jpg" alt="Pamela Hill" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Pamela Hill</h4>
                                                <p><span style="font-weight: 400;">Pamela is a Developer Advocate for Kotlin Multiplatform at JetBrains and has more than 20 years of experience writing desktop, web, and mobile apps.</span><br />
<a href="https://x.com/pamelaahill" target="_blank">@pamelaahill</a></p>
                    </div>
                            </div>
        </div>
    </div>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img decoding="async" src="https://blog.jetbrains.com/wp-content/uploads/2025/09/CheukTingHo-Kimono.jpg" alt="Cheuk Ting Ho" loading="lazy">
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Cheuk Ting Ho</h4>
                                                <p><span style="font-weight: 400;">After her career as a Data Scientist and Developer Advocate, Cheuk dedicated her work to the open-source community. Currently, she is working as a developer advocate for JetBrains. She co-founded Humble Data, a beginner Python workshop that takes place around the world. She has served the EuroPython Society board for two years and is now a fellow and director of the Python Software Foundation.<br />
<a href="https://cheuk.dev/" target="_blank" rel="noopener">cheuk.dev</a><br />
</span></p>
                    </div>
                            </div>
        </div>
    </div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Kotlin 2.2.20 Released</title>
		<link>https://blog.jetbrains.com/kotlin/2025/09/kotlin-2-2-20-released/</link>
		
		<dc:creator><![CDATA[Sarah Haggarty]]></dc:creator>
		<pubDate>Wed, 10 Sep 2025 09:54:07 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/09/Kotlin-2.2.20.png</featuredImage>		<category><![CDATA[releases]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=597542</guid>

					<description><![CDATA[The Kotlin 2.2.20 release is out, delivering important changes for web development. Kotlin/Wasm is now Beta, with improvements to exception handling in JavaScript interop, npm dependency management, built-in browser debugging support, and a new shared source set for js and wasmJs targets. Additionally, here are some main highlights: For the complete list of changes, see [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>The Kotlin 2.2.20 release is out, delivering important changes for web development. Kotlin/Wasm is now Beta, with improvements to exception handling in JavaScript interop, npm dependency management, built-in browser debugging support, and a new shared source set for <code>js</code> and <code>wasmJs</code> targets. Additionally, here are some main highlights:</p>



<ul>
<li><strong>Kotlin Multiplatform</strong>: Swift export available by default, stable cross-platform compilation for Kotlin libraries, and a new approach for declaring common dependencies.</li>



<li><strong>Language</strong>: Improved overload resolution when passing lambdas to overloads with <code>suspend</code> function types.</li>



<li><strong>Kotlin/Native</strong>: Support for stack canaries in binaries and smaller binary size for release binaries.</li>



<li><strong>Kotlin/JS</strong>: <code>Long</code> values compiled into JavaScript <code>BigInt</code>.</li>
</ul>



<p>For the complete list of changes, see <a href="http://kotlinlang.org/docs/whatsnew2220.html" target="_blank" rel="noopener">What&#8217;s new in Kotlin 2.2.20</a> or the<a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.20" target="_blank" rel="noopener"> release notes on GitHub</a>.</p>



<h2 class="wp-block-heading">How to install Kotlin 2.2.20</h2>



<p>The Kotlin plugin is distributed as a bundled plugin in IntelliJ IDEA and Android Studio.</p>



<p>To update to the new Kotlin version, <a href="https://kotlinlang.org/docs/releases.html#update-to-a-new-kotlin-version" target="_blank" rel="noopener">change the Kotlin version</a> to 2.2.20 in your build scripts.</p>



<p>If you need the command-line compiler, download it from the <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.0" target="_blank" rel="noopener">GitHub release page</a>.</p>



<h3 class="wp-block-heading">If you run into any problems:</h3>



<ul>
<li>Find help on <a href="https://app.slack.com/client/T09229ZC6" target="_blank" rel="noopener">Slack</a> (<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noopener">get an invite</a>).</li>



<li>Report issues to our issue tracker, <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noopener">YouTrack</a>.</li>
</ul>



<p></p>



<div style="background-color: #f1f6fe; margin-bottom: 2px; padding: 5px; margin-right: 0%; text-align: left; min-height: px;">
<p>Stay up to date with the latest Kotlin features! Subscribe to receive Kotlin updates by filling out the form at the bottom of this post. &#x2b07;&#xfe0f;</p>
</div>



<h2 class="wp-block-heading">Special thanks to our EAP champions ü•áüëè</h2>



<ul>
<li><a target="_blank" href="https://bsky.app/profile/zacsweers.dev" rel="noreferrer noopener">Zac Sweers</a></li>



<li><a target="_blank" href="https://github.com/JesusMcCloud" rel="noreferrer noopener">Bernd Pr√ºnster</a></li>



<li><a target="_blank" href="https://github.com/dayanruben" rel="noreferrer noopener">Dayan Ruben</a></li>



<li><a target="_blank" href="https://github.com/rickclephas" rel="noreferrer noopener">Rick Clephas</a></li>



<li><a target="_blank" href="https://github.com/msotho" rel="noreferrer noopener">Sechaba</a></li>



<li><a target="_blank" href="https://x.com/noraltavir" rel="noreferrer noopener">Alexander Nozik</a></li>



<li><a target="_blank" href="https://github.com/BoD" rel="noreferrer noopener">Benoit Lubek</a></li>



<li><a target="_blank" href="https://github.com/jakewharton" rel="noreferrer noopener">Jake Wharton</a></li>



<li><a target="_blank" href="https://www.linkedin.com/in/johannessvensson/" rel="noreferrer noopener">Johannes Svensson</a></li>



<li><a target="_blank" href="https://github.com/lwasyl" rel="noreferrer noopener">≈Åukasz Wasylkowski</a></li>



<li><a target="_blank" href="https://github.com/HagamosVideojuegos" rel="noreferrer noopener">David Lopez</a></li>



<li><a target="_blank" href="https://github.com/molikuner" rel="noreferrer noopener">Florian Schreiber</a></li>



<li><a target="_blank" href="https://kotlinlang.slack.com/team/U03PLFM837A" rel="noreferrer noopener">Josh Stagg</a></li>



<li><a target="_blank" href="https://github.com/MohamedRejeb" rel="noreferrer noopener">Mohamed Rejeb</a></li>



<li><a target="_blank" href="https://github.com/buszi" rel="noreferrer noopener">Kacper Wojciechowski</a></li>



<li><a target="_blank" href="https://github.com/xiaobailong24" rel="noreferrer noopener">Yinlong xiaobai</a></li>
</ul>



<h2 class="wp-block-heading">Further reading</h2>



<ul>
<li><a href="https://kotlinlang.org/docs/whatsnew2220.html" target="_blank" rel="noopener">What&#8217;s new in Kotlin 2.2.20 documentation</a></li>



<li><a href="https://blog.jetbrains.com/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/" data-type="link" data-id="https://blog.jetbrains.com/kotlin/2025/09/compose-multiplatform-1-9-0-compose-for-web-beta/">Compose Multiplatform for web goes Beta</a></li>



<li><a href="https://kotlinlang.org/docs/whatsnew22.html" target="_blank" rel="noopener">What&#8217;s new in Kotlin 2.2.0 documentation</a></li>



<li><a href="https://blog.jetbrains.com/kotlin/2022/11/eap-champions/">Kotlin EAP Champions</a></li>
</ul>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>ICPC World Finals Livestream: ecnerwala and SecondThread Speed-Solving Kotlin Challenge</title>
		<link>https://blog.jetbrains.com/kotlin/2025/08/icpc-world-finals-livestream-ecnerwala-secondthread-kotlin/</link>
		
		<dc:creator><![CDATA[Ksenia Shneyveys]]></dc:creator>
		<pubDate>Fri, 29 Aug 2025 19:29:31 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/08/DSGN-23867-ICPC-World-Finals_Featured_Blog_1280x720.png</featuredImage>		<category><![CDATA[news]]></category>
		<category><![CDATA[competitive-programming]]></category>
		<category><![CDATA[icpc]]></category>
		<category><![CDATA[livestream]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=kotlin&#038;p=595459</guid>

					<description><![CDATA[Join us live from the ICPC World Finals in Baku, Azerbaijan, for a special event. This year, we are hosting a head-to-head match where two of the world‚Äôs top competitive programmers, Andrew ‚Äòecnerwala‚Äô He and David ‚ÄòSecondThread‚Äô Harmeyer, will speed-solve Kotlin problems in real time.&#160; Save the date: September 2, 2025, at 9:30 am UTC [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Join us live from the ICPC World Finals in Baku, Azerbaijan, for a special event. This year, we are hosting a head-to-head match where two of the world‚Äôs top competitive programmers, Andrew ‚Äòecnerwala‚Äô He and David ‚ÄòSecondThread‚Äô Harmeyer, will speed-solve Kotlin problems in real time.&nbsp;</p>



<p>Save the date: September 2, 2025, at 9:30 am UTC</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="ICPC World Finals" width="500" height="281" src="https://www.youtube.com/embed/nkSbIi42l9U?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div></figure>



<h3 class="wp-block-heading">About the competitors</h3>



<p><strong>Andrew ‚Äòecnerwala‚Äô He</strong></p>



<p>One of the most accomplished competitive programmers in the world, Andrew is a Codeforces Legendary Grandmaster, two-time IOI gold medalist, ICPC World Finals medalist, double Google Code Jam medalist, and Facebook Hacker Cup champion.</p>



<p><strong>David ‚ÄòSecondThread‚Äô Harmeyer</strong></p>



<p>David leads Meta‚Äôs Hacker Cup and is a long‚Äëtime judge and problem setter, as well as a Codeforces International Grandmaster, two‚Äëtime ICPC World Finals competitor, and competitive‚Äëprogramming YouTuber and ICPC Live interviewer.&nbsp;</p>



<h3 class="wp-block-heading">About the event</h3>



<p>The match will be hosted by <strong>Sebastian Aigner</strong>, Developer Advocate at JetBrains. He will open the stream with an introduction to the modern development ecosystem and Kotlin&#8217;s place in it, before handing the stage over to the competitors.</p>



<p>In the match, you‚Äôll see how top programmers approach challenges under time pressure, showing off their speed and precision, as well as Kotlin&#8217;s strengths as a language for problem-solving. Even if you‚Äôve never followed a coding competition before, watching Andrew and David is a great way to experience the excitement of problem-solving at the highest level.&nbsp;</p>



<div class="buttons">
        <div class="buttons__row">
            <a class="ek-link jb-download-button" title="Tune in to our livestream" href="https://www.youtube.com/watch?v=nkSbIi42l9U" target="_blank" rel="noopener" data-test="blog-article-cta" data-cl="true">Tune in to our livestream</a>
         </div>
</div>



<h3 class="wp-block-heading">The problem set and Kotlin Heroes</h3>



<p>The problem set will come from the <a href="https://codeforces.com/contests/2141,2142" target="_blank" rel="noopener">Kotlin Heroes: Episode 13</a> practice round, which will be released at the time of the livestream. The official Kotlin Heroes contest will follow on September 12. And if you feel inspired by the match between ecnerwala and SecondThread, you should sign up to take part!&nbsp;</p>



<p>A programming competition is more than just a contest ‚Äì it‚Äôs a showcase of creativity, mathematical thinking, and coding mastery. Kotlin Heroes in particular is a great opportunity for everyone to try problem-solving, explore the elegance of Kotlin‚Äôs concise syntax, and win prizes!</p>



<div class="buttons">
        <div class="buttons__row">
            <a class="ek-link jb-download-button" title="Join Kotlin Heroes" href="https://codeforces.com/contests/2141,2142" target="_blank" rel="noopener" data-test="blog-article-cta" data-cl="true">Join Kotlin Heroes</a>
         </div>
</div>



<p>To prepare for the event and brush up on Kotlin and competitive programming, check out our competitive programming <a href="https://kotlinlang.org/docs/competitive-programming.html" target="_blank" rel="noopener">tutorial</a> and <a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmyQA0l15nAfE1-pnu6fSvvG" target="_blank" rel="noopener">YouTube playlist</a>.</p>



<p>Don‚Äôt miss this rare occasion! Mark September 2, 9:30 am UTC on your calendar and join us live to see Kotlin in action at the ICPC World Finals.</p>



<p>See you soon!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Koog 0.4.0 Is Out: Observable, Predictable, and Deployable Anywhere You Build</title>
		<link>https://blog.jetbrains.com/ai/2025/08/koog-0-4-0-is-out-observable-predictable-and-deployable-anywhere-you-build/</link>
		
		<dc:creator><![CDATA[Vadim Briliantov]]></dc:creator>
		<pubDate>Thu, 28 Aug 2025 09:26:51 +0000</pubDate>
		<featuredImage>https://blog.jetbrains.com/wp-content/uploads/2025/08/JB-social-BlogFeatured-1280x720-2x-9.png</featuredImage>		<product ><![CDATA[kotlin]]></product>
		<category><![CDATA[news]]></category>
		<category><![CDATA[releases]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[ai-agents]]></category>
		<guid isPermaLink="false">https://blog.jetbrains.com/?post_type=ai&#038;p=594576</guid>

					<description><![CDATA[Featuring Langfuse and W&#38;B Weave Support, Ktor Integration, Native Structured Output, iOS Target, GPT-5, and More. Koog 0.3.0 was about making agents smarter and persistent. Koog 0.4.0 is about making them observable, seamlessly deployable in your stack, and more predictable in their outputs ‚Äì all while introducing support for new models and platforms. Read on [&#8230;]]]></description>
										<content:encoded><![CDATA[
<h2 class="‚Äúwp-block-heading‚Äù wp-block-heading" style=‚Äúfont-style:normal;font-weight:500;text-transform:none;color:#666666;‚Äú>Featuring Langfuse and W&amp;B Weave Support, Ktor Integration, Native Structured Output, iOS Target, GPT-5, and More.</h2>



<p><a href="https://blog.jetbrains.com/ai/2025/07/building-better-agents-what-s-new-in-koog-0-3-0/">Koog 0.3.0</a> was about making agents smarter and persistent. Koog 0.4.0 is about making them observable, seamlessly deployable in your stack, and more predictable in their outputs ‚Äì all while introducing support for new models and platforms.</p>



<p>Read on to discover the key highlights of this release and the pain points it is designed to address.</p>


<p align="center"><a class="jb-download-button" href="https://github.com/JetBrains/koog/" target="_blank" rel="noopener"><i class="download-icon"></i>Learn more</a></p>


<h2 class="wp-block-heading">üïµÔ∏è Observe what your agents do with OpenTelemetry support for W&amp;B Weave and Langfuse</h2>



<p>When something goes wrong with an agent in production, the first questions that pop up are ‚ÄúWhere did the tokens go?‚Äù and &#8220;Why is this happening?&#8221;. Koog 0.4.0 comes with full OpenTelemetry support for both <a href="https://wandb.ai/site/weave/" target="_blank" rel="noopener">W&amp;B Weave</a> and <a href="https://langfuse.com/" target="_blank" rel="noopener">Langfuse</a>.</p>



<p>Simply install the desired plugin on any agent and point it to your backend. You‚Äôll be able to see the nested agentic events (nodes, tool calls, LLM requests, and system prompts), along with token and cost breakdowns for each request. In Langfuse, you can also visualize how a run fans out and converges, which is perfect for debugging complex graphs.</p>



<p>W&amp;B Weave setup:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agent = AIAgent(
    ...
) {
    install(OpenTelemetry) {
        addWeaveExporter(
            weaveOtelBaseUrl = "WEAVE_TELEMETRY_URL",
            weaveApiKey = "WEAVE_API_KEY",
            weaveEntity = "WEAVE_ENTITY",
            weaveProjectName = "WEAVE_PROJECT_NAME"
        )
    }
}</pre>



<p>This will allow you to see the traces from your agent in W&amp;B Weave:</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="2893" height="1422" src="https://blog.jetbrains.com/wp-content/uploads/2025/08/Screenshot-2025-08-26-at-15.15.31.png" alt="" class="wp-image-594708"/></figure>



<p>Langfuse setup:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val agent = AIAgent(
    ...
) {
    install(OpenTelemetry) {
        addLangfuseExporter(
            langfuseUrl = "LANGFUSE_URL",
            langfusePublicKey = "LANGFUSE_PUBLIC_KEY",
            langfuseSecretKey = "LANGFUSE_SECRET_KEY"
        )
    }
}</pre>



<p>This allows you to see the agent traces and their graph visualisations in Langfuse:</p>



<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="2602" height="1544" src="https://blog.jetbrains.com/wp-content/uploads/2025/08/Screenshot-2025-08-26-at-16.33.56.png" alt="" class="wp-image-594719"/></figure>



<p>Once everything is connected, head to your observability tool to inspect traces, usage, and costs.</p>



<h2 class="wp-block-heading">üß© Drop-in Ktor integration to put Koog behind your API in minutes</h2>



<p>Already have a Ktor server? Perfect! Just install Koog as a Ktor plugin, configure providers in <code>application.conf</code> or <code>application.yaml</code>, and call agents from any route. No more connecting LLM clients across modules ‚Äì your routes just request an agent and are ready to go.</p>



<p>Now you can configure Koog in <code>application.yaml</code>:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">koog:
  openai.apikey: "$OPENAI_API_KEY:your-openai-api-key"
  anthropic.apikey: "$ANTHROPIC_API_KEY:your-anthropic-api-key"
  google.apikey: "$GOOGLE_API_KEY:your-google-api-key"
  openrouter.apikey: "$OPENROUTER_API_KEY:your-openrouter-api-key"
  deepseek.apikey: "$DEEPSEEK_API_KEY:your-deepseek-api-key"
  ollama.enabled: "$DEBUG:false"</pre>



<p>Or in code:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">fun Application.module() {
    install(Koog) {
        llm {
            openAI(apiKey = "your-openai-api-key")
            anthropic(apiKey = "your-anthropic-api-key")
            ollama { baseUrl = "http://localhost:11434" }
            google(apiKey = "your-google-api-key")
            openRouter(apiKey = "your-openrouter-api-key")
            deepSeek(apiKey = "your-deepseek-api-key")
        }
    }
}</pre>



<p>Next, you can use <code>aiAgent</code> anywhere in your routes:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">routing {
    route("/ai") {
        post("/chat") {
            val userInput = call.receive&lt;String>()
            val output = aiAgent(
                strategy = reActStrategy(),
                model = OpenAIModels.Chat.GPT4_1,
                input = userInput
            )
            call.respond(HttpStatusCode.OK, output)
        }
    }
}</pre>



<h2 class="wp-block-heading">üèõÔ∏è Structured output that actually holds up in production</h2>



<p>Calling an LLM and getting exactly the data format you need feels magical ‚Äì until it stops working and the magic dries up. Koog 0.4.0 adds native structured output (supported by some LLMs) with a lot of pragmatic guardrails like retries and fixing strategies.</p>



<p>When a model supports structured output, Koog uses it directly. Otherwise, Koog falls back to a tuned prompt and, if needed, retries with a fixing parser powered by a separate model until the payload looks exactly the way you need it to.</p>



<p>Define your schema once:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@Serializable
@LLMDescription("Weather forecast for a location")
data class WeatherForecast(
    @property:LLMDescription("Location name") val location: String,
    @property:LLMDescription("Temperature in Celsius") val temperature: Int,
    @property:LLMDescription("Weather conditions (e.g., sunny, cloudy, rainy)") val conditions: String
)</pre>



<p>You decide which approach fits your use case best. Request data from the model natively when supported, and through prompts when it isn‚Äôt:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val response = requestLLMStructured&lt;WeatherForecast>()</pre>



<p>You can add automatic fixing and examples to make it more resilient:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val weather = requestLLMStructured&lt;WeatherForecast>(
    fixingParser = StructureFixingParser(
        fixingModel = OpenAIModels.Chat.GPT4o,
        retries = 5
    ),
    examples = listOf(
        WeatherForecast("New York", 22, "cloudy"),
        WeatherForecast("Monaco", 29, "sunny")
    )
)</pre>



<h2 class="wp-block-heading">üëã Introducing the new Koog target ‚Äì iOS</h2>



<p>Koog is now available on iOS as part of our focus on Kotlin Multiplatform. Build your agent once and ship it to iOS, Android, and JVM backends ‚Äì all with the same strategy graphs, tests, and observability hooks. Note: Please use Koog version <code>0.4.1</code> to build for iOS.</p>



<h2 class="wp-block-heading">ü§î Tune how models think with GPT-5 and custom parameters</h2>



<p>Want your model to think harder on complex problems, or say less in chat-like flows? Version 0.4.0 adds GPT-5 support and custom LLM parameters, including settings like <code>reasoningEffort</code>, so you can balance quality, latency, and cost for each call.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val params = OpenAIChatParams(
    /* other params... */
    reasoningEffort = ReasoningEffort.HIGH
)
val prompt = prompt("test", params) {
    system("You are a mathematician")
    user("Solve the equation: x^2 - 1 = 2x")
}
openAIClient.execute(prompt, model = OpenAIModels.Chat.GPT5)</pre>



<h2 class="wp-block-heading">üîÑ Fail smarter ‚Äì production-grade retries for flaky calls and subgraphs</h2>



<p>It‚Äôs inevitable ‚Äì sometimes LLM calls time out, tools misbehave, or networks hiccup. Koog 0.4.0 introduces <code>RetryingLLMClient</code>, with <code>Conservative</code>, <code>Production</code>, and <code>Aggressive</code> presets, as well as fine-grained control when you need it:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val baseClient = OpenAILLMClient("API_KEY")
val resilientClient = RetryingLLMClient(
    delegate = baseClient,
    config = RetryConfig.PRODUCTION  // or CONSERVATIVE, AGGRESSIVE, DISABLED
)</pre>



<p>Because retries work best with feedback, you can wrap any action (even part of a strategy) in <code>subgraphWithRetry</code>, approve or reject results programmatically, and give the LLM targeted hints on each attempt:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">subgraphWithRetry(
    condition = { result ->
        if (result.isGood()) Approve
        else Reject(feedback = "Try again but think harder! $result looks off.")
    },
    maxRetries = 5
) {
    /* any actions here that you want to retry */
}</pre>



<h2 class="wp-block-heading">üì¶ Out-of-the-box DeepSeek support&nbsp;</h2>



<p>Prefer DeepSeek models? Koog now ships with a DeepSeek client that includes ready-to-use models:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">val client = DeepSeekLLMClient("API_KEY")
client.execute(
    prompt = prompt("for-deepseek") {
        system("You are a philosopher")
        user("What is the meaning of life, the universe, and everything?")
    },
    model = DeepSeekModels.DeepSeekReasoner
)</pre>



<p>As DeepSeek‚Äôs API and lineup of models continue to evolve, Koog gives you a simple and straightforward way to slot them into your agents.</p>



<h2 class="wp-block-heading">‚ú® Try Koog 0.4.0</h2>



<p>If you‚Äôre building agents that must be observable, deployable, predictable, and truly multiplatform, Koog 0.4.0 is the right choice. Explore the <a href="https://docs.koog.ai/" target="_blank" rel="noopener">docs</a>, connect OpenTelemetry to W&amp;B Weave or Langfuse, and drop Koog into your Ktor server to get an agent-ready backend in minutes.</p>



<h2 class="wp-block-heading">ü§ù Your contributions make the difference</h2>



<p>We‚Äôd like to take this opportunity to extend a huge thank-you to the entire community for contributing to the development of <a href="https://github.com/JetBrains/koog/" target="_blank" rel="noopener">Koog</a> through your feedback, issue reports, and pull requests!</p>



<p>Here‚Äôs a list of this release‚Äôs top contributors:</p>



<p><a href="https://github.com/nathanfallet" target="_blank" rel="noopener">Nathan Fallet</a> added support for the iOS target.</p>



<p><a href="https://github.com/ptitjes" target="_blank" rel="noopener">Didier Villevalois</a> ‚Äì added contextLength and maxOutputTokens to LLModel.</p>



<p><a href="https://github.com/ikss" target="_blank" rel="noopener">Sergey Kuznetsov</a> ‚Äì fixed URL generation in AzureOpenAIClientSettings.</p>



<p><a href="https://github.com/micahsmith" target="_blank" rel="noopener">Micah</a> ‚Äì added the missing Document capabilities for LLModel across providers.</p>



<p><a href="https://github.com/dev-jonghoonpark" target="_blank" rel="noopener">jonghoonpark</a> ‚Äì refined the NumberGuessingAgent example.</p>



<p><a href="https://github.com/gorpeliates" target="_blank" rel="noopener">Ate≈ü G√∂rpelioƒülu</a> helped with adding tool arguments to OpenTelemetry events</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
