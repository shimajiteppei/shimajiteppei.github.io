<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2025-10-15T16:05:07+00:00</updated>

    
    <entry>
        <title>Program management update — September 2025</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/10/14/program-management-update-2025-09/" type="text/html" title="Program management update — September 2025" />
        <published>2025-10-14T00:00:00+00:00</published>
        <updated>2025-10-14T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/10/14/program-management-update-2025-09/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/10/14/program-management-update-2025-09/">&lt;h1 id&#x3D;&quot;program-management-update-september-2025&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#program-management-update-september-2025&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Program management update — September 2025&lt;/h1&gt;
&lt;p&gt;As you may have noticed, the August PM update had a broader scope than earlier ones. It included a deeper dive into the reflection and variadic generics features and took the opportunity to describe the nature of the Leadership Council and the Foundation Project Director roles.&lt;/p&gt;
&lt;p&gt;I think it&#x27;s useful to share details on what&#x27;s happening throughout the broader Project in addition to the things I have personally done.&lt;/p&gt;
&lt;p&gt;Please &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#user/893815&quot;&gt;let me know&lt;/a&gt; whether this is indeed valuable to you, whether these updates should only focus on the direct PM work, or whether there&#x27;s anything else you&#x27;d like.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;leadership-council&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#leadership-council&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Leadership Council&lt;/h2&gt;
&lt;p&gt;The Council representatives have been selected. We have one new representative: &lt;a href&#x3D;&quot;https://github.com/Kobzol/&quot;&gt;Jakub Beránek&lt;/a&gt;. Jakub will represent the Infrastructure team.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/09/23/leadership-council-repr-selection/&quot;&gt;https://blog.rust-lang.org/inside-rust/2025/09/23/leadership-council-repr-selection/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id&#x3D;&quot;project-directors&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#project-directors&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Project Directors&lt;/h2&gt;
&lt;p&gt;The Foundation Project Director selection process has completed.&lt;/p&gt;
&lt;p&gt;I gathered all the nominations, verified that the nominees had accepted their nominations, and asked everyone to provide a statement for their candidacy.&lt;/p&gt;
&lt;p&gt;Those statements are listed in the &lt;a href&#x3D;&quot;https://hackmd.io/Q6PxtJhmQVOgN3RjTT3xqA&quot;&gt;Project Director Candidate Nominations 2025 hackmd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The elections were held on Friday, October 3rd, 2025, during which the Leadership Council selected the three new Project Directors in accordance with the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/policies/project-directorship/election-process.md&quot;&gt;election process&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;c-interop-at-rustconf&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#c-interop-at-rustconf&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
C++ Interop at RustConf&lt;/h2&gt;
&lt;p&gt;I did not travel to RustConf and haven&#x27;t participated live much, due to the sizable (9-hour) time difference.&lt;/p&gt;
&lt;p&gt;I did, however, remotely join the C++ interoperability session that Jon Bauman organized on 2025-09-02 and took notes while I was awake.&lt;/p&gt;
&lt;p&gt;There was an overview of the current tooling (bindgen, CXX, Zngur, Crubit); attendees talked about how they&#x27;re handling interop in their organizations and discussed the next steps to move the work forward.&lt;/p&gt;
&lt;p&gt;The &lt;a href&#x3D;&quot;https://hackmd.io/Ngoc6POlT4CywmocKh4MzQ&quot;&gt;notes are here&lt;/a&gt; and I&#x27;m writing a blog post to summarize what happened.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;kangrejos-2025&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#kangrejos-2025&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Kangrejos 2025&lt;/h2&gt;
&lt;p&gt;I attended &lt;a href&#x3D;&quot;https://kangrejos.com/&quot;&gt;Kangrejos, the annual Rust for Linux workshop in Spain, Oviedo&lt;/a&gt;. Rust for Linux is a project that aims at making Rust the second official language in the Linux kernel (C is the first one).&lt;/p&gt;
&lt;p&gt;This was an absolutely packed two-day event. The roughly thirty attendees were all sitting in the same room, had lunch in the same space, and went to dinner together.&lt;/p&gt;
&lt;p&gt;Miguel Ojeda told me this is by design — that way there&#x27;s a lot of opportunity for everyone to get to know everyone else even without lengthy and potentially awkward introduction sessions. Everyone learns about the various efforts going on, people can talk, share information, and collaborate.&lt;/p&gt;
&lt;p&gt;It was a really intense experience, but it worked as advertised. I ended up speaking with a good number of the attendees, learned a lot about what&#x27;s going on, and got to know the Rust for Linux team I&#x27;m working with.&lt;/p&gt;
&lt;p&gt;The attendees were a pretty diverse bunch. The majority were people working on various aspects of Rust for Linux, but we also had representatives from the Linux kernel (Greg KH who&#x27;s directly supporting the effort), LWN.net, Debian, and the Rust Project (Tyler Mandry and yours truly).&lt;/p&gt;
&lt;p&gt;The event consisted of a series of talks, presentations, and workshops — some to provide a status update, others to showcase a new tool or process. The event was intentionally not recorded or minuted so that everyone could speak freely and openly.&lt;/p&gt;
&lt;p&gt;To get a sense, you can see the &lt;a href&#x3D;&quot;https://kangrejos.com/2025&quot;&gt;topics and some of the slides on the Kangrejos 2025 page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some things I personally found interesting:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rust is already used in the mainline kernel:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-for-linux.com/drm-panic-qr-code-generator&quot;&gt;QR code panic generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-for-linux.com/nova-gpu-driver&quot;&gt;Nova (driver for NVIDIA GPUs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-for-linux.com/tyr-gpu-driver&quot;&gt;Tyr (driver for Arm Mali GPUs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... and more. You can see the full list at the &lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;Rust for Linux&lt;/a&gt; page under the &quot;Users — in mainline&quot; section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rust for Linux needs are beneficial to the evolution of the Rust language&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rust aims to be a low-level language that you can (among other things) write kernel code in. This is exactly what Rust for Linux is doing — in a large, well-established kernel at that.&lt;/p&gt;
&lt;p&gt;Any areas for improvement that RfL encounters will likely also benefit other low-level projects (kernels, embedded, filesystems, etc.).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://rust-for-linux.com/coccinelle-for-rust&quot;&gt;Coccinelle for Rust&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a tool that lets you describe transformations you want to make and then apply them across the code base.&lt;/p&gt;
&lt;p&gt;It supports relatively straightforward things such as renaming a function or reordering parameters. But it operates on AST level and lets you do things like turning:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-support z-macro z-rust&quot;&gt;info!&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;Window resized to: {}x{}&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; width&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; height&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-support z-macro z-rust&quot;&gt;info!&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;Window resized to: {width}x{height}&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;across the codebase. Across all such &lt;code&gt;format!&lt;/code&gt;-like invocations, parameters etc. And taking care to not interpolate field accesses or function calls (which are currently not allowed in the &quot;format strings&quot;).&lt;/p&gt;
&lt;p&gt;Tathagata Roy ran the workshop for us. We tested Coccinelle out on some pre-existing examples, including the one above. The evening after, I ran it on all my repos. I&#x27;m really excited about this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clippy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There was a really good status update on Clippy work specifically for Rust for Linux by Alejandra González. I had no idea that was happening, but it makes perfect sense. Clippy can highlight code that&#x27;s not desirable even if it&#x27;s allowed by the Rust compiler.&lt;/p&gt;
&lt;p&gt;Rust for Linux relies on these lints and their CI runs Clippy as well.&lt;/p&gt;
&lt;p&gt;Last year, Alejandra&#x27;s work made Clippy 40-60% faster.&lt;/p&gt;
&lt;p&gt;For next steps, she talked about getting first class support for Rust for Linux up to using Clippy&#x27;s CI to check the Rust for Linux codebase to highlight any potential breakage Clippy could cause.&lt;/p&gt;
&lt;p&gt;Alejandra also talked about making lint configuration stable. Some lints can &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy?tab&#x3D;readme-ov-file#configure-the-behavior-of-some-lints&quot;&gt;have their behavior changed via &lt;code&gt;clippy.toml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;This is currently unstable, but the Clippy team is working on a stabilization RFC.&lt;/p&gt;
&lt;p&gt;Miguel Ojeda stressed that the most important thing for Rust for Linux usage is to not show any false positives. When they enable a lint, they need to make sure that it only finds legitimate issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://github.com/rust-gcc/gccrs&quot;&gt;GCCRS: GCC Front-End For Rust&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pierre-Emmanuel Patry talked about an alternative implementation of the Rust compiler within the GNU compiler toolchain.&lt;/p&gt;
&lt;p&gt;This effort is valuable because it provides a completely separate compiler (which could for example compile rustc at some point and therefore bootstrap Rust). It can help specification efforts by highlighting areas where the compilers interpret things differently, which can then force a decision and have both compilers align on it, and provide Rust for people who either require the GNU toolchain or who would benefit from the platforms that are supported by GNU but not LLVM.&lt;/p&gt;
&lt;p&gt;The &quot;front-end&quot; here means that GCCRS reads Rust code and transforms it into an &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Intermediate_representation&quot;&gt;intermediate representation (IR)&lt;/a&gt; that GCC tooling turns into binary code, similar to how the Rust compiler outputs LLVM IR.&lt;/p&gt;
&lt;p&gt;Pierre-Emmanuel highlighted the difficulties of compiling even a &quot;simple&quot; &lt;code&gt;for&lt;/code&gt; loop: to do that you need to be able to resolve traits and handle iterators and macros.&lt;/p&gt;
&lt;p&gt;Their main target is to compile Rust&#x27;s &lt;a href&#x3D;&quot;https://doc.rust-lang.org/core/&quot;&gt;core library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that, they&#x27;ve set their sights on compiling the Linux kernel (including the Rust part). Linux can currently be built with either GCC or LLVM, but it is strongly recommended that everything use one or the other. This will be beneficial to some projects that are required to use the GCC toolchain.&lt;/p&gt;
&lt;p&gt;Interestingly, the main effort is not going into the borrow-checker at all. They&#x27;re using &lt;a href&#x3D;&quot;https://github.com/rust-lang/polonius&quot;&gt;Polonius&lt;/a&gt; right now and the compiler is only handling &lt;em&gt;correct&lt;/em&gt; Rust programs. In the future they&#x27;re looking to integrate the next-gen borrow checker, but that&#x27;s some ways off (and would require it being moved to its own crate).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;t-content&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#t-content&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
T-Content&lt;/h2&gt;
&lt;p&gt;Several members of the &lt;a href&#x3D;&quot;https://rust-lang.org/governance/teams/launching-pad/#team-content&quot;&gt;Content team&lt;/a&gt; attended RustConf and recorded several interviews there. The first of these, an interview with &lt;a href&#x3D;&quot;https://github.com/jdno&quot;&gt;Jan David Nose&lt;/a&gt; from the crates.io team, is up:&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;r7i-2wHtNjw&quot;&gt;https://www.youtube.com/watch?v&#x3D;r7i-2wHtNjw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two weeks later, Tyler Mandry and I worked with Miguel Ojeda (the Rust for Linux lead and Kangrejos organizer) to find time and space to interview people at Kangrejos.&lt;/p&gt;
&lt;p&gt;We&#x27;ve managed to record a few and after we edit them, we&#x27;ll start publishing them on the &lt;a href&#x3D;&quot;https://www.youtube.com/@RustVideos&quot;&gt;Rust YouTube channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This has been a fascinating experience. I&#x27;ve been (remotely) interviewed once, but I&#x27;ve never seen the behind the scenes. Mostly, I&#x27;ve helped Tyler get things set up and kept an eye on all the microphones and cameras to make sure everything was recording (one or our cameras had a silent 30 minute recording limit).&lt;/p&gt;
&lt;p&gt;But I did take the opportunity to step in front of the camera and interview one of the attendees. I was worried I was going to mess up and ruin the interview, but watching the raw footage, it seems to have turned out fine.&lt;/p&gt;
&lt;p&gt;I thought my role in the Content team would be mainly support and possibly in writing/publishing. But now I&#x27;m open to being part of the recording process as well. Especially if we&#x27;ll have more time to prepare ahead of time and won&#x27;t have to squeeze it between lunch and conference sessions :-).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;2025h2-goals&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#2025h2-goals&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
2025H2 Goals&lt;/h2&gt;
&lt;p&gt;Niko Matsakis opened the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3849&quot;&gt;RFC for Project goals for the second half of this year&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rémy (lqd) and I reviewed the RFC and followed up on the checklists — making sure that every required person checked their box (after helping to resolve their concerns).&lt;/p&gt;
&lt;p&gt;To make things easier, Niko plans to provide a page that always shows the current status of all goals. The idea is that each team would be able to review it periodically and see if e.g. there&#x27;s something they can do to get a goal unstuck.&lt;/p&gt;
&lt;p&gt;I will continue to write the regular updates and this should help with that work too. And I plan to set up a retrospective and see if there&#x27;s anything people would like to change.&lt;/p&gt;
&lt;p&gt;Niko introduced me to Nandini who&#x27;s a post-doc at Carnegie Mellon, researching how open source communities organize themselves. She started to conduct in-depth interviews with people from the Project about Goals specifically. That work is ongoing, but once it is complete, it will provide really valuable data.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;variadic-generics-micro-survey&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#variadic-generics-micro-survey&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Variadic generics micro survey&lt;/h2&gt;
&lt;p&gt;Finally, a follow-up on variadic generics.&lt;/p&gt;
&lt;p&gt;Olivier Faure &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/09/22/variadic-generics-micro-survey/&quot;&gt;announced a survey&lt;/a&gt; to gather information from the Rust ecosystem on how people work around the lack of variadic generics in Rust, which features are important to them and what they would use it for.&lt;/p&gt;
&lt;p&gt;Since the space of possibilities is vast, this will help us prioritize what the community needs most.&lt;/p&gt;
&lt;p&gt;If this is of interest to you — and especially if this is something you already had to work around — please fill out the survey:&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://www.surveyhero.com/c/rust-variadic-generics-survey&quot;&gt;https://www.surveyhero.com/c/rust-variadic-generics-survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The survey will be open until Monday, October 20th, 2025.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;stats&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stats&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stats&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Lighter than usual, because most regular meetings were canceled during RustConf and I&#x27;ve missed all the meetings during the Kangrejos week as well.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Total words of meeting minutes written: 169.9k (June - September).&lt;/p&gt;
&lt;p&gt;Meetings attended: 23&lt;/p&gt;
&lt;p&gt;Total words of meeting minutes written (September): 31.3k&lt;/p&gt;
&lt;p&gt;Average (mean) word count per team meeting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cargo: 1.9k&lt;/li&gt;
&lt;li&gt;Lang triage: 2.8k&lt;/li&gt;
&lt;li&gt;Libs-API: 4k&lt;/li&gt;
&lt;li&gt;Leadership council: 2.8k&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Tomas Sedovic</name>
        </author>
    </entry>
    <entry>
        <title>This Development-cycle in Cargo: 1.90</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/" type="text/html" title="This Development-cycle in Cargo: 1.90" />
        <published>2025-10-01T00:00:00+00:00</published>
        <updated>2025-10-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/">&lt;h1 id&#x3D;&quot;this-development-cycle-in-cargo-1-90&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#this-development-cycle-in-cargo-1-90&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
This Development-cycle in Cargo: 1.90&lt;/h1&gt;
&lt;p&gt;This is a summary of what has been happening around Cargo development for the last 6 weeks which is approximately the merge window for Rust 1.90 as well as highlights from 1.87, 1.88, 1.89.&lt;/p&gt;
&lt;!-- time period: 2025-02-20 through 2025-09-18 --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#plugin-of-the-cycle&quot;&gt;Plugin of the cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#implementation&quot;&gt;Implementation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#gsoc-alternative-design-for-cargo-fix&quot;&gt;GSoC: Alternative design for &lt;code&gt;cargo fix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#gsoc-prototype-a-new-set-of-cargo-plumbing-commands&quot;&gt;GSoC: Prototype a new set of Cargo &quot;plumbing&quot; commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#gsoc-build-script-delegation&quot;&gt;GSoC: Build script delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#target-host&quot;&gt;&lt;code&gt;--target host&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#annotate-snippets&quot;&gt;annotate-snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#design-discussions&quot;&gt;Design discussions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-xdg-paths&quot;&gt;All hands: XDG paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-cargo-linting&quot;&gt;All hands: cargo linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-doctests&quot;&gt;All hands: doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-code-gen-settings&quot;&gt;All hands: code-gen settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-cargo-explain&quot;&gt;All hands: &lt;code&gt;cargo explain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#cargo-doc-serve&quot;&gt;&lt;code&gt;cargo doc --serve&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#multi-line-messages-from-build-scripts&quot;&gt;Multi-line messages from build scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#forgetting-cargo-fmt-after-cargo-fix&quot;&gt;Forgetting &lt;code&gt;cargo fmt&lt;/code&gt; after &lt;code&gt;cargo fix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#recursively-find-dependencies-at-a-path&quot;&gt;Recursively find dependencies at a &lt;code&gt;path&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#include-workspace-license-files-with-cargo-new&quot;&gt;Include workspace license files with &lt;code&gt;cargo new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#misc&quot;&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#focus-areas-without-progress&quot;&gt;Focus areas without progress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;plugin-of-the-cycle&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#plugin-of-the-cycle&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Plugin of the cycle&lt;/h2&gt;
&lt;p&gt;Cargo can&#x27;t be everything to everyone,
if for no other reason than the compatibility guarantees it must uphold.
Plugins play an important part of the Cargo ecosystem and we want to celebrate them.&lt;/p&gt;
&lt;p&gt;Our plugin for this cycle is &lt;a href&#x3D;&quot;https://crates.io/crates/cargo-deny&quot;&gt;&lt;code&gt;cargo-deny&lt;/code&gt;&lt;/a&gt;,
a linter for Cargo.
A builtin linter for Cargo is being tracked in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/12235&quot;&gt;#12235&lt;/a&gt;
along with &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues?q&#x3D;is%3Aissue%20state%3Aopen%20label%3AA-new-lint&quot;&gt;ideas for lints&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href&#x3D;&quot;https://github.com/kpreid&quot;&gt;krpeid&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/Plugin.20of.20the.20Dev.20Cycle/near/420703211&quot;&gt;Please submit your suggestions for the next post.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id&#x3D;&quot;implementation&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#implementation&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Implementation&lt;/h2&gt;
&lt;h3 id&#x3D;&quot;gsoc-alternative-design-for-cargo-fix&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#gsoc-alternative-design-for-cargo-fix&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
GSoC: Alternative design for &lt;code&gt;cargo fix&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo fix&lt;/code&gt; will apply suggested fixes for lints
and has worked well for cleaning up sloppy code,
reducing the annoyance of toolchain upgrades where lints may change,
helping with Edition migrations,
and adopting of new lints in a code base.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;cargo fix&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can be slow (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13214&quot;&gt;#13214&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only applies a subset of possible lints&lt;/li&gt;
&lt;li&gt;Can&#x27;t be selective of which lints are fixed without a lot of mucking with &lt;code&gt;RUSTFLAGS&lt;/code&gt; which was important with the 2024 Edition migration because some lints still had a lot of false positives at first&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A problem with addressing these is the current architecture.
&lt;code&gt;cargo fix&lt;/code&gt; is implemented as a variant of &lt;code&gt;cargo check&lt;/code&gt; that replaces &lt;code&gt;rustc&lt;/code&gt; with &lt;code&gt;cargo&lt;/code&gt; being run in a special mode that will call &lt;code&gt;rustc&lt;/code&gt; in a loop, applying fixes until there are none.
While this special &lt;code&gt;rustc&lt;/code&gt;-proxy mode is running,
a cross-process lock is held to force only one build target to be fixed at a time to avoid race conditions.
This ensures correctness at the cost of performance and difficulty in making the &lt;code&gt;rustc&lt;/code&gt;-proxy interactive.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-fixit&quot;&gt;cargo-fixit&lt;/a&gt;
is a Proof of Concept for an alternative design,
developed by &lt;a href&#x3D;&quot;https://github.com/Pyr0de&quot;&gt;Pyr0de&lt;/a&gt;.
With this design,
&lt;code&gt;cargo fixit&lt;/code&gt; spawns &lt;code&gt;cargo check&lt;/code&gt; in a loop,
determining which build targets are safe to fix in this pass,
and applying the suggestions.
This puts the top-level program in charge of what fixes get applied,
making it easier to coordinate, allowing the locking to be removed and opening the door to an interactive mode.
This comes at the cost that fixes in packages lower in the dependency tree can cause later packages to rebuild multiple times,
slowing things down.&lt;/p&gt;
&lt;p&gt;Regarding performance,
cargo-fixit is &lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-fixit/blob/main/benchsuite/runs/2025-07-31-af6627c.md&quot;&gt;showing promising results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There remains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Investigations into whether other optimizations are safe (&lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-fixit/issues/52&quot;&gt;cargo-fixit#52&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-fixit/issues/21&quot;&gt;cargo-fixit#21&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Open questions on how the &lt;code&gt;cargo fix&lt;/code&gt; interface should be maintained with this new design (&lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-fixit/milestone/5&quot;&gt;stabilization issues&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Finish handling all of the remaining functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;gsoc-prototype-a-new-set-of-cargo-plumbing-commands&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#gsoc-prototype-a-new-set-of-cargo-plumbing-commands&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
GSoC: Prototype a new set of Cargo &quot;plumbing&quot; commands&lt;/h3&gt;
&lt;p&gt;We&#x27;ve had a &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-plumbing.html&quot;&gt;project goal for plumbing commands&lt;/a&gt;
for a while and
&lt;a href&#x3D;&quot;https://github.com/secona&quot;&gt;secona&lt;/a&gt; wrote &lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-plumbing&quot;&gt;cargo-plumbing&lt;/a&gt;
as a prototype.
The focus was on better understanding of what the plumbing commands can look like
and what is needed from Cargo.
Compromises had to be made in the actual result to not be blocked on what the Cargo Rust APIs currently allow
(&lt;a href&#x3D;&quot;https://github.com/crate-ci/cargo-plumbing/issues/82&quot;&gt;cargo-plumbing#82&lt;/a&gt;).
For example, instead of solely relying on the manifests that the user passed in,
the plumbing commands will re-read the manifests within each command,
preventing callers from being able to edit them to get specific behavior out of Cargo, e.g. dropping all workspace members to allow resolving dependencies on a per-package basis.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo-plumbing&lt;/code&gt; currently covers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locate-manifest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read-manifest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read-lockfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lock-dependencies&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write-lockfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolve-features&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plan-build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;gsoc-build-script-delegation&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#gsoc-build-script-delegation&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
GSoC: Build script delegation&lt;/h3&gt;
&lt;p&gt;Build scripts come at a compile time cost.
Even with &lt;code&gt;cargo check&lt;/code&gt;,
they must be built as if you ran &lt;code&gt;cargo build&lt;/code&gt; so they can be run.
While we need to identify ways to abstract common build script patterns
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/14948&quot;&gt;#14948&lt;/a&gt;),
that may not always be doable.
However, if we can shift build scripts from being defined in every package that needs the functionality into a couple of core build script packages,
we can reduce the number of build scripts that need to be built and linked.&lt;/p&gt;
&lt;p&gt;The first step in being able to delegate build scripts to packages
is to be able to have multiple build scripts which is what
&lt;a href&#x3D;&quot;https://github.com/namanlp&quot;&gt;namanlp&lt;/a&gt; has developed so far.&lt;/p&gt;
&lt;p&gt;You can have&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;package&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;build&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;windows-manifest.rs&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;release-info.rs&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and your package can access their &lt;code&gt;OUT_DIR&lt;/code&gt;s as &lt;code&gt;env!(&quot;windows-manifest_OUT_DIR&quot;)&lt;/code&gt; and &lt;code&gt;env!(&quot;release-info_OUTDIR&quot;)&lt;/code&gt;
(&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#metabuild&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The next phase is static parameters being defined in &lt;code&gt;Cargo.toml&lt;/code&gt;
and then specifying dependencies using &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#artifact-dependencies&quot;&gt;artifact-dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;target-host&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#target-host&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&lt;code&gt;--target host&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The following two commands are not equivalent:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;console&quot; class&#x3D;&quot;language-console z-code&quot;&gt;&lt;code class&#x3D;&quot;language-console&quot; data-lang&#x3D;&quot;console&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ cargo build
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ cargo build --target &#x60;rustc --print host-tuple&#x60;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While they both build for the host&#x27;s platform tuple,
the first is run in &quot;host mode&quot;
while the second is run in &quot;cross-compilation mode&quot;.
In &quot;host mode&quot;,
build scripts and proc-macros are built the same as binaries and tests, including &lt;code&gt;RUSTFLAGS&lt;/code&gt; being applied, and everything is output to &lt;code&gt;target/&amp;lt;profile&amp;gt;&lt;/code&gt;.
In &quot;cross-compilation mode&quot; with the host&#x27;s tuple,
everything still builds for the host&#x27;s tuple but &lt;code&gt;RUSTFLAGS&lt;/code&gt; are not passed to build scripts and proc-macros and everything is output to &lt;code&gt;target/&amp;lt;tuple&amp;gt;/&amp;lt;profile&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some challenges with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Naively, someone may run &lt;code&gt;cargo build&lt;/code&gt; for packaging artifacts for their current platform and &lt;code&gt;cargo --target &amp;lt;tuple&amp;gt;&lt;/code&gt; for packaging artifacts for other platforms and the difference in the artifact-dir causes confusion and frustration in automation.&lt;/li&gt;
&lt;li&gt;In some cross-compilation scenarios,
users also need to specify &lt;code&gt;RUSTFLAGS&lt;/code&gt; for their build scripts and proc-macros.&lt;/li&gt;
&lt;li&gt;When setting &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html#buildtarget&quot;&gt;&lt;code&gt;build.target&lt;/code&gt;&lt;/a&gt; to a specific platform tuple,
there wouldn&#x27;t be a way to set it back to the host without hard coding a specific host, whether host mode or cross-compilation mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#target-applies-to-host&quot;&gt;&lt;code&gt;target-applies-to-host&lt;/code&gt;&lt;/a&gt;
and
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#host-config&quot;&gt;&lt;code&gt;host-config&lt;/code&gt;&lt;/a&gt;
are unstable features that have tried to address this.&lt;/p&gt;
&lt;p&gt;In &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13051&quot;&gt;#13051&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/kpreid&quot;&gt;kpreid&lt;/a&gt;
suggested a related feature to &lt;code&gt;target-applies-to-host&lt;/code&gt;,
a platform-tuple placeholder where the following mean the same thing:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;console&quot; class&#x3D;&quot;language-console z-code&quot;&gt;&lt;code class&#x3D;&quot;language-console&quot; data-lang&#x3D;&quot;console&quot;&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ cargo build --target host
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;$ cargo build --target &#x60;rustc --print host-tuple&#x60;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A user could then opt-in to always being in &quot;cross-compilation&quot; mode by setting in &lt;code&gt;~/.cargo/config.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;build&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;target&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;host&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 2025-08-11 --&gt;
&lt;p&gt;When talking about this as a team,
one concern was where all this could apply.
For example, the following might not make sense:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;target&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;host&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;regex&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;1&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We decided the alias would only exist for &lt;code&gt;--target&lt;/code&gt; / &lt;code&gt;build.target&lt;/code&gt; for now.
We can evaluate where it makes sense to expand from there.&lt;/p&gt;
&lt;p&gt;Another issue was whether &lt;code&gt;host&lt;/code&gt; would work as a placeholder.
As we&#x27;d be carving out &lt;code&gt;host&lt;/code&gt; from possible values,
we&#x27;d need to know whether that is safe.
We checked with T-compiler at &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/channel/131828-t-compiler/topic/.60--target.3Dhost.60.20as.20alias.20to.20host.20triple.20in.20cargo/near/534227313&quot;&gt;#t-compiler &amp;gt; &#x60;--target&#x3D;host&#x60; as alias to host triple in cargo @ 💬&lt;/a&gt; and they were fine with it.
There is the question of whether &lt;code&gt;host&lt;/code&gt; is clear that this is a placeholder for the host tuple or if it could be confused with &quot;host mode&quot; and the unstable &lt;code&gt;[host]&lt;/code&gt; table for host builds.
One idea was to name it &lt;code&gt;{host}&lt;/code&gt;,
to make this an explicit variable substitution but weren&#x27;t thrilled with that, especially on the command-line.
For now, we&#x27;ve settled on &lt;code&gt;host-tuple&lt;/code&gt; though the stabilization discussion is still on-going.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;annotate-snippets&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#annotate-snippets&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
annotate-snippets&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Update from &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/03/26/this-development-cycle-in-cargo-1.78/#user-controlled-cargo-diagnostics&quot;&gt;1.78&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/Muscraft/&quot;&gt;Muscraft&lt;/a&gt; released annotate-snippets
&lt;a href&#x3D;&quot;https://github.com/rust-lang/annotate-snippets-rs/blob/master/CHANGELOG.md#0120---2025-08-28&quot;&gt;0.12&lt;/a&gt;
which includes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;swapping in rustc&#x27;s renderer and fixing many bugs&lt;/li&gt;
&lt;li&gt;API re-design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This release is in preparation for replacing rustc&#x27;s renderer with annotate-snippets.
At this point,
it appears that annotate-snippets is flexible enough and complete enough to handle all of rustc&#x27;s needs and the remaining issues are with rustc itself and the adapter between rustc and annotate-snippets.&lt;/p&gt;
&lt;p&gt;With annotate-snippets v0.12 out,
&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;epage&lt;/a&gt; started the effort to switch Cargo&#x27;s user messages over to it which is being tracked in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/15944&quot;&gt;#15944&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;design-discussions&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#design-discussions&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Design discussions&lt;/h2&gt;
&lt;h3 id&#x3D;&quot;all-hands-xdg-paths&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-xdg-paths&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All hands: XDG paths&lt;/h3&gt;
&lt;!-- https://hackmd.io/oA1Ek1fBQxiMkql6osYq6A --&gt;
&lt;p&gt;Cargo stores all of its user-wide content under &lt;code&gt;CARGO_HOME&lt;/code&gt;, usually &lt;code&gt;~/.cargo&lt;/code&gt;,
including configuration, caches, and locally built binaries.
There has been a long standing request to use the OS native paths for these,
particularly &lt;a href&#x3D;&quot;https://specifications.freedesktop.org/basedir-spec/latest/&quot;&gt;XDG Base Directories&lt;/a&gt;
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/1734&quot;&gt;#1734&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;While it can be difficult to take an existing application and migrate data to a new location without breaking compatibility,
what makes this more difficult includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Different versions of Cargo are expected to run side-by-side&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rustup.rs/&quot;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; integrates with &lt;code&gt;CARGO_HOME&lt;/code&gt; and is versioned independent of Cargo and supports interacting with every version of Cargo
&lt;ul&gt;
&lt;li&gt;They both use &lt;code&gt;$CARGO_HOME/bin&lt;/code&gt; for installing binaries&lt;/li&gt;
&lt;li&gt;Rustup sets up &lt;code&gt;$CARGO_HOME/env&lt;/code&gt; for users to source for adding &lt;code&gt;$CARGO_HOME/bin&lt;/code&gt; to their &lt;code&gt;PATH&lt;/code&gt; to access both Rustup and Cargo installed binaries&lt;/li&gt;
&lt;li&gt;Rustup cleans up rustup and cargo content, including &lt;code&gt;$CARGO_HOME/bin&lt;/code&gt; on uninstall&lt;/li&gt;
&lt;li&gt;Cargo needs to be able to find third-party subcommands installed by both Cargo and Rustup&lt;/li&gt;
&lt;li&gt;Rustup&#x27;s &lt;code&gt;cargo&lt;/code&gt; proxy always sets &lt;code&gt;CARGO_HOME&lt;/code&gt; on the real &lt;code&gt;cargo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working through the Cargo / Rustup interactions has been a problem for moving this forward
(including the existing &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/pre-rfc-split-cargo-home/19747&quot;&gt;Phase 1 Pre-RFC&lt;/a&gt;)
and we were able to get the Cargo and Rustup teams together at the All Hands to talk through these problems.&lt;/p&gt;
&lt;p&gt;The most immediate problem is Rustup setting &lt;code&gt;CARGO_HOME&lt;/code&gt;.
To not break compatibility,
Cargo should always respect it if &lt;code&gt;CARGO_HOME&lt;/code&gt; is set.
However, if Rustup always sets it,
then Cargo will never use OS native paths.
The intention behind Rustup setting &lt;code&gt;CARGO_HOME&lt;/code&gt; is to make sure Rustup and Cargo use the same &lt;code&gt;CARGO_HOME&lt;/code&gt; for &lt;code&gt;bin/&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt;.
This was particularly a problem at some point in the past
when they did not agree on a definition.
Because new versions of Rustup work with old versions of Cargo,
this remains an issue.&lt;/p&gt;
&lt;p&gt;Both teams suspect it will be acceptable at this point
for Rustup to stop setting &lt;code&gt;CARGO_HOME&lt;/code&gt;.
However, we first need to characterize their diverging definitions of &lt;code&gt;CARGO_HOME&lt;/code&gt; and  see if there is anything we can do to mitigate user problems.
This is being tracked in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/4502&quot;&gt;rustup#4502&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As Cargo then moves to OS native paths,
does Rustup need to continue to match behavior and use the same paths?
This boiled down to whether Rustup should continue to cleanup &lt;code&gt;CARGO_HOME/bin&lt;/code&gt;, caches, and config on uninstall.
If a user sets &lt;code&gt;~/.local/bin&lt;/code&gt; as their install path,
Rustup could end up deleting user binaries.
In fact, Rustup does it today because some applications have chosen to install their binaries into &lt;code&gt;~/.cargo/bin&lt;/code&gt;,
even if they weren&#x27;t installed by &lt;code&gt;cargo install&lt;/code&gt;.
It&#x27;s also likely not a good idea to be deleting the users configuration.
We decided that Rustup should only remove content it manages
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/285&quot;&gt;rustup#285&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With that resolved,
we can consider on its own merits whether to use the same paths.
We leaned towards them being configured separately
but first we need to test the user experience for this to see how well it will work in practice.
We should at least coordinate on whether to use application or XDG paths on Mac.&lt;/p&gt;
&lt;p&gt;As for &lt;code&gt;$CARGO_HOME/.env&lt;/code&gt;, our expectation is that it will contain the default bin path for both Rustup and Cargo.&lt;/p&gt;
&lt;p&gt;The rest of the mechanics are more program specific.
We talked a bit about Cargo&#x27;s transition.
We still plan to do this in two phases, (1) make the more granular paths configurable and then (2) change the defaults to OS native paths.
The change to OS native paths might not even need to happen in one go so long as we&#x27;ve solve the policy questions (particularly for Mac).
For config, Cargo can read from both locations.
For caches, Cargo can abandon the old location though there is a question of how to handle the cache garbage collection database,
whether to have them be distinct or not.
There is a question on how to transition the bin path.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;all-hands-cargo-linting&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-cargo-linting&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All hands: cargo linting&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Update from &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/10/31/this-development-cycle-in-cargo-1.83/#linting&quot;&gt;1.83&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;!-- 2025-04-22 --&gt;
&lt;p&gt;In preparing for the All Hands,
&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;epage&lt;/a&gt; ran a vibe check for
&lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/10/31/this-development-cycle-in-cargo-1.83/#linting&quot;&gt;previously raised questions&lt;/a&gt;, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the intent for the Rustc/Clippy divide and should Cargo mirror it?&lt;/li&gt;
&lt;li&gt;What namespace should Cargo lints live in?&lt;/li&gt;
&lt;li&gt;If Cargo share a namespace with Rustc or Clippy, should &lt;code&gt;RUSTFLAGS&lt;/code&gt; affect cargo?
&lt;ul&gt;
&lt;li&gt;e.g. given &lt;code&gt;RUSTFLAGS&#x3D;-Ddeprecated cargo check&lt;/code&gt;, should Cargo &lt;code&gt;deprecated&lt;/code&gt; warnings also error?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We mostly focused the discussion on &lt;code&gt;RUSTFLAGS&lt;/code&gt; behavior.
This would likely be implemented by Cargo passing the &lt;code&gt;RUSTFLAGS&lt;/code&gt; to Rustc and asking it to print the effective lint level for the lints.
This felt convoluted to the team and &lt;code&gt;RUSTFLAGS&lt;/code&gt; is intended as a low-level escape hatch and we should not be elevating its use in this way.&lt;/p&gt;
&lt;!-- https://hackmd.io/bRs_A-SgSoWKGqc4YCSJIA --&gt;
&lt;p&gt;At the All Hands,
the above questions were re-visited with members of the Cargo team,
Compiler team,
and Clippy team.
While there is a quality divide between Rustc and Clippy, including performance,
the general sentiment is to avoid the divide unless you absolutely have to.&lt;/p&gt;
&lt;p&gt;One difference between Rustc and Clippy lints that was called out is that Clippy is more strict.
When a Clippy lint is uplifted into Rustc, the severity is lowered.
A lint that is a &lt;code&gt;deny&lt;/code&gt; for Clippy would be a &lt;code&gt;warn&lt;/code&gt; for Rustc.&lt;/p&gt;
&lt;p&gt;The Clippy team also recommended adopting organizing lints by semantic groups that have the same lint level for the entire group,
like &lt;a href&#x3D;&quot;https://doc.rust-lang.org/clippy/&quot;&gt;Clippy&#x27;s groups&lt;/a&gt;.
This still leaves figuring out how this intersects with the lint levels having different meanings between Rustc and Clippy.
If Cargo calibrates to Rustc&#x27;s lint levels,
should Cargo lower the severity of the groups or be more selective about what goes into each group?&lt;/p&gt;
&lt;p&gt;When discussing the namespace for Cargo lints,
the recommendation is that Cargo only use the &lt;code&gt;cargo::&lt;/code&gt; namespace,
keeping the focus on the linter,
at the cost of requiring users to common lints in two different places,
even if it has extra configuration like &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html&quot;&gt;&lt;code&gt;unexpected_cfgs&lt;/code&gt;&lt;/a&gt;.
Another reason for Cargo to focus on the &lt;code&gt;cargo::&lt;/code&gt; namespace is to make it easier for users to identify correctly where to open issues.&lt;/p&gt;
&lt;p&gt;With these discussions out of the way,
we can continue to work towards stabilizing Cargo&#x27;s linter
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/12235&quot;&gt;#12235&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In preparation for that, we improved our tracking of new lints, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adopted a clippy-like template for requesting lints&lt;/li&gt;
&lt;li&gt;Created Issues for &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-clippy/stable/index.html?groups&#x3D;cargo&quot;&gt;existing&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/issues?q&#x3D;is%3Aissue%20state%3Aopen%20label%3AT-cargo&quot;&gt;requested&lt;/a&gt; Clippy Cargo lints&lt;/li&gt;
&lt;li&gt;Add an &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues?q&#x3D;is%3Aissue%20state%3Aopen%20label%3AA-new-lint&quot;&gt;&lt;code&gt;A-new-lint&lt;/code&gt;&lt;/a&gt; tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&#x3D;&quot;all-hands-doctests&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-doctests&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All hands: doctests&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Update from &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/10/01/this-development-cycle-in-cargo-1.82/#all-targets-and-doc-tests&quot;&gt;1.82&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When Cargo runs doctests,
it invokes &lt;code&gt;rustdoc&lt;/code&gt; against the library to build and run the tests.
This runs counter to the way the rest of Cargo works which creates warts in behavior, requiring special cases to workaround, and frustrating users
(e.g. a recent &lt;a href&#x3D;&quot;https://www.reddit.com/r/rust/comments/1noj73x/are_doctests_painful_to_write_or_is_it_just_me/&quot;&gt;reddit thread&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Some examples of problems with doctests are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inability to run &lt;code&gt;cargo check&lt;/code&gt; or &lt;code&gt;cargo clippy&lt;/code&gt; on them&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo test --workspace&lt;/code&gt; rebuilding doctests when there was no change&lt;/li&gt;
&lt;li&gt;cargo can&#x27;t collect &quot;unused dependency&quot; messages from rustc to identify which dependencies are unused across all dev-dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This also affects future plans including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coverage reporting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13040&quot;&gt;#13040&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cargo providing improved output (e.g. &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/2832&quot;&gt;#2832&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Testing DevEx team has done some brainstorming on this problem
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/testing-devex-team/issues/5&quot;&gt;testing-devex-team#5&lt;/a&gt;), including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building doctest support into the compiler,
parsing &lt;code&gt;#[doc]&lt;/code&gt; attributes and generating &lt;code&gt;#[test]&lt;/code&gt; functions for them
&lt;ul&gt;
&lt;li&gt;Allows doctests on internal items and binary targets&lt;/li&gt;
&lt;li&gt;Doesn&#x27;t allow for the &quot;public interface&quot; testing unless Rustc also links to the original lib or do some import path hackery&lt;/li&gt;
&lt;li&gt;Has issues with features like &lt;code&gt;compile_fail&lt;/code&gt; and per-doctest Editions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;rustdoc --output-format&#x3D;doctest&lt;/code&gt; to extract doctests, generate test files, build, and then run those (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/134529&quot;&gt;rust#134529&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://hackmd.io/68nIlljST5y-h0xZa9Gt4g --&gt;
&lt;!-- https://hackmd.io/kQttcFQpQJa7WrQ3J5uLAg --&gt;
&lt;!-- https://hackmd.io/@fmease/inject-doctests-into-host-crate --&gt;
&lt;!-- 2025-05-20 --&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;epage&lt;/a&gt; took this to the Rustdoc team at the All Hands.
They had a variant of rustc having built-in knowledge of doctests:
run &lt;code&gt;rustdoc&lt;/code&gt; as an alternative compiler driver that will do the translation.
This idea was recorded in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/141083&quot;&gt;rust#141083&lt;/a&gt;.
One problem that came up later on the issue is &lt;code&gt;cargo clippy&lt;/code&gt; support as that is a separate compiler driver.
One idea is for the logic to be in rustc itself any drivers that link against it can provide a &lt;code&gt;--doctest&lt;/code&gt; flag like the &lt;code&gt;--test&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;This is still left as an open area to further explore.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;all-hands-code-gen-settings&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-code-gen-settings&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All hands: code-gen settings&lt;/h3&gt;
&lt;!-- 2025-04-01 --&gt;
&lt;p&gt;The Cargo team discussed a request for exposing &lt;code&gt;-Cforce-frame-pointers&lt;/code&gt; in
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/profiles.html#custom-profiles&quot;&gt;&lt;code&gt;[profiles]&lt;/code&gt;&lt;/a&gt;
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/15333&quot;&gt;#15333&lt;/a&gt;).
This seemed like a reasonable idea.
We decided against changing the &lt;code&gt;bench&lt;/code&gt; profile to have this enabled
so that &lt;code&gt;cargo bench&lt;/code&gt; and &lt;code&gt;cargo build --release&lt;/code&gt; do the same thing by default.&lt;/p&gt;
&lt;p&gt;This does tie into the broader question about deciding what compiler settings should be set in &lt;code&gt;[profiles]&lt;/code&gt; and if we can smooth out the process.
The burden for adding new settings across both rustc and cargo was highlighted by
&lt;a href&#x3D;&quot;https://github.com/kornelski&quot;&gt;kornelski&lt;/a&gt;
on
&lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/the-burden-of-creating-new-compiler-options-and-exposing-them-in-cargo/22101&quot;&gt;Internals&lt;/a&gt;
this is made harder by the fact that the Cargo team is generally disconnected from the development of these requests and it can be difficult to have the context for how these should be exposed in a higher-level, opinionated tool like Cargo.&lt;/p&gt;
&lt;!-- https://hackmd.io/KbOUdlszRgCpMyWb1-YjVA --&gt;
&lt;p&gt;The Cargo team followed up with the Compiler team at the All Hands.
An idea was discussed of a &lt;code&gt;profile.*.codegen&lt;/code&gt; field that would accept a list of
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html&quot;&gt;&lt;code&gt;-C&lt;/code&gt; code-gen settings&lt;/a&gt;
in a format Cargo could check against an allowlist, normalize, and de-duplicate.
Some &lt;code&gt;-Z&lt;/code&gt; flags, like &lt;code&gt;Z fmt-debug&lt;/code&gt;, may need to be turned into &lt;code&gt;-Zunstable-options -C fmg-debug&lt;/code&gt; to work with this.&lt;/p&gt;
&lt;p&gt;The allowlist is important because Cargo&#x27;s abstractions over rustc are intended to not be able to create unsound programs
(e.g. having different floating point settings between compilation units)
and to prevent arbitrary injection through response files.
Updating the allowlist could be a step in the stabilization report
and provide a sync point between the Compiler and Cargo team meetings which is currently lacking.&lt;/p&gt;
&lt;!-- 2025-05-20 --&gt;
&lt;p&gt;We then followed up on this in a Cargo team meeting as not everyone was at the All Hands or even at that session.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;RUSTFLAGS&lt;/code&gt;,
this is something Cargo can reasonably parse and validate.
However, both have the problem of potentially interacting poorly with
built-in Cargo behavior.
The allowlist could help with this as well.&lt;/p&gt;
&lt;p&gt;We did not come to any definitive answer in the discussion.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;all-hands-cargo-explain&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-cargo-explain&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All hands: &lt;code&gt;cargo explain&lt;/code&gt;&lt;/h3&gt;
&lt;!-- https://hackmd.io/KbOUdlszRgCpMyWb1-YjVA --&gt;
&lt;p&gt;At the All Hands,
&lt;a href&#x3D;&quot;https://github.com/timclicks&quot;&gt;timclicks&lt;/a&gt; attended an open time with the Cargo team to discuss ways to improve the experience with compiler diagnostics.
The core of the idea is to provide one place for users to go to get more detailed information on an error code or lint name.
Currently, you can view error code descriptions with &lt;code&gt;rustc --explain&lt;/code&gt; or &lt;code&gt;cargo --explain&lt;/code&gt; and clippy lints with &lt;code&gt;cargo clippy --explain&lt;/code&gt;.
There isn&#x27;t a local view for rustc lints.
These views dump markdown to the screen without any styling.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/timclicks&quot;&gt;timclicks&lt;/a&gt; proposed there to be a &lt;code&gt;cargo explain&lt;/code&gt; subcommand that could take in an error code or lint name and stylize the markdown output.
There is the question of how information for third-party lints could be found once &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/66079&quot;&gt;rust#66079&lt;/a&gt; is stabilized.&lt;/p&gt;
&lt;p&gt;This could be well served by having a built-in pager
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/11213&quot;&gt;#11213&lt;/a&gt;).
This led &lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;epage&lt;/a&gt; to floating an idea that he has been considering for a bit: supporting a compilation watch mode
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9339&quot;&gt;#9339&lt;/a&gt;)
but in the style of &lt;a href&#x3D;&quot;https://dystroy.org/bacon/&quot;&gt;bacon&lt;/a&gt;.
Combined with this idea of &lt;code&gt;cargo explain&lt;/code&gt;,
maybe it could be an interactive mode (e.g. &lt;code&gt;cargo check -i&lt;/code&gt;)
that allowed you to select a diagnostic and have it pop up an &quot;explain&quot; view.
In response, someone brought up that the compiler knows more than is currently shown and maybe this could be included in the json output so that the user could drill further into a diagnostic in interactive mode.
Like with many other subcommands, this would likely best be experimented with as a
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/external-tools.html#custom-subcommands&quot;&gt;custom subcommand&lt;/a&gt;
before integrating it into Cargo.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;cargo-doc-serve&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#cargo-doc-serve&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
&lt;code&gt;cargo doc --serve&lt;/code&gt;&lt;/h3&gt;
&lt;!-- 2025-06-03 --&gt;
&lt;p&gt;The Cargo team reviewed an old requested for &lt;code&gt;cargo doc&lt;/code&gt; to get a &lt;code&gt;--serve&lt;/code&gt; flag
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/4966&quot;&gt;#4966&lt;/a&gt;).
The given use case is for web browsers that limit plugin access to &lt;code&gt;file://&lt;/code&gt; URLs.
This also seems relevant for
&lt;a href&#x3D;&quot;https://learn.microsoft.com/en-us/windows/wsl/&quot;&gt;WSL&lt;/a&gt;,
dev containers,
and remote development.
However, we would be concerned about anyone using this in production.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;cargo doc&lt;/code&gt; process is staying alive to serve files,
it seems a natural extension to rebuild the documentation on changes
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9339&quot;&gt;#9339&lt;/a&gt;).
That can then lead to considerations for live reloading
or broader ideas of watch functionality as an &quot;interactive mode&quot;
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9339#issuecomment-3340096325&quot;&gt;example&lt;/a&gt;)
as &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/10/01/this-development-cycle-in-cargo-1.90/#all-hands-cargo-explain&quot;&gt;discussed earlier&lt;/a&gt;.
Presenting serve/watch as an &quot;interactive mode&quot; can help set expectations
when it comes to production use.&lt;/p&gt;
&lt;p&gt;A challenge with this is the support burden this could put on the Cargo team,
which includes supporting users through unmet expectations and feature creep.
For example, mdbook has &lt;a href&#x3D;&quot;https://github.com/rust-lang/mdBook/issues/?q&#x3D;is%3Aissue%20state%3Aopen%20label%3ACommand-serve&quot;&gt;several issues&lt;/a&gt; open related to its &lt;code&gt;serve&lt;/code&gt; functionality.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rustup doc&lt;/code&gt; also has similar needs and it would be good for this effort to be coordinated with them
(
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2151&quot;&gt;rustup#2151&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/3112&quot;&gt;rustup#3112&lt;/a&gt;
).&lt;/p&gt;
&lt;p&gt;Possible paths forward include experimenting with this as a nightly-only feature
or creating a third-party subcommand to experiment with the full blown interactive mode.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;multi-line-messages-from-build-scripts&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#multi-line-messages-from-build-scripts&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Multi-line messages from build scripts&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/kornelski&quot;&gt;kornelski&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://github.com/ratmice&quot;&gt;ratmice&lt;/a&gt;
started back up the conversation on multi-line build script errors and warnings.&lt;/p&gt;
&lt;p&gt;Build scripts communicate to cargo through &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script&quot;&gt;directives&lt;/a&gt;
of the format &lt;code&gt;cargo::&amp;lt;name&amp;gt;&#x3D;&amp;lt;params&amp;gt;\n&lt;/code&gt;,
including &lt;code&gt;cargo::warning&#x3D;&amp;lt;message&amp;gt;\n&lt;/code&gt; and &lt;code&gt;cargo::error&#x3D;&amp;lt;message&amp;gt;\n&lt;/code&gt;.
The only way to report multiple lines of text for the same message is to split the message across multiple of these directives,
causing each line to render as &lt;code&gt;error: &amp;lt;name&amp;gt;@&amp;lt;ver&amp;gt;: &amp;lt;line&amp;gt;&lt;/code&gt;.
&lt;a href&#x3D;&quot;https://github.com/epage&quot;&gt;epage&lt;/a&gt; wrote up a
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13233#issuecomment-3185855839&quot;&gt;summary&lt;/a&gt;,
got input, and brought this before the Cargo team.&lt;/p&gt;
&lt;p&gt;The options includes:&lt;/p&gt;
&lt;pre class&#x3D;&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;# Concatenation
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error&#x3D;header
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error+&#x3D;second line
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;# Block start/end
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error_start&#x3D;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;header
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;second line
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error_end&#x3D;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;# Line-count prefix
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error_start&#x3D;2
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;header
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;second line
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;# Block start/end + line prefix
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error_start&#x3D;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error&#x3D;header
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error&#x3D;second line
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;cargo::error_end&#x3D;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 2025-08-18 --&gt;
&lt;p&gt;When the team stepped through the options,
we determined that our values for a solution include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every line having a &lt;code&gt;cargo::&lt;/code&gt; prefix to match with our previous communication that cargo ignores everything else&lt;/li&gt;
&lt;li&gt;Explicit end-of-message, rather than being inferred
&lt;ul&gt;
&lt;li&gt;Some felt uncomfortable with a blank line being sufficient to end buffering&lt;/li&gt;
&lt;li&gt;Some felt uncomfortable with cargo::error and cargo::warning changing their semantics from non-buffered to buffered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Graceful handling of nested content or multi-threaded environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These values excluded &quot;block start/end&quot; and &quot;line-count prefix&quot; solutions.
&quot;Concatenation&quot; and &quot;block start/end + line prefix&quot; have points both for and against them.
In the end, we favored the value of &quot;explicit end-of-message&quot; and preferred &quot;block start/end + line prefix&quot;.&lt;/p&gt;
&lt;p&gt;There are still
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13233#issuecomment-3201200381&quot;&gt;open questions&lt;/a&gt;,
though we didn&#x27;t feel strongly whether those needed to be resolved before implementation or during the stabilization process.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;forgetting-cargo-fmt-after-cargo-fix&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#forgetting-cargo-fmt-after-cargo-fix&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Forgetting &lt;code&gt;cargo fmt&lt;/code&gt; after &lt;code&gt;cargo fix&lt;/code&gt;&lt;/h3&gt;
&lt;!-- team meeting 2025-03-11 --&gt;
&lt;p&gt;&lt;code&gt;cargo fix&lt;/code&gt; and &lt;code&gt;cargo clippy --fix&lt;/code&gt; will apply suggested fixes from lints.
However, the output is not always pretty and making it so would be difficult.
If you are like me, it&#x27;s easy to not notice that &lt;code&gt;cargo fmt&lt;/code&gt; is needed until you see CI fail.
It would help if &lt;code&gt;cargo fix&lt;/code&gt; also handled formatting
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/12608&quot;&gt;#12608&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One problem is users may not be using &lt;code&gt;cargo fmt&lt;/code&gt;
and having &lt;code&gt;cargo fix&lt;/code&gt; apply it for the first time could be unwanted on its own and hide the actual fix that went in.&lt;/p&gt;
&lt;p&gt;A way to reduce unwanted edits is if we had an interface to tell &lt;code&gt;cargo fmt&lt;/code&gt; to only re-format the parts changed by &lt;code&gt;cargo fix&lt;/code&gt;.
The exact interaction for these would have to be carefully considered and may still produce unwanted reformatting.&lt;/p&gt;
&lt;p&gt;At the next level, Cargo could have a &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html&quot;&gt;&lt;code&gt;.cargo/config.toml&lt;/code&gt;&lt;/a&gt; field&lt;/p&gt;
&lt;pre class&#x3D;&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;[fix]
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;rustfmt &#x3D; true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we did this, we may want to have Cargo run &lt;code&gt;cargo fmt --check&lt;/code&gt; first,
similar to our &quot;VCS dirty&quot; check.&lt;/p&gt;
&lt;p&gt;At a minimum, &lt;code&gt;cargo fix&lt;/code&gt; could recommend running &lt;code&gt;cargo fmt&lt;/code&gt; if changes were made.&lt;/p&gt;
&lt;p&gt;Our discussion was inconclusive and we moved it to &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/properly-formatted-cargo-fix-code/22539&quot;&gt;Internals&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;recursively-find-dependencies-at-a-path&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#recursively-find-dependencies-at-a-path&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Recursively find dependencies at a &lt;code&gt;path&lt;/code&gt;&lt;/h3&gt;
&lt;!-- team meeting 2025-03-11 --&gt;
&lt;p&gt;Cargo will automatically find a package within its git repo, like:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;bevy_math&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-inline-table z-begin z-toml&quot;&gt;{&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;git&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;https://github.com/bevyengine/bevy.git&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-inline-table z-end z-toml&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the same can&#x27;t be said for &lt;code&gt;path&lt;/code&gt; dependencies where an exact path is needed.
Say you cloned Bevy into &lt;code&gt;/Users/epage/Development/bevy&lt;/code&gt;, you&#x27;d have to depend on it as:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;toml&quot; class&#x3D;&quot;language-toml z-code&quot;&gt;&lt;code class&#x3D;&quot;language-toml&quot; data-lang&#x3D;&quot;toml&quot;&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;bevy_math&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-inline-table z-begin z-toml&quot;&gt;{&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-tag z-toml&quot;&gt;path&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;/span&gt;/Users/epage/Development/bevy/crates/bevy_math/&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-punctuation z-definition z-inline-table z-end z-toml&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;code&gt;git&lt;/code&gt;, the recursive path search has run into several issues, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A performance hit for walking the filesystem on every run and parsing the manifests (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/14395&quot;&gt;#14395&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ambiguous package names (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/11858&quot;&gt;#11858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Non-determinism in package selection when multiple share a name&lt;/del&gt;, fixed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/commit/6c0f14c245406e09c1ed7bda8ff770bdd8c3c54e&quot;&gt;#14239&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Warning about ambiguous package names even when not referenced (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/10752&quot;&gt;#10752&lt;/a&gt;)&lt;/del&gt;, fixed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/14239&quot;&gt;#14239&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Non-fatal error messages for unreferenced packages (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13724&quot;&gt;#13724&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At minimum, we can improve the error message from:&lt;/p&gt;
&lt;pre class&#x3D;&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;error: no matching package named &#x60;definitely_not_bar&#x60; found
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;location searched: /Users/eric/Temp/foo/crates/bar
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;required by package &#x60;foo v0.1.0 (/Users/eric/Temp/foo)&#x60;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to something like:&lt;/p&gt;
&lt;pre class&#x3D;&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;error: no matching package named &#x60;definitely_not_bar&#x60; found at &#x60;bar/&#x60;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;note: required by package &#x60;foo v0.1.0 (/Users/eric/Temp/foo)&#x60;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-text z-plain&quot;&gt;help: package &#x60;definitely_not_bar&#x60; exists at &#x60;bar/definitely_not_bar/&#x60;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Due to the problems we&#x27;ve had with &lt;code&gt;git&lt;/code&gt;,
we were hesitant to extend the recursive path search to &lt;code&gt;path&lt;/code&gt;.
This likely wouldn&#x27;t be reconsidered until at least
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/14395&quot;&gt;#14395&lt;/a&gt;
is addressed.
We talked about the idea of caching the relative path inside of the &lt;code&gt;Cargo.lock&lt;/code&gt;.
If the package is no longer at that path (update of &lt;code&gt;git&lt;/code&gt; dependency, user edited the layout at &lt;code&gt;path&lt;/code&gt;),
Cargo would re-scan for the package.
The big hurdle would be plumbing this advisory information from one lockfile, through the resolve, to the next lockfile.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;include-workspace-license-files-with-cargo-new&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#include-workspace-license-files-with-cargo-new&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Include workspace license files with &lt;code&gt;cargo new&lt;/code&gt;&lt;/h3&gt;
&lt;!-- team meeting 2025-03-11 --&gt;
&lt;p&gt;When you run &lt;code&gt;cargo new&lt;/code&gt; in a workspace,
it will automatically inherit &lt;code&gt;workspace.package&lt;/code&gt; fields
and the &lt;code&gt;workspace.lints&lt;/code&gt; table.
Commonly, license files need to be copied into a package for distribution via &lt;code&gt;cargo publish&lt;/code&gt;
and it would help if symlinked any license files Cargo found in the workspace root into the package
(&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/13328&quot;&gt;13328&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;On a mechanics side,
there are downsides to symlinking on Windows that
could make it a bad policy by default,
regardless of the platform &lt;code&gt;cargo new&lt;/code&gt; is running on.
Copying, always or as a fallback to symlinking failing,
has its own drawbacks.&lt;/p&gt;
&lt;p&gt;We could have a &lt;code&gt;workspace.new-files&lt;/code&gt; that &lt;code&gt;cargo new&lt;/code&gt; will copy in.
It&#x27;s hard to evaluate a solution like this without better understanding
where we might go with templateing (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/5151&quot;&gt;#5151&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We could have a &lt;code&gt;package.extra-files&lt;/code&gt; which &lt;code&gt;cargo publish&lt;/code&gt; will copy into the &lt;code&gt;.crate&lt;/code&gt; file like it does &lt;code&gt;package.readme&lt;/code&gt; when it&#x27;s outside of the package root.
If we made it this general,
we&#x27;d need to also allow users to specify where the files would go.&lt;/p&gt;
&lt;p&gt;There is &lt;code&gt;package.license-file&lt;/code&gt; which &lt;code&gt;cargo publish&lt;/code&gt; will already copy into the &lt;code&gt;.crate&lt;/code&gt; file if it is outside the package root, like with &lt;code&gt;package.readme&lt;/code&gt;.
However, only one file can be specified (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/5933&quot;&gt;#5933&lt;/a&gt;)
because this is intended for a custom license when &lt;code&gt;package.license&lt;/code&gt; is insufficient.
See also
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/8537&quot;&gt;#8537&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9908&quot;&gt;#9908&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9972&quot;&gt;#9972&lt;/a&gt;.
We vaguely discussed a way to map license names,
including a custom license identifier,
to specific files.
&lt;code&gt;cargo publish&lt;/code&gt; would then copy these into the package root inside the &lt;code&gt;.crate&lt;/code&gt; file.
We didn&#x27;t end up reaching any specific conclusions.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;misc&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#misc&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ranger-ross&quot;&gt;ranger-ross&lt;/a&gt; is experimenting with new &lt;code&gt;build-dir&lt;/code&gt; layouts in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15947&quot;&gt;#15947&lt;/a&gt; while working to improve how we test it in &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/15874&quot;&gt;#15874&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;focus-areas-without-progress&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#focus-areas-without-progress&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Focus areas without progress&lt;/h2&gt;
&lt;p&gt;These are areas of interest for Cargo team members with no reportable progress for this development-cycle.&lt;/p&gt;
&lt;p&gt;Project goals in need of owners&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/cargo-build-analysis.html&quot;&gt;Prototype Cargo build analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/open-namespaces.html&quot;&gt;Open namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/pub-priv.html&quot;&gt;Stabilize public/private dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
- [Stabilize cargo-script](https://rust-lang.github.io/rust-project-goals/2025h2/cargo-script.html)
- [Rework Cargo Build Dir Layout](https://rust-lang.github.io/rust-project-goals/2025h2/cargo-build-dir-layout.html)
- [Prototype a new set of Cargo &quot;plumbing&quot; commands](https://rust-lang.github.io/rust-project-goals/2025h2/cargo-plumbing.html)
- [Finish the libtest json output experiment](https://rust-lang.github.io/rust-project-goals/2025h2/libtest-json.html)
--&gt;
&lt;p&gt;Ready-to-develop:&lt;/p&gt;
&lt;!--
- [Open namespaces](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#open-namespaces)
- [Auto-generate completions](https://github.com/rust-lang/cargo/issues/6645)
  - See [clap-rs/clap#3166](https://github.com/clap-rs/clap/issues/3166)
--&gt;
&lt;!--
Needs design and/or experimentation:
--&gt;
&lt;p&gt;Planning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/3126&quot;&gt;Disabling of default features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3416&quot;&gt;RFC #3416: &lt;code&gt;features&lt;/code&gt; metadata&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3487&quot;&gt;RFC #3487: visibility&lt;/a&gt; (visibility)&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3486&quot;&gt;RFC #3486: deprecation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/unstable.html#list-of-unstable-features&quot;&gt;Unstable features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/pre-rfc-mutually-excusive-global-features/19618&quot;&gt;Pre-RFC: Global, mutually exclusive features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3553&quot;&gt;RFC #3553: Cargo SBOM Fragment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
- [OS-native config/cache directories (ie XDG support)](https://github.com/rust-lang/cargo/issues/1734)
  - [Phase 1 Pre-RFC](https://internals.rust-lang.org/t/pre-rfc-split-cargo-home/19747)
--&gt;
&lt;h2 id&#x3D;&quot;how-you-can-help&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#how-you-can-help&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
How you can help&lt;/h2&gt;
&lt;p&gt;If you have ideas for improving cargo,
we recommend first checking &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/&quot;&gt;our backlog&lt;/a&gt;
and then exploring the idea on &lt;a href&#x3D;&quot;https://internals.rust-lang.org/c/tools-and-infrastructure/cargo/15&quot;&gt;Internals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If there is a particular issue that you are wanting resolved that wasn&#x27;t discussed here,
some steps you can take to help move it along include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summarizing the existing conversation (example:
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/2644#issuecomment-1489371226&quot;&gt;Better support for docker layer caching&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/8728#issuecomment-1610265047&quot;&gt;Change in &lt;code&gt;Cargo.lock&lt;/code&gt; policy&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9930#issuecomment-1489089277&quot;&gt;MSRV-aware resolver&lt;/a&gt;
)&lt;/li&gt;
&lt;li&gt;Document prior art from other ecosystems so we can build on the work others have done and make something familiar to users, where it makes sense&lt;/li&gt;
&lt;li&gt;Document related problems and solutions within Cargo so we see if we are solving to the right layer of abstraction&lt;/li&gt;
&lt;li&gt;Building on those posts, propose a solution that takes into account the above information and cargo&#x27;s compatibility requirements (&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9930#issuecomment-1489269471&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are available to help mentor people for
&lt;a href&#x3D;&quot;https://doc.crates.io/contrib/issues.html#issue-status-labels&quot;&gt;S-accepted issues&lt;/a&gt;
on
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo&quot;&gt;zulip&lt;/a&gt;
and you can talk to us in real-time during
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/wiki/Office-Hours&quot;&gt;Contributor Office Hours&lt;/a&gt;.
If you are looking to help with one of the bigger projects mentioned here and are just starting out,
&lt;a href&#x3D;&quot;https://doc.crates.io/contrib/process/index.html#working-on-issues&quot;&gt;fixing some issues&lt;/a&gt;
will help familiarize yourself with the process and expectations,
making things go more smoothly.
If you&#x27;d like to tackle something
&lt;a href&#x3D;&quot;https://doc.crates.io/contrib/issues.html#issue-status-labels&quot;&gt;without a mentor&lt;/a&gt;,
the expectations will be higher on what you&#x27;ll need to do on your own.&lt;/p&gt;
</content>

        <author>
            <name>Ed Page</name>
        </author>
    </entry>
    <entry>
        <title>The next Rust All Hands</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/30/all-hands-2026/" type="text/html" title="The next Rust All Hands" />
        <published>2025-09-30T00:00:00+00:00</published>
        <updated>2025-09-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/30/all-hands-2026/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/30/all-hands-2026/">&lt;div style&#x3D;&quot;border: 1px solid var(--yellow); text-align: center; padding: 1em;&quot;&gt;
&lt;p&gt;TL;DR: The &lt;strong&gt;Rust All Hands 2026&lt;/strong&gt; happens &lt;strong&gt;21–23 May&lt;/strong&gt; in &lt;strong&gt;Utrecht, Netherlands&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://forms.gle/GhkvDSfdBaYHUrRJ7&quot;&gt;Register here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;Last May, more than 150 project members and invited guests came together at the largest in-person collaborative event in the history of the Rust project: the Rust All Hands 2025.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;https://github.com/user-attachments/assets/1da0da5c-3cb0-48b5-91ae-6f043550969c&quot; alt&#x3D;&quot;A large room full of Rustaceans smiling and cheering&quot; /&gt;&lt;/p&gt;
&lt;p&gt;During two full days, spread over 10 different meeting rooms, both
pre-planned and ad-hoc discussions took place on a very wide range of topics. (See &lt;a href&#x3D;&quot;https://docs.google.com/spreadsheets/d/1G07-f2pwAzEztZMpuxcCW3EWFS1pEX4ShNbsg91Qqjw/edit?gid&#x3D;0#gid&#x3D;0&quot;&gt;schedule&lt;/a&gt; and &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/channel/486433-all-hands-2025/topic/Meeting.20notes!/with/518928628&quot;&gt;meeting notes&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Many many long standing issues have been unblocked. Many new ideas were discussed, both small and big. Conflicts were resolved. Plans were made. And many personal connections were formed and improved. ❤&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;https://github.com/user-attachments/assets/7e5c42bc-2cf0-4e15-b69c-450264ef6e1d&quot; alt&#x3D;&quot;Jyn hosting a discussion in an open space with plants and some TVs on the wall&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Additionally, several Rust project members gave &lt;a href&#x3D;&quot;https://www.youtube.com/playlist?list&#x3D;PL8Q1w7Ff68DBJsobwUVTr_vbb2MbxisAF&quot;&gt;talks&lt;/a&gt; to other project members and contributors, as part of the &quot;Rust Project Track&quot; at the RustWeek conference.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;https://github.com/user-attachments/assets/b4287c7f-5813-4ec0-bf7f-bde4fd17202d&quot; alt&#x3D;&quot;Michael Goulet (aka compiler-errors) giving a talk with a large projection of a code editor behind&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The feedback from the participants was overwhelmingly positive with an average score of 9.5/10. The vast majority would like this to happen again next year, which is exactly what is happening!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;rust-all-hands-2026&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#rust-all-hands-2026&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Rust All Hands 2026&lt;/h2&gt;
&lt;p&gt;The Rust All Hands 2026 will again take place in &lt;strong&gt;Utrecht, the Netherlands&lt;/strong&gt; as part of &lt;a href&#x3D;&quot;https://2026.rustweek.org/&quot;&gt;Rust Week 2026&lt;/a&gt;, hosted by &lt;a href&#x3D;&quot;https://2026.rustweek.org/about/&quot;&gt;RustNL&lt;/a&gt;.
The RustWeek conference takes place on Tuesday (19 May) and Wednesday (20 May) followed by the &lt;em&gt;three-day&lt;/em&gt; Rust All Hands
on &lt;strong&gt;Thursday (21 May), Friday (22 May) and Saturday (23 May)&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;The second conference day (Wednesday 20 May) will again include a &quot;Rust Project Track&quot;, where Rust team members can give talks to other team members and current and future contributors.&lt;/p&gt;
&lt;p&gt;If you are interested in being part of the Rust All Hands 2026, please &lt;a href&#x3D;&quot;https://forms.gle/GhkvDSfdBaYHUrRJ7&quot;&gt;register your interest here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&#x27;ll be sending out formal invitations at a later point in time.&lt;/p&gt;
&lt;p&gt;If you have any questions, please reach out to Mara on Zulip.&lt;/p&gt;
&lt;p&gt;See you in Utrecht!&lt;/p&gt;
</content>

        <author>
            <name>Mara Bos</name>
        </author>
    </entry>
    <entry>
        <title>Leadership Council September 2025 Representative Selections</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/23/leadership-council-repr-selection/" type="text/html" title="Leadership Council September 2025 Representative Selections" />
        <published>2025-09-23T00:00:00+00:00</published>
        <updated>2025-09-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/23/leadership-council-repr-selection/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/23/leadership-council-repr-selection/">&lt;p&gt;The September 2025 selections for &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/leadership-council&quot;&gt;Leadership Council&lt;/a&gt; representatives have been finalized. The &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/infra&quot;&gt;infrastructure team&lt;/a&gt; has chosen &lt;a href&#x3D;&quot;https://github.com/Kobzol/&quot;&gt;Jakub Beránek&lt;/a&gt; as their new representative. &lt;a href&#x3D;&quot;https://github.com/traviscross/&quot;&gt;TC&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/m-ou-se&quot;&gt;Mara Bos&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;Oli Scherer&lt;/a&gt; will continue to represent &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/lang&quot;&gt;lang&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/library&quot;&gt;libs&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/moderation&quot;&gt;mods&lt;/a&gt; respectively.&lt;/p&gt;
&lt;p&gt;We&#x27;d like to give our thanks to outgoing representative &lt;a href&#x3D;&quot;https://github.com/Mark-Simulacrum&quot;&gt;Mark Rousskov&lt;/a&gt; for being instrumental to the formation of the Council and representing the infrastructure team these past two years. We&#x27;ve greatly appreciated Mark&#x27;s support!&lt;/p&gt;
&lt;p&gt;Thanks to everyone who participated in the process! The next representative selections will be in March 2026 for the other half of the Council.&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    <entry>
        <title>Variadic Generics Micro Survey</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/22/variadic-generics-micro-survey/" type="text/html" title="Variadic Generics Micro Survey" />
        <published>2025-09-22T00:00:00+00:00</published>
        <updated>2025-09-22T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/22/variadic-generics-micro-survey/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/22/variadic-generics-micro-survey/">&lt;p&gt;We are launching a &lt;a href&#x3D;&quot;https://www.surveyhero.com/c/rust-variadic-generics-survey&quot;&gt;Variadic Generics Micro Survey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This survey is meant to gather sentiment and use-cases for upcoming design discussions for adding &lt;a href&#x3D;&quot;https://poignardazur.github.io/2021/01/30/variadic-generics/&quot;&gt;variadic generics&lt;/a&gt; to the Rust language. Its main goal is to answer questions like &quot;What do people think about variadic generics in Rust? How would people use them?&quot;. The answers will likely be used to provide more context for an upcoming RFC for variadic generics.&lt;/p&gt;
&lt;p&gt;The survey is only offered in the English language.&lt;/p&gt;
&lt;p&gt;We invite you to take this survey even if you have limited Rust experience, or you&#x27;re not familiar at all with the concept of variadic generics. Every data point helps up paint a clearer picture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can fill out the survey &lt;a href&#x3D;&quot;https://www.surveyhero.com/c/rust-variadic-generics-survey&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Filling the survey should take you approximately 5 minutes, and the survey is fully anonymous. We will accept submissions until &lt;strong&gt;Monday, October 20th, 2025&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please help us spread the word by sharing the survey link via your social networks, at meetups, with colleagues, and in any other community that makes sense to you.&lt;/p&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
</content>

        <author>
            <name>Olivier Faure</name>
        </author>
    </entry>
    <entry>
        <title>Program management update — August 2025</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/11/program-management-update-2025-08/" type="text/html" title="Program management update — August 2025" />
        <published>2025-09-11T00:00:00+00:00</published>
        <updated>2025-09-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/11/program-management-update-2025-08/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/11/program-management-update-2025-08/">&lt;h1 id&#x3D;&quot;program-management-update-august-2025&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#program-management-update-august-2025&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Program management update — August 2025&lt;/h1&gt;
&lt;p&gt;Quite a lot has happened in August. Let&#x27;s dive in!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;leadership-council&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#leadership-council&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Leadership Council&lt;/h2&gt;
&lt;p&gt;Representatives are now being selected for the Rust Leadership Council, and this is as good a time as any to remind everyone what it does.&lt;/p&gt;
&lt;p&gt;The Council is composed of Project members, one for each &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance&quot;&gt;top-level team&lt;/a&gt; and its subteams. They &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/roles/council-representative.md&quot;&gt;represent the interests of their teams and support the long-term success of the Project as a whole&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They also coordinate with the Foundation and elect the Project Directors on the Foundation&#x27;s board (more on this later).&lt;/p&gt;
&lt;p&gt;Their work largely happens publicly in &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues&quot;&gt;the Council&#x27;s repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The representatives meet every other Friday and link these issues in their agenda. When they make a decision, they summarize the discussion and propose an FCP (final comment period) on the relevant issue. As with all FCPs in the Project, they&#x27;re interested in any feedback people have until the comment period is closed. They review it all.&lt;/p&gt;
&lt;p&gt;If you want to see what the Council is up to, these issues are a great complement to the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/tree/main/minutes/sync-meeting&quot;&gt;Council meeting minutes&lt;/a&gt; I&#x27;m taking and publishing on their behalf.&lt;/p&gt;
&lt;p&gt;To see this in practice, here is a proposal to send me to the annual &lt;a href&#x3D;&quot;https://kangrejos.com/&quot;&gt;Rust for Linux workshop (Kangrejos)&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/217&quot;&gt;https://github.com/rust-lang/leadership-council/issues/217&lt;/a&gt;&lt;/p&gt;
&lt;h3 id&#x3D;&quot;representative-selections&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#representative-selections&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Representative selections&lt;/h3&gt;
&lt;p&gt;Every six month, half of the Council&#x27;s term ends. For this round, the Infra, Lang, Libs, and Mods teams are selecting representatives, and the nominations are now open.&lt;/p&gt;
&lt;p&gt;If you want to learn more or you&#x27;re interested in representing your team, please read &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/15/leadership-council-repr-selection/&quot;&gt;Eric Huss&#x27;s post announcing the selection&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;rust-foundation-project-directors-2025&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#rust-foundation-project-directors-2025&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Rust Foundation Project Directors 2025&lt;/h2&gt;
&lt;p&gt;This fall, &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/&quot;&gt;we&#x27;re also looking for new Project Directors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Directors have staggered terms as well and half are up for election every year.&lt;/p&gt;
&lt;p&gt;This time it&#x27;s Santiago Pastorino, Scott McMurray, and Jakob Degen&#x27;s. None are seeking reelection.&lt;/p&gt;
&lt;p&gt;These are seats directly on the Rust Foundation board. The Project directors serve the interest of the Rust Project as a whole and sit alongside the Member Directors who represent companies funding the Foundation.&lt;/p&gt;
&lt;p&gt;Each resolution the Foundation passes must be approved by &lt;em&gt;both&lt;/em&gt; Member and Project Directors separately. That means regardless of the size of the board, the Project has an equal voice in Foundation matters.&lt;/p&gt;
&lt;p&gt;You can nominate yourself or another person until 2025-09-18. Please &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/&quot;&gt;read the blog post for more information&lt;/a&gt;. The Project is always looking for fresh faces and diverse voices.&lt;/p&gt;
&lt;p&gt;I am the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/policies/project-directorship/election-process.md#setup&quot;&gt;facilitator of the selection process&lt;/a&gt; this time around. That means I&#x27;ve authored the blog post above, proposed the timeline, and I&#x27;ll seek out consent and statements from the nominees. I&#x27;ve also announced the election on Zulip as well as an email that should reach all Project members. I&#x27;ll see it all through, including facilitating the actual election process.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;bevy-gamedev-followup&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#bevy-gamedev-followup&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Bevy/gamedev followup&lt;/h2&gt;
&lt;p&gt;A month ago, the Lang team invited the &lt;a href&#x3D;&quot;https://bevy.org/&quot;&gt;Bevy game engine folks&lt;/a&gt; to talk about issues faced by their new users as well as any pain points their project is facing.&lt;/p&gt;
&lt;p&gt;There were two big topics they mentioned: reflection and variadic generics.&lt;/p&gt;
&lt;p&gt;Both have been requested for a long time, and the interest is much broader than just Bevy or even just the game development space.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;reflection&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#reflection&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Reflection&lt;/h3&gt;
&lt;p&gt;Reflection is a mechanism that lets your program look at any type and understand it: getting its name, fields, and &lt;em&gt;their names and types&lt;/em&gt; while your program is running. This is in contrast to the &lt;code&gt;derive&lt;/code&gt; macro or trait bounds that are processed at compile time.&lt;/p&gt;
&lt;p&gt;Projects like Bevy currently rely on &lt;code&gt;derive&lt;/code&gt; macros. For example, pretty much all its types have &lt;code&gt;derive(Reflect)&lt;/code&gt; to provide dynamic field access and type inspection, serialization/deserialization, and scripting. While the usage is simple, these macros are difficult to write and debug. And the language has limitations on where they can be applied.&lt;/p&gt;
&lt;p&gt;You can only implement a trait for a type (which is what &lt;code&gt;derive&lt;/code&gt; does, under the hood) if either the trait or type is &lt;em&gt;defined&lt;/em&gt; in the crate you&#x27;re implementing it in (this is the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/book/ch10-02-traits.html#implementing-a-trait-on-a-type&quot;&gt;orphan rule&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So if you want to implement &lt;code&gt;Reflect&lt;/code&gt; (defined in &lt;a href&#x3D;&quot;https://crates.io/crates/bevy_reflect&quot;&gt;bevy_reflect&lt;/a&gt;, not your crate), you could derive it for your custom type, but not e.g. for &lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/time/struct.Duration.html&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;[f32; 2]&lt;/code&gt; because they&#x27;re defined in the standard library.&lt;/p&gt;
&lt;p&gt;You have to create a new &lt;code&gt;enum&lt;/code&gt;/&lt;code&gt;struct&lt;/code&gt; that wraps that type and implement the trait yourself. This all gets very complex very quickly and no good solution exists right now.&lt;/p&gt;
&lt;p&gt;In practice, projects like serde and Bevy often provide implementations for common standard library types (including tuples up to a limited size). But when a new crate comes along, it either has to implement all the useful traits in the ecosystem, convince everyone in the ecosystem to provide the implementations for its types, or accept being less useful than the existing crates. This can lead to ecosystem stagnation.&lt;/p&gt;
&lt;p&gt;With reflection, a lot of this machinery would be available on every type everywhere and everyone could use it.&lt;/p&gt;
&lt;p&gt;Oli opened the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/reflection-and-comptime.html&quot;&gt;reflection and comptime goal&lt;/a&gt; for the 2025H2 period that will build the initial functionality and extend it later on.&lt;/p&gt;
&lt;p&gt;This happened with little intervention on my part, but I made sure that the Bevy folks were aware (they were!), and I&#x27;ll be keeping an eye on this to help move it forward and be on the lookout for other projects that may find this useful.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;variadic-generics&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#variadic-generics&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Variadic generics&lt;/h3&gt;
&lt;p&gt;Remember how I said crates implement traits for tuples up to a certain size? That&#x27;s a limitation of Rust that is -- again -- felt in many different areas.&lt;/p&gt;
&lt;p&gt;The basic idea is: suppose you have a tuple of types that all implement a given trait. You want the tuple to be able to implement that trait too.&lt;/p&gt;
&lt;p&gt;For example, if all the elements of a tuple implement the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/fmt/trait.Debug.html&quot;&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt; trait, you should be able to &lt;code&gt;dbg!()&lt;/code&gt; or &lt;code&gt;println!(&quot;{:?}&quot;, ...)&lt;/code&gt; such a tuple.&lt;/p&gt;
&lt;p&gt;And you can!&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;let&lt;/span&gt; tuple &lt;span class&#x3D;&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;4&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;5&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;6&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;7&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;8&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;11&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-support z-macro z-rust&quot;&gt;println!&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{tuple:?}&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href&#x3D;&quot;https://play.rust-lang.org/?version&#x3D;stable&amp;amp;mode&#x3D;debug&amp;amp;edition&#x3D;2024&amp;amp;gist&#x3D;88ec1f7ff90a07da8a0c9852c81594ce&quot;&gt;playground&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;...sort of:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;let&lt;/span&gt; tuple &lt;span class&#x3D;&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;&#x3D;&lt;/span&gt; &lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;4&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;5&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;6&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;7&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;8&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;11&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;12&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-support z-macro z-rust&quot;&gt;println!&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class&#x3D;&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{tuple:?}&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; error[E0277]: &#x60;({integer}, [...], {integer})&#x60; doesn&amp;#39;t implement &#x60;Debug&#x60;
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; --&amp;gt; src/main.rs:3:16
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;//&lt;/span&gt; [...]
&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href&#x3D;&quot;https://play.rust-lang.org/?version&#x3D;stable&amp;amp;mode&#x3D;debug&amp;amp;edition&#x3D;2024&amp;amp;gist&#x3D;245a91abb5ac3162bb537428e348fd02&quot;&gt;playground&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Even in the Rust standard library, traits like this are &lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.tuple.html#trait-implementations-1&quot;&gt;only implemented for tuples up to 12 elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is, again, keenly felt by anyone writing an entity component system (ECS) or object-relational mapping (ORM) and in particular their query systems.&lt;/p&gt;
&lt;p&gt;Some time ago, Olivier Faure took up the mantle and drove the discussions at the last two RustWeek conferences (read the &lt;a href&#x3D;&quot;https://poignardazur.github.io/2024/05/25/report-on-rustnl-variadics/&quot;&gt;2024&lt;/a&gt; and &lt;a href&#x3D;&quot;https://poignardazur.github.io/2025/06/07/report-on-variadics-rustweek/&quot;&gt;2025&lt;/a&gt; reports).&lt;/p&gt;
&lt;p&gt;Olivier also wrote &lt;a href&#x3D;&quot;https://poignardazur.github.io/2025/07/09/variadic-generics-dead-ends/&quot;&gt;&quot;Variadic Generics ideas that won&#x27;t work for Rust&quot;&lt;/a&gt; which highlights the many pitfals even the simplest &quot;why don&#x27;t we just...&quot; ideas inevitably run into. This is a complex feature that touches a lot of Rust&#x27;s machinery, and it can&#x27;t be added in easily.&lt;/p&gt;
&lt;p&gt;But we still want it!&lt;/p&gt;
&lt;p&gt;Some of the things blocking this in the past have either been resolved or are going to be resolved soon (e.g. the &lt;a href&#x3D;&quot;https://rustc-dev-guide.rust-lang.org/solve/trait-solving.html&quot;&gt;new trait type solver&lt;/a&gt;). And the Lang team is interested in reviewing a proposal.&lt;/p&gt;
&lt;p&gt;I&#x27;ve done a lot of background reading (which made me appreciate the complexity), talked to Olivier and Alice Cecile, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/348&quot;&gt;opened a design meeting on the Lang side&lt;/a&gt; as there is a way forward now.&lt;/p&gt;
&lt;p&gt;The next steps are getting an RFC written and scheduling the design meeting. I&#x27;m again on the lookout for other people interested in the space (either with proposals of their own or usecases we want to make sure are heard) so I can point them to this space.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;lori-lorusso-foundation-director-of-outreach&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#lori-lorusso-foundation-director-of-outreach&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Lori Lorusso: Foundation Director of Outreach&lt;/h2&gt;
&lt;p&gt;Earlier this month, &lt;a href&#x3D;&quot;https://rustfoundation.org/about/#lori-lorusso-director-of-outreach&quot;&gt;Lori&lt;/a&gt; joined the Rust Foundation.&lt;/p&gt;
&lt;p&gt;She&#x27;ll be overseeing the grants program as well as the external outreach and internal inreach and communication. She&#x27;ll also look at bringing in communities and people from areas that we haven&#x27;t reached yet.&lt;/p&gt;
&lt;p&gt;As our roles overlap a bit (and can definitely benefit from our collaboration -- e.g. on the communication between the Project and Foundation), we&#x27;ve set up a regular check-in.&lt;/p&gt;
&lt;p&gt;One of the near-term things I&#x27;ll do is get her onboarded on &lt;a href&#x3D;&quot;https://blog.rust-lang.org/&quot;&gt;the Rust blog&lt;/a&gt; system so she can publish posts there.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;content-team&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#content-team&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Content team&lt;/h2&gt;
&lt;p&gt;This month also saw a formation of a &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/launching-pad#team-content&quot;&gt;new team&lt;/a&gt; focused on producing audio/video/text content about Rust and people working on it and with it. These can be interviews, podcasts, etc.&lt;/p&gt;
&lt;p&gt;TC and Pete LeVasseur are the leads, and we also have Cameron Dershem, Xander Cesari, Tyler Mandry, Lori, and yours truly.&lt;/p&gt;
&lt;p&gt;We already have a few interviews planned for &lt;a href&#x3D;&quot;https://rustconf.com/&quot;&gt;RustConf 2025&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&#x27;s the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/206&quot;&gt;Content Team&#x27;s charter&lt;/a&gt;. Forming a new &quot;pseudo top-level team&quot; like this is something you propose to the Leadership Council in their repo&#x27;s issues. It then gets discussed at their meeting and decided on using the FCP process.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;build-std&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#build-std&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
build-std&lt;/h2&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/build-std.html&quot;&gt;build-std&lt;/a&gt; is an ongoing initiative to provide a blessed, stable process for building the Rust standard library you can use instead of the one we provide.&lt;/p&gt;
&lt;p&gt;There are many different motivations for this, for example supporting platforms where Rust doesn&#x27;t ship a precompiled library, optimizing it to known hardware or reducing its size (by e.g. removing features that are not necessary). This is of interest to the &lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;Rust for Linux project&lt;/a&gt;, among others.&lt;/p&gt;
&lt;p&gt;David Wood and Adam Gemmell wrote a comprehensive document describing its history, motivations, and past experiments, and they made a proposal for a minimal solution that they can start building.&lt;/p&gt;
&lt;p&gt;This has been regularly reviewed by a handful of people across the relevant teams. After many rounds of feedback, David feels the proposal is solid enough to open to a broader group.&lt;/p&gt;
&lt;p&gt;He&#x27;s shared it with more representatives from the Libs, crates.io, bootstrap, infra, compiler, and Cargo teams, as well as with members of the embedded working group. He&#x27;s also shared it with non-Cargo users e.g. the Rust for Linux folks (who are interested in building std without Cargo).&lt;/p&gt;
&lt;p&gt;Once this next round settles down, he will open the RFC (it will likely be several documents each focusing on a different stage of the effort).&lt;/p&gt;
&lt;h2 id&#x3D;&quot;rust-for-linux&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#rust-for-linux&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Rust for Linux&lt;/h2&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;Rust for Linux&lt;/a&gt; is an ongoing initiative to be able to write Linux kernel code in Rust. The motivations include memory safety and that a modern language may help to bring in more contributors.&lt;/p&gt;
&lt;p&gt;The focus in this second half of 2025 is to bring the unstable features RfL is using into stable Rust. Like Rust itself, Linux takes stability and backwards compatibility seriously. Building on stable Rust in the right fit.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;rfc-pass-pointers-to-const&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#rfc-pass-pointers-to-const&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
RFC: Pass pointers to &lt;code&gt;const&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Rust has support for &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html&quot;&gt;inline assembly&lt;/a&gt;. This lets you do things the language doesn&#x27;t have direct support for such as accessing CPU registers or reading/writing values to device-specific segments in memory to control their behavior (this is often used when writing drivers).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;asm!&lt;/code&gt; macro lets you interpolate constant values into the assembly code you&#x27;ve written, similar to how you can interpolate values into a format string:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-support z-macro z-rust&quot;&gt;println!&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;/span&gt;The meaning of life, universe and everything: &lt;span class&#x3D;&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-group z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;/span&gt; &lt;span class&#x3D;&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;42&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But constant values only get you so far. A common thing when writing assembly is to be able to pass &lt;em&gt;pointer&lt;/em&gt; values (e.g. pointer to a specific field of a struct you want to manipulate) around. But currently, &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.89.0/reference/inline-assembly.html#r-asm.operand-type.supported-operands.sym&quot;&gt;only integer constant expressions are allowed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alice Ryhl opened an RFC that &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3848&quot;&gt;allows specifying pointers in the &lt;code&gt;const&lt;/code&gt; operand&lt;/a&gt; too. Conceptually (and in assembly specifically) pointers could be thought of as just numbers that are interpreted as addresses to memory (although in Rust, the story is far more complex and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/ptr/index.html#provenance&quot;&gt;pointers are not the same thing as integers&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is now ready for feedback from the Lang team, so I opened a &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/347&quot;&gt;design meeting issue&lt;/a&gt;,  and got it scheduled for review and discussion.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;field-projections&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#field-projections&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Field projections&lt;/h3&gt;
&lt;p&gt;We also had a design meeting on &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;field projections&lt;/a&gt;. When you have a type behind a &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut&lt;/code&gt; reference, you can access its field &quot;directly&quot; as if the pointer type weren&#x27;t there:&lt;/p&gt;
&lt;pre data-lang&#x3D;&quot;rust&quot; class&#x3D;&quot;language-rust z-code&quot;&gt;&lt;code class&#x3D;&quot;language-rust&quot; data-lang&#x3D;&quot;rust&quot;&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-struct z-rust&quot;&gt;Position&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-variable z-other z-member z-rust&quot;&gt;x&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;f32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-variable z-other z-member z-rust&quot;&gt;y&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;/span&gt; &lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;f32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;
&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-entity z-name z-impl z-rust&quot;&gt;Position&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-entity z-name z-function z-rust&quot;&gt;get_x&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;/span&gt;&lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class&#x3D;&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt; &lt;span class&#x3D;&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class&#x3D;&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class&#x3D;&quot;z-storage z-type z-rust&quot;&gt;f32&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class&#x3D;&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class&#x3D;&quot;z-variable z-language z-rust&quot;&gt;self&lt;/span&gt;&lt;span class&#x3D;&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;/span&gt;x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-function z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;    &lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-source z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;/span&gt;&lt;span class&#x3D;&quot;z-meta z-block z-rust&quot;&gt;&lt;span class&#x3D;&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The language understands &lt;code&gt;Position&lt;/code&gt; is behind a pointer, calculates an offset to the field &lt;code&gt;x&lt;/code&gt;, and gives you that pointer back.&lt;/p&gt;
&lt;p&gt;There&#x27;s a long list of wrapper types where field access makes sense but where it&#x27;s not implemented because the semantics are different from the regular &lt;code&gt;Deref/DerefMut&lt;/code&gt; traits. For example: &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;, &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;, or the raw pointers &lt;code&gt;*const T&lt;/code&gt;/&lt;code&gt;*mut T&lt;/code&gt;. And of course custom types.&lt;/p&gt;
&lt;p&gt;Linux uses pinned values (&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; -- values that can&#x27;t move around in memory), raw pointers, and &lt;code&gt;MaybeUninit&lt;/code&gt; all over the place in addition to many custom fields that would greatly benefit from field projections.&lt;/p&gt;
&lt;p&gt;Benno Lossin, who owns the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rust-project-goals/2025h2/field-projections.html&quot;&gt;field projection goal&lt;/a&gt;, prepared a &lt;a href&#x3D;&quot;https://hackmd.io/@rust-lang-team/S1I1aEc_lx&quot;&gt;design&lt;/a&gt; to move this forward as a lang experiment. This was approved; we now have a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/145383&quot;&gt;field projection tracking issue&lt;/a&gt; as well as an &lt;a href&#x3D;&quot;https://github.com/BennoLossin/rust/tree/field-projections&quot;&gt;initial implementation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;reducing-codegen-size&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#reducing-codegen-size&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Reducing codegen size&lt;/h3&gt;
&lt;p&gt;The last Rust for Linux meeting got into a fascinating discussion about an ongoing need to reduce the size of the binary generated by rustc. There is functionality in the Rust standard library that is not used in the kernel but that still takes up space, e.g. support for 128-bit integer types, the &lt;code&gt;alloc&lt;/code&gt; crate, and the floating point formatting code. Some are not relevant while others (like alloc) are reimplemented by Rust for Linux.&lt;/p&gt;
&lt;p&gt;There&#x27;s an interest in being able to compile certain features out (using &lt;code&gt;cfg&lt;/code&gt;) and/or having a minimal core that projects can build on top of.&lt;/p&gt;
&lt;p&gt;This is something I plan to gather more information about and follow-up on.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;kangrejos-2025&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#kangrejos-2025&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Kangrejos 2025&lt;/h3&gt;
&lt;p&gt;Due to their warm invitation, and supported by the council and funding from the Project Priorities budget, I&#x27;ll be joining the Rust for Linux team at their &lt;a href&#x3D;&quot;https://kangrejos.com/&quot;&gt;Kangrejos workshop&lt;/a&gt; in Spain in September. I hope to get to know the Rust for Linux people better in a less formal environment, get more hand-on experience with what they&#x27;re doing and the challenges they&#x27;re facing, and be the conduit for even more collaboration between them and the Rust Project.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;conferences&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#conferences&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Conferences&lt;/h2&gt;
&lt;p&gt;September is going to be an &lt;em&gt;eventful&lt;/em&gt; (if you pardon the pun) month!&lt;/p&gt;
&lt;p&gt;First up, &lt;a href&#x3D;&quot;https://rustconf.com/&quot;&gt;RustConf 2025&lt;/a&gt; took place in Seattle, Washington, USA (from 2025-09-02 to 2025-09-05). RustConf offered virtual tickets so people could attend online as well.&lt;/p&gt;
&lt;p&gt;Second is the &lt;a href&#x3D;&quot;https://rustcc.cn/2025conf/&quot;&gt;RustGlobal China and RustChinaConf 2025&lt;/a&gt; in Hangzhou, China (from 2025-09-13 to 2025-09-14)&lt;/p&gt;
&lt;p&gt;And finally the aforementioned &lt;a href&#x3D;&quot;https://kangrejos.com/&quot;&gt;Rust for Linux workshop, Kangrejos&lt;/a&gt; in Oviedo, Spain (from from 2025-09-17 to 2025-09-18).&lt;/p&gt;
&lt;p&gt;If nothing else, look forward to a good batch of talks being posted online in the coming weeks and months!&lt;/p&gt;
&lt;h2 id&#x3D;&quot;stats&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#stats&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Stats&lt;/h2&gt;
&lt;p&gt;Total words of meeting minutes written: 138.6k (June - August).&lt;/p&gt;
&lt;p&gt;Meetings attended: 31&lt;/p&gt;
&lt;p&gt;Total words written: 46k&lt;/p&gt;
&lt;p&gt;Average (mean) word count per team meeting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cargo: 1.9k&lt;/li&gt;
&lt;li&gt;Lang triage: 2.5k&lt;/li&gt;
&lt;li&gt;Libs: 5.9k&lt;/li&gt;
&lt;li&gt;Leadership council: 2.9k&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/05/program-management-update-2025-07/#fun-stats&quot;&gt;June and July stats in the previous update&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Tomas Sedovic</name>
        </author>
    </entry>
    <entry>
        <title>Leadership Council update — September 2025</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/10/leadership-council-update/" type="text/html" title="Leadership Council update — September 2025" />
        <published>2025-09-10T00:00:00+00:00</published>
        <updated>2025-09-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/10/leadership-council-update/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/10/leadership-council-update/">&lt;p&gt;Hello again from the Rust Leadership Council! We wanted to share an update on what the Council has been working on since &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/06/11/leadership-council-update/&quot;&gt;our last update&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;accomplishments-so-far&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#accomplishments-so-far&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Accomplishments so far&lt;/h2&gt;
&lt;h3 id&#x3D;&quot;content-team&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#content-team&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Content team&lt;/h3&gt;
&lt;p&gt;Pete LeVasseur and TC created the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/launching-pad#team-content&quot;&gt;Content team&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/206&quot;&gt;leadership-council#206&lt;/a&gt;). The team is charged with producing publishable content that is of interest and benefit to the Rust Project and its community including blog posts, videos, podcasts, etc. The team is talking with people in the Project and the community to share their knowledge and experience, and most immediately, the team has been organizing interviews that will be recorded at RustConf.&lt;/p&gt;
&lt;p&gt;We are looking forward to soon seeing what they produce.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;all-hands-2026&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#all-hands-2026&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
All-hands 2026&lt;/h3&gt;
&lt;p&gt;The Council approved the 2026 All-Hands event (&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/192&quot;&gt;leadership-council#192&lt;/a&gt;). This event is an opportunity for Project members to meet in person to to collaborate on the future of Rust. The event is scheduled to occur again with &lt;a href&#x3D;&quot;https://2026.rustweek.org/&quot;&gt;RustWeek 2026&lt;/a&gt; in The Netherlands on May 21-23. More information will be coming soon.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;additional-items&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#additional-items&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Additional items&lt;/h3&gt;
&lt;p&gt;And a few other items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coordinated with the mods team on the creation of the venue mods team, which is responsible for moderating venues such as GitHub and Zulip. &lt;a href&#x3D;&quot;https://github.com/rust-lang/team/pull/1874&quot;&gt;team#1874&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Approved the renewal of the compiler ops contract. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/181&quot;&gt;leadership-council#181&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Approved substitutes for the July and August Foundation board meetings. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/187&quot;&gt;leadership-council#187&lt;/a&gt; &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/194&quot;&gt;leadership-council#194&lt;/a&gt; &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/201&quot;&gt;leadership-council#201&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coordinated with the RustConf organizers on how to distribute free or reduced-price tickets for Project members. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/190&quot;&gt;leadership-council#190&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;a href&#x3D;&quot;https://github.com/jieyouxu&quot;&gt;@jieyouxu&lt;/a&gt; to the team-repo-admins, who are responsible for updating the Rust team memberships and resources. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/205&quot;&gt;leadership-council#205&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coordinated with the infra team to set up the email alias for &lt;code&gt;contact@rust-lang.org&lt;/code&gt; as the contact address of the rust-lang GitHub organization. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/202&quot;&gt;leadership-council#202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coordinated with the social media team to approve the creation of an official LinkedIn page for Rust, now up at &lt;a href&#x3D;&quot;https://www.linkedin.com/company/rust-lang/&quot;&gt;https://www.linkedin.com/company/rust-lang/&lt;/a&gt;. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/208&quot;&gt;leadership-council#208&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Approved a travel grant for &lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;@tomassedovic&lt;/a&gt; to go to &lt;a href&#x3D;&quot;https://kangrejos.com/&quot;&gt;Kangrejos 2025&lt;/a&gt;, the Rust for Linux Workshop. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/217&quot;&gt;leadership-council#217&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;ongoing-work&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#ongoing-work&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Ongoing work&lt;/h2&gt;
&lt;p&gt;There are various efforts underway on projects that have had significant discussions since the last update, but have not concluded with any decisions, yet.
They are:&lt;/p&gt;
&lt;h3 id&#x3D;&quot;rust-society&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#rust-society&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Rust Society&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/jamesmunns&quot;&gt;@JamesMunns&lt;/a&gt; has continued to develop the concept of the &quot;Rust Society&quot;. The Rust Society will be an organizational structure for user groups (commonly called &quot;Special Interest Groups&quot;, &quot;Working Groups&quot;, etc. in other organizations) outside of the Rust Project, but administrated by the Rust Project via a new &quot;T-Society-Admins&quot; subteam of the Launching Pad.&lt;/p&gt;
&lt;p&gt;This structure is intended to be the long-term home for existing Domain Working Groups, which will be retired as a concept after this work is complete. In the future, this structure intends to offer &quot;open enrollment&quot; for any interested group of users.&lt;/p&gt;
&lt;p&gt;See the latest &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/159#issuecomment-3237633417&quot;&gt;proposed charter&lt;/a&gt; for how the Rust Society will function.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;foundation&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#foundation&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Foundation&lt;/h3&gt;
&lt;p&gt;There have been continual discussions with the Foundation on various topics. We are excited to welcome &lt;a href&#x3D;&quot;https://github.com/LoriLorusso&quot;&gt;Lori Lorusso&lt;/a&gt;, who has started as the Foundation&#x27;s new &lt;a href&#x3D;&quot;https://rustfoundation.org/media/welcoming-lori-lorusso-the-rust-foundations-new-director-of-outreach/&quot;&gt;Director of Outreach&lt;/a&gt;. She hit the ground running and has been helping to coordinate with the Foundation and plan upcoming projects.&lt;/p&gt;
&lt;p&gt;We have been discussing with the Foundation the possibilities for continuing the budget for &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/183&quot;&gt;project priorities&lt;/a&gt; in 2026. For 2024 and 2025, this budget was made possible by a generous unrestricted grant from Microsoft. We are looking for ways that we can continue this budget so as to continue important programs such as travel grants, the all-hands, project grants, &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/151&quot;&gt;program management&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/181&quot;&gt;compiler operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We discussed the condition of the 2025 travel grant budget (&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/182&quot;&gt;leadership-council#182&lt;/a&gt;). Many Project members used most of their $2,000 limit during the all-hands earlier this year, and we had concerns that members would not be able to attend other events like RustConf. Ultimately we decided to keep with the current policy and will be working on figuring out what our possible option might be for funding this in 2026.&lt;/p&gt;
&lt;p&gt;Finally, on the top of our minds is the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/197&quot;&gt;Foundation three-year strategy&lt;/a&gt;. We have a keen interest in working with the Foundation staff to ensure that we are all focused together on the best objectives. We hope to share more on this soon.&lt;/p&gt;
&lt;h3 id&#x3D;&quot;additional-items-1&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#additional-items-1&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Additional items&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We have been discussing a policy for better management of the alumni status of Project members. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/pull/218&quot;&gt;leadership-council#218&lt;/a&gt; &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/175&quot;&gt;leadership-council#175&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We had some discussions on who is responsible for how stable and unstable features relate to the stable releases. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/180&quot;&gt;leadership-council#180&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The September 2025 council elections have started. &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/211&quot;&gt;leadership-council#211&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The 2025 Foundation director elections have started. &lt;a href&#x3D;&quot;https://github.com/tomassedovic&quot;&gt;@tomassedovic&lt;/a&gt; will be facilitating this year. &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/&quot;&gt;https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We launched the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/06/30/2025-leadership-council-survey/&quot;&gt;2025 Leadership Council Survey&lt;/a&gt;, and will be posting the results soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;following-our-work&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#following-our-work&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Following our work&lt;/h2&gt;
&lt;p&gt;As you can see from the many links above, the work of the Council happens mostly in public on GitHub issues posted in &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues&quot;&gt;our repository&lt;/a&gt;. The items on our meeting agendas are drawn from these. After discussing an item, we summarize that discussion and any shared &lt;a href&#x3D;&quot;https://aturon.github.io/tech/2018/05/25/listening-part-1/&quot;&gt;rationales&lt;/a&gt; on the issue. When we make decisions, we propose on the issue a &quot;final comment period&quot; (FCP), and as with all FCPs in the Project, we&#x27;re interested in and review any feedback that people have before or during this final comment period.&lt;/p&gt;
&lt;p&gt;To follow our work in real time, watch our repository.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;meeting-minutes&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#meeting-minutes&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Meeting minutes&lt;/h2&gt;
&lt;p&gt;We publish minutes from all Council meetings to the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/tree/main/minutes&quot;&gt;Leadership Council repo&lt;/a&gt;. Links to the minutes since our last update are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-06-06.md&quot;&gt;June 6, 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-06-20.md&quot;&gt;June 20, 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-07-04.md&quot;&gt;July 4, 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-07-18.md&quot;&gt;July 18, 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-08-08.md&quot;&gt;August 8, 2025&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/minutes/sync-meeting/2025-08-15.md&quot;&gt;August 15, 2025&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    <entry>
        <title>Crossing the streams: Project + Foundation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/09/04/crossing-the-streams/" type="text/html" title="Crossing the streams: Project + Foundation" />
        <published>2025-09-04T00:00:00+00:00</published>
        <updated>2025-09-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/09/04/crossing-the-streams/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/09/04/crossing-the-streams/">&lt;p&gt;For those of you who are fans of the original Ghostbusters movie, the phrase, &quot;Who you gonna call? (Ghostbusters),&quot; may be the first thing you think of but I want to focus on the line said by Dr. Peter Venkman, played by the one and only Bill Murray, &quot;Cross the streams!&quot; Originally the Ghostbusters were warned, &quot;Don&#x27;t cross the streams&quot; — or they would have a total cataclysmic event — but at the end of the movie, to defeat Gozar, they needed to risk everything by crossing the streams, and it worked; Gozar was annihilated and the Ghostbusters (and NYC) survived. You may be thinking, &quot;what does this have to do with the Rust Project or the Rust Foundation?&quot; Don&#x27;t worry, I got you!&lt;/p&gt;
&lt;p&gt;As the &lt;a href&#x3D;&quot;https://rustfoundation.org/media/welcoming-lori-lorusso-the-rust-foundations-new-director-of-outreach/&quot;&gt;Director of Outreach&lt;/a&gt; my job is twofold: providing both &lt;em&gt;inreach&lt;/em&gt; into the Project and &lt;em&gt;outreach&lt;/em&gt; to the larger tech community and users of Rust. As part of my inreach function I have the privilege to work with members of the Rust Project, sitting in on a variety of meetings to find the Project&#x27;s needs and find opportunities for the Foundation to solve problems. I am working with the Project Directors and the Leadership Council as a liaison to the Foundation and as a resource for attracting funds for the Project to allocate via the Project Priorities Budget, and I will be working with Project leadership to retool the Project Grant Program so it can better serve the Project.&lt;/p&gt;
&lt;p&gt;Along similar lines is the &lt;em&gt;outreach&lt;/em&gt; component of my role — to work with the broader tech community to bring them to our table. Several popular open source projects have key parts built in Rust, including &lt;a href&#x3D;&quot;https://valkey.io/&quot;&gt;Valkey&lt;/a&gt;, &lt;a href&#x3D;&quot;https://bootc-dev.github.io/&quot;&gt;bootc&lt;/a&gt;, &lt;a href&#x3D;&quot;https://linkerd.io/&quot;&gt;Linkerd&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://openebs.io/&quot;&gt;OpenEBS&lt;/a&gt; — which are all part of the Cloud Native Computing Foundation (CNCF) housed at the Linux Foundation. These projects use Rust but may or may not have formal ties to the Project itself or to the Foundation. My goal is to go outside and find more projects like these and introduce them to people here so they can share their experiences coding in Rust and create not only a feedback loop as end users but build a relationship with the Project — potentially becoming members themselves of the Project and the Foundation. The more we can share how Rust is being used, and make the resources available to support that use, the better.&lt;/p&gt;
&lt;p&gt;In fact, the Project has long done this kind of work, e.g. with its deep and productive collaborations with &lt;a href&#x3D;&quot;https://rust-for-linux.com/&quot;&gt;Rust for Linux&lt;/a&gt; and &lt;a href&#x3D;&quot;https://bevy.org/&quot;&gt;Bevy&lt;/a&gt;. I&#x27;m excited to &quot;stand on the shoulders of giants&quot; and to build on these successes.&lt;/p&gt;
&lt;p&gt;All of this sounds great but how does it relate to &quot;crossing the streams?&quot; I&#x27;m excited to say that I have in fact crossed the streams and am now a member of the Rust Project&#x27;s newly formed &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/launching-pad#team-content&quot;&gt;Content Team&lt;/a&gt;. That in turn has made me a member of the Rust Project itself! I&#x27;m grateful to TC and Pete LeVasseur for imagining this team, making it a reality, and then welcoming me on board. Our first journey into content creation is at RustConf where we are sitting down and interviewing people within the Project and our ecosystem to post on the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/&quot;&gt;Rust blog&lt;/a&gt;, YouTube, and other online venues. You can find the team&#x27;s charter and read more about our goals &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/issues/206&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being a part of this team was the icing on the cake for me. Being a member of the Content Team gives me the opportunity to contribute directly to the work of the Project while having &quot;insider access&quot; to the Project&#x27;s ecosystem. We get to share not only &quot;how the sausage is made&quot;, but we get to tell the stories of maintainers, contributors, and end users while showcasing how the work being done in the Project affects the future of the language and its widespread adoption across many industries.&lt;/p&gt;
&lt;p&gt;The TL;DR (too late) is that by crossing the streams between my job at the Foundation and my volunteer work with the Rust Project Content Team I am hoping that we are setting ourselves up for success. To me success looks like developing a clearer understanding of the Foundation&#x27;s role in supporting the Project, improving communication between the Project and the Foundation as we work together to generate and execute on solutions to obstacles facing the Project, and telling the stories of end users and other projects that are using Rust to advance the open source economy and ecosystem.&lt;/p&gt;
&lt;p&gt;If you want to chat you can find me on Zulip!&lt;/p&gt;
</content>

        <author>
            <name>Lori Lorusso</name>
        </author>
    </entry>
    <entry>
        <title>Removing inactive members from our GitHub organizations</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/08/26/removing-inactive-members-from-github-organizations/" type="text/html" title="Removing inactive members from our GitHub organizations" />
        <published>2025-08-26T00:00:00+00:00</published>
        <updated>2025-08-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/08/26/removing-inactive-members-from-github-organizations/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/08/26/removing-inactive-members-from-github-organizations/">&lt;p&gt;The Infrastructure Team is cleaning up GitHub organizations managed by the Rust Project
(&lt;a href&#x3D;&quot;https://github.com/rust-lang&quot;&gt;rust-lang&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-dev-tools&quot;&gt;rust-dev-tools&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang-deprecated&quot;&gt;rust-lang-deprecated&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang-nursery&quot;&gt;rust-lang-nursery&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt;)
by removing members who are not part of any team within those organizations.&lt;/p&gt;
&lt;p&gt;If you are currently a member of one of these GitHub organizations, you might receive a removal email from GitHub that notifies you that you have been removed from some of them.
If you are currently an active Rust team member, then do not worry! Your access to the &lt;code&gt;rust-lang&lt;/code&gt; organization won&#x27;t be affected by this, and at most we will remove you from some of the legacy organizations that are no longer in active use.&lt;/p&gt;
&lt;p&gt;If you contributed to Rust in the past and you are no longer an active contributor, then we will likely remove you from all of the mentioned GitHub organizations.
We understand that some people publicly displayed their membership in the &lt;code&gt;rust-lang&lt;/code&gt; organization as a recognition of past contributions.
As an alternative, your contributor status is shown on the official &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance#teams&quot;&gt;teams page&lt;/a&gt; of the Rust website, which includes an alumni section for each team.
Please reach out if your past team memberships are not reflected on this page. Also, we want to take this opportunity to thank you for the time you spent in the past making Rust what it is today!&lt;/p&gt;
&lt;p&gt;If you have been removed from an organization you think you should be part of, or you have any other questions, please reach out on our chat platform, &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/channel/242791-t-infra/topic/removing.20inactive.20members.20from.20the.20org&quot;&gt;Zulip&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;archived-teams&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#archived-teams&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Archived teams&lt;/h2&gt;
&lt;p&gt;Unfortunately, archived teams are not shown on the website&#x27;s governance page, so previous Rust Project
members who were part of archived teams only won&#x27;t be listed in any alumni section.&lt;/p&gt;
&lt;p&gt;We created a &lt;a href&#x3D;&quot;https://github.com/rust-lang/www.rust-lang.org/issues/2181&quot;&gt;GitHub issue&lt;/a&gt; to track this,
but in the meantime we would like to thank these contributors in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/alexheretic&quot;&gt;alexheretic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/am-1t&quot;&gt;am-1t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/arora-aman&quot;&gt;arora-aman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/autozimu&quot;&gt;autozimu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/avadacatavra&quot;&gt;avadacatavra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/azhng&quot;&gt;azhng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/azuremarker&quot;&gt;azuremarker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/basil-cow&quot;&gt;basil-cow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/bawerd&quot;&gt;bawerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/benlewis-seequent&quot;&gt;benlewis-seequent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/chrispardy&quot;&gt;chrispardy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/comex&quot;&gt;comex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/detrumi&quot;&gt;detrumi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/djcarpe&quot;&gt;djcarpe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gnunicorn&quot;&gt;gnunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/hameerabbasi&quot;&gt;hameerabbasi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/hdhoang&quot;&gt;hdhoang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/hkmatsumoto&quot;&gt;hkmatsumoto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/inquisitivecrystal&quot;&gt;inquisitivecrystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jamespatrickgill&quot;&gt;jamespatrickgill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jasonwilliams&quot;&gt;jasonwilliams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jduchniewicz&quot;&gt;jduchniewicz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jechasteen&quot;&gt;jechasteen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jenniferwills&quot;&gt;jenniferwills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/logmosier&quot;&gt;logmosier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/lucasbullen&quot;&gt;lucasbullen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/markmccaskey&quot;&gt;markmccaskey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/mstallmo&quot;&gt;mstallmo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/mystor&quot;&gt;mystor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nagashi&quot;&gt;nagashi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nathanwhit&quot;&gt;nathanwhit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/null-sleep&quot;&gt;null-sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/o0ignition0o&quot;&gt;o0ignition0o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/pcwalton&quot;&gt;pcwalton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/peschkaj&quot;&gt;peschkaj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/qmx&quot;&gt;qmx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/roxelo&quot;&gt;roxelo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/seanchen1991&quot;&gt;seanchen1991&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/stupremee&quot;&gt;stupremee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/tamuhey&quot;&gt;tamuhey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/valgrimm&quot;&gt;valgrimm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/vlad20012&quot;&gt;vlad20012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/whitequark&quot;&gt;whitequark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/zaharidichev&quot;&gt;zaharidichev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;hidden-teams&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#hidden-teams&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Hidden teams&lt;/h2&gt;
&lt;p&gt;Some Rust teams, such as marker teams and some working groups are not shown in
the website&#x27;s governance page.&lt;/p&gt;
&lt;p&gt;We would like to thank the contributors who only belong to these teams in this
post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/adamgreig&quot;&gt;adamgreig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/AlexEne&quot;&gt;AlexEne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/andre-richter&quot;&gt;andre-richter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/AngelOnFira&quot;&gt;AngelOnFira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Dajamante&quot;&gt;Dajamante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/eldruin&quot;&gt;eldruin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/hargoniX&quot;&gt;hargoniX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/korken89&quot;&gt;korken89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kvark&quot;&gt;kvark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/levex&quot;&gt;levex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/luqmana&quot;&gt;luqmana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Nashenas88&quot;&gt;Nashenas88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/retep998&quot;&gt;retep998&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ryankurte&quot;&gt;ryankurte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/thejpster&quot;&gt;thejpster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/therealprof&quot;&gt;therealprof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/tromey&quot;&gt;tromey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id&#x3D;&quot;members-without-contact&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#members-without-contact&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Members without contact&lt;/h2&gt;
&lt;p&gt;Some past members are not listed in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/team&quot;&gt;rust-lang/team&lt;/a&gt; repo, so we
are unable to add them to the alumni sections and list them in the website.&lt;/p&gt;
&lt;p&gt;If you are one of these members and want to be listed in the alumni sections of your previous teams,
please open a PR in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/team&quot;&gt;rust-lang/team&lt;/a&gt; repo.&lt;/p&gt;
&lt;p&gt;We would like to thank these contributors in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/aajtodd&quot;&gt;aajtodd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/aatxe&quot;&gt;aatxe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/adrq&quot;&gt;adrq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ALCC01&quot;&gt;ALCC01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/alecmocatta&quot;&gt;alecmocatta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/andrewtj&quot;&gt;andrewtj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/anp&quot;&gt;anp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/anxiousmodernman&quot;&gt;anxiousmodernman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/aravind-pg&quot;&gt;aravind-pg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/arazabishov&quot;&gt;arazabishov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ashfordneil&quot;&gt;ashfordneil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/autodidaddict&quot;&gt;autodidaddict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/azdle&quot;&gt;azdle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/blitzerr&quot;&gt;blitzerr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/bluss&quot;&gt;bluss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/brendanzab&quot;&gt;brendanzab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/cassiersg&quot;&gt;cassiersg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/championshuttler&quot;&gt;championshuttler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/chrisvittal&quot;&gt;chrisvittal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/CryZe&quot;&gt;CryZe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dhuseby&quot;&gt;dhuseby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dibsonmuad&quot;&gt;dibsonmuad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Diggsey&quot;&gt;Diggsey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dirtybit&quot;&gt;dirtybit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dustypomerleau&quot;&gt;dustypomerleau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/dyxushuai&quot;&gt;dyxushuai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ehsanmok&quot;&gt;ehsanmok&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ELD&quot;&gt;ELD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/emberian&quot;&gt;emberian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ereichert&quot;&gt;ereichert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/fairingrey&quot;&gt;fairingrey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/flaper87&quot;&gt;flaper87&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/fmckeogh&quot;&gt;fmckeogh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gaurikholkar-zz&quot;&gt;gaurikholkar-zz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gavento&quot;&gt;gavento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/GeertVL-zz&quot;&gt;GeertVL-zz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gereeter&quot;&gt;gereeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/giannicic&quot;&gt;giannicic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/glandium&quot;&gt;glandium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gruberb&quot;&gt;gruberb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/gsollazzo&quot;&gt;gsollazzo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/h1467792822&quot;&gt;h1467792822&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Haggus&quot;&gt;Haggus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/hrvolapeter&quot;&gt;hrvolapeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ibabushkin&quot;&gt;ibabushkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/inejge&quot;&gt;inejge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jbcden&quot;&gt;jbcden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jdm&quot;&gt;jdm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jethrogb&quot;&gt;jethrogb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jkelleyrtp&quot;&gt;jkelleyrtp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jkordish&quot;&gt;jkordish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jkozlowski&quot;&gt;jkozlowski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/JoeyEremondi&quot;&gt;JoeyEremondi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/JoshMcguigan&quot;&gt;JoshMcguigan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jroesch&quot;&gt;jroesch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jrozner&quot;&gt;jrozner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/JuanPotato&quot;&gt;JuanPotato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/justahero&quot;&gt;justahero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/khaledkbadr&quot;&gt;khaledkbadr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/KiChjang&quot;&gt;KiChjang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kiljacken&quot;&gt;kiljacken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kjeremy&quot;&gt;kjeremy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kleimkuhler&quot;&gt;kleimkuhler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/koute&quot;&gt;koute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kulshrax&quot;&gt;kulshrax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/kupiakos&quot;&gt;kupiakos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/leoyvens&quot;&gt;leoyvens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/lf&quot;&gt;lf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/lilyball&quot;&gt;lilyball&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/listochkin&quot;&gt;listochkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/lloydmeta&quot;&gt;lloydmeta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Lubits&quot;&gt;Lubits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/marcusklaas&quot;&gt;marcusklaas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/memoryruins&quot;&gt;memoryruins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Michael-F-Bryan&quot;&gt;Michael-F-Bryan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/mikhail-m1&quot;&gt;mikhail-m1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/mitsuhiko&quot;&gt;mitsuhiko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nbp&quot;&gt;nbp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/NikVolf&quot;&gt;NikVolf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nox&quot;&gt;nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/orenwf&quot;&gt;orenwf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/orium&quot;&gt;orium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/pambihira&quot;&gt;pambihira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/pepyakin&quot;&gt;pepyakin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/PramodBisht&quot;&gt;PramodBisht&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rholderfield&quot;&gt;rholderfield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ritiek&quot;&gt;ritiek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rolftimmermans&quot;&gt;rolftimmermans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/sanxiyn&quot;&gt;sanxiyn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/sapphire-arches&quot;&gt;sapphire-arches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/soniasingla&quot;&gt;soniasingla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/stokhos&quot;&gt;stokhos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/strega-nil&quot;&gt;strega-nil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/sunjay&quot;&gt;sunjay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/tinaun&quot;&gt;tinaun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/tomaka&quot;&gt;tomaka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/totsteps&quot;&gt;totsteps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/treiff&quot;&gt;treiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/tynril&quot;&gt;tynril&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/uberjay&quot;&gt;uberjay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/vadimcn&quot;&gt;vadimcn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Veetaha&quot;&gt;Veetaha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/wain303009&quot;&gt;wain303009&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/wirelessringo&quot;&gt;wirelessringo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/xmonader&quot;&gt;xmonader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Xylakant&quot;&gt;Xylakant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Yarn&quot;&gt;Yarn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Marco Ieni</name>
        </author>
    </entry>
    <entry>
        <title>Electing new Project Directors 2025</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/" type="text/html" title="Electing new Project Directors 2025" />
        <published>2025-08-20T00:00:00+00:00</published>
        <updated>2025-08-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/">&lt;p&gt;Today we are launching the process to elect three Project Directors to the Rust Foundation Board of Directors. This is the second round of slots, following from &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/09/06/electing-new-project-directors/&quot;&gt;last year&#x27;s election&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will briefly explain the goals and procedures here, but this is mostly copy-pasted from &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2024/09/06/electing-new-project-directors/&quot;&gt;last year&#x27;s post&lt;/a&gt; and the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/policies/project-directorship/election-process.md&quot;&gt;official process documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We ask all Project members to begin working with their Leadership Council representative to nominate potential Project Directors. See the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2025/08/20/electing-new-project-directors-2025/#candidate-gathering&quot;&gt;candidate gathering&lt;/a&gt; section for more details. Nominations are due by September 18, 2025.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;what-are-project-directors&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#what-are-project-directors&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
What are Project Directors?&lt;/h2&gt;
&lt;p&gt;The Rust Foundation Board of Directors has five seats reserved for Project Directors. These Project Directors serve as representatives of the Rust Project itself on the Board. Like all directors on the Foundation board, the Project Directors are elected by the entity they represent, which in the case of the Rust Project means they are elected by the Rust Leadership Council. Project Directors serve for a term of two years and will have staggered terms. This year we will appoint three directors and next year we will appoint two directors.&lt;/p&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://github.com/rust-lang/leadership-council/blob/main/roles/rust-foundation-project-director.md&quot;&gt;role description&lt;/a&gt; document for more details about what is involved in being a Project Director.&lt;/p&gt;
&lt;p&gt;The current Project Directors are Carol Nichols, Ryan Levick, Santiago Pastorino, Scott McMurray, and Jakob Degen. This year, Santiago Pastorino, Scott McMurray, and Jakob Degen&#x27;s seats are open for election.&lt;/p&gt;
&lt;p&gt;We want to make sure the Project Directors can effectively represent the Project as a whole, so we are soliciting input from everyone on the team. The elections process will go through two phases: 1) candidate gathering and 2) election. Read on for more detail about how these work.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;candidate-gathering&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#candidate-gathering&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Candidate gathering&lt;/h2&gt;
&lt;p&gt;The first phase is beginning right now. In this phase, we are inviting the members of all of the top level Rust teams and their subteams to nominate people who would make good Project Directors. The goal is to bubble these up to the Council through each of the top-level teams. You should be hearing from your Council representative soon with more details, but if not, feel free to reach out to that person directly.&lt;/p&gt;
&lt;p&gt;Each team is encouraged to suggest candidates. Since we are electing three directors, it would be ideal for teams to nominate at least two candidates. Nominees can be anyone in the Project and do not have to be a member of the team who nominates them.&lt;/p&gt;
&lt;p&gt;The candidate gathering process will be open until September 18, at which point each team&#x27;s Council representative will share that team&#x27;s nominations and reasoning with the whole Leadership Council. At this point, the Council will confirm with the nominees that they are willing to accept the nomination and fill the role of Project Director if selected. Then the Council will publish the set of candidates.&lt;/p&gt;
&lt;p&gt;This then starts a period where members of the Rust Project are invited to share feedback on the nominees with the Council. This feedback can include reasons why a nominee would make a good Project Director or concerns the Council should be aware of.&lt;/p&gt;
&lt;p&gt;The Council will announce the set of nominees by September 19 and the feedback period will last until October 2. Once this time has passed, we will move on to the election phase.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;election&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#election&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Election&lt;/h2&gt;
&lt;p&gt;The Council will meet on October 3 to complete the election process. In this meeting we will discuss each candidate and once we have done this the facilitator will propose a set of three to be the new Project Directors. The facilitator puts this to a vote, and if the Council unanimously agrees with the proposed set of candidates then the process is complete. Otherwise, we will give another opportunity for council members to express their objections and we will continue with another proposal. This process repeats until we find a set of nominees to whom the Council can unanimously consent. The Council will then confirm these nominees through an official vote delivered to the Foundation.&lt;/p&gt;
&lt;p&gt;Once this is done, we will announce the new Project Directors. In addition, we will contact each of the nominees, including those who were not elected, to offer feedback. For those who accept feedback we will follow up to tell them a little bit more about what we saw as their strengths and opportunities for growth to help them serve better in similar roles in the future.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;timeline&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#timeline&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Timeline&lt;/h2&gt;
&lt;p&gt;This process will continue through all of September and into October. Below are the key dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Candidate nominations due: September 18&lt;/li&gt;
&lt;li&gt;Candidates published: September 19&lt;/li&gt;
&lt;li&gt;Feedback period: September 19 - October 2&lt;/li&gt;
&lt;li&gt;Election meeting: October 3&lt;/li&gt;
&lt;li&gt;First board meeting starting the new term: October 14&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the election meeting happens, the Rust Leadership Council will announce the results and the new Project Directors will assume their responsibilities.&lt;/p&gt;
&lt;h2 id&#x3D;&quot;acknowledgments&quot;&gt;&lt;a class&#x3D;&quot;anchor&quot; href&#x3D;&quot;#acknowledgments&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;/a&gt;
Acknowledgments&lt;/h2&gt;
&lt;p&gt;A number of people have been involved in designing and launching this election process and we wish to extend a heartfelt thanks to all of them!&lt;/p&gt;
&lt;p&gt;We&#x27;d especially like to thank Eric Holk, Ryan Levick, and TC for helping to improve our process.&lt;/p&gt;
</content>

        <author>
            <name>Tomas Sedovic</name>
        </author>
    </entry>
</feed>
