<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 09 Dec 2024 05:52:17 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Day 7: グレースピリオド ~RCUの動作原理~]]></title><description><![CDATA[
 RCUの動作原理を知る
今日に至るまで、並行処理の基礎を勉強してきた。これからはRCUのメカニズムを勉強していく。今日はグレースピリオド(Grace Period)という概念から勉強していく。

 RCUの概要
RCUの簡易的な説明をする。

RCUは保護するデータのポインタを持っている
RCUの読み込み時


rcu_read_lock()という関数を呼ぶ(後述)

rcu_dereference()でRCUで保護しているポインタを取得する

rcu_read_unlock()という関数を呼ぶ(後述)


RCUの書き込み時

新しいデータを格納するためのメモリを確保する
既存のデ...]]></description><link>https://zenn.dev/labbase_sano/articles/83d264d50a8ab8</link><guid isPermaLink="true">https://zenn.dev/labbase_sano/articles/83d264d50a8ab8</guid><pubDate>Sun, 08 Dec 2024 17:53:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JKRNs0qv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Day%25207%253A%2520%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2594%25E3%2583%25AA%25E3%2582%25AA%25E3%2583%2589%2520%7ERCU%25E3%2581%25AE%25E5%258B%2595%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sano%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0Mjc3M2M5MjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sano🐡</dc:creator></item><item><title><![CDATA[Tauri 2.0で使えるRust UIテンプレートの比較]]></title><description><![CDATA[この記事はRust Advent Calendar 2024シリーズ2の9日目の記事です。
Rustでデスクトップ/モバイルアプリを製作するソリューションの一つとしてTauriがあります。
10月には、2.0がリリースされました🎉
そんなTauriでUIを実装する際には、選択肢として、次の3つがあります。

Rust
TypeScript / JavaScript
.NET

せっかくなので、UIもRustを使いたいですよね。となると、現状では4つのテンプレートから選択することになります。

Vanilla
Yew
Leptos
Sycamore

Vanillaは「自分でなんとかします...]]></description><link>https://zenn.dev/tkzwhr/articles/tauri-rust-frontend</link><guid isPermaLink="true">https://zenn.dev/tkzwhr/articles/tauri-rust-frontend</guid><pubDate>Sun, 08 Dec 2024 15:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f7pligHe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258BRust%2520UI%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkzwhr%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2ZmI0MDc3YTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tkzwhr</dc:creator></item><item><title><![CDATA[RustでBrainfuckのJITコンパイルをする]]></title><description><![CDATA[
 これは何？[1]

これは理情 Advent Calendar 2024の８日目の記事です。他の人の記事も読んでいって下さい！
https://adventar.org/calendars/10445

 はじめに
この記事では、RustでBrainfuckのインタプリタとJITコンパイラを作り、実行時間を比較します。その後、簡単な最適化を行います。Rustで簡単なJITコンパイラを作ってみたい人の参考になれば幸いです。

 JITコンパイラとは？
JITコンパイラとは、実行時に機械語へのコンパイルを行うコンパイラのことです。実行時にコンパイルをするため、実行するまで分からない動的な...]]></description><link>https://zenn.dev/taka2/articles/0fdd88d6b5ffbc</link><guid isPermaLink="true">https://zenn.dev/taka2/articles/0fdd88d6b5ffbc</guid><pubDate>Sun, 08 Dec 2024 13:58:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VTvZzNe4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Brainfuck%25E3%2581%25AEJIT%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taka2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lRVzdSalFueHkyeF9QcHY4bktudDZiMmdqTzhLZ3lWOFFWbFlUPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taka2</dc:creator></item><item><title><![CDATA[ABC383:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 383のA~E問題をRustで解いた際の解法をまとめました。

 A問題

問題

https://atcoder.jp/contests/abc383/tasks/abc383_a

解説

現在の時刻 now_timeから次の時刻tまでの時間差分のリットル数の水を減少し、その後、水をvリットル追加します。この操作をn回繰り返し、最終的に残る水の量を出力します。

コード

use proconio::input;
use std::cmp::max;

fn main() {
    input!{
        n: usize,...]]></description><link>https://zenn.dev/nakst_hide/articles/93a436696169a8</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/93a436696169a8</guid><pubDate>Sun, 08 Dec 2024 13:36:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ITCaxXNU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC383%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[#1 Rustで数当てゲーム]]></title><description><![CDATA[
 はじめに
Rustで数当てゲームを作ってみたので記事にしてみました。

 対象読者
Rustやプログラミングを始めたばかりの初心者に向けて書いた記事です。

 本記事のプログラム
GitHubに載せてあります

 プログラムの解説

 全体像
プログラム全体の流れを解説します。

1から100までのランダムな数字を生成
無限ループを開始
入力を受け取る
入力を数字に変換
入力した数字が大きいか小さいかを表示、もし正解の数字と同じなら、You guessed correctlyと表示して無限ループを終了


 input関数
fn input() -&gt; String {
    ...]]></description><link>https://zenn.dev/daizyoo/articles/number-guessing</link><guid isPermaLink="true">https://zenn.dev/daizyoo/articles/number-guessing</guid><pubDate>Sun, 08 Dec 2024 07:32:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--81sY4rSW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25231%2520Rust%25E3%2581%25A7%25E6%2595%25B0%25E5%25BD%2593%25E3%2581%25A6%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A0%25E3%2581%2584%25E3%2581%2598%25E3%2582%2587%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4ZGM0MzI4MTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>だいじょー</dc:creator></item><item><title><![CDATA[Rust × Docker環境でGitフックによる任意コマンド実行を行う方法]]></title><description><![CDATA[
 背景
JavaScript界隈ではhuskyを用いてpre-commitやpre-pushなどのGitフックを簡単に設定できます。
これにより、コミットやプッシュ時に自動でテストやリント、
フォーマットチェックを実行する運用が一般的です。
一方、Rustプロジェクトでも同様のことを行いたい場合があります。
ただし、npmやpythonといった他言語ツールに依存せず、
Cargoエコシステム内で同様のフローを構築したいケースです。
そのような場面で役立つのがcargo-huskyになります。
本記事ではcargo-huskyを使用してRustプロジェクトでGitフックを管理する方法を紹...]]></description><link>https://zenn.dev/bull/articles/getting-started-cargo-husky</link><guid isPermaLink="true">https://zenn.dev/bull/articles/getting-started-cargo-husky</guid><pubDate>Sun, 08 Dec 2024 03:06:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bvTYm_Rn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25C3%2597%2520Docker%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7Git%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E4%25BB%25BB%25E6%2584%258F%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259F%25E8%25A1%258C%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bull%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g2MllRUHZOMXdGR25zMmFxNEpvOWI0VW96UTY4b3NfdlBOOFFqZUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bull</dc:creator></item><item><title><![CDATA[WITとRust：リソース編]]></title><description><![CDATA[WebAssembly Interface Type（WIT）と呼ばれるインターフェース定義言語には「リソース」と呼ばれる要素があります。これを利用することで、状態を持つものを定義できます。この記事では、数を数えるもの（カウンター）を例に次の３つの事を解説します：

WITでのリソースの定義方法
Rustでのリソースの実装方法
作成されたリソースのTypeScriptからの利用方法


 状態を持つものの例：カウンター
状態を持つものを、Rustでは自身の値を変更するメソッドを持つ構造体として表現します。例えば次のHostCounter構造体はup()やdown()メソッドを呼ぶことで、...]]></description><link>https://zenn.dev/chikoski/articles/wit-and-rust-resource</link><guid isPermaLink="true">https://zenn.dev/chikoski/articles/wit-and-rust-resource</guid><pubDate>Sun, 08 Dec 2024 02:46:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u8OUY9yt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WIT%25E3%2581%25A8Rust%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:chikoski%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwYzk3YTk1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chikoski</dc:creator></item><item><title><![CDATA[Day 6: BlockingとNon-blocking ~並行処理の基礎~]]></title><description><![CDATA[
 BlockingとNon-blocking
昨日はキャッシュコヒーレンスプロトコルについて勉強した。CPUアーキテクチャの理解を深めた前回までの内容を踏まえ、今回は並行処理の実装手法について、特に「Blocking」と「Non-blocking」という重要な分類に焦点を当てて解説する。

 BlockingとNon-blockingの特徴
並行処理アルゴリズムは、排他ロックを使うかそうではないかを基準として「Blocking」と「Non-blocking」の2つに大きく分類される。

Blocking

1つのスレッドの遅延が他のスレッドを遅延させる可能性がある
ロックを使っている
...]]></description><link>https://zenn.dev/labbase_sano/articles/68b27c2262f560</link><guid isPermaLink="true">https://zenn.dev/labbase_sano/articles/68b27c2262f560</guid><pubDate>Sat, 07 Dec 2024 21:12:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lxWSRkv2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Day%25206%253A%2520Blocking%25E3%2581%25A8Non-blocking%2520%7E%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sano%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0Mjc3M2M5MjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sano🐡</dc:creator></item><item><title><![CDATA[typed-arenaで双方向リンクリストを作ってみた]]></title><description><![CDATA[この記事は Rust Advent Calender 2024シリーズ2 8日目の記事です。

 はじめに
Rustが流行ってますね。
Rustを特徴づける機能の一つにshared xor mutableというものがあるのをご存知でしょうか？
これは複数のリソースから参照されている値を可変にすることはできないというもので、このようにすることで"いつどこで値が変更されるかわからない"という状況を防ぐことができます。
shared xor mutableのおかげでコードは見通しがよくなり、『どこで変数が書き換えられているかわからない』というありがちな困り事を防ぐことができます。とてもありがた...]]></description><link>https://zenn.dev/hanao/articles/b7f92106e3d85e</link><guid isPermaLink="true">https://zenn.dev/hanao/articles/b7f92106e3d85e</guid><pubDate>Sat, 07 Dec 2024 17:39:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e3Q8dpKe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:typed-arena%25E3%2581%25A7%25E5%258F%258C%25E6%2596%25B9%25E5%2590%2591%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2595%25E3%2583%25A9%25E3%2583%25AF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMGJhMzVlYjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>フラワー</dc:creator></item><item><title><![CDATA[[Rust] 信じられるのは SQL だけ... そうだスナップショットしよう]]></title><description><![CDATA[
 ざっくりいうと
実行される SQL がわからないと（私は）不安なので、Insta という神クレートを使って SQL をスナップショットしましょう、という内容です。
Rust の記事ですが、他の言語でも同じ様なことはできると思います 🦀

 例
例えば、従業員管理システムにおいて、以下の様な検索機能を考えるとします。
従業員（検索対象）

ID
名前
契約形態（正社員/アルバイト）
所属部署 ID（企画部/情報システム部など）

アルバイトの場合はなし



検索項目（各項目は検索に使用しない場合もある）

名前
契約形態（正社員の場合は所属部署での検索も可能）

ざっくりコードにする...]]></description><link>https://zenn.dev/foolishell/articles/61f108703bd899</link><guid isPermaLink="true">https://zenn.dev/foolishell/articles/61f108703bd899</guid><pubDate>Sat, 07 Dec 2024 16:13:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BymDafmB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E4%25BF%25A1%25E3%2581%2598%25E3%2582%2589%25E3%2582%258C%25E3%2582%258B%25E3%2581%25AE%25E3%2581%25AF%2520SQL%2520%25E3%2581%25A0%25E3%2581%2591...%2520%25E3%2581%259D%25E3%2581%2586%25E3%2581%25A0%25E3%2582%25B9%25E3%2583%258A%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:FooliShell%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhODRkMTBmYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FooliShell</dc:creator></item><item><title><![CDATA[QRコードのデータエンコーディングを学ぶ]]></title><description><![CDATA[!
本稿は、ZOZO Advent Calendar 2024 シリーズ 6 の 8 日目の記事です。

こんにちは、計測システム部フロントエンドの@remsleep_zzzです。
個人の取り組みとして、QRコードのwasmライブラリを作っています。
今回はその中でも、データエンコーディングが面白いなと感じたので、どういう仕組なのかを簡単に書いてみました。
※QRコードは㈱デンソーウェーブの登録商標です

 TL;DR

データエンコーディングは、入力データの種類に応じて最適なモードを選択し、効率的にデータを圧縮する仕組み
QRコードのデータエンコーディングには複数の仕様がある
QRコー...]]></description><link>https://zenn.dev/zozotech/articles/5f9e07b763c7e8</link><guid isPermaLink="true">https://zenn.dev/zozotech/articles/5f9e07b763c7e8</guid><pubDate>Sat, 07 Dec 2024 15:34:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PFhXUNKE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:QR%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:rem%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0ZmQ2ZmJhZjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BEZOZO%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c3ZkdxZXZ1SjhKODktVElvZnNWOXoyT2hJLVlFR0dnTnhfS1hKQWc9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rem</dc:creator></item><item><title><![CDATA[RustとPostgreSQLでストアード・プロシージャーのTDD]]></title><description><![CDATA[
 目的
ユニークビジョン株式会社 Advent Calendar 2024の12/5の記事です。
ストアード・プロシージャーを利用しているとデバッグがやりにくいという話を聞きます。
例えばWebアプリでバックエンドのAPIからストアード・プロシージャーが呼び出される場合、単体テストでAPIのテストは書けますが、間接的にしかストアード・プロシージャーをテストできません。
そこで、直接ストアード・プロシージャーの単体テストを行うことにします。ただしストアード・プロシージャーだけでテストフレームワークを作るのは大変なのでRustでストアード・プロシージャー呼び出す関数の単体テストとして実現し...]]></description><link>https://zenn.dev/aoyagikouhei/articles/ee24ccfad97533</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/ee24ccfad97533</guid><pubDate>Sat, 07 Dec 2024 05:36:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TQ55pI54--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8PostgreSQL%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25BB%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B7%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%25E3%2581%25AETDD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[Rustでpwdの代替コマンドを作ったよ]]></title><description><![CDATA[!
この記事は NE Advent Calendar 2024 の7日目の記事です。ハッピーホリデー。

こんにちは。元エンジニアの正訓（まさくに）です。ジョブチェンジして最近はマーケの勉強とかをしています。たぶんどの仕事もそうなんでしょうけど、エンジニアであった経験は何をやるにしても役立つものだなぁと実感しています。要件を決めるときとか、フローを最適化するときとか、マネジメントのこととか、組織設計のこととかです。
たぶんこれから先もエンジニアリング関係なく、色んなことをやっていくんだろうなぁと思うものの、おそらく基軸はエンジニアのような考え方で物事を進めていくのだろうと思いますし、情報...]]></description><link>https://zenn.dev/neinc_tech/articles/created-an-alternative-pwd-in-rust</link><guid isPermaLink="true">https://zenn.dev/neinc_tech/articles/created-an-alternative-pwd-in-rust</guid><pubDate>Sat, 07 Dec 2024 05:32:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1_P1PUys--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7pwd%25E3%2581%25AE%25E4%25BB%25A3%25E6%259B%25BF%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E6%25AD%25A3%25E8%25A8%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiMzg1NzFjZWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:NE%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QwNTRiZWJiYzUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>正訓</dc:creator></item><item><title><![CDATA[Amazon S3 Tables と Rust で戯れる]]></title><description><![CDATA[この記事は株式会社LabBase テックカレンダー Advent Calendar 2024 7日目の記事です。
ありがたいことに Advent Calendar の時期には AWS re:Invent があります。
AWS re:Invent で発表されたサービスを触れば記事が書けるのです。
ありがたいですねぇ。正月は笑っている方が絶対いいですからね。
今回は新しく発表された Amazon S3 Tables を触ります。
https://aws.amazon.com/jp/blogs/aws/new-amazon-s3-tables-storage-optimized-for-ana...]]></description><link>https://zenn.dev/tyrwzl/articles/f05b417af6b80c</link><guid isPermaLink="true">https://zenn.dev/tyrwzl/articles/f05b417af6b80c</guid><pubDate>Fri, 06 Dec 2024 20:08:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W4SUVfMd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Amazon%2520S3%2520Tables%2520%25E3%2581%25A8%2520Rust%2520%25E3%2581%25A7%25E6%2588%25AF%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takahiro%2520Yamada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takahiro Yamada</dc:creator></item><item><title><![CDATA[Rustのlet/const/staticの違い]]></title><description><![CDATA[Rustでコードを書いているとき，文字列リテラルや数値を変数として扱うか，定数として扱うか悩みました．
Rustではlet変数の値は通常不変なので，定数のように扱うこともできます．一方でRustにはconst定数やstatic変数といったものも存在します．
それぞれどのような違いがあり，どういった用途で使い分けるのが良いのか，自分なりにまとめてみました．

 let変数
宣言した変数に値を束縛します．通常の束縛では値の所有権を保持します．
値が参照のときは，その値の借用を行います．この場合，値の所有権は保持しません．
つまり，letで所有・借用する値の実体は，必ずプログラム中で1つしか存...]]></description><link>https://zenn.dev/rerrah/articles/ef32db67f090e2</link><guid isPermaLink="true">https://zenn.dev/rerrah/articles/ef32db67f090e2</guid><pubDate>Fri, 06 Dec 2024 13:54:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TN8btJYm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AElet%252Fconst%252Fstatic%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rerrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2cweTZjdnlzVVVibTYyamhnZ1N5M1pzMGl6Q1ZvU25KRTVTSF9acFFQOVJyRmx1dz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rerrah</dc:creator></item><item><title><![CDATA[元PythonエンジニアがRustのRocket+SQLxでWebAPI書いてみた]]></title><description><![CDATA[この記事は「レバテック開発部 Advent Calendar 2024」の 6 日目の記事です！
昨日の記事は、gorilla_swe さんの「【入社エントリ】レバテックで過ごした4ヶ月を振り返る」でした。

 1. はじめに

 自己紹介
はじめまして！レバテック開発部の高瀬と申します!
今年の10月からレバレジーズに参画し、現在はレバテック開発部で社内SFAの開発に携わっています。
前職では主にPythonを使ったWeb APIの開発を担当していました。
そんな私が今回、レバテック開発部のアドベントカレンダーに参加するにあたり、テーマとして以前から興味があったRustを使った簡単なW...]]></description><link>https://zenn.dev/levtech/articles/49c0834b7f2757</link><guid isPermaLink="true">https://zenn.dev/levtech/articles/49c0834b7f2757</guid><pubDate>Fri, 06 Dec 2024 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zQcVfZ-6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%2583Python%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258CRust%25E3%2581%25AERocket%252BSQLx%25E3%2581%25A7WebAPI%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ytksjp%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY1YzcxZDY5NDkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25AC%25E3%2583%2590%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E9%2596%258B%25E7%2599%25BA%25E9%2583%25A8%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VmMTQ5ZTNkNjEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ytksjp</dc:creator></item><item><title><![CDATA[RustでGoogleDriveにアップロードする]]></title><description><![CDATA[
 目的
ユニークビジョン株式会社 Advent Calendar 2024の12/4の記事です。
Google Driveにファイルをアップロードしたいです。いくつかハマりポイントがありました。

 説明

 認証
認証にはOAuth認証とサービスアカウント認証があります。どちらでも動きますが、常駐プログラムでずっと動かしたい場合、サービスアカウント認証の方が便利です。
サービスアカウント認証ではGoogleドライブの置きたいフォルダーの共有にサービスアカウントのメールアドレスを設定してコンテンツ管理者に設定してください。これをしないと権限エラーになります。

 hyper-rustl...]]></description><link>https://zenn.dev/aoyagikouhei/articles/cb1edaa299cab6</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/cb1edaa299cab6</guid><pubDate>Thu, 05 Dec 2024 22:34:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ywigZL_n--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7GoogleDrive%25E3%2581%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[Day 5: キャッシュコヒーレンスプロトコル ~並行処理の基礎~]]></title><description><![CDATA[
 キャッシュコヒーレンスプロトコル
昨日はプロセッサ命令について勉強した(のは嘘で、勉強したということにしてまた開いた日に書く)。Rustのメモリモデルさえ理解して適切にコードを書けばコンパイラがCPUのアーキテクチャに適したアセンブリを生成してくれるので大丈夫ではある。今日も昨日と同じくCPUよりの話をするのだが、今日の知識はスケーラブルな並行プリミティブを実装する上でかなり大事な知識になる。
今日の記事は、ざっくりまとめると
「マルチコアで同じメモリの値に対して書き込みを行う処理を書くとその処理はスケールしない」
ということを原理も踏まえて解説する。

 CPUとメインメモリ
CP...]]></description><link>https://zenn.dev/labbase_sano/articles/b2ac1e21739e21</link><guid isPermaLink="true">https://zenn.dev/labbase_sano/articles/b2ac1e21739e21</guid><pubDate>Thu, 05 Dec 2024 17:22:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--norHJhVx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Day%25205%253A%2520%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25B3%25E3%2583%2592%25E3%2583%25BC%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25AB%2520%7E%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sano%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0Mjc3M2M5MjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sano🐡</dc:creator></item><item><title><![CDATA[重い計算のタイムアウト（ランタイム自作編）]]></title><description><![CDATA[この記事はRust Advent Calendar 2024 シリーズ2の5日目の記事です。

前回の記事では tokio を使ってタイムアウト処理を実装しましたが、タイムアウト処理の為だけに tokio を使うのは少しオーバースペックかもしれません。前回説明したように非同期に（別スレッドを起動して）タイムアウトしてもスレッドを停止できないので、今回の目的は同期的に（重い処理を行っているスレッド自体で）タイムアウトを行うことであり、なのでtokioのような非同期ランタイムは必要ないはずです。
今回は tokio を使わずに標準ライブラリだけでタイムアウト処理を実装してみます。
!
同期的...]]></description><link>https://zenn.dev/termoshtt/articles/async-timeout</link><guid isPermaLink="true">https://zenn.dev/termoshtt/articles/async-timeout</guid><pubDate>Thu, 05 Dec 2024 10:42:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--grg3saJ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2587%258D%25E3%2581%2584%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25EF%25BC%2588%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E8%2587%25AA%25E4%25BD%259C%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:termoshtt%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lfdUM4LVBtaVF5cjN4UjBLdWMzN2t3ZDF2cGlsaUZWV25MbzhDS1E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>termoshtt</dc:creator></item><item><title><![CDATA[[make,pnpm,yarnに対応]タスクランナーのコマンドをfuzzy finder形式で選択できるCLIツール fzf-makeの紹介]]></title><description><![CDATA[
 tl;dr
make targetやpnpm script, yarn scriptをfuzzy finder形式で選択、実行できるCLIツールであるfzf-makeのv0.43.0をリリースしました。

インストールはこちらから。(現時点ではbrew, cargo, nix, paruに対応しています)
https://github.com/kyu08/fzf-make?tab=readme-ov-file#-installation
この記事ではfzf-makeの使い方や利点を紹介します。

 使い方
fzf-makeはタスクランナーのコマンドを手軽に確認、実行できるCLIツール...]]></description><link>https://zenn.dev/kyu08/articles/974fd8bc25c303</link><guid isPermaLink="true">https://zenn.dev/kyu08/articles/974fd8bc25c303</guid><pubDate>Thu, 05 Dec 2024 10:26:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qDY2DX0K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bmake%252Cpnpm%252Cyarn%25E3%2581%25AB%25E5%25AF%25BE%25E5%25BF%259C%255D%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%258A%25E3%2583%25BC%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592fuzzy%2520finder%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25A7%25E9%2581%25B8%25E6%258A%259E%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kyu08%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjN2E3ZjZkZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kyu08</dc:creator></item></channel></rss>