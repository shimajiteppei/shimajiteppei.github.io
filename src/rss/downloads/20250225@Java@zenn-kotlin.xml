<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Kotlin」のフィード]]></title><description><![CDATA[Zennのトピック「Kotlin」のRSSフィードです]]></description><link>https://zenn.dev/topics/kotlin</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/0913f0325d.png</url><title>Zennの「Kotlin」のフィード</title><link>https://zenn.dev/topics/kotlin</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 25 Feb 2025 12:04:16 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/kotlin/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Springの@Transactionalを使ってjOOQ × R2DBCのクエリをロールバックする]]></title><description><![CDATA[2025年2月19日にリリースされたjOOQ 3.20にて、Spring、jOOQ、そしてR2DBCの利用時に、Springの@Transactionalアノテーションでトランザクションを管理できるようになったので、その方法を紹介します。
サンプルコードはこちら
以降、コード例は全てKotlinを用いて記述します。

 ライブラリバージョン
Spring Boot 3.5.0-SNAPSHOT
jOOQ 3.20.0
R2DBC H2 1.0.0.RELEASE
MySQLでも動作することは確認済みです。

 結論


DSLContextのオブジェクト生成時にSubscriberPro...]]></description><link>https://zenn.dev/moneyforward/articles/4b56597da47012</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/4b56597da47012</guid><pubDate>Tue, 25 Feb 2025 04:01:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0rBbmuTC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%25E3%2581%25AE%2540Transactional%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6jOOQ%2520%25C3%2597%2520R2DBC%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:T45K%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3NWU5NDBmYTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>T45K</dc:creator></item><item><title><![CDATA[【Flutter】Kotlin Gradle Pluginのバージョンエラーの解決方法]]></title><description><![CDATA[Kotlin Gradle Plugin のバージョンが古いため、Flutterが求めるバージョンに更新する必要があるというエラーがでました。このときのFlutterのバージョンはv3.27.3でした。
─ Flutter Fix ──────────────────────────────────────────┐
│ [!] Your project requires a newer version of the       │
│ Kotlin Gradle plugin.                                  │
│ Find the latest v...]]></description><link>https://zenn.dev/tarakosuziko/articles/fcbbfbe68561ef</link><guid isPermaLink="true">https://zenn.dev/tarakosuziko/articles/fcbbfbe68561ef</guid><pubDate>Mon, 24 Feb 2025 13:06:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---W03h-ET--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Flutter%25E3%2580%2591Kotlin%2520Gradle%2520Plugin%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Narumi%2520Miura%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YmMwQ010MmRRUU1vQnpreHlmampLenE3ZVpxc2dXQzdTYWtrREVOUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Narumi Miura</dc:creator></item><item><title><![CDATA[[Android] Mapbox Composeのセットアップ]]></title><description><![CDATA[
 背景
登山が趣味でYamapというアプリをよく使っているのですが、YamapではGoogleMapではなく、Mapboxという地図が用いられています。Composeにも対応しているようなので、今回はMapbox ComposeのAndroidでのセットアップをまとめたいと思います。
※ Mapboxについての説明は割愛します

 トークンの取得
地図機能の利用や、ライブラリをMavenからダウンロードするために、Public TokenとSecret Tokenの2つが必要です。
アカウントがない場合は、まずMapboxにサインアップします
https://www.mapbox.co...]]></description><link>https://zenn.dev/shirataki707/articles/5ad40f56760c06</link><guid isPermaLink="true">https://zenn.dev/shirataki707/articles/5ad40f56760c06</guid><pubDate>Mon, 24 Feb 2025 10:55:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7r14xF0_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BAndroid%255D%2520Mapbox%2520Compose%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shirataki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzNLbE1wbGZjSDZBZXVsLVZTS1dCRXdUclhSYjJNWjFhbjVIU1V6amJ3LXd3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shirataki</dc:creator></item><item><title><![CDATA[Kotlin の `forEach` は可読性を下げる]]></title><description><![CDATA[Kotlin でコレクションの要素を処理するとき、forEach 関数は最後の手段としては使用をなるべく避けた方が賢明です。
確かに list.forEach { ... } という書き方は、ラムダ式で少ない文字数で処理を記述できます。しかし一方で、「forEach は命令的なコード（サイドエフェクトを伴うコード）なのか、それとも関数的なコード（データ変換を意図するコード）なのか」が曖昧になり、可読性を下げる可能性があります。
本記事では、この問題と、forEach の代替案について述べていきます。


 forEach が持つ曖昧さとは
Kotlin のコレクション操作には、大きく分け...]]></description><link>https://zenn.dev/akiotakahashi/articles/2025-02-22_4011409a31bd89</link><guid isPermaLink="true">https://zenn.dev/akiotakahashi/articles/2025-02-22_4011409a31bd89</guid><pubDate>Sat, 22 Feb 2025 10:59:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oAki_bTD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25AE%2520%2560forEach%2560%2520%25E3%2581%25AF%25E5%258F%25AF%25E8%25AA%25AD%25E6%2580%25A7%25E3%2582%2592%25E4%25B8%258B%25E3%2581%2592%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akio%2520Takahashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhYmVlZWEwN2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Akio Takahashi</dc:creator></item><item><title><![CDATA[【KMP】LazyRowのクラッシュ問題を解決する]]></title><description><![CDATA[
 はじめに
Android StudioでKotlin Multiplatform(KMP)を使用して開発した際に、ScrollableTabRow内にLazyRowを配置するとアプリがクラッシュする問題が発生しました。
実行例
※実際の開発で使用しているものではありません
@Composable
fun ExampleTabRow(
    coroutineScope: CoroutineScope,
    pagerState: PagerState,
    tabItems: List&lt;String&gt;
) {
    Column {
        Scrol...]]></description><link>https://zenn.dev/cocban_blog/articles/sankaku0724-newcreate42</link><guid isPermaLink="true">https://zenn.dev/cocban_blog/articles/sankaku0724-newcreate42</guid><pubDate>Sat, 22 Feb 2025 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wnCPRZRk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590KMP%25E3%2580%2591LazyRow%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2595%25E3%2582%2593%25E3%2581%258B%25E3%2581%258F%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0Yzg2ZmE5YTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:CocBan%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JkODI3MDRjMmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さんかく</dc:creator></item><item><title><![CDATA[Jetpack Compose Navigation で実現する型安全なルーティング]]></title><description><![CDATA[Jetpack Compose では、従来の文字列ベースのパス指定によるナビゲーションから一歩進んだ、型安全なナビゲーションが可能になりました。この記事では、型安全なナビゲーションの実装方法とそのメリットについて紹介します。

 2025/02/25 追記
今回の方法では String や Int などのプリミティブ型しかサポートしていないため、カスタムオブジェクトを直接渡すことはできません。もしカスタムオブジェクトを渡したい場合は json string に一度変換して受け側でオブジェクトに再度変換する必要があります。

 はじめに
従来の Android アプリケーションにおけるナビ...]]></description><link>https://zenn.dev/alc_tecdev/articles/f85948d4ff4cd7</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/f85948d4ff4cd7</guid><pubDate>Fri, 21 Feb 2025 01:14:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DOe0taqc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jetpack%2520Compose%2520Navigation%2520%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Kotlin の Result 型の fold について]]></title><description><![CDATA[Result 型の fold は、成功と失敗の両方のケースを一度に扱うための便利なメソッドです。

 基本的な考え方
Result は、ある処理が成功したか失敗したかを表現するための型です。


成功時: 正常な値が格納されている

失敗時: 例外（Throwable）が格納されている

fold メソッドは、このどちらの場合にも対応できるように、2 つのラムダを受け取ります。

 シグネチャ
public inline fun &lt;R&gt; Result&lt;T&gt;.fold(
    onSuccess: (value: T) -&gt; R,
    onFailure...]]></description><link>https://zenn.dev/alc_tecdev/articles/76e1916d62cbfb</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/76e1916d62cbfb</guid><pubDate>Wed, 19 Feb 2025 00:31:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kEyr-0_J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25AE%2520Result%2520%25E5%259E%258B%25E3%2581%25AE%2520fold%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Swift の repeat-while と Kotlin の do-while のスコープの違い]]></title><description><![CDATA[SwiftとKotlinでは、一見似たループ構文に見えても、変数のスコープに関して微妙な違いがあります。
この記事では、Swiftのrepeat-whileループとKotlinのdo-whileループにおける変数のスコープの違いについて解説します。

 Swiftのrepeat-whileループ
Swiftでは、repeat-whileループの本体内で宣言した変数は、そのループの条件部分からは参照できません。
例えば、以下のコードはコンパイルエラーとなります。
repeat {
    var result = apiResult()
} while result.hasMore
上記の...]]></description><link>https://zenn.dev/alc_tecdev/articles/2053a71244a7fa</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/2053a71244a7fa</guid><pubDate>Mon, 17 Feb 2025 23:37:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--58tZt16d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Swift%2520%25E3%2581%25AE%2520repeat-while%2520%25E3%2581%25A8%2520Kotlin%2520%25E3%2581%25AE%2520do-while%2520%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2597%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[プロダクトにJetpack Composeを導入した時に考えたことや決めたこと、使ったテクニック]]></title><description><![CDATA[
 前提


Jetpack Compose + Coil + DaggerHilt + AACのViewModelを用いて、ViewModelにuiStateを持たせてstateの管理をしながら開発する想定


いろんな資料を参考に、自プロダクト向けの解釈の上、必要であればアレンジ等はしている


これがベストプラクティスのつもりはないが、この方針はトレンドから外れておらず、保守性の上で問題は起きていない...です現状


この記事の指す”View”はComposable関数のこと



 Viewを一定の粒度で分割する
分割しないと巨大なViewファイルが出来上がって保守性を保てない...]]></description><link>https://zenn.dev/makoshi/articles/b2c20fe8d3f485</link><guid isPermaLink="true">https://zenn.dev/makoshi/articles/b2c20fe8d3f485</guid><pubDate>Sun, 16 Feb 2025 12:47:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5xXFrqu7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2580%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25ABJetpack%2520Compose%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2597%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E8%2580%2583%25E3%2581%2588%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2584%25E6%25B1%25BA%25E3%2582%2581%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2580%2581%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2581%2593%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5YzY0MTk0ZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まこし</dc:creator></item><item><title><![CDATA[jarファイルのライブラリに苦しめられた話]]></title><description><![CDATA[
 はじめに
ispecでは、サーバーサイドにKotlinを採用して開発を行っています。
(Kodee可愛いですよね 😊)

今回は、jarファイルで追加したライブラリが原因で、他のライブラリが動作しなくなった際の話をしようと思います。
かなりレアケースではあると思うのですが、誰かの助けになれば幸いです。
最後にまとめがあるので、お急ぎの方はどうぞ！

 問題発生：ロガーが動作しなくなる
自分が担当していたプロジェクトでは、SLF4J + Logbackというよくある構成でログ出力を行っていました。
しかしある日、このログが出力されていないことに気が付きました。
アプリケーション自体は問...]]></description><link>https://zenn.dev/ispec_inc/articles/jar-library-trouble</link><guid isPermaLink="true">https://zenn.dev/ispec_inc/articles/jar-library-trouble</guid><pubDate>Sat, 15 Feb 2025 08:07:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qohVK4vo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jar%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AB%25E8%258B%25A6%25E3%2581%2597%25E3%2582%2581%25E3%2582%2589%25E3%2582%258C%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Masaharu%2520Hori%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmN2Y5YzE4ZTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:ispec%2520inc.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsMTBYY3R4TlFyTVZlODUyXzd4ZUtRNEJOR19PaVI2VU1nQlhlaGc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaharu Hori</dc:creator></item><item><title><![CDATA[Kotlin for Android 勉強記録]]></title><description><![CDATA[編集が済んだチャプターは無料にします。
Kotlin で Android アプリ作成できるようになりたい。個人開発。
基本的に参考文献は全て公式ドキュメントだと思うので内容が信頼できるかどうか不安な方はそちらを辿ってください。
Android Studio, Windows 11
]]></description><link>https://zenn.dev/15bluefortran/books/eda0b63cce21e5</link><guid isPermaLink="true">https://zenn.dev/15bluefortran/books/eda0b63cce21e5</guid><pubDate>Fri, 14 Feb 2025 10:50:22 GMT</pubDate><dc:creator>K</dc:creator></item><item><title><![CDATA[Hilt を使ったフィールドインジェクション入門]]></title><description><![CDATA[Hilt は Android アプリケーションにおける依存性注入（DI）をシンプルに実装するためのライブラリです。
この記事では、Hilt を使って MainActivity にフィールドインジェクションで任意のクラスを注入する方法を解説します。

 前提条件

プロジェクトに Hilt の依存関係が追加されていること
クラスが既に DI 対応（@Singleton や @Inject コンストラクタ等）で実装されていること


 MainActivity へのフィールドインジェクション
Hilt を利用する場合、注入先の Activity には @AndroidEntryPoint を...]]></description><link>https://zenn.dev/alc_tecdev/articles/c5b4ab17499093</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/c5b4ab17499093</guid><pubDate>Fri, 14 Feb 2025 00:30:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F6fcQ-XH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hilt%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Datadogによるアプリ監視]]></title><description><![CDATA[
 導入
こんにちは、Androidチームの田村です！
今回はアプリに監視ツールとしてDatadogを導入し、半年ほど運用してみた所感を書きたいと思います。






 経緯
弊社のアプリではFirebase Crashlyticsでクラッシュ周りの計測はしていましたがユーザーの行動など詳細な情報の確認までは出来ておらず修正に時間を要したり、また画面毎のパフォーマンスや各機能の利用状況などを数値で把握できる基盤が整っておらず潜在的な問題すら把握できていない状況でした。
上記の問題を解決する手段として、DatadogのMobile Real User Monitoringという機能に注目...]]></description><link>https://zenn.dev/sukedachi_dev/articles/20241029-92dc218f5aca3f</link><guid isPermaLink="true">https://zenn.dev/sukedachi_dev/articles/20241029-92dc218f5aca3f</guid><pubDate>Thu, 13 Feb 2025 16:37:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mxRW2O2u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Datadog%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E7%259B%25A3%25E8%25A6%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:tamura%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0ZmI5ZDdiNjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%258A%25A9%25E5%25A4%25AA%25E5%2588%2580%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxNDI1ODU2ZTEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tamura</dc:creator></item><item><title><![CDATA[Navigation Component における popUpTo オプションの活用]]></title><description><![CDATA[Android の Navigation Component を利用する際、画面遷移とともにナビゲーションスタック（バックスタック）を柔軟に制御することが求められる場合があります。
その中でも、popUpTo オプション は、特定の Destination までのバックスタックを削除し、ユーザーが不要な画面に戻らないようにするための非常に有用な機能です。
この記事では、navigate() メソッド使用時に popUpTo オプションを指定する方法と、その利用シーンについて解説します。

 popUpTo オプションとは
popUpTo オプションを利用することで、指定した Destin...]]></description><link>https://zenn.dev/alc_tecdev/articles/a738cea3fa4424</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/a738cea3fa4424</guid><pubDate>Thu, 13 Feb 2025 03:50:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t_5FOibg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Navigation%2520Component%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%2520popUpTo%2520%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E6%25B4%25BB%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Kotlin と Swift のエラーハンドリングの違い]]></title><description><![CDATA[
 Kotlin と Swift のエラーハンドリングの違いを考察
最近 Kotlin を書き始めて Swift とのエラーハンドリングの違いに少し驚きました。
そこでこの記事では、Kotlin と Swift のエラーハンドリング（try-catch/do-catch）の仕組みの違いについて解説します。
具体的には、Kotlin の例外処理と Swift のエラー処理の設計思想やコード例を交えて説明します。


 1. はじめに
プログラミングにおけるエラーハンドリングは、予期せぬエラーに対処し、アプリケーションの安定性を保つために重要な要素です。
Kotlin と Swift はどち...]]></description><link>https://zenn.dev/alc_tecdev/articles/573039c462daaa</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/573039c462daaa</guid><pubDate>Thu, 13 Feb 2025 00:27:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XwvsVXSB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25A8%2520Swift%2520%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Kotlin のオブジェクト初期化]]></title><description><![CDATA[コンストラクタとか init ブロックとかオブジェクト初期化に関するメモ。

 シンプルなクラスの場合
class Employee {}
上記を省略しないで書くとこうなる。
class Employee() {}
もしくはこう。
class Employee constructor() {}
クラス名の右横のはプライマリコンストラクタという。
ちなみに IntelliJ など IDE からは冗長だよ、と注意されるし省略形で実装するのがフツー。
インスタンス化するときに new は不要。
val employee = Employee()

 引数ありコンストラクタを持つクラスの場合
基...]]></description><link>https://zenn.dev/junjujun/articles/a313c3bbecb733</link><guid isPermaLink="true">https://zenn.dev/junjujun/articles/a313c3bbecb733</guid><pubDate>Tue, 11 Feb 2025 05:55:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HUhoppBX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25AE%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E5%2588%259D%25E6%259C%259F%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyMWU3MDRjYWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jun</dc:creator></item><item><title><![CDATA[Kotlin におけるワンショットと Flow の違い]]></title><description><![CDATA[この記事では、Kotlin の非同期処理手法である ワンショット（One-Shot）と Flow の違いについて解説します。  両者の特徴や利用シーン、実装例を通じて、どのようなケースでどちらを選択すべきかを理解しましょう。

 ワンショット（One-Shot）とは
ワンショットは、単一の値を返す非同期処理に適しています。
例えば、ネットワークから 1 件のデータを取得する処理など、一度の呼び出しで結果が得られるケースに向いています。
Kotlin では suspend 関数を用いて実装します。

 ワンショットのコード例
suspend fun fetchUserData(userId...]]></description><link>https://zenn.dev/alc_tecdev/articles/55fa1a986950a5</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/55fa1a986950a5</guid><pubDate>Tue, 11 Feb 2025 04:29:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6-IgUZmV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%25AF%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2581%25A8%2520Flow%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Jetpack Compose Navigationでのルート画面判定: previousBackStackEntryの活用法]]></title><description><![CDATA[
 Jetpack Compose Navigationにおけるルート画面の判定方法
Jetpack Composeを使用したAndroidアプリ開発において、画面遷移の管理は非常に重要です。今回は、NavControllerのプロパティであるpreviousBackStackEntryを利用し、現在の画面がナビゲーションのルート（最初の画面）にいるかどうかを判定する方法をご紹介します。

 なぜルート画面の判定が必要か？
アプリケーションでは、画面遷移や戻るボタンの動作を適切に制御することが求められます。例えば、ルート画面では戻るボタンを非表示にするなど、状況に応じたUIの変更が必要で...]]></description><link>https://zenn.dev/alc_tecdev/articles/88dbffa1d9c076</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/88dbffa1d9c076</guid><pubDate>Tue, 11 Feb 2025 02:54:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZAxN_UCB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jetpack%2520Compose%2520Navigation%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2588%25E7%2594%25BB%25E9%259D%25A2%25E5%2588%25A4%25E5%25AE%259A%253A%2520previousBackStackEnt...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[Kotlin の ViewModel で実装する 30 秒タイマー ～途中停止にも対応～]]></title><description><![CDATA[この記事では、Kotlin の ViewModel 内で 30 秒間のカウントダウンタイマーを実装する方法について解説します。コルーチンを利用した非同期処理や、タイマーの途中停止に対応する実装例を紹介します。

 実装のポイント


LiveData による状態管理
タイマーの残り時間を MutableLiveData 経由で管理し、UI に通知します。


コルーチンによる非同期処理
viewModelScope.launch を使用して、ViewModel のライフサイクルに合わせた非同期処理を実行します。


タイマーの途中停止
実行中のタイマー処理を Job として保持し、必要に...]]></description><link>https://zenn.dev/alc_tecdev/articles/5a627c870585cd</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/5a627c870585cd</guid><pubDate>Mon, 10 Feb 2025 05:37:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZbDm4MJE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%2520%25E3%2581%25AE%2520ViewModel%2520%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%252030%2520%25E7%25A7%2592%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%259E%25E3%2583%25BC%2520%25EF%25BD%259E%25E9%2580%2594%25E4%25B8%25AD%25E5%2581%259C%25E6%25AD%25A2%25E3%2581%25AB%25E3%2582%2582%25E5%25AF%25BE%25E5%25BF%259C%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yosuke%2520Seki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExN2NhMTMxNjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yosuke Seki</dc:creator></item><item><title><![CDATA[型間違いでシステムクラッシュ？Inline Value ClassとSealed Classを使いこなそう【Kotlin・実例付き】]]></title><description><![CDATA[「ある日のデプロイで、サービス全体がクラッシュした――。」
新たなロジックをデプロイした瞬間、エラーが次々と発生。原因は、メートル (m) とフィート (ft) を取り違えたせいで、位置データが異常な数値を出し続けたことだった。
・・・というのは架空の話ですが、実際にNASAのミッションでも同様のミスが発生したそうです。1999年、NASAの火星探査機が単位変換ミスによって予定コースを逸脱し、火星の大気圏で消滅。数百万ドルもの損害が出たそうです[1]。

このように、 単位を厳密に区別しないことは、エンジニアにとって「ロケット級の危険」 なのです🚀　私たちの日常的な開発でも、異なるデータ...]]></description><link>https://zenn.dev/mtkrm/articles/8ab4baf3ddacb3</link><guid isPermaLink="true">https://zenn.dev/mtkrm/articles/8ab4baf3ddacb3</guid><pubDate>Sun, 09 Feb 2025 21:47:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3Ipn4TgH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E9%2596%2593%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A7%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25EF%25BC%259FInline%2520Value%2520Class%25E3%2581%25A8Sealed%2520Class%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%259D%25E3%2581%2586%25E3%2580%2590Kot...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kurumi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4MTQ2NmRiMWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kurumi</dc:creator></item></channel></rss>