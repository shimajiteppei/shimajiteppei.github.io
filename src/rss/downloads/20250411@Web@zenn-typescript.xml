<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 11 Apr 2025 10:04:13 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Zod v4のβ版が公開されたぞ！注目すべき変更点]]></title><description><![CDATA[
 はじめに
お疲れさまです！あつあつのご飯にスクランブルエッグを乗せました。Meloです。
Zodは、TypeScriptで人気の高いスキーマ定義＋バリデーションライブラリです。このたびv4のベータ版が公開され、いくつかの注目すべき変更が加えられました。この記事では、特に私が興味深いと思った変更点をピックアップして紹介します。
なお、現在はベータ版のため、以下のコマンドでインストールできます：

Zod4
npm upgrade zod@next


 1. 文字列バリデーション関数のトップレベル化
これまでメソッドチェーンで記述していた文字列バリデーション（z.string().em...]]></description><link>https://zenn.dev/codeunit/articles/f99e3546c1574a</link><guid isPermaLink="true">https://zenn.dev/codeunit/articles/f99e3546c1574a</guid><pubDate>Fri, 11 Apr 2025 09:20:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sgb6KsTV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%2520v4%25E3%2581%25AE%25CE%25B2%25E7%2589%2588%25E3%2581%258C%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%259E%25EF%25BC%2581%25E6%25B3%25A8%25E7%259B%25AE%25E3%2581%2599%25E3%2581%25B9%25E3%2581%258D%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Melo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhlZDUzODU0OWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMTY4ZGYzMWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Melo</dc:creator></item><item><title><![CDATA[入力フォームのコンポーネントを作ってOmitを理解する]]></title><description><![CDATA[
 Omitってなんだ？

OmitはTypescriptにあるユーティリティ型（型を操作するための型）
Omitは型から任意のプロパティを除外できる


 使い方
 type Sample = Omit&lt;任意の型, '除外したいプロパティ名'&gt;

 実際に使ってみた
まず、Omitをどんな時に使ったかなんですが、下のフォームをコンポーネント化する時に使いました。RHFとShadcnUIを組み合わせてFormを作ると下のようなコードになると思うんですけどこれ4つとかになるとめっちゃだるくない？って感じました。

BeforeInputForm.tsx
 return (
  ...]]></description><link>https://zenn.dev/kasshii18/articles/dbd4e246e212f9</link><guid isPermaLink="true">https://zenn.dev/kasshii18/articles/dbd4e246e212f9</guid><pubDate>Fri, 11 Apr 2025 06:47:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ERsH-0Fp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2585%25A5%25E5%258A%259B%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6Omit%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kasshii%25EF%25BC%2588%25E3%2581%258B%25E3%2581%25A3%25E3%2581%2597%25E3%2583%25BC%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U4NDljMWEyNDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kasshii（かっしー）</dc:creator></item><item><title><![CDATA[【TypeScript】アロー関数]]></title><description><![CDATA[
 初めに
こんにちは！TypeScriptにおけるアロー関数についてまとめていきたいと思います。

 TypeScript

 基本的な構文
const 関数名: (引数: 型, ...) =&gt; 戻り値の型 = (引数1, 引数2, ...) =&gt; 戻り値;

 例
const add = (a: number, b: number): number =&gt; a + b;
console.log(add(2, 3)); 
実行結果
5

a: number, b: number → 引数の型指定
: number → 返り値の型指定


 オプション引数
const g...]]></description><link>https://zenn.dev/daichi09167/articles/d851144a632442</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/d851144a632442</guid><pubDate>Fri, 11 Apr 2025 06:23:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UUg4en84--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi09167%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM3YTc4OTEwMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi09167</dc:creator></item><item><title><![CDATA[OpenAPIレスポンスバリデーションでの500エラー]]></title><description><![CDATA[
 始めに
typescriptを初めて触れていく中でAPIの開発も初めてでわからないことだらけの状態ですが
API開発のチュートリアルを進めていく中で　解決に特に時間がかかった今回の問題を備忘録として
残したいと思います。
この記事では、OpenAPIによるレスポンスバリデーションを導入している開発環境で、
ユニットテストは通るのに、結合テスト(APIテスト（controller経由）)では突然500エラーが返ってくるという現象に直面した話と、その背景・原因・対処方法を備忘録として整理します。

 背景
OpenAPIバリデーションを使うと、以下のように リクエスト・レスポンスが仕様と...]]></description><link>https://zenn.dev/sonicmoov/articles/9a89f8492ca723</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/9a89f8492ca723</guid><pubDate>Fri, 11 Apr 2025 06:07:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EO0Bh952--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OpenAPI%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%25E3%2581%25AE500%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:n.kawashima%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3BkQkZZUGlFVEIwUzV6NWdBV2F2M0FEWUxWVG9tblJqSW0ybl93QjVaRGdrUm1nPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>n.kawashima</dc:creator></item><item><title><![CDATA[複雑な動的フォームを制覇する: Zustand Slice パターンによる状態管理戦略]]></title><description><![CDATA[
 はじめに
前回のテックブログ記事『【React】memo, useMemo, useCallback を使いこなす』ではメモ化 API について解説しました。その中で触れた、「企業活動における「手続き」や「申請」に利用する汎用的なフォーム生成モジュール」の設計に焦点を当てます。
DRESS CODEで扱うフォームは、「入社手続き」や「アカウント利用申請」などの実業務で使用されるため以下の特徴があります。


動的な構造: フォームの項目は固定ではなく、目的ごとに規定される定義によって動的に決定されます。

階層構造: フォームは複数の「コレクション (AttributeCollect...]]></description><link>https://zenn.dev/dress_code/articles/182c18acfa58b3</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/182c18acfa58b3</guid><pubDate>Fri, 11 Apr 2025 05:15:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cZd3ZyI7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E5%2588%25B6%25E8%25A6%2587%25E3%2581%2599%25E3%2582%258B%253A%2520Zustand%2520Slice%2520%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E6%2588%25A6%25E7%2595%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2582%258B%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzMmQ5N2Q0NmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふるしょう</dc:creator></item><item><title><![CDATA[「レンズ」でフォーカス！@hookform/lensesを使ったフォーム実装]]></title><description><![CDATA[こんにちは、フォルシア株式会社エンジニアの籏野です。
先日、React Hook Formの公式アカウントが以下のようなポストをしているのを見つけました。
https://x.com/HookForm/status/1894698099677028618
新たにリリースされた@hookform/lensesがどのようなライブラリなのか気になり調べてみました。

 @hookform/lensesとは
GitHubに記載の内容を訳すると以下のようになります。(日本語訳 by DeepL)

React Hook Form Lensesは、React Hook Formに関数型レンズのエレガ...]]></description><link>https://zenn.dev/forcia_tech/articles/202503_hookform_lenses_hatano</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/202503_hookform_lenses_hatano</guid><pubDate>Fri, 11 Apr 2025 04:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ESg933tu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25BA%25E3%2580%258D%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25AB%25E3%2582%25B9%25EF%25BC%2581%2540hookform%252Flenses%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[PydanticでUpdate用モデルを動的生成する：バリデーション継承＋Optional対応まで]]></title><description><![CDATA[
 はじめに
FastAPI + Pydantic でAPIを構築する中で、「部分更新」を実装するためには、すべてのフィールドがOptionalな UpdateModel を書く必要があります。しかしBaseModelと同じフィールドとvalidatorを持つ UpdateModel を毎回手で書くのは面倒ですし、バリデーションを忘れたり、間違った型を指定してしまうこともあります。
そこで、以下を満たす UpdateModel を自動生成する関数を作成しました：


Optional 変換：元のフィールドをすべて Optional に変換（部分更新対応）
バリデーション継承：元モデルの ...]]></description><link>https://zenn.dev/kicchan/articles/0012_llyssm_make_update_model</link><guid isPermaLink="true">https://zenn.dev/kicchan/articles/0012_llyssm_make_update_model</guid><pubDate>Thu, 10 Apr 2025 23:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--STJXcLni--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pydantic%25E3%2581%25A7Update%25E7%2594%25A8%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E7%259A%2584%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25EF%25BC%259A%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E7%25B6%2599%25E6%2589%25BF%25EF%25BC%258BOptional%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kicchan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U0NmExYWE4YWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kicchan</dc:creator></item><item><title><![CDATA[160. Intersection of Two Linked Lists]]></title><description><![CDATA[2つの単方向連結リスト headA と headB の先頭ノードが与えられたとき、それらが交差しているノードを返してください。2つの連結リストが全く交差しない場合は null を返してください。
例えば、以下の2つの連結リストはノード c1 で交差を始めます：
（※図は省略）
テストケースは、連結構造の中にサイクルが一切存在しないように生成されています。
なお、関数が返された後も、連結リストの元の構造は保持されなければなりません。


 カスタムジャッジについて：
ジャッジに与えられる入力は以下の通りです（あなたのプログラムにはこれらは与えられません）：


intersectVal：交...]]></description><link>https://zenn.dev/idapan/articles/f753edcf51eaae</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/f753edcf51eaae</guid><pubDate>Thu, 10 Apr 2025 22:17:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--huhh2xIF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:160.%2520Intersection%2520of%2520Two%2520Linked%2520Lists%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[Angularのノードベースライブラリ ngx-vflow を使ってみた]]></title><description><![CDATA[
 はじめに
@denwaya34です。😆
angularのNodeベースのアプリケーション開発ライブラリ:ngx-vflowを使ってみたのでレポートします。

 ngx-vflow とは
ngx-vflowはノードベースのアプリケーションを作成するためのAngularライブラリです。
Reactにはreact-flowというライブラリがありますが、ngx-vflowはそれと類似のAngular向けのライブラリです。
こんな感じでフロー図を作成できます。


 使い方
Node(=図の四角部分)は以下のように定義します。
const node = {
    id: '1',      ...]]></description><link>https://zenn.dev/denwaya/articles/angular-ngx-vflow</link><guid isPermaLink="true">https://zenn.dev/denwaya/articles/angular-ngx-vflow</guid><pubDate>Thu, 10 Apr 2025 16:44:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LKHlHrM8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Angular%25E3%2581%25AE%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2589%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%2520ngx-vflow%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:denwaya34%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3NGM2YzM3MGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>denwaya34</dc:creator></item><item><title><![CDATA[特定の文字列を含む配列、オブジェクトの型エラーを解決する【as const】]]></title><description><![CDATA[特定の文字列を含む配列やオブジェクトについて、as constをつけることで型エラーを解決できる場合があります。

 例
const fruit = {
  name: "apple",
  color: "red",
};

function printFruit(fruit: { name: "apple"; color: "red" }) {
  console.log(`name: ${fruit.name}, color: ${fruit.color}`);
}

printFruit(fruit); // エラー: 引数の型が一致しない
https://www.typescr...]]></description><link>https://zenn.dev/abebe123000/articles/e7efc4a21e7e89</link><guid isPermaLink="true">https://zenn.dev/abebe123000/articles/e7efc4a21e7e89</guid><pubDate>Thu, 10 Apr 2025 13:30:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hHn8poMy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2580%25E9%2585%258D%25E5%2588%2597%25E3%2580%2581%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590as%2520const%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%25B9%25E3%2581%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZWRlMTY3ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あべべ</dc:creator></item><item><title><![CDATA[npm で依存関係のあるライブラリのバージョンアップの仕方]]></title><description><![CDATA[
 前提
他のライブラリとの依存関係が問題にならない場合、 npm install &lt;package-name&gt;@latest でライブラリのバージョンを最新に上げることができるため難しいことはありません。
問題は多くのライブラリと依存関係にあるライブラリ（例：react ）のバージョンを上げる場合です。
単に npm install react@latest としても依存関係の問題でコマンドが失敗してしまいます。
依存関係を無視して無理やりバージョンを上げる方法もありますが、その場合は他のライブラリとの依存関係の解決に失敗した状態になります。
こうなるとそれ以降 npm i...]]></description><link>https://zenn.dev/abebe123000/articles/3991a5f8b3cb14</link><guid isPermaLink="true">https://zenn.dev/abebe123000/articles/3991a5f8b3cb14</guid><pubDate>Thu, 10 Apr 2025 13:22:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gKG7ZJtj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:npm%2520%25E3%2581%25A7%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2581%25AE%25E3%2581%2582%25E3%2582%258B%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2581%25AE%25E4%25BB%2595%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%25B9%25E3%2581%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhZWRlMTY3ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あべべ</dc:creator></item><item><title><![CDATA[ReactでToDoアプリに挑戦①〜要件定義・コンポーネント分割〜]]></title><description><![CDATA[こんにちは、イシカワです。
普段はPythonでコード書いてるのですが(最近は管理業務がメインでそもそもあまりコーディングできてないですが)、個人開発したいな〜ってことでReact勉強中です。
HTML/CSS/JavaScriptはProgateやって模写コーディングをいくつかやったことある程度です。
独学でReact勉強している方の参考になればと思います。
今回は個人開発の中で、TypeScriptにもチャレンジします。

 どんなアプリを作るか？
まずは、要件定義をしましょう。
といっても、世界に一つだけのオレオレアプリを最初から作ろうとすると挫折するのは目に見えているので、まずは...]]></description><link>https://zenn.dev/iskw_tech/articles/70c1324d5ff6f2</link><guid isPermaLink="true">https://zenn.dev/iskw_tech/articles/70c1324d5ff6f2</guid><pubDate>Thu, 10 Apr 2025 13:11:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MMtWEwgb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7ToDo%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25E2%2591%25A0%25E3%2580%259C%25E8%25A6%2581%25E4%25BB%25B6%25E5%25AE%259A%25E7%25BE%25A9%25E3%2583%25BB%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E5%2588%2586%25E5%2589%25B2%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25A4%25E3%2582%25B7%25E3%2582%25AB%25E3%2583%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUhxY25EM0hyQTRvYWpEcnUxN3l0UnAzYXVwUDY2XzhLZUNzcjhjYkh3ejBvNG1IQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>イシカワ</dc:creator></item><item><title><![CDATA[【Playwright】Error: EPERM: operation not permittedの解消のためにしたこと]]></title><description><![CDATA[PlaywrightのテストコードをWindows Powershellで実行しようとした際に、こちらのエラーが発生しました。「test-resultsファイルの操作が許可されていないよ」という旨のエラーのようです。
Error: EPERM: operation not permitted, rmdir 'C:\Users\-(省略)-\test-results'
実際のエラー画面はこちらです。

1行目でテストコードを実行。2行目が該当エラー
エラーの解消に手間取ったので、誰かの参考になればと思い記事にしました。

 エラーが解消した操作
結論、PCのエクスプローラーからtest-r...]]></description><link>https://zenn.dev/okitegami/articles/c10a2bb7c94bfc</link><guid isPermaLink="true">https://zenn.dev/okitegami/articles/c10a2bb7c94bfc</guid><pubDate>Thu, 10 Apr 2025 07:46:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qohKf5N0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Playwright%25E3%2580%2591Error%253A%2520EPERM%253A%2520operation%2520not%2520permitted%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kikuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1NTRhZDI5ZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kikuchi</dc:creator></item><item><title><![CDATA[Orvalのtransformerを使ってOpenAPIの定義ファイルを書き出す]]></title><description><![CDATA[
 はじめに
Orvalを使うと OpenAPI からクライアントコードを生成できます。
この際、生成に使用した OpenAPI の定義ファイルをローカルへ保持し、Git 管理したいことがありました。
Orval では、生成されたクライアントコードのカスタマイズを可能にするためにtransformerを使用できます。
この機能を利用することでクライアントコードの生成時に定義ファイルを書き出すことができます。

 前提
以下の環境を前提としています。
$ node -v         
v22.14.0
$ npm init -y
$ npm install orval --save-d...]]></description><link>https://zenn.dev/marokanatani/articles/save_openapi_with_orval_transformer</link><guid isPermaLink="true">https://zenn.dev/marokanatani/articles/save_openapi_with_orval_transformer</guid><pubDate>Thu, 10 Apr 2025 05:03:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4S3lZmI_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Orval%25E3%2581%25AEtransformer%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6OpenAPI%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258D%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maroKanatani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNTUzZDY3ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maroKanatani</dc:creator></item><item><title><![CDATA[useSearchParams()はSuspenseを忘れるな！]]></title><description><![CDATA[
 TL;DR
useSearchParams()はSuspenseしよう！
useSearchParams()に依存したhooksを使う時も忘れずに！

 経緯
next buildしたら以下のエラーが発生しました。
 ⨯ useSearchParams() should be wrapped in a suspense boundary at page "/test". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout
（中略）
Error occurred prerenderi...]]></description><link>https://zenn.dev/kofrah/articles/f2dce2da3e6aaf</link><guid isPermaLink="true">https://zenn.dev/kofrah/articles/f2dce2da3e6aaf</guid><pubDate>Thu, 10 Apr 2025 03:09:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MIHA_6rx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useSearchParams%2528%2529%25E3%2581%25AFSuspense%25E3%2582%2592%25E5%25BF%2598%25E3%2582%258C%25E3%2582%258B%25E3%2581%25AA%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kofrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljNmY2YzBlYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kofrah</dc:creator></item><item><title><![CDATA[【React】memo, useMemo, useCallbackを使いこなす]]></title><description><![CDATA[
 はじめに
Reactアプリケーションのパフォーマンスチューニングにおいて、「メモ化（Memoization）」は頻繁に議論されるテクニックです。
React.memo、useMemo、useCallback は、適切に使えば不要な再レンダリングや計算を削減するHowToですが、誤った使い方や過剰な適用は、逆にコードの複雑性を増し、期待した効果が得られないことも少なくありません。
将来的には、React Compilerがこれらのメモ化APIの多くを自動化し、開発者の負担を軽減することが期待されていますが、現時点では手動での最適化が重要と捉えています。
筆者自身、直近DRESS COD...]]></description><link>https://zenn.dev/dress_code/articles/bd577b38e1c700</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/bd577b38e1c700</guid><pubDate>Thu, 10 Apr 2025 02:34:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Eh0iJSZV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591memo%252C%2520useMemo%252C%2520useCallback%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2582%258B%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzMmQ5N2Q0NmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふるしょう</dc:creator></item><item><title><![CDATA[145. Binary Tree Postorder Traversal]]></title><description><![CDATA[バイナリツリーの根ノードが与えられたとき、そのノードの値を「後順（ポストオーダー）」で巡回した結果を返してください。


 例：

 例 1:
入力： root = [1,null,2,3]
出力： [3,2,1]
説明：
後順巡回では「左 → 右 → 根」の順でノードを訪れます。


 例 2:
入力： root = [1,2,3,4,5,null,8,null,null,6,7,9]
出力： [4,6,7,5,2,9,8,3,1]
説明：
同様に「左 → 右 → 根」の順でノードを巡回します。


 例 3:
入力： root = []
出力： []
説明：
木が空なので、結果も空に...]]></description><link>https://zenn.dev/idapan/articles/e2ae976e3dd983</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/e2ae976e3dd983</guid><pubDate>Wed, 09 Apr 2025 21:48:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qRpVYtXg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:145.%2520Binary%2520Tree%2520Postorder%2520Traversal%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[TypeScript以外が嫌いです]]></title><description><![CDATA[
 TypeScript以外が嫌いです
こんにちは、TypeScript原理主義者のTakoです。今日は私がなぜTypeScript以外の言語が心の底から嫌いなのかをお話しします。

 はじめに
みなさん、世の中にはプログラミング言語がたくさんありますよね。Java、Python、JavaScript、Ruby、Go...。でも、私にとってそれらは全て「TypeScriptではない言語」というカテゴリに分類されます。つまり、使う価値のない言語です。

 型がないなんて、人生がないようなもの
JavaScript？あんなの型がなくて何が楽しいんですか？undefined is not a ...]]></description><link>https://zenn.dev/takoserver/articles/7a624e38285b16</link><guid isPermaLink="true">https://zenn.dev/takoserver/articles/7a624e38285b16</guid><pubDate>Wed, 09 Apr 2025 13:43:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOOAg-F6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%258C%25E5%25AB%258C%25E3%2581%2584%25E3%2581%25A7%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmNTgyM2RjZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たこ</dc:creator></item><item><title><![CDATA[LangGraphの途中出力をストリーミングする]]></title><description><![CDATA[コード生成エージェントを作っていた際に、途中結果をチャット画面に表示する方法を調べていました。
その過程で、LangGraphの途中出力をストリーミングする方法を見つけたので、ご紹介します。
LangGraph stremingのドキュメントを見ると、ストリーミングの設定がいくつかあります。今回は、customを利用したストリーミングを行います。

 customストリーミング
ここでは、customストリーミングのために設定する箇所をご説明します。実際に動くコードは最後に記載します。
TypeScriptとPythonのコードのそれぞれを記載します。
customストリーミングを利用す...]]></description><link>https://zenn.dev/mseabass/articles/8d7272b58bdd1f</link><guid isPermaLink="true">https://zenn.dev/mseabass/articles/8d7272b58bdd1f</guid><pubDate>Wed, 09 Apr 2025 13:39:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lXWs_oRl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangGraph%25E3%2581%25AE%25E9%2580%2594%25E4%25B8%25AD%25E5%2587%25BA%25E5%258A%259B%25E3%2582%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:M%2520Sea%2520Bass%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyYTE3NzA4YmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>M Sea Bass</dc:creator></item><item><title><![CDATA[型演算子【個人学習まとめ】]]></title><description><![CDATA[
 型演算子

 keyof
keyof演算子は指定されたオブジェクト型からプロパティのキーを抽出し、それらを結合したユニオン型を生成することができます。
keyof 演算子
interface Person {
  name: string;
  age: number;
  hobbies: string[];
}

type PersonKeys = keyof Person;
// name | age | hobbies 型
上記ではPersonインターフェイスに対してkeyof演算子を使用しています。
これにより、Person型のプロパティキーであるname、age、hobb...]]></description><link>https://zenn.dev/o0rororo0o/articles/1d08fa38d01615</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/1d08fa38d01615</guid><pubDate>Wed, 09 Apr 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t18cSeoq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item></channel></rss>