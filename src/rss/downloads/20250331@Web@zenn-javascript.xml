<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 31 Mar 2025 04:40:44 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Railsでも手軽にリアルタイムバリデーションしたい]]></title><description><![CDATA[
 簡単なまとめ

HTMLの標準バリデーションでも見た目や文言は変更できるので、工夫で使える余地はありそう。
もっとRailsのView層とHTMLを密結合にするなら、バリデーションは定義した方が、Formに対してのバリデーションが楽になりそう。
結局のところRailsのバリデーションは強いこだわりがなければサボらない方が良い。


 発端
前回の記事では、主にRailsでのバックエンドバリデーションについて触れた。
https://zenn.dev/osiro/articles/4327f6978a67bb
DHHはHTMLのバリデーションが優秀なことを理由の一つとして、Railsで...]]></description><link>https://zenn.dev/osiro/articles/09e4eedecb467d</link><guid isPermaLink="true">https://zenn.dev/osiro/articles/09e4eedecb467d</guid><pubDate>Mon, 31 Mar 2025 01:04:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DiRfp9OP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rails%25E3%2581%25A7%25E3%2582%2582%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:webuilder240%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYxNWM3OGQwOWMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:OSIRO%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5OWUzODgyNWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>webuilder240</dc:creator></item><item><title><![CDATA[工数入力を促すための挑戦]]></title><description><![CDATA[
 はじめに
株式会社イノベーションで事務担当してますichiです。
普段は事務員として、請求書処理や工数集計などを担当しています。
今回は私が日々の業務で直面した「工数入力」に関する課題と、その解決のために奮闘した道のりについてお話しします。
!
この記事は、以下のスライドの内容をまとめたものになります。



 1. 業務課題といざプログラミングの世界へ！

 私の仕事と悩み
さて、私の業務の1つに、エンジニアの皆様の工数を月次確定前に集計するというものがあります。
この業務をスムーズに進めるためには、エンジニアの方々に毎日TeamSpirit(弊社で使用している勤怠管理システムです...]]></description><link>https://zenn.dev/innovation/articles/a3ca69ce30e5bd</link><guid isPermaLink="true">https://zenn.dev/innovation/articles/a3ca69ce30e5bd</guid><pubDate>Mon, 31 Mar 2025 01:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cBc7C4ep--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25B7%25A5%25E6%2595%25B0%25E5%2585%25A5%25E5%258A%259B%25E3%2582%2592%25E4%25BF%2583%25E3%2581%2599%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E6%258C%2591%25E6%2588%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ichi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyOTAzNWRlMDguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A4%25E3%2583%258E%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA2ZWM5NTBiOGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ichi</dc:creator></item><item><title><![CDATA[RCC と RSC の違いを理解したい]]></title><description><![CDATA[
 はじめに
React に Server Component が導入されたけど、このタイミングでフロントエンドに参入したので何がすごいのかも理解せずに使っていました...
フロントエンドのアプリを1つ作ってみて、何となく React がわかってきたところで、気になってたこの件を調べてみます！

 React Client Component (RCC) とは？
React Client Component（RCC）は、これまでの React で一般的に使われてきたコンポーネントの形態です。クライアント（ブラウザ）上で JavaScript によって実行され、動的な UI を実現するため...]]></description><link>https://zenn.dev/kuairen/articles/1027a1f67c7e48</link><guid isPermaLink="true">https://zenn.dev/kuairen/articles/1027a1f67c7e48</guid><pubDate>Sun, 30 Mar 2025 09:50:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R-SEOiSI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RCC%2520%25E3%2581%25A8%2520RSC%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kuairen%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5YmU5YjI0YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kuairen</dc:creator></item><item><title><![CDATA[mono-event: TypeScript / JavaScriptのイベント処理をシンプルで安全にする]]></title><description><![CDATA[こんにちは！ 普段お仕事でWeb開発をしてるみいぬです。最近、長らく「こんなのがあったらな…」と温めていたイベント管理ライブラリ mono-event を作ってみました。
最近のフロントエンド界隈はReactなどのフレームワーク中心で、イベント管理ライブラリはちょっと地味な印象かもしれません。でも、ゲーム開発やライブラリ開発、バックエンド、ツール開発なんかで少し複雑なことをしようとすると、しっかりしたイベント管理の仕組みが途端に欲しくなるんですよね...
私自身、普段そこそこ規模の大きいWeb上の3Dアプリ開発に携わっていて、「型安全に書きたいのに any だらけになる...」「かといっ...]]></description><link>https://zenn.dev/yukimi_inu/articles/5f9828920674fc</link><guid isPermaLink="true">https://zenn.dev/yukimi_inu/articles/5f9828920674fc</guid><pubDate>Sun, 30 Mar 2025 05:32:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pyBEwFsI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:mono-event%253A%2520TypeScript%2520%252F%2520JavaScript%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25A7%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2581%2584%25E3%2581%25AC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMzg0OGNlOTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みいぬ</dc:creator></item><item><title><![CDATA[【GAS】Required permissionsのポップアップを誤って閉じた時の対処法]]></title><description><![CDATA[この記事では、Required permissionsのポップアップを誤って閉じた時の対処法について書いていきたいと思います。

 エラー内容
https://zenn.dev/atomic/articles/831195249869ff
上記サイトでの権限の承認で紹介されている、スクリプト実行時に表示される権限承認のポップアップを誤ってキャンセルしてしまうと、再度ポップアップが表示されなくなりました。

 対処法
appscript.json に別の OAuthScopes の値を追加しました。
すると、新たに追加した権限要求だけでなく、キャンセルしていた権限も同時に承認できるようにな...]]></description><link>https://zenn.dev/sunagaku/articles/dce76cfbed0086</link><guid isPermaLink="true">https://zenn.dev/sunagaku/articles/dce76cfbed0086</guid><pubDate>Sun, 30 Mar 2025 00:46:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LIcXgDCd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590GAS%25E3%2580%2591Required%2520permissions%25E3%2581%25AE%25E3%2583%259D%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E8%25AA%25A4%25E3%2581%25A3%25E3%2581%25A6%25E9%2596%2589%25E3%2581%2598%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B9%25E3%2583%258A%25E3%2582%25AC%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHZYcmhxQi1Sb0FXNDlxcklpX0ZNcC1xbHFaTXV4bmR5am5LNkpoRWlQMkVjQXlRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>スナガク</dc:creator></item><item><title><![CDATA[Google検索結果をj/kキーでfocus移動]]></title><description><![CDATA[
以下のユーザースクリプトを使用すると、j/kキーでfocusを移動させることができます。
TampermonkeyやGreasemonkeyなどの拡張機能で動作します。


jキーを押すと次の検索結果に移動

kキーを押すと前の検索結果に移動



 インストール方法
このスクリプトを使用するには:

ブラウザにTampermonkeyやGreasemonkeyなどの拡張機能をインストール
新しいスクリプトを作成し、上記のコードを貼り付け
スクリプトを保存して有効化
Googleで検索

元記事:
https://www.satoslabo.com/blog/google-search...]]></description><link>https://zenn.dev/stucci/articles/google-search-jk</link><guid isPermaLink="true">https://zenn.dev/stucci/articles/google-search-jk</guid><pubDate>Sun, 30 Mar 2025 00:24:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k3IWp67p--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%25E6%25A4%259C%25E7%25B4%25A2%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592j%252Fk%25E3%2582%25AD%25E3%2583%25BC%25E3%2581%25A7focus%25E7%25A7%25BB%25E5%258B%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:stucci%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwNzY5ZDE2YWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>stucci</dc:creator></item><item><title><![CDATA[フロントエンドのスタイリング手法の全体像]]></title><description><![CDATA[
 フロントエンド開発におけるスタイリング手法の全体像
フロントエンド開発において、スタイリングは見た目だけでなくメンテナンス性、パフォーマンス、開発体験にも大きく影響します。この記事では、フロントエンド開発で使われる主要なスタイリング手法の全体像をまとめ、それぞれの特徴や適したユースケースを紹介します。

 1. グローバル CSS (従来の CSS/プリプロセッサー)
最も基本的で古典的なアプローチ。

 純粋な CSS
/* styles.css */
.button {
  background-color: blue;
  color: white;
  padding: 10...]]></description><link>https://zenn.dev/ka_projects/articles/6d65b8221bb9e1</link><guid isPermaLink="true">https://zenn.dev/ka_projects/articles/6d65b8221bb9e1</guid><pubDate>Sun, 30 Mar 2025 00:08:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--p8PyHwQj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E6%2589%258B%25E6%25B3%2595%25E3%2581%25AE%25E5%2585%25A8%25E4%25BD%2593%25E5%2583%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:luck%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3MzNhNDk3OTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:KA%2520projects%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSWZWX29pQVNoRWZKTVpVV1NuOVh2c1MyOU11b1pEU3dodEVfQkFNR0FWbjBPUkwxYjc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>luck</dc:creator></item><item><title><![CDATA[JavaScriptで文字列の中からURLを検出してリンク（aタグ）にする]]></title><description><![CDATA[
 問題提起
Webアプリで、ユーザーの投稿などの中に、URLを含めることを許可したい場合が多々あると思います。そのとき、URLを含むテキストをフツーに表示するだけでは、ブラウザはそれをリンクとして扱ってくれません。かといって、ユーザー自身がマークダウンなどでリンクをマークするというのも、一般のユーザーには酷でしょう。そんなとき、おすすめしたいライブラリとしてLinkifyというものがあります。

 使い方
Linkifyの使い方は複数ありますが、ここではlinkify-elementというライブラリを使った方法をご紹介します。
ダウンロード
npm install linkifyjs ...]]></description><link>https://zenn.dev/kdavslrjklfrjak/articles/4e2c1895a2c7bb</link><guid isPermaLink="true">https://zenn.dev/kdavslrjklfrjak/articles/4e2c1895a2c7bb</guid><pubDate>Sat, 29 Mar 2025 23:13:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eAQMexU9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25A7%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25AE%25E4%25B8%25AD%25E3%2581%258B%25E3%2582%2589URL%25E3%2582%2592%25E6%25A4%259C%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25EF%25BC%2588a%25E3%2582%25BF%25E3%2582%25B0%25EF%25BC%2589%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%258A%25A0%25E7%25B4%258D%25E5%2581%25A5%25E5%25BD%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3NjY2N2VjMWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>加納健彦</dc:creator></item><item><title><![CDATA[【JavaScript】JSDocで@ts-checkを使うときの@templateにデフォルト型を指定する【TypeScript】]]></title><description><![CDATA[なぜかTypeScript公式のJSDocリファレンスに書かれておらず、「jsdoc ts-check template default」で検索しても出てこなかったので、一応メモを残しておく。
@templateのデフォルト型を指定するには@template [TypeArgName=DefaultType]と書く。
例えば以下のTypeScriptコード相当のts-checkを書くには
type Identity&lt;T = number&gt; = T
const foo: Identity = 10
以下のように書く。
/**
 * @template [T=number]
 *...]]></description><link>https://zenn.dev/aiya000/articles/4930cfd3a50e22</link><guid isPermaLink="true">https://zenn.dev/aiya000/articles/4930cfd3a50e22</guid><pubDate>Sat, 29 Mar 2025 17:53:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MTZUPgYG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591JSDoc%25E3%2581%25A7%2540ts-check%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%2540template%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2588%25E5%259E%258B%25E3%2582%2592%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590Ty...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%2584%25E3%2582%2584%2520-%2520aiya000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pZVUM0QXdxcVdtMVZmVWtiQXFzdE5ra1BFZU1FOUN0NFY1UzdiPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あいや - aiya000</dc:creator></item><item><title><![CDATA[useMemoに非同期処理を書いてはいけない理由]]></title><description><![CDATA[恥ずかしながら最近知ったので、備忘録としてまとめておきます...

 発端
例えば以下のようなコードを書いたとします。
const fetchData = () =&gt; {
  return new Promise((resolve) =&gt; {
    setTimeout(() =&gt; {
      console.log("非同期処理が完了しました");
      resolve("非同期データ");
    }, 1000);
  });
};

const result = useMemo(() =&gt; {
  fetchData().then(() =&g...]]></description><link>https://zenn.dev/muship/articles/cd4a54ba574f96</link><guid isPermaLink="true">https://zenn.dev/muship/articles/cd4a54ba574f96</guid><pubDate>Sat, 29 Mar 2025 14:55:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9UquJucc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useMemo%25E3%2581%25AB%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E7%2590%2586%25E7%2594%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:muship%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYjM0YjgzZWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>muship</dc:creator></item><item><title><![CDATA[JavaScriptの実行メカニズムをまとめる]]></title><description><![CDATA[JavaScriptの非同期処理を調べていると、度々イベントループという用語を目にします。なんとなく概要は知っていても、具体的に何が行われているのかといった仕組みを詳細に理解しているとは言い切れませんでした。そもそもJavaScriptがどのように実行されているかがあやふやです。
気になって調べていると、イベントループとプロミスチェーンで学ぶJavaScriptの非同期処理という記事を見つけました。この記事は非同期処理を理解するために最初にイベントループを学びます。その部分ではイベントループだけではなく、それ以外のJavaScriptの実行環境や実行のメカニズムなども解説されていて、とて...]]></description><link>https://zenn.dev/hwld/articles/562f70edfe51f4</link><guid isPermaLink="true">https://zenn.dev/hwld/articles/562f70edfe51f4</guid><pubDate>Sat, 29 Mar 2025 08:23:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b77UMQzd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E3%2583%25A1%25E3%2582%25AB%25E3%2583%258B%25E3%2582%25BA%25E3%2583%25A0%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hwld%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyOWJmMDY5ZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hwld</dc:creator></item><item><title><![CDATA[【React】Props のバケツリレー解消法について]]></title><description><![CDATA[
 はじめに
Reactでは、コンポーネント間のデータの受け渡しにおいて、propsのバケツリレーの問題がよく発生することがあります。
バケツリレーとは、あるコンポーネントから別のコンポーネントに props を渡す際に、複数の中間コンポーネントを経由して渡しているだけの状態をいいます。
なぜこのような問題が発生するかというと、React では「単方向データフロー」を採用していて、コンポーネント間で直接データをやり取りすることができないためだからです。
Context API や状態管理ライブラリで解消する方法もありますが、props を渡すだけの分かりやすいコンポーネントを作成すること...]]></description><link>https://zenn.dev/rh820/articles/bd8e97fd315cfa</link><guid isPermaLink="true">https://zenn.dev/rh820/articles/bd8e97fd315cfa</guid><pubDate>Sat, 29 Mar 2025 08:19:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OQjqfdjX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591Props%2520%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25B1%25E3%2583%2584%25E3%2583%25AA%25E3%2583%25AC%25E3%2583%25BC%25E8%25A7%25A3%25E6%25B6%2588%25E6%25B3%2595%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hodii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjM2JkYzhiZTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hodii</dc:creator></item><item><title><![CDATA[React Router v7 の内部構造を探る：リクエストからレンダリングまでの道のり]]></title><description><![CDATA[
 はじめに
React Router は、React アプリケーションにおけるルーティングライブラリのデファクトスタンダードとして長年利用されてきました。v6 で Data API が導入され、フルスタックフレームワークとしての側面が強化されましたが、v7 ではさらに進化し、Vite との統合、Single Fetch、Lazy Loading といったモダンな機能がデフォルトで組み込まれ、より洗練された開発体験とパフォーマンスを提供します。
しかし、これらの機能がどのように連携し、ブラウザのリクエストがどのように処理され、最終的にページが表示されるのか、その内部構造は少し複雑に見える...]]></description><link>https://zenn.dev/coji/articles/react-router-v7-internal-flow</link><guid isPermaLink="true">https://zenn.dev/coji/articles/react-router-v7-internal-flow</guid><pubDate>Sat, 29 Mar 2025 05:38:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TX00IYOw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Router%2520v7%2520%25E3%2581%25AE%25E5%2586%2585%25E9%2583%25A8%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E6%258E%25A2%25E3%2582%258B%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2581%258B%25E3%2582%2589%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%25AE%25E9%2581%2593%25E3%2581%25AE%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Coji%2520Mizoguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pWY2RrNjcwV2NIdGs0anBHa2FGTDAxcERVUVlIX0JYdWE5aDRVNVE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Coji Mizoguchi</dc:creator></item><item><title><![CDATA[【React】export default function ホイスティングによるエラー]]></title><description><![CDATA[Reactを使う場合に、export default functionのホイスティングによって起こり得る予期しない動作やエラーについて、具体的なケースを挙げて説明します。ホイスティング自体は便利である一方で、特に複雑な構造を持つプロジェクトでは、予期せぬエラーが発生することがあります。

 問題

 1. 関数コンポーネントの定義順序に依存する問題
Reactコンポーネントをexport default functionで定義すると、その関数はホイスティングされるため、コンポーネントを定義する前に呼び出すことができてしまいます。これは通常、Reactコンポーネント内では問題ないのですが、...]]></description><link>https://zenn.dev/milkandhoney995/articles/97e4eddd7df0ae</link><guid isPermaLink="true">https://zenn.dev/milkandhoney995/articles/97e4eddd7df0ae</guid><pubDate>Sat, 29 Mar 2025 05:23:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V2tvmSpp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591export%2520default%2520function%2520%25E3%2583%259B%25E3%2582%25A4%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2594%25E3%2581%25BE%25E3%2581%25A0%25E3%2582%2593%25E3%2581%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNll4Y2RIakdmaEpuUGI2MkVmaXBRRmFlRG85X0ZaMFpic0lrS3Btdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ごまだんご</dc:creator></item><item><title><![CDATA[export default function, export default constどっち？]]></title><description><![CDATA[
 はじめに
Next.jsで開発していて、appフォルダ内のファイルはexport default functionとexport default constどちらで記載した方が良いのか？と思い、それぞれの違いをまとめてみました。

 ホイスティングについて
両者の違いは、ホイスティングされるかどうかです。
ホイスティング（持ち上げる（hoisted））とは、関数宣言や変数宣言がそのスコープの先頭に移動したように振る舞うというJavaScriptの仕組みです。

 関数宣言
関数宣言は、関数が宣言された場所に関わらず使えるようになるのは、関数宣言がスコープの先頭に「持ち上げられる」から...]]></description><link>https://zenn.dev/milkandhoney995/articles/c96fd441475e43</link><guid isPermaLink="true">https://zenn.dev/milkandhoney995/articles/c96fd441475e43</guid><pubDate>Sat, 29 Mar 2025 05:09:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8lbRGwsq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:export%2520default%2520function%252C%2520export%2520default%2520const%25E3%2581%25A9%25E3%2581%25A3%25E3%2581%25A1%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2594%25E3%2581%25BE%25E3%2581%25A0%25E3%2582%2593%25E3%2581%2594%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNll4Y2RIakdmaEpuUGI2MkVmaXBRRmFlRG85X0ZaMFpic0lrS3Btdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ごまだんご</dc:creator></item><item><title><![CDATA[バニラJavaScriptだけでTODOアプリを作ろう！初心者が最初につまづくポイントも解説]]></title><description><![CDATA[
 はじめに
「ReactやVueより、まずはバニラJSでDOM操作を理解したい！」
そんなあなたに向けて、JavaScriptだけで作るTODOアプリの教材をお届けします。

フレームワークに頼らず、自分の手でコードを書く力をつけたい
HTML/CSSは少し触ったことがある
「関数って何？」くらいのレベル感の方におすすめです。

今回の記事では、TODOアプリを作りながら、初心者がつまづきやすいポイントも解説していきます！


 1. 開発環境の準備

ブラウザ（Chrome推奨）
テキストエディタ（VSCodeがおすすめ）

フォルダ構成（超シンプル）
todo-app/
├── i...]]></description><link>https://zenn.dev/homatsu_tech/articles/6f9713e07af688</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/6f9713e07af688</guid><pubDate>Fri, 28 Mar 2025 23:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--axHn2knt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%258B%25E3%2583%25A9JavaScript%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7TODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%25EF%25BC%2581%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258C%25E6%259C%2580%25E5%2588%259D%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%25A5%25E3%2581%258F%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2582%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZWQ1ZGYyMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[速習 Valibot]]></title><description><![CDATA[
 はじめに
フクロウラボでは一部のプロダクトでサーバーサイドの言語に TypeScript を採用しています。クライアントサイドからのリクエストや、外部マイクロサービスとのやり取りなどの、サービスの外の世界との接点になる部分では Zod を用いてスキーマによるバリデーションを行っています。
Zod はとても良いライブラリですが、筆者は代替ライブラリである Valibot を好んでおり直近の個人開発では Valibot を第一の選択肢として考えるようにしています。そこで今回は、チームメンバーへの布教も兼ねて Valibot について簡単に紹介したいと思います。

 Valibot とは
...]]></description><link>https://zenn.dev/fukurou_labo/articles/73a75b53597447</link><guid isPermaLink="true">https://zenn.dev/fukurou_labo/articles/73a75b53597447</guid><pubDate>Fri, 28 Mar 2025 09:56:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TLKEhLwI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:%25E9%2580%259F%25E7%25BF%2592%2520Valibot%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:shinshin%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3NGU4Mzc3ZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25A6%25E3%2583%25A9%25E3%2583%259C%2520%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzZTUyMmM0NWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shinshin</dc:creator></item><item><title><![CDATA[JavaScript②(Ajax)]]></title><description><![CDATA[昨日の復習・Ajax（Asynchronous JavaScript and XML）通信とは

 Ajax（Asynchronous JavaScript and XML）通信とは

HTMLの一部を追加で読み込む通信方法


 ページを再読み込みしない・サーバーから結果待たずに画面書き換え

 これらの「非同期通信」を実装するのを、Ajaxと呼ぶ！

ページ全体を再読み込みせずに、一部だけを非同期で読み込む通信手法
JavaScript を使って、裏側でデータを取得・送信し、ページの一部に反映する
従来のHTML通信ではページ全体が再読み込みされるが、Ajaxでは必要な部分だけ更新で...]]></description><link>https://zenn.dev/eliri/articles/6db9c35ced1cda</link><guid isPermaLink="true">https://zenn.dev/eliri/articles/6db9c35ced1cda</guid><pubDate>Fri, 28 Mar 2025 08:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wdoEwCam--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:JavaScript%25E2%2591%25A1%2528Ajax%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Eli%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiYWJlMzMzYzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Eli</dc:creator></item><item><title><![CDATA[JavaScriptのnull/undefined判定の仕方いろいろ]]></title><description><![CDATA[
 なんの記事？
JavaScript で null/undefined 判定の書き方がいろいろあってコードレビューとか説明するとき用に改めてまとめてみた。
どちらかというと普段 JavaScript をあまり書かない人が読むことを想定して書く予定。

 前提知識
JavaScript では Boolean に変換したときに true / false になる値のことをそれぞれ Truthy (真値) / Falsy (偽値) と呼ぶ。

 Truthy/Falsyを利用する時の罠
null/undefined 判定のとき以下のように書きたくなるが、特定のケースで意図した通りに動かなかった...]]></description><link>https://zenn.dev/leaner_dev/articles/20250326-patterns_of_null_or_undefined_checks</link><guid isPermaLink="true">https://zenn.dev/leaner_dev/articles/20250326-patterns_of_null_or_undefined_checks</guid><pubDate>Fri, 28 Mar 2025 01:51:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rDYYRDMb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AEnull%252Fundefined%25E5%2588%25A4%25E5%25AE%259A%25E3%2581%25AE%25E4%25BB%2595%25E6%2596%25B9%25E3%2581%2584%25E3%2582%258D%25E3%2581%2584%25E3%2582%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:glico%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhNjFkZTAyMDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%258A%25E3%2583%25BC%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUxN2FhMGEyNTEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glico</dc:creator></item><item><title><![CDATA[React Native import を絶対パス（エイリアス）で参照する設定]]></title><description><![CDATA[
 はじめに
Reactで開発していると、コンポーネントや関数をインポートする際のパスの指定に苦しむことがよくあると思います。
相対パスで指定する場合、下記のように「..」がたくさん並んで読みにくくなります。
import { Component } from '../../../components/ComponentA'
これは単に読みにくいだけでなく、ファイル構造を変更した際にパスの修正が難しくなるという大きな問題を孕んでいます。
この問題を解決するために「＠」をプロジェクトルートからのエイリアスに設定します。
すると、下記のように常にimportは絶対パスで参照することができます...]]></description><link>https://zenn.dev/akiakinorinori/articles/a6e26a7eeff0d4</link><guid isPermaLink="true">https://zenn.dev/akiakinorinori/articles/a6e26a7eeff0d4</guid><pubDate>Thu, 27 Mar 2025 16:09:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xsH0AY1a--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Native%2520import%2520%25E3%2582%2592%25E7%25B5%25B6%25E5%25AF%25BE%25E3%2583%2591%25E3%2582%25B9%25EF%25BC%2588%25E3%2582%25A8%25E3%2582%25A4%25E3%2583%25AA%25E3%2582%25A2%25E3%2582%25B9%25EF%25BC%2589%25E3%2581%25A7%25E5%258F%2582%25E7%2585%25A7%25E3%2581%2599%25E3%2582%258B%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2582%25E3%2581%258D%25E3%2581%2582%25E3%2581%258D%25E3%2581%25AE%25E3%2582%258A%25E3%2581%25AE%25E3%2582%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZnAyUnVMSF9OSDJreFFVS1lBZmozbHZQX0lZRU5vZ3FiY3M1RW1NRDFNSU1FPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あきあきのりのり</dc:creator></item></channel></rss>