<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 13 Nov 2024 01:43:14 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[coc.nvimで指定したファイル内の補完候補を除外する方法]]></title><description><![CDATA[同じ名前の補完候補が複数ある場合、間違った対象で補完してしまうと気が付きにくいバグを生み出してしまう可能性が高いのでなるべく一意な名称をつける方がいいのですが、外部モジュールなど自分の管理外のコードが絡むとそれが難しいケースもあります。
そのような場合は以下のようにCocConfigから特定のパターンのファイルで定義された名称を補完候補から取り除く事ができます。
  "typescript.preferences.autoImportFileExcludePatterns": [
    "**/*_off.ts"
  ],
]]></description><link>https://zenn.dev/takiuchi/articles/ef5cf4a5dbc01c</link><guid isPermaLink="true">https://zenn.dev/takiuchi/articles/ef5cf4a5dbc01c</guid><pubDate>Wed, 13 Nov 2024 00:08:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--p6Eh36f2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:coc.nvim%25E3%2581%25A7%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259F%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E5%2586%2585%25E3%2581%25AE%25E8%25A3%259C%25E5%25AE%258C%25E5%2580%2599%25E8%25A3%259C%25E3%2582%2592%25E9%2599%25A4%25E5%25A4%2596%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takiuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0NFOHVIcHhmTmR3cHhzemVBWnlmSFg1VG01NVhFNDh6d3RQSkNrc21MY1BCTG5tNTY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takiuchi</dc:creator></item><item><title><![CDATA[ポケポケのガチャ確率シミュレーター作った]]></title><description><![CDATA[ポケポケ無課金勢だが、全然exポケモン集まらないのでどのくらい低確率なのか調べるために作った。

 サイト
https://gacha.turai.work/pokepoke.html

 技術スタック

Vite
Mantine

技術選定だが、元々ガチャシュミレーターを開発していたのでポケポケの確率に合わせて別のページを作った。初版は4年前だがなんと3回も作り直している。

初代: https://github.com/thr3a/gacha-simulator

Nuxt(Vue.js), Bootstrap


2代目: https://github.com/thr3a/gach...]]></description><link>https://zenn.dev/thr3a/articles/a193ff55c40e0b</link><guid isPermaLink="true">https://zenn.dev/thr3a/articles/a193ff55c40e0b</guid><pubDate>Tue, 12 Nov 2024 16:00:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Wtx-9zxC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259D%25E3%2582%25B1%25E3%2583%259D%25E3%2582%25B1%25E3%2581%25AE%25E3%2582%25AC%25E3%2583%2581%25E3%2583%25A3%25E7%25A2%25BA%25E7%258E%2587%25E3%2582%25B7%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:thr3a%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzMjdmNGU4MjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>thr3a</dc:creator></item><item><title><![CDATA[なぜ英語でZustandやJotaiに関する本を出版したのか]]></title><description><![CDATA[個人的にはコードを書くのは好きですが、文章を書くのは苦手です。なので、ブログはいつも短文ですし、OSSのドキュメントも簡素なことが多いです。そんな私ですが、何年か前に本を出版しました。参考になるかわかりませんが、ちょっと経緯を振り返ってみようと思います。タイトルにもあるように、本は英語で書きました。本に限らず、ブログやOSSのドキュメントも英語ですが。英語の本は書いたことがなかったので、興味がありました。本を書くことに興味があったわけではなく、英語の本の著者に興味がありました。だってプロフィールに書けるじゃないですか。それだけです。本という形態は、Web開発など移り変わりの早い分野にはあ...]]></description><link>https://zenn.dev/dai_shi/articles/d6c9c2452083d4</link><guid isPermaLink="true">https://zenn.dev/dai_shi/articles/d6c9c2452083d4</guid><pubDate>Tue, 12 Nov 2024 11:09:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zLXdKiQ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2581%259C%25E8%258B%25B1%25E8%25AA%259E%25E3%2581%25A7Zustand%25E3%2582%2584Jotai%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E6%259C%25AC%25E3%2582%2592%25E5%2587%25BA%25E7%2589%2588%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcwZGNhM2E2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daishi</dc:creator></item><item><title><![CDATA[バックエンドエンジニアがフロントエンドに挑戦して得た学び]]></title><description><![CDATA[株式会社CastingONEの清水です。
自分は元々バックエンドとしてやっていたのですが、去年の12月頃からフロントエンドをやり始めてからもうすぐ1年が経ちます。
バックエンドエンジニアがフロントエンドを1年弱やっていく過程で起こったこと、役立ったことをまとめてみました。

 各時期における経験と学び

 1. React・TypeScriptについて何もわからない時期
この時期の特徴

できること

フロントは何もない


課題

React・TypeScriptについて何もわからない



効果的だった取り組み

一般的なReact・TypeScriptの入門記事などを読んで基本的な...]]></description><link>https://zenn.dev/castingone_dev/articles/d1a8722c246955</link><guid isPermaLink="true">https://zenn.dev/castingone_dev/articles/d1a8722c246955</guid><pubDate>Tue, 12 Nov 2024 11:03:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zGMmAr6v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258C%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25E3%2581%2597%25E3%2581%25A6%25E5%25BE%2597%25E3%2581%259F%25E5%25AD%25A6%25E3%2581%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:CastingONE%2520Tech%2520Blog%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiOTg1ODI2NjEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:CastingONE%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE3YjQ5ZGY1Y2MuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>CastingONE Tech Blog</dc:creator></item><item><title><![CDATA[Unsupported cipher or incorrect key length. Supported ciphers are: aes]]></title><description><![CDATA[Laravelで躓いた点をまとめておきます。
Dockerでローカル環境を作ったものの、立ち上げた瞬間に謎のエラーが出ました。
「Unsupported cipher or incorrect key length. Supported ciphers are: aes」
Chat GPTによると
「エラーメッセージ「Unsupported cipher or incorrect key length. Supported ciphers are: aes-128-cbc, aes-256-cbc, aes-128-gcm, aes-256-gcm.」は、暗号化処理に必要な「暗号化方式（...]]></description><link>https://zenn.dev/aya_sato/articles/717d3dbb9a6e52</link><guid isPermaLink="true">https://zenn.dev/aya_sato/articles/717d3dbb9a6e52</guid><pubDate>Tue, 12 Nov 2024 10:23:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ea1cPTg3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Unsupported%2520cipher%2520or%2520incorrect%2520key%2520length.%2520Supported%2520cip...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aya%2520satoh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dLa3dRbnNlMlVSdUs0ellWZ3FOZHJ3bnBBTzdyNmRYd3lTMU1JPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aya satoh</dc:creator></item><item><title><![CDATA[propsの基本（React）]]></title><description><![CDATA[
 はじめに
Reactのコンポーネント間で値をやり取りする場合の方法の一つであるpropsについて学んだので、備忘録として使用例を交えながら解説を残したい。（間違っていたらコメント下さい。修正します。）

 そもそもReactのpropsとは。
簡潔に言うと、"コンポーネント間の値のやり取りを可能にするもの"です。
useStateとの違い
似たような状態の管理方法に、useStateがありますが、useStateで管理できるのはコンポーネント内の値だけなのでコンポーネントを跨いでグローバルに値をやり取りする場合にはpropsやcontextなど、他の方法で対応する必要があります。

...]]></description><link>https://zenn.dev/aputech/articles/ecfefa755df245</link><guid isPermaLink="true">https://zenn.dev/aputech/articles/ecfefa755df245</guid><pubDate>Tue, 12 Nov 2024 03:03:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fNWezNSP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:props%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25EF%25BC%2588React%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B2%25E3%2583%25BC%2540%25E6%2583%2585%25E5%25A0%25B1%25E7%25B3%25BB%25E5%25AD%25A6%25E7%2594%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4NGM3YTBlZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひー@情報系学生</dc:creator></item><item><title><![CDATA[【React】ドラックで操作可能なコンポーネントの実装]]></title><description><![CDATA[
 デモ


 実装

 親コンポーネントからの呼び出し

App.tsx
const App = () =&gt; {
return 
  &lt;Draggable ignore={['input', 'textarea']}&gt;
      &lt;form&gt;省略&lt;/form&gt; //ドラッグしたいコンポーネントやHTMLElement
  &lt;/Draggable&gt;
}


 Draggableコンポーネントの実装
TailwindCssでスタイリングしています。

Draggable.tsx
import React, { useCallback,...]]></description><link>https://zenn.dev/makimura3329/articles/react-draggable-component-20241112</link><guid isPermaLink="true">https://zenn.dev/makimura3329/articles/react-draggable-component-20241112</guid><pubDate>Tue, 12 Nov 2024 02:06:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iJdZFxDO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591%25E3%2583%2589%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25A7%25E6%2593%258D%25E4%25BD%259C%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2520Makimura%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3ZTE1MjMxZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>🧟Makimura🧟</dc:creator></item><item><title><![CDATA[既存のプロジェクトにしれっとKnipを導入する]]></title><description><![CDATA[
 はじめに
チームで開発していると、たまにどこからも使われてない謎のファイルが残っちゃうことありますよね。
変更だと差分が出てくれるのでレビューしやすいのですが、「使われなくなった」を発見するのは結構難しい…
そんな悩みを Knip が解決してくれそうだったので、既存のプロジェクトにしれっと入れてみました。

 Knipとは
https://knip.dev/
不要なファイルや不要な export を検知してくれるやつ。

 しれっと入れる
基本公式サイトの指示どおりにやるだけです。
yarn create @knip/config
これでインストールされます。
yarn knip
こ...]]></description><link>https://zenn.dev/monmomo/articles/0d0ab1de89fd62</link><guid isPermaLink="true">https://zenn.dev/monmomo/articles/0d0ab1de89fd62</guid><pubDate>Mon, 11 Nov 2024 13:58:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H3bgr464--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2597%25A2%25E5%25AD%2598%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AB%25E3%2581%2597%25E3%2582%258C%25E3%2581%25A3%25E3%2581%25A8Knip%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2582%2593%25E3%2582%2582%25E3%2582%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzN2Q3ZTgwN2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>もんもも</dc:creator></item><item><title><![CDATA[Next.jsで実装する場合に、セキュリティ面で気を付けること]]></title><description><![CDATA[
 はじめに
以下のYoutubeで解説されていた内容が勉強になったのでまとめた。
https://www.youtube.com/watch?v=LolugLiLhHs

 ポイント
・Propsで渡す情報に気を付ける
・SeverActionsに注意する
・認証チェックをする場所について

 Propsで渡す情報に気を付ける
Next.jsでは、サーバーコンポーネントと、クライアントコンポーネントがある。
例として、サーバーコンポーネント内で、ユーザー情報を取得して、クライアントコンポーネントにその値を渡してしまった場合、本来見られてはいけないユーザー情報がブラウザで見ることが可能に...]]></description><link>https://zenn.dev/ryohei0509/articles/b86b4b044f58ab</link><guid isPermaLink="true">https://zenn.dev/ryohei0509/articles/b86b4b044f58ab</guid><pubDate>Mon, 11 Nov 2024 13:06:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ULsvaj5E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AB%25E3%2580%2581%25E3%2582%25BB%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E9%259D%25A2%25E3%2581%25A7%25E6%25B0%2597%25E3%2582%2592%25E4%25BB%2598%25E3%2581%2591%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hukuryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0M2JhYWM4YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hukuryo</dc:creator></item><item><title><![CDATA[AST（抽象構文木）を構築せず文字列ベースの加工だけを行うPrettierプラグインの作り方]]></title><description><![CDATA[
 はじめに
https://zenn.dev/ttskch/articles/db73d0703f93dc
こちらの記事で、拙作の @ttskch/prettier-plugin-tailwindcss-anywhere というPrettierプラグインをご紹介しました。
このプラグインは、多くのPrettierプラグインとは異なり、コードをパースしてASTを構築するということをしていません。
コード全体の文字列のうち必要な箇所を文字列ベースで加工しているのみなので、実装コード を見ていただくと分かるように、コード量はごくわずかです。
私はこのプラグインを作るまで、Prettierプラ...]]></description><link>https://zenn.dev/ttskch/articles/52d9713011fd03</link><guid isPermaLink="true">https://zenn.dev/ttskch/articles/52d9713011fd03</guid><pubDate>Mon, 11 Nov 2024 08:27:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cbZSDhC3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AST%25EF%25BC%2588%25E6%258A%25BD%25E8%25B1%25A1%25E6%25A7%258B%25E6%2596%2587%25E6%259C%25A8%25EF%25BC%2589%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%259B%25E3%2581%259A%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AE%25E5%258A%25A0%25E5%25B7%25A5%25E3%2581%25A0%25E3%2581%2591%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586Prettier%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ttskch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhY2Y2ZmZjMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ttskch</dc:creator></item><item><title><![CDATA['element' は 'null' の可能性があります。ts(18047) 〜TypeScriptで要素を取得する〜]]></title><description><![CDATA[
 エラー内容
TypeScriptで要素を取得したあと、プロパティにアクセスすると「'XXXX' は 'null' の可能性があります。」というエラーが出る。

コード：

index.html
&lt;div class="js-class"&gt;新しいクラスを追加する&lt;/div&gt;


index.ts
const element = document.querySelector(".js-class");
element.classList.add("is-sp");

anyやasを使ってただエラーを回避するのではなく、
想定される型と型注釈が一致するような記述を考...]]></description><link>https://zenn.dev/hiro24/articles/15aa2cb1b9379f</link><guid isPermaLink="true">https://zenn.dev/hiro24/articles/15aa2cb1b9379f</guid><pubDate>Mon, 11 Nov 2024 05:11:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b60gSLt5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2527element%2527%2520%25E3%2581%25AF%2520%2527null%2527%2520%25E3%2581%25AE%25E5%258F%25AF%25E8%2583%25BD%25E6%2580%25A7%25E3%2581%258C%25E3%2581%2582%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2599%25E3%2580%2582ts%252818047%2529%2520%25E3%2580%259CTypeScript%25E3%2581%25A7%25E8%25A6%2581%25E7%25B4%25A0%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B2%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS1RZSWtnclBaaVIxOWM1NjAwVXhYZEd0elcxVzBkWnlGTFV2Y2NUYXJrMWFDZWEydz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひろ</dc:creator></item><item><title><![CDATA[【2024年版】Dockerfileのベストプラクティスを整理しながらNode.jsで実践する]]></title><description><![CDATA[
 はじめに
最初はなんとなくで書いていた Dockerfile なのですが、社内用にベストプラクティスを整理するタイミングがあったので、実際に Node.js + TypeScript でアプリケーションを作成しながらまとめることにしました。
この記事でフォーカスするのは、 Dockerfile のベストプラクティスそのものの詳細ではなく、それらを整理と「結局どう実装すんねん？」ってところです。
主に以下の内容を参考にしています。



!
ちなみに、少し内容が古いのでおすすめしないですが、ドキュメントに関して日本語訳版もありました。

Dockerfile を書くベストプラクティス ...]]></description><link>https://zenn.dev/mutex_inc/articles/nodejs-ts-docker-best-practice</link><guid isPermaLink="true">https://zenn.dev/mutex_inc/articles/nodejs-ts-docker-best-practice</guid><pubDate>Mon, 11 Nov 2024 02:50:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IGV8YbzA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%25902024%25E5%25B9%25B4%25E7%2589%2588%25E3%2580%2591Dockerfile%25E3%2581%25AE%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2597%25E3%2581%25AA%25E3%2581%258C%25E3%2582%2589Node.js%25E3%2581%25A7%25E5%25AE%259F%25E8%25B7%25B5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:chrg%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2NmRjMzU1MTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:mutex%2520Official%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhMjMwMTBiMzkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chrg</dc:creator></item><item><title><![CDATA[Kyselyの利用と工夫と感想]]></title><description><![CDATA[
 Intro
TypeScriptのDBアクセスライブラリといえば、今はPrismaが第一に上がりそうだが、Kyselyを使ってみた。
なぜKyselyにしたか、どう使ったか、使ってみてどうだったか記載していく。

 DBアクセスライブラリの選定
選定なんて大層な単語を使っているが、選ぶのは人の考え方次第だ。ただ、選ぶための視点を、少しだけ整理しておきたい。

 DBアクセスライブラリの種類
DBアクセスライブラリはいわゆるパターンものなので、Pattern Of Enterprise Application Architectureをまず確認する。DBアクセスに関するものは以下が挙げ...]]></description><link>https://zenn.dev/motojouya/articles/kysely_use_scratch_impression</link><guid isPermaLink="true">https://zenn.dev/motojouya/articles/kysely_use_scratch_impression</guid><pubDate>Sun, 10 Nov 2024 23:53:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3czAdmqR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kysely%25E3%2581%25AE%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%25A8%25E5%25B7%25A5%25E5%25A4%25AB%25E3%2581%25A8%25E6%2584%259F%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%259D%2589%25E5%25B1%25B1%25E6%258B%2593%25E4%25B9%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzNTIwOTBlY2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>杉山拓也</dc:creator></item><item><title><![CDATA[T extends (...args: infer R) => unknown ? R : never ← ナニコレ]]></title><description><![CDATA[type-challengesをやってるときの、ナニコレ シリーズです。前回はこれでした。
https://zenn.dev/yskn_sid25/articles/87c5cde1be86b6
今回もやっていきます。前回同様、「あーなるほどね」となった方や「またinferの話か、どんだけこすんねん」となった方はわざわざ読む必要がない記事っぽいです。

 手っ取り早く何か知りたい人・答え合わせしたい人
私が解説せずとも、ドキュメントで似たような使い方をちゃんと説明してくれているので、そっちを読むのが正解です。
https://www.typescriptlang.org/docs/han...]]></description><link>https://zenn.dev/yskn_sid25/articles/bf993f9350cd57</link><guid isPermaLink="true">https://zenn.dev/yskn_sid25/articles/bf993f9350cd57</guid><pubDate>Sun, 10 Nov 2024 14:18:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yDxr50RZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:T%2520extends%2520%2528...args%253A%2520infer%2520R%2529%2520%253D%253E%2520unknown%2520%253F%2520R%2520%253A%2520never%2520%25E2%2586%2590%2520%25E3%2583%258A%25E3%2583%258B%25E3%2582%25B3%25E3%2583%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzZTJiZmRmZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanon</dc:creator></item><item><title><![CDATA[Next.js × Echo：Server Actionsでcookieをセットしてみた！]]></title><description><![CDATA[
 はじめに
Next.jsを使って開発する場合、APIサーバーを別で実装するケースがしばしばあると思います。
私の所属先でも、バックエンドにDjangoを使用しています。
しかし、Next.jsは本来フルスタックフレームワークであるため、APIサーバーを別途用意することは想定されていません🥲
そのため、設計上の課題に直面することが度々あります。
今回は個人的に苦戦した、Server ActionsでEchoサーバーから取得したトークンをcookieにセットする方法を紹介します！

 技術スタック
バックエンドにはGoのフレームワークであるEchoを採用しました（特に理由はないです）。
...]]></description><link>https://zenn.dev/kiman/articles/e9c9422c8bd750</link><guid isPermaLink="true">https://zenn.dev/kiman/articles/e9c9422c8bd750</guid><pubDate>Sun, 10 Nov 2024 13:59:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k9Pq_pqq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25C3%2597%2520Echo%25EF%25BC%259AServer%2520Actions%25E3%2581%25A7cookie%25E3%2582%2592%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2593%25E3%2582%2586%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MmYyZmE3MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きんゆまん</dc:creator></item><item><title><![CDATA[（改訂版）三項演算子は本当に読みにくいのか。TypeScript で分かった 後置 else if メソッド の効果]]></title><description><![CDATA[
本記事はこちらの改訂版です。コードも改良しています。

 三項演算子は本当に読みにくいのか
コードをドキュメントのように読みやすくすることは非常に多くのメリットがあります。 そして、プログラミング言語自体にも読みやすくするためだけに存在する構文があります。 その１つが三項演算子です。
const  value = x === 1 ? "A" : "B";
いやいや、三項演算子は読みにくいだろう、と思われた方は多いと思います。 しかし、読みやすいケースがあることも私は経験しています。 あなたも経験しているかもしれません。 なぜ、読みやすさに差が出るのか。調べていった結果、ポイントが分かり...]]></description><link>https://zenn.dev/takakiriy/articles/edba260bda5aa3</link><guid isPermaLink="true">https://zenn.dev/takakiriy/articles/edba260bda5aa3</guid><pubDate>Sun, 10 Nov 2024 12:58:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--J_oX2vpb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25EF%25BC%2588%25E6%2594%25B9%25E8%25A8%2582%25E7%2589%2588%25EF%25BC%2589%25E4%25B8%2589%25E9%25A0%2585%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AF%25E6%259C%25AC%25E5%25BD%2593%25E3%2581%25AB%25E8%25AA%25AD%25E3%2581%25BF%25E3%2581%25AB%25E3%2581%258F%25E3%2581%2584%25E3%2581%25AE%25E3%2581%258B%25E3%2580%2582TypeScript%2520%25E3%2581%25A7%25E5%2588%2586%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2520%25E5%25BE%258C%25E7%25BD%25AE%2520else%2520if%2520%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%2520%25E3%2581%25AE%25E5%258A%25B9%25E6%259E%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Takakiri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2gwNE5Wa291bkxmWnVxTW81QkRDNlBzX09zUmlpajkwUjhKS0RHPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Takakiri</dc:creator></item><item><title><![CDATA[[Next.js]PPRについて]]></title><description><![CDATA[
 PPRとは
PPR（Partial Pre Rendering）とは、静的コンポーネントと動的コンポーネントを同一のルート内で組み合わせることを可能にする機能です。従来のレンダリングモデルのメリットを組み合わせており、既存のモデルを簡素化しつつも高いパフォーマンスを実現します。
簡単に言うと、画面の一部分だけ動的にして、それ以外の箇所は静的にすることができる機能になります。
https://nextjs.org/docs/app/building-your-application/rendering/partial-prerendering

 これまでのレンダリングモデルについて
...]]></description><link>https://zenn.dev/ryohei0509/articles/575589bb546e25</link><guid isPermaLink="true">https://zenn.dev/ryohei0509/articles/575589bb546e25</guid><pubDate>Sun, 10 Nov 2024 10:40:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SQwfebBa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BNext.js%255DPPR%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hukuryo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0M2JhYWM4YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hukuryo</dc:creator></item><item><title><![CDATA[React コンポーネントの props の型を呼び出し側で指定する]]></title><description><![CDATA[
 🌼 はじめに
たまにコンポーネントの Props の型を呼び出し側で指定したいときがあります。
例えば、以下のようにカスタムで作った Dropdown のコンポーネントがあるとしましょう。（スタイリングは省略してます）
type DropdownProps = {
  options: { label: string; value: string }[];
  onSelect?: (value: string) =&gt; void;
};

export const Dropdown = ({ options, onSelect }: DropdownProps) =&gt; {...]]></description><link>https://zenn.dev/luvmini511/articles/75a92ad84724b0</link><guid isPermaLink="true">https://zenn.dev/luvmini511/articles/75a92ad84724b0</guid><pubDate>Sun, 10 Nov 2024 05:24:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W3iDusax--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%2520props%2520%25E3%2581%25AE%25E5%259E%258B%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E5%2581%25B4%25E3%2581%25A7%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2582%2593%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA3YTQwNzFlZWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みんちゃん</dc:creator></item><item><title><![CDATA[TypeScriptにおける日付フォーマットの個人的ベストプラクティス]]></title><description><![CDATA[
 はじめに
日付フォーマットって、こんな悩みありませんか？


MM と mm のどちらが月でどちらが分だっけ...
フォーマットのためだけにライブラリを導入すべきか悩む

私はTypeScriptの場合、ライブラリを使わず、日付フォーマット用の独自メソッドを作っています。
JSDocを活用することで、↓のようにVSCodeのインテリセンスでフォーマットの一覧と使い方を表示できます

こうすることで、フォーマット指定のミスを防ぎつつ、チーム内での表示形式も統一できます。

 実装
さきほどのgifを実現している実装は次のようになります。

dateUtil.ts
type Suppor...]]></description><link>https://zenn.dev/voiceapplab/articles/10dfe2c892614f</link><guid isPermaLink="true">https://zenn.dev/voiceapplab/articles/10dfe2c892614f</guid><pubDate>Sun, 10 Nov 2024 04:22:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4U6x_iGs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E6%2597%25A5%25E4%25BB%2598%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%2583%25E3%2583%2588%25E3%2581%25AE%25E5%2580%258B%25E4%25BA%25BA%25E7%259A%2584%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:arahabica%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2N2NiOWU4MDYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%259C%25E3%2582%25A4%25E3%2582%25B9%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25A9%25E3%2583%259C%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d1U0llREJ2ODZKdUphVEpwMlFQMlNSU0I4dm53b0E3U0hTQ2h1UXc9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>arahabica</dc:creator></item><item><title><![CDATA[靴をなくしたので、アプリを作ることにした vol3 それって、作る必要ある？]]></title><description><![CDATA[
 前回の記事
前回の記事はこちら。
https://zenn.dev/tattu/articles/lost-and-found-2

 それ、LINEでできるじゃん
嫁が、旅行から帰ってきて、アプリを作ることを伝えた。「それ良いけど、LINEのリマインくんでできるよ」と言われた。
...
...
...
まじか。
確かに、旅行中に物をなくさないことに特化したアプリはないかインターネッツで探してみたが、もっと汎用的なアプリでできることは考えていなかった。嫁氏、さすがである。早速使ってみたが、僕が求めていることはできなかったし、UX も僕が求めているものとは程遠い。一安心(？)である。
...]]></description><link>https://zenn.dev/tattu/articles/lost-and-found-3</link><guid isPermaLink="true">https://zenn.dev/tattu/articles/lost-and-found-3</guid><pubDate>Sun, 10 Nov 2024 02:11:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--syeqj4ti--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%25B4%25E3%2582%2592%25E3%2581%25AA%25E3%2581%258F%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2580%2581%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%2520vol3%2520%25E3%2581%259D%25E3%2582%258C%25E3%2581%25A3%25E3%2581%25A6%25E3%2580%2581%25E4%25BD%259C%25E3%2582%258B%25E5%25BF%2585%25E8%25A6%2581%25E3%2581%2582%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:katayama8000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmZmRhNTA5ZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>katayama8000</dc:creator></item></channel></rss>