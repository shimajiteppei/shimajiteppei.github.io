<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-04-19T14:47:02+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2015053</id>
    <published>2025-04-19T14:47:02+09:00</published>
    <updated>2025-04-19T14:47:02+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tommyecguitar/items/089139409b0dbd420b11"/>
    <url>https://qiita.com/tommyecguitar/items/089139409b0dbd420b11</url>
    <title>Rustの所有権に関するメモ</title>
    <content type="html">Rustの所有権
Rustはc++などとは異なり、あるオブジェクトの所有者はただ一つのみ許される。
例えばこう言うことができない。
int* x = new int[5];
// xに代入などの処理
…</content>
    <author>
      <name>tommyecguitar</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2014925</id>
    <published>2025-04-19T03:54:53+09:00</published>
    <updated>2025-04-19T03:54:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Leapcell/items/329bedbf2478f8a14820"/>
    <url>https://qiita.com/Leapcell/items/329bedbf2478f8a14820</url>
    <title>Rust並行処理：非同期ランタイムの適切な使い方</title>
    <content type="html">
Rust の非同期ランタイムはさまざまな場面で非常に有用であり、特に高い並行性と高性能が求められる I/O 集約型のアプリケーションにおいて顕著です。以下は、Rust の非同期ランタイムがよく使用…</content>
    <author>
      <name>Leapcell</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2014780</id>
    <published>2025-04-18T18:05:06+09:00</published>
    <updated>2025-04-19T10:27:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yukuranuku/items/2588237d347d435a31b8"/>
    <url>https://qiita.com/yukuranuku/items/2588237d347d435a31b8</url>
    <title>『綺麗な』プログラミングのために。　ー意味から紐解くRust入門ー</title>
    <content type="html">はじめに : 意味から紐解くRust
Rustは難しい言語だと言われます。同時に美しい言語だと言われます（僕調べ）。
Rustは2016年から2022年にかけてStack Overflowが行った調…</content>
    <author>
      <name>yukuranuku</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2014650</id>
    <published>2025-04-18T12:00:27+09:00</published>
    <updated>2025-04-18T12:00:27+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Yeauty/items/aaf8cd08472634fd5d81"/>
    <url>https://qiita.com/Yeauty/items/aaf8cd08472634fd5d81</url>
    <title>RustでFFmpegフィルターを簡単に実装：音声・動画処理をシンプルにする新手法</title>
    <content type="html">はじめに
FFmpegは、動画や音声のエンコード、デコード、トランスコード、フィルター処理に広く使われる強力なツールです。しかし、RustプロジェクトでFFmpegのC APIを直接使うと、メモリ管…</content>
    <author>
      <name>Yeauty</name>
    </author>
  </entry>
</feed>
