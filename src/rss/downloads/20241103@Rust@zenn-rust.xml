<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 03 Nov 2024 11:10:36 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[KotlinとGoをメインで使うエンジニアから見たRust]]></title><description><![CDATA[業務ではKotlin、個人開発ではGoを中心に開発をしているエンジニアがRustに入門して感じた違いをまとめてみようと思います。
Rustに関してはまだまだ学習中なので見当違いな内容があればご指摘ください。

 各言語の違い

 表現力
Rustの言語としての表現力について一言で述べると、「丁度いい」だと思います。
KotlinとGoと比較してみます。

 Kotlin
Kotlinは非常に表現力が高いです。
例えばCollections(List・Map・Set・etc...)には欲しいと思ったメソッドは大体用意されています。例えば、filter、map、reduceといった高階関数や...]]></description><link>https://zenn.dev/k1e1n04/articles/56bb19328addbd</link><guid isPermaLink="true">https://zenn.dev/k1e1n04/articles/56bb19328addbd</guid><pubDate>Sun, 03 Nov 2024 06:36:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rko5UaRZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Kotlin%25E3%2581%25A8Go%25E3%2582%2592%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2581%259FRust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ken%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkR6S0JTWW9ISDJ0Y2c5Z2wzSDlLYXJZcjlHTTlBRHFjcEhPRWM3bDQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ken</dc:creator></item><item><title><![CDATA[【Go&Rust】インターフェース(トレイト)を使用する上での違いとして考えていること]]></title><description><![CDATA[こんにちは。
私は最近業務ではGoを書いていて、プライベートではRustを書くことが多いです。
今回は、これらの言語における様々な違いの中でも、インターフェース(Rustではトレイト)に焦点を当て、個人的に印象深い点をまとめます。

 前提(それぞれの実装例)
まずは、動物を例に用いて、両者を使った簡単な実装例を以下に示します。

 Go
type Animal interface {
    Speak() string
}

type Dog struct {}
func (d *Dog) Speak() string {
    return "Woof!"
}

type Swa...]]></description><link>https://zenn.dev/penysho/articles/eeed7116c666e0</link><guid isPermaLink="true">https://zenn.dev/penysho/articles/eeed7116c666e0</guid><pubDate>Sun, 03 Nov 2024 03:29:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZnNCoWG4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Go%2526Rust%25E3%2580%2591%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2595%25E3%2582%25A7%25E3%2583%25BC%25E3%2582%25B9%2528%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%2529%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E4%25B8%258A%25E3%2581%25A7%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2598%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZWRiMmQ4NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こじろう</dc:creator></item><item><title><![CDATA[Rustを使ってサーバーを構築する！]]></title><description><![CDATA[nodejsでもやったから次はRustどと思いました
環境:
OS: MacOS
editor: vscode
!
同じWiFiにつながってないと他のパソコンや端末からアクセスできません！


 デレクトリ
.
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── static
    └── index.html

3 directories, 4 files

 コード
cargo new server
cargo.toml
cargo.toml
[package]
name = "Server"
version = "0...]]></description><link>https://zenn.dev/nyanchu_program/articles/dd64ab605367ca</link><guid isPermaLink="true">https://zenn.dev/nyanchu_program/articles/dd64ab605367ca</guid><pubDate>Sun, 03 Nov 2024 01:43:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XEf8yJv9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyanchu%2520-%2520okabe%2Cx_90%2Cy_121/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyanchu - okabe</dc:creator></item><item><title><![CDATA[Rustにおけるメソッドの第一引数にて&selfとselfどちらを使用すべきか]]></title><description><![CDATA[こんにちは。
今回はRustを勉強中の開発者が一度は考えるであろう、メソッドの第一引数にて&amp;selfとselfどちらを使用すべきか、についてまとめておきます。

 結論

基本的には&amp;selfを使って実装する。
インスタンスの所有権を奪って、新しい何かに変換して返却するような場合にはselfを活用する。

https://doc.rust-jp.rs/book-ja/ch05-03-method-syntax.html#メソッドを定義する

 そもそもRustにおけるメソッドとは

メソッドは、構造体(enumやトレイトも)のインスタンスに紐づけて定義される関数と言える。...]]></description><link>https://zenn.dev/penysho/articles/2edf59b0c1969d</link><guid isPermaLink="true">https://zenn.dev/penysho/articles/2edf59b0c1969d</guid><pubDate>Sat, 02 Nov 2024 09:41:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UY72RLnl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25AE%25E7%25AC%25AC%25E4%25B8%2580%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AB%25E3%2581%25A6%2526self%25E3%2581%25A8self%25E3%2581%25A9%25E3%2581%25A1%25E3%2582%2589%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2581%25B9%25E3%2581%258D%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2598%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZWRiMmQ4NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こじろう</dc:creator></item><item><title><![CDATA[Rust で仮想言語のインタプリタを作る]]></title><description><![CDATA[
 概要
Rust を使って自分で定義した仮想言語のインタプリタを作っているので,
途中経過として, 四則演算, 関数の定義と呼び出しを処理の方法をまとめます.
C++ は普段から触っているけど, Rust を始めて触るので簡単そうな?インタプリタを作って見ました.
作ったコードはこちら
https://github.com/nagato0614/NagatoInterpreter

 仮想言語の概要
対応しているのは

四則演算とmod

+, -, *, /, %


比較演算

==, !=, &lt;, &lt;=, &gt;, &gt;=


変数への代入

=


関数

f...]]></description><link>https://zenn.dev/kaito_73519/articles/3dce56712cc430</link><guid isPermaLink="true">https://zenn.dev/kaito_73519/articles/3dce56712cc430</guid><pubDate>Fri, 01 Nov 2024 02:46:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bBeBXW0J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E4%25BB%25AE%25E6%2583%25B3%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kaito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2YzU4NDk4MjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kaito</dc:creator></item><item><title><![CDATA[uvのデバッグ環境をVS Codeで構築する]]></title><description><![CDATA[
 TL;DR
Rustで書かれたPythonパッケージマネージャーuvのデバッグ環境をVisual Studio Codeで構築する方法を紹介します。

 動機
uvの挙動を詳しく調査したいケースがあります。特に、ブレークポイントを打って動作を確認したい場合があります。

 すること

uvのリポジトリをフォークします。
VS Codeに必要な拡張機能をインストールします。
デバッグ設定ファイル（launch.json）を作成します。
デバッグを実行します。


 やり方

 1. リポジトリのフォーク
GitHubでuvのリポジトリをフォークし、ローカルにクローンします。

 2. ...]]></description><link>https://zenn.dev/hiroga/articles/vscode-debugging-for-uv-rust</link><guid isPermaLink="true">https://zenn.dev/hiroga/articles/vscode-debugging-for-uv-rust</guid><pubDate>Fri, 01 Nov 2024 00:28:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4JISM9Uk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:uv%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592VS%2520Code%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hiroga%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pfZHF2VHk5OFdpTG1EZ1Q1Ry1jLVNmWjRwaEdCcGdncGVKSjhqUzhzPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hiroga</dc:creator></item><item><title><![CDATA[早くて安全、以外のRustの好きなところ]]></title><description><![CDATA[こんにちは。Rustを愛し、Rustに愛された男です。
BoostDraftでは、一部のシステムでRustで使用しています。そこそこQPSのあるAPIサーバーや、そこそこ量のあるデータの解析などです。
Wikipediaでは、Rustの説明として以下のような一文から始まっています。

Rust（ラスト）は、性能、メモリ安全性、安全な並行性を目指して設計された

引用元：Rust (プログラミング言語)
また公式サイトでは、Rustを使う理由として「パフォーマンス」「信頼性」「生産性」が挙げられています。
早くて安全！にフォーカスされがちなRustですが、僕がRustを使う一番の理由は「生...]]></description><link>https://zenn.dev/boostdraft/articles/31408406d1d867</link><guid isPermaLink="true">https://zenn.dev/boostdraft/articles/31408406d1d867</guid><pubDate>Thu, 31 Oct 2024 07:44:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Rw7Mg8lV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2597%25A9%25E3%2581%258F%25E3%2581%25A6%25E5%25AE%2589%25E5%2585%25A8%25E3%2580%2581%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%25AERust%25E3%2581%25AE%25E5%25A5%25BD%25E3%2581%258D%25E3%2581%25AA%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yuta%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyMzNmMWZhZGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BoostDraft%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuta</dc:creator></item><item><title><![CDATA[Rust で学ぶクォータニオン]]></title><description><![CDATA[数の世界は、自然数に始まって実数、複素数と広がっていきます。この先に、さらにクォータニオンという数があります。本記事では、このクォータニオンについて基本的な事柄を解説し、Rustによる計算のしかたを述べます。
なお、クォータニオンは日本語で「四元数」と呼びます。数学の世界では日本語で呼ぶことがほとんどです。ただ、コンピューターの世界では「クォータニオン」と呼ぶことが多いです。本記事もその慣習にあわせています。

 クォータニオンとは
クォータニオンとは、次の形で定義される数です。ここで、w、x、y、z は実数です。

\mathtt{i}、\mathtt{j}、\mathtt{k} は虚...]]></description><link>https://zenn.dev/yumemi_inc/articles/quaternion-with-rust</link><guid isPermaLink="true">https://zenn.dev/yumemi_inc/articles/quaternion-with-rust</guid><pubDate>Tue, 29 Oct 2024 23:42:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4f57RKvs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2582%25AF%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:USAMI%2520Kosuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MzAxMTgwMzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%2586%25E3%2582%2581%25E3%2581%25BF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzNjkyMWMyN2YuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>USAMI Kosuke</dc:creator></item><item><title><![CDATA[AnchorでSolanaのProgramを作ってみた]]></title><description><![CDATA[AnchorでSolanaのProgramを作ってみました。
https://github.com/hirokisan/solprofile
所有するアカウントのプロフィールを管理するProgramです。
所有するアカウントに紐づくプロフィールをPDA(Program Derived Address)として作成し、
プロフィール情報としてnameを保持します。
ローカル環境で動かす際の手順はREADMEに記載の通りです。
Programの利用者側の実装例はexamples/solprofileに用意しています。
テストはtestsに用意してGitHub Actionsで実行される形にして...]]></description><link>https://zenn.dev/hirokisan/articles/a52acfa93f7e82</link><guid isPermaLink="true">https://zenn.dev/hirokisan/articles/a52acfa93f7e82</guid><pubDate>Tue, 29 Oct 2024 08:06:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yHxvlxYj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Anchor%25E3%2581%25A7Solana%25E3%2581%25AEProgram%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hirokisan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NjYjAzYWNkYzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hirokisan</dc:creator></item><item><title><![CDATA[October 2024 Rust Melbourne Meetupで発表しました]]></title><description><![CDATA[
英語で発表した

kawarimidoll, 2024-10-28

2024/10/24に開催されたOctober 2024 Rust Melbourne Meetupで「My first practice of Rust」というタイトルでスライド発表をしました。
https://www.meetup.com/rust-melbourne/events/304034898/
こちらにスライドを公開しています↓
https://docs.google.com/presentation/d/197KjWTTnq8Qqlfy3DBUPw2Xr4maRhrc0I2rJ8qvrvzs/edit...]]></description><link>https://zenn.dev/kawarimidoll/articles/da74ebc5328112</link><guid isPermaLink="true">https://zenn.dev/kawarimidoll/articles/da74ebc5328112</guid><pubDate>Mon, 28 Oct 2024 10:12:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SgejJuKN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:October%25202024%2520Rust%2520Melbourne%2520Meetup%25E3%2581%25A7%25E7%2599%25BA%25E8%25A1%25A8%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kawarimidoll%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzNzlhYzhkODYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kawarimidoll</dc:creator></item><item><title><![CDATA[[Wasmtime]Rustのwasm32-wasip2でHTTPリクエストクライアントとWebサーバーを動かす(waki)]]></title><description><![CDATA[
 はじめに
https://zenn.dev/tkithrta/scraps/79805811a77a07
Rust Version 1.82.0 (2024-10-17)にPromote wasm32-wasip2 to Tier 2.がきたのでaxumをWASMで動かすために最近様々な情報を集めています。
Tokioのさらに低レイヤーにあるmio(Metal I/O)がwasm32-wasip2に対応していないのでほとんどのWebアプリケーションフレームワークは動きませんが、WASI専用のHTTPリクエストクライアント&amp;Webサーバーライブラリのwakiがwasm32-wa...]]></description><link>https://zenn.dev/tkithrta/articles/70f0489ddcfe30</link><guid isPermaLink="true">https://zenn.dev/tkithrta/articles/70f0489ddcfe30</guid><pubDate>Sun, 27 Oct 2024 10:28:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RJoyx7oh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BWasmtime%255DRust%25E3%2581%25AEwasm32-wasip2%25E3%2581%25A7HTTP%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A8Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2528...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%25BB%2592%25E3%2583%25B0%25E6%25A8%25B9%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NDRlMTA4ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>黒ヰ樹</dc:creator></item><item><title><![CDATA[RustLadies第2回目を開催しました！]]></title><description><![CDATA[
 3行にまとめると

The Bookの2章までやりました！（数当てゲームの完成🙌）
雑談をしながら、気になることは引き続きその場で調べながら進めました！
次回はRustのもっと詳しい概念をみんなで進めます！


 実際やったこと
今回はThe Bookの2章まで進めるのを目標に行いました。
https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html
Rustを書いたことがある皆様なら一度はやったであろう「数当てゲーム」がある章です。
The Bookのコードを写経をしつつ、
🤔「use std::io::std...]]></description><link>https://zenn.dev/2323_code/articles/76670293c77551</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/76670293c77551</guid><pubDate>Sun, 27 Oct 2024 08:16:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P3gIUrRP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RustLadies%25E7%25AC%25AC2%25E5%259B%259E%25E7%259B%25AE%25E3%2582%2592%25E9%2596%258B%25E5%2582%25AC%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyZGQ3OTI1ODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item><item><title><![CDATA[[Rust] 自作言語での TUI デバッガのススメ]]></title><description><![CDATA[Rust で作るプログラミング言語シリーズです。
https://www.amazon.co.jp/dp/4297141922

 バイトコードコンパイラの難しさ
書籍での心残りの一つが、第６章のバイトコードの難易度です。本書ではプログラミング言語を作るにあたってステップ・バイ・ステップで難易度を上げていくように構成を考えていますが、第６章のバイトコードの実装の時点で難易度が急激に上昇します。例えば、次のようなジャンプアドレスの計算を行う必要があるのですが、これはかなり込み入ったロジック計算が必要になります。
条件分岐では、下図のようにジャンプしますが、このアドレス計算が厄介です。

ル...]]></description><link>https://zenn.dev/msakuta/articles/723ee6ae3b7eca</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/723ee6ae3b7eca</guid><pubDate>Sun, 27 Oct 2024 01:00:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PAaNTtma--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25A7%25E3%2581%25AE%2520TUI%2520%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AC%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Rust で LSM ツリーを実装した話]]></title><description><![CDATA[
 概要
データ指向アプリケーションデザインを読んでいて、出てきた LSM ツリーを理解するために、
簡単な LSM ツリーを実装してみました。
https://www.oreilly.co.jp/books/9784873118703/
この記事では実装した LSM ツリーの読み書き処理に着目した説明を記載します。

 LSM ツリーとは
LSM ツリー（Log-Structured Merge Tree）は主に書き込み操作のパフォーマンスを最適化するために使用されるデータ構造です。
LSM ツリーは、メモリ層とディスク層で構成されます。
書き込みを受けると以下の動作をします。

メモ...]]></description><link>https://zenn.dev/shu_kitamura/articles/2a394c58cb2cd1</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/2a394c58cb2cd1</guid><pubDate>Sat, 26 Oct 2024 01:59:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CahUWLP1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520LSM%2520%25E3%2583%2584%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[TauriとNext.jsでデスクトップアプリケーションを作成する手順]]></title><description><![CDATA[
 はじめに
Webアプリケーションをデスクトップアプリケーションとして利用できるフレームワーク「Tauri」が注目されています。Tauriは、Electronのようなアプローチでありながら、軽量でセキュアなデスクトップアプリケーションを構築できる点が魅力です。本記事では、Next.jsとTauri 2.0を使用し、デスクトップアプリケーションを起動するまでの手順を解説します。

 開発環境
本プロジェクトでは以下の開発環境を使用します。


Homebrew: パッケージ管理ツール

VSCode: コードエディタ
Mac mini (M2, 16GB RAM)


 Rustのインス...]]></description><link>https://zenn.dev/kei1232/articles/d171d6f9c3aa81</link><guid isPermaLink="true">https://zenn.dev/kei1232/articles/d171d6f9c3aa81</guid><pubDate>Fri, 25 Oct 2024 14:44:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZIf8rC_H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2581%25A8Next.js%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2591%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzMDAwMGQ0MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>けー</dc:creator></item><item><title><![CDATA[Rust導入ガイド - 効率的な学習方法から導入まで]]></title><description><![CDATA[前回[4]、同一アプリケーションをGo、Rust、C言語(+ Python)で実装し、各言語による実装効率と速度を評価しました。今回は、その経験をもとにRustの効率的な学習方法と導入についての見解をまとめてみます。

 Rustの学習方法
Rustは生産性を実感するまでに学習期間が必要な言語とされています[5]。初期学習段階での離脱者が50%以上にのぼり、その多くが1ヶ月以内に挫折しているという統計[6]もあるため、まずは、効果的な初期学習が特に重要です。

 STEP1: 学習準備期の克服
Rustコンパイラには(解決方法が明示されない)難解な解釈も多々あります[11]が、まずはRu...]]></description><link>https://zenn.dev/cybergarage/articles/0bb022d1a83f9c</link><guid isPermaLink="true">https://zenn.dev/cybergarage/articles/0bb022d1a83f9c</guid><pubDate>Fri, 25 Oct 2024 13:23:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9R-v39_W--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E5%25B0%258E%25E5%2585%25A5%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2520-%2520%25E5%258A%25B9%25E7%258E%2587%25E7%259A%2584%25E3%2581%25AA%25E5%25AD%25A6%25E7%25BF%2592%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%258B%25E3%2582%2589%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cybergarage%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNjg5MmZjYjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cybergarage</dc:creator></item><item><title><![CDATA[Tauriでwindows-rsクレートを使ってWebViewとは別にメッセージボックスを表示する]]></title><description><![CDATA[window-rsクレートは、内部でwindowsとwindows-sysの2種類のクレートを使用している。

 windowsクレートを使う場合

Cargo.toml
[dependencies.windows]
version = "0.58.0"
features = [
    "Win32_UI_WindowsAndMessaging",
]


lib.rs
use windows::core::PCSTR;
use windows::Win32::UI::WindowsAndMessaging::{MessageBoxA, MB_OK};

#[tauri::comman...]]></description><link>https://zenn.dev/hkthirano/articles/2062c665cef6a8</link><guid isPermaLink="true">https://zenn.dev/hkthirano/articles/2062c665cef6a8</guid><pubDate>Wed, 23 Oct 2024 13:15:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dWfk02do--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2581%25A7windows-rs%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6WebView%25E3%2581%25A8%25E3%2581%25AF%25E5%2588%25A5%25E3%2581%25AB%25E3%2583%25A1%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%259C%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AE%25E3%2583%25BC%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNThkMzViZTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>のーまん</dc:creator></item><item><title><![CDATA[RustでA*アルゴリズム 最短経路問題]]></title><description><![CDATA[
 TL;DR

探索は選択･展開･生成
A*アルゴリズム: 探索候補の決定基準(コスト評価関数)に


g(n): 根から現在ノードまでのコスト

h'(n): 現在ノードから目標ノードまでの見積もりコスト (∀n.h'(n) &lt; h(n))

f(n) = g(n) + h'(n)で計算する




 背景
講義でやったのでRustで実装する｡

 コード
https://github.com/raiga0310/maze-solver-with-a-star-algorithm

 ヒューリスティック探索について
前の記事で説明した通り､探索は

ノードの選択(select)...]]></description><link>https://zenn.dev/ahoxa1rx/articles/31a724fa26c3dc</link><guid isPermaLink="true">https://zenn.dev/ahoxa1rx/articles/31a724fa26c3dc</guid><pubDate>Wed, 23 Oct 2024 02:17:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aUYnFe2u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7A%252A%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B4%25E3%2583%25AA%25E3%2582%25BA%25E3%2583%25A0%2520%25E6%259C%2580%25E7%259F%25AD%25E7%25B5%258C%25E8%25B7%25AF%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ahoxa1rx%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0cVFMMThkdU9JWXh5NVRhM1JfYWZyUGtWd0U3M2o1aldsSWdhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ahoxa1rx</dc:creator></item><item><title><![CDATA[[Tauri v2]ts-rsクレートを使ってRust(Tauri)とTypeScript(フロントエンド)で型の共有を行う]]></title><description><![CDATA[
 概要
Tauri:
https://v2.tauri.app/
を使うと、アプリの本体部分をRustで記述することができ、
UI(フロントエンド)部分はWebサイトのノウハウを使って記述できる。
すなわち、後者はTypeScriptベースのフレームワークやツールを使って作成できる。
(使わないことも出来るが、ここではTSベースの何かを使うものとする)
ここで、UI側(TS)とアプリ本体側(Rust)で、IPC通信などで情報をやり取りすることがあるが、
異なる言語をまたいでいるため、スキーマ定義がやや大変なところがある。
つまり、

フロントエンド用に、TypeScriptの型定義を記...]]></description><link>https://zenn.dev/junkor/articles/98f2f0e6a9ea23</link><guid isPermaLink="true">https://zenn.dev/junkor/articles/98f2f0e6a9ea23</guid><pubDate>Tue, 22 Oct 2024 15:19:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o_hEkGi2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTauri%2520v2%255Dts-rs%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Rust%2528Tauri%2529%25E3%2581%25A8TypeScript%2528%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2529%25E3%2581%25A7%25E5%259E%258B%25E3%2581%25AE...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:7e%252B8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvai5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>7e+8</dc:creator></item><item><title><![CDATA[cargo lambda deployした関数が `GLIBC_2.28' not found でうごかない]]></title><description><![CDATA[1年ぶりにcargo lambdaでビルドした関数が動かず焦る。。。
deploy後に実行された関数で下記のようなエラーがcloudwatchに出てしまっていた
/var/task/bootstrap: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by /var/task/bootstrap)
同様の問題に遭遇している人は多々いるようで、aws-lambda-rust-runtimeのissueで該当エラーをみてみると多数あった

https://github.com/awslabs/aws-lambda-rust...]]></description><link>https://zenn.dev/mattak/articles/25c588a59468e1</link><guid isPermaLink="true">https://zenn.dev/mattak/articles/25c588a59468e1</guid><pubDate>Tue, 22 Oct 2024 14:30:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jh4Wz2__--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo%2520lambda%2520deploy%25E3%2581%2597%25E3%2581%259F%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%258C%2520%2560GLIBC_2.28%2527%2520not%2520found%2520%25E3%2581%25A7%25E3%2581%2586%25E3%2581%2594%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mattak%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l4bWROcEl5MUlfbmwxVnVQenRvV1JlYXNyOW4xSjdsYW5hd0lza2c9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mattak</dc:creator></item></channel></rss>