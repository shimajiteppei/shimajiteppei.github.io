<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 06 Feb 2025 08:34:54 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[PythonでYAMLを使ってみよう！基本からサンプルコードまで]]></title><description><![CDATA[
 はじめに
YAMLは、人間が読みやすい形式でデータを記述するためのマークアップ言語です。構造化されたデータの表現に適しており、設定ファイルやデータのシリアル化に広く使用されています。本記事では、YAMLの基本的な概念から、Pythonを使ったサンプルコードまで紹介します。

 YAMLの基本構文
YAMLには、データを表現するためのいくつかのスタイルがあります。代表的なものとして「ブロックスタイル」と「フロースタイル」があります。

 ブロックスタイル
ブロックスタイルは、インデントを使用して階層構造を表現する方法です。最も一般的なYAMLの記述形式です。
# config.yaml...]]></description><link>https://zenn.dev/mstng/articles/f8b3bc074554a1</link><guid isPermaLink="true">https://zenn.dev/mstng/articles/f8b3bc074554a1</guid><pubDate>Thu, 06 Feb 2025 08:18:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zhE3e_Tq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7YAML%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%258B%25E3%2582%2589%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mstng%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlVrUWI4S2o0cnl1WHhNZ1FBeXJleTFmOW5JTW1iRmN6UVRzaC1YYk1udWQtNEotYkF2Zz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mstng</dc:creator></item><item><title><![CDATA[Pythonプロジェクトの環境構築を自動化する：venv環境の自動構築シェル関数の紹介]]></title><description><![CDATA[
 はじめに
Pythonプロジェクトを開始する際、最初のステップとして仮想環境（venv）の構築が必要となります。
python -m venv .venvを手動で実行する作業を自動化するため、.pyファイル作成時に自動的にvenv環境を構築するシェル関数を紹介します。

 主な機能
本シェル関数は以下の機能を提供します：

.pyファイル作成時のvenv環境の自動検出
未構築の場合の仮想環境の自動作成
pipパッケージの最新化
.gitignoreファイルの自動生成/更新
requirements.txtの初期作成


 実装コード
以下のコードを.bashrcまたは.zshrcに追...]]></description><link>https://zenn.dev/yukiyuriweb/articles/0d196adceeda4a</link><guid isPermaLink="true">https://zenn.dev/yukiyuriweb/articles/0d196adceeda4a</guid><pubDate>Thu, 06 Feb 2025 03:58:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--imdP87Aj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25EF%25BC%259Avenv%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E6%25A7%258B%25E7%25AF%2589%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YUKi%2540YUKiYURi%2520WEB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ktTTgyWW9ZMHZWb3BoYXZCSFZLUEhjUTF0SlBHc0N5WHhHQlVEPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YUKi@YUKiYURi WEB</dc:creator></item><item><title><![CDATA[pip installで自動的にrequirements.txtを更新するシェルスクリプト]]></title><description><![CDATA[
 はじめに
Pythonプロジェクトで開発をしていると、パッケージの依存関係をrequirements.txtで管理することが一般的です。しかし、pip installするたびに手動でrequirements.txtを更新するのは面倒です。今回は、パッケージのインストール時に自動的にrequirements.txtを更新するシェルスクリプトを紹介します。

 スクリプトの機能


pip install実行時に自動的にrequirements.txtを更新
変更内容の差分表示
エラー時のロールバック機能
カラー付きの進捗表示
仮想環境内でのみ動作


 コード
function pip...]]></description><link>https://zenn.dev/yukiyuriweb/articles/227dfb7eb66569</link><guid isPermaLink="true">https://zenn.dev/yukiyuriweb/articles/227dfb7eb66569</guid><pubDate>Thu, 06 Feb 2025 03:48:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Hw-9nRGJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:pip%2520install%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2581%25ABrequirements.txt%25E3%2582%2592%25E6%259B%25B4%25E6%2596%25B0%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YUKi%2540YUKiYURi%2520WEB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ktTTgyWW9ZMHZWb3BoYXZCSFZLUEhjUTF0SlBHc0N5WHhHQlVEPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YUKi@YUKiYURi WEB</dc:creator></item><item><title><![CDATA[Pythonの仮想環境を自動で切り替えるシェルスクリプト]]></title><description><![CDATA[
 はじめに
Pythonで開発をしていると、プロジェクトごとに異なる仮想環境（venv）を使用することが一般的です。しかし、ディレクトリを移動するたびに手動で仮想環境を切り替えるのは面倒です。今回は、ディレクトリの移動時に自動的に仮想環境を切り替えるシェルスクリプトを紹介します。

 スクリプトの機能

ディレクトリ移動時に自動的に仮想環境を検出
既存の仮想環境を非アクティブ化して新しい環境に切り替え
カラー付きの分かりやすいステータス表示
Bash/Zsh両対応


 コード
function auto_activate_venv() {
    # カラーコードの定義
    lo...]]></description><link>https://zenn.dev/yukiyuriweb/articles/1fdbefd0680dfc</link><guid isPermaLink="true">https://zenn.dev/yukiyuriweb/articles/1fdbefd0680dfc</guid><pubDate>Thu, 06 Feb 2025 03:44:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qf2mFthE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25AE%25E4%25BB%25AE%25E6%2583%25B3%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YUKi%2540YUKiYURi%2520WEB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ktTTgyWW9ZMHZWb3BoYXZCSFZLUEhjUTF0SlBHc0N5WHhHQlVEPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YUKi@YUKiYURi WEB</dc:creator></item><item><title><![CDATA[App ServiceでFlaskアプリのパフォーマンス改善(スタートアップコマンドにworker・thread指定で高速化)]]></title><description><![CDATA[
 はじめに
現場でAzureのAppServiceにデプロイしているflask(python)アプリが重いという事象がありました。最終的に解決したのは自分ではないのですが、他の人でも陥りそうな事象だと思ったので、どうやって解決したかを備忘録的に残しておこうと思います。AppServiceを使っていたり、それ以外のサービス上にflaskをデプロイしている人にも、自分のアプリが重いなと思った人の参考になれば幸いです。

 結論
flaskのデフォルトでは複数リクエストを同時に処理することができないので、AppServiceのスタートアップコマンドを以下のように修正することで複数リクエストを...]]></description><link>https://zenn.dev/peishim/articles/b77e57ce160160</link><guid isPermaLink="true">https://zenn.dev/peishim/articles/b77e57ce160160</guid><pubDate>Wed, 05 Feb 2025 23:03:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--T4VGj7cr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:App%2520Service%25E3%2581%25A7Flask%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E6%2594%25B9%25E5%2596%2584%2528%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25ABworker%25E3%2583%25BBthread%25E6%258C%2587...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:peishim%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlNmIxNjYxMDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>peishim</dc:creator></item><item><title><![CDATA[Lambda で Python 3.6 のコンテナイメージを使用してみた]]></title><description><![CDATA[Lambda のマネージドランタイムとしての Python 3.6 は 2022 年 7 月 18 日に廃止されているため、現状では新規関数作成時に Python 3.6 のランタイムを指定することはできません。
Lambda ランタイム - AWS Lambda
しかし、検証用にどうしても Lambda で Python 3.6 を使用する必要がある場合にはコンテナイメージを利用する方法もあるかと思うのでやってみました。

 前提

開発環境は Cloud9
AWS CLI バージョン 2 をインストール済み
Docker をインストール済み
Python をインストール済み


 手...]]></description><link>https://zenn.dev/mn87/articles/46ac9e407a30d8</link><guid isPermaLink="true">https://zenn.dev/mn87/articles/46ac9e407a30d8</guid><pubDate>Wed, 05 Feb 2025 22:27:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0JBDnC8Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Lambda%2520%25E3%2581%25A7%2520Python%25203.6%2520%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mn87%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNmUxNzcyOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mn87</dc:creator></item><item><title><![CDATA[【Python・Pysparkで学ぶ！】データ分析の基礎【データ結合③複雑なjoin(["key1","key2"],"inner")】]]></title><description><![CDATA[
 【Python・Pysparkで学ぶ！】データ分析の基礎【データ結合③複雑な.join(["key1","key2"],"inner")】
↓トランザクションテーブル(transaction_table)のサンプル



tran_id
pay_method
tran_dt
user_id
brand_id
shop_id
pay_amount_raw
pay_amount_without_tax
y
m
d




101
code
2025/01/03 06:48
user000007
brand0002
shop0004
1540
1400
2025
01
03


102
c...]]></description><link>https://zenn.dev/taiking/articles/502932957baf68</link><guid isPermaLink="true">https://zenn.dev/taiking/articles/502932957baf68</guid><pubDate>Wed, 05 Feb 2025 14:22:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VxpdYfQE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2583%25BBPyspark%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25EF%25BC%2581%25E3%2580%2591%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%2588%2586%25E6%259E%2590%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2580%2590%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E7%25B5%2590%25E5%2590%2588%25E2%2591%25A2%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AAjoin%2528%255B%2522key1%2522%252C%2522key2%2522...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2584%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzNTFhOTQ1NDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たいき</dc:creator></item><item><title><![CDATA[Datacampを利用してPythonの学習始めました]]></title><description><![CDATA[こんにちは、Python初心者のHayashiです。
今回はPython学習用に始めた海外のオンライン学習プラットフォーム「Datacamp」において、Pythonコースの受講完了した記録を残していきます。(Pythonに関するコースは50以上ありそうなので、徐々に受講完了させていきます）

 2025年1月11日_Introduction to Python受講終了
https://x.com/hayashi_marke/status/1886914356316876869
Pythonの変数、配列、dictionaryなどの基礎について学べるコースでした。
配列についてはこの後のIn...]]></description><link>https://zenn.dev/masashihayashi/articles/b9ec6b53e3ff75</link><guid isPermaLink="true">https://zenn.dev/masashihayashi/articles/b9ec6b53e3ff75</guid><pubDate>Wed, 05 Feb 2025 13:49:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LrHABrPL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Datacamp%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6Python%25E3%2581%25AE%25E5%25AD%25A6%25E7%25BF%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hayashi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzODZiNDdkZDkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hayashi</dc:creator></item><item><title><![CDATA[Bluesky への投稿を Pixela の草に変換するツール]]></title><description><![CDATA[毎日の Bluesky への投稿を Pixela の草に変換するツールを作りました。ソースコードは GitHub に置いてあります。僕の場合はこういう感じになります。

自分はヒマなときだけ Bluesky へ投稿している自覚があります。それを可視化する目的で作りました。

 実装
次のように、Bluesky API を叩き、日毎の投稿数を集計した上で Pixela へ POST する作りになっています。
詳しい実装はソースコードに譲りますが、Bluesky も Pixela も API 仕様が素直で作りやすいと思いました。

 おまけ
リポジトリには定期的にスクリプトを実行する Git...]]></description><link>https://zenn.dev/mahata/articles/bsky-pixela-tracker</link><guid isPermaLink="true">https://zenn.dev/mahata/articles/bsky-pixela-tracker</guid><pubDate>Wed, 05 Feb 2025 13:46:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QMQMIcL8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Bluesky%2520%25E3%2581%25B8%25E3%2581%25AE%25E6%258A%2595%25E7%25A8%25BF%25E3%2582%2592%2520Pixela%2520%25E3%2581%25AE%25E8%258D%2589%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasunori%2520MAHATA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pNUGNmdW9MOU95NkxjbTlwSjk0d1Joc1dLS2ZxdVBodUllbFdxNmc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasunori MAHATA</dc:creator></item><item><title><![CDATA[ChatGPTとDeepSeekの比較]]></title><description><![CDATA[
 本日流行りのDeepSeek R1とChatGPT（無料版）をPygameで比較してみた。
プロンプト：
pygameを使用して、spritesを使って、バックグランド層、ブロック層、エネミー層、町人、Playerを配置し、階層別の描画するプログラムを作成して。
※ChatGPTは勝手に画像を使用したため、画像ではなく、四角で描画しての追加プロンプトで生成しています。

 ChatGPT生成結果

import pygame
import sys

# 初期設定
pygame.init()
screen = pygame.display.set_mode((800, 600))
cl...]]></description><link>https://zenn.dev/akeyi2025/articles/db6eb5706654e5</link><guid isPermaLink="true">https://zenn.dev/akeyi2025/articles/db6eb5706654e5</guid><pubDate>Wed, 05 Feb 2025 12:49:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oaqku-LS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGPT%25E3%2581%25A8DeepSeek%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2Y%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUxRWU9iOGsxd1M4UHg3QU1IYXliNTdyUmpOZVViU1JoejFwTVRuQVNMdkpSYkQ3Nk9FZz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>エンジニアY</dc:creator></item><item><title><![CDATA[【Python】開発時の環境変数を.envで管理する]]></title><description><![CDATA[
 1. はじめに
.envファイルは環境変数を安全かつ効率的に管理するためによく用いられます。こうすることでAPIキーやDBへの接続文字列などの機密情報をソースコードから分離することが出来、さらに開発・テスト・本番といった異なる環境ごとの設定切り替えが容易になります。
セキュリティ向上や開発効率化のために用いられることが多い.envファイルですが、Pythonでの扱い方を知ったので備忘録的に記事にします。

 忙しい人はここだけでOK
Pythonの場合、.envファイルを扱うためにpython-dotenv[1]というライブラリが利用できます。このライブラリは、.envファイルを作成...]]></description><link>https://zenn.dev/nakakiiro/articles/python_dot_env</link><guid isPermaLink="true">https://zenn.dev/nakakiiro/articles/python_dot_env</guid><pubDate>Wed, 05 Feb 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Js5oLEMm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591%25E9%2596%258B%25E7%2599%25BA%25E6%2599%2582%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592.env%25E3%2581%25A7%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakakiiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1M1hKcDNodXJyRzV5cDNzR19jZXJtREh6YXZMeGVqN3FUSDcxTTZuQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakakiiro</dc:creator></item><item><title><![CDATA[Google Colaboratoryの使い方]]></title><description><![CDATA[
 Google Colaboratoryとは
Google Colaboratoryはクラウド上でPythonを実行できる無料のJupyterノートブック環境環境です。

 環境
Google Chrome
Google Colaboratory

 使い方

 Google Colabのアクセス
Google Colabは、Googleアカウントにログインした状態でアクセスできます。
Google Colabにアクセスし、ドライブの新しいノートブックをクリックして新しいノートブックを作成できます。


 ノートブックのインターフェース
コードセルとテキストセルがあり、コードセルにPy...]]></description><link>https://zenn.dev/patanga_ja/articles/47ae9a1f0db886</link><guid isPermaLink="true">https://zenn.dev/patanga_ja/articles/47ae9a1f0db886</guid><pubDate>Wed, 05 Feb 2025 06:40:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7fjomqDs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Google%2520Colaboratory%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2584%25E3%2583%2581%25E3%2583%2590%25E3%2583%2583%25E3%2582%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHZINnZkZUEzOGdpYm1YNS1HdGtyWTE5ejYwbExaSVcyRm1UdmhpbG5lOUdWSUhnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ツチバッタ</dc:creator></item><item><title><![CDATA[Houdini Pythonを覚えて作業効率を上げたい（備忘録1）]]></title><description><![CDATA[
 よく使うノードの組み合わせは自動化したい
HoudiniでRBD（Rigid Body Dynamics）の仕込みを行う際、パーツ数が増えると繰り返し作業が多くなり、時間を浪費しているような気がしました。そこで、Pythonを使ってNetwork Editorの作業を一部自動化することにしました。備忘録として、作成したPythonスクリプトの例をZennにまとめます。

 環境
Windows10 Pro
Houdini Indie 20.5.332 py3

 選択ノードを新しいsubnetworkに移動
import hou

# Get the selected node
se...]]></description><link>https://zenn.dev/mj31000/articles/7e4135436c16ba</link><guid isPermaLink="true">https://zenn.dev/mj31000/articles/7e4135436c16ba</guid><pubDate>Wed, 05 Feb 2025 06:26:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7UGnvYVm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Houdini%2520Python%25E3%2582%2592%25E8%25A6%259A%25E3%2581%2588%25E3%2581%25A6%25E4%25BD%259C%25E6%25A5%25AD%25E5%258A%25B9%25E7%258E%2587%25E3%2582%2592%25E4%25B8%258A%25E3%2581%2592%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B21%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hidetake%2520Miyajima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzExNjJkNGI2MjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hidetake Miyajima</dc:creator></item><item><title><![CDATA[LiNGAMで推定した因果グラフから2値データの変数への因果効果を計算する]]></title><description><![CDATA[
 はじめに
本記事では、LiNGAM（Linear Non-Gaussian Acyclic Model）を用いて推定した因果グラフから、2値データの変数への因果効果を計算する方法について解説します。
!
今回の手法は、2値データの変数が他のすべての変数の因果の結果であると仮定できる場合に適用できます。

https://github.com/cdt15/lingam

 課題🤔
LiNGAMは主に連続値を対象とした因果探索手法で、データから因果関係を推定する強力なツールです。しかし、2値データの変数に対しては因果探索が難しいという課題があります。一方、実際の要因分析の現場では、正常・...]]></description><link>https://zenn.dev/as_causal/articles/0afdc9c771f936</link><guid isPermaLink="true">https://zenn.dev/as_causal/articles/0afdc9c771f936</guid><pubDate>Wed, 05 Feb 2025 04:30:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M5tAsowU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LiNGAM%25E3%2581%25A7%25E6%258E%25A8%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259F%25E5%259B%25A0%25E6%259E%259C%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2581%258B%25E3%2582%25892%25E5%2580%25A4%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25B8%25E3%2581%25AE%25E5%259B%25A0%25E6%259E%259C%25E5%258A%25B9%25E6%259E%259C%25E3%2582%2592%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E8%25A5%25BF%25E5%25B7%259D%2520%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlNDhjNDQ5MDQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SCREEN%2520AS%2520%25E5%259B%25A0%25E6%259E%259C%25E6%258E%25A2%25E7%25B4%25A2%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkxNdTNMZWhGWDBGTjVnNm9kanZmeXJOb1ctU2d5aEUwaDd3UFlGRC15MHpJN1ZnPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>西川 康平</dc:creator></item><item><title><![CDATA[MotoでLambdaコードからLambdaモックを呼び出す（Dockerなし）]]></title><description><![CDATA[
 はじめに
この記事では、次のコードをMotoでテストする方法を記載します。

Pythonランタイム上で動作するLambda関数
Lambda関数内で、別のLambda関数をboto3経由で呼び出す


 Motoとは
Motoは、Boto3をモックするパッケージです。
Boto3はPythonのAWS SDKの名称であり、MotoはBoto3が対応する多くのAWSサービスをモックできます。

 Lambda関数の実装
まずは、テスト対象となるLambda関数を実装します。今回は以下のコードを使用します。
このLambdaコードでは、別のLambdaを呼び出した結果からdataを抽出...]]></description><link>https://zenn.dev/ncdc/articles/eaa3d113c27f28</link><guid isPermaLink="true">https://zenn.dev/ncdc/articles/eaa3d113c27f28</guid><pubDate>Wed, 05 Feb 2025 00:03:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vankx9D1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Moto%25E3%2581%25A7Lambda%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%258B%25E3%2582%2589Lambda%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%25EF%25BC%2588Docker%25E3%2581%25AA%25E3%2581%2597%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:K%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODZhNDA5ZDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:NCDC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE3OTg0NTdlYjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>K</dc:creator></item><item><title><![CDATA[【Python/Django】のデコレータを基礎から理解する]]></title><description><![CDATA[チョコバナナをデコレートしている
あのカラフルな粒々が好きです。
こんにちは、
ワニかず@40歳 出戻りエンジニアです。
ということで、今回は

Pythonのデコレータについての説明と簡単な例、
さらに、Djangoでの使用例とその意味
について解説したいと思います。

デコレータの基礎を覚えたところ、
Djangoに応用したとたん、全く理解できなかったので、
まとめてみました。

 簡単な具体例
デコレータとデコレートされる関数を明確に分けて説明します。
# ここがデコレータ
def show_message(func):            # ← デコレータ関数の定義
    ...]]></description><link>https://zenn.dev/40_comeback_eng/articles/e068c8b83794a7</link><guid isPermaLink="true">https://zenn.dev/40_comeback_eng/articles/e068c8b83794a7</guid><pubDate>Wed, 05 Feb 2025 00:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOSQpuHb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%252FDjango%25E3%2580%2591%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25B3%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%259F%25BA%25E7%25A4%258E%25E3%2581%258B%25E3%2582%2589%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AF%25E3%2583%258B%25E3%2581%258B%25E3%2581%259A%254040%25E6%25AD%25B3%2520%25E5%2587%25BA%25E6%2588%25BB%25E3%2582%258A%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg3ZGNhZmRmOGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ワニかず@40歳 出戻りエンジニア</dc:creator></item><item><title><![CDATA[Fletでテイスティングノート管理アプリ作った①]]></title><description><![CDATA[
 はじめに
JINSに入社してもう３ヶ月が経ったようです。今年もよろしくお願いいたします。
ITデジタル部のいしざき（@ishizak1111）です。
1月はアメリカ🇺🇸とフィリピン🇵🇭に出張が決まっていたので、
正月はそれまでの間ゆったり実家でエンジニアリング餅つき...もといキーボードをカタカタついていました。
実家ってなんであんなに趣味プロが捗るんでしょう。💻
今回は趣味用のアプリを開発した話をします。

 動機
私はウイスキー🥃やコーヒー☕が好きでよく飲むのですが、数日後には「どんな味だったっけ？」
と忘れてしまいがち。体調や飲み方、飲んだ回数によっても拾える味が変わってくるの...]]></description><link>https://zenn.dev/jins/articles/2aea0674d70221</link><guid isPermaLink="true">https://zenn.dev/jins/articles/2aea0674d70221</guid><pubDate>Tue, 04 Feb 2025 23:28:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4jwE__aT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Flet%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25A4%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E2%2591%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2584%25E3%2581%2597%25E3%2581%2596%25E3%2581%258D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlMjlhN2FiYWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:JINS%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmNmQ2ZGU4ZjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いしざき</dc:creator></item><item><title><![CDATA[Pythonの演算子]]></title><description><![CDATA[
 演算子とは
変数や定数の計算や制御をおこなう記号を演算子といいます。

 算術演算子

 加算 "+"
1+2
#出力
3

 減算 "-"
2-1
#出力
1

 乗算 "*"
2*3
#出力
6

 累乗 "**"
2**3
#出力
8

 除算 "/"
6/3
#出力
2.0

 除算の商 "//"
7//3
#出力
2

 除算の剰余 "%"
7%3
#出力
1


 代入演算子

 代入演算子 "="
a=2
print(a)
#出力
2

 複合代入演算子
算術演算子と代入演算子を組み合わせて簡略表記したもの

 加算
a=3
a+=2
print(a)
#出力
5


...]]></description><link>https://zenn.dev/patanga_ja/articles/42fad8d87a35ce</link><guid isPermaLink="true">https://zenn.dev/patanga_ja/articles/42fad8d87a35ce</guid><pubDate>Tue, 04 Feb 2025 15:02:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qxKezaTW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Python%25E3%2581%25AE%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2584%25E3%2583%2581%25E3%2583%2590%25E3%2583%2583%25E3%2582%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHZINnZkZUEzOGdpYm1YNS1HdGtyWTE5ejYwbExaSVcyRm1UdmhpbG5lOUdWSUhnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ツチバッタ</dc:creator></item><item><title><![CDATA[【初心者向け】Pandasのファイル操作]]></title><description><![CDATA[データ分析を行う上で、ファイルの読み込み・書き出しは避けて通れない道です。
CSVファイルやExcelファイルなど、様々な形式のデータをPandasで自由自在に操ることができれば、データ分析がグッと効率的になります。
「Pandasでファイル操作ができるようになれば、データ分析がもっと楽しくなるかも！」
そう思ったことはありませんか？
この記事では、Pandasのファイル操作に焦点を当て、初心者の方でも分かりやすいように丁寧に解説していきます。
具体的なコード例を交えながら、基本的な操作を紹介します。

 ファイル操作

 CSVファイルの読み込み
import pandas as pd...]]></description><link>https://zenn.dev/yogurt/articles/29e05fd3444a93</link><guid isPermaLink="true">https://zenn.dev/yogurt/articles/29e05fd3444a93</guid><pubDate>Tue, 04 Feb 2025 12:38:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zlBBi7Mo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591Pandas%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E6%2593%258D%25E4%25BD%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A8%25E3%2583%25BC%25E3%2582%25B0%25E3%2583%25AB%25E3%2583%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViZmFiYWU4NDUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヨーグルト</dc:creator></item><item><title><![CDATA[e-StatのデータをAPIを使ってPython上で分析する]]></title><description><![CDATA[
 はじめに
e-Statには政府の膨大な統計データが提供されていますが、データが神excelで展開されている上、APIにもクセがあるためデータが取り出しにくい課題があります。
手前味噌ですが、今回はこの課題を解決するために開発した、e-stat-adaptorの使い方を解説します。
このライブラリでは、APIを意識せずe-StatのデータをPandasのDataFrame形式で取得できるため、データ分析の本質とは関係のない部分でのデータ収集などの稼働を大きく減らすことができます。

 動作確認環境

Python 3.10


 インストール方法
以下のコマンドで、e-stat-ada...]]></description><link>https://zenn.dev/michy/articles/44f0e8b32de847</link><guid isPermaLink="true">https://zenn.dev/michy/articles/44f0e8b32de847</guid><pubDate>Tue, 04 Feb 2025 12:36:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6NGCzpIF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:e-Stat%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592API%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Python%25E4%25B8%258A%25E3%2581%25A7%25E5%2588%2586%25E6%259E%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:zaiwa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhMDFjNTg2MWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaiwa</dc:creator></item></channel></rss>