<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 13 Nov 2024 00:49:30 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RTIC（Real-Time Interrupt-driven Concurrency）の徹底解説と実践的な活用方法]]></title><description><![CDATA[
 RTIC（Real-Time Interrupt-driven Concurrency）の徹底解説と実践的な活用方法

 はじめに
組み込みシステム開発において、リアルタイム性と安全性の両立は非常に重要です。Rust言語のRTIC（Real-Time Interrupt-driven Concurrency）は、そのための強力なフレームワークとして注目されています。本記事では、main関数-loop構造との比較を通じて、RTICのメリット・デメリットを詳しく解説します。また、基本ルールや実践的なコードの構造化方法、所有権と借用システムにおけるペリフェラルやクロックの扱い方、RTICで...]]></description><link>https://zenn.dev/kokimu/articles/dc0561e9e1e722</link><guid isPermaLink="true">https://zenn.dev/kokimu/articles/dc0561e9e1e722</guid><pubDate>Tue, 12 Nov 2024 14:10:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CTt44X6O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RTIC%25EF%25BC%2588Real-Time%2520Interrupt-driven%2520Concurrency%25EF%25BC%2589%25E3%2581%25AE%25E5%25BE%25B9%25E5%25BA%2595%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%25A8%25E5%25AE%259F%25E8%25B7%25B5%25E7%259A%2584%25E3%2581%25AA%25E6%25B4%25BB%25E7%2594%25A8%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2583%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTkxNWRmMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こーき</dc:creator></item><item><title><![CDATA[ライブラリなしで自作言語：可変性をsetterの有無で表す言語 "Settlang"]]></title><description><![CDATA[わたすけです。普段は自作OS等の低レイヤからWebフロントエンドまで広く浅くやっています。いつもは自分で作ったサイトこと watasuke.net で記事を書いているのですが、Zennで「今年の最も大きなチャレンジ」に関する記事の投稿イベントがあると聞いたので、こっちに記事を書いてみようと思います。
僕にとって、今年における唯一 [1] のチャレンジは 「U-22 プログラミング・コンテスト (以下U22プロコン) 」への参加です。僕はRustでプログラミング言語を作って応募しました。U22プロコンに応募するのは3回目ですが、今回はじめて一次審査を通過することが出来ました。最終審査まで残...]]></description><link>https://zenn.dev/watasuke/articles/a188b2dbd25a1f</link><guid isPermaLink="true">https://zenn.dev/watasuke/articles/a188b2dbd25a1f</guid><pubDate>Tue, 12 Nov 2024 09:07:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UAfQOrwX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25A7%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259E%25EF%25BC%259A%25E5%258F%25AF%25E5%25A4%2589%25E6%2580%25A7%25E3%2582%2592setter%25E3%2581%25AE%25E6%259C%2589%25E7%2584%25A1%25E3%2581%25A7%25E8%25A1%25A8%25E3%2581%2599%25E8%25A8%2580%25E8%25AA%259E%2520%2522Settlang%2522%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2581%259F%25E3%2581%2599%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pnZTVqSzY5WEZ0OEx0RGhHVkhaanZPcHQyNWI0ajhTenlfdTNiR2hjPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わたすけ</dc:creator></item><item><title><![CDATA[自作Solidityを自作EVMで動かしてみる]]></title><description><![CDATA[
 はじめに
自分でコンパイラと実行環境作ってみたいなと思ってたので作ってみました。
構文とかopcodeは全然網羅してないのですが、最低限ちょっとしたもの動けば満足なので気が向いたらもうちょっと改良していきます。

https://github.com/akira-19/toythereum

以下の参考文献に大いに影響受けてるのですが、なるべくEthereumのYellow Paperとか、gethの実装を見て可能な限り自分のできる範囲でやりました。（自分のリポジトリ名もパクリっぽいんですけど、一応この参考リポジトリを見つける前につけたやつです。本当です。）

Rustで作るプログラ...]]></description><link>https://zenn.dev/akira19/articles/e305cfb0e0e9f0</link><guid isPermaLink="true">https://zenn.dev/akira19/articles/e305cfb0e0e9f0</guid><pubDate>Mon, 11 Nov 2024 23:29:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ke8nIazE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CSolidity%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259CEVM%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akira%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ctSDRKRGRJUU1XZWg5b3FWTFgxajl1VmlvRlhQOHlackFDbC11bWc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akira</dc:creator></item><item><title><![CDATA[Dev Container で VSCode 拡張機能付きの Rust 開発環境を構築する]]></title><description><![CDATA[ローカル環境に Rust をインストールすることなく、Rust の開発環境を構築していきましょう！
まずは Docker と VSCode の拡張機能 Dev Containers をインストールしておきましょう！

 Microsoft 製のイメージを使う
!
とにかく簡単に Dev Container 環境を作成できる！

Dev Container で Rust を 簡単に使える ようにするには Microsoft 製のイメージがおすすめです。

 devconainer.json を作成する
ルートディレクトリに .devcontainer/devconainer.json を作...]]></description><link>https://zenn.dev/codemountains/articles/5995bc3e6b3aa3</link><guid isPermaLink="true">https://zenn.dev/codemountains/articles/5995bc3e6b3aa3</guid><pubDate>Mon, 11 Nov 2024 11:49:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vQFekuIQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dev%2520Container%2520%25E3%2581%25A7%2520VSCode%2520%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E4%25BB%2598%25E3%2581%258D%25E3%2581%25AE%2520Rust%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item><item><title><![CDATA[読み取り専用APIをRustとSQLiteで早く安く]]></title><description><![CDATA[こんにちはyutaです。
SQLiteを圧縮できるsqlite-zstdを紹介したいと思います。

 なぜSQLite
弊社ではレコメンデーション用のデータベースを構築し、BoostDraftからのAPIを経由してオススメを取得できるようにしています。
当初はDynamoDB上にデータを登録していましたが、推論はバッチで実行/登録されるため、APIからのアクセスは読み取りだけになります。
そこで、データをSQLiteに丸っと投入し、APIサーバーと同梱してコンテナと起動するようにすれば、DynamoDBのコストを抑えながらついでにレイテンシも改善するのではないかと考えたわけです。
このワ...]]></description><link>https://zenn.dev/boostdraft/articles/6b5b0131501225</link><guid isPermaLink="true">https://zenn.dev/boostdraft/articles/6b5b0131501225</guid><pubDate>Mon, 11 Nov 2024 06:25:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--je8AdpRW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25AA%25AD%25E3%2581%25BF%25E5%258F%2596%25E3%2582%258A%25E5%25B0%2582%25E7%2594%25A8API%25E3%2582%2592Rust%25E3%2581%25A8SQLite%25E3%2581%25A7%25E6%2597%25A9%25E3%2581%258F%25E5%25AE%2589%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yuta%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyMzNmMWZhZGIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BoostDraft%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYS5wbmc=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuta</dc:creator></item><item><title><![CDATA[Rust 入門がてら JSON フォーマッターを書く]]></title><description><![CDATA[
 これはなに？
Rust が全然わからないフロントエンドエンジニアが、最近のフロントエンド領域への Rust の進出に影響を受け、まずは Rust を学んでみるために JSON フォーマッターを作ってみた記録です。
この記事は、Rust ビギナーが AI に頼りつつ雰囲気で実装したものであり、Rust を体系的に学ぶための内容ではありません。
同じように Rust に興味を持っている方々が、まず何から始めたら良いかの参考や刺激になれば幸いです。

 前提
Rust 自体の学習は事前に行っており、その記録は以下のスクラップにまとめています。
https://zenn.dev/sa2kni...]]></description><link>https://zenn.dev/sa2knight/articles/rust-json-formatter</link><guid isPermaLink="true">https://zenn.dev/sa2knight/articles/rust-json-formatter</guid><pubDate>Mon, 11 Nov 2024 00:45:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tanmaksq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2581%258C%25E3%2581%25A6%25E3%2582%2589%2520JSON%2520%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%2583%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shingo.sasaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg0NWZhNzViYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shingo.sasaki</dc:creator></item><item><title><![CDATA[cargo update　したかった]]></title><description><![CDATA[久しぶりにログインしたノードで、zellijが動かなかったのでいろいろした
cargoのupdateから
rustup update stable
まずはrustのバージョンをstableにあげる
rustup toolchain list 
これでバージョン一覧が取得できる
rustup default stable
stableをデフォルトにします。
そのあとにcargo-updateというパッケージをインストールします
cargo install cargo-update
インストールができたら、以下のコマンドですべてのパッケージをupdateしてくれる
cargo install...]]></description><link>https://zenn.dev/killy/articles/3a53e9d9d864cf</link><guid isPermaLink="true">https://zenn.dev/killy/articles/3a53e9d9d864cf</guid><pubDate>Mon, 11 Nov 2024 00:34:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YqukuF8S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo%2520update%25E3%2580%2580%25E3%2581%2597%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BB%25A3%25E7%2590%2586%25E6%25A7%258B%25E6%2588%2590%25E4%25BD%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhZmJjODk2MjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>代理構成体</dc:creator></item><item><title><![CDATA[Rust で初めての npm package 開発]]></title><description><![CDATA[
 はじめに
筆者は最近 Rust の学習を始めました。
その中で、実際に何か動くものを作ってみたいと思い npm package 作ってみました。

 作ったもの
日付を表示するライブラリです。
&lt;script setup lang="ts"&gt;
import { today } from 'date-rs-t6'
&lt;/script&gt;

&lt;template&gt;
  &lt;!--Today: 2024/11/11（月） --&gt;
  &lt;p&gt;Today: {{ today() }}&lt;/p&gt;
&lt;/template&gt;
h...]]></description><link>https://zenn.dev/taka_shino/articles/328064f9191bfd</link><guid isPermaLink="true">https://zenn.dev/taka_shino/articles/328064f9191bfd</guid><pubDate>Sun, 10 Nov 2024 23:34:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e-1e6RGc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E5%2588%259D%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25AE%2520npm%2520package%2520%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tttttt_621_s%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1Yzc2MTk2MzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tttttt_621_s</dc:creator></item><item><title><![CDATA[RustのWebフレームワークPoemの紹介 - OpenAPIのドキュメントも同時に生成したいときの第一の選択肢]]></title><description><![CDATA[Rustのエコシステムも徐々に発展してきてWebフレームワークもactix-web, axum, rocketなどいくつか作成されてきました。OpenAPIのドキュメントを同時に生成してくれる方法はないかと探していたところ、PoemというWebフレームワークがかなり便利だったので紹介します。
https://github.com/poem-web/poem/tree/master

 Poemとは
PoemはRust用のWebフレームワークです。以下のような特徴があります。

高速に動作し、簡単に扱えることを目指している。
axumでも利用されているtowerというライブラリを利用してお...]]></description><link>https://zenn.dev/ouvill/articles/introduce_rust_poem_framework</link><guid isPermaLink="true">https://zenn.dev/ouvill/articles/introduce_rust_poem_framework</guid><pubDate>Sun, 10 Nov 2024 07:59:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jAlhwfN5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEWeb%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AFPoem%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2520-%2520OpenAPI%25E3%2581%25AE%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2582%25E5%2590%258C%25E6%2599%2582%25E3%2581%25AB%25E7%2594%259F%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E7%25AC%25AC%25E4%25B8%2580%25E3%2581%25AE%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ouvill%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3NDgyNGFjZDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ouvill</dc:creator></item><item><title><![CDATA[Vaultwarden: 自宅で安全にパスワードを管理するBitwarden互換サーバー]]></title><description><![CDATA[
 はじめに
Vaultwardenは、Rustで記述されたBitwarden Client APIと互換性のあるオープンソースのパスワードマネージャーサーバーです。公式Bitwardenサービスよりもリソース消費が少なく、自宅サーバーで安全にパスワードを管理したいユーザーに最適なソリューションを提供します。公式のBitwardenクライアント（デスクトップ、モバイル、ブラウザ）と完全に互換性があるため、既存のワークフローをそのまま維持できます。


 🎯 主要機能
Vaultwardenは、Bitwarden Client APIのほぼ完全な実装を提供し、以下の機能を備えています。

...]]></description><link>https://zenn.dev/sunwood_ai_labs/articles/vaultwarden-self-hosted-bitwarden</link><guid isPermaLink="true">https://zenn.dev/sunwood_ai_labs/articles/vaultwarden-self-hosted-bitwarden</guid><pubDate>Sat, 09 Nov 2024 17:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ztzu6KLV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vaultwarden%253A%2520%25E8%2587%25AA%25E5%25AE%2585%25E3%2581%25A7%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2599%25E3%2582%258BBitwarden%25E4%25BA%2592%25E6%258F%259B%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Maki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDdpSmVyNldLVlpKLUd4N054QWVuSFVtYXQ3MUhhd1NXaU5hRG5FTnZiMXZZdHBIaGs9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maki</dc:creator></item><item><title><![CDATA[Rust | Momento Cache SDK を使ってキャッシュする]]></title><description><![CDATA[
 はじめに
以前参加した、Serverless Days Tokyo にて Momento が紹介されており、
Momento社の提供している Momento Cache に興味を持ちました。
今回は、Momento SDK Rust を使ったキャッシュにトライしていこうと思います！
Momento SDK は Rust をはじめとした、さまざまなプログラミング言語をサポートしていますので、
好きな言語でも試せるようになっています！ありがたや..

 Momento について
Momento は Momento Cache、Momento Topics というキャッシュ基盤を提供してい...]]></description><link>https://zenn.dev/collabostyle/articles/a1ea392fcfde06</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/a1ea392fcfde06</guid><pubDate>Sat, 09 Nov 2024 13:24:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F8l9_rrN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%257C%2520Momento%2520Cache%2520SDK%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shota%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkOTBhMWI3M2YuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shota</dc:creator></item><item><title><![CDATA[重い計算をタイムアウトする]]></title><description><![CDATA[例えば数値計算のように純粋に計算として時間がかかる処理があるとします。この処理に長時間かかる場合、タイムアウトを設定して処理を中断したい場合があります。例えば予め設定した時間を超えて処理が終わらない場合、処理を中断してエラーを返すようにしたい場合です。Rustでこのような処理をどうやって実装するかを議論します。

 自前でタイムアウトを実装する
まず素朴に自前でタイムアウトを実装してみましょう。次のような仕様を考えます：

ある関数 long_calculation があり、これにタイムアウトを実装したい
タイムアウトはこの関数の引数として与える
タイムアウトを超えた場合、エラーを返す
...]]></description><link>https://zenn.dev/termoshtt/articles/tokio-task-cancel</link><guid isPermaLink="true">https://zenn.dev/termoshtt/articles/tokio-task-cancel</guid><pubDate>Sat, 09 Nov 2024 08:41:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9IUQ7r9z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2587%258D%25E3%2581%2584%25E8%25A8%2588%25E7%25AE%2597%25E3%2582%2592%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:termoshtt%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lfdUM4LVBtaVF5cjN4UjBLdWMzN2t3ZDF2cGlsaUZWV25MbzhDS1E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>termoshtt</dc:creator></item><item><title><![CDATA[Rustのtonicクライアントで構造体を直接渡せる理由を調べてみた]]></title><description><![CDATA[
 はじめに
tonicでは、クライアントのメソッドを呼び出す際にリクエスト構造体をRequest::new でラップせずにそのまま渡すことができます。
pub struct Point {}
pub struct Client {}
impl Client {
  fn get_feature(&amp;self, r: impl tonic::IntoRequest&lt;Point&gt;) {}
}

use tonic::Request;
// 以下の2つの呼び出しはどちらも有効です
client.get_feature(Point {});
client.get_featur...]]></description><link>https://zenn.dev/sotaro8181/articles/31deb49f5f6fed</link><guid isPermaLink="true">https://zenn.dev/sotaro8181/articles/31deb49f5f6fed</guid><pubDate>Sat, 09 Nov 2024 03:02:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--geEJc5PF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEtonic%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E6%25A7%258B%25E9%2580%25A0%25E4%25BD%2593%25E3%2582%2592%25E7%259B%25B4%25E6%258E%25A5%25E6%25B8%25A1%25E3%2581%259B%25E3%2582%258B%25E7%2590%2586%25E7%2594%25B1%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sotaro8181%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0NDhjNTIxMTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sotaro8181</dc:creator></item><item><title><![CDATA[【Rust】CQRSを実践してみた]]></title><description><![CDATA[こんにちは。
私はこれまでCQRSを取り入れた実装をしたことがありませんでしたが、
DDDやクリーンアーキテクチャでバックエンドの実装をしていると、参照系の処理でアーキテクチャによる制約や責務の分割によってデータの取得が非効率になっている、と感じるケースにしばしば遭遇していました。
そうした背景から、今回CQRSによる実装をしてみました。

 モチベーション

CQRSをふわっとだけ知っているけど、実装したことはないのでやってみたい
CQRSとは、を解説してくれる記事は度々あるが、実装を紹介した日本語の記事はそんなに多くないから書きたい


 CQRSの概要
本記事では、実践した実装内容...]]></description><link>https://zenn.dev/penysho/articles/8ff008520adf8e</link><guid isPermaLink="true">https://zenn.dev/penysho/articles/8ff008520adf8e</guid><pubDate>Fri, 08 Nov 2024 16:37:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FPGajqI1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591CQRS%25E3%2582%2592%25E5%25AE%259F%25E8%25B7%25B5%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2581%2598%25E3%2582%258D%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2ZWRiMmQ4NDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こじろう</dc:creator></item><item><title><![CDATA[Rust 所有権・参照]]></title><description><![CDATA[
 概要
Rustに興味があり勉強をし始めた。
しかし、Rustには特有の概念のようなものがあり初学者 (特に普段言語の特性や機能などを考えたことがない私のような人間)にとっては挫折しやすいといった話を耳にした。
そこで色々と調べていると、プログラミングRustという本の4章5章が理解できるとかなりRustのコンセプトのようなところを理解できそうな雰囲気を感じ取った。
なので言語の細かい書き方などは一度気にせずコンセプト的なところの勉強から行い、その際の理解をこのページにまとめようと思う。
たとえば4章や5章を読み解くと、Rustの急峻な学習曲線を形作る所有権やライフタイムといった概念が...]]></description><link>https://zenn.dev/akisou/articles/b08c4f7a74dd6a</link><guid isPermaLink="true">https://zenn.dev/akisou/articles/b08c4f7a74dd6a</guid><pubDate>Thu, 07 Nov 2024 14:59:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wU6l1mMg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2583%25BB%25E5%258F%2582%25E7%2585%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yama</dc:creator></item><item><title><![CDATA[Rust x WebAssembly x Yew でReactみたいに TODOアプリを作る]]></title><description><![CDATA[
 はじめに
最近、Rust x WebAssembly で React みたいなフロントエンドフレームワーク Yew の存在を知りました。調べてみると以下の記事が素晴らしかったので、まずは試してみて、プラスアルファで削除ボタンと API コールをやってみました。
以下の記事を試した後、API 呼び出しもしてみたいなぁと思った方に本記事も参考にしてもらえたら嬉しいです。
https://zenn.dev/azukiazusa/articles/rust-base-web-front-fremework-yew

 Yew って？
まず、Yew についてですが、Rust で React み...]]></description><link>https://zenn.dev/optimisuke/articles/c90bbedb4fd0f4</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/c90bbedb4fd0f4</guid><pubDate>Wed, 06 Nov 2024 13:49:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wWt0N_d9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520x%2520WebAssembly%2520x%2520Yew%2520%25E3%2581%25A7React%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AB%2520TODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[Rust x Actix Web x sqlx で TODO API]]></title><description><![CDATA[
 はじめに
Rust で TODO アプリようの API を作りました。

 ソースコード
https://github.com/optimisuke/hello-rust/tree/main/api
ここに置いてます。

 使ったもの
https://actix.rs/
Web フレームワークとして Actix Web を使いました。
Rust API で検索するとそこそこ情報出てくるので、そこそこ有名なのかなという印象です。
https://github.com/launchbadge/sqlx
まだ DB 周りは、sqlx で sqlite にアクセスしてます。

 ポイント

...]]></description><link>https://zenn.dev/optimisuke/articles/947d5208db2b0e</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/947d5208db2b0e</guid><pubDate>Wed, 06 Nov 2024 12:59:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---snrmmKJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520x%2520Actix%2520Web%2520x%2520sqlx%2520%25E3%2581%25A7%2520TODO%2520API%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[【作ったアプリの宣伝】ストレージの使用状況をサンバースト図により可視化するためのアプリを作成しました]]></title><description><![CDATA[
 作ったもの
https://github.com/fksms/DirWalker




 アプリの特徴


ストレージの使用状況をサンバースト図により可視化することができます。サンバースト図のアークを左クリックすると、サンバースト図やリストが自動的に更新されます。アークを右クリックすると、コンテキストメニューが開き、OSの標準ファイルマネージャーで該当のディレクトリを開いたり、該当のディレクトリ・ファイルのパスをクリップボードにコピーしたりすることが可能です。


デフォルトでは、OSのルートディレクトリをスキャンする仕様になっていますが、スキャンしたいディレクトリを指定することで...]]></description><link>https://zenn.dev/fksms/articles/2dbe1a2962ba51</link><guid isPermaLink="true">https://zenn.dev/fksms/articles/2dbe1a2962ba51</guid><pubDate>Wed, 06 Nov 2024 09:52:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V2opvyTe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E5%25AE%25A3%25E4%25BC%259D%25E3%2580%2591%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E4%25BD%25BF%25E7%2594%25A8%25E7%258A%25B6%25E6%25B3%2581%25E3%2582%2592%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2588%25E5%259B%25B3%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258A%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fksms%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ5MzEwZTU5N2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fksms</dc:creator></item><item><title><![CDATA[Rustできる人が考えていること[YouTube抜粋]]]></title><description><![CDATA[YouTubeで語っている人がいたのを抜粋
https://www.youtube.com/watch?v=Eojf_iTxNBw

Ruby出身の人はプログラミングを振る舞いの集合として捉えている傾向がある。「オブジェクトは振る舞いがあってデータはなんでもいい...」みたいな発送しがち。システムプログラミングではこの考え方はだめ。システムプログラミングではデータが大事。データを誰が持っているか、どこで初期化するか、どこでdropするかなどを中心に考えて、所有権を中心に設計を考える
振る舞いのことは忘れてデータに注目する。誰がものを管理するのか、どういうネスト関係にあるのか。
計算量も考...]]></description><link>https://zenn.dev/dotdotdot/articles/5f0962d12b9562</link><guid isPermaLink="true">https://zenn.dev/dotdotdot/articles/5f0962d12b9562</guid><pubDate>Wed, 06 Nov 2024 02:35:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1GQuXu23--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E4%25BA%25BA%25E3%2581%258C%25E8%2580%2583%25E3%2581%2588%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%255BYouTube%25E6%258A%259C%25E7%25B2%258B%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B2%25E3%2581%2592%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNEJZZHdMWnZzcGtndzNQWGhhY0ViZ1p0WEgyODFVVjVteG9sdnotWUk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ひげ</dc:creator></item><item><title><![CDATA[proc-macro-workshopの進め方（derive_builder編）]]></title><description><![CDATA[
 はじめに
Rustには、煩雑な記述を簡潔にできるマクロという言語機能があります。
マクロには大きく分けて


macro_rules!を用いたdeclarative（宣言的）マクロ
それ以外のprocedual（手続き的）マクロ

の2種類があり、手続き的マクロはさらに


#[derive]マクロ
attribute-likeマクロ
function-likeマクロ

の3種類に分かれます。
declarativeマクロの代表例としてはvec!マクロがあります。
#[derive]マクロの代表例にはDebugやSerializeなどがあります。構造体やenumの前に書くやつです。
...]]></description><link>https://zenn.dev/taro137/articles/bb45823b83d354</link><guid isPermaLink="true">https://zenn.dev/taro137/articles/bb45823b83d354</guid><pubDate>Mon, 04 Nov 2024 12:09:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--w9iw6sWv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:proc-macro-workshop%25E3%2581%25AE%25E9%2580%25B2%25E3%2582%2581%25E6%2596%25B9%25EF%25BC%2588derive_builder%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlOGE5ZGM1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taro</dc:creator></item></channel></rss>