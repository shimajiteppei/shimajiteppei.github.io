<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 22 Sep 2025 07:10:51 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ポートフォリオサイトのコンポーネント重なり問題を解決してみた]]></title><description><![CDATA[こんにちは！学生エンジニアの私です。最近ポートフォリオサイトを作っていたんですが、ある問題にぶつかってしまいました。その解決過程を記録してみようと思います。

 問題の発見
先日、ポートフォリオサイトのReadingListとStatisticsのコンポーネントが重なって表示される不具合に気づきました。なんだか見栄えが悪くて、ユーザー体験もよくないなと思いました。以前はなかった問題なので、どこで何が悪くなったのか探ってみることにしました。

 問題の分析
まずはコードを見てみることにしました。ページの構造を確認するために、app/page.tsxとapp/[locale]/page.ts...]]></description><link>https://zenn.dev/acanoneko/articles/89a7099a61dede</link><guid isPermaLink="true">https://zenn.dev/acanoneko/articles/89a7099a61dede</guid><pubDate>Mon, 22 Sep 2025 06:13:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7dEy7Aoe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AA%25E3%2582%25AA%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E9%2587%258D%25E3%2581%25AA%25E3%2582%258A%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ACAne%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmYzQ2NjE1NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ACAne</dc:creator></item><item><title><![CDATA[Singleton Patternの基礎理解]]></title><description><![CDATA[
 はじめに
https://www.patterns.dev/#patterns
で学んだことを理解のためにアウトプットする。

 シングルトン(Singleton)とは
そのクラスからは絶対に1つしかインスタンスを作れないようにする仕組み
のこと。例えるならば、
会社に社長は1人だけ、部署に部長は1人だけ、みたいなもの。
唯一無二の存在。
シングルトンは、一度インスタンス化してしまえば、グローバルにアクセスできるクラスである。そのため、この単一インスタンスはアプリケーション全体で共有することができるという利点もある。

 Counterクラスの例
ES2015のクラスを使って、例とし...]]></description><link>https://zenn.dev/qoo1000000/articles/e3bd9233e7461d</link><guid isPermaLink="true">https://zenn.dev/qoo1000000/articles/e3bd9233e7461d</guid><pubDate>Mon, 22 Sep 2025 05:10:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PNxmpW6R--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Singleton%2520Pattern%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E7%2590%2586%25E8%25A7%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Qoo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGtHRXgxSGJfU1ktdXB4TWZKM3RacmFRNU42enBVQ0hheS0xclFya2VjR3FqM29pZ2lEQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Qoo</dc:creator></item><item><title><![CDATA[TypeScript × express APIをAWS Lambdaにデプロイする際の勘所]]></title><description><![CDATA[
 はじめに
TypeScriptとexpressで書いたAPIを、AWS Lambdaにデプロイしたい、と考えたこと、ありますよね。私は昨日考えていました。
ローカルでは ts-node などで手軽に動作確認できるものの、いざLambdaにデプロイしようとすると、TypeScriptはそのままではLambdaで動かない（トランスパイルが必要）し、node_modules が肥大化してLambdaのサイズ制限に引っかかるし、なんだかんだハマることが多いです。しかも今回はいろんな事情でECR on Lambda（Dockerイメージを使う方法）が選択できないとか、serverless fr...]]></description><link>https://zenn.dev/uguisu_blog/articles/209584ee2b9b37</link><guid isPermaLink="true">https://zenn.dev/uguisu_blog/articles/209584ee2b9b37</guid><pubDate>Mon, 22 Sep 2025 03:26:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oyp6pY0Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25C3%2597%2520express%2520API%25E3%2582%2592AWS%2520Lambda%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AE%25E5%258B%2598%25E6%2589%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B4%25E3%2582%2588%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmOTQzNjQ0NjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2581%2586%25E3%2581%2590%25E3%2581%2584%25E3%2581%2599%25E3%2582%25BD%25E3%2583%25AA%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%25BATechBlog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlMTI5YjA2YTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぴよ</dc:creator></item><item><title><![CDATA[NotionみたいなフィルターUIを作るための型とユーティリティを作ってみる]]></title><description><![CDATA[Notion を業務でも使いますが、データベースのフィルターが便利です。常にプレビューしてくれているし、変えたい時・追加したい時もシンプルな操作で対応できます。

今回はそのフィルターを型安全に構築するために、TypeScriptで型とユーティリティの実装をしていきます。

 先にインターフェースの完成図を
今回はフィルターのスキーマを定義し、そのスキーマをもとにフィルターのUIを構築していくイメージで実装を進めてきます。
スキーマの定義は以下のような形で実装します。
export const sampleSchema = {
  email: createFieldHelper.tex...]]></description><link>https://zenn.dev/vanellope/articles/252f5339541815</link><guid isPermaLink="true">https://zenn.dev/vanellope/articles/252f5339541815</guid><pubDate>Mon, 22 Sep 2025 03:05:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zvFL_EQp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Notion%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25BCUI%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25A8%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:marromugi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyOWZmOTQwZmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>marromugi</dc:creator></item><item><title><![CDATA[JSXの条件分岐]]></title><description><![CDATA[
 JSXとは
JSX(JavaScript XML)は、JavaScriptの構文拡張で、JavaScript(TypeScript)ファイル内にHTMLのようなコードを記述できるようにするものです。
Meta(旧Facebook)によって開発されました。
JSXはHTMLに似た構文を持ちつつも、JavaScript(TypeScript)の処理を組み合わせられるのが特徴です。
例えば、{} の中に変数や関数を埋め込み、条件分岐やループ処理を行えます。

 JSXの条件分岐方法
Reactコンポーネントを作成するとき、「特定の条件を満たしたときだけ表示する」「条件によって表示内容を切り...]]></description><link>https://zenn.dev/ket8/articles/df01953fa0db2d</link><guid isPermaLink="true">https://zenn.dev/ket8/articles/df01953fa0db2d</guid><pubDate>Mon, 22 Sep 2025 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SpXl9yKU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:JSX%25E3%2581%25AE%25E6%259D%25A1%25E4%25BB%25B6%25E5%2588%2586%25E5%25B2%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:KET8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FkZWE4MmFjMWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KET8</dc:creator></item><item><title><![CDATA[Next.js の Client Component で async/await を使う]]></title><description><![CDATA[
 クライアントコンポーネントでも async/await は使える
クライアントコンポーネントをサーバ上で動かす際、async/await が使えないという誤解があります
その誤解を解くために最小限のサンプルを用意しました
このサンプルではサーバ上で非同期データを取得し HTML で出力、ブラウザ上で Hydration して動作します
重要な点は、throw property.promiseの部分です。ここで Promise が解決された際に、コンポーネントが再レンダリングされます。この機能は React のrenderToReadableStream実行時の標準動作です。&lt;S...]]></description><link>https://zenn.dev/sora_kumo/articles/next-client-async</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/next-client-async</guid><pubDate>Mon, 22 Sep 2025 02:56:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I7rKqDcU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2581%25AE%2520Client%2520Component%2520%25E3%2581%25A7%2520async%252Fawait%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[フロントエンドカンファレンス東京2025 参加レポート（当日）]]></title><description><![CDATA[
 はじめに
2025年9月21日に開催されたフロントエンドカンファレンス東京にオンラインで参加しました。多様なセッションが展開され、フロントエンド技術の最新動向と深い知見を得ることができました。
本記事では、各セッションの要点を紹介します。


 1. Bon Voyage CSS Ecosystem Meets Standards now
登壇者：saku

 要点


レスポンシブデザインの逆転: これまでの「コンテンツが外部に応じる」から「外部がコンテンツに応じる」イントリンジックウェブデザインへ

コンテナクエリがついに実現: 10年前から欲しかった機能がcontain: in...]]></description><link>https://zenn.dev/t_izumii/articles/7566ece18a2177</link><guid isPermaLink="true">https://zenn.dev/t_izumii/articles/7566ece18a2177</guid><pubDate>Sun, 21 Sep 2025 13:09:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jJ4xRsKS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25AB%25E3%2583%25B3%25E3%2583%2595%25E3%2582%25A1%25E3%2583%25AC%25E3%2583%25B3%25E3%2582%25B9%25E6%259D%25B1%25E4%25BA%25AC2025%2520%25E5%258F%2582%25E5%258A%25A0%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%2588%25E5%25BD%2593%25E6%2597%25A5%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:izumii%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI3YmEzOGZmYmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>izumii</dc:creator></item><item><title><![CDATA[Next.jsパフォーマンス最適化：ナビゲーション遅延と"Failed to fetch"エラーの解決記録]]></title><description><![CDATA[
 問題発見
ポートフォリオサイトのナビゲーションで深刻なパフォーマンス問題を発見：

ナビゲーションリンククリックからページ遷移まで9秒の遅延
時折発生する"Failed to fetch"エラー
ユーザー体験の大幅な悪化


 根本原因分析

 1. ルーティング問題
// 修正前の問題コード
href="/#skills"
href="/#projects"
アンカーリンクに言語プレフィックス（/enなど）が含まれていなかったため、Next.jsが内部ルートとして認識せず、クライアントサイドナビゲーションが機能していませんでした。

 2. バンドルサイズ問題
&lt;mcfile...]]></description><link>https://zenn.dev/acanoneko/articles/926a4504262384</link><guid isPermaLink="true">https://zenn.dev/acanoneko/articles/926a4504262384</guid><pubDate>Sun, 21 Sep 2025 12:27:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6j0R-7cP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25EF%25BC%259A%25E3%2583%258A%25E3%2583%2593%25E3%2582%25B2%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E9%2581%2585%25E5%25BB%25B6%25E3%2581%25A8%2522Failed%2520to%2520fetch%2522%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ACAne%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmYzQ2NjE1NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ACAne</dc:creator></item><item><title><![CDATA[はじめての三次元ブラウザクラフトを作った話（GPT-5 Codex と一緒に）]]></title><description><![CDATA[この記事自体もGPT-5 codexでほぼ一発生成したものです。
これまでゲーム開発や 3D のオブジェクトを扱うコードはほぼ未経験でしたが、GPT-5 Codex を相棒に、Three.js でミニマルな「クラフト風」ブラウザアプリを作ってみました。ブラウザだけで動き、ローカルサーバを立てればすぐ試せます。
ここで試せます。
https://reouno.github.io/tscraft/
github: https://github.com/reouno/tscraft?tab=readme-ov-file


 何ができるか

移動と視点: WASD で移動、マウスで視点、スペー...]]></description><link>https://zenn.dev/tomato_leo/articles/76105f1d6641b3</link><guid isPermaLink="true">https://zenn.dev/tomato_leo/articles/76105f1d6641b3</guid><pubDate>Sun, 21 Sep 2025 09:05:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--39pmNx4K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25AE%25E4%25B8%2589%25E6%25AC%25A1%25E5%2585%2583%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2595%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%25EF%25BC%2588GPT-5%2520Codex%2520%25E3%2581%25A8%25E4%25B8%2580%25E7%25B7%2592%25E3%2581%25AB%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%2587%25E9%2587%258E%25E7%25A4%25BC%25E6%2596%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2Mzc4NWNiNTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宇野礼於</dc:creator></item><item><title><![CDATA[Azure OpenAI 「gpt-realtime」 モデルとツール呼び出しを使った音声対話エージェント]]></title><description><![CDATA[

 はじめに
Azure OpenAI の Realtime API を使うと、音声対話を低遅延で行うことができます。カスタマーサポートなどの対話型シナリオで、ユーザーの発話に対して自然な応答を返すことが期待されます。さらに、Function Calling（関数呼び出し機能）を組み合わせることで、対話中に外部APIを動的に呼び出して最新情報の取得やデータベース操作を行うことが可能です。
本記事では、WebRTC を活用した Azure OpenAI Realtime API（以下 Realtime API）の実装方法と、音声対話中にリアルタイムでバックエンド機能を呼び出す方法を、Ty...]]></description><link>https://zenn.dev/nomhiro/articles/poc-voice-live-api-ai-agent</link><guid isPermaLink="true">https://zenn.dev/nomhiro/articles/poc-voice-live-api-ai-agent</guid><pubDate>Sun, 21 Sep 2025 06:13:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pPdznqEV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Azure%2520OpenAI%2520%25E3%2580%258Cgpt-realtime%25E3%2580%258D%2520%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25A8%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E9%259F%25B3%25E5%25A3%25B0%25E5%25AF%25BE%25E8%25A9%25B1%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%258D%25E3%2581%258F%25E3%2581%25BE%25EF%25BC%2588Hiroki%252C%2520Nomura%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0YmFmOGY4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しろくま（Hiroki, Nomura）</dc:creator></item><item><title><![CDATA[ChatGptに「最強の投資家」として数百社への投資判断を行ってもらい、結果をスプシに一括出力しよう]]></title><description><![CDATA[
 はじめに
株式投資をしてみようと思い立ったのですが、知識も何もない状態ではどう始めればいいのかわかりません。日本だけでも上場企業が4000社以上あり、そこから伸びる企業を正確に見つけ出すのは素人には困難です。そこで以下のように考えました。
「最強の投資家の思考をChatGptに模倣させて、上場企業全社について投資判断をして貰えばいいのではないか？」
「最強の投資家」というワードでGoogle検索をかけるとウォーレン・バフェット氏の名前が出てきます。彼の思考を模倣させば勝率が高いはずと考え、ChatGptに彼の思考を模倣させて投資判断を下してもらうための仕組みを考えました。
当記事では...]]></description><link>https://zenn.dev/matsupiee/articles/3ccca3df92197b</link><guid isPermaLink="true">https://zenn.dev/matsupiee/articles/3ccca3df92197b</guid><pubDate>Sun, 21 Sep 2025 04:18:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--x9pvR3zZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGpt%25E3%2581%25AB%25E3%2580%258C%25E6%259C%2580%25E5%25BC%25B7%25E3%2581%25AE%25E6%258A%2595%25E8%25B3%2587%25E5%25AE%25B6%25E3%2580%258D%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%2595%25B0%25E7%2599%25BE%25E7%25A4%25BE%25E3%2581%25B8%25E3%2581%25AE%25E6%258A%2595%25E8%25B3%2587%25E5%2588%25A4%25E6%2596%25AD%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%2582%25E3%2582%2589%25E3%2581%2584%25E3%2580%2581%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592%25E3%2582%25B9%25E3%2583%2597%25E3%2582%25B7%25E3%2581%25AB%25E4%25B8%2580%25E6%258B%25AC%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:matsupiee%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEozYlVnSGpHNEk1a3lsLV93bC1nOGRVZWhzd3BNNmMzaGQxdEIzcUdPWEZyeUJHQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>matsupiee</dc:creator></item><item><title><![CDATA[スキーマレベルの型安全な開発手法とそのメリット]]></title><description><![CDATA[
 スキーマレベルの型安全な開発手法とそのメリット

 はじめに
TypeScriptの普及とともに、型安全な開発への関心が高まっています。特に OpenAPI / GraphQL / gRPC などのスキーマから型を自動生成するワークフローがあります。
一方で、この手法が現場でどの課題を解決し、どのような場面で有効かを言語化できていないケースも少なくありません。型安全性は機能要件ではなく、導入には一定のリファクタリングも伴います。だからこそ、メリット・限界・判断基準を明確にしておくことが重要です。
本記事では、スキーマレベルの型安全な開発が解決する課題、オーバーエンジニアリングになり得...]]></description><link>https://zenn.dev/eiji_k/articles/0431ec68d5666a</link><guid isPermaLink="true">https://zenn.dev/eiji_k/articles/0431ec68d5666a</guid><pubDate>Sun, 21 Sep 2025 03:47:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ezwwsdmw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E9%2596%258B%25E7%2599%25BA%25E6%2589%258B%25E6%25B3%2595%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%2589%25E3%2582%25A6%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1YmY5ZGViZjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クドウ</dc:creator></item><item><title><![CDATA[HonoのVariablesでDependency Injectionを実装する]]></title><description><![CDATA[
 はじめに
Webフレームワークである 🔥Hono を使ったAPI開発において、Dependency Injection（DI）をVariablesを使って実装する方法について素振りした記事です。

 HonoのVariablesとは
Honoのコンストラクタには型安全性を確保するため、変数をジェネリックとして渡すことができます。
そしてミドルウェアで依存の注入を行うことができます。
type Variables = {
  message: string
}

const app = new Hono&lt;{ Variables: Variables }&gt;()

app.us...]]></description><link>https://zenn.dev/tetoteto/articles/hono-dependency-injection-variables</link><guid isPermaLink="true">https://zenn.dev/tetoteto/articles/hono-dependency-injection-variables</guid><pubDate>Sat, 20 Sep 2025 23:50:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OUgG_UYi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%25E3%2581%25AEVariables%25E3%2581%25A7Dependency%2520Injection%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TetoTeto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXlIN1NhY21HVFFmR3hWQ1d2R01nX29ETVR0WU82UXJ6WGg1Z3dZOUs4VWRJPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TetoTeto</dc:creator></item><item><title><![CDATA[JSX.IntrinsicElements ts(7026) が存在しない場合の対処法]]></title><description><![CDATA[
 概要
npx create-next-app@latest
Next.JSアプリを作成した際に生成されたコードの状態で静的解析エラーが表示された。
インターフェイス 'JSX.IntrinsicElements' が存在しないため、暗黙的に JSX 要素の型は 'any' になります。ts(7026)


 解決手順
npm i
パッケージをインストールする事でnode_modulesが生成され静的解析エラーは解消。

 原因

 型定義ファイル（@types/*）の未配置
node_modulesが存在しない為、型定義ファイルが見つからず型情報を解決できず暗黙的にanyとして扱われ...]]></description><link>https://zenn.dev/w4_3nd0/articles/af273a3496f8f3</link><guid isPermaLink="true">https://zenn.dev/w4_3nd0/articles/af273a3496f8f3</guid><pubDate>Sat, 20 Sep 2025 17:04:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3cMwFIAU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JSX.IntrinsicElements%2520ts%25287026%2529%2520%25E3%2581%258C%25E5%25AD%2598%25E5%259C%25A8%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:endr0id%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTFA3aTNROWJhOU1sbGVOQXlBU0xjbjB3Tzc0VEhMLUYzNnJxSTNyUXVkbkFzMkRRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>endr0id</dc:creator></item><item><title><![CDATA[@hono/mcpでAWS LambdaにリモートMCPサーバを構築する]]></title><description><![CDATA[!
この記事は人間が書き、記事の校正に生成AIを使用しています。


 はじめに
Honoは軽量でUltrafastなJavaScript向けWebフレームワークです。
当初はCloudflare Workers向けに開発されましたが、Web標準APIを活用しているため、Node.jsやDeno, Bun, AWS Lambda, Lambda@Edgeなど様々な環境で動作します。
https://hono.dev/
サードパーティのミドルウェアも活発に開発されており、2025年6月にはリモートMCPサーバの構築をサポートする@hono/mcpがリリースされました。
https://gi...]]></description><link>https://zenn.dev/yokomachi/articles/202509_hono_lambda_mcp</link><guid isPermaLink="true">https://zenn.dev/yokomachi/articles/202509_hono_lambda_mcp</guid><pubDate>Sat, 20 Sep 2025 13:13:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R_VNGoYC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2540hono%252Fmcp%25E3%2581%25A7AWS%2520Lambda%25E3%2581%25AB%25E3%2583%25AA%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2588MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNGQ5NzI1ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoko</dc:creator></item><item><title><![CDATA[TypeScript × Next.js × Azure でゼロから作る画像管理UI]]></title><description><![CDATA[Next.js × TypeScript × MUI で作る ギャラリーアプリのフロントエンド を、ゼロからクラウドに公開する方法を解説します。

本記事では、
・画像アップロード・一覧表示・削除機能の実装
・Docker を使った効率的なイメージ作成
・Azure Container Registry (ACR) へのプッシュと App Service でのデプロイ

といったフローを実務に即した形で学べます。

初心者でも理解しやすいよう、UI構築から本番環境で動かすまでの手順を丁寧に図解。
フロントエンド開発の実践力を高めたい方、クラウドでアプリを公開してみたい方におすすめの記事です。]]></description><link>https://zenn.dev/kenquichi/books/18e73b865234d6</link><guid isPermaLink="true">https://zenn.dev/kenquichi/books/18e73b865234d6</guid><pubDate>Sat, 20 Sep 2025 12:19:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3arHJZO7--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8wMDY3ODZkOGNlLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[バックエンド向け【JWT】HS256とRS256署名アルゴリズムの使い分け]]></title><description><![CDATA[
 はじめに
JWT (JSON Web Token) の署名アルゴリズムである HS256 と RS256。
それぞれの仕組みを理解し、メリット・デメリットを把握することは、セキュアな認証基盤を設計する上で非常に重要です。
この記事では、両者の仕組みを解説し、特にマイクロサービスアーキテクチャにおいてどちらを選択すべきかをまとめました。

 HS256 (共通鍵方式) の仕組み
HS256 は、1つの共通鍵（秘密鍵） を使ってトークンの 署名 と 検証 を行う、シンプルで高速な方式です。HMAC (Hash-based Message Authentication Code) を利用し...]]></description><link>https://zenn.dev/wyuma/articles/9bf89d17fb00c6</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/9bf89d17fb00c6</guid><pubDate>Sat, 20 Sep 2025 10:32:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fz0yR6Km--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%2590%2591%25E3%2581%2591%25E3%2580%2590JWT%25E3%2580%2591HS256%25E3%2581%25A8RS256%25E7%25BD%25B2%25E5%2590%258D%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B4%25E3%2583%25AA%25E3%2582%25BA%25E3%2583%25A0%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fanda-dev.com%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fanda-dev.com</dc:creator></item><item><title><![CDATA[DenoでサッとPreactを書く]]></title><description><![CDATA[⚠️ 注意 deno bundleを使用するため、Deno2.4.0以降が必要です。
Deno - Bundling

 Preact + Deno
Deno環境でdeno bundleコマンドを活用し、シンプルにPreactをブラウザで動かします。
以下の手順は、Deno 2.5.1 の環境で実行して作成しています。

 1. プロジェクトの作成
まずはDenoのプロジェクトディレクトリを作成し、初期化します。
mkdir preact-deno
cd preact-deno

deno init

 2. 設定ファイルの作成
deno.jsonに、Preactのインポート設定と、開発...]]></description><link>https://zenn.dev/tamaki24/articles/2dfda7e8878774</link><guid isPermaLink="true">https://zenn.dev/tamaki24/articles/2dfda7e8878774</guid><pubDate>Sat, 20 Sep 2025 06:06:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OSnGJtsq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%2583%25E3%2581%25A8Preact%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tamaki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgxMTkxMzZkYzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tamaki</dc:creator></item><item><title><![CDATA[Pinoのtransportで複数targetを指定するならformatters.levelに注意]]></title><description><![CDATA[
 背景
Pinoを使ったロギングの設定ですが、CloudWatchのようなGUI上でフィルタリングができるツールへの出力の場合、単一のログストリームへ全てのレベルのログを出力しても問題ない、むしろ検索しやすいという認識なのですが、一方でファイルでのログ管理をしている場合に、レベルによってはファイルを分けて管理したいという考え方があると思います。
ログの設定などはあまり時間をかけたくないところだと思いますが、AIと一緒に実装してみて、つまずいてしまった場面があったので、どう実装するのがいいのかを自分の中で整理したく、こちらの記事に残そうと思います。

 想定する対象読者

TypeScr...]]></description><link>https://zenn.dev/takuscript/articles/770785600a69cd</link><guid isPermaLink="true">https://zenn.dev/takuscript/articles/770785600a69cd</guid><pubDate>Sat, 20 Sep 2025 03:23:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SOpKkMNj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pino%25E3%2581%25AEtransport%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0target%25E3%2582%2592%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AA%25E3%2582%2589formatters.level%25E3%2581%25AB%25E6%25B3%25A8%25E6%2584%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taku%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YmNlMjU3ZjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taku</dc:creator></item><item><title><![CDATA[新規アプリ立ち上げ時の初期セットアップ]]></title><description><![CDATA[0→1でアプリや社内ツールを作ることが多く、そのたびに行う初期セットアップをまとめました。
特に初学者でも手を動かしやすい構成を意識しており、「手軽に始められて、よく使われることが多い」技術を例にしています。

 採用技術（例）


言語：TypeScript

フロントとバックエンドをこれ１つで書けて得られる恩恵が大きい



アプリケーション：Next.js

ホスティングが簡単で、これだけでフルスタックアプリを構築可能。学習コストに対して得られる恩恵が大きい



UI：shadcn/ui + Tailwind CSS

必要なコンポーネントを追加するだけで、それなりのモダンなUI...]]></description><link>https://zenn.dev/sleeper/articles/65f128679f7ecf</link><guid isPermaLink="true">https://zenn.dev/sleeper/articles/65f128679f7ecf</guid><pubDate>Fri, 19 Sep 2025 10:16:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--il3TbMoT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%25B0%25E8%25A6%258F%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%2592%25E6%2599%2582%25E3%2581%25AE%25E5%2588%259D%25E6%259C%259F%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2581%2595%25E3%2581%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk5ZjRlYTUyOTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うさぎ</dc:creator></item></channel></rss>