<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 01 Sep 2025 00:16:37 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Reactでフォームの多重送信を防ぐ]]></title><description><![CDATA[
 Reactでフォームの多重送信を防ぐ方法

 問題
ボタンの押下処理実行中フラグをuseStateで管理していた場合、連打時に複数実行されてしまいフラグが正しく機能しなかった。
useStateは非同期更新のため、連打時に以下の問題が発生します：
const [isSubmitting, setIsSubmitting] = useState(false);

const handleSubmit = async (event: React.FormEvent) =&gt; {
  event.preventDefault();
  event.stopPropagation();
...]]></description><link>https://zenn.dev/lancers/articles/825191e6036a0a</link><guid isPermaLink="true">https://zenn.dev/lancers/articles/825191e6036a0a</guid><pubDate>Sun, 31 Aug 2025 21:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XZV7cXU1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E5%25A4%259A%25E9%2587%258D%25E9%2580%2581%25E4%25BF%25A1%25E3%2582%2592%25E9%2598%25B2%25E3%2581%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2598%25E3%2582%2585%25E3%2581%25AB%25E3%2581%25A1%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzNWQwNTJiY2EuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%25E3%2582%25BA%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXdVY0FfTDdvcDdJc0lJWTJDdk44cGozeExna3g3YlduNXJzMW9nQUhrM09PUzBKYz1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>じゅにち</dc:creator></item><item><title><![CDATA[Reactで汎用性の高いButtonコンポーネントを作る]]></title><description><![CDATA[
 はじめに
ButtonコンポーネントはWebサイトやWebアプリを作る時は、必ず用意しますよね。

こういうやつです。
このコンポーネントは、奥が深くて見た目は割とシンプルなのですが、
サイトのどこでも出てきて、色々なパターンが存在するので、
毎回「この場合はどうやって実装しよう、、？」
と悩むことが多いコンポーネントの１つです。

１つのコンポーネントで全て賄おうとして地獄になる。
都度ボタンコンポーネントを作ってしまい、管理が大変、煩雑になる。
ボタンの状態が沢山ありすぎて、cssをどうやって管理すればいいのか。

今回は色々な悩みを解決出来るような汎用性の高いボタンコンポーネン...]]></description><link>https://zenn.dev/resistance_gowy/articles/59f849baa49597</link><guid isPermaLink="true">https://zenn.dev/resistance_gowy/articles/59f849baa49597</guid><pubDate>Sun, 31 Aug 2025 16:38:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--02kkcslD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7%25E6%25B1%258E%25E7%2594%25A8%25E6%2580%25A7%25E3%2581%25AE%25E9%25AB%2598%25E3%2581%2584Button%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HTMLGO%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hqc01qa3F3b0kycWV0ZTJVTHJPVDZva3hXWFV3NzlPNTJWemZlSGc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HTMLGO</dc:creator></item><item><title><![CDATA[TypeScriptでオウム返しするLINE Botをつくる]]></title><description><![CDATA[TypeScriptで単純なLINE Botを作る方法を書きます。
ユーザーがLINEアプリから送信したテキストメッセージに対して、そのまま同じ文言を返すBotを作りたいと思います。

 準備
TypeScriptでLINE BotをつくるにばSDKを利用すると便利です。Webサーバーとしてはexpressを用います。
yarn add @line/bot-sdk express

 オウム返しするBotをつくる
オウム返しするBotは次のようなコードで実装できます。
import express, { Request, Response } from "express";
import...]]></description><link>https://zenn.dev/ak2ie/articles/b905d74a6eafbb</link><guid isPermaLink="true">https://zenn.dev/ak2ie/articles/b905d74a6eafbb</guid><pubDate>Sun, 31 Aug 2025 14:33:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z-uTR8Nv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2582%25AA%25E3%2582%25A6%25E3%2583%25A0%25E8%25BF%2594%25E3%2581%2597%25E3%2581%2599%25E3%2582%258BLINE%2520Bot%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ak2ie%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc1NmEzODZmYjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ak2ie</dc:creator></item><item><title><![CDATA[少人数で3つのWebアプリを支える技術 - Hono × Cloudflare で実現する最高のDeveloper Experience]]></title><description><![CDATA[
 はじめに
こんにちは、株式会社bestieeでエンジニアをしているyuuuminです。
私たちは「ベストティーチ」という家庭教師サービスを運営しています。保護者向け・講師向け・管理者向けの3つのWebアプリケーションをLINE上で提供しています。
https://best-teach.jp/
主な機能として、認証、講師の検索、授業依頼〜完了までの一連のフロー、チャット機能（画像・PDF添付対応）、LINE通知・リマインド機能、Stripeによる自動引き落とし・請求システム、レビュー・評価システムなどを提供しています。
開発は少人数のチームで行っており、大部分を私が担当しています。この...]]></description><link>https://zenn.dev/miravy/articles/d5c59c27f01b4e</link><guid isPermaLink="true">https://zenn.dev/miravy/articles/d5c59c27f01b4e</guid><pubDate>Sun, 31 Aug 2025 07:46:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gRZtzjA_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25B0%2591%25E4%25BA%25BA%25E6%2595%25B0%25E3%2581%25A73%25E3%2581%25A4%25E3%2581%25AEWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E6%2594%25AF%25E3%2581%2588%25E3%2582%258B%25E6%258A%2580%25E8%25A1%2593%2520-%2520Hono%2520%25C3%2597%2520Cloudflare%2520%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E6%259C%2580%25E9%25AB%2598%25E3%2581%25AEDeveloper...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuuumin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjNGE1OTM0ZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuuumin</dc:creator></item><item><title><![CDATA[Farm + React + Tailwind CSS V4 でハマった件について]]></title><description><![CDATA[
 はじめに
最近、高速なビルドツールとして注目を集めているFarmと、定番のReact、みんな大好きTailwind CSSを組み合わせ、プロジェクトを作ってみました。
いつも通り環境構築しているとTailwind CSS V4の導入で予想以上にハマってしまいました。同じような環境で開発を始めようとしている方の参考になれば幸いです。

 使用した技術スタック

Bun
Farm
React
Tailwind CSS(V4)


 何にハマったのか？

 Tailwind CSS V3からV4への大きな変更
Tailwind CSS V3とV4で導入方法が大幅に変更されました。具体的には...]]></description><link>https://zenn.dev/tsuruya/articles/ac6f30bab8c879</link><guid isPermaLink="true">https://zenn.dev/tsuruya/articles/ac6f30bab8c879</guid><pubDate>Sun, 31 Aug 2025 05:49:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ulCRx6Li--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Farm%2520%252B%2520React%2520%252B%2520Tailwind%2520CSS%2520V4%2520%25E3%2581%25A7%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsuruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsuruya</dc:creator></item><item><title><![CDATA[Rust製のビルドツール【Farm】が気になる]]></title><description><![CDATA[
 はじめに
Bun に入門した際、ついでに気になっていた Farm にも手を出してみようと思い調べてみました。
なにやら、viteよりも高速だとか…

 Farmとは
Farmは、webpackやViteのような極めて高速なRustベースのWebビルドツールです。JavaScriptやCSS、HTMLなどの各種アセットを解決・読み込み・変換し、デプロイ可能なファイルにバンドルします。

 主な特徴

 ⚡ ビルドが高速

webpackより25倍以上速い
viteより4倍以上速い

Farmの公式でベンチマークが紹介されていました。
ちなみに「Rspack」なるバンドラーもRust製で...]]></description><link>https://zenn.dev/tsuruya/articles/0e069bd3a5d2f6</link><guid isPermaLink="true">https://zenn.dev/tsuruya/articles/0e069bd3a5d2f6</guid><pubDate>Sun, 31 Aug 2025 03:38:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kd5584jv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2580%2590Farm%25E3%2580%2591%25E3%2581%258C%25E6%25B0%2597%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsuruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsuruya</dc:creator></item><item><title><![CDATA[typescriptのビルド周りのお勉強]]></title><description><![CDATA[
 モチベーション
なんとなくtypescript(backend)周りを触っているけどビルド周りをちゃんと勉強したことがないので。

 TypeScriptにおけるビルド
chatgpt回答

まずは「なぜビルドが必要か」を押さえると全体像がつかみやすいです。

TypeScript → JavaScript に変換（tsc）
モジュール解決（ESM / CommonJS の違い）
型チェックと実行ファイル生成の分離（型だけチェックして JS は触らないオプションもある）



 tsconfig.json
TypeScriptのコンパイルオプションを設定するファイル。
主要なオプショ...]]></description><link>https://zenn.dev/mkns/articles/dbdbca0f099ea1</link><guid isPermaLink="true">https://zenn.dev/mkns/articles/dbdbca0f099ea1</guid><pubDate>Sun, 31 Aug 2025 00:27:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PuFwRtCV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:typescript%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E5%2591%25A8%25E3%2582%258A%25E3%2581%25AE%25E3%2581%258A%25E5%258B%2589%25E5%25BC%25B7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:jamba%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxNWVjNDNiNWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>jamba</dc:creator></item><item><title><![CDATA[eslint-seatbelt で段階的にESLintルールを厳しくする]]></title><description><![CDATA[
 はじめに
ESLintのルールを既存のコードベースに適用する際、一度に厳格なルールを導入すると大量のエラーが発生し、チームの開発効率に影響を与えがちです。
そこでeslint-seatbeltというツールで段階的にルールを厳しくできることを知り、実際に素振りしてみました。
https://www.notion.com/ja/blog/how-we-evolved-our-code-notions-ratcheting-system-using-custom-eslint-rules

 eslint-seatbelt とは
eslint-seatbeltは、ESLintルールを段階的...]]></description><link>https://zenn.dev/tetoteto/articles/eslint-seatbelt-progressive-linting</link><guid isPermaLink="true">https://zenn.dev/tetoteto/articles/eslint-seatbelt-progressive-linting</guid><pubDate>Sat, 30 Aug 2025 23:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--294HNpcq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:eslint-seatbelt%2520%25E3%2581%25A7%25E6%25AE%25B5%25E9%259A%258E%25E7%259A%2584%25E3%2581%25ABESLint%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%258E%25B3%25E3%2581%2597%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TetoTeto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSXlIN1NhY21HVFFmR3hWQ1d2R01nX29ETVR0WU82UXJ6WGg1Z3dZOUs4VWRJPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TetoTeto</dc:creator></item><item><title><![CDATA[【フロントエンド向け】JWTの安全な保管場所とCSRF・XSS対策の技術解説]]></title><description><![CDATA[
 はじめに
Webアプリケーションで広く利用されるJWTなどの認証トークンですが、その保管場所はセキュリティを大きく左右します。この記事では、localStorageを利用する際のリスクを解説し、HttpOnly属性付きクッキーとCSRFトークンを組み合わせた、堅牢なセキュリティ対策のロジックを技術的に解説します。


 1. なぜlocalStorageは危険なのか (XSSの脅威)
localStorageへのトークン保存は実装が容易なため広く使われますが、XSS（クロスサイト・スクリプティング）攻撃に対して脆弱です。


XSS攻撃の概要: 攻撃者がウェブサイトの脆弱性を利用して...]]></description><link>https://zenn.dev/wyuma/articles/4c9ca1eedca8e9</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/4c9ca1eedca8e9</guid><pubDate>Sat, 30 Aug 2025 17:03:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XGyHHZMs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591JWT%25E3%2581%25AE%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E4%25BF%259D%25E7%25AE%25A1%25E5%25A0%25B4%25E6%2589%2580%25E3%2581%25A8CSRF%25E3%2583%25BBXSS%25E5%25AF%25BE%25E7%25AD%2596%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fanda.dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fanda.dev</dc:creator></item><item><title><![CDATA[Cloudflare WorkerのRPC Bindingをmonorepoかつ型付きでやるtips]]></title><description><![CDATA[皆さん、CloudflareでWorkerをService Bindingする時、こう思ったことはないですか？
wrangler typesで生成されたworker-configuration.d.tsにRPC Bindingの適切な型がねぇ、と。
env.HogeService.fetch()しか無い、定義した関数がintellisenseに出てこない。めんどい。私はずっとそう思っていました。
しかし7月29日にリリースされたwrangler@4.26.1にて、これが解決されました。やったぜ。

 tl;dr
wranglerのglobal option, --configを使う[1]...]]></description><link>https://zenn.dev/sev3e3e/articles/1d890fb4d1a925</link><guid isPermaLink="true">https://zenn.dev/sev3e3e/articles/1d890fb4d1a925</guid><pubDate>Sat, 30 Aug 2025 15:18:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---g1BQ6VJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Worker%25E3%2581%25AERPC%2520Binding%25E3%2582%2592monorepo%25E3%2581%258B%25E3%2581%25A4%25E5%259E%258B%25E4%25BB%2598%25E3%2581%258D%25E3%2581%25A7%25E3%2582%2584%25E3%2582%258Btips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sev3e3e%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzMzJhMzVkOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sev3e3e</dc:creator></item><item><title><![CDATA[SolanaのPlaygroundで遊ぼう]]></title><description><![CDATA[
 1. はじめに
Solanaを使ったサービスが世に多く出回っています。そこでエンジニアとして気になるのが、どうやってこういったサービスを作るのか？です。私もこの辺初心者で継続学習中の身です。いろいろ調べていく中でまずはSolanaが用意しているPlaygroundを使ってブラウザ上でいじってみるのが良さそうだということがわかりました。この記事ではPlaygroundを使って最低限のコーディングを試せたらと思います。
内容としては、Walletを作成して、WalletにSOLを入金、Walletの情報をTypeScriptで確認してみる、となります。
この記事は、下記Solana公式の...]]></description><link>https://zenn.dev/acntechjp/articles/17330bb6c8cb92</link><guid isPermaLink="true">https://zenn.dev/acntechjp/articles/17330bb6c8cb92</guid><pubDate>Sat, 30 Aug 2025 14:29:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tz_gcSE6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Solana%25E3%2581%25AEPlayground%25E3%2581%25A7%25E9%2581%258A%25E3%2581%25BC%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B5%25E3%2583%25B3%2520%2528Masanori%2520Yos...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2ZDA4MDY5ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Accenture%2520Japan%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MzkwNDBmYjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッサン (Masanori Yoshida)</dc:creator></item><item><title><![CDATA[あっ、こんなところにEffect-TSが]]></title><description><![CDATA[みなさん、先日流行っていたこの記事は読みましたか？素晴らしい記事でしたね。
エラーハンドリングをして、パフォーマンスを考慮し、保守性とテスタビリティも担保して、信頼性も踏まえたコードを書こうとすると、どうしてもドメインロジックと副作用が混ざってコードが複雑になってしま、、、いいえ、私たちにはEffectがあります。
https://effect.website/
というわけでEffectの宣伝記事です。元の記事のコードを引用していますが、それを非難する意図はなく（相当きれいなコードだと思います）、Effectで書くとこうなるよという紹介のために引用させていただきます。
元のコード
// ...]]></description><link>https://zenn.dev/2_daiki_ando/articles/b9bdb8195e1c73</link><guid isPermaLink="true">https://zenn.dev/2_daiki_ando/articles/b9bdb8195e1c73</guid><pubDate>Sat, 30 Aug 2025 14:03:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ce1m5pOv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2582%25E3%2581%25A3%25E3%2580%2581%25E3%2581%2593%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25A8%25E3%2581%2593%25E3%2582%258D%25E3%2581%25ABEffect-TS%25E3%2581%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ando%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUVEME9QU3pVcHpaQlY0VzMzWXRsZkFMTEdoR0lzOVNBaVJRaG05YkhRVVFJbWtnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ando</dc:creator></item><item><title><![CDATA[tree-sitterを使ってコードをインデックスする際のチャンクを自動で最適化する]]></title><description><![CDATA[前回に引き続き、最近書いているOSSの話です。
前回↓
https://zenn.dev/ushironoko/articles/7001411d4dca41

 コードをインデックスする際の問題点
普通にコンテンツを読み込んでチャンクに分割する時は、指定されたチャンクサイズとチャンクオーバーラップの値を見て、単純な文字数で分割されます。この際、オーバーラップに指定した数値の分だけ隣り合うチャンクは文字が重複するように分割されます。
const chunks = chunkText(text, {
  size: 50, // characters per chunk
  overlap...]]></description><link>https://zenn.dev/ushironoko/articles/dc0e3cf6775951</link><guid isPermaLink="true">https://zenn.dev/ushironoko/articles/dc0e3cf6775951</guid><pubDate>Sat, 30 Aug 2025 11:45:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---vZbUUds--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tree-sitter%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2587%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AE%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ushironoko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2czSUk4bU84NDZtd1FFeVFhUXVDWVVQd1lFam9kMWZTOUNQNWRVdFE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ushironoko</dc:creator></item><item><title><![CDATA[Mastra/Next.jsで作るモデレータAIが治安維持するSNS]]></title><description><![CDATA[!
この記事は人間が書き、記事の校正に生成AIを使用しています。


 はじめに
先日社内ハッカソンがありまして、
そこでAIエージェントを組み込んだSNSアプリを作ってみたので紹介します。
なおハッカソンへは個人参加で、成果物の提出までに費やした時間は、
インフラの設定とかも含めて開発に9時間、ドキュメントや動画作成に1時間くらいです。

 成果物

 リポジトリ
https://github.com/n-yokomachi/failnet_app

 このアプリについて
作ったものはこんな感じのSNS風Webアプリです。
「失敗談ややらかし話を共有することで学びに変えていこう」という...]]></description><link>https://zenn.dev/yokomachi/articles/20250830_mastra_moderator_ai_agent</link><guid isPermaLink="true">https://zenn.dev/yokomachi/articles/20250830_mastra_moderator_ai_agent</guid><pubDate>Sat, 30 Aug 2025 10:39:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OVsXqD3c--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mastra%252FNext.js%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BFAI%25E3%2581%258C%25E6%25B2%25BB%25E5%25AE%2589%25E7%25B6%25AD%25E6%258C%2581%25E3%2581%2599%25E3%2582%258BSNS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yoko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNGQ5NzI1ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yoko</dc:creator></item><item><title><![CDATA[Vite + TypeScript で作る Chrome 拡張（MV3）Step3]]></title><description><![CDATA[
 chrome.storage の“汎用ラッパ”を作る
Step3 ではデータ保存（chrome.storage）が汎用的に使用できるモジュールを追加していきます。
Options に簡単なフォームを用意して greeting と age を保存・読込・削除できるようします。
また、Popup で保存済みの値を表示し、変更を自動反映（watch）されるようにします。
これで基本的な storage 操作がマスター出来るようになる想定です。

 1. 汎用ストレージラッパを追加
sync、local、session それぞれの storage の操作を汎用的に行えるラッパを作成します。
...]]></description><link>https://zenn.dev/igusaya/articles/347c565dfd7a02</link><guid isPermaLink="true">https://zenn.dev/igusaya/articles/347c565dfd7a02</guid><pubDate>Sat, 30 Aug 2025 10:24:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6UGNnj3N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vite%2520%252B%2520TypeScript%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520Chrome%2520%25E6%258B%25A1%25E5%25BC%25B5%25EF%25BC%2588MV3%25EF%25BC%2589Step3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25BA%2595%25E8%258D%2589%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0Zm1YM2hHSGpEWFJmZEhCaS1VcXR2N1pQTEdBQzg4bDc1Z0xCdjZFVG11Z1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>井草屋</dc:creator></item><item><title><![CDATA[ブラウザだけで「録音して保存する」]]></title><description><![CDATA[個人開発でブラウザだけで完結する録音→保存が必要になったので、その実装をまとめます。


 方針（結論）


getUserMedia でマイク権限＆音声ストリーム取得

MediaRecorder で録音開始/停止と Blob 生成

URL.createObjectURL で即時プレビュー／ダウンロード




 最小コード
// 1) マイクからストリーム取得（ヒント付き）
const stream = await navigator.mediaDevices.getUserMedia({
  audio: { echoCancellation: true, noiseSuppre...]]></description><link>https://zenn.dev/tatsuki_dev06/articles/6a7575d7c33df2</link><guid isPermaLink="true">https://zenn.dev/tatsuki_dev06/articles/6a7575d7c33df2</guid><pubDate>Sat, 30 Aug 2025 08:36:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s-YZ1sNk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2580%258C%25E9%258C%25B2%25E9%259F%25B3%25E3%2581%2597%25E3%2581%25A6%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2599%25E3%2582%258B%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tats%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UyNWU1NGMxYmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tats</dc:creator></item><item><title><![CDATA[React Hook Formを勉強したばかりの人がやりがちな誤った実装パターン3選]]></title><description><![CDATA[
 はじめに
私自身がReactを勉強したてで、バリデーション実装のためにReact Hook Formを勉強した際に経験した誤った実装パターンについて紹介します。
誤った実装パターンで覚えてしまうと読みにくいコードになったり、チーム開発で他のエンジニアに迷惑がかかる可能性があります。実際に私の現場でも、誤った実装が積み重なり大規模なリファクタが必要になったことがありました

 React Hook Formとは
Reactでフォームを扱う際、バリデーションや入力管理を楽にしてくれるライブラリが React Hook Formです。公式ドキュメントにも「パフォーマンスが良い」「記述量が減...]]></description><link>https://zenn.dev/nekonoko2323/articles/02e2f8575e5987</link><guid isPermaLink="true">https://zenn.dev/nekonoko2323/articles/02e2f8575e5987</guid><pubDate>Sat, 30 Aug 2025 07:35:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V5q98u7D--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Hook%2520Form%25E3%2582%2592%25E5%258B%2589%25E5%25BC%25B7%25E3%2581%2597%25E3%2581%259F%25E3%2581%25B0%25E3%2581%258B%25E3%2582%258A%25E3%2581%25AE%25E4%25BA%25BA%25E3%2581%258C%25E3%2582%2584%25E3%2582%258A%25E3%2581%258C%25E3%2581%25A1%25E3%2581%25AA%25E8%25AA%25A4%25E3%2581%25A3%25E3%2581%259F%25E5%25AE%259F%25E8%25A3%2585%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B33%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AD%25E3%2581%2593%25E3%2581%25AE%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEdQNTAyVHBEQV9BbXBmOXUyTDk1aUQ0aHJzNFBnTkxCSTQtMEtabE82LW1CemRjTT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ねこのこ</dc:creator></item><item><title><![CDATA[ZodやValibotで書いたスキーマの型のテストを書く(Vitestで)]]></title><description><![CDATA[ZodやValibotは、unknownなデータを検証した上でTypeScriptの型をつけてくれる便利なライブラリですが、複雑なスキーマを書いてるとそのスキーマからどういう型になるのかテストを書きたくなりませんか? 私はなります。
例えば次のようなValibotのスキーマを書くと、InferInputでそのスキーマの型をとり出す事ができます。
import * as v from 'valibot';

const schema = v.object({
  name: v.string(),
});

// スキーマから { name: string }　という型を取り出せる
typ...]]></description><link>https://zenn.dev/relayhub/articles/0faf0ab523a841</link><guid isPermaLink="true">https://zenn.dev/relayhub/articles/0faf0ab523a841</guid><pubDate>Sat, 30 Aug 2025 07:22:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pO45qg8r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25E3%2582%2584Valibot%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2528Vitest%25E3%2581%25A7%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:anatoo%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiMGEyM2I2ZmYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:RelayHub%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o2SlMxT0IydDYtVXJEdi0wM1VCUkhZbWdDUFM2UGxpQ1JQVVI1PXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>anatoo</dc:creator></item><item><title><![CDATA[「作りたいものがない」を脱出：生成AI×無料APIを用いて2時間でミニアプリを作る]]></title><description><![CDATA[エンジニアとして向上心は持っていて場数を踏みたいけど、作りたいものがなくて手を動かして何かを実装する機会に恵まれないのは、エンジニアあるあるの1つなのではないでしょうか？
何を作るか全く決めてない状態から生成AI(ChatGPT5)と対話して1つの成果物を作るまでに実際に辿ったフローをかいつまんで記事にしてみたいと思います。

 導入
私の現在の仕事は、Next.jsを使ったフロントエンドの実装なので、
それを使って何かを実装できればと考えました。
そこで、最初はこんな問いを生成AIに投げてみました。

私は現在フロントエンドエンジニアとして働いていて、Next.jsを普段は触っています...]]></description><link>https://zenn.dev/ohimusdev46301/articles/f352c403a65987</link><guid isPermaLink="true">https://zenn.dev/ohimusdev46301/articles/f352c403a65987</guid><pubDate>Sat, 30 Aug 2025 06:09:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oBFKmF47--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E3%2582%2582%25E3%2581%25AE%25E3%2581%258C%25E3%2581%25AA%25E3%2581%2584%25E3%2580%258D%25E3%2582%2592%25E8%2584%25B1%25E5%2587%25BA%25EF%25BC%259A%25E7%2594%259F%25E6%2588%2590AI%25C3%2597%25E7%2584%25A1%25E6%2596%2599API%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%25A62%25E6%2599%2582%25E9%2596%2593%25E3%2581%25A7%25E3%2583%259F%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Wataru%2520Takiguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdkOTBhM2EyYTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Wataru Takiguchi</dc:creator></item><item><title><![CDATA[react-routerでデータ取得場所に迷ったときのメモ]]></title><description><![CDATA[!
この記事は筆者自身が開発中のメモ書きをChatGPTに構成してもらったものを少し調整した記事になります。一部文章に違和感がある部分はご了承ください🙇‍♂️


 はじめに
個人開発でメモアプリを作っていて、「編集フォームの初期値（既存ノート）をどこで取得するか」で迷走しました。最初はページ側で全部やっていたのですが、React Router v7 の loader と Suspense + &lt;Await&gt; に寄せたら気持ちよく落ち着いた、という記録です。

 最初の実装
最初はページに入ってから useParams で id を取り、ページ内のカスタムフックで fetch...]]></description><link>https://zenn.dev/tamon_kondo/articles/9ff454133cdfa5</link><guid isPermaLink="true">https://zenn.dev/tamon_kondo/articles/9ff454133cdfa5</guid><pubDate>Sat, 30 Aug 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Hb05NcGa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:react-router%25E3%2581%25A7%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%258F%2596%25E5%25BE%2597%25E5%25A0%25B4%25E6%2589%2580%25E3%2581%25AB%25E8%25BF%25B7%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t.k%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k1WWoxNXZlTDl0VE9pd0p0VHVZSXUyNENJMkJuOG1MYkhNcjFvN2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t.k</dc:creator></item></channel></rss>