<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 18 Apr 2025 12:04:14 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RustでFFmpegフィルターを簡単に実装：音声・動画処理をシンプルにする新手法]]></title><description><![CDATA[

 はじめに

FFmpegは、動画や音声のエンコード、デコード、トランスコード、フィルター処理に広く使われる強力なツールです。しかし、RustプロジェクトでFFmpegのC APIを直接使うと、メモリ管理の複雑さやセキュリティリスクに直面することがあります。特にカスタムフィルターを実装する場合、従来の方法ではCコードを書き、FFmpegの内部構造を深く理解する必要があり、多くの開発者にとってハードルが高いです。Rustのメモリ安全性とシンプルさを利用して、ez-ffmpegライブラリを使えば、純粋なRustコードでFFmpegのカスタムフィルターを実装でき、開発の難易度を大幅に下げる...]]></description><link>https://zenn.dev/yeauty/articles/dd2361213ffc09</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/dd2361213ffc09</guid><pubDate>Fri, 18 Apr 2025 03:00:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E4OYiidZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7FFmpeg%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25AE%259F%25E8%25A3%2585%25EF%25BC%259A%25E9%259F%25B3%25E5%25A3%25B0%25E3%2583%25BB%25E5%258B%2595%25E7%2594%25BB%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B0%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[Rustの並行処理：非同期で陥りがちな落とし穴]]></title><description><![CDATA[
Rust での非同期実行には一定の複雑さがあり、プログラミング中にいくつかのミスを犯しやすいです。この記事では、Rust の非同期ランタイムでよくある落とし穴について紹介します。

 意図しない同期ブロッキング
非同期コードの中で意図せず同期ブロッキング操作を行うことは、非同期プログラミングにおける重要な落とし穴の一つです。これは非同期プログラミングの利点を損ない、パフォーマンスのボトルネックとなります。以下はよくあるシナリオです：

非同期関数内でブロッキング I/O 操作を使う：例えば、async fn内で標準のstd::fs::File::openやstd::net::TcpSt...]]></description><link>https://zenn.dev/leap_adam/articles/71a0792375b352</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/71a0792375b352</guid><pubDate>Thu, 17 Apr 2025 18:45:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--n_ZIkrbW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25EF%25BC%259A%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2581%25A7%25E9%2599%25A5%25E3%2582%258A%25E3%2581%258C%25E3%2581%25A1%25E3%2581%25AA%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Voisona talk等で出力した音声ファイルのタイトルをセリフにするツールをRustで書いた話]]></title><description><![CDATA[voisona Talk等で出力された音声ファイルの名前を、同名のセリフを含むテキストファイルを参照して変換するツールをRustで書いてみたのでそれの紹介です。ほとんどREADMEのコピペかも。
ソースコードは今見ても綺麗とは言えないですが動作はちゃんとしてます。
https://github.com/Uliboooo/track2line

 GUIもあります
GUI版を作ってみました
https://github.com/Uliboooo/track2line_gui
まだエラーハンドリングもしてないですが、一応動きます。

 Lates Release
https://github...]]></description><link>https://zenn.dev/uliboooo/articles/5a1cf3772bf9c0</link><guid isPermaLink="true">https://zenn.dev/uliboooo/articles/5a1cf3772bf9c0</guid><pubDate>Thu, 17 Apr 2025 02:20:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mzsOlmSu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Voisona%2520talk%25E7%25AD%2589%25E3%2581%25A7%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2597%25E3%2581%259F%25E9%259F%25B3%25E5%25A3%25B0%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2588%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25BB%25E3%2583%25AA%25E3%2583%2595%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592Rust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2582%258A%25E3%2581%25BC%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MTFjYWRhM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うりぼう</dc:creator></item><item><title><![CDATA[作って学ぶブラウザの仕組み　第３章]]></title><description><![CDATA[
 HTTP とは
いろいろ書いてあるが、みなさんわかると思うのでスキップ。。。

 HTTPの構成
HTTPメッセージは大きく３つの要素に分けることができる。

スタートライン
ヘッダ
ボディ

スタートラインはリクエストの場合はリクエストライン、レスポンスの場合はステータスラインと呼ばれる。
リクエストラインはよくみられる
GET /index.html HTTP/1.1
レスポンスラインは
HTTP/1.1 200 OK
ヘッダはリクエストとレスポンスの２行目以降、改行だけの行までの部分。
HTTP/1.1からは１つのIPアドレスとポート番号で複数のWebサイトを運用しているときの...]]></description><link>https://zenn.dev/greenteabiscuit/articles/8d889cedc7da76</link><guid isPermaLink="true">https://zenn.dev/greenteabiscuit/articles/8d889cedc7da76</guid><pubDate>Wed, 16 Apr 2025 12:54:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t1l8q3pH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2580%2580%25E7%25AC%25AC%25EF%25BC%2593%25E7%25AB%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:greenteabiscuit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZy5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>greenteabiscuit</dc:creator></item><item><title><![CDATA[3分でマスター！RustでFFmpegを使って動画解像度を簡単に変更する方法]]></title><description><![CDATA[

 はじめに

動画処理の現場では、解像度の調整がどうしても必要な場面がたくさんありますよね。たとえば、スマホやタブレット、テレビなど、さまざまなデバイスに動画を合わせたり、ストレージやネットワークの負担を減らすために動画サイズを小さくしたり…。でも、伝統的なFFmpegのコマンドラインツールって、確かにすごい力を持っているけれど、パラメータが複雑でちょっと扱いにくいと思いませんか？特にRustが大好きな開発者の皆さんなら、プロジェクトでコマンドラインを直接呼び出すのは面倒だし、エラーも出やすいと感じているはず。そんなお悩みを、この記事で一緒にスッキリ解決しましょう！Rustを使って、...]]></description><link>https://zenn.dev/yeauty/articles/e3780271e37a06</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/e3780271e37a06</guid><pubDate>Wed, 16 Apr 2025 02:49:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AvvFx6Kp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:3%25E5%2588%2586%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%25EF%25BC%2581Rust%25E3%2581%25A7FFmpeg%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E5%258B%2595%25E7%2594%25BB%25E8%25A7%25A3%25E5%2583%258F%25E5%25BA%25A6%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[#88　Getting Started with Writing a Smart Contract on Solana]]></title><description><![CDATA[
 Introduction
Solana, known for its high throughput and low latency, is rapidly becoming a preferred blockchain for decentralized applications (dApps). Writing a smart contract on Solana is both a rewarding and challenging experience due to its unique programming model. This blog will guide you ...]]></description><link>https://zenn.dev/nxted_sapporo/articles/f1a08a3ac788ed</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/f1a08a3ac788ed</guid><pubDate>Tue, 15 Apr 2025 12:23:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nWvHR1Bl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252388%25E3%2580%2580Getting%2520Started%2520with%2520Writing%2520a%2520Smart%2520Contract%2520on%2520Solana%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[#81 Exploring Solana Actions]]></title><description><![CDATA[
 Introduction
Recently, Solana announced the Solana Actions and Blinks. These new features promise to enhance the user experience and broaden the capabilities of decentralized applications (dApps) on the Solana network. In this blog, we’ll delve into what Actions and Blinks are, how they work.

...]]></description><link>https://zenn.dev/nxted_sapporo/articles/38a6f92750215d</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/38a6f92750215d</guid><pubDate>Tue, 15 Apr 2025 12:08:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VfzsbTGc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%252381%2520Exploring%2520Solana%2520Actions%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[ゼロから始めるRust：FFmpegとOpenGLで作る本格動画エフェクト]]></title><description><![CDATA[

 はじめに：動画エフェクト開発の悩み、あなたはいくつ当てはまりますか？

動画エフェクトは、今や私たちの身近な存在です。ショートビデオアプリのオシャレなフィルターや美顔機能、ライブ配信でのリアルタイム美顔、映画のポストプロダクションで見るシネマティックなカラー調整、そしてAIが作り出すダイナミックなエフェクトまで！個人開発者の方も、チームで開発されている方も、ユーザーの心をつかむ強力な武器として動画エフェクトを活用しているのではないでしょうか。でも、いざ開発を始めると、こんな「壁」にぶつかってしまうこと、ありませんか？


シーン1：大量処理の壁
何百もの動画に自動で背景をぼかしたい...]]></description><link>https://zenn.dev/yeauty/articles/6bf78c97e5c24c</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/6bf78c97e5c24c</guid><pubDate>Tue, 15 Apr 2025 09:31:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FppzAvpf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BRust%25EF%25BC%259AFFmpeg%25E3%2581%25A8OpenGL%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E6%259C%25AC%25E6%25A0%25BC%25E5%258B%2595%25E7%2594%25BB%25E3%2582%25A8%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[ABC401:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 401のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc401/tasks/abc401_a
解説
S の値が 200 以上 299 以下であれば、 Success を出力し、それ以外の場合は Failure を出力します。
コード

abc401a.rs
use proconio::input;

fn main() {
    // 入力
    input! {
        s: usize,
    }

    // 出力
    prin...]]></description><link>https://zenn.dev/nakst_hide/articles/5f069316da3e2a</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/5f069316da3e2a</guid><pubDate>Sun, 13 Apr 2025 11:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---9eotj5d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC401%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rust入門者は非同期Rustをやらないでください]]></title><description><![CDATA[
 はじめに
すいません、連日の記事があったため少し煽りっぽいタイトルにしてしまいました。
平常時の感覚だったら、「Rustに入門するなら、同期Rustから始めるのがおすすめ」 とかにしてた記事だと思います。
この記事で主張したいことは以下です。

Rustは難しい
Rustに入門するときの題材に、"Web Backend"や"Wasmでブラウザで動く何か"などの非同期Rustで無ければ達成できない題材を採用している人はそれがRust初級者への道を阻んでいる可能性がある
過去に非同期Rustで入門した人を否定する記事ではない
Rustに入門することが目的なら、非非同期Rustから始めた方...]]></description><link>https://zenn.dev/higumachan/articles/b2d7b5f1e77c50</link><guid isPermaLink="true">https://zenn.dev/higumachan/articles/b2d7b5f1e77c50</guid><pubDate>Sun, 13 Apr 2025 09:38:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hZKfd8N8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E5%2585%25A5%25E9%2596%2580%25E8%2580%2585%25E3%2581%25AF%25E9%259D%259E%25E5%2590%258C%25E6%259C%259FRust%25E3%2582%2592%25E3%2582%2584%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A7%25E3%2581%258F%25E3%2581%25A0%25E3%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:higumachan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2h6aERNREQ5RmE1ZEpPaDRGUTNWellUb2xsaVRlSFdqMXpkQ0VBPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>higumachan</dc:creator></item><item><title><![CDATA[3分で学ぶ動画編集 | RustでFFmpegをエレガントに統合する方法]]></title><description><![CDATA[
 はじめに

現代のショートビデオ全盛期において、効率的な動画編集はコンテンツクリエイターや開発者にとって必須のスキルとなっています。動画の冒頭や終わりをカットしたり、印象的なシーンを切り出したり、GIFを作成したり、広告を取り除いたりと、編集が必要な場面は数え切れません。
しかし、大量の動画を一括で処理するのは簡単なことではありません。よくある課題を挙げてみましょう：


手動での編集：時間と労力がかかり、効率が悪い。

プロ向けソフト（PremiereやAfter Effectsなど）：高度な編集には最適ですが、自動化や一括処理には不向き。

FFmpegのコマンドライン：非常に強...]]></description><link>https://zenn.dev/yeauty/articles/2357aa70f4fe21</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/2357aa70f4fe21</guid><pubDate>Sun, 13 Apr 2025 08:32:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l3mTL_3_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:3%25E5%2588%2586%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E5%258B%2595%25E7%2594%25BB%25E7%25B7%25A8%25E9%259B%2586%2520%257C%2520Rust%25E3%2581%25A7FFmpeg%25E3%2582%2592%25E3%2582%25A8%25E3%2583%25AC%25E3%2582%25AC%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E7%25B5%25B1%25E5%2590%2588%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[RustのResult::expect()の引数は、仮定法過去で考えるとしっくりくる]]></title><description><![CDATA[RustのResult&lt;T&gt;型は関数の戻り値の型としてよく使われます。この型のメソッドであるexpect()の引数は、「エラーメッセージ」と解説されることがあります。しかしそれは混乱を招く考え方です。
理解のためにはこの引数を仮定法過去のメッセージと考えた方がしっくりします。
I wish I could open a file. 
→ ファイルを開くことができたらなぁ（現実には開くことができない）。

 そもそもライブラリの文書にはexpect()に期待する動作を書けとある
expect()の引数には何を渡すべきでしょうか。こういう時にはドキュメントを参照すべきです。
Ru...]]></description><link>https://zenn.dev/seiichihorie/articles/20250413-rust-expect</link><guid isPermaLink="true">https://zenn.dev/seiichihorie/articles/20250413-rust-expect</guid><pubDate>Sun, 13 Apr 2025 05:31:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3xyI_-rc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEResult%253A%253Aexpect%2528%2529%25E3%2581%25AE%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AF%25E3%2580%2581%25E4%25BB%25AE%25E5%25AE%259A%25E6%25B3%2595%25E9%2581%258E%25E5%258E%25BB%25E3%2581%25A7%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%258F%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25A0%2580%25E6%25B1%259F%25E8%25AA%25A0%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3hveFBEMG4wNVZyT182d0hPbUpld1BTOTdVOE1Hdzg0R09IY1A5Tm1ETmk0N1V0QWZTQT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>堀江誠一</dc:creator></item><item><title><![CDATA[RustでOnnxモデルを読み込んで物体検出してみる]]></title><description><![CDATA[
 概要
前回は、tractを使ってonnxモデルを呼び出して、クラスカテゴリなどのメタデータを取り出しました。
https://zenn.dev/bamboo_nova/articles/b9c4e880083662
今回は、実際にonnxモデルを読み込んで、対象の画像に対して物体を検出するところまで実施してみます。
使用したコードは下記のリポジトリに公開済みです。
https://github.com/bamboo-nova/onnx-calling-rs

 実装
主に必要な実装は、下記の三種類です。

画像の前処理
Bboxの設計
YOLOで推論する処理


 onnxモデルを作...]]></description><link>https://zenn.dev/bamboo_nova/articles/fac77f24a29194</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/fac77f24a29194</guid><pubDate>Sun, 13 Apr 2025 02:11:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--d892-h_l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Onnx%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2593%25E3%2581%25A7%25E7%2589%25A9%25E4%25BD%2593%25E6%25A4%259C%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[RustとFFmpegで動画ウォーターマークを追加：技術解説と実践ガイド]]></title><description><![CDATA[

 はじめに

ショートビデオ、ライブ配信、映画制作などの分野では、動画ウォーターマークは著作権保護、ブランド認知度の向上、または法令遵守のために一般的に使用されています。しかし、開発者がウォーターマークを追加する際に直面する課題は以下の通りです：


手動処理の効率の低さ：Photoshopなどの画像編集ソフトで一つずつウォーターマークを追加するのは、大量のタスクに対応できません。

FFmpegコマンドラインの複雑さ：引数が多く、デバッグが難しいため、自動化プロセスに統合しづらい。

FFmpeg C APIの直接呼び出し：メモリ管理や型変換が複雑で、エラーが発生しやすく、開発効率...]]></description><link>https://zenn.dev/yeauty/articles/fe002c4c0f179d</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/fe002c4c0f179d</guid><pubDate>Sat, 12 Apr 2025 17:22:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0FfmFcZu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A8FFmpeg%25E3%2581%25A7%25E5%258B%2595%25E7%2594%25BB%25E3%2582%25A6%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25EF%25BC%259A%25E6%258A%2580%25E8%25A1%2593%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%25A8%25E5%25AE%259F%25E8%25B7%25B5%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[Bevyでテトリスを作る]]></title><description><![CDATA[この記事では、Bevyを使ったテトリスの作り方について説明しています。
テトリスとは、7種類のテトリミノがフィールド上部からランダムに1種類ずつ落下してきて、
うまいこと10x20のフィールドの横のラインを揃えるとブロックが消えてポイントが加算される。
これを繰り返して高いスコアを目指す落ちものパズルゲームです。
今回実装したテトリスは以下のようなものです。

ここでのテトリスでは、本当に最低限の機能を持つゲームとなっています。
なのでゲーム性などを持たせようとするなら追加の機能が必要となるでしょう。

 ソースコード
ゲーム制作に使用したソースコードは以下のURLから入手することができ...]]></description><link>https://zenn.dev/ittoku_ky73/articles/bevy-tetris-game</link><guid isPermaLink="true">https://zenn.dev/ittoku_ky73/articles/bevy-tetris-game</guid><pubDate>Sat, 12 Apr 2025 10:46:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8nHUQA9E--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Bevy%25E3%2581%25A7%25E3%2583%2586%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ittoku%25EF%25BC%2588%25E3%2581%2584%25E3%2581%25A3%25E3%2581%25A8%25E3%2581%258F%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4NTc4ZWViYjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ittoku（いっとく）</dc:creator></item><item><title><![CDATA[Rust で ADBC 経由で DuckDB にクエリを投げる]]></title><description><![CDATA[Observable Plot のドキュメントを読んでいると、Apache Arrow 使えるよ、という記述がありました。「ということは、データベースからフロントエンドまで変換なしでデータ渡したりできる...？」とふと思いました。それについて調べたことのメモ。

Plot.lineY(linedata, {
  x: (d) =&gt; d.hour,
  y: (d) =&gt; d.value,
  stroke: (d) =&gt; d.sensor
}).plot()

For greater efficiency, Plot also supports columnar dat...]]></description><link>https://zenn.dev/yutannihilation/articles/48fec15ddc565d</link><guid isPermaLink="true">https://zenn.dev/yutannihilation/articles/48fec15ddc565d</guid><pubDate>Sat, 12 Apr 2025 09:54:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HraEYfQd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520ADBC%2520%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7%2520DuckDB%2520%25E3%2581%25AB%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%2592%25E6%258A%2595%25E3%2581%2592%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yutannihilation%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[3分で学ぶオーディオ・ビデオ情報取得 | RustでFFmpegをエレガントに統合する]]></title><description><![CDATA[
 はじめに

オーディオ・ビデオ処理の世界では、メディアファイルの詳細情報（再生時間、フォーマット、メタデータ、オーディオ・ビデオストリームのエンコードパラメータなど）を取得することがよくあります。これらの情報は、メディア管理、トランスコードのスケジューリング、再生制御などのシーンで不可欠です。
しかし、FFmpegのコマンドラインツールやネイティブAPIを直接使用すると、以下のような課題が生じます：


コマンドラインツールの複雑さ：FFmpegのコマンドライン引数は非常に多く、使い方を間違えるとエラーが発生します。例えば、スペースを含むファイル名を扱う場合、適切なエスケープや引用符...]]></description><link>https://zenn.dev/yeauty/articles/a2b3f42bf48882</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/a2b3f42bf48882</guid><pubDate>Sat, 12 Apr 2025 04:09:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--A3LhJXYV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:3%25E5%2588%2586%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AA%25E3%2583%25BB%25E3%2583%2593%25E3%2583%2587%25E3%2582%25AA%25E6%2583%2585%25E5%25A0%25B1%25E5%258F%2596%25E5%25BE%2597%2520%257C%2520Rust%25E3%2581%25A7FFmpeg%25E3%2582%2592%25E3%2582%25A8%25E3%2583%25AC%25E3%2582%25AC%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E7%25B5%25B1%25E5%2590%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[FFmpegコマンドラインからRustへ：多シーン実践ガイド]]></title><description><![CDATA[
FFmpegは、動画編集やフォーマット変換など多岐にわたる用途で使われる強力なマルチメディア処理ツールです。しかし、FFmpegのコマンドラインインターフェース（CLI）を直接使う際、次のような課題に直面することがあります：


コマンドの複雑さ
FFmpegのコマンドライン引数は数が多く、初心者には覚えるのが大変です。設定を間違えるとデバッグが難しくなることも。

Rustとの統合の難しさ
Rustのようなモダンなプログラミング言語でFFmpegのC言語APIを直接呼び出す場合、メモリ管理や安全性が複雑になり、メモリリークや不正アクセスのリスクが伴います。

こうした問題を解決するた...]]></description><link>https://zenn.dev/yeauty/articles/34280f10463a54</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/34280f10463a54</guid><pubDate>Thu, 10 Apr 2025 02:14:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sO-Z0uk4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:FFmpeg%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%258B%25E3%2582%2589Rust%25E3%2581%25B8%25EF%25BC%259A%25E5%25A4%259A%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%25B3%25E5%25AE%259F%25E8%25B7%25B5%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[Rustの所有権の理解について適当に書きたい]]></title><description><![CDATA[!
この記事はRust分かる人が分かりやすく理解を解説する記事ではなく、分からない人が分からないなりに分かろうとした結果について話し合いたいという趣旨の記事です
Rust習得者からすれば当たり前の内容や、何言ってんだお前みたいな内容が含まれる可能性がありますが、批判ではなく意見を貰えると嬉しいです

どうやらRustの所有権の難しさというか、ハードルの高さがまた話題になってるっぽいので、前から温めておいた話題でひとつ記事を書きたいなと
自分はなにかについて学習する時、全体像を抽象化、把握しないと思考がまとまらないタイプの人間なのですが、そういう意味でRustはかなり難しい言語であると感じ...]]></description><link>https://zenn.dev/tosirukun/articles/6cc639a3b2c1ce</link><guid isPermaLink="true">https://zenn.dev/tosirukun/articles/6cc639a3b2c1ce</guid><pubDate>Wed, 09 Apr 2025 23:20:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XmxS-tGR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E9%2581%25A9%25E5%25BD%2593%25E3%2581%25AB%25E6%259B%25B8%25E3%2581%258D%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Titose%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyNzAyYjM3NTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Titose</dc:creator></item><item><title><![CDATA[TypeScript以外が嫌いです]]></title><description><![CDATA[
 TypeScript以外が嫌いです
こんにちは、TypeScript原理主義者のTakoです。今日は私がなぜTypeScript以外の言語が心の底から嫌いなのかをお話しします。

 はじめに
みなさん、世の中にはプログラミング言語がたくさんありますよね。Java、Python、JavaScript、Ruby、Go...。でも、私にとってそれらは全て「TypeScriptではない言語」というカテゴリに分類されます。つまり、使う価値のない言語です。

 型がないなんて、人生がないようなもの
JavaScript？あんなの型がなくて何が楽しいんですか？undefined is not a ...]]></description><link>https://zenn.dev/takoserver/articles/7a624e38285b16</link><guid isPermaLink="true">https://zenn.dev/takoserver/articles/7a624e38285b16</guid><pubDate>Wed, 09 Apr 2025 13:43:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOOAg-F6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%258C%25E5%25AB%258C%25E3%2581%2584%25E3%2581%25A7%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmNTgyM2RjZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たこ</dc:creator></item></channel></rss>