<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 27 Feb 2025 00:43:32 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[VSCodeでRustの不要なインポートを削除する]]></title><description><![CDATA[
 TL;DR

インポート文全体を選択する

Cmd + . (macOS) または Ctrl + . (Windows) を押す

Remove the unused import を選択する

ファイルセーブ時に自動でやる方法があったら教えてください
]]></description><link>https://zenn.dev/local/articles/63cb3e920547a8</link><guid isPermaLink="true">https://zenn.dev/local/articles/63cb3e920547a8</guid><pubDate>Wed, 26 Feb 2025 19:57:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gA6eMw5l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VSCode%25E3%2581%25A7Rust%25E3%2581%25AE%25E4%25B8%258D%25E8%25A6%2581%25E3%2581%25AA%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E5%2589%258A%25E9%2599%25A4%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Catfish%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzOGQ5MDdiN2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Catfish</dc:creator></item><item><title><![CDATA[Leptos の `<Show/>` コンポーネントを自分で実装しようとしたら地味に手強かった]]></title><description><![CDATA[こんにちは。Fairy Devices株式会社 となんらかの関わりがある nogiro (Twitter (現 Twitter): @nogiro_iota) です。
フロントエンドも Rust で書きたいなという欲求があるので、個人的に Leptos Book を読んでいます。コンポーネントにコンポーネントを渡す章 を読んで [1]、前の方の 制御フローを定義する章 で出てきた &lt;Show/&gt; コンポーネント [2] を自分で実装できそうだなと思ったら、ちょっとだけ苦戦したので紹介します。
最終的なソースコード
コメントのある行の ViewFn が調べないと実装できなかった...]]></description><link>https://zenn.dev/fairydevices/articles/08429899922072</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/08429899922072</guid><pubDate>Wed, 26 Feb 2025 09:01:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Sa4_IWqD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Leptos%2520%25E3%2581%25AE%2520%2560%253CShow%252F%253E%2560%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%2588%2586%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E5%259C%25B0%25E5%2591%25B3%25E3%2581%25AB%25E6%2589%258B%25E5%25BC%25B7%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:nogiro%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NGU1YjkxNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nogiro</dc:creator></item><item><title><![CDATA[RustでRSAの素因数を解読する]]></title><description><![CDATA[
 RSA暗号
RSA（Rivest-Shamir-Adleman）暗号[1]は、公開鍵暗号方式[2]の一つで、データの暗号化と署名に使用されます。この方式は、ロナルド・リベスト[3][4]、アディ・シャミア[5]、レオナード・アデルマン[6]によって1977年に「A Method for Obtaining Digital Signatures and Public-Key Cryptosystems[7]」という論文として発表されました。RSAは、公開鍵と秘密鍵をキーペアとして、任意のデータを暗号化・復号化します。
RSAは、公開鍵と秘密鍵をキーペアとして、データの暗号化と復号化、デ...]]></description><link>https://zenn.dev/kkent030315/articles/9432b2e74bc7cc</link><guid isPermaLink="true">https://zenn.dev/kkent030315/articles/9432b2e74bc7cc</guid><pubDate>Wed, 26 Feb 2025 04:05:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Tomdm8Bi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7RSA%25E3%2581%25AE%25E7%25B4%25A0%25E5%259B%25A0%25E6%2595%25B0%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AD%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkent030315%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0NTk2NTRjZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkent030315</dc:creator></item><item><title><![CDATA[Rust 100 % のモノリポ Web アプリを作りたい！(PostgreSQL初期設定編)]]></title><description><![CDATA[こんばんにちは❗️さらに加速していきます．はやく getting started したいので．
今回行うのは以下画像の 5. となります．

はやく 6. 以降を行いたくて記事書いてる所ある．

まずは起動前にユーザーやデータベースを作成する必要があると思ったのでサーバー起動の項は飛ばしました．

とりあえずここからは PostgreSQL 特有の内容が続くのでスクショ貼った後内容を説明していきます．






ハアハア……貼り終わったのでまとめていきます．
まずデータベースを作ろうとしてエラーを吐きました．
このエラーがどういう意味を持つかと言うと，

ユーザーがいないのでサーバーに...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-22</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-22</guid><pubDate>Tue, 25 Feb 2025 19:01:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6p1cSHID--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520100%2520%2525%2520%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AA%25E3%2583%259D%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528PostgreSQL%25E5%2588%259D%25E6%259C%259F%25E8%25A8%25AD%25E5%25AE%259A%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[Rust 100 % のモノリポ Web アプリを作りたい！(ディレクトリ構築とPostgreSQLインストール編)]]></title><description><![CDATA[こんにちはこんばんは．
ところでこういう構成ってモノリポっていうらしいですね．
単一のリポジトリでやっていくのでモノ+リポ(ジトリ)と．
今回は文字多めでいきたい．なるべく．
……今回こそ……文字……

 Actix Web + Yew + SeaORM + PostgreSQL で構築する場合の構築手順とディレクトリがどうなるか教えて下さい


いつものって感じがしますねえ．
ちなみに PostgreSQL は

sudo apt install postgresql
とコマンド叩けばつくれます……
PostgreSQL のページから

の，Download をクリック．するとこんな画...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-21</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-21</guid><pubDate>Tue, 25 Feb 2025 13:16:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZKanTBzT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520100%2520%2525%2520%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AA%25E3%2583%259D%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%25A8PostgreSQL%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[Rustで一気通貫にWebアプリを作りたい！(要件定義編)]]></title><description><![CDATA[こんにちは．早いものでもうこの Zenn 投稿も 20 記事目となりました．
なお今回は Gemini 2.0 flash と対話しながら Rust だけで Web アプリを作って Vercel とかにデプロイしたいなーみたいな話です．僕が詰まったところの共有になれば幸いです．
以下，Gemini 2.0 flash との対話をスクリーンショットしたものを載せていきます

 Rust でWebアプリを作成して Vercel にデプロイする際の最適な技術スタックを教えてください



速さと非同期処理に強いとの面で Actix Web に惹かれました．フロントは Rust で書きたいので ...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-20</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-20</guid><pubDate>Tue, 25 Feb 2025 11:54:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z7J7tOJt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25B8%2580%25E6%25B0%2597%25E9%2580%259A%25E8%25B2%25AB%25E3%2581%25ABWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2528%25E8%25A6%2581%25E4%25BB%25B6%25E5%25AE%259A%25E7%25BE%25A9%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[[Bevy] StandardMaterialを拡張する]]></title><description><![CDATA[BevyではStandardMaterialを使うことで基本的な物理ベースのレンダリングができます。
でも、、、
でも、、
でも、
もっとすごいことをしたい！
Shadertoyにあるようなかっこいいやつを作りたい！
そんなときどうすればよいのでしょうか？

 ExntendedMaterialでStandardMaterialをパワーアップ！
ExntendedMaterialを使うことでStandardMaterialの機能をさらに拡張してVertex, Frangmentの両方のシェーダーを編集できます。
使用例はこちらです。なんかそれっぽいやつが作れるみたいです。
Extende...]]></description><link>https://zenn.dev/omini/articles/763e52446de169</link><guid isPermaLink="true">https://zenn.dev/omini/articles/763e52446de169</guid><pubDate>Mon, 24 Feb 2025 19:15:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4TGrUL3x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520StandardMaterial%25E3%2582%2592%25E6%258B%25A1%25E5%25BC%25B5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[serdeに入門してSerializerとDeserializerを実装した]]></title><description><![CDATA[
自身のブログにも同じ内容の記事を投稿しています
https://www.tunamaguro.dev/articles/20250224-serdeに入門した/

serdeの入門として、serde::Serializerとserde::Deserializerを実装したので、serdeについて理解したことを記録として残します
https://github.com/tunamaguro/messagepack-rs
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, PartialE...]]></description><link>https://zenn.dev/tunamaguro/articles/415e5d38b7bf25</link><guid isPermaLink="true">https://zenn.dev/tunamaguro/articles/415e5d38b7bf25</guid><pubDate>Mon, 24 Feb 2025 16:00:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7UETtEik--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:serde%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6Serializer%25E3%2581%25A8Deserializer%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tunamaguro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tunamaguro</dc:creator></item><item><title><![CDATA[ゆっくりActix‑web チュートリアル]]></title><description><![CDATA[ChatGPTで生成したActix‑webのチュートリアルです。誤りを含む可能性があります。]]></description><link>https://zenn.dev/hiromichinomata/books/f69d7fc9c3addc</link><guid isPermaLink="true">https://zenn.dev/hiromichinomata/books/f69d7fc9c3addc</guid><pubDate>Mon, 24 Feb 2025 08:10:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kyYGvVJk--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9iNDUyMDU1OGIwLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>Hiromichi NOMATA</dc:creator></item><item><title><![CDATA[自作Rust製TUI httpクライアント「turl」の紹介]]></title><description><![CDATA[rustの勉強を兼ねてTUIツールを作ってみました。
https://github.com/nakkiy/turl

 turlとは
こんな感じでターミナル上でGUI風にhttpリクエストを実行できるTUIツールです。


 インストール
git clone https://github.com/nakkiy/turl.git
cd turl
cargo run

 使い方
ubuntuとmacで実行できます。確認はしてないですがwindowsでも実行できると思います。
ヘッダ、パラメータ、ボディを設定して送ることができます。
実行時に-s、-h、-bを指定することで終了時にステータス、...]]></description><link>https://zenn.dev/nakkiy/articles/94b19a4051157c</link><guid isPermaLink="true">https://zenn.dev/nakkiy/articles/94b19a4051157c</guid><pubDate>Mon, 24 Feb 2025 06:17:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qamNWEEE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CRust%25E8%25A3%25BDTUI%2520http%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2580%258Cturl%25E3%2580%258D%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakkiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDRQblR4S1NRMWFmaGVudU0yT1MyNUdYNmtrQnUxY1RFMEZyNW1kZkNVR1haQTRBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakkiy</dc:creator></item><item><title><![CDATA[Tauri(Rust)をVsCode上でステップ実行でデバッグする]]></title><description><![CDATA[
 はじめに
Tauri上のRustをVsCodeでステップ実行できるようにする設定方法について解説します。
ちなみに自分のエディターはCursorで、こちらでも問題なく動作します。

 VsCode上の設定
デバッグ設定ファイルを作成します。

.vscode/launch.json
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: htt...]]></description><link>https://zenn.dev/devtatsu/articles/vscode-debug-tauri</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/vscode-debug-tauri</guid><pubDate>Mon, 24 Feb 2025 00:40:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qiX1nq_f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%2528Rust%2529%25E3%2582%2592VsCode%25E4%25B8%258A%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%2583%25E3%2583%2597%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item><item><title><![CDATA[ABC394:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 394のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc394/tasks/abc394_a
解説
文字列Sを順番に見て、2 の文字だけを出力します。
コード

abc394a.rs
use proconio::{input, marker::Chars};

fn main() {
    input!{
        s: Chars,
    }

    // 2の文字だけを出力
    for &amp;ss in &amp;s {
    ...]]></description><link>https://zenn.dev/nakst_hide/articles/1b7fca004c7921</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/1b7fca004c7921</guid><pubDate>Sun, 23 Feb 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YFSXj4O6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC394%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[cargo-binstallでdioxus-cliをインストールした際に出るOpenSSLエラーの解決方法]]></title><description><![CDATA[
 この記事でわかること

cargo-binstallでインストールされたdioxus-cliコマンドを実行時、下記のようなエラーが出た場合の解決方法がわかります。

dyld[5030]: Library not loaded: /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib
  Referenced from: #####
  /Users/ユーザー名/.cargo/bin/dx
  Reason: tried: '/opt/homebrew/opt/openssl@3/lib/libssl.3.dylib' (no such file...]]></description><link>https://zenn.dev/2323_code/articles/903333ee02e222</link><guid isPermaLink="true">https://zenn.dev/2323_code/articles/903333ee02e222</guid><pubDate>Sun, 23 Feb 2025 08:42:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mcARVIYe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-binstall%25E3%2581%25A7dioxus-cli%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%259F%25E9%259A%259B%25E3%2581%25AB%25E5%2587%25BA%25E3%2582%258BOpenSSL%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B5%25E3%2581%25BF%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyZGQ3OTI1ODcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみふみ</dc:creator></item><item><title><![CDATA[高速な擬似乱数生成器「SFC」について]]></title><description><![CDATA[Zigの標準ライブラリを見ていたらSFCという擬似乱数生成器が実装されていて興味を持ったので調べてみました。
ついでにRustで実装してみました。

 SFCとは
SFC（Small Fast Counting、Small Fast Chaotic）は、PractRandの作者のChris Doty-Humphrey氏が設計した擬似乱数生成器（PRNG）です[1]。
操作は加算、排他的論理和（XOR）、固定幅の論理シフト、固定幅の左ローテートを使用します。
高速で小さいことが特徴で、TestU01のBigCrushを通っています。
sfc16、sfc32、sfc64の3つの擬似乱数生成器...]]></description><link>https://zenn.dev/sorairolake/articles/sfc-random-number-generator</link><guid isPermaLink="true">https://zenn.dev/sorairolake/articles/sfc-random-number-generator</guid><pubDate>Sun, 23 Feb 2025 05:26:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ok6nA6p2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25AA%25E6%2593%25AC%25E4%25BC%25BC%25E4%25B9%25B1%25E6%2595%25B0%25E7%2594%259F%25E6%2588%2590%25E5%2599%25A8%25E3%2580%258CSFC%25E3%2580%258D%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SorairoLake%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZGZiOGQyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SorairoLake</dc:creator></item><item><title><![CDATA[組込 Rust on ESP32 をやっていたと思ったらターミナルが汚染されてすごいことに……]]></title><description><![CDATA[
 Result
ターミナルに延々と HelloButton! と表示される

 問題のコード

main.rs
use esp_idf_hal::prelude::*;
use esp_idf_hal::gpio::PinDriver;
use esp_idf_sys::EspError;

fn main() -&gt; Result&lt;(), EspError&gt; {
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-19</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-19</guid><pubDate>Sun, 23 Feb 2025 00:19:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5jDfioCS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B5%2584%25E8%25BE%25BC%2520Rust%2520on%2520ESP32%2520%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E3%2581%25A8%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2589%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2581%258C%25E6%25B1%259A%25E6%259F%2593%25E3%2581%2595%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2599%25E3%2581%2594%25E3%2581%2584%25E3%2581%2593%25E3%2581%25A8%25E3%2581%25AB%25E2%2580%25A6%25E2%2580%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[Cargo Lambda で Lambda layer を使って Parameter Store から値を取得する]]></title><description><![CDATA[
 内容
AWS 公式が用意している Lambda から Parameter Store や Secrets Manager から値を取得する方法を Rust、Cargo Lambda で説明する。
Lambda で Parameter Store などから何かシークレットを取得するとき AWS SDK でパラメーターを取得することはできる。しかし、頻繁に呼び出される Lambda の場合はクォータに引っかかり、値が取得できなくなってしまう。
シンプルに解決するなら Lambda の環境変数に突っ込んでしまえばいいのだが CloudFormation や Lambda のコンソールの画面...]]></description><link>https://zenn.dev/creanciel/articles/cargo-lambda-parameter-store</link><guid isPermaLink="true">https://zenn.dev/creanciel/articles/cargo-lambda-parameter-store</guid><pubDate>Sat, 22 Feb 2025 17:21:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Jy_7YG4x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cargo%2520Lambda%2520%25E3%2581%25A7%2520Lambda%2520layer%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520Parameter%2520Store%2520%25E3%2581%258B%25E3%2582%2589%25E5%2580%25A4%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Creanciel%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwOWFkYmIxNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Creanciel</dc:creator></item><item><title><![CDATA[PyO3をつかってみる＜PythonとRustの連携＞]]></title><description><![CDATA[
 概要
こんにちは！
今回は PyO3 についてお話しします。このライブラリは、Rust と Python をバインディングするための Rust ライブラリ です。
つまり、Rust で Python ライブラリを作成できる のです！！
私の意見としては、Rust を使いたい理由はその速さです。
しかし、Python も使いたいという気持ちがあり、その問題を PyO3 が解決してくれます。
一緒に PyO3 をチェックしてみましょう！


 誰に向けた記事か？

Python ユーザー
Rust ユーザー

Python の処理速度を上げたいと考えている人



 PyO3 とは？
こ...]]></description><link>https://zenn.dev/yujikawa/articles/introduction_to_pyo3</link><guid isPermaLink="true">https://zenn.dev/yujikawa/articles/introduction_to_pyo3</guid><pubDate>Sat, 22 Feb 2025 12:42:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--msDnOF7u--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PyO3%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258B%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25EF%25BC%259CPython%25E3%2581%25A8Rust%25E3%2581%25AE%25E9%2580%25A3%25E6%2590%25BA%25EF%25BC%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2581%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhYzVhYjdlYmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆじ</dc:creator></item><item><title><![CDATA[【Web 3.0 / BlockChain】DeFi入門：新たな金融エコシステム]]></title><description><![CDATA[
 はじめに
ブロックチェーン技術の革新は、従来の金融システムに根本的な変革をもたらす可能性を秘めています。近年、特に注目を浴びているのが「DeFi（Decentralized Finance：分散型金融）」です。DeFiは、中央集権的な金融機関に依存しない、オープンで透明性の高い金融サービスを提供する仕組みです。本記事では、DeFiとは何者か、DeFiがもたらす利点、中央集権型金融との違い、具体的な分散型取引所（DEX）の構築例とその実装コード、さらには私自身が考えるトークン発行モデルについて、詳しく解説します。


 第1章：DeFiとは何者か

 1-1．DeFiの定義
DeFiは...]]></description><link>https://zenn.dev/yusukekikuta/articles/93977ef27a56ee</link><guid isPermaLink="true">https://zenn.dev/yusukekikuta/articles/93977ef27a56ee</guid><pubDate>Sat, 22 Feb 2025 09:44:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3XoBtDnX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Web%25203.0%2520%252F%2520BlockChain%25E3%2580%2591DeFi%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259A%25E6%2596%25B0%25E3%2581%259F%25E3%2581%25AA%25E9%2587%2591%25E8%259E%258D%25E3%2582%25A8%25E3%2582%25B3%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2520Kikuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxNzNiNGMzZDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke Kikuta</dc:creator></item><item><title><![CDATA[C++とRustで純粋再帰]]></title><description><![CDATA[こんな関数を書きたいと思ったことはありませんか？

Scheme
(define (counter count)
  (lambda () 
    (display count)
    (counter (+ count 1))))

戻り値にクロージャーを置いて、関数を呼び出す度に引数の値を更新していく擬似的な再帰です
お手軽に反復カウンターが実装できる便利な関数ですが、戻り値の型は
counter:int-&gt;(int-&gt;(int-&gt;...)-&gt;...)
と無限ループしてしまい、静的型付けでは容易に実装できません
型がループするような戻り値の実装には、クロー...]]></description><link>https://zenn.dev/usagi123/articles/2616adf237e791</link><guid isPermaLink="true">https://zenn.dev/usagi123/articles/2616adf237e791</guid><pubDate>Sat, 22 Feb 2025 08:47:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y2p4Ptid--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:C%252B%252B%25E3%2581%25A8Rust%25E3%2581%25A7%25E7%25B4%2594%25E7%25B2%258B%25E5%2586%258D%25E5%25B8%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B7%25E3%2583%25AD%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjMmVhM2JhOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>シロ</dc:creator></item><item><title><![CDATA[Rustで書くN体シミュレーション]]></title><description><![CDATA[

 N体シミュレーション
N体シミュレーションは、複数の粒子が相互に引力や斥力を及ぼし合う動きを数値的に解く手法です。天体の軌道計算や粒子の相互作用をモデル化する際に使用され、物理学や天文学などで広く利用されます。
この記事では、重力相互作用を考慮し、各ステップで粒子の加速度・速度・位置を更新しながら粒子に見立てたパーティクルの運動をシミュレートするシンプルなN体シミュレーションをRustで実装します。
実装原理は下記記事の直接計算法を参考にします。直接計算法では、計算量はO(N^2)の計算量となります。
https://medium.com/swlh/create-your-own-...]]></description><link>https://zenn.dev/kkent030315/articles/5837f59206d912</link><guid isPermaLink="true">https://zenn.dev/kkent030315/articles/5837f59206d912</guid><pubDate>Fri, 21 Feb 2025 20:40:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9jqOWXX---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258FN%25E4%25BD%2593%25E3%2582%25B7%25E3%2583%259F%25E3%2583%25A5%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kkent030315%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0NTk2NTRjZGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kkent030315</dc:creator></item></channel></rss>