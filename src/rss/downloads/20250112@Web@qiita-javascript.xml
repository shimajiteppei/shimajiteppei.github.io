<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/javascript/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/javascript/feed"/>
  <title>JavaScriptタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでJavaScriptタグが付けられた新着記事</description>
  <updated>2025-01-12T20:24:11+09:00</updated>
  <link>https://qiita.com/tags/javascript</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1972360</id>
    <published>2025-01-12T20:24:11+09:00</published>
    <updated>2025-01-12T20:24:11+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kohki_takatama/items/cf126dc59e47af53110e"/>
    <url>https://qiita.com/kohki_takatama/items/cf126dc59e47af53110e</url>
    <title>【JS / TS】"??" と 三項演算子 "? :" の比較</title>
    <content type="html">Overview
null 合体演算子 ?? は、三項演算子? :と比較し以下の2点に違いがあります。

無駄のない構文
null / undefined のみを判定条件とする

null 合体演算子 …</content>
    <author>
      <name>kohki_takatama</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1972336</id>
    <published>2025-01-12T19:22:59+09:00</published>
    <updated>2025-01-12T19:22:59+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/mashuel/items/46be6c43a58c82177af2"/>
    <url>https://qiita.com/mashuel/items/46be6c43a58c82177af2</url>
    <title>JavaScript: 疎配列の巡回速度検証</title>
    <content type="html">ここで言う疎配列とは要素が飛び飛びに埋め込まれた配列の事。例えば以下のような配列
a=[,1,,22,,,,333,,,,,,,,55555]

このような配列の要素をもれなく読みあさる速度を検証する…</content>
    <author>
      <name>mashuel</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1972320</id>
    <published>2025-01-12T18:41:36+09:00</published>
    <updated>2025-01-12T18:41:36+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Procrustes5/items/194aa55dd1ecb00e85ea"/>
    <url>https://qiita.com/Procrustes5/items/194aa55dd1ecb00e85ea</url>
    <title>jsの単項演算子（Unary Operators）とは？</title>
    <content type="html">jsでfor文を書いていると以下のような書き方になることが多い。
let arr = [1, 2, 3];
for (let i = 0; i &amp;lt; arr.length; i++) {
  arr[i]…</content>
    <author>
      <name>Procrustes5</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1972292</id>
    <published>2025-01-12T17:33:16+09:00</published>
    <updated>2025-01-12T17:33:16+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Leapcell/items/72a9849c7fe6b15395ce"/>
    <url>https://qiita.com/Leapcell/items/72a9849c7fe6b15395ce</url>
    <title>JavaScriptデバッグの新常識：error.cause</title>
    <content type="html">
デバッグの課題
デバッグにおける最大の課題とは何でしょうか？その中の一つは、エラーの発生源を特定することです。
次のようなシナリオを想像してみてください：
const func = () =&amp;gt; {
 …</content>
    <author>
      <name>Leapcell</name>
    </author>
  </entry>
</feed>
