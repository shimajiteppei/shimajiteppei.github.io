<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「JavaScript」のフィード]]></title><description><![CDATA[Zennのトピック「JavaScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/javascript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/64acd76870.png</url><title>Zennの「JavaScript」のフィード</title><link>https://zenn.dev/topics/javascript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 03 Jul 2025 02:50:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/javascript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TypeScriptのtypeofを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりtypeofを理解しようの会

 typeofとは
指定した変数やプロパティの型を抽出して定義するもの。
参考: https://www.typescriptlang.org/docs/handbook/2/typeof-types.html
let s = "hello";
let n: typeof s;
と書いたらnはstring型ということになる。

 JavaScriptのtypeofとの違いは??
JavaScriptにもtypeofが存在し、それも型を返してくれるものなので困惑する。
が、JavaScriptのtypeofはあくまでも「型名を表...]]></description><link>https://zenn.dev/mt5/articles/b936558aa1d226</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/b936558aa1d226</guid><pubDate>Thu, 03 Jul 2025 01:03:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PXIRLsxx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEtypeof%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[非同期処理/エラーハンドリング]]></title><description><![CDATA[自分用チートシートです。

 Promiseを返さない非同期関数
これらはブラウザやNode.jsに組み込まれたAPIで、処理の完了をコールバック関数で通知します。

 一定時間後に処理を実行: setTimeout(callback, delay)
setTimeout(() =&gt; { 
    console.log("1秒後に一度だけ実行されます"); 
}, 1000); // 1000ミリ秒 (1秒) 後

 一定間隔で処理を実行: setInterval(callback, delay)
const intervalId = setInterval(() =&gt; {...]]></description><link>https://zenn.dev/takaa/articles/39c1f524df4ed5</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/39c1f524df4ed5</guid><pubDate>Wed, 02 Jul 2025 15:24:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qZz8KVcr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%252F%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[イベント系チートシート]]></title><description><![CDATA[自分用チートシートです。

 イベントリスナーの登録



メソッド
説明
例
備考




element.addEventListener('event', handler, options)
推奨される方法。 複数のリスナーを登録でき、柔軟性が高い。options で詳細設定可能。
btn.addEventListener('click', handleClick);
this はイベントを発生させた要素を指す。


element.removeEventListener('event', handler)
addEventListenerで登録したリスナーを削除。handler関...]]></description><link>https://zenn.dev/takaa/articles/d2f35083bda583</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/d2f35083bda583</guid><pubDate>Wed, 02 Jul 2025 15:24:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yq_TkduI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E7%25B3%25BB%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[DOM操作チートシート]]></title><description><![CDATA[自分用チートシートです。

 要素の取得



メソッド
説明
例




document.getElementById('id')
指定されたIDを持つ単一の要素を取得。
const el = document.getElementById('myId');


document.querySelector('selector')
指定されたCSSセレクタに一致する最初の要素を取得。
const el = document.querySelector('.myClass');  const el2 = document.querySelector('div.item');


doc...]]></description><link>https://zenn.dev/takaa/articles/11113b579ed9fb</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/11113b579ed9fb</guid><pubDate>Wed, 02 Jul 2025 15:24:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--An-hTXDj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DOM%25E6%2593%258D%25E4%25BD%259C%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[オブジェクト操作チートシート]]></title><description><![CDATA[自分用チートシートです。

 オブジェクトの作成



方法
説明
例




オブジェクトリテラル
最も一般的で推奨される方法。
let obj = { key: 'value', num: 123 };


new Object()
基本的なオブジェクトを作成。
let obj = new Object();


Object.create()
既存のオブジェクトをプロトタイプとして新しいオブジェクトを作成。
let proto = { greet: 'Hello' };  let obj = Object.create(proto);




 プロパティのアクセスと設定



方...]]></description><link>https://zenn.dev/takaa/articles/6e55b9a04023ca</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/6e55b9a04023ca</guid><pubDate>Wed, 02 Jul 2025 15:24:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6n-1H4od--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E6%2593%258D%25E4%25BD%259C%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[文字列操作チートシート]]></title><description><![CDATA[自分用チートシートです。

 文字列の作成



方法
説明
例




文字列リテラル
最も一般的で推奨される方法。シングル/ダブルクォート。
let str = 'Hello'; let str2 = "World";


テンプレートリテラル
バッククォート (`) を使用。改行や変数埋め込みが可能。
let name = "Alice";let msg = \Hello, ${name}!;





 文字列の長さとアクセス



プロパティ/メソッド
説明
例
結果




length
文字列の長さを返す。
hello'.length
5


[index]
特定のインデッ...]]></description><link>https://zenn.dev/takaa/articles/5a931c5824fe81</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/5a931c5824fe81</guid><pubDate>Wed, 02 Jul 2025 15:24:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5Y8OAnm0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[配列操作チートシート]]></title><description><![CDATA[自分用チートシートです。

 配列操作



方法
説明
例




リテラル構文
最も一般的で推奨される方法。
let arr = [1, 2, 3];


Array() コンストラクタ
特定の長さの空の配列を作成。引数1つの場合。
let arr = new Array(5); (空の要素5つ)


Array.of()
引数を要素とする配列を作成。
let arr = Array.of(1, 2, 3);


Array.from()
イテラブル（反復可能）なオブジェクトから配列を作成。
let arr = Array.from("hello"); (['h', 'e', 'l'...]]></description><link>https://zenn.dev/takaa/articles/91884098bfe179</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/91884098bfe179</guid><pubDate>Wed, 02 Jul 2025 15:24:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_bIjq0vk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2585%258D%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[数値操作チートシート]]></title><description><![CDATA[自分用チートシートです

 数値への型変換



関数/メソッド
説明
例
結果




Number()
さまざまな値を数値に変換。変換できない場合は NaN を返す。
Number("123")  Number("abc")
123  NaN


parseInt()
文字列を整数に変換。文字列の先頭から数値として解釈できる部分を変換。
parseInt("123px")  parseInt("abc")
123  NaN


parseFloat()
文字列を浮動小数点数に変換。
parseFloat("123.45px")  parseFloat("123")
123.45  1...]]></description><link>https://zenn.dev/takaa/articles/be43ff75ee5219</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/be43ff75ee5219</guid><pubDate>Wed, 02 Jul 2025 15:23:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qqbrvpnr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2595%25B0%25E5%2580%25A4%25E6%2593%258D%25E4%25BD%259C%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[関数チートシート]]></title><description><![CDATA[自分用チートシートです。

 関数宣言
function name(param1, param2) { 
  return result; 
}; 

 関数式
const func= function(name) { 
  return result`; 
}; 

 アロー関数
const arrow = (param) =&gt; { 
  // ... 
}; 

 短縮形アロー関数
const arrow = param =&gt; result; 

 即時実行関数(IIFE)
(function() { 
 // ... 
}); 

 コールバック関数
function ...]]></description><link>https://zenn.dev/takaa/articles/7e40689f0225e8</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/7e40689f0225e8</guid><pubDate>Wed, 02 Jul 2025 15:23:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xWE4mkfe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2596%25A2%25E6%2595%25B0%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[制御構文チートシート]]></title><description><![CDATA[自分用チートシートです

 条件分岐
if (conditions) { ... }  
else if (conditions) { ... }  
else { ... } 

 多分岐
switch (value) {  
  case 'a':  
    // ...  
    break;  
  case 'b':  
  case 'c':  
    // ...  
    break;  
  default:  
    // ...  
} 

 繰り返し
for (let i = 0; i &lt; array.length; i++) { ... }

 ...]]></description><link>https://zenn.dev/takaa/articles/55ae34409e4654</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/55ae34409e4654</guid><pubDate>Wed, 02 Jul 2025 15:23:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LbYRfmIE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%25B6%25E5%25BE%25A1%25E6%25A7%258B%25E6%2596%2587%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[演算子/型チェックチートシート]]></title><description><![CDATA[自分用チートシートです。

 算術演算子



演算子
意味
例
結果




+
足し算
3 + 2
5


-
引き算
5 - 2
3


*
掛け算
3 * 4
12


/
割り算
10 / 2
5


%
剰余（余り）
10 % 3
1


**
べき乗（累乗）
2 ** 3
8（2の3乗）




 代入演算子



演算子
意味
例
結果




=
値を代入する
let x = 5;
x は 5になる


+=
足して代入
x += 3;
x = x + 3


-=
引いて代入
x -= 2;
x = x - 2


*=
掛けて代入
x *= 4;
x = x * 4...]]></description><link>https://zenn.dev/takaa/articles/56898fdb4f8d4d</link><guid isPermaLink="true">https://zenn.dev/takaa/articles/56898fdb4f8d4d</guid><pubDate>Wed, 02 Jul 2025 15:23:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jOODvdTq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%252F%25E5%259E%258B%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZkZTg4MTMwMTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takaa</dc:creator></item><item><title><![CDATA[本番環境でCSSが消えた！Webpack require.contextの落とし穴]]></title><description><![CDATA[!
この記事は Claude Code を使って書かれた記事です。


 はじめに
「開発環境では完璧に動いてたのに、本番にデプロイしたらCSSが効いてない...」
こんな経験、ありませんか？
原因を調べていくと、Webpackのrequire.contextという便利な機能に潜む落とし穴を発見。
今回はその問題と解決方法をシェアしたいと思います。

 この記事で学べること

Webpackのrequire.contextとimportの根本的な違い
CSS Modulesが本番環境で読み込まれない理由
実際のエラーの見つけ方と解決方法
今後同じ問題を防ぐためのベストプラクティス


 ...]]></description><link>https://zenn.dev/kazu0311/articles/0e054db5e4249a</link><guid isPermaLink="true">https://zenn.dev/kazu0311/articles/0e054db5e4249a</guid><pubDate>Wed, 02 Jul 2025 15:06:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--93JOTDiW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%25AC%25E7%2595%25AA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A7CSS%25E3%2581%258C%25E6%25B6%2588%25E3%2581%2588%25E3%2581%259F%25EF%25BC%2581Webpack%2520require.context%25E3%2581%25AE%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyYmQyN2FhN2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かっちゃん</dc:creator></item><item><title><![CDATA[Date比較を20年間勘違していたことをclaude から教えてもらった話]]></title><description><![CDATA[
 Date比較を20年間勘違いしていたことをClaudeから教えてもらった話
JavaScriptをやっていて、これだけはずっと書いている、というコードの一つに「Dateの比較」があります。
const d1 = new Date('2025-07-01');
const d2 = new Date('2025-07-02');

if (d1.getTime() &lt; d2.getTime()) {
  console.log('d1 は d2 より前の日付');
}
今までずっと、こうしないと比較できないと思っていたんですよね。
しかし先日、一人でテストしていたら、こんなことを...]]></description><link>https://zenn.dev/coa00/articles/5216fc2d21a3dd</link><guid isPermaLink="true">https://zenn.dev/coa00/articles/5216fc2d21a3dd</guid><pubDate>Wed, 02 Jul 2025 11:50:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pWnqfQpC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Date%25E6%25AF%2594%25E8%25BC%2583%25E3%2582%259220%25E5%25B9%25B4%25E9%2596%2593%25E5%258B%2598%25E9%2581%2595%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592claude%2520%25E3%2581%258B%25E3%2582%2589%25E6%2595%2599%25E3%2581%2588%25E3%2581%25A6%25E3%2582%2582%25E3%2582%2589%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:coa00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2doSFFpUjFPUXZZNVVTUWRNX3lsLWZYWE90ZmI1T3NvSEpnS2pKQkFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>coa00</dc:creator></item><item><title><![CDATA[Promiseの結果をキャッシュして効率的な非同期処理を実現する]]></title><description><![CDATA[Promiseのキャッシュを活用する方法について記載します。
Promiseは一度実行された結果を保持する特性があり、これを利用してキャッシュを実現できます。

 Promiseの基本的な特性
Promiseは、一度実行されるとその結果（fulfilled または rejected）を保持します。
Promiseオブジェクトを生成し返す関数を実行した場合、毎回Promiseが実行されます
const createPromise = () =&gt; {
    return new Promise((resolve) =&gt; {
        console.log("処理を実行中...]]></description><link>https://zenn.dev/ebi_yu/articles/b04d0ef3ad706f</link><guid isPermaLink="true">https://zenn.dev/ebi_yu/articles/b04d0ef3ad706f</guid><pubDate>Wed, 02 Jul 2025 11:01:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aDKMVSbI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Promise%25E3%2581%25AE%25E7%25B5%2590%25E6%259E%259C%25E3%2582%2592%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%2597%25E3%2581%25A6%25E5%258A%25B9%25E7%258E%2587%25E7%259A%2584%25E3%2581%25AA%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ebi_yu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQxMmNhNWM1MjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ebi_yu</dc:creator></item><item><title><![CDATA[アルゴリズム図鑑 ~ Sort Algorithm Implementation in JavaScript]]></title><description><![CDATA[
Selection Sort



Merge Sort



Bubble Sort



Quick Sort



Insert Sort



Heap Sort

]]></description><link>https://zenn.dev/mamamajohn/articles/1e7a101c0fd1ce</link><guid isPermaLink="true">https://zenn.dev/mamamajohn/articles/1e7a101c0fd1ce</guid><pubDate>Wed, 02 Jul 2025 06:21:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FzO5Nsl---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25B4%25E3%2583%25AA%25E3%2582%25BA%25E3%2583%25A0%25E5%259B%25B3%25E9%2591%2591%2520%7E%2520Sort%2520Algorithm%2520Implementation%2520in%2520JavaScript%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nojiru_susurine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5Y2VhMzE0YzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nojiru_susurine</dc:creator></item><item><title><![CDATA[Javascriptのシャローコピー/ディープコピーについて]]></title><description><![CDATA[
 📝 はじめに
最近「りあクト TypeScriptで始めるつらくないReact開発」の第5版が発売されたので読んでいるのですが、3巻あるうちの① 言語環境編を読んでいるだけで今までなんとなくで使っていたことについてなぜこうなるのか、内部でどういう挙動になっているのかなどの説明がわかりやすく丁寧に書いてあるのでとても勉強になっています。
今回は、シャローコピー (Shallow Copy) と ディープコピー (Deep Copy) の記事です。
破壊的変更を避けるための代替手段として使われるメソッドの説明で、「これはシャローコピーです」と書いてあってもいまいちピンときていなかったの...]]></description><link>https://zenn.dev/sato_frontend/articles/be2dde853da305</link><guid isPermaLink="true">https://zenn.dev/sato_frontend/articles/be2dde853da305</guid><pubDate>Tue, 01 Jul 2025 15:52:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pl4IPci_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Javascript%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%252F%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%2597%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sato_frontend%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwNzYyOThkNTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sato_frontend</dc:creator></item><item><title><![CDATA[ダイナミックインポートってなんやねん(ちょっと色々迷走しつつ)]]></title><description><![CDATA[
 🔰はじめに
コードリーディングしている時にダイナミックインポートという言葉が出てきたので自分なりに整理
調べれば調べるほど分からなくなる状態だったのでその他の文言解説も含んでます

 💨一言で
初めからコンポーネントを用意しておくのではなく、ここぞという時にコンポーネントを用意するための機能

 🥼ChatGPTくんの回答
ダイナミックインポート（Dynamic Import）は、JavaScriptにおいて、モジュールを必要な時に動的に読み込むための機能です。通常のimport文では、ファイルの先頭で全ての依存関係を宣言する必要がありますが、ダイナミックインポートでは、必要なモジュ...]]></description><link>https://zenn.dev/mt5/articles/ff3cc0f796cf5b</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/ff3cc0f796cf5b</guid><pubDate>Tue, 01 Jul 2025 09:09:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dv85kd1h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2580%25E3%2582%25A4%25E3%2583%258A%25E3%2583%259F%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2582%2584%25E3%2581%25AD%25E3%2582%2593%2528%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8%25E8%2589%25B2%25E3%2580%2585%25E8%25BF%25B7%25E8%25B5%25B0%25E3%2581%2597%25E3%2581%25A4%25E3%2581%25A4%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[【NAGOYA TEENS AI CAMP 2025】AI と一緒に宝探しの冒険へ！]]></title><description><![CDATA[2025年の名古屋AIユースキャンプで使用する教材です。AIロボットに指示を出して、3Dマップの中で宝探しをするゲームを作ります。]]></description><link>https://zenn.dev/gura_8/books/nagoya-ai-event-2025-programming-workshop</link><guid isPermaLink="true">https://zenn.dev/gura_8/books/nagoya-ai-event-2025-programming-workshop</guid><pubDate>Tue, 01 Jul 2025 03:44:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mXaT4xhr--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9iMmJlMDc2MDZjLndlYnA=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>Gura</dc:creator></item><item><title><![CDATA[【新人プログラマ向け】JSPとAPIの違い]]></title><description><![CDATA[
 はじめに
「JavaScriptでリッチなWebページが作れるのに、なぜJSPのような昔の技術が必要なの？」
「そもそも、なんでJavaScriptは直接データベースの情報を取ってこれないの？」
JavaでWeb開発を学び始めると、誰もが一度はこんな疑問にぶつかります。筆者もそうでした。
この記事では、このWeb開発の根本的な仕組みを、多くの人がイメージしやすい**「レストランの厨房」**の例え話を使って、直感的に理解できるように解説します。
この記事を読み終える頃には、JSPとAPIの役割の違いがスッキリ整理され、「なるほど、だからAPIが必要なのか！」と納得できるようになるはずで...]]></description><link>https://zenn.dev/wyuma/articles/15bb6a857d6a70</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/15bb6a857d6a70</guid><pubDate>Mon, 30 Jun 2025 08:39:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---5Cv4zsn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E6%2596%25B0%25E4%25BA%25BA%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259E%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591JSP%25E3%2581%25A8API%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Somadevfat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFkZjJmOWZjMzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Somadevfat</dc:creator></item><item><title><![CDATA[【エンジニア初学者】プログラム言語の基礎]]></title><description><![CDATA[!
この記事はエンジニア初学者が学んだことをまとめたアウトプットです。

本記事では、プログラミング言語の基礎を中心に解説していきます。特に、Java、JavaScript、Kotlin、TypeScriptといったWebやアプリ開発でよく使われる言語にフォーカスして、それぞれの違いや特徴、使いどころなどを紹介します。

 そもそもプログラミング言語とは
プログラミング言語とは、コンピュータに「こうしてほしい」と命令を伝えるための言葉です。
私たち人間が話す日本語や英語のように、コンピュータにも理解できる“言語”が必要になります。それが、JavaやJavaScript、Kotlinなどの...]]></description><link>https://zenn.dev/hitsuzi_meme/articles/ab26e09b93f5cc</link><guid isPermaLink="true">https://zenn.dev/hitsuzi_meme/articles/ab26e09b93f5cc</guid><pubDate>Mon, 30 Jun 2025 05:54:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PO10iYJl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E3%2580%2591%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MzYmI2MGFhMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>め</dc:creator></item></channel></rss>