<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 29 Sep 2025 01:16:41 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC425 A～F)]]></title><description><![CDATA[AtCoder Beginner Contest 425のA～F問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC425-A
問題
https://atcoder.jp/contests/abc425/tasks/abc425_a
以下の数式を計算する問題です。

\sum_{i=1}^{N} (-1)^{i} \times i^{3}

解説
1から N までの各整数 i に対して、(-1)^i と i^3 を掛けた値を合計します。
累乗計算には pow 関数を使用すると便利です。
コード

abc425a.rs
use num::p...]]></description><link>https://zenn.dev/nakst_hide/articles/9c290299b40d6a</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/9c290299b40d6a</guid><pubDate>Sun, 28 Sep 2025 13:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s7-KHiDM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC425%2520A%25EF%25BD%259EF%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[【Rust】VSCodeで#[derive(...)]を打ちやすくするスニペット]]></title><description><![CDATA[一発ネタです。
Rustを書いていると頻繁に#[derive(...)]などの属性マクロを書くことになりますが、キーボードで絶妙に打ちにくい構文なので(特に#)、結構面倒です。
そこで、VSCodeにスニペットを追加することでderiveなどのキーワードから#[derive(...)]までを補完できるようにします。
{
    "#[derive(...)]": {
        "prefix": "derive",
        "body": [
            "#[derive($1)]"
        ],
        "description": "#[d...]]></description><link>https://zenn.dev/nuskey/articles/rust-derive-snippet</link><guid isPermaLink="true">https://zenn.dev/nuskey/articles/rust-derive-snippet</guid><pubDate>Thu, 25 Sep 2025 09:43:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--V4As00z7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591VSCode%25E3%2581%25A7%2523%255Bderive%2528...%2529%255D%25E3%2582%2592%25E6%2589%2593%25E3%2581%25A1%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2583%258B%25E3%2583%259A%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nuskey%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZkZTM4NWZlYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nuskey</dc:creator></item><item><title><![CDATA[定数パラメータを制限する]]></title><description><![CDATA[Rust言語では型や関数に定数パラメーターを与えることができます。定数パラメーターはコンパイル時に評価されるため、コンパイラによる最適化の恩恵を受けることができます。定数パラメーターはその型が表現できる任意の値をとりますが、これに制限を加えることもできます。

 対象読者

定数パラメーターで受け取れる値を制限したい方
コンパイル時評価に興味がある方


 ホワイトリスト方式
許可したい定数パラメーターが少数の場合、ホワイトリスト方式を使うことができます。許可したい値を列挙するだけなので、実装は容易です。また、stdのportable_simdでも採用されています。
次のプログラムはmo...]]></description><link>https://zenn.dev/yatyou/articles/f7938419fa4ee4</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/f7938419fa4ee4</guid><pubDate>Wed, 24 Sep 2025 22:54:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fy9XjHZk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259A%25E6%2595%25B0%25E3%2583%2591%25E3%2583%25A9%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E5%2588%25B6%25E9%2599%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[Rustプログラムの複雑度を可視化する：サイクロマティック複雑度の測定と閾値設定]]></title><description><![CDATA[こんにちは、ファスト株式会社のYTです！
「脳に収まるコードの書き方」という本を読み、「サイクロマティック複雑度」を計測しようというプラクティスが興味深かったので、Rust製のプロジェクトに応用する際にどのように応用できそうか調査しました。

 サイクロマティック複雑度とは

コードのなかの分岐の数を計測し、メソッドの複雑さを教えてくれます。

「脳に収まるコードの書き方」 p257 付録Aより引用
1つの関数内での分岐や、ループが増えるほど大きくなる値です。
以下、CCNと略します。
本書では、7を閾値とすることを提案していましたが、

Rustのプロジェクトにそのまま閾値として使用で...]]></description><link>https://zenn.dev/fast/articles/b975471734c93c</link><guid isPermaLink="true">https://zenn.dev/fast/articles/b975471734c93c</guid><pubDate>Wed, 24 Sep 2025 07:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nY7ZvtXi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2581%25AE%25E8%25A4%2587%25E9%259B%2591%25E5%25BA%25A6%25E3%2582%2592%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25EF%25BC%259A%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%259E%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2583%25E3%2582%25AF%25E8%25A4%2587%25E9%259B%2591%25E5%25BA%25A6%25E3%2581%25AE%25E6%25B8%25AC%25E5%25AE%259A%25E3%2581%25A8%25E9%2596%25BE%25E5%2580%25A4%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:YT%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHhoaTdpLUpwaHdzY21VRFRSMGh0ZzFGd1ZXMDA1S3IyeV9RVzZFWXZNNEU2YndxVjg9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YT</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC424 A～E)]]></title><description><![CDATA[AtCoder Beginner Contest 424のA～E問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC424-A
問題
https://atcoder.jp/contests/abc424/tasks/abc424_a
与えられた三角形が二等辺三角形かどうかを判定する問題です。
解説
二等辺三角形の条件は、「三角形の3辺のうち2辺の長さが等しい」ことなので、それを判定します。
なお、この問題では、正三角形（3辺がすべて等しい場合）も二等辺三角形として扱ってよいとされています。
そのため、3辺のうち少なくとも2辺が等しいかどう...]]></description><link>https://zenn.dev/nakst_hide/articles/5ee582369778ad</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/5ee582369778ad</guid><pubDate>Tue, 23 Sep 2025 13:08:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gWPJQR-h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC424%2520A%25EF%25BD%259EE%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[tectonicクレートを使う時に引っかかったこと]]></title><description><![CDATA[Rustでtectonicを使おうとしたら，依存関係と環境変数の問題でずっとstuckしたので，次使う時に忘れないようメモをしておきます．

 環境

MacBook Air (2020) / macOS Tahoe 26.0
rustc 1.89.0
cargo 1.89.0
tectonic 0.15.0
Homebrew 4.6.11


 問題
以下のドキュメントに沿って依存関係をHomebrewで導入したが，コンパイル時にharfbuzzとicu4cを見つけられず，コンパイルエラーになる
（中略）
The system library `icu-uc` required by ...]]></description><link>https://zenn.dev/sha3/articles/8037ffed3e8ebd</link><guid isPermaLink="true">https://zenn.dev/sha3/articles/8037ffed3e8ebd</guid><pubDate>Tue, 23 Sep 2025 06:50:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--swUoXihh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tectonic%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E6%2599%2582%25E3%2581%25AB%25E5%25BC%2595%25E3%2581%25A3%25E3%2581%258B%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxZTM2YjU3OTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しゃ</dc:creator></item><item><title><![CDATA[一ヶ月でRustでexample.comをLivingStandardどおりにレンダリングできるブラウザを作った話]]></title><description><![CDATA[
 はじめに
Web周りの技術をちゃんと理解したり、字句解析/構文解析の練習のために、RustでHTML Living StandardとCSS仕様書に沿ったレンダリングエンジン、そしてついでにDNSとHTTPのクライアントを自作してみました

 成果物

example.com
リポジトリ：
https://github.com/kntt32/ferrum

 仕組み


DNSクライアントで名前解決
HTTPクライアントでHTMLソースコードを取得
HTMLモジュールでDOMツリーを生成
CSSモジュールでCSSOMを生成
レンダリングモジュールで3, 4をもとにレンダリングツリーと...]]></description><link>https://zenn.dev/kntt32/articles/example_browser</link><guid isPermaLink="true">https://zenn.dev/kntt32/articles/example_browser</guid><pubDate>Mon, 22 Sep 2025 14:46:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NCMrfNva--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25B8%2580%25E3%2583%25B6%25E6%259C%2588%25E3%2581%25A7Rust%25E3%2581%25A7example.com%25E3%2582%2592LivingStandard%25E3%2581%25A9%25E3%2581%258A%25E3%2582%258A%25E3%2581%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kntt32%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RlYTU5YzYzNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kntt32</dc:creator></item><item><title><![CDATA[〚Rust〛MCP ServerをE2Eテストする]]></title><description><![CDATA[
 背景
https://doc.rust-jp.rs/book-ja/ch11-03-test-organization.html
Rustでテストを書く場合、tests/下に配置される結合テストも通常はアプリケーション本体をライブラリとして参照する形になるはずだ。
しかしMCP serverは明確にインターフェースが定義されており、どうせならそのレイヤーでテストがしたい。

「完全に独立したアプリケーションとして動かす形での統合テスト」は、Rustの tests/ ディレクトリに書くのが最も自然で推奨される方法です。

github copilot（GPT-4.1）もこう言っている。...]]></description><link>https://zenn.dev/kinon/articles/2f0c4ebe8f68c5</link><guid isPermaLink="true">https://zenn.dev/kinon/articles/2f0c4ebe8f68c5</guid><pubDate>Mon, 22 Sep 2025 12:32:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4XGMG-fz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%259ARust%25E3%2580%259BMCP%2520Server%25E3%2582%2592E2E%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2590%2582%25E4%25B9%2583%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0ZjVmM2M5OTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>㐂乃</dc:creator></item><item><title><![CDATA[なぜ、ゲーム業界でも普及させられないRustを組込みで普及させるのは、順序がおかしいのか？]]></title><description><![CDATA[
 はじめに
Rustは「メモリ安全」「データ競合防止」「高パフォーマンス」を兼ね備えた次世代システムプログラミング言語として注目されています。所有権と借用という独自の仕組みによって、コンパイル時に安全性を保証できる点は画期的であり、多くのエンジニアの関心を集めてきました。
しかし、Rustの普及をめぐる議論にはしばしば順序の混乱があります。特に「Rustは組込みで普及するのでは」という期待は繰り返し語られますが、実際にはゲーム業界こそRustがまず成果を出すべき場です。ゲームはMMUと大容量メモリを前提にヒープを駆使し、性能を限界まで引き出す文化を持っています。Rustが本当にC++の...]]></description><link>https://zenn.dev/pdfractal/articles/0137261b57aaac</link><guid isPermaLink="true">https://zenn.dev/pdfractal/articles/0137261b57aaac</guid><pubDate>Mon, 22 Sep 2025 11:00:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5iL7khmM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2581%259C%25E3%2580%2581%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E6%25A5%25AD%25E7%2595%258C%25E3%2581%25A7%25E3%2582%2582%25E6%2599%25AE%25E5%258F%258A%25E3%2581%2595%25E3%2581%259B%25E3%2582%2589%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584Rust%25E3%2582%2592%25E7%25B5%2584%25E8%25BE%25BC%25E3%2581%25BF%25E3%2581%25A7%25E6%2599%25AE%25E5%258F%258A%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E3%2581%25AE%25E3%2581%25AF%25E3%2580%2581%25E9%25A0%2586%25E5%25BA%258F%25E3%2581%258C%25E3%2581%258A%25E3%2581%258B%25E3%2581%2597%25E3%2581%2584%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pdfractal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4ZmJkZmFkY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pdfractal</dc:creator></item><item><title><![CDATA[`Error` トレイトの定義を確認してみた]]></title><description><![CDATA[
 Error トレイトの定義を確認してみた
前々回は Result&lt;T, E&gt; について書き、前回は Result&lt;T, E&gt; のよく使うメソッドについて書きました。
Rust の Result&lt;T, E&gt; の T や E は任意の型を使用できます。ただ E は多くの場合 Error トレイトを実装した型を指定します。
……というわけで今回は Rust の標準ライブラリにある Error トレイトについて書いてみます。
ちなみに、 Rust API ガイドラインの項目に Result&lt;T, E&gt; の E のようなエラー型は Error ト...]]></description><link>https://zenn.dev/doctormate/articles/ab590aca69f16e</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/ab590aca69f16e</guid><pubDate>Mon, 22 Sep 2025 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1cwPb0n1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2560Error%2560%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E7%25A2%25BA%25E8%25AA%258D%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[RustRoverでマクロ展開のキャッシュが消えない場合の対処法]]></title><description><![CDATA[
 発生している問題
RustRoverでwasmtime::component::bindgen!のような外部ファイルに依存するマクロを利用している際、外部ファイルを変更してもマクロの展開結果が更新されない問題が発生することがあります。
wasmtime::component::bindgen!({
    world: "imports",
    path: "../wit",
    imports: { default: async },
});
これは，Cmd(ctrl)+Shift+Aで表示できるパレットの「すべての Rust マクロを再展開」では解決できない．


 解決...]]></description><link>https://zenn.dev/yieldspace/articles/b8b0c676ebcdc5</link><guid isPermaLink="true">https://zenn.dev/yieldspace/articles/b8b0c676ebcdc5</guid><pubDate>Fri, 19 Sep 2025 22:32:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YH60y18L--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RustRover%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E5%25B1%2595%25E9%2596%258B%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2581%258C%25E6%25B6%2588%25E3%2581%2588%25E3%2581%25AA%25E3%2581%2584%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:sizumita%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2NmEwZGVlMTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:yieldspace%252C%2520inc.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAwNDRmZmVhOWEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sizumita</dc:creator></item><item><title><![CDATA[WASMコンポーネントを作成しMCPサーバから呼び出してみる]]></title><description><![CDATA[
 TL;DR

以下の構成でMCPサーバとしてWassetteを活用し、WASMコンポーネントをGithub Copilotから使ってみます。


呼び出すWASMコンポーネントも作ってみます。


 Wassette とは？ WASM × MCP がもたらす強力なセキュリティ
Wassetteは、WebAssembly (Wasm) を活用し、信頼できないツールに信頼できる実行環境を提供する、オープンソースのMCPサーバです。
WebAssemblyランタイムを組み込み、きめ細かなセキュリティポリシーを適用することで、Wassetteはホストシステムに悪影響を与えることなく、サードパ...]]></description><link>https://zenn.dev/mi2valley/articles/0779e5d3b32f06</link><guid isPermaLink="true">https://zenn.dev/mi2valley/articles/0779e5d3b32f06</guid><pubDate>Thu, 18 Sep 2025 09:42:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Np6WkJzR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WASM%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2597MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%258B%25E3%2582%2589%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljZDBlYzg3ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[足を止めて見る #5 〜 RustのSerdeクレート(2) 〜]]></title><description><![CDATA[
 足を止めて見よう
足を止めて見ようシリーズの5つ目です。
前回は serde クレートについてでした。
構造体を Json 形式にシリアライズして、更にその Json 形式をデシリアライズして、元の構造体に戻る様子を見ました。
今回は serde クレートの Attributes について足を止めて見ようと思います。
https://serde.rs/attributes.html

 serde の attributes とは何なのか
前回は、dervieマクロによって自動的に serde::ser::Serialize や serde::de::Deserialize が実装され...]]></description><link>https://zenn.dev/doctormate/articles/dive_5_serde_crate</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/dive_5_serde_crate</guid><pubDate>Thu, 18 Sep 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZE1lsXmG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B6%25B3%25E3%2582%2592%25E6%25AD%25A2%25E3%2582%2581%25E3%2581%25A6%25E8%25A6%258B%25E3%2582%258B%2520%25235%2520%25E3%2580%259C%2520Rust%25E3%2581%25AESerde%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25282%2529%2520%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259B%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25A6%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZVhWLXBJYnZkcjBBYW40R3NVdEpoemk2eFBNczEyem9zVUszREtKV0tTa2c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ホリケンシュウ</dc:creator></item><item><title><![CDATA[RP2350MQTTクライアントをRustで実装したい。]]></title><description><![CDATA[
 ゴール
rp2350(Raspberry pi pico 2 w)をMQTTクライアントとして実装する。

 環境

Mac Book pro m3
raspberry pi pico 2 w
open wrt router(GLiNET)

Mosquitto(MQTTブローカー)




 方針
現時点で、Wifi接続ができる状態が完成しています。
まずはMQTTのロジックについて再確認して、最小限のpub subができることを確認したいと思います。

 MQTT
https://qiita.com/kbys-fumi/items/3ebb31a94fd3f9cc0b7a
こちら...]]></description><link>https://zenn.dev/moore_s/articles/4c07750bb179d4</link><guid isPermaLink="true">https://zenn.dev/moore_s/articles/4c07750bb179d4</guid><pubDate>Thu, 18 Sep 2025 02:21:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VaP2HJVp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RP2350MQTT%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:moore%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzZmY4MjU2MDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>moore</dc:creator></item><item><title><![CDATA[Azure VMでRust製eBPF(XDP)プログラムを動かす]]></title><description><![CDATA[Azure VM で Rust(Aya)のeBPF(XDP)プログラムを動かすまでの環境構築手順を記載します。
Azure VM 上で eBPF(XDP)を実行している記事はなかったので、手順を残しておきます。
環境構築時・プログラム実行時にエラーも出ていたので、誰かの参考になれば幸いです。

 環境
使用した OS, VMのサイズは以下の通りです。

OS : Ubuntu 24.04
サイズ : Standard B2s (2 vcpu 数、4 GiB メモリ)


 環境構築
以降の手順はすべて Azure VM に ssh ログインして実行しています。

 必要なパッケージをイン...]]></description><link>https://zenn.dev/shu_kitamura/articles/7c6eeb527197fc</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/7c6eeb527197fc</guid><pubDate>Wed, 17 Sep 2025 15:11:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zJVGAU2M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Azure%2520VM%25E3%2581%25A7Rust%25E8%25A3%25BDeBPF%2528XDP%2529%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[rp2350にrustで書きたい〜picotool苦労編〜]]></title><description><![CDATA[
 目的
Raspberry pi pico2 wでRustによる組み込み開発を行いと考えましたが、思ったよりも苦労したので書き留めます。

 変遷
以前にembassyの公式リポジトリをクローンして実装していたのですが、それをローカルで初めから作ろうとした際に、Block loop というエラーに悩まされました。
probe-rsを使用するという手もありましたが、pico2wのデバッグソケットのケーブルを持っていなかったため、picotoolによる書き込みにチャレンジ中です。

 embassyのexample
Rustの組み込みフレームワークであるEmbassyのexampleにはp...]]></description><link>https://zenn.dev/moore_s/articles/5cd78a8364f68d</link><guid isPermaLink="true">https://zenn.dev/moore_s/articles/5cd78a8364f68d</guid><pubDate>Tue, 16 Sep 2025 03:59:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QnCTWO7N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rp2350%25E3%2581%25ABrust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258D%25E3%2581%259F%25E3%2581%2584%25E3%2580%259Cpicotool%25E8%258B%25A6%25E5%258A%25B4%25E7%25B7%25A8%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:moore%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkzZmY4MjU2MDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>moore</dc:creator></item><item><title><![CDATA[`Result<T, E>` のよく使うメソッドを書いてみる]]></title><description><![CDATA[
 Result&lt;T, E&gt; のよく使うメソッドを書いてみる
前回 は Result&lt;T, E&gt; の基本的な使い方と bool に変換するメソッドと中身を取り出すメソッドについて書きました。
今回はよく使うメソッドを書いてみます。以前 Option&lt;T&gt; のメソッドについて書いたのだけど、それと似た感じになってしまいそうなので、よく使うものに絞ってみます。

 Result&lt;T, E&gt; を Option&lt;T&gt; / Option&lt;E&gt; にする (中身があれば取り出す) メソッド
ok と err 。 ok は Ok の...]]></description><link>https://zenn.dev/doctormate/articles/0142554bb24491</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/0142554bb24491</guid><pubDate>Tue, 16 Sep 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yI_b4gtI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2560Result%253CT%252C%2520E%253E%2560%2520%25E3%2581%25AE%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[技術調査 - Qlty]]></title><description><![CDATA[
 ■はじめに
Qlty (qlty.sh) は、静的解析、フォーマット、セキュリティスキャン、コードカバレッジ測定といった多彩な機能を一つのツールセットに統合した、モダンなコードヘルスプラットフォームです。
開発プロセスにおける「レビューの高速化」「解析ノイズの削減」「ツールの乱立防止」「技術的負債の可視化」といった共通の課題に対し、Qltyは高速なCLIと強力なクラウドサービスの連携によって、開発者個人とチーム全体の生産性を向上させる包括的な解決策を提供します。

 ■概要
Qltyは、複数のプログラミング言語に対応し、コード品質管理を効率化します。

 ●プラットフォームの構成
Q...]]></description><link>https://zenn.dev/suwash/articles/qlty_20250916</link><guid isPermaLink="true">https://zenn.dev/suwash/articles/qlty_20250916</guid><pubDate>Mon, 15 Sep 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qSXnTJCG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%25E6%258A%2580%25E8%25A1%2593%25E8%25AA%25BF%25E6%259F%25BB%2520-%2520Qlty%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suwa-sh%2520%252F%2520%25E8%25AB%258F%25E8%25A8%25AA%25E7%259C%259F%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlQ0cjdIdGJrWG10aG42OE53dmlHWXBLcGI5VWQ5N3hnRS1aQnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suwa-sh / 諏訪真一</dc:creator></item><item><title><![CDATA[Rust素人が所有権を完全に理解しようとした話]]></title><description><![CDATA[!
この記事は Zennfes2025 フリーテーマ の参加記事です。


 0 この記事について
この記事はRust素人の私が、Rustの所有権について理解を深めるために調べた内容をまとめたものです。
筆者はRustを始めて数か月であり、所有権についてまだ完全には理解していません。
そのため、この記事では公式ドキュメントや他の参考資料を基に、所有権の基本的な概念と仕組みについて理解を深めていきます。

 1 Rustの所有権とは
Rustのメモリ管理の仕組みの一つで、コンパイル時のルールによりメモリの安全性を保証し、実行時に安全にメモリが解放されることを助ける概念です。これにより安全性...]]></description><link>https://zenn.dev/hashisato/articles/21ebf2d2b24679</link><guid isPermaLink="true">https://zenn.dev/hashisato/articles/21ebf2d2b24679</guid><pubDate>Mon, 15 Sep 2025 12:25:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eiCel412--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E7%25B4%25A0%25E4%25BA%25BA%25E3%2581%258C%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AF%25E3%2581%2597%25E3%2581%2595%25E3%2581%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyYjZmZDIyYjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>はしさと</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC423 A～D)]]></title><description><![CDATA[AtCoder Beginner Contest 423のA～D問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC423-A
問題
https://atcoder.jp/contests/abc423/tasks/abc423_a
銀行に預けている残高から引き下ろすことができる最大金額を求める問題です。
解説
1回の引き出しで1000円を引き出すことができ、その際に手数料として C 円が発生します。
そのため、残高 X を (1000 + C) で整数除算することで、引き出し可能な回数が求められます。
引き出し可能な回数に1000円を掛...]]></description><link>https://zenn.dev/nakst_hide/articles/97c1b7448b5b1d</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/97c1b7448b5b1d</guid><pubDate>Mon, 15 Sep 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ih338jAo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC423%2520A%25EF%25BD%259ED%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item></channel></rss>