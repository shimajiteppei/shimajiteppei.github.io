<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-09T20:47:34+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090637</id>
    <published>2025-10-09T20:47:34+09:00</published>
    <updated>2025-10-09T20:47:34+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/e85a5b35eb114e4a728b"/>
    <url>https://qiita.com/nozomi2025/items/e85a5b35eb114e4a728b</url>
    <title>【Kotlin】Kotlin 拡張プロパティ × デリゲート (`by`) 徹底解説— `lazy`, `observable`, `map` で動的プロパティを作る</title>
    <content type="text">はじめに
Kotlin ではプロパティを 他のオブジェクトや関数に“委譲”する ことができます。
この仕組みが「プロパティデリゲート（Property Delegation）」であり、
構文はおなじみの  by。
さらに、拡張プロパティ（Extension Propert...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090604</id>
    <published>2025-10-09T18:54:21+09:00</published>
    <updated>2025-10-09T18:54:21+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/fea95fe1b57840fcafd6"/>
    <url>https://qiita.com/nozomi2025/items/fea95fe1b57840fcafd6</url>
    <title>【Kotlin】Kotlin 拡張プロパティ（Extension Property）徹底解説</title>
    <content type="text">はじめに
Kotlin には 拡張関数（Extension Function） と同じく、
既存のクラスに「プロパティ」を後付けできる機能、
拡張プロパティ（Extension Property） があります。
この仕組みを使うと、ライブラリや標準クラスにも新しい見た目の...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090601</id>
    <published>2025-10-09T18:35:57+09:00</published>
    <updated>2025-10-09T18:35:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/d59eeebd8899ef646e2a"/>
    <url>https://qiita.com/nozomi2025/items/d59eeebd8899ef646e2a</url>
    <title>【Kotlin】infix × inline × reified」で実現する型安全なユーティリティ設計</title>
    <content type="text">はじめに
Kotlin の強力な3要素

infix（中置記法）
inline（インライン化）
reified（実行時に型情報を保持）

を組み合わせることで、型安全かつ表現力豊かなDSL風ユーティリティを作ることができます。

この記事のゴール
この記事を読めば、次の...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2090599</id>
    <published>2025-10-09T18:21:29+09:00</published>
    <updated>2025-10-09T18:21:29+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/5cd1b8c75cc7e6061eb2"/>
    <url>https://qiita.com/nozomi2025/items/5cd1b8c75cc7e6061eb2</url>
    <title>【Kotlin】Kotlinの `infix` 関数を徹底解説 — ドットも括弧もいらない自然な関数呼び出し</title>
    <content type="text">はじめに
Kotlin では infix 修飾子を使うことで、ドット（.）と括弧（()）を省略して関数を呼び出すことができます。
これによりコードがまるで自然言語やDSL（Domain Specific Language）のように読みやすくなります。

基本構文
inf...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
