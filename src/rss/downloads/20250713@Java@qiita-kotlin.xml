<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-07-13T19:07:09+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2053046</id>
    <published>2025-07-13T19:07:09+09:00</published>
    <updated>2025-07-13T19:07:09+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Tsubasa12/items/23cfede85c9dab8bd921"/>
    <url>https://qiita.com/Tsubasa12/items/23cfede85c9dab8bd921</url>
    <title>JetpackComposeでクリックしたらViewを振動させる</title>
    <content type="text">実践
@Composable
fun ClickToShakeView() {
    val shakeOffset = remember { Animatable(0f) }
    val coroutineScope = rememberCoroutineScop...</content>
    <author>
      <name>Tsubasa12</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2052961</id>
    <published>2025-07-13T16:03:00+09:00</published>
    <updated>2025-07-13T16:03:00+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/YuukiYoshida/items/2b297239bcee0850a455"/>
    <url>https://qiita.com/YuukiYoshida/items/2b297239bcee0850a455</url>
    <title>【Android】いま改めて考える「MVVM + Clean Architecture」はなぜ選ばれ続けているのか？</title>
    <content type="text">はじめに
Androidアプリ開発では長らく「MVVM + Clean Architecture」が定番の構成として扱われてきました。
Jetpack Composeが主流となった今も、この構成は大きくは変わらず、多くのプロジェクトに採用され続けています。
でも──本当に...</content>
    <author>
      <name>YuukiYoshida</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2052713</id>
    <published>2025-07-12T22:58:26+09:00</published>
    <updated>2025-07-12T22:58:26+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Sniimura0623/items/16cb399b6c376894175e"/>
    <url>https://qiita.com/Sniimura0623/items/16cb399b6c376894175e</url>
    <title>競技プログラミング＃8-10（Kotlin）</title>
    <content type="text">AtCode
以下サイトの解説を順からまとめていきます。
https://atcoder.jp/contests/tessoku-book

解答テクニック
差分配列
これは「範囲に対して一気に足し算・引き算するためのテクニック」です。
例：
以下のようなマスがあったとし...</content>
    <author>
      <name>Sniimura0623</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2052405</id>
    <published>2025-07-12T10:36:59+09:00</published>
    <updated>2025-07-12T10:39:24+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Daiji256/items/2a9b4690f209db1fe878"/>
    <url>https://qiita.com/Daiji256/items/2a9b4690f209db1fe878</url>
    <title>EntryPoint を使った Composable 関数への依存性注入 with Hilt &amp; Compose</title>
    <content type="text">Composable 関数内で、Hilt によって @Provides や @Binds で提供されたオブジェクトを直接的に扱いたい場面があります。
通常、Hilt を用いた依存性注入は ViewModel を経由して行います。たとえば @HiltViewModel に依存...</content>
    <author>
      <name>Daiji256</name>
    </author>
  </entry>
</feed>
