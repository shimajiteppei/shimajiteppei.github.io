<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 24 Jan 2025 10:18:59 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TypeScript 開発 入門 〜環境構築からアプリ作成まで〜]]></title><description><![CDATA[TypeScriptの概要やメリットを紹介しつつ、JavaScript資産との高い互換性や静的型付けによる保守性の向上などを解説する内容です。続いて、Node.jsの導入やVSCode設定など開発環境の準備から、基本文法・型システム・インターフェース・クラス・ジェネリクスといったTypeScriptの特徴的機能を一通り学び、実際にTodoアプリを作りながら開発の流れを体験します。さらに、周辺ツールの利用方法やエラー対処、React/Vue/Node.jsとの連携例など実務で役立つ知識にも触れ、最後に設定ファイルや便利な型ユーティリティ集を付録としてまとめた、TypeScript入門から実践までを網羅する構成になっています。]]></description><link>https://zenn.dev/ippei523/books/6b5c153743be13</link><guid isPermaLink="true">https://zenn.dev/ippei523/books/6b5c153743be13</guid><pubDate>Fri, 24 Jan 2025 08:52:42 GMT</pubDate><dc:creator>暇人エンジニア</dc:creator></item><item><title><![CDATA[Canvasでズーム＆描画！インタラクティブなホワイトボードを構築 (1)]]></title><description><![CDATA[
 はじめに
こんにちは！PortalKeyの渋谷です。
今回はプロジェクトでホワイトボードが必要になったため、見様見真似で作った結果結構苦しんだ過程と共に、実装方法を紹介していきます。
（Canvasをズームした時にガビガビになってる人の助けにもなるかもしれません。）
今回は第一弾！
必要最低限の操作と、マーカーで書いて遊べるようにします。
完成イメージはこちらです。


 開発環境


TypeScript v5.5.4

react v18.3.1

tailwindcss v3.4.10

※ HTML5の&lt;canvas&gt;が使えれば、同じ環境でなくても問題ありません！...]]></description><link>https://zenn.dev/portalkeyinc/articles/dd38ad6ccd83d3</link><guid isPermaLink="true">https://zenn.dev/portalkeyinc/articles/dd38ad6ccd83d3</guid><pubDate>Fri, 24 Jan 2025 05:17:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3YZzU_mE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Canvas%25E3%2581%25A7%25E3%2582%25BA%25E3%2583%25BC%25E3%2583%25A0%25EF%25BC%2586%25E6%258F%258F%25E7%2594%25BB%25EF%25BC%2581%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25AA%25E3%2583%259B%25E3%2583%25AF%25E3%2582%25A4%25E3%2583%2588%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%2520%25281%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:da-shibuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM2Y2JkM2UxMzEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:PortalKey%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzR2Y0dCWGJ5bmIwc3k4TnQyZll4aU8xQ2xBN1ZwNzAtR2RJeTR4WW1uc2JEMEhRPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>da-shibuya</dc:creator></item><item><title><![CDATA[【フレームワーク不要！】モーダルを作って学ぶ、TypeScriptの具体的な使い方]]></title><description><![CDATA[Web サイト制作がメインのコーダー/エンジニアの皆さん、TypeScript を使っていますか？
TypeScript 導入の参考記事がアプリ開発向けのものばかりで、サイト制作の現場にはどうやって導入するんだ、？となる方に、記事を書いてみました。

 この記事を書こうと思った理由

入門のチュートリアルや、型について学んでみたけど、実際にどう使うの？という方に向けての知見共有のため
TypeScript は React,Vue 等と合わせて使う記事や検索結果が多く、サイト制作向けのものが少なかったため
Web サイト制作のコーダー/エンジニアが、TypeScript に入門するため

...]]></description><link>https://zenn.dev/taku1116/articles/e73f72d961db11</link><guid isPermaLink="true">https://zenn.dev/taku1116/articles/e73f72d961db11</guid><pubDate>Fri, 24 Jan 2025 02:16:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TzCiq_OY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E4%25B8%258D%25E8%25A6%2581%25EF%25BC%2581%25E3%2580%2591%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2580%2581TypeScript%25E3%2581%25AE%25E5%2585%25B7%25E4%25BD%2593%25E7%259A%2584%25E3%2581%25AA%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taku%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnlhZ3d2T2FJRExLV2pYWVVkLXNpUDVzM1c0TXRHQ1pzbUVJZWpKTDVsMHMxYk9CUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taku</dc:creator></item><item><title><![CDATA[MUI@6 でカスタムパレットを型安全に定義する]]></title><description><![CDATA[自身が定義したプロパティをコンポーネント側でも型定義する際、バージョン5と6で定義方法が変わったので備忘録として残します。
今回は独自で定義した gray というプロパティをコンポーネントでも候補として出せるようにする方法です。

 MUI@5 でやっていた型定義
検索するとよく出てくるやり方。
declare module '@mui/material/styles' に定義するのは Palette と PaletteOptions を extends する方法で定義します。
const CustomPalettes = {
  /** グレースケール */
  gray: {
   ...]]></description><link>https://zenn.dev/seventhseven07/articles/e937e14a80ad2c</link><guid isPermaLink="true">https://zenn.dev/seventhseven07/articles/e937e14a80ad2c</guid><pubDate>Fri, 24 Jan 2025 00:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VJaa0i0y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MUI%25406%2520%25E3%2581%25A7%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2591%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shumpei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyY2ZhOWM5YTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shumpei</dc:creator></item><item><title><![CDATA[Biome の導入 〜 設定まで]]></title><description><![CDATA[最近巷で話題の biome を ESLint と  Prettier の代わりに導入してみようと思います。
導入 〜 設定までの備忘録として記事にしようと思います。
今回はReact や Next のプロジェクトが既に立ち上がってる状態を前提としています。
この記事では npm で導入していきます。

 Biome とは
もともと Rome という、lint や format、build、test といった開発ツールを１つに集約することを目指したプロジェクトがありました。
この Rome の主要メンバーによってフォークされて Biome が生まれたらしいです。
Biome は JavaS...]]></description><link>https://zenn.dev/cami_crane/articles/e43121c9f82b6c</link><guid isPermaLink="true">https://zenn.dev/cami_crane/articles/e43121c9f82b6c</guid><pubDate>Thu, 23 Jan 2025 13:24:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GL_JN70---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%2520%25E3%2581%25AE%25E5%25B0%258E%25E5%2585%25A5%2520%25E3%2580%259C%2520%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2582%258C%25E3%2581%2584%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzOGEzZTlhNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くれいん</dc:creator></item><item><title><![CDATA[ノーコードで有料のオンラインサロンを作ってみた]]></title><description><![CDATA[
 試しにやってみたらできた？
Next.jsを使用して有料のオンラインサロンのサービスを作ろうとしたがなかなか進まずノーコードでできないかなと考えていた💦
今だと便利なSaasとか出てきてるのでそれぽいのがあった!
Reactで開発されたと思われるYOORというサービスですね。
作った初日にメンテナンスしてる表示が出てた？
1/23と書いてあったな。明日か。今日は1/22だ。
https://share.yoor.jp/door/YoorID_0106
ところで、俺ちゃんって何って話ですが元ネタはデッドプールって映画の主人公が自分のことを俺ちゃんと言ってたので気に入って私も自分のことを...]]></description><link>https://zenn.dev/joo_hashi/articles/d19faacba57b7e</link><guid isPermaLink="true">https://zenn.dev/joo_hashi/articles/d19faacba57b7e</guid><pubDate>Wed, 22 Jan 2025 14:47:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qKKBJQ7d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258E%25E3%2583%25BC%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25A7%25E6%259C%2589%25E6%2596%2599%25E3%2581%25AE%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25AD%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:JboyHashimoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjOTBiY2M0M2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>JboyHashimoto</dc:creator></item><item><title><![CDATA[【React】font-awesomeのインストールと使い方（Next.js, TypeScript）]]></title><description><![CDATA[Reactでfont-awesomeを使いたいと思い、公式ドキュメントをさらったので、
意訳しつつ簡単にまとめました。
Reactだけでなく、Next.jsとTypeScriptでの使い方も書いてます。
公式ドキュメントはこちら

 インストール
各種パッケージをインストールします。

 1. SVGコアパッケージのインストール
最初にコアパッケージをインストールします。
npm
npm i --save @fortawesome/fontawesome-svg-core
yarn
yarn add @fortawesome/fontawesome-svg-core

 2. アイコンパ...]]></description><link>https://zenn.dev/iizukasan/articles/font-awesome_with_react</link><guid isPermaLink="true">https://zenn.dev/iizukasan/articles/font-awesome_with_react</guid><pubDate>Wed, 22 Jan 2025 14:32:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ATuFEwGG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591font-awesome%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25EF%25BC%2588Next.js%252C%2520TypeScript%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:iizk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwMGM0NzA2ZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>iizk</dc:creator></item><item><title><![CDATA[【React】map関数を使用して画面に表示する]]></title><description><![CDATA[map関数を使用してJSXを画面に表示する際に沼にハマったので備忘録としてメモに残す。

 誤りのコード
type Books = {
    src: Book[];
}

type Book = {
    isbn: string,
    title: string,
    price: number
}

export default function ForList({src}: Books) {
    return (
        &lt;dl&gt;
            {
                src.map((elem: Book) =&gt; ...]]></description><link>https://zenn.dev/atsupooon/articles/90555bf6c0ded4</link><guid isPermaLink="true">https://zenn.dev/atsupooon/articles/90555bf6c0ded4</guid><pubDate>Wed, 22 Jan 2025 12:41:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U27yMSgV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591map%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%25A6%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%25AB%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Atsu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwODkyNTU3YmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Atsu</dc:creator></item><item><title><![CDATA[Cloudflare Workers AI 使ってみた「テキスト要約編」]]></title><description><![CDATA[
 はじめに
こんにちは、ikechan こといけがわです。
最近、Cloudflare生成AIの「BART Large CNN」 というモデルを見つけ、ChatGPTとの違いが気になり試してみました。このモデルはテキスト要約に特化しており、Cloudflare Workers AIを使えばサーバーレス環境で簡単に利用できます。
実際に使ってみた結果や、ChatGPTとの比較について具体例を交えながら共有します！

 前提条件
この記事を進めるにあたり、以下の準備が必要です。

Cloudflare アカウント: Workers AIの利用に必須
Node.js 開発環境: 今回はBun...]]></description><link>https://zenn.dev/toraco/articles/82dc27ebe702d2</link><guid isPermaLink="true">https://zenn.dev/toraco/articles/82dc27ebe702d2</guid><pubDate>Wed, 22 Jan 2025 12:22:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZBHWwvG4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Workers%2520AI%2520%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%258C%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E8%25A6%2581%25E7%25B4%2584%25E7%25B7%25A8%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:ikechan%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5ZTBhNDI3ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:toraco%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2581%25AE%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RlZTIxYjg3YWYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ikechan</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜ヒストグラム表示（021/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の21本目です。

 前回
https://zenn.dev/nyagato_00/articles/c25f0f201aef6a

 実装

 お題

ヒストグラム正規化を実装せよ。
ヒストグラムは偏りを持っていることが伺える。 例えば、0に近い画素が多ければ画像は全体的に暗く、255に近い画素が多ければ画像は明るくなる。 ヒストグラムが局所的に偏っていることをダイナミックレンジが狭いなどと表現する。 そのため画像を人の目に見やすくするために、ヒストグラムを正規化したり平坦化したりなどの処...]]></description><link>https://zenn.dev/nyagato_00/articles/37c98e95fee7ed</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/37c98e95fee7ed</guid><pubDate>Wed, 22 Jan 2025 10:44:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i8ScjyUi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2583%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E8%25A1%25A8%25E7%25A4%25BA%25EF%25BC%2588021%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[TypeScript における schema と type の違い]]></title><description><![CDATA[
 これは何？


schema と type の違いってなんだっけ…となった時にChatGPTに聞いた時のメモ。


 schema と type

 1. schema（Zod スキーマなど）



定義目的: スキーマはデータ構造やバリデーションルールを定義するためのものです。


ランタイムで利用可能: スキーマはランタイムでも使えるため、データの検証（validation）やデコード（parsing）に利用できます。


ツールの役割: 例えば、Zod を使用したスキーマでは、データを安全に型変換することや、無効なデータのチェックを行えます。


コード例:
export co...]]></description><link>https://zenn.dev/murtmo/articles/c9353cc8acc770</link><guid isPermaLink="true">https://zenn.dev/murtmo/articles/c9353cc8acc770</guid><pubDate>Wed, 22 Jan 2025 10:38:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m4HF-G88--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%2520schema%2520%25E3%2581%25A8%2520type%2520%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:murtmo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0ZjFhNzFhNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>murtmo</dc:creator></item><item><title><![CDATA[Date.toISOString は常にUTCの時刻を返す]]></title><description><![CDATA[
 まとめ
実行環境が JST（日本標準時、UTC+9）の場合でも、toISOString の出力は 常に UTC の時刻として表示されます。これは、toISOString が実行環境のタイムゾーンに影響を受けず、UTC の形式で日時を表すからです。なの、実行環境は出力結果に影響しません。

 サンプルコード
const date = new Date("2025-01-01T00:00:00+09:00");
console.log(date.toISOString()); // UTC 時刻で表示
// 出力結果: 2024-12-31T15:00:00.000Z

 解説

入力さ...]]></description><link>https://zenn.dev/k_kazukiiiiii/articles/1bc422a8176b8e</link><guid isPermaLink="true">https://zenn.dev/k_kazukiiiiii/articles/1bc422a8176b8e</guid><pubDate>Wed, 22 Jan 2025 10:24:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--42GFhnie--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Date.toISOString%2520%25E3%2581%25AF%25E5%25B8%25B8%25E3%2581%25ABUTC%25E3%2581%25AE%25E6%2599%2582%25E5%2588%25BB%25E3%2582%2592%25E8%25BF%2594%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kimura%2520Kazuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2MDJhZGIxMWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kimura Kazuki</dc:creator></item><item><title><![CDATA[【TypeScript基礎①】型まとめ]]></title><description><![CDATA[
 TypeScriptの型について
TypeScriptの型にはプリミティブ型とオブジェクト型がある

 プリミティブ型
TypeScriptにおける基本的な型



型
説明




boolean
trueまたはfalseの真偽値


number
0や0.1のような数値


string
"Hello World"のような文字列


undefined
値が未定義であることを表す値


null
値がないことを表す値


symbol
一意で不変の値


bigint
number型では扱えない大きな整数型



undefinedとnullの違い
表示したい内容


 オブジェ...]]></description><link>https://zenn.dev/mof_moriko/articles/68d73686a26252</link><guid isPermaLink="true">https://zenn.dev/mof_moriko/articles/68d73686a26252</guid><pubDate>Wed, 22 Jan 2025 10:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f0E2gJ5A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E5%259F%25BA%25E7%25A4%258E%25E2%2591%25A0%25E3%2580%2591%25E5%259E%258B%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:moriko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkMGY2YWE3OTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>moriko</dc:creator></item><item><title><![CDATA[PrismaとZodが導く、型安全なAPI開発の省エネルート]]></title><description><![CDATA[
 効率化と品質向上を実現する実践的アプローチ
昨今の API 開発において、OpenAPI (Swagger) ドキュメントの重要性は増すばかりです。しかし、手作業によるドキュメント作成・更新は、開発者の大きな負担となり、コードとの不整合も発生しやすいという課題があります。
本記事では、Prisma と Zod を組み合わせることで、OpenAPI ドキュメントの生成を自動化し、型安全で効率的な API 開発を実現する方法を紹介します。

 Prisma 生成の Zod スキーマを活用するメリット
この手法の鍵は、Prisma が zod-prisma-types によって自動生成する...]]></description><link>https://zenn.dev/t09tanaka/articles/480321b4c4eb44</link><guid isPermaLink="true">https://zenn.dev/t09tanaka/articles/480321b4c4eb44</guid><pubDate>Wed, 22 Jan 2025 09:45:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7QkvStuI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25A8Zod%25E3%2581%258C%25E5%25B0%258E%25E3%2581%258F%25E3%2580%2581%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAAPI%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AE%25E7%259C%2581%25E3%2582%25A8%25E3%2583%258D%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t09tanaka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0NjdlMmQ2MTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t09tanaka</dc:creator></item><item><title><![CDATA[テストダブルとは何か?]]></title><description><![CDATA[テストダブルという言葉をご存知でしょうか? 仮に知らずとも、多くのソフトウェアエンジニアはテストダブルを利用しています。たとえば Java の世界で Mockito を使ったり、JavaScript の世界で Vitest/Jest を使う場合、ほぼ間違いなくテストダブルを使っています。
本物の実装を模倣するコードのことを、テストダブルと言います。
テストダブルには、いくつか種類があります。よく名前が知られているのは「モック」です。テストについて話すとき「関数をモックする」という表現をしたことはありませんか? 多くの場合「本物と違う振る舞いをさせる」ことを「モックする」と 言います。しか...]]></description><link>https://zenn.dev/mahata/articles/test-doubles</link><guid isPermaLink="true">https://zenn.dev/mahata/articles/test-doubles</guid><pubDate>Wed, 22 Jan 2025 08:08:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9SVNP_R8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2580%25E3%2583%2596%25E3%2583%25AB%25E3%2581%25A8%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258B%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasunori%2520MAHATA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pNUGNmdW9MOU95NkxjbTlwSjk0d1Joc1dLS2ZxdVBodUllbFdxNmc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasunori MAHATA</dc:creator></item><item><title><![CDATA[今話題のClineを使って'じゃんけん'してみた]]></title><description><![CDATA[
 Clineとは
Clineは、フロントエンドの開発を支援するツールです。
https://github.com/cline/cline

Claude 3.5 Sonnetのエージェントコーディング機能により、Clineは複雑なソフトウェア開発タスクをステップバイステップで処理することができます。ファイルの作成と編集、大規模なプロジェクトの探索、ブラウザの使用、ターミナルコマンドの実行（許可を与えた後）などが可能なツールを使って、コード補完や技術サポート以上の方法であなたを支援することができます。クラインはモデル・コンテキスト・プロトコル（MCP）を使って新しいツールを作成し、自身の...]]></description><link>https://zenn.dev/shunsuke_stack/articles/b7394a213a273b</link><guid isPermaLink="true">https://zenn.dev/shunsuke_stack/articles/b7394a213a273b</guid><pubDate>Tue, 21 Jan 2025 15:29:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vhnVWTy3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%258A%25E8%25A9%25B1%25E9%25A1%258C%25E3%2581%25AECline%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2527%25E3%2581%2598%25E3%2582%2583%25E3%2582%2593%25E3%2581%2591%25E3%2582%2593%2527%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nakajima.js%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhZmNlYzMzOWYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nakajima.js</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜ヒストグラム表示（020/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の20本目です。

 前回
https://zenn.dev/nyagato_00/articles/34c942089987d7

 実装

 お題

matplotlibを用いてimori_dark.jpgのヒストグラムを表示せよ。
ヒストグラムとは画素の出現回数をグラフにしたものである。 matplotlibではhist()という関数がすでにあるので、それを利用する。

https://github.com/minido/Gasyori100knock-1/tree/master/Qu...]]></description><link>https://zenn.dev/nyagato_00/articles/c25f0f201aef6a</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/c25f0f201aef6a</guid><pubDate>Tue, 21 Jan 2025 10:14:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0Y9DmQdc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2583%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E8%25A1%25A8%25E7%25A4%25BA%25EF%25BC%2588020%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[今更ながらReact17 → React18でつまづいた所]]></title><description><![CDATA[株式会社イルシルCTO 倉橋康熙です。
業務でReact17→React18のアップデートを行ったので備忘録に。

 1. useHistoryは使えない
useHistoryは廃止されてしまったのでhistory.pushやhistory.replace、hisotry.location.pathname等は全て使えません。
useNavigation、useLocationを使いましょう
// react-douter-dom v5
const history = useHistory();
history.push("/")
history.replace("/")
history...]]></description><link>https://zenn.dev/irusiru/articles/f9ba3ea9df7dcd</link><guid isPermaLink="true">https://zenn.dev/irusiru/articles/f9ba3ea9df7dcd</guid><pubDate>Tue, 21 Jan 2025 07:16:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZJtiB8Eg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%258A%25E6%259B%25B4%25E3%2581%25AA%25E3%2581%258C%25E3%2582%2589React17%2520%25E2%2586%2592%2520React18%25E3%2581%25A7%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%25A5%25E3%2581%2584%25E3%2581%259F%25E6%2589%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%2580%2589%25E6%25A9%258B%25E5%25BA%25B7%25E7%2586%2599%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBkYjc5MDE3NjIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25B7%25E3%2583%25AB%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUzZTc3MmNjY2MuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>倉橋康熙</dc:creator></item><item><title><![CDATA[Model Context Protocol (MCP): 生成AIと外部ツールを繋ぐためのプロトコル]]></title><description><![CDATA[2024/11/26に、AnthropicはModel Context Protocol(MCP)という新たなオープンソースプロジェクトを発表した。
https://www.anthropic.com/news/model-context-protocol
これは、生成AIを活用する上で不可欠な「生成AIと外部のデータやツールを繋ぐ部分」を共通化し、再利用可能にするためのものだ。

 概要
MCPは、JSON-RPCに基づいたプロトコルであり、AI本体側がクライアント、外部ツール側がサーバーになる。
2024/12現在、デスクトップ版ClaudeがMCPに対応している。
以下のように、O...]]></description><link>https://zenn.dev/herp_inc/articles/00917098b3ffd3</link><guid isPermaLink="true">https://zenn.dev/herp_inc/articles/00917098b3ffd3</guid><pubDate>Tue, 21 Jan 2025 02:12:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fy58Wyb0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Model%2520Context%2520Protocol%2520%2528MCP%2529%253A%2520%25E7%2594%259F%25E6%2588%2590AI%25E3%2581%25A8%25E5%25A4%2596%25E9%2583%25A8%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E7%25B9%258B%25E3%2581%2590%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2581%25BF%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc4YzE2OWQxNzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:HERP%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkwYzMxNmMzYmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふみ</dc:creator></item><item><title><![CDATA[【2025年最新版】Ruby on Rails + Vite + React + TypeScript の開発環境を作る方法　]]></title><description><![CDATA[2025年のWeb開発、みなさんはどんな開発環境で進めていますか？
Ruby on Railsは今でも強力なWebフレームワークとして君臨していますが、フロントエンド開発の世界はどんどん進化しています。特にTypeScriptとReactの組み合わせは、もはや現場では当たり前の選択になってきています。
そんな中で注目したいのが「Vite」です。従来のWebpackと比べると、圧倒的に高速な開発サーバーとHMR（ホットリロード）機能を提供してくれます。実際の開発現場では、この「爆速」な開発体験がかなり重宝されています。
今回は、RailsにVite、React、TypeScriptを組み合...]]></description><link>https://zenn.dev/yukito0616/articles/6fd49df4c6cd58</link><guid isPermaLink="true">https://zenn.dev/yukito0616/articles/6fd49df4c6cd58</guid><pubDate>Tue, 21 Jan 2025 00:45:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z_3PcaAR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%25902025%25E5%25B9%25B4%25E6%259C%2580%25E6%2596%25B0%25E7%2589%2588%25E3%2580%2591Ruby%2520on%2520Rails%2520%252B%2520Vite%2520%252B%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yukito%2520Ohira%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IwMDI2NDc1YmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yukito Ohira</dc:creator></item></channel></rss>