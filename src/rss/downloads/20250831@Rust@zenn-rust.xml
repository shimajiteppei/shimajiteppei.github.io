<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 31 Aug 2025 00:14:36 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[カラム型 vs JSON文字列格納のパフォーマンス比較]]></title><description><![CDATA[
 はじめに
データベース設計において、データの格納方式はパフォーマンスに大きな影響を与えます。今回は、カラム型ストレージとJSON文字列格納のパフォーマンスを10万件のデータで比較検証しました。
特に注目したのは、JSON型が実際には「JSON構造体を文字列として格納」する方式であることによる性能への影響です。

 比較対象の実装方式

 カラム型ストレージ（正規化されたテーブル構造）
CREATE TABLE users_column (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VA...]]></description><link>https://zenn.dev/collabostyle/articles/cae684f473e35e</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/cae684f473e35e</guid><pubDate>Sat, 30 Aug 2025 21:38:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r95EhQsz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2583%25A9%25E3%2583%25A0%25E5%259E%258B%2520vs%2520JSON%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E6%25A0%25BC%25E7%25B4%258D%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yushi-s%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1DWlFPZDBzMmF6VWgtQ0lVZjRvTnVxeW5ZUUswU0g2N3M3M1hVbjFvQldPRDJBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yushi-s</dc:creator></item><item><title><![CDATA[Serdeでfalseのフィールドを無視する]]></title><description><![CDATA[Using derive - SerdeのサンプルコードにnameというOption&lt;String&gt;のフィールドを追加した次のコードからはじめましょう。
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
struct Point {
    x: i32,
    y: i32,
    name: Option&lt;String&gt;,
}

fn main() {
    let point = Point { x: 1, y: 2, name: None };...]]></description><link>https://zenn.dev/akrisn/articles/serde_skip_bool</link><guid isPermaLink="true">https://zenn.dev/akrisn/articles/serde_skip_bool</guid><pubDate>Sat, 30 Aug 2025 06:44:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rJtNvOzt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Serde%25E3%2581%25A7false%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E7%2584%25A1%25E8%25A6%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akrisn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4NGY4MTFkZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akrisn</dc:creator></item><item><title><![CDATA[Rust 小ネタ: featureの不整合をコンパイルエラーにする方法（用法注意）]]></title><description><![CDATA[こんにちは、Fairy Devicesの吉川（@emergent: X, GitHub）です。
Rustでライブラリクレートを作っていると、ついついいろんなfeatureを足してしまいがちです。featureで有効になる機能を追加していると、#[cfg(feature = "...")]のような条件付きコンパイルを使うことが増えます。
feature同士の機能がお互い独立していればよいのですが、場合によっては「2つのうちのどちらか片方だけを有効にできる」ような実装をしたいときもあるでしょう。たとえば、ライブラリクレート内で依存するHTTPクライアントや非同期ランタイムを選択できるようにす...]]></description><link>https://zenn.dev/fairydevices/articles/d197dd92e31757</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/d197dd92e31757</guid><pubDate>Fri, 29 Aug 2025 05:31:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--omeL60w9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520feature%25E3%2581%25AE%25E4%25B8%258D%25E6%2595%25B4%25E5%2590%2588%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25EF%25BC%2588%25E7%2594%25A8%25E6%25B3%2595%25E6%25B3%25A8%25E6%2584%258F%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:emergent%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2NzM5OTE5NzkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>emergent</dc:creator></item><item><title><![CDATA[ABC007 C - 幅優先探索]]></title><description><![CDATA[こんにちは。
ABC007 C - 幅優先探索をRustで解きました。
https://atcoder.jp/contests/abc007/tasks/abc007_3
ただ幅優先探索するだけで考察することもないので、ChatGPTにコードへのコメント付与と、提出コードの概要を書いてもらいました。
use proconio::input;
use std::collections::VecDeque;

fn main() {
    input! {
        r: usize,
        c: usize,
        s: (usize, usize),
    ...]]></description><link>https://zenn.dev/kenyo_yoshizu/articles/0e36abcd2186ef</link><guid isPermaLink="true">https://zenn.dev/kenyo_yoshizu/articles/0e36abcd2186ef</guid><pubDate>Fri, 29 Aug 2025 03:57:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pyeFoYtY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC007%2520C%2520-%2520%25E5%25B9%2585%25E5%2584%25AA%25E5%2585%2588%25E6%258E%25A2%25E7%25B4%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kento_yoshizu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvay5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kento_yoshizu</dc:creator></item><item><title><![CDATA[気楽に Rust で遊びたい Script 感覚で始める Rust]]></title><description><![CDATA[
 はじめに
僕は Rust がとてもすきです。
でも型の制約はキツイし、なんだか覚えることがたくさんあるぞ……
TypeScript でよく適当なツールを書いてるのですが、そのくらいの気軽さで Rust で遊べないかな？と思い試してみました。
TypeScript でいう以下の機能が使えたらよさそうですね！

fetch
JSON.stringify
JSON.parse
console.log
fs.writeFile
fs.readFile


 Rust の install
まずは Rust と cargo を install します。
すでに install されている場合はス...]]></description><link>https://zenn.dev/doctormate/articles/ef4e819ded7ee6</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/ef4e819ded7ee6</guid><pubDate>Thu, 28 Aug 2025 22:36:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Povcprei--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25B0%2597%25E6%25A5%25BD%25E3%2581%25AB%2520Rust%2520%25E3%2581%25A7%25E9%2581%258A%25E3%2581%25B3%25E3%2581%259F%25E3%2581%2584%2520Script%2520%25E6%2584%259F%25E8%25A6%259A%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2520Rust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:-%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwYjdiZGViMGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>-</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC420 A～E)]]></title><description><![CDATA[AtCoder Beginner Contest 420のA～E問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC420-A
問題
https://atcoder.jp/contests/ABC420/tasks/ABC420_a
X 月の Y カ月後の月を求める問題です。
解説
現在の月 X に Y カ月を足して求めます。ただし、X + Y が12を超える場合は、年をまたぐため、12を引いて調整します。
コード

abc420a.rs
use proconio::input;

fn main() {
    // 入力
    in...]]></description><link>https://zenn.dev/nakst_hide/articles/82c74013b00102</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/82c74013b00102</guid><pubDate>Thu, 28 Aug 2025 14:41:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1GXbtU34--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC420%2520A%25EF%25BD%259EE%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rustのシャドウイング、ただの上書きじゃない！]]></title><description><![CDATA[最近Rust学習にハマっている初学者です。
楽しくてついついzennに投稿しちゃいますがお目汚しをしていたらすみません🙇
本題ですがRustを学び始めると、letを2回使って変数を「上書き」しているように見えるコードに出会います。
fn main() {
    let x = 5;
    let x = x + 1;
    println!("The value of x is: {}", x); // 6が出力される
}
「あれ？変数はデフォルトで不変（immutable）じゃなかったの？」と混乱した方も多いのではないでしょうか。
実はこれ、変数の上書き（再代入）ではなく、シャド...]]></description><link>https://zenn.dev/dokusy/articles/e6669fd397a492</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/e6669fd397a492</guid><pubDate>Thu, 28 Aug 2025 12:41:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_vhRn4S5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%2589%25E3%2582%25A6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B0%25E3%2580%2581%25E3%2581%259F%25E3%2581%25A0%25E3%2581%25AE%25E4%25B8%258A%25E6%259B%25B8%25E3%2581%258D%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[自作言語TYMLで行うJWT認証とスキーマ駆動開発]]></title><description><![CDATA[
 TYMLとは
TYMLとは、JsonSchemaよりも簡潔で厳密な仕様を持つ、任意の設定用言語(現在はiniとtomlとjson)に対応可能なスキーマ言語です。
JsonSchemaとOpenAPIの置き換えを目標としています。

https://tyml-org.github.io/tyml-lang.org/
JsonSchemaの代替機能に関しては、前回書いた以下の記事を読んでいただければと思います。
https://zenn.dev/bea4dev/articles/49adc4be4638b0
今回はOpenAPIやtypespecの代替機能であるREST-APIの定義機能...]]></description><link>https://zenn.dev/bea4dev/articles/8d8c94e10a9024</link><guid isPermaLink="true">https://zenn.dev/bea4dev/articles/8d8c94e10a9024</guid><pubDate>Thu, 28 Aug 2025 10:31:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MY5xZArP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E8%25A8%2580%25E8%25AA%259ETYML%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2586JWT%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25A8%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bea4dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2ZDVjZWFkMTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bea4dev</dc:creator></item><item><title><![CDATA[足を止めて見る #2 〜 RustのFromトレイト 〜]]></title><description><![CDATA[
 足を止めて見よう
足を止めて見ようシリーズの2つ目です。
前回は Display トレイトについてでした。

 std::convert::From トレイトを実装しよう
ある型に対して、別の型から変換してその型を作る方法を定義できるのが std::convert::From トレイトですよね。
今回は足を止めて std::convert::From トレイトを実装してみます。

 std::convert::From トレイトを実装する構造体を用意してみる
下準備として、Person という構造体を用意してみます。
構造体には、nickname と age フィールドを持っています...]]></description><link>https://zenn.dev/doctormate/articles/dive_2_from_trait</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/dive_2_from_trait</guid><pubDate>Thu, 28 Aug 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E1rgGUMA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B6%25B3%25E3%2582%2592%25E6%25AD%25A2%25E3%2582%2581%25E3%2581%25A6%25E8%25A6%258B%25E3%2582%258B%2520%25232%2520%25E3%2580%259C%2520Rust%25E3%2581%25AEFrom%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%2520%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259B%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%25A6%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZVhWLXBJYnZkcjBBYW40R3NVdEpoemk2eFBNczEyem9zVUszREtKV0tTa2c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ホリケンシュウ</dc:creator></item><item><title><![CDATA[型で守るRustのバリデーション：シンプルなNewTypeから正規化、高度な合成パターンまで #ヌーラボブログリレー2025夏]]></title><description><![CDATA[
この記事はヌーラボブログリレー2025夏のTechブログ9日目として投稿しています。

はじめまして。Scalaを書きにきたつもりが業務でもRustを書くことになってしまった新卒のゆーです。
今回は、型駆動開発を推進するためのアイデアの一つを紹介したいと思います。

 NewType Pattern(Idiom)について
具体的な型をそのまま扱うのではなく、別の型として扱いたいときによく使われるパターンとして、NewType Patternがあります。具体的な型をフィールドを公開せずに包みます。
struct UserId(u32);
// または
struct UserId {
  ...]]></description><link>https://zenn.dev/yu256/articles/2046ec0bd9555d</link><guid isPermaLink="true">https://zenn.dev/yu256/articles/2046ec0bd9555d</guid><pubDate>Thu, 28 Aug 2025 01:26:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Sar9d1d4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E3%2581%25A7%25E5%25AE%2588%25E3%2582%258BRust%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25EF%25BC%259A%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AANewType%25E3%2581%258B%25E3%2582%2589%25E6%25AD%25A3%25E8%25A6%258F%25E5%258C%2596%25E3%2580%2581%25E9%25AB%2598%25E5%25BA%25A6%25E3%2581%25AA%25E5%2590%2588%25E6%2588%2590%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25BE%25E3%2581%25A7%2520%2523%25E3%2583%258C%25E3%2583%25BC%25E3%2583%25A9%25E3%2583%259C%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%25AC...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%2528yu256%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiNzVlY2Y5ZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆー(yu256)</dc:creator></item><item><title><![CDATA[ChatGPTを使ってRustで新しいプログラミング言語をつくり始めた話（if分岐）]]></title><description><![CDATA[
 前回までのおさらい
前回はPyroに「変数定義」を導入しました。
letprというPyro独自の構文をRustのletに変換できるようにし、変数を使ったプログラムを書けるようにしました。
letpr x = 10
print(x)

 今回のテーマ: if分岐
次の一歩として、if分岐を実装しました。
Pyroでは「数値が0以外なら真」というルールで判定しています。
例：
letpr x = 10
if x {
    print("x は 0 以外です")
} else {
    print("x は 0 です")
}

 実装のポイント

AST (Stmt) に If を追加...]]></description><link>https://zenn.dev/collabostyle/articles/4f8776681b3bcb</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/4f8776681b3bcb</guid><pubDate>Wed, 27 Aug 2025 23:34:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JRYQrlgG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGPT%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Rust%25E3%2581%25A7%25E6%2596%25B0%25E3%2581%2597%25E3%2581%2584%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258A%25E5%25A7%258B%25E3%2582%2581%25E3%2581%259F%25E8%25A9%25B1%25EF%25BC%2588if%25E5%2588%2586%25E5%25B2%2590%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2594%25E3%2581%25A8%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyOWNkNWUxZTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ごと</dc:creator></item><item><title><![CDATA[cargo-competeでAtCoderにログインする]]></title><description><![CDATA[macOSでやる方法が見つからなかったので、この記事ではwindows/macOS/Linuxのそれぞれでログインする手順をまとめておこうと思います
前提として、cargo-competeはインストール済みで、cargo compete initなどは済ませているものとします

 1: REVEL_SESSIONを取得する
下のリンクを参照してください


 2: cookies.jsonlを書き換える
cookies.jsonlの場所がOSによって異なります

 Windowsの場合
C:\Users\&lt;username&gt;\AppData\Local/cargo-compe...]]></description><link>https://zenn.dev/warabi271/articles/b2661b3d206e21</link><guid isPermaLink="true">https://zenn.dev/warabi271/articles/b2661b3d206e21</guid><pubDate>Wed, 27 Aug 2025 11:55:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6WgTqzvE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-compete%25E3%2581%25A7AtCoder%25E3%2581%25AB%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2582%2589%25E3%2581%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRjOTAwNzhlZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わらび</dc:creator></item><item><title><![CDATA[数当てゲームを作って学ぶプログラミングの基本]]></title><description><![CDATA[最近Rustにハマっている初学者です。
今回は、Rust公式チュートリアルでも紹介されている「数当てゲーム」を作りながら、Rustの基本を体験してみます。
この記事では、初心者の私でも理解できるように一歩ずつ備忘録として書いています！


 1. プロジェクトの準備
まずはRustのプロジェクトを作成します。
cargo new guessing_game
cd guessing_game
作成直後は src/main.rs に「Hello, world!」が入っています。
試しに実行してみます。
cargo run
ターミナルに Hello, world! と表示されればOKです！

...]]></description><link>https://zenn.dev/dokusy/articles/31931883293f54</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/31931883293f54</guid><pubDate>Wed, 27 Aug 2025 11:51:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--j8LZt0Jj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2595%25B0%25E5%25BD%2593%25E3%2581%25A6%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[ブラウザを自作してCookieがどう処理されるかを学んだ]]></title><description><![CDATA[
 はじめに
JavaScriptで設定したCookieがブラウザの規制により24時間で消える一方、サーバーで設定したCookieは制限されない。この違いはどのような仕組みで起こるのでしょうか？
この仕組みを理解するために、ブラウザを自作してCookieの動作を再現してみました。その結果、見えてきた内容を詳しく解説します。

 Cookieとは
Cookieは、Webサイトがブラウザに保存するデータであり、主に以下のような用途で使われます。


ログイン状態の維持 - ユーザーがログインしたままになる

カートの保存 - ECサイトで商品を記憶

広告の効果測定 - どの広告から訪問した...]]></description><link>https://zenn.dev/t_misugi/articles/3294aba2c6df48</link><guid isPermaLink="true">https://zenn.dev/t_misugi/articles/3294aba2c6df48</guid><pubDate>Wed, 27 Aug 2025 07:25:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9U9_L90t--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%2592%25E8%2587%25AA%25E4%25BD%259C%25E3%2581%2597%25E3%2581%25A6Cookie%25E3%2581%258C%25E3%2581%25A9%25E3%2581%2586%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E3%2581%258B%25E3%2582%2592%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E4%25B8%2589%25E6%259D%2589%2520%25E5%25BD%25AA%25E6%25B5%2581%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYwOWMxZjVhYzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>三杉 彪流</dc:creator></item><item><title><![CDATA[Rust初学者必見！`cargo doc --open`で効率的に学習しよう]]></title><description><![CDATA[最近Rustにハマっている初学者です。
間違えや改善点などあればコメントいただけると嬉しいです🙇
本題ですが皆さんはプロジェクトで使用している外部ライブラリ（crate）のドキュメントを調べる時、どうしていますか？
ブラウザでcrates.ioを開いて検索したり、公式サイトを探し回ったりしている人はいますか？
実は、もっと簡単で効率的な方法があります。
それが今回紹介するcargo doc --openコマンドです。

 cargo doc --openとは？
cargo doc --openは、現在のプロジェクトで使用しているすべての依存関係（dependencies）のドキュメントを...]]></description><link>https://zenn.dev/dokusy/articles/3b7292b1fe1937</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/3b7292b1fe1937</guid><pubDate>Tue, 26 Aug 2025 07:41:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wOPffpES--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E5%25BF%2585%25E8%25A6%258B%25EF%25BC%2581%2560cargo%2520doc%2520--open%2560%25E3%2581%25A7%25E5%258A%25B9%25E7%258E%2587%25E7%259A%2584%25E3%2581%25AB%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[Rustで依存ライブラリのライセンスをチェックする/ライセンス一覧を出力する]]></title><description><![CDATA[
 はじめに
こんにちは！
この記事はRustで依存しているライブラリのライセンス確認やライセンス一覧を出力する方法についての記事です。
それと私の作ったライセンス周りのツールの紹介です。

 対象読者

Rustでバイナリを配布する際にライセンス周りが気になる人
Rustのライセンス周りのツールを知りたい人


 ライセンスを確認する
https://github.com/onur/cargo-license
Install: cargo install cargo-license
実行: cargo license

依存しているライブラリがライセンスごとに表示されます。

 ライセ...]]></description><link>https://zenn.dev/aq2r/articles/320a16d0eb8749</link><guid isPermaLink="true">https://zenn.dev/aq2r/articles/320a16d0eb8749</guid><pubDate>Tue, 26 Aug 2025 06:42:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VaAgJpMr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rustw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aq2r%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyYTQ3YTRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aq2r</dc:creator></item><item><title><![CDATA[【備忘録】cargo build --releaseについて]]></title><description><![CDATA[最近Rustにハマりそうな初学者です。
鬼ググりとLLMを活用して書き上げたので、間違いなどあればコメントいただけますと幸いです🙇

 この記事について
Rustの開発において、cargo build --releaseは本番環境向けの高速なバイナリを作るための重要なコマンドです。
この記事では、リリースビルドがどのように動作し、どんな最適化が行われるのか、そしてどう使うべきかを詳しく解説します。

 リリースビルドとデバッグビルドの違い

 基本的な動作の違い
普段使っているcargo buildコマンドはデバッグビルドを実行します。
これは開発中のデバッグのしやすさを重視した設定でコ...]]></description><link>https://zenn.dev/dokusy/articles/51dd9f228af539</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/51dd9f228af539</guid><pubDate>Mon, 25 Aug 2025 12:59:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--baf-2bK0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E3%2580%2591cargo%2520build%2520--release%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[Rust 所有権クイズ！]]></title><description><![CDATA[
 はじめに
こんにちは、ファスト株式会社のYTです！
突然ですが、Rustクイズです！
以下のコードのうち、ターミナルにこんにちは！と出力されるのはどれでしょうか?
1: Some(greet)
fn main() {
    let greet = Some(String::from("こんにちは！"));

    match greet {
        Some(greet) =&gt; println!("あいさつをします！"),
        None =&gt; println!("あいさつしません！"),
    };

    println!("{}", gre...]]></description><link>https://zenn.dev/fast/articles/0f6efdaed1ec6d</link><guid isPermaLink="true">https://zenn.dev/fast/articles/0f6efdaed1ec6d</guid><pubDate>Mon, 25 Aug 2025 09:21:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H0aPgoga--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2582%25AF%25E3%2582%25A4%25E3%2582%25BA%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:YT%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHhoaTdpLUpwaHdzY21VRFRSMGh0ZzFGd1ZXMDA1S3IyeV9RVzZFWXZNNEU2YndxVjg9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YT</dc:creator></item><item><title><![CDATA[ひとくちメモ: VSCode で rust-analyzer 拡張をまともに動かす]]></title><description><![CDATA[後述ながら、これは Remote-SSH 環境が前提なので注意。

 結論
あんたの $HOME が /home/mystere であると仮定して、以下を settings.json に追記する。また、この設定は環境間で非可搬である。よって、settingsSync.ignoredSettings にも以下の内容に対応するエントリーを追加することで、設定の同期を部分的に切ることをおすすめする。
{
  "rust-analyzer.cargo.extraEnv": {
    "CARGO": "/home/mystere/.cargo/bin/cargo",
    "RUSTUP":...]]></description><link>https://zenn.dev/argi_berri/articles/2784c7c880a6f0</link><guid isPermaLink="true">https://zenn.dev/argi_berri/articles/2784c7c880a6f0</guid><pubDate>Sat, 23 Aug 2025 15:09:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xfL_kbCR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25B2%25E3%2581%25A8%25E3%2581%258F%25E3%2581%25A1%25E3%2583%25A1%25E3%2583%25A2%253A%2520VSCode%2520%25E3%2581%25A7%2520rust-analyzer%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2582%25E3%2581%25AB%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ARGIA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhYWQwM2NmMzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ARGIA</dc:creator></item><item><title><![CDATA[ChatGPTを使ってRustで新しいプログラミング言語をつくり始めた話（フォルダ構成の再編と出力先の統一）]]></title><description><![CDATA[
 目的

役割別にクレートを整理して保守性を高める
生成物（transpile 結果・実行バイナリ）の置き場所を統一して、開発時の混乱を防止


 新フォルダ構成
.
├── examples
│   └── main.pyro            # ← 実行デフォルトを hello.pyro から main.pyro に変更
└── pyro
    └── crates
        ├── pyroc            # 解析（AST/Parser）
        │   ├── Cargo.toml
        │   └── src
        │   ...]]></description><link>https://zenn.dev/collabostyle/articles/a5de8760430be4</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/a5de8760430be4</guid><pubDate>Sat, 23 Aug 2025 12:58:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ooQG6s8y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChatGPT%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Rust%25E3%2581%25A7%25E6%2596%25B0%25E3%2581%2597%25E3%2581%2584%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258A%25E5%25A7%258B%25E3%2582%2581%25E3%2581%259F%25E8%25A9%25B1%25EF%25BC%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2580%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AE%25E5%2586%258D%25E7%25B7%25A8%25E3%2581%25A8%25E5%2587%25BA%25E5%258A%259B%25E5%2585%2588%25E3%2581%25AE%25E7%25B5%25B1%25E4%25B8%2580%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2594%25E3%2581%25A8%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyOWNkNWUxZTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ごと</dc:creator></item></channel></rss>