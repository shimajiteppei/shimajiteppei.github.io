<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 09 May 2025 02:56:35 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[vite-plugin-singlefileでwasmを単一HTMLに埋め込む]]></title><description><![CDATA[備忘録メモ
どうしてもネットから隔離されたローカル環境の某RADソフトウェアでwasmを動作させたかったため、単一HTMLにRustで作ったwasmを埋め込めるか試してみました。
単一HTMLを某RADソフトウェア内に埋め込んでwasmがWebビューで動作することを確認しました。

 Viteで新規プロジェクト
今回はViteで新規プロジェクトを立ち上げてみます。
$ npm create vite@latest my-wasm-app -- --template vanilla-ts

$ cd my-wasm-app
$ npm install
publicディレクトリは使わないので...]]></description><link>https://zenn.dev/craneduck/articles/5068ca21322398</link><guid isPermaLink="true">https://zenn.dev/craneduck/articles/5068ca21322398</guid><pubDate>Thu, 08 May 2025 13:49:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dc-mwy-C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:vite-plugin-singlefile%25E3%2581%25A7wasm%25E3%2582%2592%25E5%258D%2598%25E4%25B8%2580HTML%25E3%2581%25AB%25E5%259F%258B%25E3%2582%2581%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%2583%25E3%2582%25AF%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5NDVkNWY1NzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クレーンダック</dc:creator></item><item><title><![CDATA[Express.js + Next.jsで実装するMCP Streaming Chat]]></title><description><![CDATA[
 Express.js + Next.jsで実装するMCP Streaming Chat




 1. はじめに
前回の記事「Express.js + Next.jsで実装するMCP Streamable HTTP Transport」では、MCPの通信基盤となるStreamable HTTPトランスポートの実装方法について解説しました。本記事はその続編として、最新のMCP仕様（2025-03-26）を活用したストリーミングチャットの実装方法について詳しく解説します。
MCPの基礎知識については前回の記事を参照していただくとして、今回は特にストリーミング機能の実装に焦点を当て、サーバ...]]></description><link>https://zenn.dev/sbk0716/articles/0ddcd77ef4c6ca</link><guid isPermaLink="true">https://zenn.dev/sbk0716/articles/0ddcd77ef4c6ca</guid><pubDate>Thu, 08 May 2025 11:50:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--48310wSr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Express.js%2520%252B%2520Next.js%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258BMCP%2520Streaming%2520Chat%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shibatoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlYzExM2FiMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shibatoki</dc:creator></item><item><title><![CDATA[Scalaのfor内包表記をneverthrowとfp-tsで書く]]></title><description><![CDATA[
 概略
なっとく！関数型プログラミングを読んで、for内包表記をneverthrowやfp-tsでも利用できないかと思い調べました。
neverthrowではsafeTryとジェネレータ関数、fp-tsではDoとbindを使用することで、for内包表記のような記述ができます。

 for内包表記とは
複数のコレクションの要素や、複数のOption、Either、IOなどのモナドにアクセスしたい時に、flatMapの入れ子になることを防止でき、可読性を高められる記法です。
以下は、バリデーションを実行し、すべてのバリデーションが成功したらUserを作成する処理の例です。

 flatMa...]]></description><link>https://zenn.dev/miyamyia/articles/31214ba6162983</link><guid isPermaLink="true">https://zenn.dev/miyamyia/articles/31214ba6162983</guid><pubDate>Thu, 08 May 2025 11:01:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jUlORH6r--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Scala%25E3%2581%25AEfor%25E5%2586%2585%25E5%258C%2585%25E8%25A1%25A8%25E8%25A8%2598%25E3%2582%2592neverthrow%25E3%2581%25A8fp-ts%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miyamyia%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMxZjczOWE0YzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miyamyia</dc:creator></item><item><title><![CDATA[[TanStack Query] invalidateQueries で複数キーを一括対象にするやり方、間違えていた]]></title><description><![CDATA[
これは駄目（はまった）

queryClient.invalidateQueries({ queryKey: ["CANDY", "COOKIE", "CHOCOLATE"] });
queryKey の型が string[] なので行けると思ったが、そんな仕様はなかった。
一括で invalidate したいなら、キーに接頭辞を設けて
useQuery({
    queryKey: ["GET-CANDY"],
      ...
useQuery({
    queryKey: ["GET-COOKIE"],
      ...
useQuery({
    queryKey: ...]]></description><link>https://zenn.dev/tkytky/articles/fac55ebedb54d9</link><guid isPermaLink="true">https://zenn.dev/tkytky/articles/fac55ebedb54d9</guid><pubDate>Thu, 08 May 2025 10:59:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---MaacxNf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTanStack%2520Query%255D%2520invalidateQueries%2520%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2582%25AD%25E3%2583%25BC%25E3%2582%2592%25E4%25B8%2580%25E6%258B%25AC%25E5%25AF%25BE%25E8%25B1%25A1%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2582%2584%25E3%2582%258A%25E6%2596%25B9%25E3%2580%2581%25E9%2596%2593%25E9%2581%2595%25E3%2581%2588%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2589%258D%25E3%2581%25B8%25E9%2580%25B2%25E3%2582%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjYTE5MmRmYjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>前へ進む</dc:creator></item><item><title><![CDATA[技術調査レポート：GitHub Copilot による自動テストコード生成]]></title><description><![CDATA[
 調査日
2025 年 5 月 7 日（水）

 調査目的
GitHub Copilot を活用してユニットテストコードを自動生成し、その実用性・補完精度・開発効率への影響を検証する。

 調査対象

関数：sum(a: number, b: number): number（2 つの数値の加算）
テスト環境：TypeScript + Jest


 実施環境

OS：Windows 11
エディタ：Visual Studio Code（最新版）
Node.js：v20.x
GitHub Copilot 拡張：有効化済み（個人アカウント）


 実施手順


フォルダ作成とプロジェクト初...]]></description><link>https://zenn.dev/homatsu_tech/articles/477d64d584f474</link><guid isPermaLink="true">https://zenn.dev/homatsu_tech/articles/477d64d584f474</guid><pubDate>Thu, 08 May 2025 09:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--idRdwgwJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%258A%2580%25E8%25A1%2593%25E8%25AA%25BF%25E6%259F%25BB%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%259AGitHub%2520Copilot%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E8%2587%25AA%25E5%258B%2595%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E7%2594%259F%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25AE%259D%25E6%259D%25BE%2540%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2NmRlNTNlODQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>宝松@システムエンジニア</dc:creator></item><item><title><![CDATA[TypeScriptで学ぶ：オーバーロード関数×ジェネリクス×extendsの使い方と実例]]></title><description><![CDATA[1つの関数で汎用的にデータを返す方法について解説します。関数の呼び出し方に応じて、2パターンの型推論が自動で働くため、とても便利です。
パターン１：userオブジェクトからデータを全て取得する
パターン２：選択したデータのみを取得する（例　name）
// 型定義
type User = {
  name: string;
  age: number;
  email: string;
};

// オーバーロード定義 波括弧がない
function getUser(): User;//1つ目のシグネチャ *１つの定義をシグネチャといいます
function getUser&lt;K e...]]></description><link>https://zenn.dev/wakki/articles/d4ccddaf2b997a</link><guid isPermaLink="true">https://zenn.dev/wakki/articles/d4ccddaf2b997a</guid><pubDate>Thu, 08 May 2025 06:39:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QcxYws4P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25EF%25BC%259A%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E9%2596%25A2%25E6%2595%25B0%25C3%2597%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25C3%2597extends%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25A8%25E5%25AE%259F%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AF%25E3%2583%2583%25E3%2582%25AD%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RkOTg4YTEyNmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ワッキー</dc:creator></item><item><title><![CDATA[うさぎでもわかる！TypeScriptの型レベルプログラミングと高度な設計手法]]></title><description><![CDATA[
 うさぎでもわかる！TypeScriptの型レベルプログラミングと高度な設計手法
👇️ポッドキャストでも聴けます
https://youtu.be/2S5_0HdI4TI
こんにちは、🐰です！今日はTypeScriptを使いこなすための高度なテクニックについてお話しします。TypeScriptは単なる「JavaScriptに型をつけただけの言語」ではなく、型システムを活用した表現力豊かなプログラミングが可能なんです！
私自身、TypeScriptでの開発に挑戦し、「こんなこともできるんだ！」と驚くことがたくさんありました。この記事では、型レベルプログラミングや高度な設計パターン、パフォ...]]></description><link>https://zenn.dev/taku_sid/articles/20250508_typescript_advanced</link><guid isPermaLink="true">https://zenn.dev/taku_sid/articles/20250508_typescript_advanced</guid><pubDate>Thu, 08 May 2025 06:32:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5a-NJ5Cf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2586%25E3%2581%2595%25E3%2581%258E%25E3%2581%25A7%25E3%2582%2582%25E3%2582%258F%25E3%2581%258B%25E3%2582%258B%25EF%25BC%2581TypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E9%25AB%2598%25E5%25BA%25A6%25E3%2581%25AA%25E8%25A8%25AD%25E8%25A8%2588%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taku_sid%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTFFIVERiOTUwakhtTUJlendZR0RaeHlPX290RnJISktCY2ZYUFFuY1dVVGNGRkd1d3A9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taku_sid</dc:creator></item><item><title><![CDATA[prismaのfeature機能TypedSQLを完全に理解したのでアウトプットしていくゥ]]></title><description><![CDATA[
 これはなに
最近会社でNext.js（App Router）でダッシュボードアプリを開発しております。
そのアプリでは、PrismaというTypedScriptのORMツールを用いてDBとのアクセスを行っています。
今回はそのPrismaの機能の1つであるTypedSQLという機能を触ったのでアウトプットしていこうかと思います。

まず、結論からいうとTypedSQLは若干クセがあるものの、めちゃくちゃおすすめなツールです。
この記事では以下を説明しようかと思います。

TypedSQLとは何か
TypedSQLの基本的な使い方
TypedSQLを使う上で詰まったポイント

この記事...]]></description><link>https://zenn.dev/monta107/articles/fbd338d04e01c2</link><guid isPermaLink="true">https://zenn.dev/monta107/articles/fbd338d04e01c2</guid><pubDate>Thu, 08 May 2025 00:29:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--36GRrN07--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:prisma%25E3%2581%25AEfeature%25E6%25A9%259F%25E8%2583%25BDTypedSQL%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%258F%25E3%2582%25A5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2582%25E3%2582%2593%25E3%2581%259F%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlN2JiZTdjZGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>もんた。</dc:creator></item><item><title><![CDATA[#私は人間です — AI時代の「人間らしさ」を問うWebアプリをつくった話]]></title><description><![CDATA[こんにちは、ほりゆうです。
今回は、私が個人開発したWebアプリ「#私は人間です」について紹介させていただきます。
このアプリはNext.jsとRailsで開発しております。
https://iamhuman.space/
このアプリは、ユーザーがランダムに出題される3つの質問に自由に回答し、その回答からAIが「どれだけ人間らしいか」を評価するというものです。評価結果は、感情表現・一貫性・経験の具体性・ユーモア・倫理的判断の5項目でスコア化され、レーダーチャートで可視化されます。


 なぜ作ったのか：動機
きっかけは、「AIを見抜く人狼ゲームのような体験が作れないか？」というアイデアか...]]></description><link>https://zenn.dev/yuki82511988/articles/f02045a53c4eca</link><guid isPermaLink="true">https://zenn.dev/yuki82511988/articles/f02045a53c4eca</guid><pubDate>Wed, 07 May 2025 15:09:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8c8HMwRt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2523%25E7%25A7%2581%25E3%2581%25AF%25E4%25BA%25BA%25E9%2596%2593%25E3%2581%25A7%25E3%2581%2599%2520%25E2%2580%2594%2520AI%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AE%25E3%2580%258C%25E4%25BA%25BA%25E9%2596%2593%25E3%2582%2589%25E3%2581%2597%25E3%2581%2595%25E3%2580%258D%25E3%2582%2592%25E5%2595%258F%25E3%2581%2586Web%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZlZWI1NTQyZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuki</dc:creator></item><item><title><![CDATA[Prismaのschema.prismaファイルでJsDocって使えたんだの気づき]]></title><description><![CDATA[
 ちょっとした学び
恥ずかしながら知らなかったのですが、prismaでたまにコメントを書くことがあったのですが、こんな感じでjsdocもかけることを知りました。
/// @deprecated 今後はFugaを使うので使わないでください。
model Hoge {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
下記は実際に自動生成をされたものになります。
/...]]></description><link>https://zenn.dev/immedio/articles/e4a50d1afd7ab2</link><guid isPermaLink="true">https://zenn.dev/immedio/articles/e4a50d1afd7ab2</guid><pubDate>Wed, 07 May 2025 07:18:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HDJL3DQe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Prisma%25E3%2581%25AEschema.prisma%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25A7JsDoc%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%259F%25E3%2582%2593%25E3%2581%25A0%25E3%2581%25AE%25E6%25B0%2597%25E3%2581%25A5%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:gonta%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RlZjc0OTgxOWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:immedio%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5NzFlNzc0NzAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>gonta</dc:creator></item><item><title><![CDATA[MCPクライアントの実装を段階的に学んでみた(TypeScript SDK、Anthropic API)]]></title><description><![CDATA[
 はじめに
MCP サーバーの実装は少しやってみたんですが、MCP クライアントについてはやっていなかったので、公式チュートリアルのサンプルについて勉強してみました。
https://modelcontextprotocol.io/quickstart/client#node
ただ、チュートリアルのサンプルは複数の構成要素（MCP クライアント、MCP サーバー、Anthropic API、CLI チャット機能）を組み合わせたアプリになっているため、いきなりこれをそのまま理解するのは少し大変でした。そのため以下のように段階的に理解を進めるようにしました。

MCP クライアント から ...]]></description><link>https://zenn.dev/s_takashi/articles/mcp-client-example</link><guid isPermaLink="true">https://zenn.dev/s_takashi/articles/mcp-client-example</guid><pubDate>Wed, 07 May 2025 00:55:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--osnJfrEk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E3%2582%2592%25E6%25AE%25B5%25E9%259A%258E%25E7%259A%2584%25E3%2581%25AB%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A7%25E3%2581%25BF%25E3%2581%259F%2528TypeScript%2520SDK%25E3%2580%2581Anthropic%2520API%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shiratori%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhiOTZmNDhhMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shiratori</dc:creator></item><item><title><![CDATA[Mastra の workflow の書き方が新しくなるぞ！]]></title><description><![CDATA[GWに Mastra を触ってみようと思っていたところ、Workflows の書き方が新しくなるという公式ブログを見かけたので、実際のコードも交えて変更点を確認してみました。
https://mastra.ai/blog/vNext-workflows

 Mastra とは
Mastra は、AI機能を素早く、堅牢に、そして拡張可能に開発するための TypeScript 製フレームワークです。
個人的には、LLM アプリケーションといえば Python が主流という印象がある中で、TypeScript で書けるというだけで嬉しいです。
詳しくは以下のリンクも参考になります。

http...]]></description><link>https://zenn.dev/onsd/articles/efa5f1d95dfbdb</link><guid isPermaLink="true">https://zenn.dev/onsd/articles/efa5f1d95dfbdb</guid><pubDate>Tue, 06 May 2025 16:06:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SWzpOv6k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mastra%2520%25E3%2581%25AE%2520workflow%2520%25E3%2581%25AE%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%25E3%2581%258C%25E6%2596%25B0%25E3%2581%2597%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258B%25E3%2581%259E%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YwNmQ4M2U2NTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たか</dc:creator></item><item><title><![CDATA[分割代入時の型エラーの対処方法]]></title><description><![CDATA[
 型エラー文: プロパティ user_name は型 { user_name: string; user_account: string | null; avatar_url: string | null; } | undefined に存在しません。
GetProfileの型(alias) GetProfile(): Promise&lt;{
    user_name: string;
    user_account: string | null;
    avatar_url: string | null;
} | undefined&gt;
import GetProfile...]]></description><link>https://zenn.dev/wakki/articles/aad9755c407971</link><guid isPermaLink="true">https://zenn.dev/wakki/articles/aad9755c407971</guid><pubDate>Tue, 06 May 2025 15:43:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2xG3cSwH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%2586%25E5%2589%25B2%25E4%25BB%25A3%25E5%2585%25A5%25E6%2599%2582%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25AF%25E3%2583%2583%25E3%2582%25AD%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RkOTg4YTEyNmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ワッキー</dc:creator></item><item><title><![CDATA[ここではTypescriptの値渡しと参照渡しについて語られる]]></title><description><![CDATA[Typescriptと少しのC言語しか学んでいなかった私には値渡し、参照渡しという概念がピンとこなかったので、検証を通じて理解を含めることとする。

 値渡し
元の引数をコピーした値が新たに変数として作成され、元の引数に影響を及ぼさない渡し方。
Typescriptや元になったJavaでは基本的にこの渡し方が仕様となる。
function addTen(x: number): void {
  x += 10;          // ローカル変数 x を変更
  console.log("  inside:", x);  // =&gt; 15
}

let num = 5;
addT...]]></description><link>https://zenn.dev/yoshinani_dev/articles/f94de36a77e65d</link><guid isPermaLink="true">https://zenn.dev/yoshinani_dev/articles/f94de36a77e65d</guid><pubDate>Tue, 06 May 2025 14:36:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Avn3wDb0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%2593%25E3%2581%2593%25E3%2581%25A7%25E3%2581%25AFTypescript%25E3%2581%25AE%25E5%2580%25A4%25E6%25B8%25A1%25E3%2581%2597%25E3%2581%25A8%25E5%258F%2582%25E7%2585%25A7%25E6%25B8%25A1%25E3%2581%2597%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%25AA%259E%25E3%2582%2589%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%258F%25E3%2583%25AB%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhMjMyNjAxN2QuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:YOSHINANI%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAxZDJiYTU0OWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ハル</dc:creator></item><item><title><![CDATA[TypeScript × Vite × GitHub Pages 超入門]]></title><description><![CDATA[
 TypeScript × Vite × GitHub Pages 超入門

 目的

就活で色んな求人でTypeScriptを良く見るので試せる環境作りたい
公開までするならGitHub Pagesが良さそうなので試したい
Viteというのが良いらしいので試したい
ついでにGitHub Actionsも試したい


 進め方

ChatGPT o3で手順作ってもらう→うまくいかなかったら聞くの繰り返し



 環境



ツール
推奨バージョン
確認コマンド




Node.js + npm
18 LTS 以上
node -v &amp;&amp; npm -v


Git
2.x...]]></description><link>https://zenn.dev/cdaket/articles/typescript-vite-github-pages-quickstart</link><guid isPermaLink="true">https://zenn.dev/cdaket/articles/typescript-vite-github-pages-quickstart</guid><pubDate>Tue, 06 May 2025 14:18:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JWJ6ePKA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25C3%2597%2520Vite%2520%25C3%2597%2520GitHub%2520Pages%2520%25E8%25B6%2585%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:cdaket%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTElwTElPVUJ6QnlhQTdESktCb1VuUTJ5OFUwRmxSSE5CSGVwTmFUcDVuVktUbWNES1Q9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cdaket</dc:creator></item><item><title><![CDATA[Reactの実験的APIであるActivityとJotaiでの非同期処理についての調査]]></title><description><![CDATA[先日、React Labsから実験的APIであるActivity（旧Offscreen）に関するブログが投稿されました。
https://react.dev/blog/2025/04/23/react-labs-view-transitions-activity-and-more#activity
今回は、Activityでの事前レンダリング（pre-rendering）に関して、Jotaiとの組み合わせによる非同期処理に着目したいと思います。

 Activityとは？
詳しくは公式ブログ記事とドキュメントに任せるとして、軽く内容に触れつつ本題に入ります。
https://react....]]></description><link>https://zenn.dev/tell_y/articles/073ba0171efa68</link><guid isPermaLink="true">https://zenn.dev/tell_y/articles/073ba0171efa68</guid><pubDate>Tue, 06 May 2025 13:09:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dzcUzJgA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25AE%25E5%25AE%259F%25E9%25A8%2593%25E7%259A%2584API%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258BActivity%25E3%2581%25A8Jotai%25E3%2581%25A7%25E3%2581%25AE%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E8%25AA%25BF%25E6%259F%25BB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Teruhisa%2520-%2520T6ADEV%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VhNDg5NTAyZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Teruhisa - T6ADEV</dc:creator></item><item><title><![CDATA[Material UI を使った TODO リストの UI 拡張チュートリアル]]></title><description><![CDATA[
 1. 概要
前回の記事で予告したとおり、今回は Material UI を使ってアプリの見た目と操作性を向上させていきます



適用前
適用後









Material UI は、Google が提唱する Material Design ガイドラインに基づいて設計されたコンポーネントライブラリです
多彩な、デザイン済みコンポーネントが提供されており、それらを組み合わせるだけで統一感のある美しいインターフェースを簡単に作成できます

 目標


Material UI の導入と基本的な使い方を学ぶ
TODO リストの UI を Material UI で拡張する
Mater...]]></description><link>https://zenn.dev/hidemaru4869/articles/fd172cdae08523</link><guid isPermaLink="true">https://zenn.dev/hidemaru4869/articles/fd172cdae08523</guid><pubDate>Tue, 06 May 2025 13:02:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IUFoGBbZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Material%2520UI%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%2520TODO%2520%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%2520UI%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hidemaru4869%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSlJYcllHdUxfcnJ6MWItQ2podmEwem5nSTJnRXZGT3c0UTNHcmFVZ1FoNnc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hidemaru4869</dc:creator></item><item><title><![CDATA[zodで複雑なバリデーションを行うときはtransformを使うとスマートに書ける]]></title><description><![CDATA[
 これは何？
zodを使って複雑なバリデーションを行うときにtransformを使うとスマートに書けるよという備忘録。今回はzodを使ってfile upload validationを行う。

 環境

Next.js 15.3.1
Zod 3.23.8
TypeScript 5.5.2


 ユースケース

プロフィール編集画面にアバター画像のアップロード機能がある
画像なしで運用したいユーザーもいるため、画像アップロードは必須ではない
プロフィール画像はjpg,png,webp形式のみ対応
ファイルサイズは5MBまで


 初期実装
まず、ググって以下の実装を検討した。
impor...]]></description><link>https://zenn.dev/yasuakiomokawa/articles/c27888825a0b5b</link><guid isPermaLink="true">https://zenn.dev/yasuakiomokawa/articles/c27888825a0b5b</guid><pubDate>Tue, 06 May 2025 12:47:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G8j3cPj1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:zod%25E3%2581%25A7%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AA%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E8%25A1%258C%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AFtransform%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AB%25E6%259B%25B8%25E3%2581%2591%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yasuaki%2520Omokawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNmOTUyODI3YjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yasuaki Omokawa</dc:creator></item><item><title><![CDATA[Express.js + Next.jsで実装するMCP Streamable HTTP Transport]]></title><description><![CDATA[
 Express.js + Next.jsで実装するMCP Streamable HTTP Transport


 1. はじめに
AIとのコミュニケーションを標準化するModel Context Protocol (MCP)は、クライアントとサーバー間の通信方式として新しいStreamable HTTP Transportを採用しています。本記事では、Express.jsとNext.jsを使用してこのStreamable HTTP Transportを実装する方法について、特にステートレスモードとステートフルモードの違いに焦点を当てて解説します。
前回の記事「Express.js ...]]></description><link>https://zenn.dev/sbk0716/articles/ac111eca8ec263</link><guid isPermaLink="true">https://zenn.dev/sbk0716/articles/ac111eca8ec263</guid><pubDate>Tue, 06 May 2025 11:19:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--W2ojA2aX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Express.js%2520%252B%2520Next.js%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258BMCP%2520Streamable%2520HTTP%2520Transport%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shibatoki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBlYzExM2FiMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shibatoki</dc:creator></item><item><title><![CDATA[状態管理を「まとめる」・「バラす」]]></title><description><![CDATA[一人暮らしで自炊に悩んでたとき、昔買ったレシピ本に「ひき肉はまとめてもバラしても使える万能食材」と書いてありました。しかしなんとこれは状態管理でも同じことです。

 適切なスコープ
状態管理を実装するときは適切なスコープであるかが重要です。気が付かずに手を動かしていると、広い範囲の状態を狭い場所から操作していたり、逆に狭い範囲の状態を広い範囲から操作していたりすることが起こり得ます。
それは「状態管理」というドメインの抽象化に失敗した状態であり、放置するとアプリケーションの操作フローがどうなっているかを読み取るのが次第に難しくなります。解決策はここ以降に示すように、状態管理の範囲の大小を...]]></description><link>https://zenn.dev/yhase_rqp/articles/618549b7aa8e8c</link><guid isPermaLink="true">https://zenn.dev/yhase_rqp/articles/618549b7aa8e8c</guid><pubDate>Tue, 06 May 2025 10:22:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Hq4xq_Qr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2582%2592%25E3%2580%258C%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B%25E3%2580%258D%25E3%2583%25BB%25E3%2580%258C%25E3%2583%2590%25E3%2583%25A9%25E3%2581%2599%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yha%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MyZTY1OTg3NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yha</dc:creator></item></channel></rss>