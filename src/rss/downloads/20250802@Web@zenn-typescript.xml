<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 02 Aug 2025 04:51:12 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【初心者向け】TypeScript環境構築：これだけでOK！]]></title><description><![CDATA[
 TypeScript環境構築ガイド【初心者向け】

「TypeScriptを始めてみたいけど、どうやって環境構築すればいいか分からない…」
という方向けに、TypeScriptの基本的な環境構築手順をわかりやすく解説します。
この記事の手順に沿って進めるだけで、すぐに開発を始められます。



 1. 必要なツールの準備
TypeScriptで開発を始めるには、以下のツールが必要です。


Node.js
JavaScriptの実行環境です。TypeScriptで書いたコードを最終的に実行するためには必須です。


npm/yarn
パッケージ管理ツールです。Node.jsをインスト...]]></description><link>https://zenn.dev/yu_fu/articles/5ea822e915bbf4</link><guid isPermaLink="true">https://zenn.dev/yu_fu/articles/5ea822e915bbf4</guid><pubDate>Fri, 01 Aug 2025 17:01:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OOkYrv8v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591TypeScript%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25EF%25BC%259A%25E3%2581%2593%25E3%2582%258C%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7OK%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0ZDE0NTNmNjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーふー</dc:creator></item><item><title><![CDATA[GLSL / WGSLに変換できるシェーダ言語を作った]]></title><description><![CDATA[Claude Code に作ってもらいました 😭
https://glre.dev/docs
https://github.com/tseijp/glre

 開発背景

 WebGL より強力な WebGPU API の登場
WebGL ライブラリの Three.js が WebGPU 対応を進めており、Apple のサポートも進歩して、WebGPU の実用性が高まってきました。WebGL は GLSL（OpenGL Shading Language）で記述しますが、WebGPU は WGSL（WebGPU Shading Language）で書きます。Three.js で WebGP...]]></description><link>https://zenn.dev/jp/articles/9c62b0de08312b</link><guid isPermaLink="true">https://zenn.dev/jp/articles/9c62b0de08312b</guid><pubDate>Fri, 01 Aug 2025 14:59:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1ttxHwu---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GLSL%2520%252F%2520WGSL%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%2580%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tsei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM5OTQ2NmI5NjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tsei</dc:creator></item><item><title><![CDATA[Turborepoのgeneratorでmonorepoパッケージの雛形を自動生成する]]></title><description><![CDATA[こんにちは、monorepoでpackageを管理しているようなプロジェクトにおいて、
新しくpackageを追加する時に毎回既存のpackageをコピペしてゴニョゴニョする、なんて経験無いですか？
私はよくあります、、笑
turborepoを利用しているプロジェクトではgeneratorを使うことで、
動的にstarter的なpackageを自動生成することが出来るのでそれについて紹介します。


 turbo genコマンドについて
TUIの対話形式でファイルを生成出来るコマンドです。
内部的にはPlopがファイル生成部分を担っており、
動的な部分はHandlebarsというテンプレ...]]></description><link>https://zenn.dev/huuya/articles/625821fd5620ef</link><guid isPermaLink="true">https://zenn.dev/huuya/articles/625821fd5620ef</guid><pubDate>Fri, 01 Aug 2025 14:48:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KnL5_m3H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Turborepo%25E3%2581%25AEgenerator%25E3%2581%25A7monorepo%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E9%259B%259B%25E5%25BD%25A2%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:huuya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzZDJmYTZjYjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>huuya</dc:creator></item><item><title><![CDATA[noFallthroughCasesInSwitchを指定してfallthroughを検出する]]></title><description><![CDATA[
 はじめに
switch文に break を書き忘れると、意図しないフォールスルーが発生する。
TypeScriptでは、noFallthroughCasesInSwitchオプションを有効にすることで、
静的解析の段階でこのミスを検知できる。
本記事では、このオプションの有無による挙動の違いを解説する。

 noFallthroughCasesInSwitch

noFallthroughCasesInSwitchはswitch文のfallthroughを禁止するコンパイラオプションです。

https://typescriptbook.jp/reference/tsconfig/n...]]></description><link>https://zenn.dev/taisei_tech/articles/ef04c2de9ae1df</link><guid isPermaLink="true">https://zenn.dev/taisei_tech/articles/ef04c2de9ae1df</guid><pubDate>Fri, 01 Aug 2025 12:34:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C2oXm2vq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:noFallthroughCasesInSwitch%25E3%2582%2592%25E6%258C%2587%25E5%25AE%259A%25E3%2581%2597%25E3%2581%25A6fallthrough%25E3%2582%2592%25E6%25A4%259C%25E5%2587%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:T%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZGE1NmE4YzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>T</dc:creator></item><item><title><![CDATA[kintoneのクエリ文字列を型安全に組み立てる【kintone functional query】]]></title><description><![CDATA[
 はじめに
皆様はkintoneのクエリをTypeScriptで扱う際、どのような手段を取っていますか。
たとえばコーディング段階で完全に決まっているクエリであれば、それこそ文字列でベタ書きする方が多いのではないかと思いますし、昔利用したことのあるiPaaSのMakeではおそらく内部的にトヨクモさんのkintone-query-builderが利用されていたように思います。
https://github.com/toyokumo/kintone-query-builder-js/tree/main
しかし、このどちらの方法もTypeScriptのコード補完やエラー検知の恩恵をうまく得る...]]></description><link>https://zenn.dev/parmenion/articles/b4c9103eaaf29c</link><guid isPermaLink="true">https://zenn.dev/parmenion/articles/b4c9103eaaf29c</guid><pubDate>Fri, 01 Aug 2025 11:13:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--23FhwfvM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:kintone%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E7%25B5%2584%25E3%2581%25BF%25E7%25AB%258B%25E3%2581%25A6%25E3%2582%258B%25E3%2580%2590kintone%2520functional%2520query%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2591%25E3%2583%25AB%25E3%2583%25A1%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYyYzdjMDBhZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>パルメニオン</dc:creator></item><item><title><![CDATA[PR提出前にやるリファクタリング]]></title><description><![CDATA[PR出す前に最低限やって欲しいと思っているリファクタリングメモ

リファクタリング (refactoring) とは、コンピュータプログラミングにおいて、プログラムの外部から見た動作を変えずにソースコードの内部構造を整理することである。
https://ja.wikipedia.org/wiki/リファクタリング_(プログラミング)


 想定

期待の新人君
JavaScript / TypeScript
フロントエンド


 嗅覚を研ぎ澄ませる🐶
次の匂いがしたらリファクタリングを検討してみる

不可思議な名前
重複したコード
長い関数
長いパラメータリスト
複雑なループ
甘えたコメ...]]></description><link>https://zenn.dev/morimorig3/articles/301b09f80337f3</link><guid isPermaLink="true">https://zenn.dev/morimorig3/articles/301b09f80337f3</guid><pubDate>Fri, 01 Aug 2025 07:12:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hmyEg1hK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PR%25E6%258F%2590%25E5%2587%25BA%25E5%2589%258D%25E3%2581%25AB%25E3%2582%2584%25E3%2582%258B%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:morimorig3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwOTQyMzMwZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>morimorig3</dc:creator></item><item><title><![CDATA[JavaScriptを深く知る旅 #1：ホイスティングってなに？]]></title><description><![CDATA[
 はじめに
最近 React を学んでいる中で、React の開発者である Dan Abramov さんの記事を読み、自分自身もまったく同じことを感じました。
JavaScript や TypeScript を強みにしていきたいと考えている自分にとって、やはり JavaScript の基礎をしっかり理解することが欠かせない！！そんな思いが強くなり、この記事を書くことにしました。
これからしばらく、JavaScript に関する学びをアウトプットしていこうと思っています。
第1回は「ホイスティング（巻き上げ）」についてです。
参照元：What is JavaScript made of?...]]></description><link>https://zenn.dev/yuji6523/articles/js-deep-dive-1-hoisting</link><guid isPermaLink="true">https://zenn.dev/yuji6523/articles/js-deep-dive-1-hoisting</guid><pubDate>Fri, 01 Aug 2025 04:11:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H7XZarYS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2582%2592%25E6%25B7%25B1%25E3%2581%258F%25E7%259F%25A5%25E3%2582%258B%25E6%2597%2585%2520%25231%25EF%25BC%259A%25E3%2583%259B%25E3%2582%25A4%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2581%25AB%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMzIxNGViMjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuji</dc:creator></item><item><title><![CDATA[Zenn記事投稿コンテスト「TypeScriptでやってみた挑戦・学び・工夫」へ協賛しました]]></title><description><![CDATA[こんにちは、エンジニアの山下です。フォルシアは第3回Zenn記事投稿コンテスト「TypeScriptでやってみた挑戦・学び・工夫」に協賛しました。この記事では企業賞決定の経緯や授賞式の様子をレポートします。

 zenn記事投稿コンテストとは
Zenn記事投稿コンテストは、技術情報共有プラットフォーム「Zenn」を運営するクラスメソッド株式会社様主催の、エンジニア向けの技術記事投稿コンテストです。第3回となる今回のテーマは「TypeScriptでやってみた挑戦・学び・工夫」となっており、TypeScriptにまつわる技術的な試行錯誤や発見、実装の工夫などを広く共有する場となりました。
h...]]></description><link>https://zenn.dev/forcia_tech/articles/20250723_zenn_contest_wyamashita</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/20250723_zenn_contest_wyamashita</guid><pubDate>Fri, 01 Aug 2025 04:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JOPdOkSR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E8%25A8%2598%25E4%25BA%258B%25E6%258A%2595%25E7%25A8%25BF%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2580%258CTypeScript%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E6%258C%2591%25E6%2588%25A6%25E3%2583%25BB%25E5%25AD%25A6%25E3%2581%25B3%25E3%2583%25BB%25E5%25B7%25A5%25E5%25A4%25AB%25E3%2580%258D%25E3%2581%25B8%25E5%258D%2594%25E8%25B3%259B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[Playwright でマイクをモックする]]></title><description><![CDATA[
 Playwrightとは?

PlaywrightとはE2Eテストを行うためのライブラリです。
LLMの登場により、コーディング速度は飛躍的に上昇しましたが、コードの品質を保つためにはテストが不可欠です。

https://playwright.dev/

 ブラウザ上のマイクを使うまでの流れ

 1. ブラウザ標準APIで、マイクへのアクセスをリクエストする
const userMedia = await navigator.mediaDevices.getUserMedia({
    audio: {
      noiseSuppression: true,      // ...]]></description><link>https://zenn.dev/fatricepaddyy/articles/playwrightvoicetests</link><guid isPermaLink="true">https://zenn.dev/fatricepaddyy/articles/playwrightvoicetests</guid><pubDate>Fri, 01 Aug 2025 02:27:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EDxYD7da--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Playwright%2520%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25AF%25E3%2582%2592%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:FatRicePaddyyyy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmYmViMDM0NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FatRicePaddyyyy</dc:creator></item><item><title><![CDATA[【豆知識】tscのコンパイルエラー<なぜか個別tscに失敗>]]></title><description><![CDATA[
 単純処理をtscでコンパイルしようとしたらエラーが出た

 原因
個別ファイルに対してtscコンパイルするとtsconfig.jsonの設定が反映されないとのこと。
なのでファイル全体に対してtscするか、個別ファイルにtscしたいなら実行コマンドにオプションをつける。
サンプル例(src/add.ts)
export const add = (a: number, b: number): number =&gt; a + b;
個別ファイルに対してtscした実行結果
$ npx tsc src/add.ts
node_modules/@types/chai/index.d.ts:8...]]></description><link>https://zenn.dev/rust_health/articles/a8e86d995681a3</link><guid isPermaLink="true">https://zenn.dev/rust_health/articles/a8e86d995681a3</guid><pubDate>Thu, 31 Jul 2025 10:27:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O0lt2XUd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E8%25B1%2586%25E7%259F%25A5%25E8%25AD%2598%25E3%2580%2591tsc%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%253C%25E3%2581%25AA%25E3%2581%259C%25E3%2581%258B%25E5%2580%258B%25E5%2588%25A5tsc%25E3%2581%25AB%25E5%25A4%25B1%25E6%2595%2597%253E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nagoya_manaka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeEYzUEdPalNESV9rVk4yV2dUWDJSeEpzOURWU1lMRDVWMng4ei09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nagoya_manaka</dc:creator></item><item><title><![CDATA[【初心者向け】JWTを使ったNode.js認証機能の実装メモ]]></title><description><![CDATA[
 🔰 はじめに
TypeScript + Node.js を使って JWTによる認証機能 を初めて実装してみました。
この記事はその備忘録であり、同じようにこれからJWT認証を学びたい方に向けたまとめです。


 👤 対象読者

Node.js でログイン機能の作成を学びたい方
JWT 認証の流れをコードレベルで理解したい方
TypeScript＋MySQL環境で認証機構を構築したい方



 ⚙️ 使用技術スタック

Node.js
TypeScript
Express
JWT（jsonwebtoken パッケージ）
MySQL（DB接続用）
その他パッケージ（dotenv, bcr...]]></description><link>https://zenn.dev/tomox2x2/articles/002_jwtnodejs</link><guid isPermaLink="true">https://zenn.dev/tomox2x2/articles/002_jwtnodejs</guid><pubDate>Thu, 31 Jul 2025 09:15:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KJsAv35A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591JWT%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259FNode.js%25E8%25AA%258D%25E8%25A8%25BC%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ver.100%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk9PWm5DX0JxTUFKUmZORUM0QzNBRFZmZ0g4NzIzOU9nT3pkZ3V5aGI0Qk1CMjJhaz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ver.100</dc:creator></item><item><title><![CDATA[CORSエラーにハマった話とその解決メモ]]></title><description><![CDATA[
 発生したエラー
Access to fetch at 'http://localhost:5001/me' from origin 'http://localhost:3000' has been blocked by CORS policy:
Response to preflight request doesn't pass access control check:
No 'Access-Control-Allow-Origin' header is present on the requested resource.

 原因の推測
サーバー側で Access-Control...]]></description><link>https://zenn.dev/yuji6523/articles/cors-error-access-control-allow-origin</link><guid isPermaLink="true">https://zenn.dev/yuji6523/articles/cors-error-access-control-allow-origin</guid><pubDate>Thu, 31 Jul 2025 03:33:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3lVdYYCv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CORS%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjMzIxNGViMjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuji</dc:creator></item><item><title><![CDATA[TypeScriptのGCはどのように動いているのか]]></title><description><![CDATA[
 はじめに
こんにちは。株式会社ソニックムーブの中崎です。
最近？ JJUG CCC 2025 Springというイベントに参加しました。(もう2ヶ月経ってるやん…)
参加理由は友人がスピーカーをやるということで、特にJavaのことはよく知らずに参加しました。
そこでガベージコレクションについてのセッションが2つもあり、普段使っているTypeScriptのGCはどうなっているのか気になって調べてみることにしました！

 GCとは
プログラムが動作する中で生成されたデータ（オブジェクトや変数など）は、使われなくなっても自動では消えません。そこで登場するのが「ガベージコレクション（以下GC...]]></description><link>https://zenn.dev/sonicmoov/articles/9b45c96b252891</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/9b45c96b252891</guid><pubDate>Thu, 31 Jul 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H8qULBzV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEGC%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E5%258B%2595%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:r.nakazaki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRzd2RuZ181WjM5VUdEY3I1NW1jdmpPVXpLbkVoSkpqbFB6MUNxOTBLTzdON1p2UT1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>r.nakazaki</dc:creator></item><item><title><![CDATA[フロントエンドエンジニアのための技術マップ【2025】]]></title><description><![CDATA[Webフロントエンドの全体的な構造をざっくりまとめてみました。
フロントエンド開発で欠かせない技術要素から、Node.jsの立ち位置、今さら聞けないモジュールバンドラーやトランスパイラなど...
順を追って必要な知識を整理していきます。
ここでは各要素について深掘りはせず、あくまで全体像を把握できるような内容を目指しています。

 🌱 1. Web開発の基礎

 インターネットの基礎知識

HTTP / HTTPS / DNS / IP：通信プロトコルと名前解決の基礎
ブラウザの仕組み：レンダリングやJavaScript実行の流れ
クライアントとサーバーの関係：役割と通信の基本

フロン...]]></description><link>https://zenn.dev/tmkst/articles/d9834d14332099</link><guid isPermaLink="true">https://zenn.dev/tmkst/articles/d9834d14332099</guid><pubDate>Wed, 30 Jul 2025 16:08:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RLDOnlqU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E3%2580%25902025%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2595%25E3%2581%25A8%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxNTNiMWJhNGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>さとう</dc:creator></item><item><title><![CDATA[ちょっとVS Codeフレンドリーなコマンドラッパー]]></title><description><![CDATA[
 概要
なんとなく思いついたので外部コマンドをラップしてTypescriptのスクリプトから実行しやすいようにするmisocmdを作成しました。
中身は単純にspwanSyncを呼び出しているだけですが、登録したコマンドが補完で表示されるのが（唯一の）特徴です。

(上の画像のコードは間違いがあり、実際には実行例が正しい)

 使い方
詳細はJSRレポジトリを参照してください。

 インストール
# npm
npx jsr add @misogohei/misocmd
# deno
deno add jsr:@misogohei/misocmd
# bun
bunx jsr add @...]]></description><link>https://zenn.dev/misogohei/articles/3e1c64a1e54d02</link><guid isPermaLink="true">https://zenn.dev/misogohei/articles/3e1c64a1e54d02</guid><pubDate>Wed, 30 Jul 2025 13:33:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--U_lQ-ck4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25A1%25E3%2582%2587%25E3%2581%25A3%25E3%2581%25A8VS%2520Code%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25BC%25E3%2581%25AA%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2591%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:misogohei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDVKMi15bkZJNDBaU0ZpcnBCRmlTV2dTR2JkbWFTVFRNN2gtVFVaVlh4WFNJX3ZnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>misogohei</dc:creator></item><item><title><![CDATA[Zod 4、いつの間に完成していたの!?]]></title><description><![CDATA[今月 10 日ごろ、私のアンテナに捕捉されることなく Zod の v4 がリリースされました。この記事では、v4 で追加・変更された内容のうち、私 (🔰) が特に注目した機能をご紹介します！

 1.【New!】国際化
v4 から、Zod は日本語を含む複数のロケールに対応したエラーメッセージを提供するようになりました 🎉
import * as z from "zod";

z.config(z.locales.ja());
例えば、以下のような日本語のエラーメッセージが表示できます。ただし残念ながら、型名などは英語のままです。

無効なメールアドレス
小さすぎる値: arrayは1要...]]></description><link>https://zenn.dev/hanohrs/articles/148f33c29e7a91</link><guid isPermaLink="true">https://zenn.dev/hanohrs/articles/148f33c29e7a91</guid><pubDate>Wed, 30 Jul 2025 12:37:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YET95VuU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25204%25E3%2580%2581%25E3%2581%2584%25E3%2581%25A4%25E3%2581%25AE%25E9%2596%2593%25E3%2581%25AB%25E5%25AE%258C%25E6%2588%2590%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%259F%25E3%2581%25AE%2521%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hanohrs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHNqSnY2d1lBQmNqeEJrNXZQX0pRbUttV2VoYnQycWItQWNZS1dzM2dhQTdKZll3VEo9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hanohrs</dc:creator></item><item><title><![CDATA[React useImperativeHandleの実装方法と実践的な使い所]]></title><description><![CDATA[
 useImperativeHandleとは
useImperativeHandleは、親コンポーネントから子コンポーネントの特定のメソッドや値にアクセスできるようにするReactフックです。通常のReactの単方向データフローに対して、子から親への直接的なアクセスを可能にします。

 基本的な使い方

 TypeScriptでの実装例
import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';

// 公開するメソッドの型定義
export interface InputRef {...]]></description><link>https://zenn.dev/tk_niway/articles/react-use-imperative-handle-2025-07-30</link><guid isPermaLink="true">https://zenn.dev/tk_niway/articles/react-use-imperative-handle-2025-07-30</guid><pubDate>Wed, 30 Jul 2025 07:47:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tVQE9iZw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520useImperativeHandle%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8%25E5%25AE%259F%25E8%25B7%25B5%25E7%259A%2584%25E3%2581%25AA%25E4%25BD%25BF%25E3%2581%2584%25E6%2589%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tk-niway%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc2YWM4NDM4NDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tk-niway</dc:creator></item><item><title><![CDATA[Quartz4でZenn互換の画像パス(/images)を使えるようにする改造]]></title><description><![CDATA[
 はじめに
Quartz4は素晴らしい静的サイトジェネレーターですが、デフォルトではcontentフォルダ内の画像のみを処理します。一方、Zennでは/imagesフォルダに画像を配置するのが標準的です。
両方のプラットフォームでコンテンツを管理する場合、画像パスの整合性を保つことが重要になります。今回は、Quartz4でZenn互換の画像パス（/images/画像名.png）を使えるように改造した話です。

 問題：Quartz4のデフォルトの画像管理
Quartz4のデフォルト設定では、以下のような制限があります：

画像はcontentフォルダ内に配置する必要がある

![](i...]]></description><link>https://zenn.dev/bottersatoshi/articles/ef89293a9dc690</link><guid isPermaLink="true">https://zenn.dev/bottersatoshi/articles/ef89293a9dc690</guid><pubDate>Wed, 30 Jul 2025 06:32:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sGJ-45wz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Quartz4%25E3%2581%25A7Zenn%25E4%25BA%2592%25E6%258F%259B%25E3%2581%25AE%25E7%2594%25BB%25E5%2583%258F%25E3%2583%2591%25E3%2582%25B9%2528%252Fimages%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2594%25B9%25E9%2580%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:botterSatoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjhYS2psQVZJd3pnWllRVldmbUhnMmR0am5uX252c0VJbXh2U01lcF9VMHpscXpBdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>botterSatoshi</dc:creator></item><item><title><![CDATA[Mermaid.jsでクリック可能なマインドマップを実装する（Next.js）]]></title><description><![CDATA[
 はじめに
こちらの記事では StreamlitでMermaidのマインドマップを表示しました。
https://zenn.dev/nomhiro/articles/streamlit-mermaid-maindmap
今回は、マインドマップのノードをクリックしたらノード情報を詳細表示するようにしたいと思います。
結論、このようになります。
ノードをクリックすると、右側Sidebarにそのノードの詳細情報が表示されます。


 （課題）Streamlitでのクリックイベント問題
Streamlitのcomponents.html()でMermaidを表示する方法では、SVG要素のクリッ...]]></description><link>https://zenn.dev/nomhiro/articles/mindmap-node-click-nextjs</link><guid isPermaLink="true">https://zenn.dev/nomhiro/articles/mindmap-node-click-nextjs</guid><pubDate>Wed, 30 Jul 2025 06:19:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DrKNYeA3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mermaid.js%25E3%2581%25A7%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2583%25E3%2582%25AF%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%25E3%2583%259E%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2588Next.js%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%258D%25E3%2581%258F%25E3%2581%25BE%25EF%25BC%2588nomhiro%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q0YmFmOGY4OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しろくま（nomhiro）</dc:creator></item><item><title><![CDATA[【Claude Code】Custom slash commandでテストを自動化した話]]></title><description><![CDATA[
 はじめに
今回は、Claude CodeのCustom slash commandでテストを自動化できたため、その方法を共有します。

 前提

 AIとテスト駆動開発の相性の良さ
近年、Vibe Coding（AIとの対話的プログラミング）とテスト駆動開発の組み合わせが注目されています。以下の記事でも詳しく解説されており、品質と開発効率を両立できる手法として紹介されています。
https://www.wantedly.com/companies/wantedly/post_articles/981006
https://zenn.dev/farstep/articles/claud...]]></description><link>https://zenn.dev/sc30gsw/articles/96a07baca27b5a</link><guid isPermaLink="true">https://zenn.dev/sc30gsw/articles/96a07baca27b5a</guid><pubDate>Wed, 30 Jul 2025 05:30:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--R5m7skOL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Claude%2520Code%25E3%2580%2591Custom%2520slash%2520command%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kaito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA5ZmViMGZmOGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kaito</dc:creator></item></channel></rss>