<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Sat, 24 May 2025 05:15:11 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[editの使い方(初心者向け)]]></title><description><![CDATA[
 初めに
!
本稿では、Ctrl キーと nキーを同時押しすることをCtrl + nと書きます。
同様にAltキーとfキーを同時押しすることをAlt + f等と書きます！

3日前くらいにMicrosoftから公式のCLIエディターが発表されました。
https://github.com/microsoft/edit?tab=readme-ov-file
曰く、MS-DOSエディタへのオマージュをしつつ、VS Codeに似たモダンなインターフェースと入力コントロールを備えているとのこと！
Windows環境において、コーディング環境としては心もとないですが、ちょっとした設定ファイルなど...]]></description><link>https://zenn.dev/96140/articles/c9b6add175b005</link><guid isPermaLink="true">https://zenn.dev/96140/articles/c9b6add175b005</guid><pubDate>Fri, 23 May 2025 14:54:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iubDDX-P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:edit%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2528%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kuro-140%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y4OGI1NmMzYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kuro-140</dc:creator></item><item><title><![CDATA[ABC_406_E 'Popcount Sum 3'をRustで解く]]></title><description><![CDATA[今回はRubyではなくRustを使います。理由はカッコいいからです。

 問題
N以下、かつpop countがKの整数を全部合計してください。答えは998244353の剰余で
https://atcoder.jp/contests/abc406/tasks/abc406_e

 解法
いくつか存在しますが、私の観測範囲で最も一般的なのは桁DPでした。
https://x.com/yiwiy9/status/1924810348676448564
https://atcoder.jp/contests/abc406/editorial/13071
公式解説だと誤字なのか何なのか変な記法に...]]></description><link>https://zenn.dev/hal_mat/articles/0e8799c6ddd0ac</link><guid isPermaLink="true">https://zenn.dev/hal_mat/articles/0e8799c6ddd0ac</guid><pubDate>Thu, 22 May 2025 05:36:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zXdxU4uE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC_406_E%2520%2527Popcount%2520Sum%25203%2527%25E3%2582%2592Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hal_Mat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvaC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hal_Mat</dc:creator></item><item><title><![CDATA[nullの扱いに注意...(TSでの工夫)]]></title><description><![CDATA[!
後日追記
この記事を読むにあたって私の知識の乏しさと勢いとノリで書いてしまった部分もあるので間違っている部分が多くあると思います。
数件コメントをいただきましたが、参考になるコメントです。
コメントを踏まえた上でリプレイスしてみました。
それも踏まえた上で読んでいただけると幸いです。

こんにちは。
てるし〜です。
JavascriptやTypescriptでプログラムを書いているとnullが出てくると思います。
みなさんはこれらを使っていますか？
nullを使う場合はしっかりとハンドリングする必要があります。
ですが、経験の浅い私はうっかり雑なハンドリングをしてしまいバグを起こして...]]></description><link>https://zenn.dev/terusi/articles/e243ead933d406</link><guid isPermaLink="true">https://zenn.dev/terusi/articles/e243ead933d406</guid><pubDate>Wed, 21 May 2025 19:04:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--S3gUt41P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:null%25E3%2581%25AE%25E6%2589%25B1%25E3%2581%2584%25E3%2581%25AB%25E6%25B3%25A8%25E6%2584%258F...%2528TS%25E3%2581%25A7%25E3%2581%25AE%25E5%25B7%25A5%25E5%25A4%25AB%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2597%25E3%2580%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlM2M5MzkyNjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てるし〜</dc:creator></item><item><title><![CDATA[ABC406: Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 406のA-E問題をRustで解いた際の解法をまとめました。

 A 問題
問題
https://atcoder.jp/contests/abc406/tasks/abc406_a
解説
この問題は、締め切り時刻と提出時刻を比較し、締め切り前に提出できたかを判定する問題です。
まず、締め切り時刻と提出時刻をそれぞれ分単位に変換します。その後、締め切り時刻 \geq 提出時刻のときは Yes 、そうでない場合は No を出力します。
コード

abc406a.rs
use proconio::input;

fn main() {
    ...]]></description><link>https://zenn.dev/nakst_hide/articles/f1dbff117f09d9</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/f1dbff117f09d9</guid><pubDate>Wed, 21 May 2025 13:10:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--x4Q3EjlY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC406%253A%2520Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rust×Next.jsで画像をシルエット化！Wasmで遊びながら学ぶWeb開発]]></title><description><![CDATA[Rustで画像処理してみたい！でもCLIツールだけじゃなくて、Webアプリにも活かせたら楽しそう……。そんな気持ちから始まった今回の企画。

この記事では、Rustで書いた画像処理ロジックをWebAssembly（Wasm）に変換して、Next.js上で動かす方法を紹介します。最終的には「画像をアップロード → シルエット風に変換 → ダウンロードできる」Webアプリを完成させます。]]></description><link>https://zenn.dev/kenquichi/books/b01ffcb33259da</link><guid isPermaLink="true">https://zenn.dev/kenquichi/books/b01ffcb33259da</guid><pubDate>Wed, 21 May 2025 10:09:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TYjUWMbB--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8zZjhhMzE2YTNlLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[0027-trait-object]]></title><description><![CDATA[on_screenの型はdyn Drawになっている
これはgenericsとちがって引数のdrawの型は動的となる。またコンパイルされるコードも型ごとにバイナリが生成されたりしない
実際のところon_screen内のboundsはvtableを参照して解決することになるため実行時間が不利になり
ただしgenericsとちがってコンパイル時に型ごとのbinaryを生成しないためコンパイルタイムは減る
内部的な型情報は失われdraw変数は実体ではなく抽象化され、SquareでもCircleでもtrait_obj::Drawとなる、またこの時にTypeIdも同一のものになる
use std:...]]></description><link>https://zenn.dev/yukinekonyan/articles/0c641c3ce1ff38</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/0c641c3ce1ff38</guid><pubDate>Wed, 21 May 2025 09:48:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nVSkWcJF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0027-trait-object%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0026-generics]]></title><description><![CDATA[このコードの重要なポイントはon_screenのところで、ここの型は&amp;Tになっている
この場合は、on_screenはC++でいうところのtemplateと同様にこの関数のバインリをcallしてくる型の分だけ生成する
このことによって呼びだし時のcostは少くてすむが、バイナリやコンパイルタイムは増大することになる
use std::any::{type_name, TypeId};
#[derive(Debug, Clone, Copy)]
struct Point {
    x: f64,
    y: f64,
}

#[derive(Debug, Clone, Copy...]]></description><link>https://zenn.dev/yukinekonyan/articles/3d14ec1813dd6d</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/3d14ec1813dd6d</guid><pubDate>Wed, 21 May 2025 09:41:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Gsg3uY9S--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0026-generics%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[🦀Deep dive into Reth⚙️]]></title><description><![CDATA[
 0. はじめに
https://github.com/paradigmxyz/reth
Rethはその名のとおりRustで実装されたEthereumのExecution Clientである。
プロジェクトをリードするParadigm が宣言している通りいくつか特徴があるが、競合となるGethと比較した時に強調できるのは以下の3点である。

Modularity
Performance
Client Diversity

1と2は密接に関係しているだけでなく、3の課題解決に繋がっていると言っても過言ではない。
この記事はGethのアーキテクチャと比較しながら主にModularityとP...]]></description><link>https://zenn.dev/adust/articles/e7f916f26f0cf0</link><guid isPermaLink="true">https://zenn.dev/adust/articles/e7f916f26f0cf0</guid><pubDate>Wed, 21 May 2025 08:52:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--798zVe7m--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:%2520Deep%2520dive%2520into%2520Reth%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:adust%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkNmY2ODhiYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>adust</dc:creator></item><item><title><![CDATA[microsoft/editを使ってみた]]></title><description><![CDATA[microsoftのeditというcuiエディタがgithub上で公開されたので
それについて詳しく書く。

 editとは
windowsにはデフォルトでインストールされているms公式の
エディタがnotepadしかない。
notepadはあくまでguiのツールだし、ターミナル上で
動作するvimみたいなエディタが存在しないため、
今回windowsに載せる目的でeditを作ったという事らしい。
sshからwindowsにログインした場合は公式が推奨する
エディタで編集するというのが不可能になるのだから確かに必要だ。
現在はmicrosoft/editのレポジトリに
windowsのx...]]></description><link>https://zenn.dev/oto/articles/accb6006803bbb</link><guid isPermaLink="true">https://zenn.dev/oto/articles/accb6006803bbb</guid><pubDate>Tue, 20 May 2025 19:09:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--i2y4fCNq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:microsoft%252Fedit%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Otogawa%2520Katsutoshi...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiZTMxMWQ2YmIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Otogawa Katsutoshi(oto)</dc:creator></item><item><title><![CDATA[RustでMCPを作ろうとしたが...]]></title><description><![CDATA[
 RustでMCPを作ろうとした
MCPサーバーを作ろうと思い。
MCP公式のライブラリ rmcpを使い作成しようとした。
現状の公式版は扱いづらいため結局やめてしまった。
現状の公式配布バージョン
rmcp = { version = "0.1.5", features = ["server", "macros"] }
何が具体的に扱いづらかったかというと。
サンプルには属性マクロで設定する方法が書かれていた。
だが 0.1.5 だとtool_box!( … ); しかなく、IDEが警告を出してくる。
それで諦めた。
現在開発中のバージョンがリリースされてから作ってみようと思います。...]]></description><link>https://zenn.dev/sika7/articles/432a36a99b5c0d</link><guid isPermaLink="true">https://zenn.dev/sika7/articles/432a36a99b5c0d</guid><pubDate>Tue, 20 May 2025 07:42:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IZUcm74_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7MCP%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%258C...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sika7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgxNjE5NWFiMzYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sika7</dc:creator></item><item><title><![CDATA[Tauri v2 + Svelte 5をはじめとしたMnemnkの技術スタック]]></title><description><![CDATA[現在、開発中のMnemnkの技術スタックについて紹介します。
https://ja.mnemnk.com/

 Tauri v2
MnemnkはTauriを用いてデスクトップアプリとして動作します。
https://tauri.app/
Tauriを用いることでマルチプラットフォームのアプリケーションを一つのコードで書くことができます。今の構成になるまでに試みたものは、以下の通りです。


Electron: 実際、前身のアプリはElectronを使っていました。ライフロギングに必要な情報、スクリーンショットであったりアクティブなアプリを得るためのNode.jsライブラリーなども存在しま...]]></description><link>https://zenn.dev/akrisn/articles/mnemnk_tech_stack</link><guid isPermaLink="true">https://zenn.dev/akrisn/articles/mnemnk_tech_stack</guid><pubDate>Tue, 20 May 2025 00:28:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QUeDd2vS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%2520v2%2520%252B%2520Svelte%25205%25E3%2582%2592%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259FMnemnk%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akrisn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4NGY4MTFkZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akrisn</dc:creator></item><item><title><![CDATA[rust-analyzerはrustcと別の警告を出すことがある]]></title><description><![CDATA[rust-analyzerのソースを参照するとわかりますが、警告の検出処理が独自に実装されています(すべての警告が独自実装なのか、一部はrustcの処理を使用しているのか? は未調査)。
rustcがバッチ処理でコンパイルできればよいのに対してrust-analyzerはインタラクティブなチェックが必要となるため、データ構造が共用できないのではないかと思われる。
これで何が困るかと言うと、cargo buildでは何も出ないのにrust-analyzerだけ警告を出してくるといった謎のバグを踏んで小一時間悩むことがある。踏んだ。
「そういうこともある」というのを覚えておくと稀に役立ちます。
]]></description><link>https://zenn.dev/todesking/articles/26321407bd936e</link><guid isPermaLink="true">https://zenn.dev/todesking/articles/26321407bd936e</guid><pubDate>Mon, 19 May 2025 13:57:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AqI0QyUG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust-analyzer%25E3%2581%25AFrustc%25E3%2581%25A8%25E5%2588%25A5%25E3%2581%25AE%25E8%25AD%25A6%25E5%2591%258A%25E3%2582%2592%25E5%2587%25BA%25E3%2581%2599%25E3%2581%2593%25E3%2581%25A8%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:todesking%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJiNGY3OGYyOTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>todesking</dc:creator></item><item><title><![CDATA[Rust & Wasm から Gemini APIを使う(マイク付き)]]></title><description><![CDATA[
 はじめに
前回、GeminiAPIを使ったミニゲームを作成してみましたが、生成AIをもっと活用するには、マイクから音声の取り込みができた方が良いと考え、ブラウザーのマイク機能を使った音声入力機能を追加してみました。

 対象のバージョン

Rust 2024 Edition
rustc 1.83.0
cargo 1.80.1
rustup 1.27.1
pnpm 9.12.3


 Rust&amp;Wasm サンプル
Play in browser

※サンプルを動作するためには、最初にGeminiAPIキーの入力が必要です。
※入力されたGeminiAPIキーは、安全のためcoo...]]></description><link>https://zenn.dev/yurioka/articles/1b4bfb097814a6</link><guid isPermaLink="true">https://zenn.dev/yurioka/articles/1b4bfb097814a6</guid><pubDate>Mon, 19 May 2025 13:48:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EZcFKqbi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%2526%2520Wasm%2520%25E3%2581%258B%25E3%2582%2589%2520Gemini%2520API%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2528%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25AF%25E4%25BB%2598%25E3%2581%258D%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myurioka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YTE2NGMzMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myurioka</dc:creator></item><item><title><![CDATA[rustのclapでサブコマンドを実装]]></title><description><![CDATA[
 clap

 構成
enumでサブコマンドをリスト、サブコマンド自体(引数とかオプション)は別のstructで定義、サブコマンドをリストしたenumの各バリアントにサブコマンドのstructを入れる。
#[derive(Debug, Parser)]
struct Cli {
    #[command(subcommand)]
    subcommand: Commands,
}

#[derive(Debug, Subcommand)]
enum Commands {
    /// initialize
    Init(Init),
    /// create new
 ...]]></description><link>https://zenn.dev/uliboooo/articles/d8d9b0e1ee6650</link><guid isPermaLink="true">https://zenn.dev/uliboooo/articles/d8d9b0e1ee6650</guid><pubDate>Mon, 19 May 2025 05:51:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--64io76rQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rust%25E3%2581%25AEclap%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Uliboooo%2528%25E3%2581%2586%25E3%2582%258A%25E3%2581%25BC%25E3%2581%2586%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MTFjYWRhM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Uliboooo(うりぼう)</dc:creator></item><item><title><![CDATA[なぜRustを選ぶのか]]></title><description><![CDATA[
 はじめに
この記事を書いた目的としては、現在インターン先で使っている言語でRustを扱っていて、そもそもなぜRustなのか？私の中で理解が落とし込めてなかったのでこの記事でまとめようと思い書くことにしました。

 Rustの概要
Rustは、安全性、速度、並行性を重視して設計された、比較的新しいシステムプログラミング言語であり、近年ウェブ開発の分野で注目を集めています。 その性能と信頼性から、特に高いパフォーマンスが要求されるアプリケーションにおいて、その採用が拡大しています。
以下では簡単な例を出してみようと思います。

 安全性
Rustでは所有権システムによって、Use Aft...]]></description><link>https://zenn.dev/kentaafk/articles/7d14026c914175</link><guid isPermaLink="true">https://zenn.dev/kentaafk/articles/7d14026c914175</guid><pubDate>Sun, 18 May 2025 15:51:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nXAAY-6N--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25AA%25E3%2581%259CRust%25E3%2582%2592%25E9%2581%25B8%25E3%2581%25B6%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kenta-afk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0d0Ry1tdC1lQTVVOW0wM092c3o0WDVPMlRQcGRIakZpM1I0SWZlYmNaQzlEdktlUT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kenta-afk</dc:creator></item><item><title><![CDATA[[Rust] Precise Capturing 精密キャプチャ `use<...>`]]></title><description><![CDATA[Rust 1.82 で安定化し 1.87 で trait にも拡張された impl use&lt;...&gt; という構文 (Precise Capturing, 拙訳: 精密キャプチャ) を, 備忘録として解説しておく.

 抽象戻り型についておさらい
抽象戻り型 (Abstract return types, 旧称: RPIT, Return Position impl Trait) とは, Rust の関数の戻り値において, 戻り値型を明示せずにそれが満たすべき trait 境界 (trait とライフタイムを指定するやつ) だけを impl Trait という構文で記述できる言...]]></description><link>https://zenn.dev/mikuroxina/articles/34bd62800b39a2</link><guid isPermaLink="true">https://zenn.dev/mikuroxina/articles/34bd62800b39a2</guid><pubDate>Sun, 18 May 2025 10:06:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Kwoqt15V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Precise%2520Capturing%2520%25E7%25B2%25BE%25E5%25AF%2586%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3%2520%2560use%253C...%253E%2560%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mikuro%25E3%2581%2595%25E3%2581%2584%25E3%2581%25AA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnJpZ3k1cXBxQzkxSWwyR2xWcS1xMDJSVldsVFBzTWtKV2thcUFBYlQ1X2xvS3Zxcz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mikuroさいな</dc:creator></item><item><title><![CDATA[clapクレート入門]]></title><description><![CDATA[アプリケーションのコマンドライン引数の解析（パース）はお決まりの仕事であり、その開発は退屈で面倒な作業です。

clapクレートを使うと、Rustアプリケーションのコマンドライン引数の解析を簡単に実装することができます。

本書ではバージョン情報を表示するだけの簡単なアプリケーションから初めて、少しずつ複雑な課題をこなしながらclapを使ったコマンドライン引数解析について学びます。

なお各章の内容に対応するアプリケーションをGitHubに公開していますので、実際に手元で動作するアプリケーションを見ながら学ぶことができます。
]]></description><link>https://zenn.dev/seiichihorie/books/20250424-rust-clap-intro</link><guid isPermaLink="true">https://zenn.dev/seiichihorie/books/20250424-rust-clap-intro</guid><pubDate>Sun, 18 May 2025 07:06:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BB2k89oq--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci85NGYzN2I0MmVkLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>堀江誠一</dc:creator></item><item><title><![CDATA[OSSと継続的に関わる方法の模索]]></title><description><![CDATA[先日、Deno で働くmaguroさん主催のmaguro.dev #1 supported by KIKKAKE AGENTにて、本記事タイトルで LT をしました。
本記事は、そこで話した内容に加筆・修正して、テキスト形式でまとめたものです。ここでの OSS コミットは、余暇にボランティアで行うことを前提としており、業務で行うことはあまり想定していません。


 最初のコミット
継続的に取り組んでいる OSS はありますか。自分の場合は、Biomeという Rust 製の Web ツールチェイン（Linter/Formatter） に取り組んでいます。数ある OSS のうちの 1 つです...]]></description><link>https://zenn.dev/kirohi/articles/8177525b4e8ea0</link><guid isPermaLink="true">https://zenn.dev/kirohi/articles/8177525b4e8ea0</guid><pubDate>Sun, 18 May 2025 04:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TGoiBmAC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25A8%25E7%25B6%2599%25E7%25B6%259A%25E7%259A%2584%25E3%2581%25AB%25E9%2596%25A2%25E3%2582%258F%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AE%25E6%25A8%25A1%25E7%25B4%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:unvalley%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlNWU0YWY2ZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>unvalley</dc:creator></item><item><title><![CDATA[Rust で Unix ライクな 自作 OS]]></title><description><![CDATA[octox は、Rust で 一からすべて(ビルドシステムも含め)実装された Unix ライクなオペレーティングシステムです。 xv6-riscv に触発された学習用 OS として実装を始めたものです(元々は Linux のような OS の勉強として始めました)。
この投稿では、octox の実装を通して経験したことから自身の Unix-like OS の実装において Rust の機能がどのように活用されているかについて触れてみたいと思います。
本記事は英語で公開していた以下の記事の日本語訳版です。
Writing a Unix-like OS in Rust
上記の記事を投稿後、いくつ...]]></description><link>https://zenn.dev/o8vm/articles/1f1ab4ba062f14</link><guid isPermaLink="true">https://zenn.dev/o8vm/articles/1f1ab4ba062f14</guid><pubDate>Sat, 17 May 2025 07:01:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qttkhq21--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520Unix%2520%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25AF%25E3%2581%25AA%2520%25E8%2587%25AA%25E4%25BD%259C%2520OS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:o8vm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NiZmU4Y2JiYzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>o8vm</dc:creator></item><item><title><![CDATA[Rustで配列内の特定の値のみ処理する様々な方法]]></title><description><![CDATA[ここでは様々な方法を駆使して配列内の特定の値を処理する様々な方法が書かれています。
ここではfilterメソッドとfindメソッドを使ったやり方で、
特定の値を抽出する方法について説明していきます。
findメソッドを使用したやり方は、趣味でRustのBevyでゲーム開発をしている中で見つけたもので、
filterメソッドはこの記事を公開した時に記事を見てくれた方から教えてもらったものです。
それぞれのメソッドの書き方や、違いなども説明していきますのでよろしくお願いします。

 まずはデータを定義
まずは検証を行うためのデータを定義します。
今回は人のデータPerson構造体と、性別のタ...]]></description><link>https://zenn.dev/ittoku_ky73/articles/rust-iflet-control</link><guid isPermaLink="true">https://zenn.dev/ittoku_ky73/articles/rust-iflet-control</guid><pubDate>Fri, 16 May 2025 08:20:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--alGwqmyQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E9%2585%258D%25E5%2588%2597%25E5%2586%2585%25E3%2581%25AE%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E5%2580%25A4%25E3%2581%25AE%25E3%2581%25BF%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%25E6%25A7%2598%25E3%2580%2585%25E3%2581%25AA%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ittoku%25EF%25BC%2588%25E3%2581%2584%25E3%2581%25A3%25E3%2581%25A8%25E3%2581%258F%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4NTc4ZWViYjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ittoku（いっとく）</dc:creator></item></channel></rss>