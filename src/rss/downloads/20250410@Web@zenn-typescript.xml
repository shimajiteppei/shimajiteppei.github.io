<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 10 Apr 2025 12:04:29 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Playwright】Error: EPERM: operation not permittedの解消のためにしたこと]]></title><description><![CDATA[PlaywrightのテストコードをWindows Powershellで実行しようとした際に、こちらのエラーが発生しました。「test-resultsファイルの操作が許可されていないよ」という旨のエラーのようです。
Error: EPERM: operation not permitted, rmdir 'C:\Users\-(省略)-\test-results'
実際のエラー画面はこちらです。

1行目でテストコードを実行。2行目が該当エラー
エラーの解消に手間取ったので、誰かの参考になればと思い記事にしました。

 エラーが解消した操作
結論、PCのエクスプローラーからtest-r...]]></description><link>https://zenn.dev/okitegami/articles/c10a2bb7c94bfc</link><guid isPermaLink="true">https://zenn.dev/okitegami/articles/c10a2bb7c94bfc</guid><pubDate>Thu, 10 Apr 2025 07:46:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qohKf5N0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Playwright%25E3%2580%2591Error%253A%2520EPERM%253A%2520operation%2520not%2520permitted%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kikuchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1NTRhZDI5ZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kikuchi</dc:creator></item><item><title><![CDATA[Orvalのtransformerを使ってOpenAPIの定義ファイルを書き出す]]></title><description><![CDATA[
 はじめに
Orvalを使うと OpenAPI からクライアントコードを生成できます。
この際、生成に使用した OpenAPI の定義ファイルをローカルへ保持し、Git 管理したいことがありました。
Orval では、生成されたクライアントコードのカスタマイズを可能にするためにtransformerを使用できます。
この機能を利用することでクライアントコードの生成時に定義ファイルを書き出すことができます。

 前提
以下の環境を前提としています。
$ node -v         
v22.14.0
$ npm init -y
$ npm install orval --save-d...]]></description><link>https://zenn.dev/marokanatani/articles/save_openapi_with_orval_transformer</link><guid isPermaLink="true">https://zenn.dev/marokanatani/articles/save_openapi_with_orval_transformer</guid><pubDate>Thu, 10 Apr 2025 05:03:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4S3lZmI_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Orval%25E3%2581%25AEtransformer%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6OpenAPI%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258D%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maroKanatani%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNTUzZDY3ZjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maroKanatani</dc:creator></item><item><title><![CDATA[useSearchParams()はSuspenseを忘れるな！]]></title><description><![CDATA[
 TL;DR
useSearchParams()はSuspenseしよう！
useSearchParams()に依存したhooksを使う時も忘れずに！

 経緯
next buildしたら以下のエラーが発生しました。
 ⨯ useSearchParams() should be wrapped in a suspense boundary at page "/test". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout
（中略）
Error occurred prerenderi...]]></description><link>https://zenn.dev/kofrah/articles/f2dce2da3e6aaf</link><guid isPermaLink="true">https://zenn.dev/kofrah/articles/f2dce2da3e6aaf</guid><pubDate>Thu, 10 Apr 2025 03:09:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MIHA_6rx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useSearchParams%2528%2529%25E3%2581%25AFSuspense%25E3%2582%2592%25E5%25BF%2598%25E3%2582%258C%25E3%2582%258B%25E3%2581%25AA%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kofrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljNmY2YzBlYWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kofrah</dc:creator></item><item><title><![CDATA[【React】memo, useMemo, useCallbackを使いこなす]]></title><description><![CDATA[
 はじめに
Reactアプリケーションのパフォーマンスチューニングにおいて、「メモ化（Memoization）」は頻繁に議論されるテクニックです。
React.memo、useMemo、useCallback は、適切に使えば不要な再レンダリングや計算を削減するHowToですが、誤った使い方や過剰な適用は、逆にコードの複雑性を増し、期待した効果が得られないことも少なくありません。
将来的には、React Compilerがこれらのメモ化APIの多くを自動化し、開発者の負担を軽減することが期待されていますが、現時点では手動での最適化が重要と捉えています。
筆者自身、直近DRESS COD...]]></description><link>https://zenn.dev/dress_code/articles/bd577b38e1c700</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/bd577b38e1c700</guid><pubDate>Thu, 10 Apr 2025 02:34:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Eh0iJSZV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%25E3%2580%2591memo%252C%2520useMemo%252C%2520useCallback%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25B5%25E3%2582%258B%25E3%2581%2597%25E3%2582%2587%25E3%2581%2586%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QzMmQ5N2Q0NmQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ふるしょう</dc:creator></item><item><title><![CDATA[145. Binary Tree Postorder Traversal]]></title><description><![CDATA[バイナリツリーの根ノードが与えられたとき、そのノードの値を「後順（ポストオーダー）」で巡回した結果を返してください。


 例：

 例 1:
入力： root = [1,null,2,3]
出力： [3,2,1]
説明：
後順巡回では「左 → 右 → 根」の順でノードを訪れます。


 例 2:
入力： root = [1,2,3,4,5,null,8,null,null,6,7,9]
出力： [4,6,7,5,2,9,8,3,1]
説明：
同様に「左 → 右 → 根」の順でノードを巡回します。


 例 3:
入力： root = []
出力： []
説明：
木が空なので、結果も空に...]]></description><link>https://zenn.dev/idapan/articles/e2ae976e3dd983</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/e2ae976e3dd983</guid><pubDate>Wed, 09 Apr 2025 21:48:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qRpVYtXg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:145.%2520Binary%2520Tree%2520Postorder%2520Traversal%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[TypeScript以外が嫌いです]]></title><description><![CDATA[
 TypeScript以外が嫌いです
こんにちは、TypeScript原理主義者のTakoです。今日は私がなぜTypeScript以外の言語が心の底から嫌いなのかをお話しします。

 はじめに
みなさん、世の中にはプログラミング言語がたくさんありますよね。Java、Python、JavaScript、Ruby、Go...。でも、私にとってそれらは全て「TypeScriptではない言語」というカテゴリに分類されます。つまり、使う価値のない言語です。

 型がないなんて、人生がないようなもの
JavaScript？あんなの型がなくて何が楽しいんですか？undefined is not a ...]]></description><link>https://zenn.dev/takoserver/articles/7a624e38285b16</link><guid isPermaLink="true">https://zenn.dev/takoserver/articles/7a624e38285b16</guid><pubDate>Wed, 09 Apr 2025 13:43:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UOOAg-F6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%258C%25E5%25AB%258C%25E3%2581%2584%25E3%2581%25A7%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmNTgyM2RjZDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たこ</dc:creator></item><item><title><![CDATA[LangGraphの途中出力をストリーミングする]]></title><description><![CDATA[コード生成エージェントを作っていた際に、途中結果をチャット画面に表示する方法を調べていました。
その過程で、LangGraphの途中出力をストリーミングする方法を見つけたので、ご紹介します。
LangGraph stremingのドキュメントを見ると、ストリーミングの設定がいくつかあります。今回は、customを利用したストリーミングを行います。

 customストリーミング
ここでは、customストリーミングのために設定する箇所をご説明します。実際に動くコードは最後に記載します。
TypeScriptとPythonのコードのそれぞれを記載します。
customストリーミングを利用す...]]></description><link>https://zenn.dev/mseabass/articles/8d7272b58bdd1f</link><guid isPermaLink="true">https://zenn.dev/mseabass/articles/8d7272b58bdd1f</guid><pubDate>Wed, 09 Apr 2025 13:39:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lXWs_oRl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LangGraph%25E3%2581%25AE%25E9%2580%2594%25E4%25B8%25AD%25E5%2587%25BA%25E5%258A%259B%25E3%2582%2592%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:M%2520Sea%2520Bass%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyYTE3NzA4YmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>M Sea Bass</dc:creator></item><item><title><![CDATA[型演算子【個人学習まとめ】]]></title><description><![CDATA[
 型演算子

 keyof
keyof演算子は指定されたオブジェクト型からプロパティのキーを抽出し、それらを結合したユニオン型を生成することができます。
keyof 演算子
interface Person {
  name: string;
  age: number;
  hobbies: string[];
}

type PersonKeys = keyof Person;
// name | age | hobbies 型
上記ではPersonインターフェイスに対してkeyof演算子を使用しています。
これにより、Person型のプロパティキーであるname、age、hobb...]]></description><link>https://zenn.dev/o0rororo0o/articles/1d08fa38d01615</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/1d08fa38d01615</guid><pubDate>Wed, 09 Apr 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--t18cSeoq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item><item><title><![CDATA[ZodとNext.jsのRoute Handlersから型安全なAPIクライアントを生成する最強ライブラリ「FrourioNext」]]></title><description><![CDATA[
 はじめに
以前の記事「Zodと設定0行でNext.jsのRoute Handlersに完全な型を付与する最強ライブラリ「FrourioNext」」では、Next.js の Route Handlers における型安全性の課題と、それを解決する FrourioNext の基本的な機能について紹介しました。
前回の記事を公開した時点ではいくつかの機能が未実装でしたが、現在のv0.9.3ですべて実装され、より強力なライブラリへと進化しています。
今回の記事では、その FrourioNext の中でも特に強力な クライアント生成機能 に焦点を当て、その使い方とメリットを詳しく解説していきます...]]></description><link>https://zenn.dev/solufa/articles/frourio-next-client</link><guid isPermaLink="true">https://zenn.dev/solufa/articles/frourio-next-client</guid><pubDate>Wed, 09 Apr 2025 10:19:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---nOxzmjz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zod%25E3%2581%25A8Next.js%25E3%2581%25AERoute%2520Handlers%25E3%2581%258B%25E3%2582%2589%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAAPI%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%259C%2580%25E5%25BC%25B7%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2580%258CFro...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Solufa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hSSkFIRjk0YjU5N0ZnQmFCbWxYUFBDWmkxYVlYcWdhVE1RanZHPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Solufa</dc:creator></item><item><title><![CDATA[TypeScriptでCLIツールを作りたい人のためのnpmプロジェクト]]></title><description><![CDATA[
 対象読者

TypeScriptを使い慣れている
ウェブアプリばかり書いている。コマンドラインツールも書きたい
個人的なツールをどこに置けばいいかわからずに ~/bin とかに置いている


 個人的なスクリプトをどこに置くか
適当にシェルスクリプトを書いて ~/bin に置いている、これは自分の話です。あれはメンテしづらい。やめたほうがいい。
最近は別の方法でCLIツールを配置している。結論から言うと、ご自分のホームにプロジェクト一覧みたいなフォルダがあると思いますが、あそこに新しいCLIコマンド用のプロジェクトフォルダを作成する。そこに置く。
$ tree ~
myProject...]]></description><link>https://zenn.dev/aromarious/articles/20250409-npm-project-for-write-cli-tools</link><guid isPermaLink="true">https://zenn.dev/aromarious/articles/20250409-npm-project-for-write-cli-tools</guid><pubDate>Wed, 09 Apr 2025 08:38:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--x4Zj-ExG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7CLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E4%25BA%25BA%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEnpm%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aromarious%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmMTIwZjRiODEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aromarious</dc:creator></item><item><title><![CDATA[TypeScriptでCLIツールを作りたい人のためのパッケージ6つ 画面表示/入力編]]></title><description><![CDATA[
 対象読者

TypeScriptを使い慣れている
ウェブアプリばかり書いている。コマンドラインツールも書きたい
CLIツールの表示や入力を今風にしたい


 コマンドラインは殺風景
日常のちょっとした雑用や、開発で同じ作業を繰り返す仕事のために、コマンドラインツールを作る。手でやるのとツール作るの、どっちが早いか分からないなと思いつつ、デジタル単純作業は精神に来るし、コードを書くのが楽しいのでそうしている。
シェルプロンプトに向かって、テキストで用意したデータやコマンドの出力をパイプをつなげてアドリブで処理することから始める。が、すぐに限界が来る。シェルスクリプトは書きづらいのだ。
...]]></description><link>https://zenn.dev/aromarious/articles/20250409-nodejs-packages-for-cli</link><guid isPermaLink="true">https://zenn.dev/aromarious/articles/20250409-nodejs-packages-for-cli</guid><pubDate>Wed, 09 Apr 2025 06:54:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xjiqRMHY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7CLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%259F%25E3%2581%2584%25E4%25BA%25BA%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B86%25E3%2581%25A4%2520%25E7%2594%25BB%25E9%259D%25A2%25E8%25A1%25A8%25E7%25A4%25BA%252F%25E5%2585%25A5%25E5%258A%259B%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aromarious%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmMTIwZjRiODEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aromarious</dc:creator></item><item><title><![CDATA[feasy内容とインストール方法]]></title><description><![CDATA[
 feasyとは
feasyとは、自分の個人情報を自分自身が管理するためのツールです。
feasyを使うことによって、例えば、名前や住所、電話番号や性別などの個人情報を、PCやスマホなどの自身の端末に保存することができます。
現在の世界では、自分の個人情報は各企業や各サービスに保存されています。これにはいくつか問題点があります。
例えば姓を変更するとき、各企業や各サービスの姓を全て変更する必要が生じます。また、個人情報は各企業や各サービスのレベルに委ねられ、貧弱性のある企業やサービスから情報漏洩が起こるなどセキュリティ面でも不安があります。
そこでこの問題を解決するのがfeasyです。...]]></description><link>https://zenn.dev/robustpatch/articles/f6d140e2e607c7</link><guid isPermaLink="true">https://zenn.dev/robustpatch/articles/f6d140e2e607c7</guid><pubDate>Wed, 09 Apr 2025 06:52:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wtsm6MK3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:feasy%25E5%2586%2585%25E5%25AE%25B9%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:robustPatch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNGs3Qm9YYk5rRVZlWUtQYzdpcUJzMnR4LWoxVEVZZEtRcE5BYno9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>robustPatch</dc:creator></item><item><title><![CDATA[#01 なぜ「集中分析アプリ」を作るのか？FocusSenseiの企画背景と技術選定]]></title><description><![CDATA[

 title: "#01 なぜ「集中分析アプリ」を作るのか？FocusSenseiの企画背景と技術選定"
emoji: "🎯"
type: "tech"
topics: ["React", "GPT", "Firebase", "FastAPI", "TypeScript"]
published: false
こんにちは！
この記事は、私が現在開発中のWebアプリ「FocusSensei」の企画背景と技術選定についてまとめたものです。
「集中力が続かない」「勉強はしているけど手応えがない」ーー
そんな日々の学習に**AIの力で“先生”をつけてみたら？**という発想から、このプロジェク...]]></description><link>https://zenn.dev/hyeon_marina247/articles/448429e8176bb7</link><guid isPermaLink="true">https://zenn.dev/hyeon_marina247/articles/448429e8176bb7</guid><pubDate>Wed, 09 Apr 2025 04:30:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4dqdyNCw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252301%2520%25E3%2581%25AA%25E3%2581%259C%25E3%2580%258C%25E9%259B%2586%25E4%25B8%25AD%25E5%2588%2586%25E6%259E%2590%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2580%258D%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259FFocusSensei%25E3%2581%25AE%25E4%25BC%2581%25E7%2594%25BB%25E8%2583%258C%25E6%2599%25AF%25E3%2581%25A8%25E6%258A%2580%25E8%25A1%2593%25E9%2581%25B8%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hyeon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzNzUyOTRmNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hyeon</dc:creator></item><item><title><![CDATA[contextswitcher──claude_desktop_config.json触りたくなくて作ったやつ]]></title><description><![CDATA[https://github.com/t3ta/contextswitcher

 🌀 はじまり
Claude Desktopくん、プロジェクトごとのMCP設定できないのちょっと不便じゃない？AIくんも指示通り tools/call してくれなくてつらい。毎回 claude_desktop_config.json 書き換えて、サーバー再起動して、ってしてるとさすがにやってられんな〜と思ったので、各プロジェクトの .roo/mcp.json に記載されている複数のMCPサーバーを縛って束ねるやつを作りました。

 ✨ なにができるの？
.roo/mcp.jsonを指定して、それぞれの MC...]]></description><link>https://zenn.dev/t3ta/articles/2e1e55d6e0b783</link><guid isPermaLink="true">https://zenn.dev/t3ta/articles/2e1e55d6e0b783</guid><pubDate>Wed, 09 Apr 2025 04:15:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uXfRBu_z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:contextswitcher%25E2%2594%2580%25E2%2594%2580claude_desktop_config.json%25E8%25A7%25A6%25E3%2582%258A%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2584%25E3%2581%25A4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t3ta%2520%2528Takahito%2520Mita%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MjFkNGVhYzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t3ta (Takahito Mita)</dc:creator></item><item><title><![CDATA[CognitoのUSER_SRP_AUTHをAmplifyなしで認証する]]></title><description><![CDATA[
 はじめに
はじめまして！エンジニアの@cottpanです。
みなさんCognito使ってますか？マネージドで認証基盤を利用できるのは非常に便利ですよね！
フロントエンドやモバイル開発ではAmplify経由でCognitoを利用しており、認証プロセスで何が行われているのかを意識せずに利用するケースも多いと思います。
今回は認証プロセスへの理解を深めるため、USER_SRP_AUTH フローをコードを交えながら実装していきたいと思います。

 USER_SRP_AUTH 認証フローについて
USER_SRP_AUTH フローは、クライアントとサーバー間でパスワード自体を送信することなく、...]]></description><link>https://zenn.dev/dress_code/articles/b3b0584417a001</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/b3b0584417a001</guid><pubDate>Wed, 09 Apr 2025 02:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FwMJADac--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cognito%25E3%2581%25AEUSER_SRP_AUTH%25E3%2582%2592Amplify%25E3%2581%25AA%25E3%2581%2597%25E3%2581%25A7%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:cottpan%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0OWI1Y2ZmODAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>cottpan</dc:creator></item><item><title><![CDATA[フォームライブラリの新たな選択肢 - TanStack Form]]></title><description><![CDATA[
 はじめに
みなさん、フォームライブラリは何を使っていますか？
React Hook Formがフォームの一時代を築いた後に、server actionに対応しているConformが登場したり、様々なフォームライブラリがあると思いますが、今回は最近v1になったTanStack Formについてご紹介します。
TanStack Formは、各入力フィールドを独立したコンポーネントとして提供します。これにより、フォーム全体を再描画するのではなく、変更が生じた特定のフィールドのみを選択的に再レンダリングすることが可能となり、パフォーマンスの最適化を実現しています。
https://tanst...]]></description><link>https://zenn.dev/gemcook/articles/0dced77271059e</link><guid isPermaLink="true">https://zenn.dev/gemcook/articles/0dced77271059e</guid><pubDate>Wed, 09 Apr 2025 01:18:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FC-xcnhC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E6%2596%25B0%25E3%2581%259F%25E3%2581%25AA%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%2520-%2520TanStack%2520Form%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:KM%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyYzJiNzVlZTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Gemcook%2520Tech%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzYjk0ZGQyMWEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KM</dc:creator></item><item><title><![CDATA[144. Binary Tree Preorder Traversal]]></title><description><![CDATA[バイナリツリーの根（ルート）が与えられたとき、そのノードの前順（preorder）走査の値を返してください。

例 1:
入力: root = [1, null, 2, 3]
出力: [1, 2, 3]
説明:

例 2:
入力: root = [1, 2, 3, 4, 5, null, 8, null, null, 6, 7, 9]
出力: [1, 2, 4, 5, 6, 7, 3, 8, 9]
説明:

例 3:
入力: root = []
出力: []

例 4:
入力: root = [1]
出力: [1]

]]></description><link>https://zenn.dev/idapan/articles/d5bc97caf62424</link><guid isPermaLink="true">https://zenn.dev/idapan/articles/d5bc97caf62424</guid><pubDate>Tue, 08 Apr 2025 22:47:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0eIDoRik--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:144.%2520Binary%2520Tree%2520Preorder%2520Traversal%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keijiro%2520Ida%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EwYTNmOGUyMGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keijiro Ida</dc:creator></item><item><title><![CDATA[Cloudflare Agentのテンプレートを少しだけいじってわかったこと]]></title><description><![CDATA[
 ## 背景

Cloudflare Agentを知ってテンプレートを利用してデプロイした
少しだけいじって表面的になぞっただけでもいくつかわかったことがあったので共有＆備忘録のために公開します


 ## Cloudflare Agent
https://agents.cloudflare.com/

個人開発でガッツリ利用しているCloudflareからエージェントを構築するプラットフォームについて公開されていた。（会社で教えてもらいました。）
記事の存在を知った時点ではピンときていない状態で、CloudflareのAI関連のツールも特にキャッチアップしていない状態だったためこれを...]]></description><link>https://zenn.dev/ryosuke_horie/articles/4d0a2e5af4fddc</link><guid isPermaLink="true">https://zenn.dev/ryosuke_horie/articles/4d0a2e5af4fddc</guid><pubDate>Tue, 08 Apr 2025 15:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7GCrA_Nu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Agent%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E5%25B0%2591%25E3%2581%2597%25E3%2581%25A0%25E3%2581%2591%25E3%2581%2584%25E3%2581%2598%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%258F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ryosuke-horie%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MxMTExODBjOGIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ryosuke-horie</dc:creator></item><item><title><![CDATA[型アサーション【個人学習まとめ】]]></title><description><![CDATA[
 型アサーション
開発者が特定の変数について、TypeScript の型チェッカーよりも詳しい型情報を持っている場合に、コード内で型の情報を明示することを型アサーションと呼びます。
型アサーション

 構文
変数名 as 型名 という形式で記述します。
変数名には上書きしたい変数を指定し、型名には指定した変数に割り当てたい型を指定します。
型アサーションにより、指定された変数に新しい型を明示的に適用することができます。

 例
では例を見てみましょう。
let input: unknown;

//ユーザーの操作やAPI処理など
・・・
//変数inputの型をstring型にアサーシ...]]></description><link>https://zenn.dev/o0rororo0o/articles/f5c2651a3455f5</link><guid isPermaLink="true">https://zenn.dev/o0rororo0o/articles/f5c2651a3455f5</guid><pubDate>Tue, 08 Apr 2025 14:15:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4aBCT_mD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E3%2582%25A2%25E3%2582%25B5%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258D%25E3%2582%258D%25E3%2582%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2ZTZjOWM4YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ろろろ</dc:creator></item><item><title><![CDATA[microCMSでのカスタムフィールドの定義で気をつけていること]]></title><description><![CDATA[
 背景
現在、仕事で microCMS × Nuxt3 の構成で開発を行っています。microCMS側でカスタムフィールドを定義し、ページコンテンツを柔軟に組み立てるようにしています。
そんな中、ふとあることに気づきました。

あれ？似たようなカスタムフィールド、めっちゃ増えてない？

ページコンポーネントごとにそれぞれ別のカスタムフィールドを定義しているけれど、よく見てみると構造やスタイル指定のプロパティがかなり重複していました。


 実例：アコーディオンとタブ
たとえば、アコーディオンのフィールドを定義すると、こんな感じになります。
interface AccordionItem...]]></description><link>https://zenn.dev/tamon_kondo/articles/175d70648e4ec6</link><guid isPermaLink="true">https://zenn.dev/tamon_kondo/articles/175d70648e4ec6</guid><pubDate>Tue, 08 Apr 2025 11:03:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gpntaZVH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:microCMS%25E3%2581%25A7%25E3%2581%25AE%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25AE%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A7%25E6%25B0%2597%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t.k%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k1WWoxNXZlTDl0VE9pd0p0VHVZSXUyNENJMkJuOG1MYkhNcjFvN2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t.k</dc:creator></item></channel></rss>