<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 18 Mar 2025 10:54:48 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[RustでApache Parquetの読み書きをしてみた]]></title><description><![CDATA[
 目的
CSVの代替としてApache Paquetを扱う話がでてきたので、Rustで簡単な読み書きをやってみます。

 Apache Parquet
本家サイトApache Parquetによれば、
「Apache Parquetは、効率的なデータの保存と取得のために設計された、オープンソースの列指向データファイル形式です。複雑なデータを一括処理するための高性能な圧縮およびエンコードスキームを提供し、多くのプログラミング言語や分析ツールでサポートされています。」
とのことです。
自分の理解だと検索のパフォーマンスが良くて、サイズも小さくて、汎用性もあって使い勝手の良いベターCSVとい...]]></description><link>https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/dcea0083eda57e</guid><pubDate>Tue, 18 Mar 2025 10:40:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m1YbQ-fk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7Apache%2520Parquet%25E3%2581%25AE%25E8%25AA%25AD%25E3%2581%25BF%25E6%259B%25B8%25E3%2581%258D%25E3%2582%2592%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[[Rust] Iterator トレイトで自分がよく使うメソッドまとめ]]></title><description><![CDATA[
 一覧



メソッド名
役割




all
全ての要素が条件を満たすかの確認


any
条件を満たす要素が１つでもあるかの確認


cloned
イテレータの各要素をクローンして、新しいイテレータを作成する。


collect
イテレータをコレクションに変換する


count
要素数（ただし、イテレータを消費する）


filter
条件を満たす要素のみで、新たにイテレータを作成する


filter_map
filterとmapの機能を組み合わせたもの


find
条件を満たす最初の要素を返す


find_map
findとmapの機能を組み合わせたもの


map
各...]]></description><link>https://zenn.dev/dio0550/articles/a5a2367923b10c</link><guid isPermaLink="true">https://zenn.dev/dio0550/articles/a5a2367923b10c</guid><pubDate>Mon, 17 Mar 2025 12:28:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9n4jbsqX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520Iterator%2520%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A7%25E8%2587%25AA%25E5%2588%2586%25E3%2581%258C%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2581%2586%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dio%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzU3UEdJY0o5Tmx1MjBwWHZFY183MmZ1Z3djbFBQZVRsRUtFdDMtU0RSMmpSNUl3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dio</dc:creator></item><item><title><![CDATA[RustからMSEdgeDriverを操作するサンプル]]></title><description><![CDATA[こんにちは　あいおんです。
RustからMSEdgeDriverを操作するサンプルを作ったので公開します。

 背景
JTCをはじめ、社内だとChromeではなく、Edgeを使っているケースもあるんじゃないかなと思います。
そんな会社向けの記事です。（ただし、そんな会社がRustを使えるようになっているかというのは…）
また、Pythonとかでやればいいじゃん、というのはごもっともです。（が、いいんです。Rustでやりたかったんです。）

 実装
作ったものは以下です。
https://github.com/aion0721/Rust-Msedgedriver-sample/tree/m...]]></description><link>https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</link><guid isPermaLink="true">https://zenn.dev/rudolf_aion/articles/d08d80ab60a090</guid><pubDate>Mon, 17 Mar 2025 10:11:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--So1JN_bu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%258B%25E3%2582%2589MSEdgeDriver%25E3%2582%2592%25E6%2593%258D%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aion%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmODNlYzkzYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aion</dc:creator></item><item><title><![CDATA[jemallocでRustのパフォーマンスを最適化する]]></title><description><![CDATA[

 jemalloc とは？
jemalloc は、もともと Jason Evans によって FreeBSD 向けに開発された現代的なメモリアロケータです。従来の malloc と比較して、jemalloc はメモリフラグメンテーションの削減とマルチスレッドアプリケーションのパフォーマンス向上に重点を置いて設計されました。細粒度のメモリ管理とスレッドキャッシュ機構により、迅速かつ効率的なメモリ割り当てを実現しています。
jemalloc の主な特徴は次のとおりです：


高効率な並列処理：各スレッドに独立したメモリキャッシュを提供し、スレッド間の競合を削減。

メモリフラグメンテーシ...]]></description><link>https://zenn.dev/leap_adam/articles/c8561fedd1e171</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/c8561fedd1e171</guid><pubDate>Sun, 16 Mar 2025 21:25:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PsuItVfE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jemalloc%25E3%2581%25A7Rust%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[[marmite]最も簡単なブログの作り方]]></title><description><![CDATA[
 静的サイト作るの難しすぎ問題
Static Site Generator(SSG)でブログを作成しようと思うと、やることが多すぎます。
SSGのリストを見てみると、どれも初心者に対してあまり優しくないように感じます。初見殺しの罠が多すぎて投げ出してしまう人もいるのではないでしょうか？
ちゃんと調べればいいじゃないか、知識が足りていないだけなんじゃないか、という正論もありますが、ブログを作るだけなのにCI/CDパイプラインを構築して自動的に変更内容がデプロイされるようにする、といったことをやりたいでしょうか？やりたくはないですが現実問題やることになります。
ブログを更新してあとはボタン...]]></description><link>https://zenn.dev/omini/articles/26ca9305d7deeb</link><guid isPermaLink="true">https://zenn.dev/omini/articles/26ca9305d7deeb</guid><pubDate>Sun, 16 Mar 2025 21:15:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rym624wl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Bmarmite%255D%25E6%259C%2580%25E3%2582%2582%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[【Rust】Yew公式サイトの日本語対応が進むらしい＋チュートリアルを試す]]></title><description><![CDATA[
 YewがNextバージョンに変わろうとしている
!
本記事で用いるYewのバージョンは0.21です。
それ以上のバージョンは執筆現在で未リリースです。

https://yew.rs/ja/
YewはRustに於ける「Webアプリケーションフレームワーク」として知られるものです。Webの中でも画面を作ることに特化(？)したもので、かつJavaScriptではなくWebAssemblyを使います。
そんなYewですが、ドキュメントだけでなく公式サイトが存在します。しかしこのサイト、言語として日本語を選ぶことができるにもかかわらず、実際には殆ど対応していませんでした。

日本語トップ画面...]]></description><link>https://zenn.dev/amenaruya/articles/9f632a57a367c6</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/9f632a57a367c6</guid><pubDate>Sun, 16 Mar 2025 20:15:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SnNcR5RG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Yew%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25AE%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%258C%25E9%2580%25B2%25E3%2582%2580%25E3%2582%2589%25E3%2581%2597%25E3%2581%2584%25EF%25BC%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[自作Rust製CLIコマンドランチャー「qcl」の紹介]]></title><description><![CDATA[
 🚀 覚えない・間違えない CLI！コマンドスニペットランチャー「qcl」を作りました

 はじめに
みなさん、ターミナルでよく使うコマンドを 覚えきれない とか
「これって引数なんだっけ？」って毎回ググっていませんか？
私は docker exec や ssh、kubectl など、  ちょっとしたコマンドを毎回

履歴を探す
コピペする
引数ミスってやり直す
を繰り返していました。

docker exec -itまで打って、コンテナIDなんだっけ？ってdocker psし直したり・・・
それを解決するために作ったのが、
「qcl (Quick Command Launcher)」...]]></description><link>https://zenn.dev/nakkiy/articles/12b5e2a6691430</link><guid isPermaLink="true">https://zenn.dev/nakkiy/articles/12b5e2a6691430</guid><pubDate>Sun, 16 Mar 2025 13:42:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--O7UaPX8J--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259CRust%25E8%25A3%25BDCLI%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25BC%25E3%2580%258Cqcl%25E3%2580%258D%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakkiy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDRQblR4S1NRMWFmaGVudU0yT1MyNUdYNmtrQnUxY1RFMEZyNW1kZkNVR1haQTRBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakkiy</dc:creator></item><item><title><![CDATA[効果的なRustソースコード読解ガイド]]></title><description><![CDATA[

 1. 基本モジュールから始める
これらのモジュールはほぼすべてのRustプログラムで使用されるため、理解することがRust標準ライブラリを学ぶ基礎となります。


std::option::Option と std::result::Result


Option は値が None である可能性がある場合に使用され、Result はエラーハンドリングに使用されます。これらの列挙型の実装を理解することは非常に重要であり、Rustにおいて null 参照を回避し、エラーを捕捉するための核心的なメカニズムです。

学習方法：これらのモジュールのドキュメントを確認し、ソースコードの具体的な...]]></description><link>https://zenn.dev/leap_adam/articles/496c6a4a12bb9b</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/496c6a4a12bb9b</guid><pubDate>Sun, 16 Mar 2025 13:31:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VfY8bJhD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%258A%25B9%25E6%259E%259C%25E7%259A%2584%25E3%2581%25AARust%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%25AD%25E8%25A7%25A3%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[TypeScriptからRustのコードを呼び出す]]></title><description><![CDATA[以前の記事でTypeScriptからC++のコードを呼び出す方法を紹介しました．しばらくしてRustで書いたコードをViteで管理しているWebアプリから呼び出す機会があったため，今回はTypeScriptからRustのコードを呼び出す方法をまとめました．

 サンプル
今回の記事で実装したコードは以下のリポジトリにまとめています．
https://github.com/rerrahkr/rust-wasm-example

 呼び出すコード
今回は以下のクレートをライブラリーrust_wasmとして準備しました．

rust_wasm/src/lib.rc
pub struct Sup...]]></description><link>https://zenn.dev/rerrah/articles/162b7f469a5dba</link><guid isPermaLink="true">https://zenn.dev/rerrah/articles/162b7f469a5dba</guid><pubDate>Sun, 16 Mar 2025 12:15:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--txIjlA_6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%258B%25E3%2582%2589Rust%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rerrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2cweTZjdnlzVVVibTYyamhnZ1N5M1pzMGl6Q1ZvU25KRTVTSF9acFFQOVJyRmx1dz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rerrah</dc:creator></item><item><title><![CDATA[axumでCORSを解決する方法]]></title><description><![CDATA[
 はじめに
APIサーバをaxumで実装していた際にCORS問題で詰まったので、備忘録として残します。

 CORS設定
axumが入っている前提となります。
以下のようにCORS設定をするだけで終わりです。
※Cargo.tomlで他に必要なcrateは省略しています。

Cargo.toml
[dependencies]
axum = "0.8.1"
tower-http={version="0.6.2", features=["cors"]}


main.rs
use axum::{http::HeaderValue, routing::get, Router};
use to...]]></description><link>https://zenn.dev/devtatsu/articles/cors-axum-rust</link><guid isPermaLink="true">https://zenn.dev/devtatsu/articles/cors-axum-rust</guid><pubDate>Sun, 16 Mar 2025 11:57:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--y60ebC-M--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axum%25E3%2581%25A7CORS%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2583%2584%25E3%2583%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBiYTg1MmMzNWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タツヤ</dc:creator></item><item><title><![CDATA[Unreal Engine で Rust を (上手に) 使いたい]]></title><description><![CDATA[
 はじめに
Unreal Engine で Rust を使いたい。
使うだけなら DLL をビルドして UE のプロジェクト内にコピーすればいいだけですが、 UE プロジェクト外での管理では Rust コードの更新を UE 側に反映するのが面倒だったり、そもそも当該 UE プロジェクト専用の Rust コードである場合はまとめて管理したくもなります。
という事で、その辺を解決する方法を調べてみました。
実証コードはこちらです (UE 5.5.4) 。 UE プロジェクトになっていますが C++ と Rust のみで Contents は本題ではないので削除しています。
https://...]]></description><link>https://zenn.dev/tan_y/articles/56a8cb4151590e</link><guid isPermaLink="true">https://zenn.dev/tan_y/articles/56a8cb4151590e</guid><pubDate>Sun, 16 Mar 2025 04:36:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7EcSvBuU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Unreal%2520Engine%2520%25E3%2581%25A7%2520Rust%2520%25E3%2582%2592%2520%2528%25E4%25B8%258A%25E6%2589%258B%25E3%2581%25AB%2529%2520%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TAN-Y%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2loekR1bXg3a1ktLWY5XzNoS3B3YzROTWhVcWtUMERPWmRTOWlKPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TAN-Y</dc:creator></item><item><title><![CDATA[EtherIP(RFC3378)をRustで実装した話ってよ]]></title><description><![CDATA[こんにちは、自称インチキ高校生のtuna2134です。
今回Rustを使ってEtherIPを実装してみました。なので、RFC3378の解説をしつつ、実装を説明しようと思います。

 そもそもEtherIPってなんですの？
RFC3378に定義されているプロトコルで、Ethernetフレーム(L2)をカプセル化して、IPプロトコル97番を使って転送することです。要はL2TP VPNと同じ仕組みですね。主にNEX IXなどといった業務用ルーターに入っている機能なのですが、Linuxでは標準でないので、使いたいときは自作するなりする必要があります。(Linuxに搭載されてなかったおかげで勉強す...]]></description><link>https://zenn.dev/dms_sub/articles/cb6ec3ca067c8a</link><guid isPermaLink="true">https://zenn.dev/dms_sub/articles/cb6ec3ca067c8a</guid><pubDate>Sun, 16 Mar 2025 00:34:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Px_fmZYc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:EtherIP%2528RFC3378%2529%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tuna2134%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlZDZhN2JjNDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tuna2134</dc:creator></item><item><title><![CDATA[Rust言語の基礎と最新トレンド]]></title><description><![CDATA[Rust言語は、高機能な型付け言語であり、安全性と高速性を兼ね備えているのが特徴です。特に、記憶障害を防ぐための新しいシステムを提供し、C++の代替として注目されています。今日では、システム開発、ゲーム、基盤ソフトウェアなど、広い分野で活用されています。
Rust言語の基礎
Rustの特徴
Rustの最大の特徴は、メモリ管理の安全性にあります。ガベージコレクションを使用せず、コンパイル時にメモリーのオーナーシップを確保することで、記憶障害やセキュリティの問題を無くします。このような特徴により、例えば安全で信頼性の高いシステムを開発することが可能です。
Rustの主な特徴は以下の通りです。...]]></description><link>https://zenn.dev/loyski/articles/392f2ff3891c3f</link><guid isPermaLink="true">https://zenn.dev/loyski/articles/392f2ff3891c3f</guid><pubDate>Sat, 15 Mar 2025 13:33:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G4DeLKdw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2581%25A8%25E6%259C%2580%25E6%2596%25B0%25E3%2583%2588%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:loyski%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGlfOFFhOFVpdW5paVlpYTc0ZTRHYmY2S1p3UXh6ZnVXOTc4OGhxbmI3NTlBci1RPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>loyski</dc:creator></item><item><title><![CDATA[RustのBinaryHeapを少しだけ使いやすくした]]></title><description><![CDATA[
 背景
Rustの標準ライブラリにあるちょっとマイナーなコンテナのBinaryHeapは優先度付きキューを実現するもので、C++のpriority_queueやPythonのheapqに相当するものです。
Rustに限らずそれらの言語でも共通することですが、入れるアイテム自体が順序付可能であること(RustでいうOrd)が要求されていて任意の構造体をスコアと一緒に入れることができなくて個人的にはちょっと使いにくく感じています。
そこでスコア関数を含めて少しだけ使いやすくした構造体を作ってみました。
成果物

github: https://github.com/lucidfrontie...]]></description><link>https://zenn.dev/lucidfrontier45/articles/b591e3ee7e17ed</link><guid isPermaLink="true">https://zenn.dev/lucidfrontier45/articles/b591e3ee7e17ed</guid><pubDate>Sat, 15 Mar 2025 03:10:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9H-AgR75--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEBinaryHeap%25E3%2582%2592%25E5%25B0%2591%25E3%2581%2597%25E3%2581%25A0%25E3%2581%2591%25E4%25BD%25BF%25E3%2581%2584%25E3%2582%2584%25E3%2581%2599%25E3%2581%258F%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:lucidfrontier45%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxY2RkYzI0MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>lucidfrontier45</dc:creator></item><item><title><![CDATA[Rustのスマートポインタ解説：所有権、メモリ、安全性]]></title><description><![CDATA[

 Rust におけるスマートポインタとは
スマートポインタ（smart pointers）は、データの所有権と追加機能を持つポインタであり、ポインタの進化版と言えます。
ポインタ（pointer）は、メモリアドレスを保持する変数の一般的な概念です。このアドレスは、他のデータを参照、または「指す」（points at）ものです。Rust では、参照は&amp;記号で示され、参照先の値を借用します。通常の参照はデータを借用するだけで、特別な機能はありません。また、追加のオーバーヘッドもないため、Rust では非常に多用されます。
スマートポインタは、Rust における特別なデータ構造です...]]></description><link>https://zenn.dev/leap_adam/articles/4ea93da1be47ec</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/4ea93da1be47ec</guid><pubDate>Fri, 14 Mar 2025 19:55:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YkjqnGks--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%259E%25E3%2583%25BC%25E3%2583%2588%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E8%25A7%25A3%25E8%25AA%25AC%25EF%25BC%259A%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2580%2581%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E3%2580%2581%25E5%25AE%2589%25E5%2585%25A8%25E6%2580%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Rustをもっと手軽に！ForgeScript + RVM の構想]]></title><description><![CDATA[
 はじめに
Rustはその高い安全性とパフォーマンスにより、多くの開発者に支持されるプログラミング言語ですが、所有権やライフタイムの概念は初心者にとって大きな障壁となります。また、Cargoを活用した依存関係の管理も強力である一方で、手動での設定が煩雑になりがちです。
このような課題を解決し、Rustのエコシステムをより手軽に活用できるようにするため、ForgeScript（FS）とRust Virtual Machine（RVM） を構想しました。

 ForgeScript + RVM とは？
ForgeScript（FS）はRustに準拠しつつ、所有権やライフタイム、mutの扱い...]]></description><link>https://zenn.dev/kazuma0606/articles/63490110db9e67</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/63490110db9e67</guid><pubDate>Fri, 14 Mar 2025 12:07:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZwSIxH4o--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E3%2582%2582%25E3%2581%25A3%25E3%2581%25A8%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25EF%25BC%2581ForgeScript%2520%252B%2520RVM%2520%25E3%2581%25AE%25E6%25A7%258B%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item><item><title><![CDATA[Rustのバイナリってなんか無駄にでかいイメージがあったので調べてみた。]]></title><description><![CDATA[
 動機
タイトルの通りです。以前なんとなくC言語で作ったバイナリとサイズ比べたときに、Rustバイナリサイズデカくね？って思って以来、なんとなくRustのバイナリ＝大きいみたいなイメージを持っていたのでちゃんと調べてみる。

 検証方法
コードの内容によってだいぶ変わってくることは容易に想像できるが、今回はHelloWorldで比較。
それぞれのコードはこんな感じ。
fn main() {
    println!("Hello, world!");
}
#include &lt;stdio.h&gt;

int main(void)
{
        printf("Hello, ...]]></description><link>https://zenn.dev/kumasan903/articles/b9657aedc046da</link><guid isPermaLink="true">https://zenn.dev/kumasan903/articles/b9657aedc046da</guid><pubDate>Fri, 14 Mar 2025 10:18:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r9HKwqXm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25AA%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%2593%25E3%2581%258B%25E7%2584%25A1%25E9%25A7%2584%25E3%2581%25AB%25E3%2581%25A7%25E3%2581%258B%25E3%2581%2584%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%258C%25E3%2581%2582%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258F%25E3%2581%25BE%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4MTUxNmMwMDEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>くまさん</dc:creator></item><item><title><![CDATA[Rustのエラー処理を極める：ResultとOptionを超えて]]></title><description><![CDATA[
エラー処理は単に Result と Option を使うだけではありません。Rust のエラー処理は初心者にとって優しくなく、何度も苦しめられた末に、エラー処理に関する知識を整理することにしました。内容は主に二つの部分に分かれています。一つは Rust の公式が提供する Result に関連するメソッドについて、もう一つはエラーの定義と処理方法についてです。これらの知識を習得すれば、Rust のエラー処理を恐れることはなくなるでしょう。

 エラー処理に関するメソッド
エラーをスムーズに処理するには、公式が提供するメソッドを適切に活用することが重要です。うまく活用すれば効率が大幅に向上...]]></description><link>https://zenn.dev/leap_adam/articles/7190bde4efceeb</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/7190bde4efceeb</guid><pubDate>Thu, 13 Mar 2025 21:15:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--craIafIG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E6%25A5%25B5%25E3%2582%2581%25E3%2582%258B%25EF%25BC%259AResult%25E3%2581%25A8Option%25E3%2582%2592%25E8%25B6%2585%25E3%2581%2588%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[[Bevy] 平面の格子状グリッドを表示する]]></title><description><![CDATA[Bevyの真っ黒なWindowに平面のグリッドを表示させるとそれっぽくなります。

fn update(mut gizmos: Gizmos){
    gizmos.grid(
        Isometry3d::from_rotation(Quat::from_axis_angle(Vec3::X, PI * 0.5)),
        UVec2::new(30, 30),
        Vec2::splat(2.),
        Color::linear_rgb(0.7, 0., 0.4)
        )
        .outer_edges();
}
参...]]></description><link>https://zenn.dev/omini/articles/8889d35af30e02</link><guid isPermaLink="true">https://zenn.dev/omini/articles/8889d35af30e02</guid><pubDate>Thu, 13 Mar 2025 21:15:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OMfVh0MZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520%25E5%25B9%25B3%25E9%259D%25A2%25E3%2581%25AE%25E6%25A0%25BC%25E5%25AD%2590%25E7%258A%25B6%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2589%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[Rustで作る自作データベース：第1回「基本的なSQL対応RDBMSの設計と実装」]]></title><description><![CDATA[この記事では、前回
https://zenn.dev/kazuma0606/articles/9a086386fe8af2
に続いて早速基本的なCRUD操作が出来るインメモリのデータベースを設計・実装します。
🔸モノリスではコード量が多くなる可能性
🔸将来的な機能追加を考慮
🔸依存関係を整理
以上の点からクリーンアーキテクチャを採用しています。ただし、従来のクリーンアーキテクチャのようにユースケースを一つ一つ実装していくのはデータベースを実装する上では難しいので、ディレクトリ構成やDIパターンに基づいて実装しています。
※コード量が多いので、お急ぎの方はまずは保存して、時間のあるときにじ...]]></description><link>https://zenn.dev/kazuma0606/articles/0f73247666781d</link><guid isPermaLink="true">https://zenn.dev/kazuma0606/articles/0f73247666781d</guid><pubDate>Thu, 13 Mar 2025 11:56:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--83Y-mWM9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E8%2587%25AA%25E4%25BD%259C%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25EF%25BC%259A%25E7%25AC%25AC1%25E5%259B%259E%25E3%2580%258C%25E5%259F%25BA%25E6%259C%25AC%25E7%259A%2584%25E3%2581%25AASQL%25E5%25AF%25BE%25E5%25BF%259CRDBMS%25E3%2581%25AE%25E8%25A8%25AD%25E8%25A8%2588%25E3%2581%25A8%25E5%25AE%259F%25E8%25A3%2585%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25BA%25E3%2583%259E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI1ZjkwNWYyMmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カズマ</dc:creator></item></channel></rss>