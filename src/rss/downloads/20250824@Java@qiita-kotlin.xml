<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-08-24T18:24:52+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071316</id>
    <published>2025-08-24T18:24:52+09:00</published>
    <updated>2025-08-24T18:25:14+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/7ce8b2f8d30d474d9d1c"/>
    <url>https://qiita.com/nozomi2025/items/7ce8b2f8d30d474d9d1c</url>
    <title>【デザインパターン】プロトタイプパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
プロトタイプ（Prototype） パターンは、既存のオブジェクトをコピーして新しいインスタンスを生成する デザインパターンです。

解決する問題

複雑な初期化処理を毎回走らせたくない

new を使ってゼロからオブジェクトを構築するのではなく、既...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071174</id>
    <published>2025-08-24T12:43:45+09:00</published>
    <updated>2025-08-24T15:06:26+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/sakusaku3939/items/cb79864195c324b67672"/>
    <url>https://qiita.com/sakusaku3939/items/cb79864195c324b67672</url>
    <title>Androidで「1秒後に実行する」時に出てくるHandlerは何をしているのか？【Android内部解説】</title>
    <content type="text">Androidアプリ開発では、例えば 1秒（1000ミリ秒）後に処理を実行したい場合、次のような方法が紹介されます。

kotlin
Handler(Looper.getMainLooper()).postDelayed({
    Log.d("hogehuga", "1...</content>
    <author>
      <name>sakusaku3939</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071059</id>
    <published>2025-08-24T06:23:10+09:00</published>
    <updated>2025-08-24T06:23:10+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/jp-96/items/bfff2c8c046f53f84bbe"/>
    <url>https://qiita.com/jp-96/items/bfff2c8c046f53f84bbe</url>
    <title>( ..)φメモメモ - Androidアプリでの状態管理(ViewModel)</title>
    <content type="text">MutableStateとMutableStateFlowを使う

 Copilotプロンプト
mutablestateとstateflowをメインで使うようにする。
stateflowはmutablestateflowと組み合わせて使う。

MutableSt...</content>
    <author>
      <name>jp-96</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2071058</id>
    <published>2025-08-24T06:21:57+09:00</published>
    <updated>2025-08-24T06:21:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/jp-96/items/a869510a7f9f8ac7422b"/>
    <url>https://qiita.com/jp-96/items/a869510a7f9f8ac7422b</url>
    <title>( ..)φメモメモ - Android アプリ内での通信手段</title>
    <content type="text">通信手段 - Intent と EventBus と RemoteShareFlow

ここでは、 Intent、 EventBus、RemoteShareFlow のそれぞれの特徴、利点、制約、具体的な使用例を挙げたうえで、詳細な使い分けを説明します。このような設計選択...</content>
    <author>
      <name>jp-96</name>
    </author>
  </entry>
</feed>
