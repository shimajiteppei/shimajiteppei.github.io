<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 30 Sep 2024 06:00:19 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[[TailwindCSS]グリッドレイアウトで行頭を美しく整える]]></title><description><![CDATA[
 はじめに
今回は、Tailwind CSSを使って、要素が不揃いだったレイアウトを整然とした美しいデザインに改善する方法を紹介します。記事の流れとして、まず初めに改善前のコードを見ていただき、その後、どのようにして現在のコードに改善していったのかを解説していきます。

 改善前のコード
まず、こちらが改善前のコードです。このコードでは、項目名とその内容がバラバラに表示されており、統一感がありませんでした。

TypeScript
import React from "react";

const LegalNotice = () =&gt; {
  return (
    &lt;...]]></description><link>https://zenn.dev/haruki1009/articles/bd7bac7a117234</link><guid isPermaLink="true">https://zenn.dev/haruki1009/articles/bd7bac7a117234</guid><pubDate>Mon, 30 Sep 2024 05:38:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZSc3M2UQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTailwindCSS%255D%25E3%2582%25B0%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2589%25E3%2583%25AC%25E3%2582%25A4%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2581%25A7%25E8%25A1%258C%25E9%25A0%25AD%25E3%2582%2592%25E7%25BE%258E%25E3%2581%2597%25E3%2581%258F%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Haruki%2520Inoue%2520%257C%2520Not...%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5MGI2YjhmZWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Haruki Inoue | Notionキャンパスリーダー</dc:creator></item><item><title><![CDATA[社内でやっている Good & New（グッドアンドニュー）についてと Good & New 用 Web アプリを作った話]]></title><description><![CDATA[
 はじめに
みなさんは「Good &amp; New（グッドアンドニュー）」をご存知でしょうか？
Good &amp; New は、チーム内のメンバーが最近あった「よかったこと（Good）」や「新しい発見（New）」を共有する取り組みです。
弊社では、週 1 の全社定例の初めで Good &amp; New を行っています。ちなみに弊社は全社員合わせて 6 名ほどの会社で、全員がエンジニアです。
今回は、Good &amp; New の啓蒙と Good &amp; New を円滑に進めるための Web アプリを紹介したいと思います。
https://good-and-new.unrea...]]></description><link>https://zenn.dev/taichifukumoto/articles/good-and-new</link><guid isPermaLink="true">https://zenn.dev/taichifukumoto/articles/good-and-new</guid><pubDate>Mon, 30 Sep 2024 05:17:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EfIXpUnK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25A4%25BE%25E5%2586%2585%25E3%2581%25A7%25E3%2582%2584%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%2520Good%2520%2526%2520New%25EF%25BC%2588%25E3%2582%25B0%25E3%2583%2583%25E3%2583%2589%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2589%25E3%2583%258B%25E3%2583%25A5%25E3%2583%25BC%25EF%25BC%2589%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25A8%2520Good%2520%2526%2520New%2520%25E7%2594%25A8%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:taichi%2520fukumoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RiZTU1OWFmNjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>taichi fukumoto</dc:creator></item><item><title><![CDATA[【ESLint & Rubocop】 開発チームの問題を解決したカスタムリントルールのススメ]]></title><description><![CDATA[
 はじめに

 この記事について
株式会社COUNTERWORKS でソフトウェアエンジニアとして働いているchibaです。
この記事では開発チームが抱えていた問題を解決したリントツールへのカスタムルール導入手順についてまとめました！

 対象読者

リントツールにカスタムルールを導入したい人
日々の開発者体験を改善させたい人
仕組みで問題を解決したい人


 この記事に書かれていること

開発チームが抱えていた問題とその解決までの流れ
カスタムリントルルールの導入手順
ESLint と Rubocop のカスタムルールの作成手順


 開発チームが抱えていた問題について
私が所属して...]]></description><link>https://zenn.dev/counterworks/articles/1d85f1022a9195</link><guid isPermaLink="true">https://zenn.dev/counterworks/articles/1d85f1022a9195</guid><pubDate>Mon, 30 Sep 2024 05:05:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--415VXvsl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590ESLint%2520%2526%2520Rubocop%25E3%2580%2591%2520%25E9%2596%258B%25E7%2599%25BA%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2597%25E3%2581%259F%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25A0%25E3%2583%25AA%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Chiba_d%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3YTAwMGU1MjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:COUNTERWORKS%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4Y2FmZmQyMjEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Chiba_d</dc:creator></item><item><title><![CDATA[VS Codeの拡張機能の開発で困った話（デバッグ）]]></title><description><![CDATA[
 VS Codeの拡張機能の開発で困った話（デバッグ）

 1. 本記事のターゲット層
(1) VS Codeの拡張機能開発に挑まんとする者
(2) 個人開発がしたいヘンタイ
(3) TypeScriptやNode.jsを学びたい人

 2. イントロダクション
今回、この記事を書くきっかけとなったのは、VS Codeの拡張機能開発をしている中で、公式のGET STARTEDを実行するとエラーがたくさん出て戸惑ったからです。
他にも戸惑う人がいると思い、助けになればと考えてこの記事を書いています。
VS Codeの拡張機能の開発は仕事ではなく、個人開発の領域でやっていました。
いま、ま...]]></description><link>https://zenn.dev/ochtum/articles/33bd7b9c83f289</link><guid isPermaLink="true">https://zenn.dev/ochtum/articles/33bd7b9c83f289</guid><pubDate>Mon, 30 Sep 2024 03:36:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l5yYr62l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VS%2520Code%25E3%2581%25AE%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E5%259B%25B0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%25EF%25BC%2588%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AA%25E3%2582%25AF%25E3%2583%2588%25E3%2582%25A5%25E3%2583%25A0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNlN2Q3YWZkMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>オクトゥム</dc:creator></item><item><title><![CDATA[ド・モルガンの法則を TypeScript で証明してみた]]></title><description><![CDATA[
 はじめに
本記事では、命題論理の定理であるド・モルガンの法則を、TypeScript を用いて証明することを目指します。
ド・モルガンの法則とは、任意の命題 P, Q について、

  \neg (P \lor Q) \leftrightarrow \neg P \land \neg Q \\
  \neg (P \land Q) \leftrightarrow \neg P \lor \neg Q

が成り立つことを言います。
さて証明です。命題の真偽のみに興味があるので、P, Q を p: boolean, q: boolean で表現し、全パターン試してみればいいわけです。\n...]]></description><link>https://zenn.dev/mutex_inc/articles/de-morgan-ts</link><guid isPermaLink="true">https://zenn.dev/mutex_inc/articles/de-morgan-ts</guid><pubDate>Mon, 30 Sep 2024 02:50:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZP2czxXN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2589%25E3%2583%25BB%25E3%2583%25A2%25E3%2583%25AB%25E3%2582%25AC%25E3%2583%25B3%25E3%2581%25AE%25E6%25B3%2595%25E5%2589%2587%25E3%2582%2592%2520TypeScript%2520%25E3%2581%25A7%25E8%25A8%25BC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:tony%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2NmRjMzU1MTIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:mutex%2520Official%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q4YjZmMTNmZDguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tony</dc:creator></item><item><title><![CDATA[学びをアウトプット：useEffectへの理解を深めよう！]]></title><description><![CDATA[
 はじめに
「副作用ってなに」「useEffectはどのタイミングで実行されるのか」
正直、これまであまり理解せずに実装していました。
そんな私がuseEffectについて学んだことをまとめてみました💫
同じように悩んでいる方々の手助けになれれば嬉しいです!!

 コンポーネントを純粋に保つ
useEffectを語る前にコンポーネントの純粋性について簡単にまとめます。
まず、純粋なコンポーネントとは公式には以下のように記載されてます。

冪等 (idempotent) であること
レンダリング時に副作用がない
ローカルな値以外を変更しない

原則、この純粋性に従ってコンポーネントを実装...]]></description><link>https://zenn.dev/kiman/articles/1363d33b114035</link><guid isPermaLink="true">https://zenn.dev/kiman/articles/1363d33b114035</guid><pubDate>Mon, 30 Sep 2024 02:00:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pVLYBqrp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AD%25A6%25E3%2581%25B3%25E3%2582%2592%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588%25EF%25BC%259AuseEffect%25E3%2581%25B8%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%25E3%2582%2592%25E6%25B7%25B1%25E3%2582%2581%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2593%25E3%2582%2586%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MmYyZmE3MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きんゆまん</dc:creator></item><item><title><![CDATA[TypeScriptで関数型プログラミングを行ってみた [fp-ts]]]></title><description><![CDATA[こんにちは。FEチームのMapleです。私たちのチームは、現在のシステムアーキテクチャを見直し、Reactを用いた新しいアーキテクチャへの移行を検討しています。今回は先日TypeScriptで行う関数型プログラミングについて解説していきます。

 はじめに
関数型プログラミングは、不変性（Immutability）と純粋関数（Pure Functions）を重視し、副作用を最小限に抑えることで、予測可能でテストしやすいコードを書いていきます。

バグの減少：副作用が少ないため、予期せぬ動作を防げる。
コードの再利用性：純粋関数は独立性が高く、再利用が容易。
テスト容易性：関数が同じ入力で...]]></description><link>https://zenn.dev/team_soda/articles/f4e20631af1df0</link><guid isPermaLink="true">https://zenn.dev/team_soda/articles/f4e20631af1df0</guid><pubDate>Mon, 30 Sep 2024 00:52:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pbrxY_b4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E8%25A1%258C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%255Bfp-ts%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Maple%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NmYTM5ODQ3MWIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SODA%2520Engineering%2520Blog%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyM2Y1N2EwYTMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maple</dc:creator></item><item><title><![CDATA[現場で使えるTanStack Table]]></title><description><![CDATA[Headless UIライブラリのTanStack Tableで多機能なテーブルを作る方法を解説します。]]></description><link>https://zenn.dev/cocomina/books/tanstack-table</link><guid isPermaLink="true">https://zenn.dev/cocomina/books/tanstack-table</guid><pubDate>Sun, 29 Sep 2024 15:23:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zdvQ0fAR--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9jMjkyNWVhNDMwLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>Twosun</dc:creator></item><item><title><![CDATA[【Misskey】Webサイト向けの埋め込みウィジェットを作った話【Vue.js】]]></title><description><![CDATA[分散型SNSであり、（貴重な？）国産のOSSとしても有名なMisskeyの最新バージョン v2024.9.0 では、Misskeyの投稿やタイムラインなどを埋め込んで表示できるようになりました。埋め込み機能は考慮すべきことが多く、実装に時間がかかります。実際、埋め込みウィジェットの初版を作ってから約1年半かかって実装にこぎつけました。

完成品（画像）
!
埋め込みの実装方法などの本質情報が見たい方はこちらへどうぞ↓
https://misskey-hub.net/ja/docs/for-users/features/embed/

ここでは、Misskeyの埋め込み機能の実装が難しい点...]]></description><link>https://zenn.dev/kakkokari_gtyih/articles/283a19fce5b442</link><guid isPermaLink="true">https://zenn.dev/kakkokari_gtyih/articles/283a19fce5b442</guid><pubDate>Sun, 29 Sep 2024 13:34:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--h3FSSqHE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Misskey%25E3%2580%2591Web%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AE%25E5%259F%258B%25E3%2582%2581%25E8%25BE%25BC%25E3%2581%25BF%25E3%2582%25A6%25E3%2582%25A3%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%25E3%2580%2590Vue.js%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25EF%25BC%2588%25E4%25BB%25AE%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4YWViNWU2NjUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>（仮）</dc:creator></item><item><title><![CDATA[Firebase Functions の callable が遅いので別の方法で解決してみた]]></title><description><![CDATA[Firebase Functions の callable って課金しないと超遅いですよね。
起動に3~5秒くらいかかるからずっと悩んでました。
ただ、我慢の限界だったので違う方法で解決する方向にしました。

 Callable が遅い原因
callable が遅い原因としては
その API が使われてないとすぐにスリープ状態になるからです。

無料枠なんだからずっと起動する訳ないでしょw
必要な時だけ動くから、最初の起動だけは遅いよ。
早くしたかったら課金してねw

みたいな感じで Google さんに言われてると思って大丈夫です。（← 流石にない）

 Trigger 関数で解決する...]]></description><link>https://zenn.dev/hasumi/articles/4bdd5cc1881ee6</link><guid isPermaLink="true">https://zenn.dev/hasumi/articles/4bdd5cc1881ee6</guid><pubDate>Sun, 29 Sep 2024 11:11:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UkDrVtBA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Firebase%2520Functions%2520%25E3%2581%25AE%2520callable%2520%25E3%2581%258C%25E9%2581%2585%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E5%2588%25A5%25E3%2581%25AE%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A7%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2593%25AE%25E7%25BE%258E%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2YTljNGRmYmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>蓮美</dc:creator></item><item><title><![CDATA[Reactとts-patternの組み合わせを考える🤔]]></title><description><![CDATA[
 紹介すること
Reactにおけるts-patternの使用がもたらすメリットとデメリットを、可読性やパフォーマンスの観点から考察します。
また、ユースケースやデメリットにどのように対処すべきかについても考察します。

 Reactとパターンマッチ
Reactは、関数型プログラミングのエッセンスをふんだんに取り入れているUIライブラリだと思います。
宣言的なUIを持ち、純粋性を重視することから、Reactは関数型プログラミングに近い概念を採用しています。
パターンマッチは、関数型言語の一つの機能として知られています。
フロントエンド開発ではビジネスロジックを書く機会が少ないため、パター...]]></description><link>https://zenn.dev/x_point_1/articles/25fbf1fbb44af9</link><guid isPermaLink="true">https://zenn.dev/x_point_1/articles/25fbf1fbb44af9</guid><pubDate>Sun, 29 Sep 2024 09:15:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TkUaU5NZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A8ts-pattern%25E3%2581%25AE%25E7%25B5%2584%25E3%2581%25BF%25E5%2590%2588%25E3%2582%258F%25E3%2581%259B%25E3%2582%2592%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yoshiyuki%2520Sato%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3YzY4ZjI4ZDcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25B3%25E6%258A%2580%25E8%25A1%2593%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzODNlOTg4OTAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshiyuki Sato</dc:creator></item><item><title><![CDATA[ネスト階層が深いif文をリファクタリングする]]></title><description><![CDATA[
 概要
初学者にありがちなネスト階層が深いif文を分解し、早期リターンでシンプルに記述する方法を紹介します。

 要件
次の要件を満たすバリデーションを実装する（ライブラリは使用しない)

入力された開始日と終了日の差分が n ヶ月以上離れている場合にエラーとする。
1 年以上の差分は指定できない(n &lt;= 12)。
終了日が開始日よりも前の日付ではいけない。
n ヶ月後の同日(応答日)は指定期間に含む
時刻は考慮しない


 課題
※ 読み飛ばしていただいて構いません。
次のように if 文をネストして表現した既存コードがありました。
記述量が多く可読性も悪いため、このコードを...]]></description><link>https://zenn.dev/kotouchable/articles/5c37a3c92d419a</link><guid isPermaLink="true">https://zenn.dev/kotouchable/articles/5c37a3c92d419a</guid><pubDate>Sun, 29 Sep 2024 07:49:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vrMRqdX5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E9%259A%258E%25E5%25B1%25A4%25E3%2581%258C%25E6%25B7%25B1%25E3%2581%2584if%25E6%2596%2587%25E3%2582%2592%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kotouchable%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmNzVkNjUxYzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kotouchable</dc:creator></item><item><title><![CDATA[【T3 Stack】技術記事をストックして学びの記録を残せるアプリを個人開発しました！]]></title><description><![CDATA[
 はじめに
ZennやQiitaの記事、後で読もうと思ってつい忘れてしまうことはありませんか？
今回、技術記事を保存して進捗管理ができ、学びの記録を残せるアプリを個人開発しました！
https://tech-stock-app-six.vercel.app/

 背景
最近、T3 Stackに関する記事をたくさん投稿してきましたが、応用として実際にアプリを作ってみたいと思っていました。
モチベーションを保ちながら、簡単にできるものを探している中で、「後で読もうと思った技術記事を管理できるアプリがあったら便利」というアイデアをいただき、確かに自分でも欲しいし簡単に作れそう！と思ったのでこ...]]></description><link>https://zenn.dev/kiwichan101kg/articles/cc5f8bf784ce22</link><guid isPermaLink="true">https://zenn.dev/kiwichan101kg/articles/cc5f8bf784ce22</guid><pubDate>Sun, 29 Sep 2024 07:29:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1RsrxB_b--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590T3%2520Stackw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kiwichan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlYTA3YzU3YzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kiwichan</dc:creator></item><item><title><![CDATA[ArrayBufferView（各 TypedArray と DataView）の型がジェネリクスになります]]></title><description><![CDATA[変更情報
【2024/09/30】

DefinitelyTyped について追記



 結論
（おそらく）TypeScript 5.7 で ArrayBufferView（各 TypedArray と DataView）の型がジェネリクスになり、ArrayBuffer と SharedArrayBuffer のどっちを保持しているのかを型レベルで判定できるようになります。
https://github.com/microsoft/TypeScript/pull/59417
Uint8Array の型について一部抜き出してみると以下のようになります。
type ArrayBufferL...]]></description><link>https://zenn.dev/pixiv/articles/b241ee3d046740</link><guid isPermaLink="true">https://zenn.dev/pixiv/articles/b241ee3d046740</guid><pubDate>Sun, 29 Sep 2024 07:28:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tSt5pMML--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ArrayBufferView%25EF%25BC%2588%25E5%2590%2584%2520TypedArray%2520%25E3%2581%25A8%2520DataView%25EF%25BC%2589%25E3%2581%25AE%25E5%259E%258B%25E3%2581%258C%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:petamoriken%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhMDc3ZWRhZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:pixiv%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzODlhMzQ2ZjQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>petamoriken</dc:creator></item><item><title><![CDATA[Express × TypeScript：実践例で見るメリット]]></title><description><![CDATA[
 概要
この記事では、Express アプリケーション開発において、TypeScript を使用することでえられる具体的なメリットについて解説します。

 はじめに
Express は、Node.js 環境で Web アプリケーションを構築するためのシンプルなフレームワークです。従来、JavaScript を使用して開発されてきましたが、プロジェクトが大規模化するにつれて、型のない言語特有の問題が顕在化します。
この記事では、TypeScript を導入することで、これらの課題をどのように解決できるかを見ていきます。

 JavaScript での Express アプリケーション
ま...]]></description><link>https://zenn.dev/tcool/articles/6d202729fe1b68</link><guid isPermaLink="true">https://zenn.dev/tcool/articles/6d202729fe1b68</guid><pubDate>Sun, 29 Sep 2024 06:13:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L-qp6Dlq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Express%2520%25C3%2597%2520TypeScript%25EF%25BC%259A%25E5%25AE%259F%25E8%25B7%25B5%25E4%25BE%258B%25E3%2581%25A7%25E8%25A6%258B%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-cool%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liVmViMFdEdFlWcUtvVDRvYktNeDNTUGZvRTVFOW9rNUV0c21Dc2RvPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-cool</dc:creator></item><item><title><![CDATA[expo + react nativeで tailwindcssの設定をする手順]]></title><description><![CDATA[今年から使用可能になったvercelが提供しているUI生成ツールv0を使って簡単におしゃれなUIを実装できるようになりました。
それに伴って、cssもできればtailwindで実装したいという方が増えるのかなと思いこの記事を残します。

 環境構築の流れ

Expoのインストール
プロジェクトの作成
NativeWindのインストールと設定
TailwindCSSの設定
動作確認

それじゃあ、順番に進めていきますよ！

 1. Expoのインストール
まずはExpoをインストールしていきます。ターミナルを開いて、以下のコマンドを実行してください。
npm install -g expo...]]></description><link>https://zenn.dev/enginia_vita/articles/814bd186ad72bc</link><guid isPermaLink="true">https://zenn.dev/enginia_vita/articles/814bd186ad72bc</guid><pubDate>Sun, 29 Sep 2024 06:02:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BAUIk1cc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:expo%2520%252B%2520react%2520native%25E3%2581%25A7%2520tailwindcss%25E3%2581%25AE%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%25E6%2589%258B%25E9%25A0%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:maassaa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y0ZmJhNzg0MzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>maassaa</dc:creator></item><item><title><![CDATA[型の達人になる！TypeScriptで使える11の型拡張テクニック]]></title><description><![CDATA[
 初めに
TypeScriptでは、型を利用して意図しない値の定義や宣言を防ぐことができます。このことにより、コードの可読性や保守性の向上に繋げることが可能になります。一方で、複雑なデータの型定義を繰り返し行うと、コードが冗長になったり複雑化することで、逆に保守性が低下する恐れがあります。重複する型定義を避けるため、TypeScriptは柔軟な型の定義方法を提供しています。これらを活用することで、型をより柔軟かつ強力に扱うことが可能になります。今回は、TypeScriptが提供している主な特殊な型拡張方法について説明します。

 11の型定義

 1. ユニオン型 (Union Typ...]]></description><link>https://zenn.dev/atusi/articles/ee8ef5b3cc008f</link><guid isPermaLink="true">https://zenn.dev/atusi/articles/ee8ef5b3cc008f</guid><pubDate>Sun, 29 Sep 2024 04:46:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--buRkGs5P--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%259E%258B%25E3%2581%25AE%25E9%2581%2594%25E4%25BA%25BA%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25EF%25BC%2581TypeScript%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258B11%25E3%2581%25AE%25E5%259E%258B%25E6%258B%25A1%25E5%25BC%25B5%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Atsushi%2520hatakeyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdjYWE3ODNjN2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Atsushi hatakeyama</dc:creator></item><item><title><![CDATA[【Next.js】useTransitionを使ったServer Actionsの二重押下防止]]></title><description><![CDATA[
 はじめに
Next.jsで個人開発を行なっている中で更新ボタンを何度も押せてしまう！という致命的なバグを検出し修正したので記事にしました。
更新処理はServer Actionsを使用しています。
Server Actionsの任意の状態（今回はエラー有無やメッセージ）をuseFormStateで、更新処理の進行状態をuseTransitionで管理しました。
使用しているバージョン"next": "^14.2.4",
"react": "^18.3.1",


 Server ActionsとuseFormState

Server ActionsはNext.js 13.4以降で導...]]></description><link>https://zenn.dev/kiwichan101kg/articles/ef6992a45de2bd</link><guid isPermaLink="true">https://zenn.dev/kiwichan101kg/articles/ef6992a45de2bd</guid><pubDate>Sat, 28 Sep 2024 12:35:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8TQfz9do--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Next.js%25E3%2580%2591useTransition%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259FServer%2520Actions%25E3%2581%25AE%25E4%25BA%258C%25E9%2587%258D%25E6%258A%25BC%25E4%25B8%258B%25E9%2598%25B2%25E6%25AD%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kiwichan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZlYTA3YzU3YzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kiwichan</dc:creator></item><item><title><![CDATA[続・TypeScriptの`never`と`unknown`]]></title><description><![CDATA[
 はじめに
先日公開した記事では、部分型関係を導きの糸としてkeyof neverとkeyof unknownの定義を説明しました。存外に多くの方に読まれ著者としては嬉しい限りです。味をしめた今回は、前回の記事でやり残した感のあるneverとunknownそのものの振る舞いについて補足を加えたいと思います。
具体的には、neverとunknownの部分型関係における特殊な立ち位置について、図解を交えた解説を試みます。neverは全ての型の部分型であり、unknownは全ての型の上位型です。この性質を理解すると、|と&amp;にneverやunknownを食わせたときの挙動も理解しやすく...]]></description><link>https://zenn.dev/mshaka/articles/8fe32e7cdb1fc3</link><guid isPermaLink="true">https://zenn.dev/mshaka/articles/8fe32e7cdb1fc3</guid><pubDate>Sat, 28 Sep 2024 12:04:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rg82BSjs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B6%259A%25E3%2583%25BBTypeScript%25E3%2581%25AE%2560never%2560%25E3%2581%25A8%2560unknown%2560%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BB%25E3%2581%25A8%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2MGMxZmFkMjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ほとけ</dc:creator></item><item><title><![CDATA[grpcでCRUD App with Hooks #1 (React編)]]></title><description><![CDATA[
 目的
gRPCは、バイナリ通信や双方向ストリーミング、複数言語対応のコード自動生成が可能な一方で、従来のHTTP通信に比べて取り扱いが難しく、ブラウザから直接利用できない（gRPC-Webなどのミドルウェアが必要）などのデメリットもあります。
本記事では、Reactを用いたフロントエンドでのgRPCによるシンプルなCRUD操作を紹介し、gRPCを実務で使うための学習の手助けを目的としています。
gRPCは特にリアルタイムデータのやり取りや大量データの送受信に向いていますが、本記事では単方向通信（1リクエスト、1レスポンス）のみを扱ったシンプルな例を紹介しています。

 バージョン情報...]]></description><link>https://zenn.dev/dragonarrow/articles/9c654ebe71fb7e</link><guid isPermaLink="true">https://zenn.dev/dragonarrow/articles/9c654ebe71fb7e</guid><pubDate>Sat, 28 Sep 2024 10:10:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cMUgTVjp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:grpc%25E3%2581%25A7CRUD%2520App%2520with%2520Hooks%2520%25231%2520%2528React%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:napojin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUl0YnZtbFhOc2dJVFkzb0FRVnF3X2JlZXBxVDNIWE1VWWxJSy1qQjVvblg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>napojin</dc:creator></item></channel></rss>