<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-13T20:40:59+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092061</id>
    <published>2025-10-13T20:40:59+09:00</published>
    <updated>2025-10-13T20:40:59+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tsuchida-y/items/be984d8990d6c03a45f1"/>
    <url>https://qiita.com/tsuchida-y/items/be984d8990d6c03a45f1</url>
    <title>Androidアプリが起動するまでの処理</title>
    <content type="text">きっかけ
Androidプロジェクトのbuild.gradleファイルでエラーが起きた際、そもそもアプリがビルドされ、ユーザーの端末で起動するまでにどのような処理が動いているのか、その全体像が気になったことがこの記事をまとめたきっかけです。

アプリがユーザーの元に届き...</content>
    <author>
      <name>tsuchida-y</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092027</id>
    <published>2025-10-13T19:22:33+09:00</published>
    <updated>2025-10-13T19:22:33+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/81e284b6f61713c60fdc"/>
    <url>https://qiita.com/nozomi2025/items/81e284b6f61713c60fdc</url>
    <title>【Kotlin】Kotlin × Compose × Domain DSL の統合設計</title>
    <content type="text">Kotlin × Compose × Domain DSL の統合設計

「UIを宣言しながらドメインを語る」──Kotlin DSLが導く宣言的アーキテクチャ

1. 背景：宣言的UIとドメインの断絶
Jetpack Compose に代表される宣言的UIでは、
U...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092021</id>
    <published>2025-10-13T19:07:31+09:00</published>
    <updated>2025-10-13T19:07:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/e37dd02de20cc62a9905"/>
    <url>https://qiita.com/nozomi2025/items/e37dd02de20cc62a9905</url>
    <title>【Kotlin】「Reified + Sealed + Generic」で設計する 型安全な Routing DSL</title>
    <content type="text">はじめに

NavigationやScreen遷移を「文字列やID」ではなく型で保証するルーティング設計

1. 従来の問題：文字列ベースルーティングの限界
例えば、よくある Navigation の実装：
navController.navigate("detail...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092005</id>
    <published>2025-10-13T18:46:58+09:00</published>
    <updated>2025-10-13T18:46:58+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/4da1c3cbbf0c20d0436e"/>
    <url>https://qiita.com/nozomi2025/items/4da1c3cbbf0c20d0436e</url>
    <title>【Kotlin】Kotlin Annotation Processing 入門：`kapt` を完全理解する（Room / Hilt / Glide 対応）</title>
    <content type="text">はじめに
Kotlin 開発をしていると、Gradle によく出てくるこの一行：
kapt("androidx.room:room-compiler:2.6.1")

「kapt って何？」「annotationProcessor と何が違うの？」
という疑問を持ったこと...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
