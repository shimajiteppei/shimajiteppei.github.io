<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 03 Sep 2025 10:04:39 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[【Bevy 0.15 & Rapier2D 0.29 対応】`RapierContext`の正しい取得方法と使い方]]></title><description><![CDATA[無駄に正解にたどり着くまで苦労しました。
基本はコードよめですね。

 まとめ ReadRapierContextを使う
rapier_context: ReadRapierContext,
詳しく知りたい場合は、rapier_context_systemparam.rsを読む/読ませるといい。
以下、Gemini Pro 2.5による説明
Bevyで物理演算ライブラリbevy_rapierを使っていると、物理ワールドの状態にアクセスしたくなる場面がよくあります。例えば、「特定の座標にレイを飛ばして何かに当たっているか調べたい」「現在接触しているオブジェクトのペアをすべて取得したい」とい...]]></description><link>https://zenn.dev/akjava/articles/aaa8fea3f2c203</link><guid isPermaLink="true">https://zenn.dev/akjava/articles/aaa8fea3f2c203</guid><pubDate>Wed, 03 Sep 2025 04:05:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8wRkMH0f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Bevy%25200.15%2520%2526%2520Rapier2D%25200.29%2520%25E5%25AF%25BE%25E5%25BF%259C%25E3%2580%2591%2560RapierContext%2560%25E3%2581%25AE%25E6%25AD%25A3%25E3%2581%2597%25E3%2581%2584%25E5%258F%2596%25E5%25BE%2597%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:github_akjava%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYzFmMDQyY2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>github_akjava</dc:creator></item><item><title><![CDATA[MariaDB WHERE INクエリの直列分割処理で最適なチャンクサイズを実測データで検証する]]></title><description><![CDATA[
 はじめに
大量のデータを扱う際、WHERE INクエリのパフォーマンスは重要な課題です。特に、数万件のIDを一度に処理する場合、単一のクエリではパフォーマンスが低下することがあります。
この記事では、直列分割処理によるWHERE INクエリの最適化について、実際のベンチマーク結果に基づいて詳しく分析します。

 問題の背景

 単一WHERE INクエリの問題
-- 50000件のIDを一度に処理
SELECT * FROM test_records 
WHERE id IN (?, ?, ?, ..., ?) -- 50000個のパラメータ
このような大量のパラメータを含むクエリに...]]></description><link>https://zenn.dev/collabostyle/articles/83f390008cff3c</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/83f390008cff3c</guid><pubDate>Wed, 03 Sep 2025 03:42:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---BiFAmqa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MariaDB%2520WHERE%2520IN%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%25AE%25E7%259B%25B4%25E5%2588%2597%25E5%2588%2586%25E5%2589%25B2%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25A7%25E6%259C%2580%25E9%2581%25A9%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%25B3%25E3%2582%25AF%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E5%25AE%259F%25E6%25B8%25AC%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yushi-s%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1DWlFPZDBzMmF6VWgtQ0lVZjRvTnVxeW5ZUUswU0g2N3M3M1hVbjFvQldPRDJBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yushi-s</dc:creator></item><item><title><![CDATA[Rust Web アプリをレベルアップ：開発者向け上級テク10選]]></title><description><![CDATA[
 Rust Web開発の高度な10のヒント：設計原則から実装まで
RustによるWeb開発のメリットは**「ゼロコスト抽象化＋メモリ安全性」** にありますが、高度なシナリオ（高並行性、複雑な依存関係、セキュリティ保護）では「フレームワークのデフォルト使用法」を超える必要があります。以下の10のヒントは、Tokio/Axum/Sqlxなどのエコシステムを組み合わせ、設計ロジックを分解して、より効率的で安全なコードを記述するのに役立ちます。

 ヒント1：手動のJoinHandle管理の代わりにTokio JoinSetを使用する
方法：複数の非同期タスクのシナリオでは、JoinHand...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</guid><pubDate>Tue, 02 Sep 2025 15:05:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ynzN_vd4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25EF%25BC%259A%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E4%25B8%258A%25E7%25B4%259A%25E3%2583%2586%25E3%2582%25AF10%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[怖くない！　抽象化動的セグメント木の非再帰実装]]></title><description><![CDATA[
 はじめに
区間取得クエリを対数時間で処理するセグメント木は競技プログラミングで頻出のデータ構造です。巨大な配列（N \gg 10^5）に対するセグメント木を作ろうとするとMLEや実行時エラーを引き起こしてしまいますが、必要なノードだけ作ることで空間O(Q)で実現できます。これを動的セグメント木と言います。
本記事では抽象化動的セグメント木の非再帰実装の勘所を紹介します。また、効率よく実装するための工夫についても紹介します。

 対象読者
本記事ではセグメント木の仕組みを理解していることを前提とします。セグメント木の解説記事は世にごまんとあるので、適宜参照してください。個人的にわかりや...]]></description><link>https://zenn.dev/yatyou/articles/07e787d09d0441</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/07e787d09d0441</guid><pubDate>Tue, 02 Sep 2025 12:19:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k5LkxByc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%2596%25E3%2581%258F%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%25E3%2580%2580%25E6%258A%25BD%25E8%25B1%25A1%25E5%258C%2596%25E5%258B%2595%25E7%259A%2584%25E3%2582%25BB%25E3%2582%25B0%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E6%259C%25A8%25E3%2581%25AE%25E9%259D%259E%25E5%2586%258D%25E5%25B8%25B0%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[MSRVでCIを実行するときに設定しておくべき環境変数]]></title><description><![CDATA[
 概要
export CARGO_UNSTABLE_SPARSE_REGISTRY="true" # for rust_version &lt; 1.68
export CARGO_REGISTRIES_CRATES_IO_PROTOCOL="sparse" # for 1.68 &lt;= rust_version &lt; 1.70
export CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS="fallback" # for edition &lt; 2024

 sparse registory
non-sparseなレジストリでも動くが、非...]]></description><link>https://zenn.dev/toru3/articles/5976752f77744b</link><guid isPermaLink="true">https://zenn.dev/toru3/articles/5976752f77744b</guid><pubDate>Tue, 02 Sep 2025 10:06:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qG3qJ36h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MSRV%25E3%2581%25A7CI%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%25E3%2581%25B9%25E3%2581%258D%25E7%2592%25B0%25E5%25A2%2583%25E5%25A4%2589%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Toru3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0YzQwY2I5MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Toru3</dc:creator></item><item><title><![CDATA[WASMアプリをIBM Cloud Code Engineにデプロイしてみた]]></title><description><![CDATA[
 はじめに
本記事はサクッとRustプロジェクトをWASMにコンパイルしてコンテナで動かしてみたの続編となります。
今回は通常の Linux コンテナ内で WebAssembly runtime を起動し、.wasm を実行します。
前回（Rancher Desktop の Wasm ランタイム上で FROM scratch の超軽量イメージを動かす）から一歩進めて、同じ Wasm アプリを Code Engine にデプロイしてみたいと思います。

 必要ツール

Rust 1.85 以上（Edition 2024 対応）

rustup 利用を前提
wasm32-wasip1


...]]></description><link>https://zenn.dev/cepe_jp/articles/8239b5f6248299</link><guid isPermaLink="true">https://zenn.dev/cepe_jp/articles/8239b5f6248299</guid><pubDate>Tue, 02 Sep 2025 06:03:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kA56hPbU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WASM%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592IBM%2520Cloud%2520Code%2520Engine%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yusuke%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLmRldi9pbWFnZXMvZGVmYXVsdC1wdWJsaWNhdGlvbi1hdmF0YXIucG5n%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:cepe-jp%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljZDBlYzg3ZDYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[Rustで動的型付けっぽいKeyは作れるのか?]]></title><description><![CDATA[
 なぜまたこんなことを?
RustでHashSetやMapのKeyはHash+Eqである必要がある。ここで、Tで縛るのではなく、左記の条件を実対していればいかなるEntityでもKeyとして使うことのできるようにできるのかな?というのがそもそものとっかかり。

 Envelopeを作る
通常hash関数は、fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) となっている。通常はこれで問題ないのだが、今回の場合、KeyをBoxに詰める必要があり、関数にGenericsが入っているとコンパイルエラーになってしまう。またfn hash...]]></description><link>https://zenn.dev/tokeiya3/articles/b9bfb84389565d</link><guid isPermaLink="true">https://zenn.dev/tokeiya3/articles/b9bfb84389565d</guid><pubDate>Tue, 02 Sep 2025 05:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DKfqdvMu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E5%259E%258B%25E4%25BB%2598%25E3%2581%2591%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584Key%25E3%2581%25AF%25E4%25BD%259C%25E3%2582%258C%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2599%2582%25E8%25A8%2588%25E5%25B1%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsb19HZWI4b2lub3N2UWZscXdOVjIzaGREYklrd05QdVZQWlZiMkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>時計屋</dc:creator></item><item><title><![CDATA[Claudeでミニカートゲームをアップグレードする]]></title><description><![CDATA[
 はじめに
前回、Rust&amp;Wasmでつくったミニカートゲームを、Claude Code &amp; Serena を使ってアップグレードした内容を記事にまとめました。今回も、興味を持って頂いた方は、パソコンから、お試しURLをクリックしてみてください🙂。

 ミニカートゲーム2


 お試しURL(アップグレード後)
https://myurioka.github.io/cart2/

 お試しURL(アップグレード前)
https://myurioka.github.io/cart/

 操作
カーソル左/右: 左右移動
カーソル上: 速度UP
カーソル下: 左右の移動をな...]]></description><link>https://zenn.dev/yurioka/articles/159bf550fb77ed</link><guid isPermaLink="true">https://zenn.dev/yurioka/articles/159bf550fb77ed</guid><pubDate>Mon, 01 Sep 2025 22:07:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uj_qZue3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%25E3%2581%25A7%25E3%2583%259F%25E3%2583%258B%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myurioka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY3YTE2NGMzMzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myurioka</dc:creator></item><item><title><![CDATA[HTTPからWebSocketへ：リアルタイムWebの進化]]></title><description><![CDATA[
Leapcell：最高のサーバーレスWebホスティング

 HTTP長接続からWebSocketへ：リアルタイムWebの技術進化と米国企業の実践

 I. 歴史的進化：HTTP接続方式のジレンマと突破口
初期のWebは静的コンテンツが中心であり、HTTPプロトコルは「リクエスト-レスポンス」の短時間接続（ショートコネクション）方式を採用していた。クライアントがリクエストを送信し、サーバーがレスポンスを返すと、TCP接続は即座に切断される。この方式は静的ページの時代には有効だったが、オンラインチャットやリアルタイム監視といったインタラクティブなニーズの高まりに伴い、ショートコネクションの...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</guid><pubDate>Mon, 01 Sep 2025 15:35:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4WFcS8nY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTTP%25E3%2581%258B%25E3%2582%2589WebSocket%25E3%2581%25B8%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0Web%25E3%2581%25AE%25E9%2580%25B2%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[思ったより(知ってるけど)知らないRustのイテレータと高階関数]]></title><description><![CDATA[
 思ったより(知ってるけど)知らないRustのイテレータと高階関数

 こんにちは
こんにちはsaffronteaです。
FAST株式会社にてRustを使用してアプリケーション、APIなどのバックエンドの作成を行っています。
私はRustをかれこれ6~7年くらい使ってきていましたが、正直Iteratorをうまく扱えているとは言い難いなと思いつつ触っていました。
業務でRustコードを書くにあたって、より効率的で読みやすいコードを作っていくためには、
Iteratorをうまく使えるようになりたいなぁと感じたのでちゃんと調べてみることにしました。
!
この記事は8割人間の手によって書かれて...]]></description><link>https://zenn.dev/fast/articles/fd0a798fb53a5e</link><guid isPermaLink="true">https://zenn.dev/fast/articles/fd0a798fb53a5e</guid><pubDate>Mon, 01 Sep 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6w3P6iEn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2582%258A%2528%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2591%25E3%2581%25A9%2529%25E7%259F%25A5%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584Rust%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%2586%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A8%25E9%25AB%2598%25E9%259A%258E%25E9%2596%25A2%25E6%2595%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:saffron%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzljYTEzZDEyMWEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FAST%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjOWRhNTg5NjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>saffron</dc:creator></item><item><title><![CDATA[tokei で行数を測ってみよう]]></title><description><![CDATA[
 tokei で行数を測ってみよう
tokei https://github.com/XAMPPRocky/tokei はコードの統計情報を表示するコマンドラインツールです。 Rust で書かれています。
コードの統計情報を表示するので「統計」かと思いきや「時計」と、リポジトリの README に書いてあります。
行数なんて……と思われるかもしれませんが、規模感のある程度の目安にはなります。あるリポジトリがあったとき 100 万行と 100 行ではさすがに違いますよね (もちろん自動生成された何かという可能性はありますが) 。

 インストール
いくつかの方法でインストールできますが、...]]></description><link>https://zenn.dev/doctormate/articles/35e698d10c1388</link><guid isPermaLink="true">https://zenn.dev/doctormate/articles/35e698d10c1388</guid><pubDate>Mon, 01 Sep 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Xh1kNE30--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tokei%2520%25E3%2581%25A7%25E8%25A1%258C%25E6%2595%25B0%25E3%2582%2592%25E6%25B8%25AC%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:bouzuya%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiYmEzODYwNjQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2589%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqVElDaW81T2gxMjNQSzhqQXkydnJpTDh6dC1SWUZvUnYzd0tjb3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bouzuya</dc:creator></item><item><title><![CDATA[axum の Router をエンドポイントの階層で分けて書く]]></title><description><![CDATA[
 axum の Router ってどう書く？
Rust のウェブアプリケーションフレームワーク axum で、エンドポイントを用意するとき、Router 構造体 を使用するのだけれど、よくあるサンプルコードは以下みたいなものだったりする。
use axum::{
    http::StatusCode,
    response::IntoResponse,
    routing::get,
    Router,
};

#[tokio::main]
async fn main() {
    let router = Router::new()
        .route("...]]></description><link>https://zenn.dev/awazo/articles/layered-axum-router</link><guid isPermaLink="true">https://zenn.dev/awazo/articles/layered-axum-router</guid><pubDate>Mon, 01 Sep 2025 02:22:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XBdceIRW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:axum%2520%25E3%2581%25AE%2520Router%2520%25E3%2582%2592%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AE%25E9%259A%258E%25E5%25B1%25A4%25E3%2581%25A7%25E5%2588%2586%25E3%2581%2591%25E3%2581%25A6%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Ozawa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QwM2E1ZTFjNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Ozawa</dc:creator></item><item><title><![CDATA[10万件データで実証。データベース設計パターンの性能・保守性比較【Rust + MariaDB】]]></title><description><![CDATA[
 はじめに
データベース設計において、パフォーマンス、拡張性、保守性のバランスを取ることは永遠の課題です。本記事では、OLTP（Online Transaction Processing）システムを想定し、10万件のデータを使用して、3つの主要なデータベース設計パターンの性能を定量的に比較し、保守性を実際のコードベースで説明します。

 対象システムの特性


OLTP（オンライントランザクション処理）: リアルタイムでのデータ更新・参照

高頻度のCRUD操作: 部屋情報の登録・更新・削除・検索

複雑なビジネスロジック: 部屋の状態分析、メンテナンス管理

拡張性の要求: 新しい属...]]></description><link>https://zenn.dev/collabostyle/articles/d2378aefb5710a</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/d2378aefb5710a</guid><pubDate>Sun, 31 Aug 2025 23:59:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--glox9say--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:10%25E4%25B8%2587%25E4%25BB%25B6%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25A7%25E5%25AE%259F%25E8%25A8%25BC%25E3%2580%2582%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E8%25A8%25AD%25E8%25A8%2588%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25AE%25E6%2580%25A7%25E8%2583%25BD%25E3%2583%25BB%25E4%25BF%259D%25E5%25AE%2588%25E6%2580%25A7%25E6%25AF%2594%25E8%25BC%2583%25E3%2580%2590Rust%2520%252B%2520MariaDB%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yushi-s%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1DWlFPZDBzMmF6VWgtQ0lVZjRvTnVxeW5ZUUswU0g2N3M3M1hVbjFvQldPRDJBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yushi-s</dc:creator></item><item><title><![CDATA[WebSocketとHTTPショートコネクションの技術進化と比較分析]]></title><description><![CDATA[
 WebSocketとHTTPショートコネクションの技術進化と比較分析
現代のWebアプリケーションにおいて、クライアントとサーバー間の通信方式は、アプリケーションのパフォーマンスとユーザーエクスペリエンスに直接的な影響を与えます。初期の静的Webページから今日のリアルタイムコラボレーションツールまで、通信プロトコルの進化は常に「効率性」と「リアルタイム性」という2つのコアニーズを中心に展開されてきました。本稿では、HTTPショートコネクション、HTTPロングコネクション及びその派生技術を深く分析し、最終的にWebSocketの設計理念とアプリケーションシナリオを比較します。また、Py...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/39d2cc9d4a1487</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/39d2cc9d4a1487</guid><pubDate>Sun, 31 Aug 2025 14:09:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sTPTGUi4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WebSocket%25E3%2581%25A8HTTP%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B3%25E3%2583%258D%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E9%2580%25B2%25E5%258C%2596%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%25E5%2588%2586%25E6%259E%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[緑コーダーがRustで解説してみた(ABC421 A～D)]]></title><description><![CDATA[AtCoder Beginner Contest 421のA～D問題を緑コーダーが自分なりの解説と解答コードをまとめました。
参考になりましたら幸いです。

 ABC421-A
問題
https://atcoder.jp/contests/abc421/tasks/abc421_a
N 部屋あるマンションの宛先の名前が正しいかどうかを判定する問題です。
解説
与えられた名前リストの中で、指定された部屋番号 X の名前が、与えられた名前 Y と一致しているかを判定します。
一致していれば Yes を、一致していなければ No を出力します。
コード

abc421a.rs
use proc...]]></description><link>https://zenn.dev/nakst_hide/articles/10bc3d1bf0fa6a</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/10bc3d1bf0fa6a</guid><pubDate>Sun, 31 Aug 2025 12:30:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--k2zHXkwa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B7%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2581%258CRust%25E3%2581%25A7%25E8%25A7%25A3%25E8%25AA%25AC%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2528ABC421%2520A%25EF%25BD%259ED%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk1YTJjNWQyNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rust で作る！簡単なコマンドライン検索ツール（grep クローン）]]></title><description><![CDATA[
 この記事で学べること
この記事では、Rustを使って実用的なコマンドライン検索ツールを段階的に作成していきます。
完成品はgrepコマンドの簡易版で、以下の機能を最終的には実装します。

ファイル内の文字列検索
一致した行の行番号表示
検索結果のカラーハイライト

学習できるRustの技術

ファイル I/O の基本
コマンドライン引数の処理
エラーハンドリング


 前提条件
必要な知識

Rustの基本文法（変数、ループ、match式、構造体）
所有権とボローイングの基本概念

必要な環境

Rust開発環境（rustup, rustc, cargoがインストール済み）


私の...]]></description><link>https://zenn.dev/dokusy/articles/c7ef19ab933eb0</link><guid isPermaLink="true">https://zenn.dev/dokusy/articles/c7ef19ab933eb0</guid><pubDate>Sun, 31 Aug 2025 06:16:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lCgawAI3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25EF%25BC%2581%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25EF%25BC%2588grep%2520%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25B3%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A9%25E3%2581%2585%25E3%2581%258F%25E3%2581%2597%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiYTU0YmQxZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>どぅくし</dc:creator></item><item><title><![CDATA[Rust　データ型]]></title><description><![CDATA[
 はじめに
Rustのデータ型についてまとめてみます。

 プリミティブ型

 符号付き整数
i8、i16、i32、i64、i128（数字は使用するビット数）

 最小値
i8:-128
i16:-32768
i32:-2147483648
i64:-9223372036854775808
i128:-170141183460469231731687303715884105728
例）i8::MIN

 最大値
i8:127
i16:32767
i32:2147483647
i64:9223372036854775807
i128:170141183460469231731687303...]]></description><link>https://zenn.dev/hardtrap/articles/6e59b3c11cfffa</link><guid isPermaLink="true">https://zenn.dev/hardtrap/articles/6e59b3c11cfffa</guid><pubDate>Sun, 31 Aug 2025 00:30:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rmj4QNQv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Rust%25E3%2580%2580%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kamyou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdiOTJlYzdiNzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kamyou</dc:creator></item><item><title><![CDATA[カラム型 vs JSON文字列格納のパフォーマンス比較]]></title><description><![CDATA[
 はじめに
データベース設計において、データの格納方式はパフォーマンスに大きな影響を与えます。今回は、カラム型ストレージとJSON文字列格納のパフォーマンスを10万件のデータで比較検証しました。
特に注目したのは、JSON型が実際には「JSON構造体を文字列として格納」する方式であることによる性能への影響です。

 比較対象の実装方式

 カラム型ストレージ（正規化されたテーブル構造）
CREATE TABLE users_column (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VA...]]></description><link>https://zenn.dev/collabostyle/articles/cae684f473e35e</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/cae684f473e35e</guid><pubDate>Sat, 30 Aug 2025 21:38:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r95EhQsz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2583%25A9%25E3%2583%25A0%25E5%259E%258B%2520vs%2520JSON%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E6%25A0%25BC%25E7%25B4%258D%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yushi-s%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk1DWlFPZDBzMmF6VWgtQ0lVZjRvTnVxeW5ZUUswU0g2N3M3M1hVbjFvQldPRDJBPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yushi-s</dc:creator></item><item><title><![CDATA[Serdeでfalseのフィールドを無視する]]></title><description><![CDATA[Using derive - SerdeのサンプルコードにnameというOption&lt;String&gt;のフィールドを追加した次のコードからはじめましょう。
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
struct Point {
    x: i32,
    y: i32,
    name: Option&lt;String&gt;,
}

fn main() {
    let point = Point { x: 1, y: 2, name: None };...]]></description><link>https://zenn.dev/akrisn/articles/serde_skip_bool</link><guid isPermaLink="true">https://zenn.dev/akrisn/articles/serde_skip_bool</guid><pubDate>Sat, 30 Aug 2025 06:44:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rJtNvOzt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Serde%25E3%2581%25A7false%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2582%2592%25E7%2584%25A1%25E8%25A6%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:akrisn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM4NGY4MTFkZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>akrisn</dc:creator></item><item><title><![CDATA[Rust 小ネタ: featureの不整合をコンパイルエラーにする方法（用法注意）]]></title><description><![CDATA[こんにちは、Fairy Devicesの吉川（@emergent: X, GitHub）です。
Rustでライブラリクレートを作っていると、ついついいろんなfeatureを足してしまいがちです。featureで有効になる機能を追加していると、#[cfg(feature = "...")]のような条件付きコンパイルを使うことが増えます。
feature同士の機能がお互い独立していればよいのですが、場合によっては「2つのうちのどちらか片方だけを有効にできる」ような実装をしたいときもあるでしょう。たとえば、ライブラリクレート内で依存するHTTPクライアントや非同期ランタイムを選択できるようにす...]]></description><link>https://zenn.dev/fairydevices/articles/d197dd92e31757</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/d197dd92e31757</guid><pubDate>Fri, 29 Aug 2025 05:31:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--omeL60w9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%253A%2520feature%25E3%2581%25AE%25E4%25B8%258D%25E6%2595%25B4%25E5%2590%2588%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25EF%25BC%2588%25E7%2594%25A8%25E6%25B3%2595%25E6%25B3%25A8%25E6%2584%258F%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:emergent%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2NzM5OTE5NzkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>emergent</dc:creator></item></channel></rss>