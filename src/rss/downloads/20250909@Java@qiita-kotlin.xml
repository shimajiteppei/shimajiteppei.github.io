<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-09T15:22:05+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2078048</id>
    <published>2025-09-09T15:22:05+09:00</published>
    <updated>2025-09-09T15:37:45+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/193f4bea1a3a79a2a39f"/>
    <url>https://qiita.com/nozomi2025/items/193f4bea1a3a79a2a39f</url>
    <title>【デザインパターン】 メディエータパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
メディエータ（Mediator）パターン は、
複数オブジェクト間の複雑な依存関係を「仲介者（Mediator）」に集約して、疎結合にする デザインパターンです。

解決する問題

多数のオブジェクトが相互に直接やり取りすると依存関係がスパゲッティ化...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2077978</id>
    <published>2025-09-09T12:03:24+09:00</published>
    <updated>2025-09-09T12:03:24+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/1fcfccb30cf011f21fd8"/>
    <url>https://qiita.com/majoLibrary/items/1fcfccb30cf011f21fd8</url>
    <title>【Android】RepositoryにDispatcherを注入して非同期テストを速く・安定させる方法</title>
    <content type="text">結論
今回の焦点は非同期テストを速く・安定させる設計です。

前の記事で書いたように、

Dispatcherは直書きせず外から渡す（本番は Dispatchers.IO、テストは StandardTestDispatcher）
Repositoryは“main-sa...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2077549</id>
    <published>2025-09-08T14:55:49+09:00</published>
    <updated>2025-09-08T14:55:49+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/90f621d67ea4ec0d1992"/>
    <url>https://qiita.com/nozomi2025/items/90f621d67ea4ec0d1992</url>
    <title>【デザインパターン】 ビジターパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ビジター（Visitor）パターン は、
データ構造を変えずに新しい操作を追加できるようにする デザインパターンです。

解決する問題

既存のオブジェクト構造を変えずに、新しい処理を追加したい
if/else や型判定で処理を分けるのを避けたい
デ...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2077246</id>
    <published>2025-09-07T20:33:50+09:00</published>
    <updated>2025-09-07T20:33:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Tsubasa12/items/2c0072942084e8e4013b"/>
    <url>https://qiita.com/Tsubasa12/items/2c0072942084e8e4013b</url>
    <title>【Android】特定の画面でスクショを禁止する【Kotlin】</title>
    <content type="text">実装
class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInst...</content>
    <author>
      <name>Tsubasa12</name>
    </author>
  </entry>
</feed>
