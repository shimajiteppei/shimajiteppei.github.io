<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Python」のフィード]]></title><description><![CDATA[Zennのトピック「Python」のRSSフィードです]]></description><link>https://zenn.dev/topics/python</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ebddf7c6bb.png</url><title>Zennの「Python」のフィード</title><link>https://zenn.dev/topics/python</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 16 Dec 2024 08:19:09 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/python/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Pythonで簡易的なOSC通信用のCLIツールを作った]]></title><description><![CDATA[
 はじめに
どうも、でんのこです。
先日とあるきっかけでPCのキーボード入力をトリガーとしてOSC通信を行うCLIツールを作成したので軽く紹介します。
※普段Pythonはほぼ書かないので書き方の良し悪しはわかりません。

 概要

 やりたいこと
予め決められた内容のメッセージをキーボードショートカットですぐに送信できるようにすること。

 機能

送信先のIPアドレスの設定
送信先のポートを設定
OSCの宛先を設定
送信する値の設定(今回はInt, Float, Boolに対応)
送信するためのキーボードショートカットを設定
設定の保存・削除


 実装

 プログラム全体
imp...]]></description><link>https://zenn.dev/dennoko/articles/2d0b1b75f6dd35</link><guid isPermaLink="true">https://zenn.dev/dennoko/articles/2d0b1b75f6dd35</guid><pubDate>Mon, 16 Dec 2024 04:37:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VXlZrZG8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Python%25E3%2581%25A7%25E7%25B0%25A1%25E6%2598%2593%25E7%259A%2584%25E3%2581%25AAOSC%25E9%2580%259A%25E4%25BF%25A1%25E7%2594%25A8%25E3%2581%25AECLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:dennoko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0Y2hURkI0QWtHR0YwVWxReUs4eHlOdzctbFVoM3JmQ1V1anZEa1luSmhBUnc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>dennoko</dc:creator></item><item><title><![CDATA[【Streamlit】Streamlitのテスト用モジュール入門]]></title><description><![CDATA[
 はじめに
こんにちは。データエンジニアの山口歩夢です！
12/6に「Streamlit入門 Pythonで学ぶデータ可視化&amp;アプリ開発ガイド」という技術書を発売致しました。
Streamlitの基礎から、Streamlitを活用したアプリケーションの開発について、300ページにわたって解説させていただきました！

https://www.amazon.co.jp/Streamlit入門-Pythonで学ぶデータ可視化＆アプリ開発ガイド-技術の泉シリーズ-山口-歩夢/dp/4295603511?source=ps-sl-shoppingads-lpcontext&amp;ref...]]></description><link>https://zenn.dev/gussan_a/articles/475956c712167d</link><guid isPermaLink="true">https://zenn.dev/gussan_a/articles/475956c712167d</guid><pubDate>Mon, 16 Dec 2024 03:36:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zJ3bMO-v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Streamlit%25E3%2580%2591Streamlit%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E7%2594%25A8%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%25B1%25B1%25E5%258F%25A3%25E6%25AD%25A9%25E5%25A4%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzZWQyMjkxYjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山口歩夢</dc:creator></item><item><title><![CDATA[#2　Pythonで簡単にマップ制作 ～Folium応用編～]]></title><description><![CDATA[
 Foliumって他に何ができるの？
Pythonで簡単にマップ制作 ～Folium基本編～で紹介した内容の他にもマップをもっとカスタマイズすることができます。

 やれることの一例

マップに複数の層を設定することができる

例：年度ごとにデータを分けて表示したい場合に2023年の情報を掲載する層、2024年の情報を掲載する層、、、のように分けて表示することができる。


マップに指定した大きさやサイズの円などの図形を書く
マップに刺すピンの色やピンのデザインを変える
GeoJSON形式データを読み込んでマップに表示することができる
ピンをクリックしたときの挙動をHTMLで別途記述す...]]></description><link>https://zenn.dev/picaneru/articles/f3aed4ca67e78b</link><guid isPermaLink="true">https://zenn.dev/picaneru/articles/f3aed4ca67e78b</guid><pubDate>Mon, 16 Dec 2024 01:30:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rSmOPZql--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25232%25E3%2580%2580Python%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E5%2588%25B6%25E4%25BD%259C%2520%25EF%25BD%259EFolium%25E5%25BF%259C%25E7%2594%25A8%25E7%25B7%25A8%25EF%25BD%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25B5%25B6%25E5%25AF%25BE%25E5%25AE%259A%25E6%2599%2582%25E9%2580%2580%25E5%258B%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NlYWVlYTI2MGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>絶対定時退勤</dc:creator></item><item><title><![CDATA[Lambdaで動くpyodbcのレイヤーを作ってみた]]></title><description><![CDATA[この投稿は、2024年JINSのアドベントカレンダー16日目の記事です。

 pyodbcを使って何がしたかったのか
今回実現したかったことはSnowflake上にあるデータの一部をSQL Serverに連携(INSERT)することでした。今まではETLツールがその役目を担っていたのですが、今年ライセンス期限を迎えることからSQL Serverが無くなるまでは自前のプログラムで乗り切ることにしました。
このプログラムはLambdaで稼働させるのですが、SQL ServerとのやりとりのためPythonライブラリのpyodbcを使用することにしました。

 Lambdaレイヤーって何？

...]]></description><link>https://zenn.dev/jins/articles/2f15c3c49350c5</link><guid isPermaLink="true">https://zenn.dev/jins/articles/2f15c3c49350c5</guid><pubDate>Mon, 16 Dec 2024 00:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--x54o--pi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Lambda%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258Fpyodbc%25E3%2581%25AE%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25A4%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:h0ri0%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzdlMjlhN2FiYWQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:JINS%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTEV0cmNuZlBlbXQ2Szk0OVAwTzdjUVpvcFFXZDdzQjlURDlLNC1qV25BLWlNOExRPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>h0ri0</dc:creator></item><item><title><![CDATA[みてねにおけるRuff導入までの道のり]]></title><description><![CDATA[
 はじめに
これは、MIXI DEVELOPERS Advent Calendar 2024 の16日目の記事です。
みてねプロダクト開発部 Data Engineeringグループの 鶴田 です。
この記事では、「家族アルバムサービス みてね (以下みてね)」における、Python系リポジトリへのRuff導入までの数年にわたる取り組みを説明します。

 2021年前半 (入社当時): コーディング規約だけの世界
2021年 (私の入社当時)、みてねには以下のようなPythonコーディング規約が存在しました。

コーディングスタイルはpep8に準拠しましょう
docstringを書きま...]]></description><link>https://zenn.dev/mixi/articles/921111bbb1d3ba</link><guid isPermaLink="true">https://zenn.dev/mixi/articles/921111bbb1d3ba</guid><pubDate>Sun, 15 Dec 2024 23:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--e9oRMXPL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25BF%25E3%2581%25A6%25E3%2581%25AD%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258BRuff%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%25BE%25E3%2581%25A7%25E3%2581%25AE%25E9%2581%2593%25E3%2581%25AE%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%2582%25E3%2581%258D%25E3%2582%2589%25E3%2581%258D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UzY2IwNWVmMTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:MIXI%2520DEVELOPERS%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pvY05zYzZlS0hBQ1Y4aHlqVE9SWlpNWlBldnNSQjN3eXYxRjZQYUE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>あきらき</dc:creator></item><item><title><![CDATA[分子解析やデザインに使えるPyMOLコマンドのextentions]]></title><description><![CDATA[PyMOLは分子解析ツールなのでタンパクや核酸の構造を解析するだけでなく、低分子や抗体(多くはFab?)との複合体構造の解析が創薬の一助となります。　　
メディシナルケミストの目線ではやはり低分子とその周辺残基の解析が最も重要です。　　
多くの企業は有償のソフトウェアを導入していると思うのであまり必要はないかと思いますが、計算をあまり投げずに分子解析をするだけなら動作が軽量なPyMOLは非常に優秀です。　　
ここでは解析にあたってケミスト目線で使うコマンドのextensionのスクリプトを公開します。　　
バックグラウンドがケミストなのでコーディングの面で難しい内容はありませんが、PyM...]]></description><link>https://zenn.dev/keetane/articles/a1fc44c0582b8c</link><guid isPermaLink="true">https://zenn.dev/keetane/articles/a1fc44c0582b8c</guid><pubDate>Sun, 15 Dec 2024 20:16:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--48MhuTDQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%2586%25E5%25AD%2590%25E8%25A7%25A3%25E6%259E%2590%25E3%2582%2584%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25AB%25E4%25BD%25BF%25E3%2581%2588%25E3%2582%258BPyMOL%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AEextentions%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keetane%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc1YzhkYjk2ODguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keetane</dc:creator></item><item><title><![CDATA[OSSなPython製ETLライブラリ「dlt」の紹介]]></title><description><![CDATA[dbt アドベントカレンダー 2024 11日目の記事です。

 前置き
普段はdbt Cloudを使っていて、Google Cloud に BigQueryとLookerStudio な技術スタックで社内のデータ基盤を構築・運用しています。
データ基盤で扱うSourceの拡充をするため、ETL/ELT ツールをいくつも試してたどり着いたのが、dltというツールです。
世間では非エンジニアでも画面上でポチポチ設定をしていくだけで、簡単にELT パイプラインが構築できるサービスを使われている話をよく聞きます。エンジニアのいない組織でも、すぐに各種データを収集して分析を始められる点では重宝さ...]]></description><link>https://zenn.dev/yumemi_inc/articles/ac108995e1f829</link><guid isPermaLink="true">https://zenn.dev/yumemi_inc/articles/ac108995e1f829</guid><pubDate>Sun, 15 Dec 2024 14:34:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RZk_NHd9--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:OSS%25E3%2581%25AAPython%25E8%25A3%25BDETL%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2580%258Cdlt%25E3%2580%258D%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Maki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MzAxMTgwMzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%2586%25E3%2582%2581%25E3%2581%25BF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmZDI3NDY2YTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Maki</dc:creator></item><item><title><![CDATA[Pyxelで簡単なゲームを作ってみた話]]></title><description><![CDATA[これは GO Inc. Advent Calendar 2024 の 15 日目の記事です。
この記事の内容は業務と全く関係ないですが、Advent Calenderなのでまあいいでしょう。(ゲーミフィケーションかなにかに活用したいという野望はあります)

 はじめに
少し前にPyxelというレトロゲーム開発エンジンを見つけました。
使える色は16色、同時に再生できる音は4音までなど、レトロゲーム機を意識してかなり機能が制約されたシンプルな仕様で、簡単なゲームを作る環境としては良さそうです。Pythonで書けるのもうれしいですね。
このエンジンについては作者の方が記事を書いているのでそち...]]></description><link>https://zenn.dev/rmizuta/articles/57d016e1593ea8</link><guid isPermaLink="true">https://zenn.dev/rmizuta/articles/57d016e1593ea8</guid><pubDate>Sun, 15 Dec 2024 12:48:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--B7nj7L92--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Pyxel%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rmizuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I5YjU4ZDRiOWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rmizuta</dc:creator></item><item><title><![CDATA[カープーリング問題を学んできた (数理最適化 Advent Calendar 2024)]]></title><description><![CDATA[
 はじめに
Twitter芸人名@cocomoffです。1-1.5年に1回ぐらい、数理最適化っぽい小ネタをブログに書いています。

小ネタ集

集まって移動する (数理最適化 Advent Calendar 2020)
ドラクエウォークと数理最適化
[Package] JuMP+CbcとJuMP+SICPの比較: Pisingerのナップサック問題インスタンスを使って
モジュラリティ最大化の計算を例に定式化の違いを見る (数理最適化 Advent Calendar 2022)
Metaheuristics.jl を使ってジオフェンスを計算する (数理最適化 Advent Calenda...]]></description><link>https://zenn.dev/takilog/articles/151e53b3e71cd5</link><guid isPermaLink="true">https://zenn.dev/takilog/articles/151e53b3e71cd5</guid><pubDate>Sun, 15 Dec 2024 06:00:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LjoDpmYA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25BC%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A7%25E3%2581%258D%25E3%2581%259F%2520%2528%25E6%2595%25B0%25E7%2590%2586%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%2520Advent%2520Calendar%25202024%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%258D%25E3%2582%258D%25E3%2581%2590%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzllMzkzOGE3OGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たきろぐ</dc:creator></item><item><title><![CDATA[正規表現をpythonのreで検証]]></title><description><![CDATA[
 pythonの標準モジュールreについて
公式のリンクは以下
https://docs.python.org/ja/3.13/library/re.html
公式の内容を要約すると以下である。

Unicode 文字列 (str) や 8 ビット文字列 (bytes)を対象に検索できる。
Unicodeと8ビット文字列が混在した形では検索できない。
バックスラッシュ\の扱いについて、"\"を文字列として検索したければ、r stringを使用すること。
正規表現記法
reの所持する関数についての説明

上記のうち下から２つについては、おおまかなものをとりあげて以下に記す。
正規表現記法...]]></description><link>https://zenn.dev/nyori/articles/6f50215708af27</link><guid isPermaLink="true">https://zenn.dev/nyori/articles/6f50215708af27</guid><pubDate>Sun, 15 Dec 2024 05:25:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f-9jVRyN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2582%2592python%25E3%2581%25AEre%25E3%2581%25A7%25E6%25A4%259C%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyori%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NjMzY5NDIwYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyori</dc:creator></item><item><title><![CDATA[Streamlit アプリを簡単にデスクトップアプリ化するコマンドを作った]]></title><description><![CDATA[Streamlit は簡単にデータサイエンス系のウェブアプリを構築できる Python ライブラリです。ウェブアプリなので、サーバーで起動してブラウザでアクセスすることになりますが、ローカルで動作するデスクトップアプリにして配布したい状況がありました。 Streamlitアプリをデスクトップアプリ化する方法はいくつかある[1][2]ようでしたが、制限があったり手間がかかったりするようでした。
「いや、お手軽にアプリにしたいんじゃっ」ということで、簡単にデスクトップアプリ化できる Streamlit Desktop App を作りました。このコマンドを使用すると、コマンド一発で Strea...]]></description><link>https://zenn.dev/ohtaman/articles/streamlit-desktop-app</link><guid isPermaLink="true">https://zenn.dev/ohtaman/articles/streamlit-desktop-app</guid><pubDate>Sat, 14 Dec 2024 23:18:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q20prEP4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Streamlit%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ohtaman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3cGFNNU1ua0EwU05mTWNVRE40aVBMVFoxenRJbGJ4ZkE4eXVwLWRzPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ohtaman</dc:creator></item><item><title><![CDATA[【Python】Dockerで環境構築（windows）［改訂版］]]></title><description><![CDATA[
 １．ファイル・フォルダ作成

ターミナルにてプロジェクトフォルダの作成
mkdir django_docker_project
cd django_docker_project


VScodeの起動
code .

必要なファイルとディレクトリの一括作成コマンド
必要なファイルとディレクトリを作成
# 作成するファイル名をリストで定義
$files = @(
    "Dockerfile",
    "docker-compose.yml",
    "requirements.txt",
    ".env",
    ".env.example",
    ".gitigno...]]></description><link>https://zenn.dev/code_journey_ys/articles/8a32c7c7a7debb</link><guid isPermaLink="true">https://zenn.dev/code_journey_ys/articles/8a32c7c7a7debb</guid><pubDate>Sat, 14 Dec 2024 14:33:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Q6RPSuwK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Python%25E3%2580%2591Docker%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%25EF%25BC%2588windows%25EF%25BC%2589%25EF%25BC%25BB%25E6%2594%25B9%25E8%25A8%2582%25E7%2589%2588%25EF%25BC%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yusuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QxYmU5MTc2ZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yusuke</dc:creator></item><item><title><![CDATA[スライドで3Dグラフをぐりぐりしたい]]></title><description><![CDATA[
 はじめに
PowerPointでスライドをつくっている時に，3次元のグラフを挿入しようとして困ったことはないでしょうか．
PowerPointだと難しいですが，Marpを使えば簡単にできます．

 準備：グラフをつくる
グラフはPythonでつくります．matplotlibでも3次元のグラフは作成できますが，画像形式でしか保存できないので，今回はplotlyを用います．
とりあえず例として適当なグラフを作ります．用いるデータは以下のものです（0から1の範囲で(x,y,z)の乱数の組を発生させたもの）．

data.csv
x,y,z
0.7765197834206082,0.2692...]]></description><link>https://zenn.dev/yuta_tutty/articles/229dbc5d92bf45</link><guid isPermaLink="true">https://zenn.dev/yuta_tutty/articles/229dbc5d92bf45</guid><pubDate>Sat, 14 Dec 2024 12:47:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dvuQ1BGB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E3%2581%25A73D%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2582%2592%25E3%2581%2590%25E3%2582%258A%25E3%2581%2590%25E3%2582%258A%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yuta_t%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGpYZ3hFeVlpbm9xcU16U0ZGR25aQk9IbVdKWi05VVZkNWRYV3dRaEtxWThVbTBJRXM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yuta_t</dc:creator></item><item><title><![CDATA[Python シランケド]]></title><description><![CDATA[Python 基本コマンド]]></description><link>https://zenn.dev/codelab_zero/books/python_shirankedo_kihon</link><guid isPermaLink="true">https://zenn.dev/codelab_zero/books/python_shirankedo_kihon</guid><pubDate>Sat, 14 Dec 2024 09:38:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dj-ZtK94--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9hZWUwMTE1OGFjLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>@zero</dc:creator></item><item><title><![CDATA[LLMに脆弱性を検出させる]]></title><description><![CDATA[
 脆弱性、大丈夫？
生成AIにコードを書いてもらう機会が、爆発的に増えました。
一週間程度でプロダクトを作成し、デプロイまでできてしまうスピード感です。
一方で、スピードを重視して脆弱性についておろそかになっていないでしょうか？
ここでは、Cursorを利用して、コードから脆弱性検出が可能なプロンプトをご紹介します。

 さっそくプロンプト
下記がそのプロンプトです。
「技術スタック」の箇所のみ、自分用に書き換えれば使えます。
##### 作成物 #####
webアプリケーション

##### 技術スタック #####
- React
- Django
- postgresql

#...]]></description><link>https://zenn.dev/chanpaya/articles/4baf71667e959c</link><guid isPermaLink="true">https://zenn.dev/chanpaya/articles/4baf71667e959c</guid><pubDate>Sat, 14 Dec 2024 08:16:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--x7WqlsGP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LLM%25E3%2581%25AB%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2582%2592%25E6%25A4%259C%25E5%2587%25BA%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:champaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmYmY1NGIxMjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>champaya</dc:creator></item><item><title><![CDATA[【備忘録】Django - 開発サーバの自動リロード]]></title><description><![CDATA[
 背景
開発サーバの自動リロードにはvscodeの拡張機能のLive Serverが便利だが、django-htmlではbase.htmlにheadタグやbodyタグを分けてしまうためうまく作動しなかった。
そこで、django-browser-reloadという便利な機能を見つけたので備忘録に残しておく。

 手順

 1. pythonの仮想環境内でdjango-browser-reloadをインストール

termimal
# ここでは仮想環境名をmyvenvとする。
source myvenv/bin/activate  # windowsの場合は .\myvenv\Scrip...]]></description><link>https://zenn.dev/hiro8_hiro8/articles/a1132b68703e6b</link><guid isPermaLink="true">https://zenn.dev/hiro8_hiro8/articles/a1132b68703e6b</guid><pubDate>Sat, 14 Dec 2024 08:12:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RaTqvMHB--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25E3%2580%2591Django%2520-%2520%25E9%2596%258B%25E7%2599%25BA%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiro%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjVRSzFnQVpjV2cwTFJHUXlDcFMtU19uVm5HTlVzNlgwMEN2U2dYTUFmODVMMnFBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiro</dc:creator></item><item><title><![CDATA[IceCream を AtCoder でデバッグライトとして用いてみた]]></title><description><![CDATA[
 背景
X の TL で Python の IceCream というライブラリが紹介されていて便利そうなので競技プログラミングのコードの実装中にも使ってみました。
*問題ないと思いますがコンテスト中での利用は使い方のミスも含めて自己責任でお願いします。

 🍨 IceCream とは？
私は以下の記事で紹介されていたのを目にしました。
https://qiita.com/ryosuke_ohori/items/11b2ad43f1ae50f25cf5
公式のリポジトリはこちら
https://github.com/gruns/icecream
簡単に言うと高性能の print 関数です...]]></description><link>https://zenn.dev/yamasakit/articles/02644b0e2c523b</link><guid isPermaLink="true">https://zenn.dev/yamasakit/articles/02644b0e2c523b</guid><pubDate>Sat, 14 Dec 2024 07:50:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MSbMg1Tm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:IceCream%2520%25E3%2582%2592%2520AtCoder%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E7%2594%25A8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yamasaKit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg1ZDc4NDNmZDguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamasaKit</dc:creator></item><item><title><![CDATA[宇宙からの地球観測15章 DEM]]></title><description><![CDATA[宇宙からの地球観測 15章では、DEM(Digital Elevation Model) を学びます。　12章干渉SARでは、位相の差が高度の差として計算できることを学びました。２つの時期の撮像データを使うと２時期の変化情報がだせます。
15章では同時期の複数撮像データをつかうことで高精度な３次元地図を生成することができるという内容になってます。　地球の高精度な３次元モデルが毎日更新されていく。　これは、アイディア次第、使いかたよってものすごいビジネスやツールがつくれます。　ということで基本数式をきちんと理解したいです。(この数式を理解することで　2000年代初頭では90m ほどの誤差が...]]></description><link>https://zenn.dev/kozayupapa/articles/f572a4b4cdc25e</link><guid isPermaLink="true">https://zenn.dev/kozayupapa/articles/f572a4b4cdc25e</guid><pubDate>Sat, 14 Dec 2024 06:41:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gMlZxpA4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%2587%25E5%25AE%2599%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E5%259C%25B0%25E7%2590%2583%25E8%25A6%25B3%25E6%25B8%25AC15%25E7%25AB%25A0%2520DEM%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kozayupapa%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1Y2ZkMTM5ZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kozayupapa</dc:creator></item><item><title><![CDATA[テストコードを「動作するドキュメント」にする]]></title><description><![CDATA[
 テストコードを「動作するドキュメント」にする
webアプリケーションを開発していると、仕様書とコードがどんどん乖離していく経験というのは誰しも心当たりがあるのではないかと思います。Excelで仕様書なんかを書いていたりすると、コードを変更するたびにExcelの仕様書も変更する必要があるのです。
「すでにコードを書いたのに、さらにはExcelまで書き直さないといけないなんて！」
そんな中、こちらのTDDのライブコーディング動画を拝見したところ、テストコードは「動作するドキュメント」であるとありました。
正しく構造化されたテストコードは、それそのものが仕様書になるという考え方です。このテ...]]></description><link>https://zenn.dev/pomera_15/articles/8b5761c33b3e77</link><guid isPermaLink="true">https://zenn.dev/pomera_15/articles/8b5761c33b3e77</guid><pubDate>Sat, 14 Dec 2024 03:51:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---wfu22re--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2580%258C%25E5%258B%2595%25E4%25BD%259C%25E3%2581%2599%25E3%2582%258B%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2580%258D%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pomera_15%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmMDhkM2YxZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pomera_15</dc:creator></item><item><title><![CDATA[PyMOLを通してPubChemから化学構造情報を取得する]]></title><description><![CDATA[PyMOLでSMILESを扱うことで、タンパクや核酸のような高分子だけでなく、低分子や天然物のような化学構造を描画する方法を紹介しました。
https://zenn.dev/keetane/articles/9b4d52da17191f
例えば会社とかで立体構造をサクッと確認したい時に便利だったりしますが、承認薬だったり有名どころの化合物はPublicのデータベースからAPIで取ってきた方が早くて楽で正確です。　　
SciFinderやReaxysのような商用のデータベースには基本的には敵わないんですが、有名どころをサクッと扱う分にはOpen Souceのデータベースで十分です。
シンプ...]]></description><link>https://zenn.dev/keetane/articles/0fe359840f9c6d</link><guid isPermaLink="true">https://zenn.dev/keetane/articles/0fe359840f9c6d</guid><pubDate>Fri, 13 Dec 2024 19:54:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yhA4LEDT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PyMOL%25E3%2582%2592%25E9%2580%259A%25E3%2581%2597%25E3%2581%25A6PubChem%25E3%2581%258B%25E3%2582%2589%25E5%258C%2596%25E5%25AD%25A6%25E6%25A7%258B%25E9%2580%25A0%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Keetane%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc1YzhkYjk2ODguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Keetane</dc:creator></item></channel></rss>