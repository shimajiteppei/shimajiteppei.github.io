<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-14T17:24:17+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092404</id>
    <published>2025-10-14T17:24:17+09:00</published>
    <updated>2025-10-14T17:50:11+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/b1cb3109f965a3f59f41"/>
    <url>https://qiita.com/nozomi2025/items/b1cb3109f965a3f59f41</url>
    <title>【Kotlin】「Kotlin I/O × Coroutine」 — 非同期ファイル読み書きと Channel の活用</title>
    <content type="text">概要
従来の Kotlin I/O は同期的（blocking）な設計が多く、
大きなファイルやネットワーク I/O を扱うとスレッドがブロックされがちです。
しかし Kotlin の Coroutine（コルーチン） を組み合わせることで、
ノンブロッキングな非同期I/...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092386</id>
    <published>2025-10-14T16:46:25+09:00</published>
    <updated>2025-10-14T16:46:25+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/3ad52bbc6ab2806f751a"/>
    <url>https://qiita.com/nozomi2025/items/3ad52bbc6ab2806f751a</url>
    <title>【Kotlin】Kotlin I/O（入出力）徹底解説</title>
    <content type="text">概要
Kotlin の I/O（入出力）は、ファイルの読み書き・標準入力・標準出力などを扱うための API 群です。
Kotlin では Java の API（java.io や java.nio.file）をそのまま利用できますが、より簡潔で安全な書き方を提供する拡張関...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092380</id>
    <published>2025-10-14T16:25:17+09:00</published>
    <updated>2025-10-14T16:25:17+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/cc77909d8f2748080c7f"/>
    <url>https://qiita.com/nozomi2025/items/cc77909d8f2748080c7f</url>
    <title>【Kotlin】kotlinx.serialization × Retrofit で型安全な API 層を構築する</title>
    <content type="text">1. なぜ kotlinx.serialization なのか

KMP 対応：JVM/Android/JS/Nativeで同じモデルを扱える

ゼロリフレクション：Moshi/Gsonより軽量／高速になりやすい

ポリモーフィズムや@SerialName等の言語統合的...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092351</id>
    <published>2025-10-14T15:25:21+09:00</published>
    <updated>2025-10-14T15:25:21+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/e7decf9b461dcba5ae6c"/>
    <url>https://qiita.com/nozomi2025/items/e7decf9b461dcba5ae6c</url>
    <title>【Kotlin】Kotlin シリアライゼーション徹底解説</title>
    <content type="text">概要
シリアライゼーション（Serialization） とは、
オブジェクト（クラスのインスタンスなど）の状態を
保存や転送が可能な形式（バイト列・JSONなど） に変換する技術のことです。
そしてその逆、データからオブジェクトを復元することを
デシリアライゼーション（...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
