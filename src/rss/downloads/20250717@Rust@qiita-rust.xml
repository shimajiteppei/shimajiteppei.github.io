<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/rust/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/rust/feed"/>
  <title>Rustタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでRustタグが付けられた新着記事</description>
  <updated>2025-07-17T18:53:25+09:00</updated>
  <link>https://qiita.com/tags/rust</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2055079</id>
    <published>2025-07-17T18:53:25+09:00</published>
    <updated>2025-07-17T18:53:25+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/neko_the_shadow/items/5d068f76255d93cdbd04"/>
    <url>https://qiita.com/neko_the_shadow/items/5d068f76255d93cdbd04</url>
    <title>イテレータの最初のN個・最後のN個を取得する</title>
    <content type="text">イテレータの最初のN個の要素を取得するにはtakeを利用します。
let a = vec![0, 1, 2, 3, 4, 5];
let mut iter = a.iter().take(3);
assert_eq!(iter.next(), Some(&amp;amp;0));
asse...</content>
    <author>
      <name>neko_the_shadow</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2055078</id>
    <published>2025-07-17T18:52:10+09:00</published>
    <updated>2025-07-17T18:52:10+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/neko_the_shadow/items/bff28172c86b0789fee1"/>
    <url>https://qiita.com/neko_the_shadow/items/bff28172c86b0789fee1</url>
    <title>可変長の積を取るマクロ</title>
    <content type="text">Rustでは関数で可変長引数を直接扱うことができないため、マクロを使って実現する必要があります。この記事では、可変長の引数を受け取って積を求めるマクロを紹介し、競技プログラミング向けに改造する方法も合わせて解説します。

可変長引数の積を求める基本マクロ
まずは、受け取った...</content>
    <author>
      <name>neko_the_shadow</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2055072</id>
    <published>2025-07-17T18:48:01+09:00</published>
    <updated>2025-07-17T18:48:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/neko_the_shadow/items/0e9ff2ed00fdc9dea5b7"/>
    <url>https://qiita.com/neko_the_shadow/items/0e9ff2ed00fdc9dea5b7</url>
    <title>Rustでchar型の値が数字かどうかを判定する</title>
    <content type="text">char型の値がASCII の数字 (0-9) かどうかを判定する方法を紹介します (正規表現を除く)。
1. is_ascii_digit を利用する
個人的にもっともスマートだと思います。
fn main() {
    assert!('0'.is_ascii_dig...</content>
    <author>
      <name>neko_the_shadow</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2055052</id>
    <published>2025-07-17T17:56:54+09:00</published>
    <updated>2025-07-17T17:56:54+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/Povo43/items/9496d65e3b14235058cb"/>
    <url>https://qiita.com/Povo43/items/9496d65e3b14235058cb</url>
    <title>RustでのWinAPI叩きの勘所</title>
    <content type="text">こんにちは。Povoです。
今回はrustでwinAPIを叩く方法について話します。
Windows-rs自体の特徴以外も書いていたりしますが目をつぶっていてください。
（rust初心者なので当たり前のことを威張り腐って説明してるかもしれないです）

使用するクレート

w...</content>
    <author>
      <name>Povo43</name>
    </author>
  </entry>
</feed>
