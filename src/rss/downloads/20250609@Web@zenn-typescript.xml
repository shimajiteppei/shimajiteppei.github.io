<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 09 Jun 2025 06:08:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[MastraでAIエージェントとチャットしてみる]]></title><description><![CDATA[
 背景
全社的にAI活用が進んでいます。
私のチームでも週次でAI活用について共有する機会があります。
これに便乗してAIエージェントがどのようになっているのか概要を掴む為に今回TS製のAIエージェントを触ってみます。

 Mastraとは
https://mastra.ai/ja/docs

オープンソースのTypeScriptエージェントフレームワーク
AIアプリケーションや機能を構築するために必要なプリミティブを提供するように設計されています

プリミティブとは

複雑な構造を形作る際の構成要素として使われる、単純あるいは基本的な構造や要素

https://e-words.jp...]]></description><link>https://zenn.dev/immedio/articles/22d3854ce991c4</link><guid isPermaLink="true">https://zenn.dev/immedio/articles/22d3854ce991c4</guid><pubDate>Mon, 09 Jun 2025 05:31:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KUCHO5pv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mastra%25E3%2581%25A7AI%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A8%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yamatai12%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RlZjc0OTgxOWYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:immedio%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwYTAzNmI1OTAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamatai12</dc:creator></item><item><title><![CDATA[Jestを使ったテスト手法まとめ]]></title><description><![CDATA[
 はじめに
Jestを使ったテストに触れていく中で公式サイトも参照したり記事を見て理解したりとしていましたが
自分で記事にすることで理解が深まったり公式サイトを閲覧しにいったりするため、
記憶として定着する面もあるのかなと思いましたので自身の備忘録としてまとめたいと思います。
認識ミスありましたら教えていただけますと幸いです。

 jest.fn()
jest.fnは新しいモック関数を作成するために使用されます。モック関数はテスト中に呼び出された回数や引数を記録するほか、任意の実装を提供することもできます。
const mockFn = jest.fn();//jestの関数として定義...]]></description><link>https://zenn.dev/sonicmoov/articles/d499515b602c38</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/d499515b602c38</guid><pubDate>Mon, 09 Jun 2025 04:35:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KnE9tXqW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Jest%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E6%2589%258B%25E6%25B3%2595%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:n.kawashima%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3BkQkZZUGlFVEIwUzV6NWdBV2F2M0FEWUxWVG9tblJqSW0ybl93QjVaRGdrUm1nPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>n.kawashima</dc:creator></item><item><title><![CDATA[DI（依存性注入）の基礎を理解する【Part2】〜手動new地獄からの脱却！DIコンテナ入門〜]]></title><description><![CDATA[
 はじめに
前回の記事でDIの基本概念については理解できたかと思います。
前回の記事では…

DIの基本は「使うものは自分で作らず、外からもらう」
依存の制御を外に出すことで、設計が柔軟でテストしやすくなる
interfaceと組み合わせることで、本当に強力な疎結合設計が可能になる

みたいな話をしましたね。
さて、DIを使った事で疎結合な設計が可能になった訳ですが、では、DIが複雑な構造になってきた場合どんな事になってしまうのでしょうか？

 複雑なDIになってしまった時
まず、下記のクラス構成を考えてみましょう

AppController：アプリの入口
NotificationS...]]></description><link>https://zenn.dev/manntera/articles/fab5e47e9cce0e</link><guid isPermaLink="true">https://zenn.dev/manntera/articles/fab5e47e9cce0e</guid><pubDate>Mon, 09 Jun 2025 03:08:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--46-1CmFl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DI%25EF%25BC%2588%25E4%25BE%259D%25E5%25AD%2598%25E6%2580%25A7%25E6%25B3%25A8%25E5%2585%25A5%25EF%25BC%2589%25E3%2581%25AE%25E5%259F%25BA%25E7%25A4%258E%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%25E3%2580%2590Part2%25E3%2580%2591%25E3%2580%259C%25E6%2589%258B%25E5%258B%2595new%25E5%259C%25B0%25E7%258D%2584%25E3%2581%258B%25E3%2582%2589%25E3%2581%25AE%25E8%2584%25B1%25E5%258D%25B4%25EF%25BC%2581DI%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E5%2585%25A5%25E9%2596%2580%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BE%25E3%2582%2593%25E3%2581%25A6%25E3%2582%2589%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25B8%25E3%2582%25AA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc1NWJmOTI0MDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>まんてらスタジオ</dc:creator></item><item><title><![CDATA[Web 上で Cursor や Copilot のようなタブ入力補完を実装する]]></title><description><![CDATA[Cursor[1] や Copilot、便利ですよね！ これらのツールが提供する大きな機能として入力補完が挙げられ、人間が雑に書いたコードを修正してくれたり、ある箇所を修正すると他の箇所もまとめて修正[2]してくれたりします[3]。また、複雑なショートカットを必要とせず、それらの提案を Tab キーの一押しで適用／棄却できる点も優れた UX であると感じています。
さて、このような機能が他の様々なエディタ、特に Web サイトの入力フォームに実装されれば大変有用だと感じたため、React を用いて入力補完を再現してみることにしました。やや複雑 GUI みがあったので、その際の実装の知見を...]]></description><link>https://zenn.dev/inaniwaudon/articles/2445ff6731afef</link><guid isPermaLink="true">https://zenn.dev/inaniwaudon/articles/2445ff6731afef</guid><pubDate>Sun, 08 Jun 2025 23:51:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Zlp3xtAG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Web%2520%25E4%25B8%258A%25E3%2581%25A7%2520Cursor%2520%25E3%2582%2584%2520Copilot%2520%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AA%25E3%2582%25BF%25E3%2583%2596%25E5%2585%25A5%25E5%258A%259B%25E8%25A3%259C%25E5%25AE%258C%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%25AA%25E3%2581%25AB%25E3%2582%258F%25E3%2581%2586%25E3%2581%25A9%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0YjlhYjgzNmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いなにわうどん</dc:creator></item><item><title><![CDATA[TypeScript 5.6 の型システムに完全敗北した深夜3時の記録]]></title><description><![CDATA[TypeScript 5.6 にアップグレードしたら、今まで動いていたコードが真っ赤になった。型エラーの海。コンパイルが通らない。深夜3時、モニターの前で頭を抱えた。結局、新しい型システムの挙動を理解するのに8時間かかった。その戦いの記録を残しておく。

 事件の発端：何気ないアップグレード
金曜の夕方5時。軽い気持ちで TypeScript をアップグレードした。
{
  "devDependencies": {
    "typescript": "^5.6.0"
  }
}
npm install して、いつものように npm run build。そしたら画面が真っ赤になった。
F...]]></description><link>https://zenn.dev/unikoukokun/articles/5f39fc9bb0fbc3</link><guid isPermaLink="true">https://zenn.dev/unikoukokun/articles/5f39fc9bb0fbc3</guid><pubDate>Sun, 08 Jun 2025 21:30:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZUc4QAyN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25205.6%2520%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AB%25E5%25AE%258C%25E5%2585%25A8%25E6%2595%2597%25E5%258C%2597%25E3%2581%2597%25E3%2581%259F%25E6%25B7%25B1%25E5%25A4%259C3%25E6%2599%2582%25E3%2581%25AE%25E8%25A8%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25B3%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmYjA3NjA5OTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ユニコ🦄</dc:creator></item><item><title><![CDATA[MCP Server - Streamable HTTP 最小構成]]></title><description><![CDATA[
 はじめに
本日、MCP ServerのStreamable HTTPの最小構成版をGitHubに公開しました！
https://github.com/Masa1984a/Minimum_MCP_StreamableHTTP
現在よく見るMCPのほとんどは、STDIOという仕組みをとっています。
これはMCP Serverをローカルにおいて、ファイル処理や外部サービスとつなぐイメージです。
一方で、Streamable HTTPはリモート上にMCP Serverを置いて外部サービスとつなぐイメージで、LLMやAIエージェントサービスから、MCP Server経由で複雑な検索やAIエージ...]]></description><link>https://zenn.dev/acntechjp/articles/16b36cbf0347e6</link><guid isPermaLink="true">https://zenn.dev/acntechjp/articles/16b36cbf0347e6</guid><pubDate>Sun, 08 Jun 2025 13:23:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PuQXvpgS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%2520Server%2520-%2520Streamable%2520HTTP%2520%25E6%259C%2580%25E5%25B0%258F%25E6%25A7%258B%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B5%25E3%2583%25B3%2520%2528Masanori%2520Yos...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2ZDA4MDY5ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Accenture%2520Japan%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MzkwNDBmYjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッサン (Masanori Yoshida)</dc:creator></item><item><title><![CDATA[LambdaからGen2 Client経由で呼べるようになって便利になった話]]></title><description><![CDATA[
 🤯 Amplfiy Gen2を利用したLambdaの中で、backend/dataにアクセスしたいが大変問題

Gen2 Userなら必ずぶつかる壁の1つでもあるんじゃないかなと思ってる問題で、defineFunctionで定義した、lambdaからconst schema = a.schemaのデータに対してデータ取得したい場合などがあった場合、swift clientでよくやる、コードを生成して、aws-appsyncを利用して、AppSync Clientを叩いて実装ということが必要でした。
これらを利用したユースケースとして、マルチテナントで運用してるSaasで利用したい場合...]]></description><link>https://zenn.dev/timimamushi/articles/91575f94b0d600</link><guid isPermaLink="true">https://zenn.dev/timimamushi/articles/91575f94b0d600</guid><pubDate>Sun, 08 Jun 2025 13:09:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--g4OD7Ru5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Lambda%25E3%2581%258B%25E3%2582%2589Gen2%2520Client%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7%25E5%2591%25BC%25E3%2581%25B9%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%25A6%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:timimamushi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hDcnRXZ0tvMFZHRWxuX3I3OFVKejBhcEN5ekIwRi1DZEJrT1QzVVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>timimamushi</dc:creator></item><item><title><![CDATA[TypeScript × Next.jsで作るマルチツールアプリ 〜型安全・UI統一・機能追加まで全部TypeScriptでやってみた～]]></title><description><![CDATA[
 １．はじめに
「毎日使いたい開発ツールを1ヶ所にまとめたい！」
そんな思いから、WebアプリをTypeScript＋React＋Next.jsで開発しました。

このWEBアプリでは複数の開発系ツールをまとめて提供しています。

マークダウンエディタ
JSONフォーマッター
XMLフォーマッター
パスワードジェネレーター
QRコードジェネレータ
JSON⇔YAMLコンバーター
CSV⇔JSONコンバータ
サイトマップジェネレータ
テキストカウンター

※現時点では機能数はまだ少なく今後追加予定です🙇‍♂️

 ■ なぜ作ったのか？
日々の開発現場で「サクッと使えるWebツール」がある...]]></description><link>https://zenn.dev/is0383kk/articles/a9fa43011abeda</link><guid isPermaLink="true">https://zenn.dev/is0383kk/articles/a9fa43011abeda</guid><pubDate>Sun, 08 Jun 2025 11:54:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7fqcEsGf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25C3%2597%2520Next.js%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2520%25E3%2580%259C%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2583%25BBUI%25E7%25B5%25B1%25E4%25B8%2580%25E3%2583%25BB%25E6%25A9%259F%25E8%2583%25BD%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%25BE%25E3%2581%25A7%25E5%2585%25A8%25E9%2583%25A8TypeSc...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A8%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5ZDIwMDdjOTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヨ</dc:creator></item><item><title><![CDATA[claude code でローカルなMCPサーバーを叩けるようにする]]></title><description><![CDATA[claude code 安くて便利。
自前 MCP を大量に持ってると、手元に用意しておいた MCP サーバーに繋ぎたくなります。
以下のドキュメントによると、 claude --mcp-config=... でローカルな MCP サーバーを叩けるみたいです。
https://docs.anthropic.com/ja/docs/claude-code/settings
以下、claude code に手元の MCP サーバーを登録する例です。

 ローカル MCP につなぐ
MCP サーバー実装を書きます。
これは指定した URL を本文抽出して markdown で取得する実装です。...]]></description><link>https://zenn.dev/mizchi/articles/claude-local-mcp-server</link><guid isPermaLink="true">https://zenn.dev/mizchi/articles/claude-local-mcp-server</guid><pubDate>Sun, 08 Jun 2025 09:32:52 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--miyzM-f0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:claude%2520code%2520%25E3%2581%25A7%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25AAMCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E5%258F%25A9%25E3%2581%2591%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mizchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liclRHT052Z3d3ay1fNGxlcVk4TGNGSlNuX0FoWnpEWVlKaXJNcWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mizchi</dc:creator></item><item><title><![CDATA[TypeScriptでユニークな配列か型チェックした]]></title><description><![CDATA[
 始めに
Array&lt;'A' | 'B' | 'C'&gt;と型定義した場合、AかBかCのどれかを使った配列であることを制約づけることは可能ですが、Aが複数個設定できてしまい、ユニークな配列として初期化することはできません。
以前['A', 'B', 'C']のようなタプル型にしたら実現できるのでは？と思い、以下のような型定義をしたことがあります。

全パターンのタプルに変換する型
type UniqueArray&lt;T, U = T&gt; = [T] extends [never]
  ? []
  : T extends any
    ? [T, ...UniqueA...]]></description><link>https://zenn.dev/numa_san/articles/cbbc8bb9bcb44a</link><guid isPermaLink="true">https://zenn.dev/numa_san/articles/cbbc8bb9bcb44a</guid><pubDate>Sun, 08 Jun 2025 08:48:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rFeZsmdY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%258B%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AA%25E9%2585%258D%25E5%2588%2597%25E3%2581%258B%25E5%259E%258B%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AC%25E3%2581%25BE%25E3%2581%2595%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5MWZjYWE2NDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぬまさん</dc:creator></item><item><title><![CDATA[自作エージェントに喋りかけるだけでアプリ開発｜MastraとClaude Code Actionで音声バイブコーディング]]></title><description><![CDATA[今回はGitHub ActionsのClaude Code連携を試します。
また、音声入力でIssue作成とかできれば、今一番アツいClaude CodeでどこでもラフにVibe Codingができるんじゃないかと思ったのでやってみます。

 発端
Claude Codeの勉強会でこんなこと👇を言ったので、言ったらやるの精神でやります。
https://x.com/_cityside/status/1930107043396104563
実際はGitHubのMCPサーバ設定したClaude Desktopに、なんかのツールで音声入力するだけでも実現できると思うのですが、以前からMastr...]]></description><link>https://zenn.dev/yokomachi/articles/20250607_voice2issue</link><guid isPermaLink="true">https://zenn.dev/yokomachi/articles/20250607_voice2issue</guid><pubDate>Sun, 08 Jun 2025 08:13:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AVg5apxe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E5%2596%258B%25E3%2582%258A%25E3%2581%258B%25E3%2581%2591%25E3%2582%258B%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25EF%25BD%259CMastra%25E3%2581%25A8Claude%2520Code%2520Action%25E3%2581%25A7%25E9%259F%25B3%25E5%25A3%25B0%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2596%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yokomachi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlNGQ5NzI1ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yokomachi</dc:creator></item><item><title><![CDATA[SpiceDB入門 - ゼロから学ぶ次世代認可システムの設計と実装]]></title><description><![CDATA[SpiceDBとはGoogleのZanzibarをベースに開発された認可システムを構築するためのオープンソースのソフトウェアです。
SpiceDBは独自のスキーマ言語を使い、リソースとサブジェクトとの関係やpermissionを記述することができるため非常に変更に強く柔軟に認可システムを構築することができます。
また、SpiceDBはクラスター構成の分散システムになっており、高可用性とスケーラビリティを持つためパフォーマンスにも優れています。
しかし、まだ本書を執筆する時点では情報が少なく特に国内での採用事例は非常に少ないです。
本書ではSpiceDBの概要や基本的な使い方、実際にSpiceDBを使って認可システムを構築する方法を解説します。
本書を通してSpiceDBや認可システムの実装について興味を持っていただける方がいたら幸いです。
]]></description><link>https://zenn.dev/jy8752/books/spicedb-lesson</link><guid isPermaLink="true">https://zenn.dev/jy8752/books/spicedb-lesson</guid><pubDate>Sun, 08 Jun 2025 06:33:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--N4sjNSez--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci81MTk2NWZlZDZiLnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ぱんだ</dc:creator></item><item><title><![CDATA[【初心者向け】なぜ副作用がある関数を書いてはいけないか？ ~~ 引数の変更を例に ~~]]></title><description><![CDATA[
 この記事を書くことになった背景
~~ 先日の出来事 ~~
新卒2ヶ月目の後輩くん「コード書けたのでレビューお願いします！」
私「OK！後で見るよ！」
後輩くん「お願いします！」
~~ しばらくして ~~
私「前の仕事片付いたから後輩くんのレビューするか〜」
const removeAttributes = (obj, removeTargetKeys) =&gt; {
    const keys = Object.keys(obj);
    for (const k of keys) {
        const value = obj[k];
        if (remo...]]></description><link>https://zenn.dev/dhik/articles/af3e2f778c0161</link><guid isPermaLink="true">https://zenn.dev/dhik/articles/af3e2f778c0161</guid><pubDate>Sun, 08 Jun 2025 06:24:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--C9OVSIaX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591%25E3%2581%25AA%25E3%2581%259C%25E5%2589%25AF%25E4%25BD%259C%25E7%2594%25A8%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%25E3%2581%258B%25EF%25BC%259F%2520%7E%7E%2520%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E3%2582%2592%25E4%25BE%258B%25E3%2581%25AB%2520%7E%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Itsuki%2520Onishi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FDTlBFdS00SWxVTVhyZWx1X1M5MW1BaXNHV0tlRlVReWJvMVRVa08xWFEzPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Itsuki Onishi</dc:creator></item><item><title><![CDATA[TypeScript: オプショナルチェイニング vs 型ガード 使い分けガイド]]></title><description><![CDATA[TypeScriptでオプショナルプロパティを安全に扱う際、オプショナルチェイニング（?.） と 型ガード のどちらを使うべきか迷うことはありませんか？
この記事では、それぞれの特徴と適切な使い分けについて、コード例を交えて解説します。

 オプショナルチェイニング（?.）とは
オプショナルチェイニングは、プロパティが存在しない可能性がある場合に安全にアクセスできる演算子です。

 基本的な使用例
interface User {
  name: string;
  profile?: {
    age: number;
    email: string;
  };
}

const...]]></description><link>https://zenn.dev/h_tatsuoka/articles/2b28b973473b8a</link><guid isPermaLink="true">https://zenn.dev/h_tatsuoka/articles/2b28b973473b8a</guid><pubDate>Sun, 08 Jun 2025 04:16:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TuZMURWl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%253A%2520%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%258A%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25A7%25E3%2582%25A4%25E3%2583%258B%25E3%2583%25B3%25E3%2582%25B0%2520vs%2520%25E5%259E%258B%25E3%2582%25AC%25E3%2583%25BC%25E3%2583%2589%2520%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HTatsuoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwOTY0NTE5YTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HTatsuoka</dc:creator></item><item><title><![CDATA[Button の disabled だけで安心してはいけない]]></title><description><![CDATA[
 disabledだけで安心していませんか？Reactでのボタン制御に潜む落とし穴

 はじめに
Reactでボタンを一時的に無効化するには、disabled属性を使うのが定番です。
例えば、送信中に二重クリックを防ぐための実装は次のようになります。
&lt;button disabled={isSubmitting}&gt;送信&lt;/button&gt;
一見するとこれで十分に思えるかもしれません。
しかし、実はこの実装だけでは不十分なケースもあるのです。


 disabledは見た目だけの制御
disabled属性を設定すれば、確かにUI上ではボタンが押せなくなります。
しか...]]></description><link>https://zenn.dev/qluqlu/articles/44cb2e37d312d9</link><guid isPermaLink="true">https://zenn.dev/qluqlu/articles/44cb2e37d312d9</guid><pubDate>Sun, 08 Jun 2025 03:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--GeZ0ZW8f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Button%2520%25E3%2581%25AE%2520disabled%2520%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E5%25AE%2589%25E5%25BF%2583%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25AB%25E3%2582%25AF%25E3%2583%25AB%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0Mjg1NWNiMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クルクル</dc:creator></item><item><title><![CDATA[TypeScriptの Branded Types でドメインを守り、コードの安全性を向上させる]]></title><description><![CDATA[
 🚀 そのid、本当に安全ですか？
こんにちは！TypeScriptで開発をしている皆さん。
突然ですが、こんな経験はありませんか？

「このid: stringって、何のIDだっけ…？ userId？ それともorderId？」
レビューで「あ、ここの関数に、間違えてproductIdを渡しちゃってますね…」と指摘された。

userIdとcompanyId、どちらもstring型だから、間違えて代入してもコンパイラが教えてくれず、実行時エラーに…。

TypeScriptの基本的な型（string, numberなど）は非常に便利ですが、
時として、こうした「型の意図が曖昧」なこと...]]></description><link>https://zenn.dev/watasho/articles/bc5714b75abd07</link><guid isPermaLink="true">https://zenn.dev/watasho/articles/bc5714b75abd07</guid><pubDate>Sun, 08 Jun 2025 02:13:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oBPe99c8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%2520Branded%2520Types%2520%25E3%2581%25A7%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%2588%25E3%2582%258A%25E3%2580%2581%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E5%25AE%2589%25E5%2585%25A8%25E6%2580%25A7%25E3%2582%2592%25E5%2590%2591%25E4%25B8%258A%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:watasho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHZHcjFkZkVjd2llaGF2ell4WEVGT043OFBFVlBLb1QtSlQ2S0lmNFVBb2c0PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>watasho</dc:creator></item><item><title><![CDATA[CSVの型カオスに立ち向かう、TypeScriptでの完全型安全な扱い方]]></title><description><![CDATA[
 はじめに
CSVファイルをTypeScriptで型安全に扱う方法について、具体的な実装を交えながらご紹介します。
この記事で紹介するコードのデモと実際のソースコードはこちらから確認できます。
https://exp.bmth.dev/csv

 CSVの悩み：なぜJSONのようにいかないのか
JSONファイルは、TypeScriptプロジェクトにおいて非常に扱いやすい存在です。
import data from './data.json'のように書くだけで、TypeScriptが型を推論し、中身を直接オブジェクトとして利用できます。
とても便利ですよね。
しかし、CSVファイルではそ...]]></description><link>https://zenn.dev/bmth/articles/ts-typed-csv</link><guid isPermaLink="true">https://zenn.dev/bmth/articles/ts-typed-csv</guid><pubDate>Sat, 07 Jun 2025 19:01:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_qaXbkTC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CSV%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25AB%25E3%2582%25AA%25E3%2582%25B9%25E3%2581%25AB%25E7%25AB%258B%25E3%2581%25A1%25E5%2590%2591%25E3%2581%258B%25E3%2581%2586%25E3%2580%2581TypeScript%25E3%2581%25A7%25E3%2581%25AE%25E5%25AE%258C%25E5%2585%25A8%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AA%25E6%2589%25B1%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2598%25E3%2582%2587%25E3%2581%2586%25E3%2581%2592%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzYzZTk3NzVhNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>じょうげん</dc:creator></item><item><title><![CDATA[Next.js,Nust.js,NestJSの違いを整理する]]></title><description><![CDATA[
 時間ない人向け比較表



フレームワーク
主な用途
ベース技術
主な特徴




Next.js
フロントエンド（ReactアプリのSSR/SSG）
React + Node.js
ファイルベースルーティング、ISR、App Router、Vercelとの親和性


Nuxt.js
フロントエンド（VueアプリのSSR/SSG）
Vue.js + Node.js
自動ルーティング、柔軟な設定、Vue3対応、軽量な構成


NestJS
バックエンド（API、マイクロサービス）
Node.js + TypeScript
モジュール構造、依存性注入（DI）、Angular風アーキテクチ...]]></description><link>https://zenn.dev/yamayaman/articles/6914665e6de54f</link><guid isPermaLink="true">https://zenn.dev/yamayaman/articles/6914665e6de54f</guid><pubDate>Sat, 07 Jun 2025 13:59:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H3G_pMJt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%252CNust.js%252CNestJS%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yamayaman%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJlMGFkMTM0MjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yamayaman</dc:creator></item><item><title><![CDATA[Vibe Codingした後に、Claude Codeと学習しよう！]]></title><description><![CDATA[
 はじめに
先日、MCP (Model Context Protocol) ServerのStreamable HTTPトランスポートを最小構成で実装しました。もちろん、Claude Codeと一緒に！ここで生成されたソースコード群(プロジェクト)について、Claude Codeと対話しながら、Node.jsやTypeScript、Dockerの理解を深めました。
Vibe Codingだけではもったいないと思っていて、Claude Codeと一緒に生成したアウトプットを見ていくと学びが多くスキルアップに繋がるのではと！
具体的なやり取りを記事にしました。私の質問の仕方など参考になると...]]></description><link>https://zenn.dev/acntechjp/articles/59e657e90d1c50</link><guid isPermaLink="true">https://zenn.dev/acntechjp/articles/59e657e90d1c50</guid><pubDate>Sat, 07 Jun 2025 13:18:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RW1R_poN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vibe%2520Coding%25E3%2581%2597%25E3%2581%259F%25E5%25BE%258C%25E3%2581%25AB%25E3%2580%2581Claude%2520Code%25E3%2581%25A8%25E5%25AD%25A6%25E7%25BF%2592%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B5%25E3%2583%25B3%2520%2528Masanori%2520Yos...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2ZDA4MDY5ODcuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Accenture%2520Japan%2520%2528%25E6%259C%2589%25E5%25BF%2597%2529%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU5MzkwNDBmYjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッサン (Masanori Yoshida)</dc:creator></item><item><title><![CDATA[Claude Codeを使って自分用のプロトタイプ開発環境を整理した]]></title><description><![CDATA[プロトタイプ開発環境というのは、雑に思いついたwebアプリを素早く作成するための環境のことで1年半くらい前にもこういう記事を書いた。
https://zenn.dev/razokulover/articles/7653ef0336db77
個人開発やサイドプロジェクトで「ちょっとしたアイデアを形にしたい」というときになんかゼロから環境構築するのは面倒だし、かといって適当に作ると後々メンテナンスが大変になる。
以前はViteを使って簡単なプロトタイプを作っていたが最近のAI Codingの進化によりプロトタイプ以上にしっかり動くものまで簡単に作れるようになってきた。そうなるとpure vi...]]></description><link>https://zenn.dev/razokulover/articles/7f4b4d21622bda</link><guid isPermaLink="true">https://zenn.dev/razokulover/articles/7f4b4d21622bda</guid><pubDate>Sat, 07 Jun 2025 10:35:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9c2gB37H--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%2520Code%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E8%2587%25AA%25E5%2588%2586%25E7%2594%25A8%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2588%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2597%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:YuheiNakasaka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kzeF9ZT3A4VnMzd2p0d1QweXJBb19CVW9WXzFZZnNmSEZXbVpmPXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>YuheiNakasaka</dc:creator></item></channel></rss>