<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-15T18:52:12+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092853</id>
    <published>2025-10-15T18:52:12+09:00</published>
    <updated>2025-10-15T18:52:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/96263b32105cf8285dfe"/>
    <url>https://qiita.com/nozomi2025/items/96263b32105cf8285dfe</url>
    <title>【Kotlin】Kotlin コルーチンコンテキスト（CoroutineContext）徹底解説</title>
    <content type="text">はじめに
コルーチンは軽量スレッドのように見えますが、実際には
「コンテキスト（CoroutineContext）」という仕組みで管理されています。

コルーチンは「どのスレッドで」「どんなジョブとして」「どんなルールで」動くのか
→ それをすべて決めるのが Corout...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092843</id>
    <published>2025-10-15T18:24:26+09:00</published>
    <updated>2025-10-15T18:24:26+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/b55a95591a1b24e41051"/>
    <url>https://qiita.com/nozomi2025/items/b55a95591a1b24e41051</url>
    <title>【Kotlin】launch × async / await × withContext の使い分け</title>
    <content type="text">はじめに
Kotlin のコルーチンでは、非同期処理を簡潔に書ける3つの主要関数があります：

関数
戻り値
用途
結果の取得方法

launch
Job
戻り値が不要な処理
.join()

async
Deferred
並列に計算・取得したい処理
....</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092837</id>
    <published>2025-10-15T18:08:12+09:00</published>
    <updated>2025-10-15T18:08:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/c24894b5b59930644311"/>
    <url>https://qiita.com/nozomi2025/items/c24894b5b59930644311</url>
    <title>【Kotlin】Kotlin の `launch` 徹底解説</title>
    <content type="text">はじめに
―― コルーチンの基本ユニット「Job」で管理する非同期実行 ――
launch は、Kotlin のコルーチンで非同期タスクを開始するための最も基本的な関数です。
特に「結果が不要な処理」に適しています。

「裏で動かしたいけど戻り値はいらない」
そんなときに...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2092828</id>
    <published>2025-10-15T17:54:31+09:00</published>
    <updated>2025-10-15T17:54:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/5239e8e05594822bf50a"/>
    <url>https://qiita.com/nozomi2025/items/5239e8e05594822bf50a</url>
    <title>【Kotlin】Kotlin の `async / await` 徹底解説</title>
    <content type="text">はじめに

―― 並行処理でアプリを高速化するコルーチンの真髄 ――

Kotlin のコルーチン（Coroutine）は、非同期処理をシンプルかつ安全に書ける仕組みです。
その中でも特に重要な構文が async / await。
これを使うと、複数の処理を並行して実行し...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
