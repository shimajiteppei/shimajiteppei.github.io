<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 04 Jul 2025 06:38:54 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[useEffectの使い方について]]></title><description><![CDATA[
 useEffectとは
Reactの副作用フック。コンポーネントのライフサイクルに応じて処理を実行する。

 基本構文
useEffect(() =&gt; {
  // 実行したい処理
}, [依存配列]);

 実行タイミングのパターン

 1. 毎回実行（依存配列なし）
useEffect(() =&gt; {
  console.log('レンダリング毎に実行');
  // APIコール、DOM操作など
});


実行タイミング: 毎回レンダリング後

用途: あまり使わない（パフォーマンス問題）


 2. マウント時のみ実行（空の依存配列）
useEffect(() ...]]></description><link>https://zenn.dev/shogo/articles/b0bcc7cbed3644</link><guid isPermaLink="true">https://zenn.dev/shogo/articles/b0bcc7cbed3644</guid><pubDate>Fri, 04 Jul 2025 06:06:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ym5PPZBu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:useEffect%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shogo.yamada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxNEFZQWpMeDhSUzhxZmFZSjlzaXJ2VXNDQkpxVUFDVmVHRXNndWc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shogo.yamada</dc:creator></item><item><title><![CDATA[【Next.js】ホットリロード（Fast Refresh）が効かない！？それ、メモ化が原因かも]]></title><description><![CDATA[こんにちは!
株式会社Sally 新人エンジニアの @haruten です♪
私たち株式会社Sallyでは、マーダーミステリーをスマホやPCで遊べるアプリ「ウズ」や、マーダーミステリーを制作してウズ上で公開・プレイできるエディターツール「ウズスタジオ」などを開発・運営しています。
https://sally-inc.jp/
弊社で複数のNext.jsプロジェクトを開発している中で、ホットリロード（以下、Fast Refresh）のパフォーマンスが大きく低下する問題が発生しました。
本記事では、その原因と対応策をまとめてご紹介します。
※ 本記事で扱う事象は、Next.js 15.3.3 ...]]></description><link>https://zenn.dev/uzu_tech/articles/fb415b45c9a68a</link><guid isPermaLink="true">https://zenn.dev/uzu_tech/articles/fb415b45c9a68a</guid><pubDate>Fri, 04 Jul 2025 05:44:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ydg7fFrS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2583%259B%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25EF%25BC%2588Fast%2520Refresh%25EF%25BC%2589%25E3%2581%258C%25E5%258A%25B9%25E3%2581%258B%25E3%2581%25AA%25E3%2581%2584%25EF%25BC%2581%25EF%25BC%259F%25E3%2581%259D%25E3%2582%258C%25E3%2580%2581%25E3%2583%25A1%25E3%2583%25A2%25E5%258C%2596%25E3%2581%258C%25E5%258E%259F%25E5%259B%25A0%25E3%2581%258B%25E3%2582%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:haruten%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI5NjI5NGIwZmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:UZU%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzNzI0NDRkNGMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>haruten</dc:creator></item><item><title><![CDATA[TypeScriptによるcreate関数を使わないドメインモデルの関数型アプローチ]]></title><description><![CDATA[
 はじめに
TypeScriptでドメイン駆動設計（DDD）を実践する際、ドメインモデルの表現方法はプロジェクトの保守性や開発体験に大きな影響を与えます。一般的に、モデルの型定義と、そのインスタンスを生成するファクトリ関数は別々に定義されることが多いのではないでしょうか。
例えば、Userという型と、それを生成するためのcreateUserという関数。このアプローチは直感的ですが、モデルに関する知識が「型定義」と「ファクトリ関数」という二つの場所に分散してしまい、ドメインモデルの凝集度を下げてしまう一因になり得ます。
この記事では、classを使わずにTypeScriptの言語機能を活...]]></description><link>https://zenn.dev/mackay/articles/57267630e47296</link><guid isPermaLink="true">https://zenn.dev/mackay/articles/57267630e47296</guid><pubDate>Fri, 04 Jul 2025 03:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jiC8Mz67--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258Bcreate%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%2592%25E4%25BD%25BF%25E3%2582%258F%25E3%2581%25AA%25E3%2581%2584%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E5%259E%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B1%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EyNzI5NWRmYmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>マッケイ</dc:creator></item><item><title><![CDATA[Vue 2からVue 3移行に伴うOptions APIとComposition APIの比較]]></title><description><![CDATA[!
この記事は Qiita に2023年1月に投稿した内容の移行版です。


 概要
現在参画中のプロジェクトでアプリのフロントエンド開発環境がVue2からVue3に変わろうとしているタイミングに差し掛かったため、これを機に自身もリマインドを書こうと思います。
ver3がベータ版だったこともあり、使用がメジャーになるまでは個人開発でもPENDしている状態だったのですが、こちらも機を見て導入したいです。

 本記事の前提
Vue 2では、基本的に Options API という記述方法を使うのがメジャーでした。
Vue 3ではこれに加え、 Composition API という記述方法も使...]]></description><link>https://zenn.dev/xinome/articles/19a55109e177ad</link><guid isPermaLink="true">https://zenn.dev/xinome/articles/19a55109e177ad</guid><pubDate>Fri, 04 Jul 2025 02:53:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--obc_cFNb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vue%25202%25E3%2581%258B%25E3%2582%2589Vue%25203%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%25AB%25E4%25BC%25B4%25E3%2581%2586Options%2520API%25E3%2581%25A8Composition%2520API%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:xinome%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMzMTQ2NWJhZmYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>xinome</dc:creator></item><item><title><![CDATA[【React × Typescript】マウスイベントについて]]></title><description><![CDATA[
 初めに
こんにちは！今回は、React × TypeScriptでの 「クリック」や「ホバー」 といったマウスイベントの実装について、あらためて整理してみたいと思います。
マウスイベントとは、マウスカーソルの動きやボタンの操作によって発生する一連のイベントのことを指します。
本記事では、特に使用頻度の高い「クリックイベント」と「ホバー効果」にフォーカスしてまとめてみようと思います！

 クリックイベント

 基本的なクリックの実装
ボタンがクリックされるたびにクリック回数を数え、表示する例をもとに考えていきます。
import React, { useState } from 're...]]></description><link>https://zenn.dev/daichi09167/articles/dd273ac428872e</link><guid isPermaLink="true">https://zenn.dev/daichi09167/articles/dd273ac428872e</guid><pubDate>Fri, 04 Jul 2025 02:44:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XdFmMnuj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590React%2520%25C3%2597%2520Typescript%25E3%2580%2591%25E3%2583%259E%25E3%2582%25A6%25E3%2582%25B9%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daichi09167%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM3YTc4OTEwMDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daichi09167</dc:creator></item><item><title><![CDATA[TypeScriptのタプルを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりタプルを理解しようの会

 タプル型とは
配列のうち、要素の数と各要素の型を固定した型。
参考: https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types
配列の型定義だと string[] や number[]、要素の型が異なる場合は any[] のように指定した。
が、このタプル型で指定することで配列の要素数やその要素ごとの型を定義しより縛りを強くし安全性を保つことができる。
type Hoge = any[];
// ↑異なる型の要素を持つ指定方法  ↓こちらにするこ...]]></description><link>https://zenn.dev/mt5/articles/42a3cf06e6343e</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/42a3cf06e6343e</guid><pubDate>Fri, 04 Jul 2025 00:28:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VZgz5zZo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのtypeとinterfaceの違いを解説]]></title><description><![CDATA[
 基本的な違い

 interface（インターフェース）

オブジェクトの形状を定義するのに特化
同じ名前で再宣言すると自動的にマージされる
extendsで継承可能


 type（型エイリアス）

あらゆる型を定義できる（オブジェクト、ユニオン型、プリミティブ型など）
再宣言できない
&amp;（交差型）で拡張可能


 具体例で比較

 1. 基本的な使い方
// ✅ どちらも同じように使える
interface UserInterface {
  id: number
  name: string
}

type UserType = {
  id: number
  nam...]]></description><link>https://zenn.dev/shigerufukada/articles/f48cf72d329500</link><guid isPermaLink="true">https://zenn.dev/shigerufukada/articles/f48cf72d329500</guid><pubDate>Thu, 03 Jul 2025 22:31:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wJLRYu7x--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEtype%25E3%2581%25A8interface%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Fukada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxNTNiNGRkZjQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Fukada</dc:creator></item><item><title><![CDATA[Typescriptの一部完全に理解してた。。(思ったことをそのまま書きます)]]></title><description><![CDATA[みなさんはTypescriptは大好きですか？
私は。。。😇
Typescriptは難しい言語だと思っています。
先日TSKaigiに参加をしてきましたが「まだまだ知らないことがたくさんあるな」「ものすごく勉強になった」というような内容がたくさんありました！
https://2025.tskaigi.org/
「カンファレンスは、、いいよなぁ〜〜〜」
また来年もあったら行きたいなと思いました！
話は変わって、以前このような記事を書いたと思います。
https://zenn.dev/terusi/articles/46abffaaf7f002
この記事を書いてから時間が経ちふと、疑問に思っ...]]></description><link>https://zenn.dev/terusi/articles/542f75deb6dd66</link><guid isPermaLink="true">https://zenn.dev/terusi/articles/542f75deb6dd66</guid><pubDate>Thu, 03 Jul 2025 18:58:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u6XO4t-z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Typescript%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E5%25AE%258C%25E5%2585%25A8%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%25E3%2581%259F%25E3%2580%2582%25E3%2580%2582%2528%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E3%2581%259D%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25BE%25E6%259B%25B8%25E3%2581%258D%25E3%2581%25BE%25E3%2581%2599%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A6%25E3%2582%258B%25E3%2581%2597%25E3%2580%259C%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRlM2M5MzkyNjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>てるし〜</dc:creator></item><item><title><![CDATA[MCPサーバーをスクリプトのように書き捨てよう]]></title><description><![CDATA[
 はじめに
みなさん、MCPを活用していますか？
良質なMCPサーバーを探したり開発したりするのも良いですが、MCPサーバーは実際のところ非常に簡単に作成できるため、ちょっとした自動化やタスクの解決にスクリプト感覚で使い捨てることができます。
この記事では、スタンドアローンで動作する非常にシンプルなMCPサーバーを作成し、適当なAIエージェントで動作させる方法を紹介します。

 簡単なMCPサーバーの例
以下は基本的なMCPサーバーの例です。
このMCPサーバーは、エージェントからの入力をそのまま返すだけのEchoツールを提供します。
このように、MCPサーバーは30行程度のボイラープ...]]></description><link>https://zenn.dev/esnir/articles/disposable-mcp-server</link><guid isPermaLink="true">https://zenn.dev/esnir/articles/disposable-mcp-server</guid><pubDate>Thu, 03 Jul 2025 15:23:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SrzcDiTi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E6%259B%25B8%25E3%2581%258D%25E6%258D%25A8%25E3%2581%25A6%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258A%25E3%2582%2593%25E3%2581%2599%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwNzU3NzQ4MGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>りんす</dc:creator></item><item><title><![CDATA[ZennみたいなOGP画像をAPIから作成できるアプリを作成中]]></title><description><![CDATA[無職になったので vibe coding やっていく.
OGP画像をAPIから作成できるアプリ, テンプレートを事前に作成しておく, を作成中．
個人ブログやメディアサイト向けのAPI.

テンプレート編集画面

APIで画像生成:
  curl -X POST http://localhost:3000/api/image \
    -H "Content-Type: application/json" \
    -d '{
      "templateId": "your-template-id",
      "placeholderValues": {
        "t...]]></description><link>https://zenn.dev/shuent/articles/3bb5270785d764</link><guid isPermaLink="true">https://zenn.dev/shuent/articles/3bb5270785d764</guid><pubDate>Thu, 03 Jul 2025 12:02:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9Bdg_fnl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Zenn%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AAOGP%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592API%25E3%2581%258B%25E3%2582%2589%25E4%25BD%259C%25E6%2588%2590%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E4%25B8%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shuent%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhY2RlMjQyNWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shuent</dc:creator></item><item><title><![CDATA[Next.jsで犬画像ジェネレータを作ろう]]></title><description><![CDATA[新しく始めるインターンシップでTypeScriptが必要そうだったので、Type Scriptについて勉強しています。
そこで、このType Scriptのイベントを通して，

その勉強での気づきとをまとめること
自分の学習成果をアウトプットするための成果物を作ること
を目標にまとめます。


 Introduction

 この記事で分かること
この記事を通して、以下のような内容が分かります。

Next.jsの新規プロジェクトの作成
App Routerの使い方
サーバーコンポーネントとクライアントコンポーネント
サーバーアクションの使い方
外部API連携
機密情報となる資格情報(A...]]></description><link>https://zenn.dev/kumakuma_it/articles/3ed65ed083c2ec</link><guid isPermaLink="true">https://zenn.dev/kumakuma_it/articles/3ed65ed083c2ec</guid><pubDate>Thu, 03 Jul 2025 10:59:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ADBdd2II--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25A7%25E7%258A%25AC%25E7%2594%25BB%25E5%2583%258F%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%2586%258A%25E7%2586%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwOTFkYmU4NTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>熊熊</dc:creator></item><item><title><![CDATA[TypeScriptのinferを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりinferを理解しようの会

 inferとは
Conditional Typesで利用される、型推論の変数を導入するキーワード。
参考: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types
Conditional Typesについてはこちらを参照。
また、この後でてくるであろうジェネリクス型についてはこちらを参照。
type Hoge&lt;T&gt; = T extends infer U ? U : never;

let hoge: Hoge...]]></description><link>https://zenn.dev/mt5/articles/157136768e69de</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/157136768e69de</guid><pubDate>Thu, 03 Jul 2025 08:57:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TeI1-EOe--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEinfer%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのreadonlyを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりreadonlyを理解しようの会

 readonlyとは
読み取り専用を示す型。
参考: https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#readonly-and-const
constを用いた定数宣言で
const hoge = "hoge";
hoge = "fuga";
をすると 定数であるため、'hoge' に代入することはできません。 エラーが発生するが
const hoge = [1, 2, 3];
hoge = [1, 2]; // ...]]></description><link>https://zenn.dev/mt5/articles/979841cad71338</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/979841cad71338</guid><pubDate>Thu, 03 Jul 2025 08:02:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cillOOKE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEreadonly%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのas constを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたり as const を理解しようの会

 as constとは
コンストアサーション。
😅
なので、まずはアサーションの説明から。

 アサーションとは
asを用いて明示的に示すこと。
参考: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions
const hoge: string = "hoge"; // 通常の型指定(型アノテーション)
const fuga = "fuga" as string; // asを使った型指定(型アサーション)
...]]></description><link>https://zenn.dev/mt5/articles/0dd9b6cb71059d</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/0dd9b6cb71059d</guid><pubDate>Thu, 03 Jul 2025 07:27:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dHeE5S5y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEas%2520const%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのユニオン型を知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりユニオン型を理解しようの会

 ユニオン型とは
いくつかの要素をパイプ(|の記号)で繋げて複数のパターンを示す型。
参考: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types
type Hoge = string | number;

const hoge: Hoge = "hoge"; // ✅"hoge"はstring型に含まれるのでOK
const fuga: Hoge = 0; // ✅0はnumber型に含まれるのでOK
const piyo:...]]></description><link>https://zenn.dev/mt5/articles/d063edc1ff062f</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/d063edc1ff062f</guid><pubDate>Thu, 03 Jul 2025 05:24:18 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fhthdwal--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%25E5%259E%258B%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのConditional Typesを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりConditional Typesを理解しようの会

 Conditional Typesとは
条件付き型制約という。型定義をするときに条件分岐して定義させるというもの。
参考: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html

 使い方
以下のようにHoge型を定義する際に使用。JavaScriptの三項演算子のイメージ。
interface Value {
  value: string;
}
interface KeyValue {
  key: string;...]]></description><link>https://zenn.dev/mt5/articles/3b962c02842b6f</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/3b962c02842b6f</guid><pubDate>Thu, 03 Jul 2025 03:54:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OnfJpZsT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEConditional%2520Types%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのジェネリクス型を知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりジェネリクス型を理解しようの会

 ジェネリクス型とは
引数の型を利用し表現することで安全性を保ちながら汎用性を高める型。
参考: https://www.typescriptlang.org/docs/handbook/2/generics.html#handbook-content
例えば下記の処理があるとする。
const hoge = 'ほげ'
const fuga = 1

const hogeArray = format(hoge)
const fugaArray = format(fuga)

function format(params) {...]]></description><link>https://zenn.dev/mt5/articles/478c3739cc3c68</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/478c3739cc3c68</guid><pubDate>Thu, 03 Jul 2025 03:52:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KG7tO-dJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E5%259E%258B%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[【型・クラスをさらっと】TypeScriptのextendsを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりextendsを理解しようの会

 extendsとは
諸々を拡張するために使用するもの。主に

型の設定時
クラスの継承

で使用される。

 型の設定時
参考: https://typescriptbook.jp/reference/generics/type-parameter-constraint 、 https://www.typescriptlang.org/docs/handbook/2/conditional-types.html
型定義をする際、ちょっとした縛りを設けて定義したい時や元々定義した型から拡張して新しい型を定義する時に使う。

...]]></description><link>https://zenn.dev/mt5/articles/821a570d2ad84e</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/821a570d2ad84e</guid><pubDate>Thu, 03 Jul 2025 03:33:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QaDjJ0Vl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E5%259E%258B%25E3%2583%25BB%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%2592%25E3%2581%2595%25E3%2582%2589%25E3%2581%25A3%25E3%2581%25A8%25E3%2580%2591TypeScript%25E3%2581%25AEextends%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのkeyofを知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりkeyofを理解しようの会

 keyofとは
型を受け取り、そのキーを集合させた型を定義するもの。
参考: https://www.typescriptlang.org/docs/handbook/2/keyof-types.html
とはいえ分かりづらいと思うので例を書くとこんな感じ。
const hoge: Hoge = { name: "ほげ太郎", message: "こんにちは、ほげ太郎です。" };
type Hoge = { name: string; message: string };
type Fuga = keyof Hoge; //...]]></description><link>https://zenn.dev/mt5/articles/cad22429337570</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/cad22429337570</guid><pubDate>Thu, 03 Jul 2025 03:32:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sYkqnKYV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEkeyof%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item><item><title><![CDATA[TypeScriptのリテラル型を知ろう]]></title><description><![CDATA[
 概要
別記事を書くにあたりリテラル型を理解しようの会

 リテラル型とは
特定のものだけを許容する型。
参考: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types
let s: string = "hello";
let h: "hello" = "hello";
s = "Hello"; // ✅代入できる
h = "Hello"; // 🚫代入できない
と書いたらsは文字列全て代入できるがhは"hello"しか代入できない。
let e: "hello" | "world...]]></description><link>https://zenn.dev/mt5/articles/e6566460d15d73</link><guid isPermaLink="true">https://zenn.dev/mt5/articles/e6566460d15d73</guid><pubDate>Thu, 03 Jul 2025 03:27:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--c3H6RZZ7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2586%25E3%2583%25A9%25E3%2583%25AB%25E5%259E%258B%25E3%2582%2592%25E7%259F%25A5%25E3%2582%258D%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258A%25E3%2583%25BC%25E3%2581%258F%25E3%2581%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk2OGY2M2MyNTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>おーくぼ</dc:creator></item></channel></rss>