<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-10-04T19:02:39+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088579</id>
    <published>2025-10-04T19:02:39+09:00</published>
    <updated>2025-10-04T19:02:39+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/20c51942b2e5326e6a9c"/>
    <url>https://qiita.com/nozomi2025/items/20c51942b2e5326e6a9c</url>
    <title>【Kotlin】Kotlin における PECS 原則（Producer Extends, Consumer Super）</title>
    <content type="text">はじめに
ジェネリクスの「変性（variance）」を理解するとき、
Java ではしばしば PECS 原則 が引用されます。
これは「共変 (out)」「反変 (in)」を直感的に理解する助けになります。

1. PECS 原則とは？

PECS = Producer...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088320</id>
    <published>2025-10-03T22:51:01+09:00</published>
    <updated>2025-10-03T22:51:01+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/d14ba5dbb9068bdd4ac5"/>
    <url>https://qiita.com/nozomi2025/items/d14ba5dbb9068bdd4ac5</url>
    <title>【Kotlin】Kotlin の共変 (out) と反変 (in)</title>
    <content type="text">はじめに
ジェネリクスを使うとき、型パラメータの「代入可能性（互換性）」をどう扱うかが問題になります。
Kotlin ではこれを 変性（variance） と呼び、out と in キーワードで制御します。

1. なぜ変性が必要？
次の例を考えてみます：
val st...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088316</id>
    <published>2025-10-03T22:40:12+09:00</published>
    <updated>2025-10-03T22:40:12+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/0303e48119e11de94c6d"/>
    <url>https://qiita.com/nozomi2025/items/0303e48119e11de94c6d</url>
    <title>【Kotlin】Kotlin のジェネリクス入門</title>
    <content type="text">はじめに
Kotlin では ジェネリクス (Generics) を使うことで、
型に依存しない柔軟で安全なコード を書けます。
Java のジェネリクスを継承しつつ、Kotlin らしい表現も可能です。

1. ジェネリクスとは？
ジェネリクスとは 型をパラメータとし...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2088312</id>
    <published>2025-10-03T22:22:33+09:00</published>
    <updated>2025-10-03T22:22:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/4792c264e8e3ed2a0f78"/>
    <url>https://qiita.com/nozomi2025/items/4792c264e8e3ed2a0f78</url>
    <title>【Kotlin】Kotlin の抽象クラスと抽象メンバー</title>
    <content type="text">はじめに
オブジェクト指向プログラミングにおいて 抽象 (abstract) は、
「共通の振る舞いはまとめつつ、一部の実装はサブクラスに任せる」ための仕組みです。
Kotlin では abstract キーワードを使います。

1. 抽象クラスとは？

abstra...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
</feed>
