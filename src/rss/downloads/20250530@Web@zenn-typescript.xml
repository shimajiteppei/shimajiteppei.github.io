<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 30 May 2025 12:04:27 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Go+Gin × React(Typescript)でシンプルなチャットAPIを作る]]></title><description><![CDATA[
 はじめに
今回は、GoとReact(Typescript)を使って、フロントエンドからバックエンドAPIを呼び出すシンプルなチャットアプリの基盤を構築します。この記事では、API通信までの一連の流れを紹介します。
これは、将来的にVertex AIなどと組み合わせたチャット形式のAIエージェントを構築していくプロジェクトの最初のステップです。まずはフロントエンドで入力されたメッセージを取得し、サーバーサイドでAPIを叩いてレスポンスを返すという、チャットエージェントにおける基本機能を構築します。

 開発環境
OS: macOS Sequoia 15.5
Go: 1.24.2
Gin...]]></description><link>https://zenn.dev/k__kanke/articles/067a6eb25f567f</link><guid isPermaLink="true">https://zenn.dev/k__kanke/articles/067a6eb25f567f</guid><pubDate>Fri, 30 May 2025 11:08:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YWzsJJNR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Go%252BGin%2520%25C3%2597%2520React%2528Typescript%2529%25E3%2581%25A7%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588API%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:k__kanke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0OTRiMDFkNDUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>k__kanke</dc:creator></item><item><title><![CDATA[「Vue＋TypeScriptでランダムな言葉を表示する方法」]]></title><description><![CDATA[
 どうしてランダムテキストを？
仕事などしていて文字をランダムに表示して最後特定の文字にしたい、という要望を目にして自分で実装ではなかったものの、最近Vueの勉強してるので勉強も込めて作ってみようかな、と思い製作しました。

 実装
Vue 3 + Composition API + TypeScriptで書いています。
&lt;template&gt;
  &lt;div&gt;
    &lt;p class="slot-text" ref="slotText" :class="{'is-animating': isAnimating}"&gt;{{ displayText }}&...]]></description><link>https://zenn.dev/ocadanuki/articles/bc17f18e241af8</link><guid isPermaLink="true">https://zenn.dev/ocadanuki/articles/bc17f18e241af8</guid><pubDate>Fri, 30 May 2025 08:34:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fp6r1uMS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258CVue%25EF%25BC%258BTypeScript%25E3%2581%25A7%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25A0%25E3%2581%25AA%25E8%25A8%2580%25E8%2591%2589%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2580%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okadaasako%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI2NWNhNzQ2NzkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okadaasako</dc:creator></item><item><title><![CDATA[Mastra Agent Network を試してみた 〜０から構築するAgent Network〜]]></title><description><![CDATA[こんにちは、オートロの代表をしております福田です。今回は、弊社のインターンの方が書いた記事を紹介いたします。Mastra を使って、Agent Network がどんな風に使えそうかを検討したものです。
===
こんにちは。オートロ株式会社でインターンをしております釜土です。
今回は、Mastraを用いてTypeScriptでAIエージェントの開発に挑戦した体験を、ひとつの記事としてまとめました。
はじめてのエージェント開発ということもあり、設計・実装・テストの各ステップで多くの発見と試行錯誤がありました。
この記事では、実際に作成したエージェントの構成や、開発中に得られた気づき・工夫し...]]></description><link>https://zenn.dev/open_developers/articles/6d07260d18e319</link><guid isPermaLink="true">https://zenn.dev/open_developers/articles/6d07260d18e319</guid><pubDate>Fri, 30 May 2025 07:49:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--WkXyX9z7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mastra%2520Agent%2520Network%2520%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%25E3%2580%259C%25EF%25BC%2590%25E3%2581%258B%25E3%2582%2589%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258BAgent%2520Network%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E7%25A6%258F%25E7%2594%25B0%25E5%25BF%2597%25E9%2583%258E%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg3Nzg4MGI3YTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25B3%25E9%2596%258B%25E7%2599%25BA%25E3%2583%2581%25E3%2583%25BC%25E3%2583%25A0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSk10eHRDLUlpSzFEdnk4UVVnODJaRGhCZ1gtUDZZOHVLdm1tSDhQNklVMEJzbDk4ZGI9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>福田志郎</dc:creator></item><item><title><![CDATA[(Firebase) JWTログインからFirebase認証への移行]]></title><description><![CDATA[FirebaseのStorageに写真を保存する際に、ログインしたユーザーだけが登録できるようにルールを設定していました。しかし、一つ問題がありました。
私が作成したログイン方法はJWT方式で、FirebaseはそのJWTトークンを認識できません。
そのため、FirebaseのAuthenticationを使ってログイン機能を実装し直すことにしました。
(アカウント作成もこちらで行います）

 ✅ 今後の対応内容

 🔸 アカウント作成

パスワードはFirebaseが自動的に安全に管理するため、データベースに保存する必要がなくなります
ユーザーデータの構造を変更するため、DBの修正が必...]]></description><link>https://zenn.dev/hyoni/articles/69588671f0701d</link><guid isPermaLink="true">https://zenn.dev/hyoni/articles/69588671f0701d</guid><pubDate>Fri, 30 May 2025 05:15:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f4rSvoW2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2528Firebase%2529%2520JWT%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%258B%25E3%2582%2589Firebase%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25B8%25E3%2581%25AE%25E7%25A7%25BB%25E8%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%2592%25E3%2583%25A7%25E3%2583%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0sxdWxlU2pkSzlwbDVxZnp3QVlUcFhCNk9xUEhkZGpKWjRUVlRPTl9lMHdYODhLdkg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ヒョニ</dc:creator></item><item><title><![CDATA[ReactのState配列操作]]></title><description><![CDATA[
 State配列
ReactでState配列を表示したり操作するUIはよくあると思います。しかし、ReactのState配列ならではの注意点があり、使うメソッドを気をつける必用があります。
例えば、State配列末尾に追加する場合はpushでは無くconcatを使う必要があります。
理由は、配列を書き換えずに更新する必用がある為です。
それでは、よく使う操作を説明いたします。

 追加
useArrayにaddItemを実装しました。
concatを使用して追加するコードです。重要な部分は以下の通りです。


ベースの配列.concat(追加したい値)です

concatで新しい値を追...]]></description><link>https://zenn.dev/chot/articles/fe358f3b77fb4d</link><guid isPermaLink="true">https://zenn.dev/chot/articles/fe358f3b77fb4d</guid><pubDate>Fri, 30 May 2025 04:21:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--dmoGTIs7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25AEState%25E9%2585%258D%25E5%2588%2597%25E6%2593%258D%25E4%25BD%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2583%2588%25E3%2583%259F%25E3%2583%25BC%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzODVjOWFlYzkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:chot%2520Inc.%2520tech%2520blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSW1uc1FQOHJYaERqWUw3ZU5aTWlJdm1qOEhnNUVBSDZNTE5tR3BmbDZOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>トミー</dc:creator></item><item><title><![CDATA[実践フロントエンドDDD Yagyu.js 前編]]></title><description><![CDATA[今回は株式会社TAIANのフロントエンド開発(React)で採用している、Yagyu.js について紹介したいと思います。前編では戦術的DDDの内容を中心に紹介し、後編では前編で紹介した内容を実際に UI とどう紐づけていくかといった内容を紹介していこうと思います。
今回の記事は戦術的DDDの内容が中心になりますが、これを武器に戦略的DDDにぜひ取り組んでいただければと思っています。超大作になってしまいましたが、ぜひ最後まで読んでいただけると嬉しいです。

 はじめに

 なぜYagyu.jsが必要になったか
私たちがサービスを提供している「婚礼業界」の業務は非常に複雑であり、多くのビジ...]]></description><link>https://zenn.dev/taian/articles/c1d6cae6a21c85</link><guid isPermaLink="true">https://zenn.dev/taian/articles/c1d6cae6a21c85</guid><pubDate>Fri, 30 May 2025 03:42:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jtW788mS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259F%25E8%25B7%25B5%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589DDD%2520Yagyu.js%2520%25E5%2589%258D%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:orinpick%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2MWVkNzdkZjYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:TAIAN%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwZTFiODdmMjYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>orinpick</dc:creator></item><item><title><![CDATA[React Hook Form＋Zodでフォームをシンプルに]]></title><description><![CDATA[この記事では果物・野菜フォームを例に、複雑なフォームの状態管理やバリデーションをReact Hook Form + Zod を活用してシンプルに改善する例を、Before → After形式で紹介したいと思います🙇‍♀️

 💭 背景と要件

「果物を入力する」「野菜を入力する」チェックボックス
選択された項目のみ、名前＋画像ファイルを最大3件まで登録
選択された場合は最低1件必須
既存データはAPIから取得し、フォーム初期値に反映
登録データは FormData 形式でAPI送信


 🙅‍♀️ Before：改善前のフォーム実装
果物・野菜フォームの初期実装です。チェックボックスの状...]]></description><link>https://zenn.dev/bltsdc/articles/5bc3ab800baa0f</link><guid isPermaLink="true">https://zenn.dev/bltsdc/articles/5bc3ab800baa0f</guid><pubDate>Fri, 30 May 2025 03:29:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cDiHGNy1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Hook%2520Form%25EF%25BC%258BZod%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:soyeon%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q5NDcyMGM5YTguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:BLT%2520SDC%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I0ZTFjZGRhMTkuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>soyeon</dc:creator></item><item><title><![CDATA[TypeScript/Reactのimportがスッキリする！index.tsの仕組み]]></title><description><![CDATA[
 はじめに
React や TypeScript でプロジェクトを作っていると、こんなimport文を見たことありませんか？
// 一行でたくさんのコンポーネントをimport
import { Button, Card, Modal } from './components';
import { useAuth, useApi } from './hooks';
「あれ？componentsフォルダにはButton.tsx、Card.tsx、Modal.tsxって個別のファイルがあるはずなのに、なんで一行でimportできるの？」
その謎を解く鍵が index.ts ファイルなんです...]]></description><link>https://zenn.dev/atsukiprog/articles/8e601ca301bef3</link><guid isPermaLink="true">https://zenn.dev/atsukiprog/articles/8e601ca301bef3</guid><pubDate>Fri, 30 May 2025 01:52:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y9Vzb67e--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%252FReact%25E3%2581%25AEimport%25E3%2581%258C%25E3%2582%25B9%25E3%2583%2583%25E3%2582%25AD%25E3%2583%25AA%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2581index.ts%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A2%25A7%25E6%259C%2588%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzI0MTAwYTVmYWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>碧月</dc:creator></item><item><title><![CDATA[『TSKaigi 2025 本編で話せなかったこと、話し足りなかったこと』参加レポート]]></title><description><![CDATA[こんにちは！ anyの荒川です。5/29(木)にfreeeさん、カミナシさん、anyで共催したTSKaigi2025のアフターイベントを行いました🥳
本日は（ほぼ）一参加者としてオフライン参戦したのでそのレポートになります！
3社共催イベントです

 登壇
イベントは「15分」のLTセッションが6枠ありました。

 TypeScriptのmoduleオプションを改めて整理する
発表者: おおいしさん
https://speakerdeck.com/bicstone/typescript-module-option
TSKaigiでも登壇されていたおおいしさんのセッションでした。
Type...]]></description><link>https://zenn.dev/any_dev/articles/tskaigi-2025-side-any</link><guid isPermaLink="true">https://zenn.dev/any_dev/articles/tskaigi-2025-side-any</guid><pubDate>Fri, 30 May 2025 00:57:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cPmRFqWL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258ETSKaigi%25202025%2520%25E6%259C%25AC%25E7%25B7%25A8%25E3%2581%25A7%25E8%25A9%25B1%25E3%2581%259B%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2580%2581%25E8%25A9%25B1%25E3%2581%2597%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2580%258F%25E5%258F%2582%25E5%258A%25A0%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Shogo%2520Arakawa%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RmZjBlNjg2MzIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:any%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YzYzBkNGI1YjUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shogo Arakawa</dc:creator></item><item><title><![CDATA[null と undefinedは使い分けした方がいい？]]></title><description><![CDATA[
 はじめに
nullはその開発者から100億ドルの損害だと言われてるそうです。
https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/
同じ値がないという意味なのにjavascript等では二つも用意されているのが不思議でこの際ちゃんと理解しようと思い調べました。
コードを書くときにtext===undefinedやtext===nullなどで、曖昧なコードが増えるのも問題です。

 nullは自然発生しない
例えば以下のようなコードがあった時、コンソールにはu...]]></description><link>https://zenn.dev/ncdc/articles/047b8311c3d9c7</link><guid isPermaLink="true">https://zenn.dev/ncdc/articles/047b8311c3d9c7</guid><pubDate>Fri, 30 May 2025 00:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7wuDc-OD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:null%2520%25E3%2581%25A8%2520undefined%25E3%2581%25AF%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2581%2597%25E3%2581%259F%25E6%2596%25B9%25E3%2581%258C%25E3%2581%2584%25E3%2581%2584%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25AA%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODZhNDA5ZDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:NCDC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RhYjY4ZDk3NjIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>な</dc:creator></item><item><title><![CDATA[ネストされた配列の特定の要素を弄るジェネリクス型（TypeScriptの型レベルプログラミングでマインスイーパー: 中編）]]></title><description><![CDATA[
 はじめに
こんにちは。yossuli です。
本日（日付がすでに回ってしまいましたが...）#tskaigi_after_talk_afk に参加してきました。
https://www.docswell.com/s/4136989/ZG17PM-2025-05-29-190123#p1
なんと！個人的タイムリーな型レベルの世界の LT が！！！
型レベル純粋関数の世界が広がっていったら楽しそうですね()
さて、この記事は前回に引き続き、TypeScript の型レベルプログラミングを使ってマインスイーパーを作る方法を考えていきます。
今回の記事だけ読んでも学びがあるように作成しました...]]></description><link>https://zenn.dev/yossuli/articles/8e3a5e690c49cb</link><guid isPermaLink="true">https://zenn.dev/yossuli/articles/8e3a5e690c49cb</guid><pubDate>Thu, 29 May 2025 16:45:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UITIhzgE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AE%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%25E8%25A6%2581%25E7%25B4%25A0%25E3%2582%2592%25E5%25BC%2584%25E3%2582%258B%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E5%259E%258B%25EF%25BC%2588TypeScript%25E3%2581%25AE%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25A4%25E3%2583%25BC%25E3%2583%2591%25E3%2583%25BC%253A...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yossuli%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkYmRjMjQzYjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yossuli</dc:creator></item><item><title><![CDATA[React Navigation から Expo Router に移行した話]]></title><description><![CDATA[
 はじめに
業務委託でお手伝いしている 株式会社Another works さんの React Native アプリケーションにおいて、React Navigation から Expo Router への移行をご依頼を受けて行いました。
この記事は、React Native アプリケーションにおいて React Navigation から Expo Router へ移行した際の対応内容の記録です。 (React Navigation や Expo Router が何なのか等の説明は省略します。)
この移行はスキマ時間でちょこちょこ進めて 2024年8月 - 2025年4月 の約8ヶ月間...]]></description><link>https://zenn.dev/tkrtmy/articles/6713ed8a5537b6</link><guid isPermaLink="true">https://zenn.dev/tkrtmy/articles/6713ed8a5537b6</guid><pubDate>Thu, 29 May 2025 15:18:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HwHxPy_G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%2520Navigation%2520%25E3%2581%258B%25E3%2582%2589%2520Expo%2520Router%2520%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tkrtmy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU0ZDk4ZjM3MTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tkrtmy</dc:creator></item><item><title><![CDATA[CRUD操作を用いたNext.jsで作るTODOアプリ-Part1-]]></title><description><![CDATA[
 はじめに
はじめまして、筆者はエンジニア未経験ですが趣味で簡単なwebアプリを作っている者です。
今回はTODOアプリを通して、基本的なCRUD操作を行なう方法を書いていきます。
初めて記事を投稿するためおそらく分かりにくい点があると思いますが、興味がありましたら最後まで見ていって下さい!
!
この記事はReactを触ったことがある方向けの記事になります。


 今回作るTODOアプリの作成例

とても簡易的ですね。
デザインは今回重要ではないため簡易的に済ませています。

 技術スタック

フレームワーク：Next.js

言語：TypeScript

データベース：MongoDB...]]></description><link>https://zenn.dev/moonmen/articles/c8f39660359a95</link><guid isPermaLink="true">https://zenn.dev/moonmen/articles/c8f39660359a95</guid><pubDate>Thu, 29 May 2025 14:17:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FDdTCNdG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:CRUD%25E6%2593%258D%25E4%25BD%259C%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259FNext.js%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258BTODO%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA-Part1-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Moon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RjYmYxZTA1NTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Moon</dc:creator></item><item><title><![CDATA[Tauri 2.0とTypeScript＋Reactで作るキーロガー]]></title><description><![CDATA[
こんにちは村上と言います。音楽プロデューサーをやっていますが、
また性懲りもなくニッチなデスクトップアプリを作りました。
https://github.com/Jun-Murakami/KeyFit
キーボードのよく使うキーを可視化し、45%/60%/75%などのキーボード選択やカスタマイズをサポートをするキーロガーです。
日付範囲やアプリごとによく使うキーのランキングや分布を分かりやすく表示します。日付は１日単位の記録なのでパスワードの復元などは困難だと思いますが、キーロガーではあるので、取り扱いにはご注意ください。

 初挑戦のTauri
常駐型で、少しでも軽くしたいのでElect...]]></description><link>https://zenn.dev/jun_murakami/articles/b7502bd19a97db</link><guid isPermaLink="true">https://zenn.dev/jun_murakami/articles/b7502bd19a97db</guid><pubDate>Thu, 29 May 2025 12:11:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5Rw6VXdb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2581%25A8TypeScript%25EF%25BC%258BReact%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%25AD%25E3%2582%25AC%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Jun%2520Murakami%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WUpGeVFIblVsUDZucHhNYXZtX25qUEx3M1JfanJxRldjdEhDSjlodz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Jun Murakami</dc:creator></item><item><title><![CDATA[TSKaigi 2025 本編で話せなかったこと、話し足りなかったこと・資料まとめ]]></title><description><![CDATA[本記事はTSKaigi 2025 本編で話せなかったこと、話し足りなかったことの登壇者の方が公開してくださっている資料をとgithubなどの情報をまとめたものです。
完全に自分用のメモなのですが、クローズドで保管している必要もないので、共有します。
内容に誤りや抜けがあれば、ぜひコメントなどでご指摘いただけると嬉しいです。
※非公式まとめです。問題がある場合はご連絡ください。
※本記事では、「TSKaigi 2025本編で話せなかったこと、話したりなかったこと」の各登壇者が公開されている資料・概要を引用・紹介しています。
※内容の正確性については各登壇資料をご確認ください。
※以下の内容...]]></description><link>https://zenn.dev/m_n/articles/759945e10d90f7</link><guid isPermaLink="true">https://zenn.dev/m_n/articles/759945e10d90f7</guid><pubDate>Thu, 29 May 2025 12:10:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jZ-SzAhr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TSKaigi%25202025%2520%25E6%259C%25AC%25E7%25B7%25A8%25E3%2581%25A7%25E8%25A9%25B1%25E3%2581%259B%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2580%2581%25E8%25A9%25B1%25E3%2581%2597%25E8%25B6%25B3%25E3%2582%258A%25E3%2581%25AA%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%25E3%2583%25BB%25E8%25B3%2587%25E6%2596%2599%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZiZGIzYmQ3ZmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nog</dc:creator></item><item><title><![CDATA[gRPC - connect - Remix でwebサービスを作ってみる：local buf build for web service]]></title><description><![CDATA[
 背景
gRPCもRemixも触ったことがないので、触ってみたいと思います。
以前、以下の記事でVite+React構成のフロントエンドからgRPCサーバと通信をしてみました。
この時は生成済みのSDKを使っていたのですが、独自のサーバを立てたいので自分で実装したいと思います。

今回使ったコードは以下にあります。


 参照情報

ELIZAサービスはプロトコルバッファのスキーマを定義しています。スキーマとは単純なファイルで、サービス・メソッド、引数・戻り値の型、を定義するものです。
syntax = "proto3"

service ElizaService {
    stri...]]></description><link>https://zenn.dev/kiitosu/articles/7bb9fb7226596c</link><guid isPermaLink="true">https://zenn.dev/kiitosu/articles/7bb9fb7226596c</guid><pubDate>Thu, 29 May 2025 10:00:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wO7-mVT3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:gRPC%2520-%2520connect%2520-%2520Remix%2520%25E3%2581%25A7web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25EF%25BC%259Alocal%2520buf%2520build%2520for...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kiitosu%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKdzJBNDNaZzRhRzk5b0NEMm5aMFY1RDJISlVUVGtySVB4UWhtaXU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kiitosu</dc:creator></item><item><title><![CDATA[[TS TIP] アンビエント宣言とネームスペース]]></title><description><![CDATA[
 最初に
普段あまり意識することのない「アンビエント宣言」と「namespace」について触れる機会があったので、少し調べた内容を噛み砕いて書き留めておこうと思います。
実際知らなくても困ることはないですが、知っていて損はないなと感じたので、
気になる方は読み進めていただければと思います。
では始めます。

 アンビエント宣言（declare）とは？
一言で表すと「この変数や関数、型などは外部にすでに存在しているよ！」という宣言のことです。
Javascriptのコードには存在しない（型が）けど、「型情報としては必要」なものを Typescript に伝えるための構文です。
例えば、外...]]></description><link>https://zenn.dev/ncdc/articles/999e96d2c80a73</link><guid isPermaLink="true">https://zenn.dev/ncdc/articles/999e96d2c80a73</guid><pubDate>Thu, 29 May 2025 09:24:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l0ixPraj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTS%2520TIP%255D%2520%25E3%2582%25A2%25E3%2583%25B3%25E3%2583%2593%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2588%25E5%25AE%25A3%25E8%25A8%2580%25E3%2581%25A8%25E3%2583%258D%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%25B9%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%2588%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODZhNDA5ZDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:NCDC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VjYmFjOWEzNmYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>よっちゃん</dc:creator></item><item><title><![CDATA[VS Codeで自動でtype-only importする]]></title><description><![CDATA[
 結論
以下の設定をsettings.jsonに追加する。
{
  // ...
  "typescript.preferences.preferTypeOnlyAutoImports": true,
  // ...
}
これにより型をimportする際以下のようにtypeキーワードが自動で付与される。
import type { User } from './user';

 背景
BiomeのrecommendedなルールとしてuseImportTypeがあり、型をimportする際はtype-only importしないと怒られる。なおBiomeのドキュメントでもこの設定が推奨...]]></description><link>https://zenn.dev/mitsuaki/articles/ts-auto-type-import</link><guid isPermaLink="true">https://zenn.dev/mitsuaki/articles/ts-auto-type-import</guid><pubDate>Thu, 29 May 2025 08:40:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6y8WN0UE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:VS%2520Code%25E3%2581%25A7%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7type-only%2520import%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mitsuaki%2520Wada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lBUjhCZkp4Z25DU0g5UmthOUNOd3BvUWdzMjcyVUltZDNfS009czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mitsuaki Wada</dc:creator></item><item><title><![CDATA[TypeScriptって実はそんなに型安全じゃないよね、という話【初学者】]]></title><description><![CDATA[!
この記事のコード例部分はほぼほぼAIに書いてもらいました。一応確認はしましたが、間違っている可能性があります。


 はじめに
最近Rustをさきっちょだけ味見してみたのですが、TypeScriptとの型システムの違いに驚愕しました。「TypeScript使ってるから型安全だぜ！」って思ってたんですが、ある程度は型安全かもしれませんが、実はそこまででもないんですね...
この記事では、TypeScriptがRustと比べてどれくらい「型が緩い」のかを、実際のコード例を交えて解説してみます。
!
僕が初心者で間違っている部分もあると思いますので、話半分で見てください。


 そもそもT...]]></description><link>https://zenn.dev/miyabitti256/articles/typescript-not-type-safe</link><guid isPermaLink="true">https://zenn.dev/miyabitti256/articles/typescript-not-type-safe</guid><pubDate>Thu, 29 May 2025 08:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--T6oN9DEz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A3%25E3%2581%25A6%25E5%25AE%259F%25E3%2581%25AF%25E3%2581%259D%25E3%2582%2593%25E3%2581%25AA%25E3%2581%25AB%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%2584%25E3%2582%2588%25E3%2581%25AD%25E3%2580%2581%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586%25E8%25A9%25B1%25E3%2580%2590%25E5%2588%259D%25E5%25AD%25A6%25E8%2580%2585%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miyabitti%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY2NjVmZThjM2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miyabitti</dc:creator></item><item><title><![CDATA[TSKaigi 2025 スポンサー協賛&参加レポート]]></title><description><![CDATA[先日、2025年5月23日〜24日に開催された TSKaigi 2025 に、GENDAはブロンズスポンサーとして協賛しました。
本記事では、協賛に至った背景と、当日参加したメンバーの感想をご紹介します。

 協賛の経緯
GENDAでは近年、技術広報活動に力を入れております。しかし、社外の方々から「社名は知っているが、エンジニア採用や技術的な取り組みをしているとは知らなかった」といった声をいただくこともまだあります。そうした背景から、技術的な認知のさらなる向上の必要性を感じていました。
当社ではWebフロントエンド開発においてTypeScriptを積極的に採用しており、TypeScrip...]]></description><link>https://zenn.dev/genda_jp/articles/5cd81a4743f494</link><guid isPermaLink="true">https://zenn.dev/genda_jp/articles/5cd81a4743f494</guid><pubDate>Thu, 29 May 2025 07:41:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xjYFLpN4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TSKaigi%25202025%2520%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%25E5%258D%2594%25E8%25B3%259B%2526%25E5%258F%2582%25E5%258A%25A0%25E3%2583%25AC%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:GENDA%2520%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNiM2M1MjhkNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:GENDA%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlkMTNkMzU3OGYuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GENDA 公式アカウント</dc:creator></item></channel></rss>