<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 25 Sep 2024 02:39:26 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[ブロックチェーン上にWEBアプリをホストする　その２（機能紹介編）　Internet Computer Protocol(ICP)]]></title><description><![CDATA[!
https://zenn.dev/articles/b14250bdc1c2e3/edit　の続きです。


 1.はじめに
前回の記事では環境構築して、簡単な疎通確認をしました。
今回も、2章 dapp開発を参考に Internet Computer Protocol(ICP) における開発で必要となるであろう主要機能を動かしてみたので、前回同様に備忘録を兼ねて記事にしてみます。
次の ICP 独自機能(2024/08時点)に注目して見ていきたい思いますが、今回は○が付いた機能を中心に動かしてみます。内容に誤りがあればご指摘いただけますと幸いです。



機能





Stabl...]]></description><link>https://zenn.dev/plum_tt/articles/9fcae7f0312585</link><guid isPermaLink="true">https://zenn.dev/plum_tt/articles/9fcae7f0312585</guid><pubDate>Tue, 24 Sep 2024 10:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XyEegsvX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%25B3%25E4%25B8%258A%25E3%2581%25ABWEB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E3%2580%2580%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2592%25EF%25BC%2588%25E6%25A9%259F%25E8%2583%25BD%25E7%25B4%25B9%25E4%25BB%258B%25E7%25B7%25A8%25EF%25BC%2589%25E3%2580%2580Internet%2520Computer%2520Proto...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:satoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkNMekpyR05WY3B6OEJJTXZqQ1dCc0tKV2RmOWVDM0pJOHpEazBDLUk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>satoshi</dc:creator></item><item><title><![CDATA[Rust REST APIとDBをSQLxで接続する]]></title><description><![CDATA[
 概要
今回は英語で記事を書いていきます。
Today we're going to connect an existing Actix Web  REST API and a Postgres  DB with the SQLx  Rust crate. This tutorial assumes you have Rust installed  already.
To learn how to setup an Actix Web REST API, check out my previous article: Fast REST API with Rust and Actix W...]]></description><link>https://zenn.dev/shota_watanabe/articles/13ca67617d031c</link><guid isPermaLink="true">https://zenn.dev/shota_watanabe/articles/13ca67617d031c</guid><pubDate>Tue, 24 Sep 2024 09:31:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UXUmaqnd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520REST%2520API%25E3%2581%25A8DB%25E3%2582%2592SQLx%25E3%2581%25A7%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2523%2520colessar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIyNThmNWVlY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator># colessar</dc:creator></item><item><title><![CDATA[Solana ブロックチェーン向け Rust プログラミング言語]]></title><description><![CDATA[(https://storage.googleapis.com/zenn-user-upload/896890846ab5-20240924.png)
Rust はシステム プログラミング言語です。
システム プログラミング言語は、オペレーティング システムやコンパイラ ソフトウェアなどの作成など、システム プログラミングに使用される言語です。
Rust は、他のシステム言語では提供されない安全性、並行性、速度に基づいています。Rust は Solana Blockchain に使用されます。
Solana は、非常に低い手数料で 1 秒あたり 50,000 件のトランザクションを処理で...]]></description><link>https://zenn.dev/shota_watanabe/articles/e1e768eb5bed69</link><guid isPermaLink="true">https://zenn.dev/shota_watanabe/articles/e1e768eb5bed69</guid><pubDate>Tue, 24 Sep 2024 08:31:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--At0_XmBa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Solana%2520%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%25B3%25E5%2590%2591%25E3%2581%2591%2520Rust%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%25A8%2580%25E8%25AA%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2523%2520colessar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIyNThmNWVlY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator># colessar</dc:creator></item><item><title><![CDATA[chip3.6. bevyのプリミティブ・シェイプ]]></title><description><![CDATA[
 はじめに
2024/09/23時点の内容です。

rustc 1.81.0
bevy 0.14.2
bevyは開発初期段階のOSSで、まだまだ破壊的なアップデートが入ります。
でも、面白いですよ。


 前回
chip3.5. bevyの名前付きカラー

 bevyの図形は増加中
bevyはv0.13以降、内蔵する基本図形（Primitive Shapes）を増強しています。
　・News → Bevy 0.13 → Primitive Shapes
　・News → Bevy 0.14 → New Geometric Primitives
v0.14では2D図形を「厚く」して3D化...]]></description><link>https://zenn.dev/hyoi/articles/bb5b1df32bcf1d</link><guid isPermaLink="true">https://zenn.dev/hyoi/articles/bb5b1df32bcf1d</guid><pubDate>Mon, 23 Sep 2024 12:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JbQjLX_L--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chip3.6.%2520bevy%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AA%25E3%2583%259F%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2583%25BB%25E3%2582%25B7%25E3%2582%25A7%25E3%2582%25A4%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hyoi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o3d2VRb3N6YndjY3ZuWE5kM1JuRHFVTWxVZWVVbDlzYjUtS1lKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hyoi</dc:creator></item><item><title><![CDATA[【Rust】ディレクトリをブックマークするCLIツールを作ってみた]]></title><description><![CDATA[
 はじめに
ターミナル上でよく使うディレクトリをブックマークして管理するコマンドラインツールを作ってみたので、紹介します。
https://github.com/iced-penguin/bookmark-cli
動機としてはターミナル上での移動が面倒だったからです（ある程度の補完は効く環境にはなっているのですが、それでも時々あのディレクトリのパス何だっけ、と考えながら入力するハメに……）。
それと、RustでCLIツールを作ってみたかったからです（重要）。

 インストール
cargo install bookmark-cli

 機能

 できること
シンプルで基本的な機能のみを提...]]></description><link>https://zenn.dev/icedpenguin/articles/82ab6e9c468707</link><guid isPermaLink="true">https://zenn.dev/icedpenguin/articles/82ab6e9c468707</guid><pubDate>Mon, 23 Sep 2024 12:23:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gjIjLZXr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2582%2592%25E3%2583%2596%25E3%2583%2583%25E3%2582%25AF%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%2599%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:icedpenguin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1Nzc3NGIxNTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>icedpenguin</dc:creator></item><item><title><![CDATA[【Rust】トレイト境界~基本編~]]></title><description><![CDATA[
 トレイト境界
特定の型が特定のトレイトを実装していることをコンパイル時に保証する機能

 コンパイラが型の不一致を指摘してくれる
ジェネリクスは型を曖昧に表現する手段です。曖昧に指定するのは場合によっては有効です。
例えば、以下のように「型はどうであれ、数字なら足したい」というシチュエーションです。
fn add_values&lt;T&gt;(a: T, b: T) -&gt; T {
    a + b
}

fn main() {
    let sum = add_values(5, 10);
    println!("Sum: {}", sum);
}

しかし、これはエ...]]></description><link>https://zenn.dev/nekoninaritai/articles/909396113f8b17</link><guid isPermaLink="true">https://zenn.dev/nekoninaritai/articles/909396113f8b17</guid><pubDate>Mon, 23 Sep 2024 11:59:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z9Wlp_ll--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E5%25A2%2583%25E7%2595%258C%7E%25E5%259F%25BA%25E6%259C%25AC%25E7%25B7%25A8%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:svun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2ODg0YTdhNTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>svun</dc:creator></item><item><title><![CDATA[floor_sum()]]></title><description><![CDATA[
 イントロダクション
いきなりですが、次の値を求めてください。

f(n, m, a, b) = \sum_{i=0}^{n-1} \Big\lfloor \frac{ai+b}{m} \Big\rfloor

O(n) で計算するアルゴリズムを思い浮かべた方も多いのではないでしょうか？　以下では、これをO\big(\log \max(a, m)\big)で計算するアルゴリズムを紹介します。

 アルゴリズム編
!
本節は参考記事に大いに影響を受けています。そちらも参照してください。


 Step 1
まず、aとbを次のように展開します。

\begin{equation*}
   ...]]></description><link>https://zenn.dev/yatyou/articles/47831bf5576657</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/47831bf5576657</guid><pubDate>Mon, 23 Sep 2024 11:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xEL7a1O3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:floor_sum%2528%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[Rust3000行でテキストエディタを作るチュートリアルをやった]]></title><description><![CDATA[想定よりだいぶ大変でした。

hecto
成果物はこれ↓
https://github.com/kawarimidoll/kilo-study
参考サイトはこれです↓
https://www.flenker.blog/hecto/
インスパイア元↓
https://rhysd.hatenablog.com/entry/2019/08/29/091753
感想

Rustはこのチュートリアルが初体験

ずっと勉強したいとは思っていたので良い機会だった
チュートリアルを進めていくなかで所有権とかライフタイムとかを少しずつ導入していき説明も挟んでくれるので助かった
しかし3000行の経験を積ん...]]></description><link>https://zenn.dev/kawarimidoll/articles/0b3edd1b000124</link><guid isPermaLink="true">https://zenn.dev/kawarimidoll/articles/0b3edd1b000124</guid><pubDate>Mon, 23 Sep 2024 06:23:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nYB3dol_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust3000%25E8%25A1%258C%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kawarimidoll%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzNzlhYzhkODYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kawarimidoll</dc:creator></item><item><title><![CDATA[【AHC】Rustでパーティクルフィルタ書いてみた]]></title><description><![CDATA[第一回マスターズの決勝で出題された問題で、パーティクルフィルタというものを使うっぽいのですが、よく分からないので、ネットを漁ったり、本屋で色々立ち読みしていたら、『詳解 確率ロボティクス Pythonによる基礎アルゴリズムの実装』という本が良さそうでした。
https://www.amazon.co.jp/詳解-確率ロボティクス-Pythonによる基礎アルゴリズムの実装-KS理工学専門書-上田/dp/4065170060/ref=pd_lpo_sccl_2/358-3160576-5508222?pd_rd_w=dO8oS&amp;content-id=amzn1.sym.855d8f7...]]></description><link>https://zenn.dev/tipstar0125/articles/0fee50c22cb17d</link><guid isPermaLink="true">https://zenn.dev/tipstar0125/articles/0fee50c22cb17d</guid><pubDate>Sun, 22 Sep 2024 04:02:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eiPILiOc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590AHC%25E3%2580%2591Rust%25E3%2581%25A7%25E3%2583%2591%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25AF%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tipstar0125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlMDRiN2Q5N2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tipstar0125</dc:creator></item><item><title><![CDATA[【AHC】Rustのモジュールを単一ファイルにバンドルするスクリプトを作ってみた]]></title><description><![CDATA[長期のAHCに参加していると、コードがどんどん肥大化していって、提出のために単一ファイルでコード書くのが結構しんどいです。
モジュール毎にコードを書きたくなるのですが、手動で単一ファイルにまとめるのも大分しんどいです。
これを解決するためにcargo equipを使用する手があるのですが、以下の理由からスクリプトを自作することにしました。

使い方に癖がありそう。実際使ってないので、そうではないかもしれないが、使い方に慣れるぐらいなら自作した方が早そう。
自由度がほしい。ビジュアライザのコードも埋め込んで、そのまま提出したいので、ローカル環境だけで動かすフィーチャーフラグを付与したい、な...]]></description><link>https://zenn.dev/tipstar0125/articles/d423d391a55b6a</link><guid isPermaLink="true">https://zenn.dev/tipstar0125/articles/d423d391a55b6a</guid><pubDate>Sat, 21 Sep 2024 09:47:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZxTJN5dt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590AHC%25E3%2580%2591Rust%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%258D%2598%25E4%25B8%2580%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E3%2583%2590%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tipstar0125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlMDRiN2Q5N2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tipstar0125</dc:creator></item><item><title><![CDATA[Amazon DynamoDB で実現するイベントソーシングと非同期処理]]></title><description><![CDATA[
 はじめに
以前書いた Rust で Event Sourcing を試してみた ~ AWS のブログを参考に模倣する ~ ではイベントストア (イベントを保存するデータベース) に MySQL を利用しました。MySQL 単体では非同期にクエリモデルの更新処理やイベントを別サービスに伝搬して処理するには一工夫必要なため、今回は Amazon DynamoDB をイベントストアとして利用してシンプルに非同期処理を実現する方法を紹介します。
用語の簡単な説明:

イベントソーシング: データの状態をイベントとして記録する設計手法 (対してデータの最終的な状態を記録するのをステートソーシン...]]></description><link>https://zenn.dev/pyama2000/articles/5651e19c85618c</link><guid isPermaLink="true">https://zenn.dev/pyama2000/articles/5651e19c85618c</guid><pubDate>Sat, 21 Sep 2024 05:47:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ta97KOYb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Amazon%2520DynamoDB%2520%25E3%2581%25A7%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A8%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:pyama2000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvcC5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>pyama2000</dc:creator></item><item><title><![CDATA[Rust製コマンドで意味付けされた終了ステータスを返す]]></title><description><![CDATA[
 はじめに
Rustで&lt;sysexits.h&gt;で定義されている終了ステータスを使えるようにするクレートを開発しているので紹介します。
https://github.com/sorairolake/sysexits-rs

 &lt;sysexits.h&gt;とは
&lt;sysexits.h&gt;はBSD系に由来する定義付けされた終了ステータスです。
64から78までの終了ステータスの意味が定義されています。
https://github.com/freebsd/freebsd-src/blob/9046ecff409c45205aad34ef8d959d79dd20c...]]></description><link>https://zenn.dev/sorairolake/articles/return-meaningful-exit-code-in-rust</link><guid isPermaLink="true">https://zenn.dev/sorairolake/articles/return-meaningful-exit-code-in-rust</guid><pubDate>Fri, 20 Sep 2024 23:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qQsgEN7V--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E8%25A3%25BD%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A7%25E6%2584%258F%25E5%2591%25B3%25E4%25BB%2598%25E3%2581%2591%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E7%25B5%2582%25E4%25BA%2586%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%25B9%25E3%2582%2592%25E8%25BF%2594%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:SorairoLake%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEyZGZiOGQyM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>SorairoLake</dc:creator></item><item><title><![CDATA[Rustのreqwestライブラリのエラーハンドリングでハマった件]]></title><description><![CDATA[
 正常形
let url = "https://jsonplaceholder.typicode.com/users/1";
let response = reqwest::get(url).await;
println!("{:?}", response); // Result型はOKで帰ってくる

 異常形（存在しないドメイン）
let url = "https://unkown.example.com/";
let response = reqwest::get(url).await;
println!("{:?}", response); // Result型はErrで帰ってく...]]></description><link>https://zenn.dev/daijinload/articles/72af0ea95eedfe</link><guid isPermaLink="true">https://zenn.dev/daijinload/articles/72af0ea95eedfe</guid><pubDate>Fri, 20 Sep 2024 09:26:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F_kgq-h7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEreqwest%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:daijinload%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSTVLVGMxQWhOTXo1cnhrSkFmYmdmRmF1SGwxRGFwX0o3NnpXQ1oxMHpTTGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>daijinload</dc:creator></item><item><title><![CDATA[【Rust】Pythonライブラリを超簡単に作れるツールを作った]]></title><description><![CDATA[
 はじめに
最近になってRustを勉強し始めて、何か作ってみようということでpyinitを開発しました。この記事では開発の背景や手こずった点を紹介していこうと思います。
https://github.com/t3tra-dev/pyinit
ツール自体のインストール方法や使い方についてはGitHubリポジトリのREADME.ja.mdを参照してください。

 開発背景
Pythonのライブラリ開発において、プロジェクトの初期セットアップには多くの手順が伴います。README.mdやsetup.py、__init__.py、ライセンスファイルなど、プロジェクトごとにこれらのファイルを毎回...]]></description><link>https://zenn.dev/t3tra/articles/fe69de7a8ddda5</link><guid isPermaLink="true">https://zenn.dev/t3tra/articles/fe69de7a8ddda5</guid><pubDate>Fri, 20 Sep 2024 01:59:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JOMdN_qZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Python%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2582%2592%25E8%25B6%2585%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E4%25BD%259C%25E3%2582%258C%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t3tra%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2MDdkNzY3ZTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t3tra</dc:creator></item><item><title><![CDATA[Rustの乱数生成器はどんな型で受けるのが正解なのか]]></title><description><![CDATA[
 背景
Rustは静的型付言語であり、型に関しては厳密である一方で自由度を担保する仕組みも豊富にあります。その一つがtrait objectと呼ばれるものであり dyn TraitA の様に型が宣言されます。
fn f(x: &amp;dyn TraitA)
と書くとxはTraitAを実装した型の参照であればなんでもいいということになります。似たような概念に impl というものがあり
fn f(x: &amp;impl TraitA)
のように使われます。これはGenericsの別構文であり
fn f&lt;A: TraitA&gt;(x: &amp;A)
と全く等価です。Gener...]]></description><link>https://zenn.dev/lucidfrontier45/articles/658d84ee76a62e</link><guid isPermaLink="true">https://zenn.dev/lucidfrontier45/articles/658d84ee76a62e</guid><pubDate>Thu, 19 Sep 2024 11:07:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0LU9JVmg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B9%25B1%25E6%2595%25B0%25E7%2594%259F%25E6%2588%2590%25E5%2599%25A8%25E3%2581%25AF%25E3%2581%25A9%25E3%2582%2593%25E3%2581%25AA%25E5%259E%258B%25E3%2581%25A7%25E5%258F%2597%25E3%2581%2591%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258C%25E6%25AD%25A3%25E8%25A7%25A3%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:lucidfrontier45%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxY2RkYzI0MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>lucidfrontier45</dc:creator></item><item><title><![CDATA[Cloudflareを使って自宅Webサーバー(axum)をhttpsで無料公開したメモ]]></title><description><![CDATA[
色々調べている時にCloudflareを調べていると、どうも自宅サーバーをWebサーバーとして無料で公開できるらしいことを知りました(ドメイン登録は有料)。これを使うとAWSのLightsailや他のVPS,レンタルサーバーとは比較にならない程の低ランニングコストで公開できることになります。それを実現しつつhttpsで公開する際につまづいたところも含めメモとして残しておきます。Webサーバーはaxumで自作しています。Cloudflareの画面構成が変わるため、スクショはありません。

 前提

まだドメインを登録していない

Cloudflareでドメインを登録する


自宅サーバー...]]></description><link>https://zenn.dev/scirexs/articles/33f34194033f51</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/33f34194033f51</guid><pubDate>Wed, 18 Sep 2024 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DEIvIEFR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E8%2587%25AA%25E5%25AE%2585Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%2528axum%2529%25E3%2582%2592https%25E3%2581%25A7%25E7%2584%25A1%25E6%2596%2599%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%259F%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[Rustでのデータ処理をrayonクレートで高速化してみる]]></title><description><![CDATA[単純なシーケンシャル処理でコードを書いていた部分あったのですが、より高速化する方法ないものかと調べていた所rayonクレートなるもので簡単にできるようで、備忘録も兼ねてまとめておこうという記事です。

 rayonの導入方法
Cargo.tomlファイルに以下を追記します。
[dependencies]
rayon = "1.10"
もしくはcargo add rayon

 サンプルコード
use rayon::prelude::*;

fn main() {
    let numbers: Vec&lt;u32&gt; = (1..101).collect();
    let d...]]></description><link>https://zenn.dev/texia/articles/9834770536990f</link><guid isPermaLink="true">https://zenn.dev/texia/articles/9834770536990f</guid><pubDate>Wed, 18 Sep 2024 13:17:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--FS3-tth_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592rayon%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A7%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:torohash%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5YmI1NzQ4MmYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2586%25E3%2582%25AF%25E3%2582%25B7%25E3%2582%25A2%25E3%2580%2580%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MmYzMDgyMmUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>torohash</dc:creator></item><item><title><![CDATA[Rustのarm64Linux,x64Windows向けクロスコンパイル設定]]></title><description><![CDATA[
ラズパイ向けにコンパイルする際に少し調べたりしたので、今後の備忘のために残しておきます。おまけとしてWindows向けも残しておきます。

 前提

 コンパイル環境
$ cat /etc/os-release
PRETTY_NAME="Debian GNU/Linux 12 (bookworm)"
NAME="Debian GNU/Linux"
VERSION_ID="12"
VERSION="12 (bookworm)"
VERSION_CODENAME=bookworm
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_UR...]]></description><link>https://zenn.dev/scirexs/articles/e1b32959e9a867</link><guid isPermaLink="true">https://zenn.dev/scirexs/articles/e1b32959e9a867</guid><pubDate>Tue, 17 Sep 2024 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HsSdhc57--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEarm64Linux%252Cx64Windows%25E5%2590%2591%25E3%2581%2591%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E8%25A8%25AD%25E5%25AE%259A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:scirexs%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BiazJHVGtaaklCQV9TTzVGSW55bVU0TFNuaGtlanZ3aW15OUhBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>scirexs</dc:creator></item><item><title><![CDATA[Rust のテンプレートエンジン askama を使ってみた]]></title><description><![CDATA[
 背景、お久しぶりでございます
Rust でテンプレートエンジンを使ってコードの自動生成をしてみることにしました。Rust なのはただの趣味です。意味はない。
で、Rust テンプレートエンジンって調べると、なんだかいっぱいあるっぽい。何を使うのが良いのだろうか。
Rust template engine benchmarks をみると Handlebars, Liquid, Sailfish, Markup というのが早いっぽい。
これを眺めてて気になったのが、 Askama と Sailfish 。これらのテンプレートエンジンは、どうやらコンパイル時にテンプレートをプログラムに埋め...]]></description><link>https://zenn.dev/nodamushi/articles/a30e347eeb68db</link><guid isPermaLink="true">https://zenn.dev/nodamushi/articles/a30e347eeb68db</guid><pubDate>Tue, 17 Sep 2024 16:42:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--l4_v-4C---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%2520askama%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nodamushi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1OGJmMTkwNjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nodamushi</dc:creator></item><item><title><![CDATA[Rust | cargo build --release のバイナリサイズを削減する！]]></title><description><![CDATA[
 バイナリサイズを削減したい
cargo build --release では、リリースモードでバイナリをビルドすることができます。
cargo build は開発時の dev 仕様なので、最適化はされていません。
また、デバッグに関する情報も含まれています。
今回は、mocks という CLI ツールをビルドしてバイナリサイズを計測してみます。
https://github.com/mocks-rs/mocks
What is mocks?
mocks について、自分のブログでも紹介しているので、気になる方は見てくれると嬉しいです！

Rust 実装のモック用 REST API サー...]]></description><link>https://zenn.dev/collabostyle/articles/9ef563c290f3b2</link><guid isPermaLink="true">https://zenn.dev/collabostyle/articles/9ef563c290f3b2</guid><pubDate>Tue, 17 Sep 2024 09:56:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--aOfPh0hk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%257C%2520cargo%2520build%2520--release%2520%25E3%2581%25AE%25E3%2583%2590%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25AA%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2582%2592%25E5%2589%258A%25E6%25B8%259B%25E3%2581%2599%25E3%2582%258B%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E5%25B1%25B1%25E3%2581%25A8%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViM2I3NTQxYzUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B3%25E3%2583%25A9%25E3%2583%259C%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y5MGU2OTJiOTguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>山とコード</dc:creator></item></channel></rss>