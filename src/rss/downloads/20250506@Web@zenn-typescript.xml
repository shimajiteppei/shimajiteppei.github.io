<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 06 May 2025 06:32:59 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Cloudflare Workers/D1 と React Router v7 で作る Slack 感情ログアプリ「grr」]]></title><description><![CDATA[
 はじめに
こんにちは！この記事では、私が開発したSlackアプリ「grr」（グルル）を紹介します。日々のちょっとしたイライラをSlack上で簡単に記録・共有できるWebアプリケーションです。

このアプリは、以下の技術スタックを採用して開発しました。


ランタイム: Cloudflare Workers

データベース: Cloudflare D1

フレームワーク: React Router v7

DB クライアント: Kysely (D1 Dialect)

Slack 連携: slack-edge / slack-cloudflare-workers

UI: React ...]]></description><link>https://zenn.dev/coji/articles/grr-slack-app-on-cloudflare</link><guid isPermaLink="true">https://zenn.dev/coji/articles/grr-slack-app-on-cloudflare</guid><pubDate>Mon, 05 May 2025 14:01:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f3zVYOmX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520Workers%252FD1%2520%25E3%2581%25A8%2520React%2520Router%2520v7%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520Slack%2520%25E6%2584%259F%25E6%2583%2585%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Coji%2520Mizoguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pWY2RrNjcwV2NIdGs0anBHa2FGTDAxcERVUVlIX0JYdWE5aDRVNVE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Coji Mizoguchi</dc:creator></item><item><title><![CDATA[ミームを検索できるサイトを作った]]></title><description><![CDATA[Xで見かけた投稿に非常に共感し、その課題を解決するサービスを作成しました。

 作成したサービス
まず結論からお伝えすると、今回作成したサービスはこちらです。

https://memenest.neoserv.app/

 既存の問題点
Xを眺めていると、「ミームに共通の検索ワードがないため、見つけにくい」という問題がありました。私自身も、好きなミームの情報が散在していて一括で見ることができず、不便さを感じていました。
そしてこれは私だけでなく、多くの人が同じ不満を感じていると知り、「ミームをまとめて検索・閲覧できるサービス」を作ることにしました。
以下は、同じような問題意識を持った方...]]></description><link>https://zenn.dev/negilemon/articles/d0e46f30a340ab</link><guid isPermaLink="true">https://zenn.dev/negilemon/articles/d0e46f30a340ab</guid><pubDate>Mon, 05 May 2025 11:56:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9HJjq6_y--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%259F%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E6%25A4%259C%25E7%25B4%25A2%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25AD%25E3%2581%258E%25E3%2582%258C%25E3%2582%2582%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEzMWNiOTRkZTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ねぎれもん</dc:creator></item><item><title><![CDATA[ReactでGASのサイドバー等]]></title><description><![CDATA[
 はじめに
Google Apps Script (GAS)のコードを自分の好きなエディタで開発できるようにするスターターを作りました。
https://github.com/HotariTobu/vite-react-ts-gas-starter
Apps Script in IDE (ASIDE)を参考にしました。
Viteをベースとし、.gsのコードにTypeScriptを使えるようにしています。
また、独自ページやサイドバー、ダイアログなどのUIのコードにReactを使えるようにしています。
Viteのプラグインを差し替えればVue.jsやPreact、Lit、Svelte、S...]]></description><link>https://zenn.dev/hotari/articles/adb112f4ee6e12</link><guid isPermaLink="true">https://zenn.dev/hotari/articles/adb112f4ee6e12</guid><pubDate>Mon, 05 May 2025 11:31:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kUZrvZhu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:React%25E3%2581%25A7GAS%25E3%2581%25AE%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2589%25E3%2583%2590%25E3%2583%25BC%25E7%25AD%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hotari%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzcxMjlmZGI3YmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hotari</dc:creator></item><item><title><![CDATA[TypeScript応用]]></title><description><![CDATA[
 はじめに
実務で TypeScript を使用していますが、なんとなく基礎の型の使い方しかできなかったので、応用的な使い方の型についてまとめます。

 対象読者
TypeScript を実務で使い始めたが、なんとなくで使っている人

 前提知識・用語
一旦読み飛ばして、わからなかったときにここに戻って読んでみてください。
リテラル型：
プリミティブ型の特定の値だけを代入可能にする型。
const isTrue: true = true;
const num: 123 = 123;
const str: "foo" = "foo";
型アノテーション：
変数宣言のときに変数名の後ろに:...]]></description><link>https://zenn.dev/kisaragi71/articles/c5ec467428f295</link><guid isPermaLink="true">https://zenn.dev/kisaragi71/articles/c5ec467428f295</guid><pubDate>Mon, 05 May 2025 04:59:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xcs83Gls--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:TypeScript%25E5%25BF%259C%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:eee%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE5ODY3YzM2MTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>eee</dc:creator></item><item><title><![CDATA[初心者のためのReact関数コンポーネント]]></title><description><![CDATA[
 はじめに
モダンなWebフロントエンド開発において、Reactは最も人気のあるライブラリの一つです。Reactの大きな特徴はコンポーネント指向であり、UIを再利用可能な部品に分割して開発することができます。
Reactコンポーネントには主に2種類あります：クラスコンポーネントと関数コンポーネントです。以前はクラスコンポーネントが主流でしたが、React 16.8でHooksが導入されて以降、関数コンポーネントが推奨されるようになりました。
この記事では、React初心者の方に向けて、関数コンポーネントの基本から実践的な使い方までを解説します。TypeScriptを使った例も紹介してい...]]></description><link>https://zenn.dev/umibudou/articles/e7354fda26c3f5</link><guid isPermaLink="true">https://zenn.dev/umibudou/articles/e7354fda26c3f5</guid><pubDate>Mon, 05 May 2025 04:48:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fgRB8cl8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEReact%25E9%2596%25A2%25E6%2595%25B0%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Umibudou%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvdS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Umibudou</dc:creator></item><item><title><![CDATA[【ネタ】笑ってはいけない Web 会議を作ってみる。デモアプリ編]]></title><description><![CDATA[※今回はネタ投稿です。
ガキ使にインスパイアを受けて、「笑ってはいけない Web 会議」ができるアプリを作ろうと思います。
今回はデモアプリ編ということで、『Web カメラの映像から笑顔を検出して、「ババーン！〇〇 OUT ！」の演出をする』ところまで作ってみました。

 成果物
リポジトリ URL: https://github.com/t-tonyo-maru/pub_web_warattehaikenai-web-mtg
デモ URL: https://t-tonyo-maru.github.io/pub_web_warattehaikenai-web-mtg/

 デモ URL ...]]></description><link>https://zenn.dev/t_tonyo_maru/articles/1fbbaae7fd4a8b</link><guid isPermaLink="true">https://zenn.dev/t_tonyo_maru/articles/1fbbaae7fd4a8b</guid><pubDate>Mon, 05 May 2025 04:10:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nbEl9zeT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%258D%25E3%2582%25BF%25E3%2580%2591%25E7%25AC%2591%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AF%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%2520Web%2520%25E4%25BC%259A%25E8%25AD%25B0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25E3%2580%2582%25E3%2583%2587%25E3%2583%25A2%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25A8%25E3%2582%2593%25E3%2582%2588%25E3%2583%25BC%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NhNjVjZjg3MjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>とんよー。</dc:creator></item><item><title><![CDATA[配列に型なんて不要？]]></title><description><![CDATA[
 はじめに
JavaScript をそこそこ書いてきたあなたなら、配列の扱いには慣れているはず。でも、TypeScript を使い始めたとたん、「え、この配列、なんか型がついてる？」「readonly ってなに？」と混乱した経験、ありませんか？
この記事では、TypeScript の配列型について、実際の開発で役立つトピックを 5 つ厳選して紹介します。どれも JavaScript の延長で理解できる内容ばかりですが、知っておくと「型の力」でコードのバグがグッと減ります。気軽に読み進めてみてください。


 1. タプル型で「順番」と「中身」を縛る
JavaScript では配列の中身...]]></description><link>https://zenn.dev/tcool/articles/1a1065310a0cf4</link><guid isPermaLink="true">https://zenn.dev/tcool/articles/1a1065310a0cf4</guid><pubDate>Mon, 05 May 2025 04:01:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HHLO12BP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AB%25E5%259E%258B%25E3%2581%25AA%25E3%2582%2593%25E3%2581%25A6%25E4%25B8%258D%25E8%25A6%2581%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t-cool%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liVmViMFdEdFlWcUtvVDRvYktNeDNTUGZvRTVFOW9rNUV0c21Dc2RvPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t-cool</dc:creator></item><item><title><![CDATA[同期処理か非同期処理かを意識せずイベントハンドラーを実行する]]></title><description><![CDATA[以前Reactコンポーネントのイベントハンドラーに非同期処理を渡してもいいという気づきを記事にしました．そのあと，カスタムコンポーネントに対して同様の処理を行いたくなったため，どのように実装するかを調べました．

 動機
Webアプリにフォームを準備し，その中で"Submit"ボタンが押されるとバックエンドのAPIと通信を行うようにしました．ここでフォームをカスタムコンポーネントMyFormとして切り出し，Submitボタン押下のイベントをhandleEventというコンポーネントのPropsとして外部から設定するようにしました．
今回はhandleEventに渡される関数は非同期処理で...]]></description><link>https://zenn.dev/rerrah/articles/e9763c385b8943</link><guid isPermaLink="true">https://zenn.dev/rerrah/articles/e9763c385b8943</guid><pubDate>Mon, 05 May 2025 02:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lCrDePs1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%258B%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2581%258B%25E3%2582%2592%25E6%2584%258F%25E8%25AD%2598%25E3%2581%259B%25E3%2581%259A%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2583%258F%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2583%25BC%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Rerrah%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS2cweTZjdnlzVVVibTYyamhnZ1N5M1pzMGl6Q1ZvU25KRTVTSF9acFFQOVJyRmx1dz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Rerrah</dc:creator></item><item><title><![CDATA[JavaScriptのmap()とforEach()の違い：戻り値や使い分けを解説]]></title><description><![CDATA[
 はじめに
JavaScriptで配列をループ処理する方法として
map() と forEach() があります。
最初はこの2つの違いがよくわかりませんでした。
「どちらも繰り返し処理できるなら、同じではないのか」と思ったこともあります。
しかし、実際は 「目的」「戻り値」「使いどころ」 が違います。
本記事では
map() と forEach() の違いや使い分けについて解説します。

 forEach()とは
forEach() は 「配列の要素を1つずつ処理する」 ためのメソッドです。
単に処理をするだけで、戻り値はありません（undefined）。
例：
const frui...]]></description><link>https://zenn.dev/fd2025/articles/0a551734ca6ffe</link><guid isPermaLink="true">https://zenn.dev/fd2025/articles/0a551734ca6ffe</guid><pubDate>Mon, 05 May 2025 01:43:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EiIcfbcl--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaScript%25E3%2581%25AEmap%2528%2529%25E3%2581%25A8forEach%2528%2529%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25EF%25BC%259A%25E6%2588%25BB%25E3%2582%258A%25E5%2580%25A4%25E3%2582%2584%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:fd2025%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EzMzVlNTI5MmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>fd2025</dc:creator></item><item><title><![CDATA[RxJS Observableのライフサイクル完全ガイド（TypeScript対応）]]></title><description><![CDATA[RxJSでは、Observableがどのように作成・実行・完了・解除されるのかという「ライフサイクル」の理解がとても重要です。
本記事では、Observableのライフサイクルを4つのフェーズに分けて段階的に解説し、実際のコード例や購読解除・エラー処理・リソース解放のベストプラクティスまで紹介します。

 Observableのライフサイクル
ここでは、RxJSにおけるObservableのライフサイクルについて、作成から購読、データの発行、完了・エラー通知、購読解除、そしてリソース管理に至るまでの一連の流れを段階的に解説します。
このライフサイクルを理解することは、RxJSを効果的に使...]]></description><link>https://zenn.dev/shuji_bonji/articles/50e2b5deb9bf11</link><guid isPermaLink="true">https://zenn.dev/shuji_bonji/articles/50e2b5deb9bf11</guid><pubDate>Mon, 05 May 2025 01:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tAfR48-O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:RxJS%2520Observable%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2595%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25AF%25E3%2583%25AB%25E5%25AE%258C%25E5%2585%25A8%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25EF%25BC%2588TypeScript%25E5%25AF%25BE%25E5%25BF%259C%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shuji%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSm9nNENyRlpOOGFiN005b3daUUpVb1ZVRkZianRyQ3R3Q09qdW1Sc1R6MUwxRWV0RT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shuji</dc:creator></item><item><title><![CDATA[OrvalでOpenAPIからMCPサーバを作る]]></title><description><![CDATA[
 はじめに
@denwaya34です。😉
Orval v7.9.0でOpenAPIからMCPサーバを作成できるようになったので試してみます。

 やり方
公式ドキュメントに手順が書いてあるのでそれを踏襲してやってみます.

 1. Configファイル(=orval.config.ts)を作成

orval.config.ts
import { defineConfig } from 'orval';

export default defineConfig({
    petstore: {
        input: {
            target: './petsto...]]></description><link>https://zenn.dev/denwaya/articles/orval-mcp-server</link><guid isPermaLink="true">https://zenn.dev/denwaya/articles/orval-mcp-server</guid><pubDate>Sun, 04 May 2025 16:51:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EMNNsnuM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Orval%25E3%2581%25A7OpenAPI%25E3%2581%258B%25E3%2582%2589MCP%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:denwaya34%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y3NGM2YzM3MGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>denwaya34</dc:creator></item><item><title><![CDATA[neverthrow: ResultAsync の使い方 (和訳)]]></title><description><![CDATA[!
この文書は neverthrow のリポジトリにある Working with ResultAsync を和訳したものです。


 ResultAsync の使い方
ResultAsync は、非同期処理の結果を型安全に扱うための型です。
失敗する可能性のある同期操作の結果を扱う Result&lt;T,E&gt; と同様に、ResultAsync&lt;T,E&gt; は非同期操作の結果を表すために使用できます。

 fromPromise で Promise をラップする
Neverthrow は、Promise を ResultAsync に変換するユーティリティ関数 from...]]></description><link>https://zenn.dev/coji/articles/neverthrow-result-async</link><guid isPermaLink="true">https://zenn.dev/coji/articles/neverthrow-result-async</guid><pubDate>Sun, 04 May 2025 13:31:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IhIdwkBF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:neverthrow%253A%2520ResultAsync%2520%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2520%2528%25E5%2592%258C%25E8%25A8%25B3%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Coji%2520Mizoguchi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pWY2RrNjcwV2NIdGs0anBHa2FGTDAxcERVUVlIX0JYdWE5aDRVNVE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Coji Mizoguchi</dc:creator></item><item><title><![CDATA[範囲列 tstzrange による重複チェックを簡略化【Supabase】]]></title><description><![CDATA[
 TL;DR
https://supabase.com/blog/range-columns の supabase 公式ブログを参考に、
範囲列 tstzrange を使用することで、重複チェックを簡略化できます！

 はじめに
先日、Supabase を使ったプロジェクトで、予約システムの実装に取り組んでいました 📅
Web アプリケーション開発において、日時に関連するデータ処理やバリデーションは重要でありながら、意外と複雑になりがちな要素です。
今回は、Supabase と PostgreSQL の範囲列を使った効率的な予約システムについて調査したので、基礎的な内容をまとめました！...]]></description><link>https://zenn.dev/kazzyfrog/articles/practice-supabase-reservation</link><guid isPermaLink="true">https://zenn.dev/kazzyfrog/articles/practice-supabase-reservation</guid><pubDate>Sun, 04 May 2025 05:40:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_UtVxCG1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AF%2584%25E5%259B%25B2%25E5%2588%2597%2520tstzrange%2520%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E9%2587%258D%25E8%25A4%2587%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E7%25B0%25A1%25E7%2595%25A5%25E5%258C%2596%25E3%2580%2590Supabase%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kazzyfrog%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwMzRmZDk1NTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kazzyfrog</dc:creator></item><item><title><![CDATA[Nuxt3 開発環境構築]]></title><description><![CDATA[
 環境

OS: Windows 11 + WSL2 (Ubuntu 22.04)
Node.js v22.14.0

Nuxt公式
https://nuxt.com/

 開発環境構築手順
1. Nuxtプロジェクト作成
npm create nuxt &lt;project-name&gt;
2. 使用するパッケージマネージャーを選択
&gt; npx
&gt; create-nuxt nuxt-dev


        .d$b.
       i$$A$$L  .d$b
     .$$F` `$$L.$$A$$.
    j$$'    `4$$:` `$$.
   j$$...]]></description><link>https://zenn.dev/tspk/articles/26e922896fe384</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/26e922896fe384</guid><pubDate>Sun, 04 May 2025 00:04:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s06cG78T--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Nuxt3%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[Vite × TypeScript]]></title><description><![CDATA[
 Viteを使用してTypeScriptを導入します
🔧 Viteとは？
フロントエンド開発のためのビルドツール／開発サーバーです。
🚀 Viteを使用するメリット

爆速な開発環境（起動が超早い）
従来のWebpackなどでは、開発サーバーの起動に時間がかかることが多いですが、
Viteは即起動します。

📦 Webpack：アプリ全体を一括でビルドしてから起動
⚡ Vite：必要な部分だけを要求に応じて読み込む


高速なHMR（Hot Module Replacement）
コードを保存したときの変更反映（リロード）が一瞬で完了します。
設定がシンプル
最初からTypeScrip...]]></description><link>https://zenn.dev/tspk/articles/b8364d92e4d890</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/b8364d92e4d890</guid><pubDate>Sat, 03 May 2025 22:34:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--clf5uw_C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:Vite%2520%25C3%2597%2520TypeScript%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[「今だけ除外したい」はコメントアウトじゃなくて `if (false)` にしよう]]></title><description><![CDATA[
 概要
部分的に実行したくないコードは以下のように書いてみましょう！
// JavaScript
if (false) {
  doSomething();
}

function someFunction() {
  if (true) {
    return;
  }
  doSomething();
}

// TypeScript
if (false as boolean) {
  doSomething();
}

function someFunction() {
  if (true as boolean) {
    return;
  }
  doSomething...]]></description><link>https://zenn.dev/kagan/articles/if-false-instead-of-comments</link><guid isPermaLink="true">https://zenn.dev/kagan/articles/if-false-instead-of-comments</guid><pubDate>Sat, 03 May 2025 18:12:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--geZl1xuo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E4%25BB%258A%25E3%2581%25A0%25E3%2581%2591%25E9%2599%25A4%25E5%25A4%2596%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%258D%25E3%2581%25AF%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2581%2598%25E3%2582%2583%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25A6%2520%2560if%2520%2528false%2529%2560%2520%25E3%2581%25AB%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2581%258C%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pxRzhkLXVXenp5SlJteDF3NU9tcE9KZjdkNHFHUXo5ZFowNy0wNmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かがん</dc:creator></item><item><title><![CDATA[TypeScript 文字列を反転させる]]></title><description><![CDATA[「おはよう」この文字列を 「うよはお」 と出力してみます。
const str = 'おはよう'
const reverseStr = (str: string): string =&gt; {
  return str.split('').reverse().join('')
}
console.log(reverseStr(str)); // 出力: うよはお

split関数で配列を作成 ['お', 'は', 'よ', 'う']
reverse関数で配列を反転['う', 'よ', 'は', 'お']
join関数で配列の全ての要素を結合し、文字列にする 「うよはお」

split
...]]></description><link>https://zenn.dev/tspk/articles/b6320cad22543f</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/b6320cad22543f</guid><pubDate>Sat, 03 May 2025 08:21:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u0CFZTZh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E5%258F%258D%25E8%25BB%25A2%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[「npm run dev」で起動するものをデバッグ実行する方法]]></title><description><![CDATA[
 はじめに
「npm run dev」で起動するものをデバッグ実行する方法
をまとめました。
別に、yarn devだったとしても、同様のやり方で対処できます。
「npm run dev」のデバッグ起動の件
の目次項目では、ホスト側のターミナル上で、「npm run dev」を打ち込む
状況でのやり方を書きました
Docker内部で「npm run dev」する場合にVSコードでデバッグ実行する方法
の目次項目では、dockerコンテナにログイン後に、「npm run dev」を打ち込む
状況で、ホスト側で動作しているVSコードでリモートデバッグする
やり方を書きました
ただ、いずれも...]]></description><link>https://zenn.dev/tazzae999jp/articles/1f792582b144af</link><guid isPermaLink="true">https://zenn.dev/tazzae999jp/articles/1f792582b144af</guid><pubDate>Sat, 03 May 2025 08:07:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--r8_j7gh5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258Cnpm%2520run%2520dev%25E3%2580%258D%25E3%2581%25A7%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%2599%25E3%2582%258B%25E3%2582%2582%25E3%2581%25AE%25E3%2582%2592%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25B0%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%25A4%25E3%2581%258A%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzEwZmVjMjAxYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たつお</dc:creator></item><item><title><![CDATA[TypeScriptとは]]></title><description><![CDATA[JavaScriptのスーパーセットとなるプログラミング言語。
静的型付け言語であり、プログラムの正しさが静的に検査できる。
ライブラリやIDEなどの開発環境が充実しており、大きなエコシステムを持っている。
Microsoftが2012年に開発し、オープンソースで公開した。
※ 補足
IDEとは "Integrated Development Environment"（統合開発環境） の略
プログラムを書く、テストする、デバッグするなどの作業を効率よく行うための ツールがひとまとめになっているソフトウェア のこと
有名なIDEはVisual Studio Code（厳密にはエディタですが...]]></description><link>https://zenn.dev/tspk/articles/74331be18a5277</link><guid isPermaLink="true">https://zenn.dev/tspk/articles/74331be18a5277</guid><pubDate>Sat, 03 May 2025 07:32:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--akPHOzzm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_76:TypeScript%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25B7%25E3%2581%25A3%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSzRaUk5ISjNvUTRveHRBeGZBcVh5Y2RlVV9HbUxldnlQVUFiNUhMcU4ybUVZVVpsM2E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ぷっけ</dc:creator></item><item><title><![CDATA[実装系問題のためにTypeScriptのテスト環境を構築する]]></title><description><![CDATA[

こんにちは，みーやです！
初夏の候，この季節はエンジニア学生向けサマーインターンの選考が各所で行われているかと思います．
実際に私も複数社の選考を受けている最中でして，特に最初の壁となるのはコーディングテストかと思います．
コーディングテストの中には複雑な仕様が与えられる問題があり，問題の規模や複雑さから，理解に時間がかかったりケアレスミスでコードに間違いがあるなどして，時間がかかるケースがよくあると思います．
そのような場合にローカル PC で効率的にテストするための環境構築の方法をご紹介します！
（背景として，このテスト環境構築に時間がかかったのと，この環境がもたらすメリットがい...]]></description><link>https://zenn.dev/pkmiya/articles/cb6812cf516b65</link><guid isPermaLink="true">https://zenn.dev/pkmiya/articles/cb6812cf516b65</guid><pubDate>Sat, 03 May 2025 07:10:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ybCb-OXY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%25AE%259F%25E8%25A3%2585%25E7%25B3%25BB%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25ABTypeScript%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2583%25BC%25E3%2582%2584%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l2cXptRUFRdXM0bnN4MHR0TThCaVNtcGNTaEZENkJkU3Q4SE4tTXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みーや</dc:creator></item></channel></rss>