<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 02 Feb 2025 08:35:56 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[TypeScriptで学ぶポリモーフィズム~オブジェクト指向サブタイプポリモーフィズム編~]]></title><description><![CDATA[
 はじめに
ポリモーフィズムにはおおきく３種類あります。


アドホック多相: 同じ関数・メソッドで異なる引数・振る舞いを許容したい(オーバーライドなど)

パラメトリック多相: 同じ関数・メソッドで異なる入力値型を許容したい(ジェネリクスなど)

サブタイピング: 共通の関数・メソッドをもつ様々な種類のオブジェクト・インスタンスを渡して振る舞いを変えたい

参照: Wikipediaポリモーフィズム
今回は、特にオブジェクト指向において便利なサブタイピングを紹介したいと思います。このサブタイピングはほかのポリモーフィズムが実現できない強力な仕組みを提供してくれます。
なお毎回、関数名...]]></description><link>https://zenn.dev/dove/articles/c05ce17fd68133</link><guid isPermaLink="true">https://zenn.dev/dove/articles/c05ce17fd68133</guid><pubDate>Sun, 02 Feb 2025 06:48:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--N0tVmpVQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScriptw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%258F%25E3%2583%2588%25E3%2581%2599%25E3%2581%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVkMjNlN2Q4MzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ハトすけ</dc:creator></item><item><title><![CDATA[openapi-typescriptとZodで任意フィールドの型エラーの対処]]></title><description><![CDATA[OpenAPI、Swaggerから名前が変わってだいぶ良い印象になったなと謎の感想を持っている@zaruです、こんにちは。TypeScriptでOpenAPIを扱うなら openapi-typescript / openapi-fetchライブラリが圧倒的に良いと思いずっと使っています。また、バリデーションはいくつかありますがZodを使い続けています。
今回は「OpenAPIの任意フィールドが、openapi-typescriptで生成したOpenAPIの型情報と、Zodスキーマの型情報が不一致で型エラーになる」症状の対処法を紹介します。前提として tsconfig.json で exa...]]></description><link>https://zenn.dev/moozaru/articles/8a7cacefd6d91a</link><guid isPermaLink="true">https://zenn.dev/moozaru/articles/8a7cacefd6d91a</guid><pubDate>Sun, 02 Feb 2025 04:59:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bWHQN_NX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:openapi-typescript%25E3%2581%25A8Zod%25E3%2581%25A7%25E4%25BB%25BB%25E6%2584%258F%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2589%25E3%2581%25AE%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zaru%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNDkwNTdmZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25AD%25E3%2582%258B%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hTeWVOcHN2TEdOdTdPeUFlU1JEbDhUNkNOX1p3NHBXSHpIRHN2NlBFPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaru</dc:creator></item><item><title><![CDATA[Three.js + TypeScriptで3Dアニメーション表示]]></title><description><![CDATA[
 内容

これはTypeScriptからThree.jsを使うサンプルである。

z=f(x,y,t)という関数の描画を目指す。
単に3次元グラフを表示したいのなら、plotly.jsなどのグラフ用のライブラリを使った方が簡単である。つまり実用的なプログラムの紹介ではなく、Three.jsの使い方のための記事である。


 プロジェクトの用意

 プロジェクト作成
pnpm create vite@latest
cd プロジェクト名
pnpm add -D three @types/three
"Select a framework"には Vanilla、"Select a varia...]]></description><link>https://zenn.dev/ythk/articles/ythk-arphys-three1</link><guid isPermaLink="true">https://zenn.dev/ythk/articles/ythk-arphys-three1</guid><pubDate>Sun, 02 Feb 2025 02:59:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--H48pZPAk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Three.js%2520%252B%2520TypeScript%25E3%2581%25A73D%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ythk%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVZOZ09NOWpjZEg1TFlRQlh6dnIzWW5ZRmZ6T3F3NUt4VWtNMVdjV3VRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ythk</dc:creator></item><item><title><![CDATA[サーバーに'入る'だけでプロフィールページを生成したい!]]></title><description><![CDATA[
 なにを作ったの?
とあるDiscordサーバーに"入る"だけで自分のプロフィールが表示されるようなWebアプリを作りました!
https://github.com/L4Ph/Anchor

 どう使うの?

 1. LanyardのDiscordサーバーに参加します。
!
注意!
このサーバーが原因で

乗っ取りなどが発生するのが怖い
不要に情報を渡したくない。

という方は、参加しないでください。
基本的には問題ないはずですが、万が一なにか発生しても私は責任を負うことができません。


 2. DiscordのユーザーIDを取得する。
Discordの開発者モードを有効化し、ユーザ...]]></description><link>https://zenn.dev/katsuyuki/articles/2a6a3369aee9e8</link><guid isPermaLink="true">https://zenn.dev/katsuyuki/articles/2a6a3369aee9e8</guid><pubDate>Sun, 02 Feb 2025 02:02:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---HHcl5Sj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2581%25AB%2527%25E5%2585%25A5%25E3%2582%258B%2527%25E3%2581%25A0%25E3%2581%2591%25E3%2581%25A7%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2521%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:LaPh%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiYzcxMjA0NGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>LaPh</dc:creator></item><item><title><![CDATA[【JavaScript】null 合体演算子についてまとめてみた]]></title><description><![CDATA[
 JavaScript の null 合体演算子について
前回は様々な演算子の中で三項演算子を取り上げましたが、今回は null 合体演算子 についてまとめてみたいと思います。

 null 合体演算子とは
?? の 左側の値が null または undefined のときに、右側の値を返す 演算子です。
(もし null と undefined が分からない場合は参考記事をご覧ください。参考記事：JavaScript での undefined と null の違い）

 構文
値1 ?? 値2;
値1 が null または undefined の場合に 値2 を返します。

 シンプ...]]></description><link>https://zenn.dev/hayatech/articles/js-nullish-operator</link><guid isPermaLink="true">https://zenn.dev/hayatech/articles/js-nullish-operator</guid><pubDate>Sun, 02 Feb 2025 00:46:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--f5OO2MUu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591null%2520%25E5%2590%2588%25E4%25BD%2593%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HayaTech%2528%25E3%2581%25AF%25E3%2582%2584%25E3%2581%25A6%25E3%2581%258F%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0YzBmNjVhMjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HayaTech(はやてく)</dc:creator></item><item><title><![CDATA[BiomeのPluginについて]]></title><description><![CDATA[こんにちは、mehm8128 です。
最近、Roadmap 2025 and Biome 2.0 | Biomeが公開されました。
その中でも一番気になっているのはやはりプラグイン機能です。そこで、RFC を簡単にまとめて寄り道などしながら、Biome のプラグインについて理解している範囲で紹介します。
間違いなどありましたらコメント欄にて教えていただけると助かります。

 Biome のプラグイン
そもそも Biome のプラグインとは、ESLint のプラグイン機能のように、Biome 自体が提供している lint ルール以外にもユーザーが独自のルールを作成できるようにするものです（...]]></description><link>https://zenn.dev/mehm8128/articles/biome-plugin</link><guid isPermaLink="true">https://zenn.dev/mehm8128/articles/biome-plugin</guid><pubDate>Sat, 01 Feb 2025 15:32:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--yczbejQu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%25E3%2581%25AEPlugin%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mehm8128%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjNzNlNGI0Y2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mehm8128</dc:creator></item><item><title><![CDATA[tRPCとgRPCの違いは？]]></title><description><![CDATA[tRPC と gRPC はどちらも RPC（Remote Procedure Call） のフレームワークですが、目的や実装方式が大きく異なります。



比較項目
tRPC
gRPC




主な用途
TypeScript / JavaScript 向けの RPC フレームワーク（Node.js のフルスタック開発向け）
マイクロサービス、言語間通信、分散システム向け


通信プロトコル
HTTP + JSON
HTTP/2 + Protocol Buffers（バイナリ通信）


データフォーマット
JSON（デフォルト）
Protocol Buffers（protobuf）


型...]]></description><link>https://zenn.dev/tommy_aki/articles/7840be2e1e9c4e</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/7840be2e1e9c4e</guid><pubDate>Sat, 01 Feb 2025 15:24:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RCW1occY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:tRPC%25E3%2581%25A8gRPC%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[Next.jsのIntercepting RoutesとParallel Routesを使ってモダンなUXを実現する]]></title><description><![CDATA[今回はNext.js 13.3のApp Routerから導入されたIntercepting RoutesとParallel Routesを使用して、モダンなUXを実現する方法を解説します。


 実際に動作するデモ
https://nextjs-intercepting-routes-example-igz0.vercel.app/articles
※ モバイルでは通常の記事一覧表示になりますが、PCではモーダルを使ったプレビュー表示になります。

 ソースコード
https://github.com/igz0/nextjs-intercepting-routes-example

 1...]]></description><link>https://zenn.dev/igz0/articles/nextjs-intercepting-parallel-routes-modal</link><guid isPermaLink="true">https://zenn.dev/igz0/articles/nextjs-intercepting-parallel-routes-modal</guid><pubDate>Sat, 01 Feb 2025 13:06:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G0evygli--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%25E3%2581%25AEIntercepting%2520Routes%25E3%2581%25A8Parallel%2520Routes%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%25A2%25E3%2583%2580%25E3%2583%25B3%25E3%2581%25AAUX%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2584%25E3%2581%2590%25E3%2581%259E%25E3%2583%25BC%2520%2520%2520%25E6%2597%2585%25E3%2581%2599%25E3%2582%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259E%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxYWU4MTNkNWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>いぐぞー ✈️ 旅するプログラマー</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜アフィン変換(回転)（030/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の30本目です。
https://zenn.dev/nyagato_00/articles/9b7aa704309aaa

 実装

 お題

(1)アフィン変換を用いて、反時計方向に30度回転させよ。
(2) アフィン変換を用いて、反時計方向に30度回転した画像で中心座標を固定することで、なるべく黒い領域がなくなるように画像を作成せよ。 （ただし、単純なアフィン変換を行うと画像が切れてしまうので、工夫を要する。）

https://github.com/minido/Gasyori100k...]]></description><link>https://zenn.dev/nyagato_00/articles/eba0b8c62c36c5</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/eba0b8c62c36c5</guid><pubDate>Sat, 01 Feb 2025 10:38:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8O39hpUw--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2582%25A2%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25B3%25E5%25A4%2589%25E6%258F%259B%2528%25E5%259B%259E%25E8%25BB%25A2%2529%25EF%25BC%2588030%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[ZKPのAppの開発の流れがわかる：Minaでスクラッチ実装]]></title><description><![CDATA[
 はじめに
Minaプロトコルは、ゼロ知識証明(Zero Knowledge Proofs)を活用したブロックチェーンプロトコルです。このプロトコル上でzkApps(ゼロ知識アプリケーション)を開発することで、プライバシーを保護しながら計算の正当性を証明することができます。
Minaではスマートコントラクトとしてコードがネットワークにはありません。あるのは検証鍵とStateのみ。そしてトランザクションの実行自体はローカルでして、その実行の証明までローカルで生成して... という新しい感覚でMinaプロトコルの挙動などが学べるのでぜひ読み進めていってください。

 ゼロ知識証明とは
ゼロ...]]></description><link>https://zenn.dev/mameta29/articles/dd51634a6fe0ee</link><guid isPermaLink="true">https://zenn.dev/mameta29/articles/dd51634a6fe0ee</guid><pubDate>Sat, 01 Feb 2025 09:45:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--G0HvOvto--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ZKP%25E3%2581%25AEApp%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AE%25E6%25B5%2581%25E3%2582%258C%25E3%2581%258C%25E3%2582%258F%25E3%2581%258B%25E3%2582%258B%25EF%25BC%259AMina%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2581%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mameta29%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3FzbE45OV9GR0RoRWJpbGxfZHl0dGNTcUhmQTd4VUh2bFo0TDZNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mameta29</dc:creator></item><item><title><![CDATA[【フロントエンド】ポケモン図鑑のテストをVitestで書いてみた]]></title><description><![CDATA[
 概要
以下の本で作成したポケモン図鑑のテストコード(フロントエンド)をVitestで書いてみたという報告記事になります。
※テストコードの解説などは記載しておりませんが、時間があれば後日追記するかもしれません。


 前提
フロントエンドのテストが全く分からないという方が本記事を読む際は、以下の前提を踏まえて参考程度に読んでいただければと思います
!
筆者はあまりフロントエンドのテストに詳しくなく、手探りで書いたコードになります

!
必要なテストが網羅されていない、過分なテストがあるといった可能性があります


 本記事の対象者

フロントエンドのテストコードをはじめて書く方（サン...]]></description><link>https://zenn.dev/souemon/articles/aad9a886ec207d</link><guid isPermaLink="true">https://zenn.dev/souemon/articles/aad9a886ec207d</guid><pubDate>Sat, 01 Feb 2025 06:30:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--41qzSM8d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2580%2591%25E3%2583%259D%25E3%2582%25B1%25E3%2583%25A2%25E3%2583%25B3%25E5%259B%25B3%25E9%2591%2591%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592Vitest%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259D%25E3%2581%2586%25E3%2581%2588%25E3%2582%2582%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZWE1MTdmMDIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>そうえもん</dc:creator></item><item><title><![CDATA[【JavaScript】三項演算子についてまとめてみた]]></title><description><![CDATA[
 JavaScript の三項演算子について
私は普段の仕事では条件分岐の際に if 文の方が使用頻度が高いですが、プライベートでは三項演算子を使って条件分岐させるのも少なくないです。
今回は JavaScript の三項演算子について、その基本的な使い方をおさらいします。この記事では、三項演算子の概念や実際のコード例、React の JSX での使い方に加えて、if 文との比較についても解説します。

 三項演算子とは
三項演算子は、JavaScript の条件分岐で便利に使えるシンプルな演算子です。たった 1 行のコードで条件分岐を書くことができます。

 構文
条件 ? 条件がt...]]></description><link>https://zenn.dev/hayatech/articles/js-ternary-operator</link><guid isPermaLink="true">https://zenn.dev/hayatech/articles/js-ternary-operator</guid><pubDate>Sat, 01 Feb 2025 06:29:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zJVYOcLZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590JavaScript%25E3%2580%2591%25E4%25B8%2589%25E9%25A0%2585%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:HayaTech%2528%25E3%2581%25AF%25E3%2582%2584%25E3%2581%25A6%25E3%2581%258F%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0YzBmNjVhMjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>HayaTech(はやてく)</dc:creator></item><item><title><![CDATA[TypeScriptのinferを使ってみる]]></title><description><![CDATA[TypeScriptの型システムはとても強力で、コードの安全性や明瞭性を向上させるための様々な機能が備わっています。その中でも infer キーワードは、条件型の中で型の一部を動的に抽出するのに役立ちます。この記事では、infer の基本的な使い方から実践的な例まで、幅広く解説していきます。


 1. inferって何？
infer は、TypeScriptの条件型の中で使われるキーワードです。
具体的には、ある型から内部にある型情報を抜き出したい場合に使用します。
たとえば、配列やPromise、関数の戻り値など、ある型の「中身」を取り出すのに最適です。
基本の構文:
type Ex...]]></description><link>https://zenn.dev/ktrszk/articles/87377cf4471e3f</link><guid isPermaLink="true">https://zenn.dev/ktrszk/articles/87377cf4471e3f</guid><pubDate>Sat, 01 Feb 2025 02:51:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MLu8qxPd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25AEinfer%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kotaro%2520Suzuki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lXc3F4bl9xenpWS2duS0l0TjctNFNLOEh4dzhmaDY5bnNBQ3I0NGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kotaro Suzuki</dc:creator></item><item><title><![CDATA[reformatter.elを使って色々な言語のフォーマッターを一元管理する]]></title><description><![CDATA[
 はじめに
プログラムを書いてセーブ時にフォーマットを実行する。当たり前にやってることと思いますが複数のプログラミング言語を使う環境で言語ごとにフォーマッターを設定していくのは大変です。そこで最近 Emacs の reformatter.el というパッケージを使って複数のフォーマッターを一元管理する方法を見つけたので紹介します。

 emacs-reformatter
今回利用するパッケージはこちらです。
https://github.com/purcell/emacs-reformatter
reformatterという名前ですがパスの通ったCLIコマンドであればフォーマッターに限...]]></description><link>https://zenn.dev/glassonion1/articles/9dcc961824314c</link><guid isPermaLink="true">https://zenn.dev/glassonion1/articles/9dcc961824314c</guid><pubDate>Sat, 01 Feb 2025 01:30:55 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--fLg_IUHp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:reformatter.el%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E8%2589%25B2%25E3%2580%2585%25E3%2581%25AA%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%2583%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E4%25B8%2580%25E5%2585%2583%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:glassonion1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExMzcxN2Y0ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glassonion1</dc:creator></item><item><title><![CDATA[EmacsでTree-Sitterによる新しいモードを利用する方法]]></title><description><![CDATA[
 はじめに
最近 Tree-Sitter という構文解析を利用したシンタックスハイライトが流行っています。Emacs でもバージョン29.1から Tree-Sitter に対応したモードを利用できるようになったので導入してみました[1]。

 Tree-Sitterとは
Tree-Sitter については色々なサイトで説明されているので割愛します。詳細を知りたい場合はこちらの記事がおすすめです。
https://apribase.net/2024/06/12/emacs-treesit-ts-mode/
ちなみに Emacs で Tree-Sitter を利用する場合は Treesit...]]></description><link>https://zenn.dev/glassonion1/articles/20752bb8d2cf98</link><guid isPermaLink="true">https://zenn.dev/glassonion1/articles/20752bb8d2cf98</guid><pubDate>Sat, 01 Feb 2025 01:22:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1uNEYuue--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Emacs%25E3%2581%25A7Tree-Sitter%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258B%25E6%2596%25B0%25E3%2581%2597%25E3%2581%2584%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:glassonion1%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ExMzcxN2Y0ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>glassonion1</dc:creator></item><item><title><![CDATA[[TensorFlow.js+MediaPipe Hands]気軽にロマンを探せるアプリを作った]]></title><description><![CDATA[
 はじめに
人はロマン（おっぱい）を求めてしまう生き物です。特にストレスが溜まったらおっぱいに癒されたい、そう思うことは少なくないかと思います。
けど手軽な場所におっぱいがない、そんな人のためにどこでもおっぱいを探すことができるアプリを作りました。
https://x.com/toffy_dev/status/1884010569826721952
※音が鳴るので注意してください
中身はMediaPipe Handsを使って結構真面目に手の位置を取っているので、今回はMediaPipe Handsモデルを使った手の検出方法などに視点を当てて書いていきたいと思います。
アプリ: http...]]></description><link>https://zenn.dev/yui/articles/1e5df7fd0ea872</link><guid isPermaLink="true">https://zenn.dev/yui/articles/1e5df7fd0ea872</guid><pubDate>Fri, 31 Jan 2025 17:11:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6uS5otD3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BTensorFlow.js%252BMediaPipe%2520Hands%255D%25E6%25B0%2597%25E8%25BB%25BD%25E3%2581%25AB%25E3%2583%25AD%25E3%2583%259E%25E3%2583%25B3%25E3%2582%2592%25E6%258E%25A2%25E3%2581%259B%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yui%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVjMGIyNzFhZWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yui</dc:creator></item><item><title><![CDATA[画像処理100本ノックに挑戦｜アフィン変換(拡大縮小)（029/100）]]></title><description><![CDATA[
 これはなに？
画像処理100本ノックを、TypeScriptとlibvipsで挑戦してみる記事の29本目です。

 前回
https://zenn.dev/nyagato_00/articles/bd83bc3148f4ce

 実装

 お題

アフィン変換を用いて、(1)x方向に1.3倍、y方向に0.8倍にリサイズせよ。
また、(2) (1)の条件に加えて、x方向に+30、y方向に-30だけ平行移動を同時に実現せよ。

https://github.com/minido/Gasyori100knock-1/tree/master/Question_21_30#q29-アフィン変換...]]></description><link>https://zenn.dev/nyagato_00/articles/9b7aa704309aaa</link><guid isPermaLink="true">https://zenn.dev/nyagato_00/articles/9b7aa704309aaa</guid><pubDate>Fri, 31 Jan 2025 13:03:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--44rXFBi4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%2594%25BB%25E5%2583%258F%25E5%2587%25A6%25E7%2590%2586100%25E6%259C%25AC%25E3%2583%258E%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AB%25E6%258C%2591%25E6%2588%25A6%25EF%25BD%259C%25E3%2582%25A2%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25B3%25E5%25A4%2589%25E6%258F%259B%2528%25E6%258B%25A1%25E5%25A4%25A7%25E7%25B8%25AE%25E5%25B0%258F%2529%25EF%25BC%2588029%252F100%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nyagato_00%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MTVKUVk3SjNOUG1kcGlMeWdfWUt3blZzaTRpWDRoYjU1c21UTTk3c1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nyagato_00</dc:creator></item><item><title><![CDATA[【OpenAI API × TypeScript】インタラクティブなチャットボットの開発]]></title><description><![CDATA[
 OpenAI API × TypeScriptでインタラクティブなチャットボットを開発
https://github.com/sorein-mio/chatbot

 はじめに
OpenAI APIを活用したインタラクティブなチャットボットアプリケーションを開発したので、ここに記録として残します。
TypeScriptとReactを使用して構築され、マークダウン形式での応答をサポートしています。

 デモ画面

 チャットインターフェース

シンプルで使いやすいインターフェースを心がけました。マークダウン形式での表示やコードブロックにも対応し、プログラミング関連の会話も快適に行えます...]]></description><link>https://zenn.dev/sorein/articles/chatbot_start</link><guid isPermaLink="true">https://zenn.dev/sorein/articles/chatbot_start</guid><pubDate>Fri, 31 Jan 2025 08:32:12 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lWIN8mH1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590OpenAI%2520API%2520%25C3%2597%2520TypeScript%25E3%2580%2591%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25AA%25E3%2583%2581%25E3%2583%25A3%25E3%2583%2583%25E3%2583%2588%25E3%2583%259C%25E3%2583%2583%25E3%2583%2588%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sorein%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q2NmRlODQ3Y2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sorein</dc:creator></item><item><title><![CDATA[Branded Typeを活用したドメイン知識の表現]]></title><description><![CDATA[メディカルフォースでCTOをしている畠中です。
メディカルフォースでは新規事業として警備業界向けのSaaS「警備フォース」を開発しています。
「警備フォース」ではDDDおよびオニオンアーキテクチャを積極的に取り入れており、そちらで用いられているtipsについて共有できればと思っております。

 要旨
かなりの長期間システムを運用する場合、DDDは強力な武器になると考えています。
コードを高凝集・低結合を保つことができ、変更がある際の変更箇所が明確になるという点と変更を行なった際の影響範囲が明確になるという点で特に価値を発揮します。
DDDにおいてドメイン層の中で不正なentityが発生し...]]></description><link>https://zenn.dev/medicalforce/articles/8b88e7e89740f8</link><guid isPermaLink="true">https://zenn.dev/medicalforce/articles/8b88e7e89740f8</guid><pubDate>Fri, 31 Jan 2025 08:00:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8c0mmEHi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Branded%2520Type%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2583%2589%25E3%2583%25A1%25E3%2582%25A4%25E3%2583%25B3%25E7%259F%25A5%25E8%25AD%2598%25E3%2581%25AE%25E8%25A1%25A8%25E7%258F%25BE%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E7%2595%25A0%25E4%25B8%25AD%25E7%25BF%2594%25E4%25B8%2580%252F%25E3%2583%25A1%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25B9CTO%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkyZjY0YWIzNTQuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A1%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25AB%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2582%25B9%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZFlQbjY1TWJkaW1Za25uZGRPbFFmaHdBemJwbzc0TXQ5VlowMlo9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>畠中翔一/メディカルフォースCTO</dc:creator></item><item><title><![CDATA[既存の型に対してzodのスキーマを実装する]]></title><description><![CDATA[
 背景
TypeScriptとzodを組み合わせる場合、一般的にzodのスキーマから型を生成する方法が使われます。
const shapeSchema = z.object({
  name: z.string(),
})

type Shape = z.infer&lt;typeof shapeSchema&gt;
このアプローチは型の作成とスキーマの定義を矛盾なく実装できるため便利ですが、次のような場合に課題が生じます。

外部の型定義ファイルを参照する必要がある場合
型定義が既に存在している場合

!
外部の型定義を参照する場合、ACL（腐敗防止層）を利用して解決する場合がありま...]]></description><link>https://zenn.dev/aprender/articles/0cc87245977602</link><guid isPermaLink="true">https://zenn.dev/aprender/articles/0cc87245977602</guid><pubDate>Fri, 31 Jan 2025 05:24:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XFsZTajQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%2597%25A2%25E5%25AD%2598%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6zod%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259E%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%25BF%25E3%2581%25BF%25E3%2581%25A4%25E3%2581%258D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIxNWYyNmY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Aprender%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1NWUwYWQyMGEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みみつき</dc:creator></item></channel></rss>