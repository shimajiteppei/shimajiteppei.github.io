<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 08 Jan 2025 06:49:51 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Streamcordが微妙だったのでTwitch配信通知Botを作った]]></title><description><![CDATA[
 理由

Streamcordだとタイトルとジャンルの通知を絞る設定が有料だった
エモート限定モードの切り替え時の通知がなかった
今後Kickや他のプラットフォームの通知を追加したいから


 環境など

Rust
Serenity
DynamoDB


 想像以上にDynamoDBが好感触だった
今までずっとFirestoreを使っていましたが、勉強も兼ねて今回はDynamoDBを使ってみました。
加えて費用面で無料枠内に抑えられそうなのと、レイテンシーに優れるのも高ポイントでした。

 Serenityについて
破壊的変更があるとの記事を見ましたが、twilightよりも人気そうだ...]]></description><link>https://zenn.dev/wawawa1234/articles/448d588fc4f2b2</link><guid isPermaLink="true">https://zenn.dev/wawawa1234/articles/448d588fc4f2b2</guid><pubDate>Wed, 08 Jan 2025 04:57:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MZwTafXc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Streamcord%25E3%2581%258C%25E5%25BE%25AE%25E5%25A6%2599%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7Twitch%25E9%2585%258D%25E4%25BF%25A1%25E9%2580%259A%25E7%259F%25A5Bot%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%258F%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2EyM2Y0ZTRlNDAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>わー</dc:creator></item><item><title><![CDATA[ssh-keygenしたときに出るあのキラキラの正体]]></title><description><![CDATA[LabBaseテックカレンダー Advent Calendar 2024の12月17日分のアドベントカレンダーです。

 このブログのゴール


ssh-keygenしたときに出るあのキラキラの正体を突き止めて、Rustで完全再現する⭐️



再現するだけにとどまらずオエー鳥AAで似たようなものを作る🐦‍⬛




コードはここ

https://github.com/ie-Yoshisaur/drunken-bishop/tree/main/src

出典

http://www.dirk-loss.de/sshvis/drunken_bishop.pdf
https://githu...]]></description><link>https://zenn.dev/labbase/articles/526f82905cbc68</link><guid isPermaLink="true">https://zenn.dev/labbase/articles/526f82905cbc68</guid><pubDate>Tue, 07 Jan 2025 17:28:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--euW8OETK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ssh-keygen%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E5%2587%25BA%25E3%2582%258B%25E3%2581%2582%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25A9%25E3%2582%25AD%25E3%2583%25A9%25E3%2581%25AE%25E6%25AD%25A3%25E4%25BD%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Sano%2520%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E4YWMzOWY1YjUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:LabBase%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25BC%25E3%2583%2588%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0Mjc3M2M5MjIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sano🐡</dc:creator></item><item><title><![CDATA[チェスのプログラムを作って各プログラム言語の比較評価をした]]></title><description><![CDATA[これは、とある方が7つのプログラム言語を用いて、同じチェスのプログラムを作成した話です。
7つの言語とは、C++、C#、Go、Zig、Odin、Python、Rustの7つの言語を用いて、それぞれチェスプログラムを作成して比較した結果を動画にまとめています。
何故、各言語で評価したのかは、それぞれの言語でのプログラム生産コストとパフォーマンスを評価するためです。
https://www.youtube.com/watch?v=cFNBIYwht8o
0:00 イントロ
1:18 アルゴリズムの説明
6:10 C++言語のコード評価
9:25 C#言語のコード評価
10:48 Go言語のコ...]]></description><link>https://zenn.dev/ohkan/articles/904b2b624304ff</link><guid isPermaLink="true">https://zenn.dev/ohkan/articles/904b2b624304ff</guid><pubDate>Tue, 07 Jan 2025 12:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LePRJ2yb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2581%25E3%2582%25A7%25E3%2582%25B9%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%2590%2584%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%25E8%25A9%2595%25E4%25BE%25A1%25E3%2582%2592%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%258E%258B%25E5%2586%25A0%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M4MmYxZmNiNTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>王冠</dc:creator></item><item><title><![CDATA[Rustプロジェクトのビルド高速化に関するベストプラクティス（ローカル環境編）]]></title><description><![CDATA[
 はじめに
こんにちは。Fairy Devices プロダクト開発部の河野（かわの）です。業務ではRustを使ったWebバックエンドサービスの開発や、AWSを使ったインフラ構築を担当しています。Rust歴は約8年。rust-lang-jp等のRustのコミュニティーではtatsuya6502として活動しています。
この記事ではRustプロジェクトのビルドにかかる時間を削減する方法を紹介します。
Rustで開発しているとビルド時間が長くなることがあります。たとえばasync関係のクレートを導入すると、間接的に依存しているクレートの数が多く、ビルド時間が急に伸びることがあります。特にCI/...]]></description><link>https://zenn.dev/fairydevices/articles/59cd718341da58</link><guid isPermaLink="true">https://zenn.dev/fairydevices/articles/59cd718341da58</guid><pubDate>Tue, 07 Jan 2025 05:07:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---s2wCmZZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E9%25AB%2598%25E9%2580%259F%25E5%258C%2596%25E3%2581%25AB%25E9%2596%25A2%25E3%2581%2599%25E3%2582%258B%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%25EF%25BC%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E7%2592%25B0%25E5%25A2%2583%25E7%25B7%25A8%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:tatsuya6502%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E5MjE4ODkwNjAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2595%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%2587%25E3%2583%2590%25E3%2582%25A4%25E3%2582%25BB%25E3%2582%25BA%25E5%2585%25AC%25E5%25BC%258F%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l6RDlkcnN2MExfUXZna2NYS3NwRG9MbFRYZnlTU2c0WkhoYkhhS3c9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tatsuya6502</dc:creator></item><item><title><![CDATA[仕事初めだしRustのクロスコンパイル環境を整えよう(Windows/MacOS/iOS/iPad/Android)]]></title><description><![CDATA[!
加筆中（2025/1/6現在）

執筆当時は2025年1月6日(月)ですが、現実を見たくないので有給休暇を取得しています。年末年始でRustクロスコンパイル環境を整備したので、その作業メモです。

 TL;DR

参考リポジトリを見たほうが早いです

https://github.com/tk88e/RustCrossCompile

Rustで書いたドメインロジックをWindows(C#)/MacOS,iOS,iPad(Swift)/Android(Kotlin)で呼び出すための環境整備のメモです
言語間の調整というよりもApple SiliconやIntel,ARMなどSoC(S...]]></description><link>https://zenn.dev/tk88e/articles/539de35854be4c</link><guid isPermaLink="true">https://zenn.dev/tk88e/articles/539de35854be4c</guid><pubDate>Mon, 06 Jan 2025 14:23:03 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ArXl08L8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%2595%25E4%25BA%258B%25E5%2588%259D%25E3%2582%2581%25E3%2581%25A0%25E3%2581%2597Rust%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E3%2581%2588%25E3%2582%2588%25E3%2581%2586%2528Windows%252FMacOS%252FiOS%252FiPad%252FAndroid%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tk88e%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MzFkN2EwN2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tk88e</dc:creator></item><item><title><![CDATA[Rust を WebAssembly にコンパイルして JavaScript から呼び出す方法のまとめ]]></title><description><![CDATA[以前の記事にも書いたように、Rust コードを JavaScript でコンパイルするのは wasm-pack を使うと簡単にできます。しかし、wasm-pack が使えない場合はいくつか面倒な点があったり、wasm-pack を使う場合でも若干引っかかる点があったりします。
この記事では、JavaScript 側のビルドツールとしては Vite を使う前提で説明します。
また、ツールやライブラリのバージョンは以下を前提とします。

rustc 1.83.0
emcc 3.1.74
vite 5.4.11
vite-plugin-top-level-await 1.4.4


 wasm...]]></description><link>https://zenn.dev/semiexp/articles/96e1b65d9a38aa</link><guid isPermaLink="true">https://zenn.dev/semiexp/articles/96e1b65d9a38aa</guid><pubDate>Mon, 06 Jan 2025 10:22:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mIvlZi7b--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2582%2592%2520WebAssembly%2520%25E3%2581%25AB%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6%2520JavaScript%2520%25E3%2581%258B%25E3%2582%2589%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25AE%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:semiexp%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk0M2JkNjUyOTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>semiexp</dc:creator></item><item><title><![CDATA[月刊「Rustは低レイヤーで使ってもunsafeだらけになるから意味がない」廃刊のお知らせ]]></title><description><![CDATA[組込みRustや自作OSなどにおいて、従来言語より高い安全性があるとされているRustは注目される一方、Rustでも低レイヤー分野で頻発するメモリアクセスやインラインアセンブラなどでunsafeブロックが存在が多くなりがちです。
このunsafeブロックが多くなるので、結局Rustでこのような低レイヤー分野を触っても意味がないのでは？安全ではないのでは？という疑問が投げかけられることがしばしばあります。
筆者はTwitterや過去のブログで、組込みRustにおいてのunsafeとの付き合い方について触れていきましたが、内容としては分散していたので今一度この疑問に対するアンサーをまとめるこ...]]></description><link>https://zenn.dev/garasubo/articles/59b29c6cdd3f16</link><guid isPermaLink="true">https://zenn.dev/garasubo/articles/59b29c6cdd3f16</guid><pubDate>Sun, 05 Jan 2025 14:16:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7Grqzbt5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%2588%25E5%2588%258A%25E3%2580%258CRust%25E3%2581%25AF%25E4%25BD%258E%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25A4%25E3%2583%25BC%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2582%2582unsafe%25E3%2581%25A0%25E3%2582%2589%25E3%2581%2591%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258B%25E3%2581%258B%25E3%2582%2589%25E6%2584%258F%25E5%2591%25B3%25E3%2581%258C%25E3%2581%25AA%25E3%2581%2584%25E3%2580%258D%25E5%25BB%2583%25E5%2588%258A%25E3%2581%25AE%25E3%2581%258A%25E7%259F%25A5%25E3%2582%2589%25E3%2581%259B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AC%25E3%2583%25A9%25E3%2582%25B9%25E3%2583%259C%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFiYWY4YTQ4NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ガラスボー</dc:creator></item><item><title><![CDATA[自作コンパイラのTUIデバッガーを作った]]></title><description><![CDATA[
 はじめに
以下の記事を見て、いいなと思ってやってみた
https://zenn.dev/msakuta/articles/723ee6ae3b7eca

 作ったもの

ソースコード(参考程度に)
https://github.com/myuon/iolite/blob/main/src/tui_debbuger.rs
機能としては以下のようなものがある

ソースコードの表示
disassembleの表示
スタックフレーム、スタックの表示
ラベルとアドレスの表示
ブレークポイントの設定、1命令の実行、resume、次のcall/returnまでの実行(step out相当)


 技...]]></description><link>https://zenn.dev/myuon/articles/e99fb590ba9c1c</link><guid isPermaLink="true">https://zenn.dev/myuon/articles/e99fb590ba9c1c</guid><pubDate>Sun, 05 Jan 2025 11:52:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kJQMfBRQ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E4%25BD%259C%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25A9%25E3%2581%25AETUI%25E3%2583%2587%25E3%2583%2590%25E3%2583%2583%25E3%2582%25AC%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myuon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM1MTAwYjg1ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myuon</dc:creator></item><item><title><![CDATA[ABC387:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 387のA~D問題をRustで解いた際の解法をまとめました。

 A問題

問題

https://atcoder.jp/contests/abc387/tasks/abc387_a

解説

A + Bの二乗を計算します。

コード

use proconio::input;
fn main() {
	input!{
		a: usize, b: usize,
	}
	println!("{}", (a+b)*(a+b));
}

 B問題

問題

https://atcoder.jp/contests/abc387/tasks/ab...]]></description><link>https://zenn.dev/nakst_hide/articles/9b07bde65e6603</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/9b07bde65e6603</guid><pubDate>Sun, 05 Jan 2025 11:25:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5pCaFZpK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC387%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[超簡単なブラウザを作る(HTMLとレンダリングエンジン・入門編)]]></title><description><![CDATA[
 はじめに
HTMLを受け取ってレンダリングするだけの超簡単なブラウザを作りました。

リポジトリ
https://github.com/myuon/byo-browser
参考にした本
https://amzn.asia/d/jk6vPi1
こちらの本を年末年始に読んだことをきっかけに、同じような感じでHTMLのパーサーとレンダラーを書くのも面白いかなと思って始めました。
こちらの本では、C言語を使ってHTMLのパーサー、レンダリングを行うようなものです。こちらの本では /dev/fb0 へ直接書き込むことでGUIを再現していますが、今回はRustとwinitを使って作成することにし...]]></description><link>https://zenn.dev/myuon/articles/405639cc7efa0a</link><guid isPermaLink="true">https://zenn.dev/myuon/articles/405639cc7efa0a</guid><pubDate>Sun, 05 Jan 2025 11:04:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QRSRKiwk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%25B6%2585%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2528HTML%25E3%2581%25A8%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%25B3%25E3%2583%25BB%25E5%2585%25A5%25E9%2596%2580%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:myuon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM1MTAwYjg1ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>myuon</dc:creator></item><item><title><![CDATA[Androidアプリ開発者もRustを使いたい！]]></title><description><![CDATA[
 AndroidでRustが使われているみたいだけど...？
近年、RustがAndroid界隈でも活発です。
Rustは、メモリ安全性、並行性、パフォーマンスの向上など、多くの利点を持つプログラミング言語です。Googleも既存の機能をRustで書き直すことで、メモリリークによるバグを劇的に減らすことができたと発表しています。
https://security.googleblog.com/2024/09/eliminating-memory-safety-vulnerabilities-Android.html
しかしそれは同じAndroidと言ってもアプリよりさらに下の深い部分....]]></description><link>https://zenn.dev/sakuram_dev/articles/android-app-with-rust</link><guid isPermaLink="true">https://zenn.dev/sakuram_dev/articles/android-app-with-rust</guid><pubDate>Sun, 05 Jan 2025 10:42:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YNc72aoA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Android%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2582%2582Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:sakuram%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkZDg3NWRlMzIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>sakuram</dc:creator></item><item><title><![CDATA[[rust] クレート（crate）とは？]]></title><description><![CDATA[rustには２種類のクレートがある

ライブラリクレート

再利用可能な機能やコードを提供するクレート。
他のプロジェクトやクレートで利用されます。
例: serde (JSONシリアライズ/デシリアライズライブラリ)


バイナリクレート

実行可能なプログラムを提供するクレート。
メイン関数 (main) を含み、コンパイル後に実行可能ファイルになります。
例: コマンドラインツールなどのアプリケーション。




 クレートの構成
クレートは主に以下の要素で構成されています。


ソースコード
Rustファイル (.rs) で記述されたコード。
ライブラリクレートの場合はsrc/l...]]></description><link>https://zenn.dev/tommy_aki/articles/f9f445dade8460</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/f9f445dade8460</guid><pubDate>Sun, 05 Jan 2025 08:48:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--TiiNJpaG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255Brust%255D%2520%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25EF%25BC%2588crate%25EF%25BC%2589%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[AI時代にこそRustだと思う話]]></title><description><![CDATA[
 はじめに

本記事は AI時代にこそTDDだと思う話 https://zenn.dev/akfm/articles/tdd-with-copilot をパクってオマージュしてタイトルをつけたが、特にそれには言及しない。
本記事はRustを好きで使用している人間が書くポジショントークということを前提に読んでほしい。また、現状でRustを選択するべきだという主張をする記事ではなく、長期的に見るとRustとAIの組み合わせは親和性が高くなるのではないかという個人的予想を記載しているのみである。
本記事は自分用に雑に書いていた箇条書きメモをo1と対話しながら人に見せられる構造にまとめたもので...]]></description><link>https://zenn.dev/kbwok/articles/eb0c36467ebbec</link><guid isPermaLink="true">https://zenn.dev/kbwok/articles/eb0c36467ebbec</guid><pubDate>Sat, 04 Jan 2025 16:08:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4ohF1jHR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AI%25E6%2599%2582%25E4%25BB%25A3%25E3%2581%25AB%25E3%2581%2593%25E3%2581%259DRust%25E3%2581%25A0%25E3%2581%25A8%25E6%2580%259D%25E3%2581%2586%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kbwo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxMzQ1ZGZjYjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kbwo</dc:creator></item><item><title><![CDATA[Tauri 2.0とElectronの比較（クロスプラットフォームデスクトップアプリ開発フレームワーク）]]></title><description><![CDATA[クロスプラットフォームデスクトップアプリケーション開発の分野では、Electron が長らく主要なフレームワークとして君臨してきました。しかし近年、Rust製の軽量フレームワークである Tauri が注目を集めています。特に 2024 年 10 月にリリースされた Tauri 2.0 は、モバイルサポートの追加など大幅な進化を遂げ、Electron の有力な対抗馬として期待されています。
本稿では、Tauri 2.0 と Electron を様々な観点から比較検討し、それぞれのメリット・デメリットを明らかにします。

 1. Tauri 2.0 とは
Tauri は、Rust をバックエ...]]></description><link>https://zenn.dev/vallis/articles/032b121ffba3ee</link><guid isPermaLink="true">https://zenn.dev/vallis/articles/032b121ffba3ee</guid><pubDate>Sat, 04 Jan 2025 05:27:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jsEB6A1l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25202.0%25E3%2581%25A8Electron%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%25EF%25BC%2588%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25A9%25E3%2583%2583%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E9%2596%258B%25E7%2599%25BA%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Sho%2520Yamane%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc0MDliOWY0M2UuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:VALLIS%252C%2520LLC.%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dzTEE2dE9udmhaV2F1dEc1MHFqMFJjLWxnbDJfdnB6ZjlBMjV1ZVE9czI1MC1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sho Yamane</dc:creator></item><item><title><![CDATA[ChromeOS FlexでRustを使ってLチカをするまで]]></title><description><![CDATA[!
情報は2025年1月現在のものであり，今後変化する可能性が十分にあります．


 筆者のマシン環境

VersaPro(ChromeOS Flex in Ultrabook Board)

設定 -&gt; ChromeOSについて -&gt; 診断



 ChromeOS Flexのインストール

Chromebook リカバリ ユーティリティ - Chromeウェブストア
ここから拡張機能をGoogle Chromeに追加して指示に従いつつリカバリメディアを作成

公式ヘルプ がわかりやすいかもしれない


 起動後の便利設定

逆スクロールはONにしといたほうがいい
デバイス...]]></description><link>https://zenn.dev/placeless/articles/zenn_article-17</link><guid isPermaLink="true">https://zenn.dev/placeless/articles/zenn_article-17</guid><pubDate>Fri, 03 Jan 2025 16:27:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zIPX8lR5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ChromeOS%2520Flex%25E3%2581%25A7Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6L%25E3%2583%2581%25E3%2582%25AB%25E3%2582%2592%25E3%2581%2599%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yoshitaka%2520Naraoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS0VmQkZHLW5HaTlYX192SU4xUGNHUVFiTFFMOV9wYmZ5VWVVdlhlNUpfY291ZD1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yoshitaka Naraoka</dc:creator></item><item><title><![CDATA[競技プログラミングの作問支援ツール kuroe を開発しました]]></title><description><![CDATA[
 kuroe

https://crates.io/crates/kuroe
https://github.com/polylogK/kuroe

kuroe は Rust で実装された軽量かつステートレスな競技プログラミング作問支援ツールです。
kuroe は，既存の作問支援ツールの Rime よりもラフに使えるツールを目指して開発されました。
Rime の置き換えを目指しているわけではなく，あくまでもユースケースの切り出しです。

想定ユースケース

思いついた問題を試しに作ってみる
yukicoder 用に一問だけ作成する


非想定ユースケース

CI による自動テスト
チーム...]]></description><link>https://zenn.dev/polylogk/articles/4dc19bfb0c99c2</link><guid isPermaLink="true">https://zenn.dev/polylogk/articles/4dc19bfb0c99c2</guid><pubDate>Fri, 03 Jan 2025 11:23:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OWfDMfLf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AB%25B6%25E6%258A%2580%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E4%25BD%259C%25E5%2595%258F%25E6%2594%25AF%25E6%258F%25B4%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%2520kuroe%2520%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:polylogK%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p4dVlqRFdKa1B3aENMOVZmb3oxQ1FrVGxNVXJtZWFrcjBGcXZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>polylogK</dc:creator></item><item><title><![CDATA[[rust] someとは？]]></title><description><![CDATA[rustの標準ライブラリで提供されているOption列挙型のバリアント（列挙子）の１つ。

 Option列挙型の概要
Optionは、値が「存在する」または「存在しない」という状態を表すための列挙型以下の２つのバリアントを持つ。

Some(T):値が存在する場合に使用される。内部に値Tを保持する
None:値が存在しない場合に使用する


 宣言は以下のようになっている
enum Option&lt;T&gt;{
    Some(T),
    None,
}
]]></description><link>https://zenn.dev/tommy_aki/articles/198820de241d0a</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/198820de241d0a</guid><pubDate>Fri, 03 Jan 2025 11:23:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_m6liKKf--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:%255Brust%255D%2520some%25E3%2581%25A8%25E3%2581%25AF%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[[備忘録15]作って学ぶブラウザのしくみ / HTTPを実装する/ ストリームの構築(リクエスト、レスポンス）]]></title><description><![CDATA[TCPは、データをストリームとして扱う。ストリームとは連続したデータの流れを示す。データは小さいパケットに文亜kつされますが、受信側では連続したデータとして復元される。
!
HTTP2.0では一度確立したTCP接続を使い回してhttp通信を複数回実行するマルチプレクシング(multiplexing)が導入された。（私のこの記事でも説明しています）(外部参照記事）
そこで仮想的な接続の単位がストリームと呼ばれ、一対のHTTPリクエストとHTTPレスポンスが一つのストリームに所属します

TCPでは３ウェイハンドシェイクでコネクションを確立します。これにより高い信頼性を確保します。
noli...]]></description><link>https://zenn.dev/tommy_aki/articles/cca7387ea46516</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/cca7387ea46516</guid><pubDate>Fri, 03 Jan 2025 11:02:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BT-zzrPb--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B215%255D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%2520%252F%2520HTTP%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%252F%2520%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%25AE%25E6%25A7%258B%25E7%25AF%2589%2528%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2580%2581%25E3%2583%25AC%25E3%2582%25B9%25E3%2583%259D%25E3%2583%25B3%25E3%2582%25B9%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[【Rust】YewとAxumの連携]]></title><description><![CDATA[
 Yewで作ったWebアプリケーションをAxumで作ったWebサーバーで公開する
!
本記事は一切の安全性について担保するものではありません。
また、連携を自動化するものではありません。

Yewは、「Webアプリケーションフレームワーク」です。
https://yew.rs/ja/
一方Axumは、「Webアプリケーションフレームワーク」です。
https://github.com/tokio-rs/axum
🤔🤔🤔

 二者の区別
そもそもWeb技術には、表裏の別があります。ブラウザーに表出して見える箇所、つまるところ画面を形作るものを「front end」と、通信など、ブラウザー...]]></description><link>https://zenn.dev/amenaruya/articles/2da53729e574c7</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/2da53729e574c7</guid><pubDate>Fri, 03 Jan 2025 01:25:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kdkGy-bd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591Yew%25E3%2581%25A8Axum%25E3%2581%25AE%25E9%2580%25A3%25E6%2590%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[AtCoderでエディタからテストと提出が出来るまで]]></title><description><![CDATA[

 概要
AtCoderを始めたのですが、エディタからテストや提出ができるようになったので、その方法を紹介します。
最終的には以下のようなディレクトリ構成になります。
atcoder_rustをgit管理していてエディタで開いて実際にコーディングするのはabc386などコンテストのディレクトリです。
コンテストの中のディレクトリ構成は比較的自由に変更可能です。
(問題毎にディレクトリ分けてmain.rsを作ったりとかetc)
各々好きなように設定していただければと思います。
atcoder_rust
├── abc386
│   ├── Cargo.lock
│   ├── Cargo...]]></description><link>https://zenn.dev/tooyya/articles/b22a84994e131e</link><guid isPermaLink="true">https://zenn.dev/tooyya/articles/b22a84994e131e</guid><pubDate>Thu, 02 Jan 2025 11:43:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--IEHLWGD_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:AtCoder%25E3%2581%25A7%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2581%258B%25E3%2582%2589%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A8%25E6%258F%2590%25E5%2587%25BA%25E3%2581%258C%25E5%2587%25BA%25E6%259D%25A5%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tooyya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y2YzEwMTQ3ZGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tooyya</dc:creator></item></channel></rss>