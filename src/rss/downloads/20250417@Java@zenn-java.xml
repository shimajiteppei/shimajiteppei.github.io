<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Thu, 17 Apr 2025 01:18:22 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Javaでファイルを使用中、inodeレベルでは何が起きるか]]></title><description><![CDATA[Java でファイルを開いたまま mv で置き換えた場合、Java プログラムは新しい内容を読み取るのか？
Linux の inode の仕組みと合わせて挙動を確認してみました。

 結論：Javaはinodeを保持し続ける
Linux では「ファイル名」と「実体（inode）」は別物です。
Java はファイルを open() した時点で inode に紐付けられるため、途中で mv によりファイルが入れ替わっても、開いた時点の inode を参照し続けました。

 ファイル構成と inode 確認
テキストファイルに「1, 2, 3, 4, 5」と書いて、Java プログラムで読み取...]]></description><link>https://zenn.dev/daikinakajima/articles/java-inode-ls-mv-check</link><guid isPermaLink="true">https://zenn.dev/daikinakajima/articles/java-inode-ls-mv-check</guid><pubDate>Wed, 16 Apr 2025 03:00:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--cvQI0Ol---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25A7%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E4%25B8%25AD%25E3%2580%2581inode%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AF%25E4%25BD%2595%25E3%2581%258C%25E8%25B5%25B7%25E3%2581%258D%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daiki%2520Nakajima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YTJLTDZpWDVRM2VQZHJ0OUk5TXJlUC1OcTV4cGhQQmxXNmoxWWk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki Nakajima</dc:creator></item><item><title><![CDATA[継承（extends）、多態性（オーバーライド）]]></title><description><![CDATA[
 まえがき
chat-gptで作った学習ロードマップをプログラミング初学者が勉強する試みです
ロードマップはchat-gptを使用してますが、学習は公式のチュートリアルや技術系ブログなどを参考にしています
Goの復習も兼ねているのでGoとの違いについても言及します
今回は継承（extends）、多態性（オーバーライド）について内容をまとめていきます

 継承とは？

 概要
クラスAからクラスBへと派生させることで、クラスAのフィールドとメソッドをクラスBへと継承させること
それぞれの関係性はそれぞれからみて


クラスA
スーパークラス（基本クラス、親クラスとも呼ぶ）


クラスB
...]]></description><link>https://zenn.dev/miya_miya/articles/fcdd59fb6a4c27</link><guid isPermaLink="true">https://zenn.dev/miya_miya/articles/fcdd59fb6a4c27</guid><pubDate>Tue, 15 Apr 2025 16:34:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--q0S6YLEr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25B6%2599%25E6%2589%25BF%25EF%25BC%2588extends%25EF%25BC%2589%25E3%2580%2581%25E5%25A4%259A%25E6%2585%258B%25E6%2580%25A7%25EF%25BC%2588%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:miya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjBLNnZLRXFYSzJFZVBmSG1WYnNuSXFvWlA2V1J3a2ZoV0FXeXdsZFp1NV92bjdnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>miya</dc:creator></item><item><title><![CDATA[[Java]GitHubにアップされているクイズ出題プログラムのソースコードを解析  （備忘録）]]></title><description><![CDATA[
 １．はじめに
Java の理解を深めるために、他のエンジニアが作成したソースコードを解析してみました。
一部ソースコードを、自分なりに修正しています。

 ２．サンプルプログラム

Game.java
import java.util.Scanner;

public class Game {
    public static void main(String[] args) {
        // 標準入力（通常はキーボード）からの入力内容を受け付ける
        Scanner scanner = new Scanner(System.in);
        int s...]]></description><link>https://zenn.dev/yama_kawa/articles/da7784e94364c5</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/da7784e94364c5</guid><pubDate>Tue, 15 Apr 2025 12:42:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3FLm1DLE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BJava%255DGitHubw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M1ZjYyZjIwYTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[Javaの「カプセル化」についてざっくりまとめてみた[Java初心者]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者Wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。
間違い等あれば、指摘いただけると助かります。

 対象読者

Javaを勉強中の方
Java SE Bronze試験を勉強中の方
Javaのカプセル化・データ隠蔽ついてざっくり知りたい方


 目次
1. 変更に強い設計とは
2. カプセル化
3. データ隠蔽
4. ア...]]></description><link>https://zenn.dev/wakinoza/articles/51352b66d4e342</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/51352b66d4e342</guid><pubDate>Tue, 15 Apr 2025 12:19:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lFXDWbmN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2580%258C%25E3%2582%25AB%25E3%2583%2597%25E3%2582%25BB%25E3%2583%25AB%25E5%258C%2596%25E3%2580%258D%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2596%25E3%2581%25A3%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%255BJava%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[(Java)PATH、JAVA_HOME、CLASSPATHとは]]></title><description><![CDATA[Javaプログラミングを実施する際によく見かける用語について、そこまで難しい概念ではないが、整理のため記事にする。(見つけ次第追記していく)

 PATH
これはJavaに限らずだが、Javaなどを自分のパソコンにインストールした際に「パスを通す」というワードを見かけると思う。その「パス」のこと。
大雑把に「パスを通す」とは何をしているかというと、ターミナルやコマンドプロンプト上でOSに実行させたいコマンドを登録するイメージ。

 詳細
まず、以下のコマンドをターミナルで入力してみる。
echo $PATH
私の環境では以下でした(多分荒らしまくっている)。
bobby% echo $P...]]></description><link>https://zenn.dev/bobby/articles/9006fc88de7942</link><guid isPermaLink="true">https://zenn.dev/bobby/articles/9006fc88de7942</guid><pubDate>Tue, 15 Apr 2025 12:17:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--EGXjWbUx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2528Java%2529PATH%25E3%2580%2581JAVA_HOME%25E3%2580%2581CLASSPATH%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2582%2599%25E5%25BF%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHAyRkVpcHVoYzZDOWoyMDJuTl9wckt6S3Nla1JUS3NGcEN2eTU2U0VlZFVrVjVBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>備忘</dc:creator></item><item><title><![CDATA[Gradleを学ぶ際によく使われる依存関係とは]]></title><description><![CDATA[
 はじめに
自分自身Javaを初学者として学ぶ際(今も)に、ビルドという言葉をよく目にした。
ビルド自体よくわからなかったが、更に出てくるのがGradle(もしくはMaven)で、依存関係の解消ツール、といった説明をよくされていた。
あまりイメージできなかったため、Javaを例にしながら依存関係・ビルドをまとめる。もし不備あれば訂正いただけると幸いです。

 そもそもビルドとは
ビルドとはなにか？～コンパイル・リンクとの違いを解説～によるとビルドとは、「ソースファイルから最終的な実行ファイルを作成すること」とのこと。これにはコンパイル・リンク(プログラムファイル(オブジェクトファイル・...]]></description><link>https://zenn.dev/bobby/articles/86fbef308eb617</link><guid isPermaLink="true">https://zenn.dev/bobby/articles/86fbef308eb617</guid><pubDate>Tue, 15 Apr 2025 10:41:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vg9vT_UR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Gradle%25E3%2582%2592%25E5%25AD%25A6%25E3%2581%25B6%25E9%259A%259B%25E3%2581%25AB%25E3%2582%2588%25E3%2581%258F%25E4%25BD%25BF%25E3%2582%258F%25E3%2582%258C%25E3%2582%258B%25E4%25BE%259D%25E5%25AD%2598%25E9%2596%25A2%25E4%25BF%2582%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2582%2599%25E5%25BF%2598%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHAyRkVpcHVoYzZDOWoyMDJuTl9wckt6S3Nla1JUS3NGcEN2eTU2U0VlZFVrVjVBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>備忘</dc:creator></item><item><title><![CDATA[JDBCの更新可能カーソルは自動コミットを無効にしないといけない]]></title><description><![CDATA[JDBC で ResultSet.deleteRow() を使ったところ、SQLCODE=-508（カーソルが行に位置していない）というエラーが発生しました。
原因は、自動コミットが有効なまま更新可能カーソルを使っていたことでした。
エラーコードから、カーソルとレコードの不整合かと思いましたが、実際には違ったため、注意しておくべき観点としてメモ。

 結論：autoCommit = false にする
更新可能カーソルで更新や削除は、以下の流れで行います。


SELECT ... FOR UPDATE でロック取得

rs.next() でカーソルを行に位置付け

rs.deleteR...]]></description><link>https://zenn.dev/daikinakajima/articles/jdbc-update-cursor-autocommit</link><guid isPermaLink="true">https://zenn.dev/daikinakajima/articles/jdbc-update-cursor-autocommit</guid><pubDate>Tue, 15 Apr 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qucGjCFy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JDBC%25E3%2581%25AE%25E6%259B%25B4%25E6%2596%25B0%25E5%258F%25AF%25E8%2583%25BD%25E3%2582%25AB%25E3%2583%25BC%25E3%2582%25BD%25E3%2583%25AB%25E3%2581%25AF%25E8%2587%25AA%25E5%258B%2595%25E3%2582%25B3%25E3%2583%259F%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E7%2584%25A1%25E5%258A%25B9%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2591%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daiki%2520Nakajima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YTJLTDZpWDVRM2VQZHJ0OUk5TXJlUC1OcTV4cGhQQmxXNmoxWWk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiki Nakajima</dc:creator></item><item><title><![CDATA[embulk-input-icebergを作りました]]></title><description><![CDATA[
 初めに
データエンジニアをやっていると少なくないケースでバックエンドがJavaであることがあり、Javaを勉強したいと思っていました。最近Apache Icebergに興味を持ち勉強している中で業務で使用しているEmbulkのプラグインにIcebergがないと思い、Javaの勉強がてら作ってみようと決心し作ってみました。
本当はoutputの方が需要はありそうだったのですが、実装の考慮点が少なそうなinputを選択してIcebergのプラグインを作成しました。
ソースコードとプラグインの使い方はGithubに公開するとともに、Mavenリポジトリに登録しています。

 完成までの道の...]]></description><link>https://zenn.dev/hashiba/articles/embulk-input-iceberg</link><guid isPermaLink="true">https://zenn.dev/hashiba/articles/embulk-input-iceberg</guid><pubDate>Mon, 14 Apr 2025 13:02:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hcvN43R6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:embulk-input-iceberg%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Shinichi%2520Hashiba%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqUGxmME5PSUREUHNlRXVodU1ZYm5JeTlhcUluaVRuV3plbThYZlE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Shinichi Hashiba</dc:creator></item><item><title><![CDATA[jenvでスムーズにJavaのバージョンを切り替えよう(mac)]]></title><description><![CDATA[
 概要
複数のJavaバージョンをディレクトリ単位で自動的に管理や切り替えをするバージョン管理ツールjenvの導入法、利用法についてのメモ。
大規模な開発でライブラリごとに異なるバージョンを使用する場合のめんどくさい切り替えを解消しましょう。

 この記事で伝えたいこと
筆者は、バージョン切り替えが必要になる状況で、.zshrcで複数のJAVA_HOMEを書いてコメントアウトし、いちいち書き換えていた。あまりにめんどくさいので自動で切り替える方法を習得する。

 解決したい課題


プロジェクト毎の環境設定の手間: 大規模開発環境において、プロジェクトやライブラリごとに使用するJava...]]></description><link>https://zenn.dev/slum_dunk/articles/0768d7f317a6ba</link><guid isPermaLink="true">https://zenn.dev/slum_dunk/articles/0768d7f317a6ba</guid><pubDate>Mon, 14 Apr 2025 11:08:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nylDG8lo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jenv%25E3%2581%25A7%25E3%2582%25B9%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25BA%25E3%2581%25ABJava%25E3%2581%25AE%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%25B3%25E3%2582%2592%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%2588%25E3%2581%2586%2528mac%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Sakuragi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZhNWM2M2IxMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Sakuragi</dc:creator></item><item><title><![CDATA[[LikeLion Backend] Week 2｜Spring Bootを用いたユーザーCRUD機能の実装（JPA未使用）]]></title><description><![CDATA[
 🧩 今回の目的
멋쟁이사자처럼（LikeLion）2025年度バックエンドトラックの2週目では、
Spring Bootを用いたRESTfulなユーザー管理APIの構築を行いました。
この週は、まだJPAなどの本格的なDB連携は行わず、メモリ上のリスト（List&lt;User&gt;）を仮想DBとして使用しています。


 🌱 今回学んだ内容

Spring Bootプロジェクトの基本構造（Controller / Service / Repository / Domain）
REST API設計（@GetMapping, @PostMapping, @PutMapping, @D...]]></description><link>https://zenn.dev/hyeon_marina247/articles/c9c703fd798bb2</link><guid isPermaLink="true">https://zenn.dev/hyeon_marina247/articles/c9c703fd798bb2</guid><pubDate>Mon, 14 Apr 2025 01:43:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wWfAuJKL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BLikeLion%2520Backend%255D%2520Week%25202%25EF%25BD%259CSpring%2520Boot%25E3%2582%2592%25E7%2594%25A8%25E3%2581%2584%25E3%2581%259F%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BCCRUD%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25EF%25BC%2588JP...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hyeon%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzNzUyOTRmNGQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hyeon</dc:creator></item><item><title><![CDATA[DIについて。AIバイブコーディングでバグらないためには？アウトプット]]></title><description><![CDATA[
 はじめに
こんにちは、2月から本格的にプログラマーになるために個人開発を始めた yuma です。
とりあえず Java はしっかり学ぶと良いと聞いて Java Silver を取りました。でも実際に開発を始めてみると、資格は取れたけど全体の開発の流れがいまいち掴めてないことに気づきました。「じゃあもう実際に作りながら覚えよう」と思って、AI の力も借りつつ個人開発に取り組むことにしました。
ただ、ちゃんとしたコーディングルールも決めずにやり始めたもんだから、ちょっと修正しただけでバグが出まくって、もう収集がつかない。
そんなとき「もっと保守性とか可読性を上げるにはどうすればいいんだろ...]]></description><link>https://zenn.dev/wyuma/articles/c46a045f0460af</link><guid isPermaLink="true">https://zenn.dev/wyuma/articles/c46a045f0460af</guid><pubDate>Mon, 14 Apr 2025 01:00:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6ylqfH3I--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:DI%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2580%2582AI%25E3%2583%2590%25E3%2582%25A4%25E3%2583%2596%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2583%2590%25E3%2582%25B0%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AB%25E3%2581%25AF%25EF%25BC%259F%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wYuma%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JjNmExMTI1OTQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wYuma</dc:creator></item><item><title><![CDATA[【Servlet・JSP】画像ファイルアップロードについて]]></title><description><![CDATA[
 Tomcatが使用している場所にアップ

 ファイルを指定してアップロードする画面

webapp\upload.jsp
&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%&gt;
&lt;%@ page import="java.util.*"%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;画像ファイルアップロード&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;form...]]></description><link>https://zenn.dev/codek2/articles/fd2d73dbad877d</link><guid isPermaLink="true">https://zenn.dev/codek2/articles/fd2d73dbad877d</guid><pubDate>Sun, 13 Apr 2025 06:06:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mDRySfBr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Servlet%25E3%2583%25BBJSP%25E3%2580%2591%25E7%2594%25BB%25E5%2583%258F%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E6%2597%25A5%25E5%2592%258C%25EF%25BC%2588%25E3%2581%25B3%25E3%2582%2588%25E3%2582%258A%25EF%25BC%2589%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3OWJlYTJhM2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>コード日和（びより）</dc:creator></item><item><title><![CDATA[Javaを他の言語と比較して整理してみた — 思ったより今っぽい？]]></title><description><![CDATA[
 ☕️ Java を他の言語と比較して整理してみた — 思ったより今っぽい？
普段 TypeScript や Python、Go を使っている私ですが、
「Java = 古くて重い」というイメージをなんとなく持っていました。
でも実際のところ、今の Java はどうなんだろう？
他の言語と比べながら、その特徴を整理してみました。


 🚀 ざっくり比較：実行環境と依存管理の違い



言語
実行方式
コンパイル種別
OS 差異吸収の仕組み
依存管理




Java
JVM + バイトコード
JIT / AOT
JVM が OS ごとの差異を抽象化し、同じコードが動作
Maven / ...]]></description><link>https://zenn.dev/optimisuke/articles/c76b581bff88da</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/c76b581bff88da</guid><pubDate>Sat, 12 Apr 2025 15:05:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Gu38Pha2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2582%2592%25E4%25BB%2596%25E3%2581%25AE%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%25E3%2581%2597%25E3%2581%25A6%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%25E2%2580%2594%2520%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2582%258A%25E4%25BB%258A%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[JavaでAPIサーバーを作る3つの選択肢 - 他言語エンジニアに贈る、モダンJava開発の入り口 -]]></title><description><![CDATA[
 1. はじめに
筆者はもともと Go や Node.js で API サーバーを構築していた経験がありました。
シンプルな構成で高速に動作し、オープンなライブラリを自由に組み合わせられる世界はとても快適で、Java は正直「古い」「重い」「大企業向けで閉じた世界」という先入観がありました。
特に、エンタープライズ企業で使われている Java の商用環境（WebSphere、WebLogic など） はどうなっているのか理解しづらく、言語というより“専用プラットフォーム”のような印象さえありました。
しかし調べてみると、Java にもオープンソース化とクラウド対応の流れが急速に進んでい...]]></description><link>https://zenn.dev/optimisuke/articles/f2cde50bd4de4c</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/f2cde50bd4de4c</guid><pubDate>Sat, 12 Apr 2025 14:14:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MYtMIYwv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25A7API%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B3%25E3%2581%25A4%25E3%2581%25AE%25E9%2581%25B8%25E6%258A%259E%25E8%2582%25A2%2520-%2520%25E4%25BB%2596%25E8%25A8%2580%25E8%25AA%259E%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AB%25E8%25B4%2588%25E3%2582%258B%25E3%2580%2581%25E3%2583%25A2%25E3%2583%2580%25E3%2583%25B3Java%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25AE%25E5%2585%25A5%25E3%2582%258A%25E5%258F%25A3%2520-%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[Javaエンジニアのための WebAssembly 入門]]></title><description><![CDATA[こんにちは。この記事では、Java エンジニアの皆さんに向けて、WebAssembly（Wasm）の基本とその仕組みを紹介します。
JVM やバイトコードの概念に親しんでいる方なら、Wasm もきっとスムーズに理解できるはずです。
ただし、Wasm は JVM の後継でも代替でもありません。 似ているようで根本的に異なるその思想や特徴を、Java との対比を通じて解説していきます。


 1. 🧱 WebAssembly って何？
Wasm は、主にWeb ブラウザで安全かつ高速にコードを実行するための中間表現として登場しました。これは、Java のバイトコードと JVM の関係に近く、...]]></description><link>https://zenn.dev/optimisuke/articles/df01ee3526ba83</link><guid isPermaLink="true">https://zenn.dev/optimisuke/articles/df01ee3526ba83</guid><pubDate>Sat, 12 Apr 2025 09:58:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--66pXT6nF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%2520WebAssembly%2520%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Naosuke%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MGQ3ZTQ5MmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naosuke</dc:creator></item><item><title><![CDATA[Tomcat サーバでFilterを使ってみて、Spring Security を雑に理解する]]></title><description><![CDATA[
 はじめに
こんにちは、Cloud Ace の許です。
とある日に Spring Security を勉強したいなと、色々な記事を読んでいました。
その中で、よく出てくるのがこの図でした。

引用元: Spring Security Reference
この図に記載されている"Security Filter Chain"を調べてみると、Java Servlet API の Filter という仕組みを使っていることがわかりました。
そこで、今回は Tomcat サーバを作成してみて、実際に Filter を実装することで、Spring Security がどのように動いているのかをざっ...]]></description><link>https://zenn.dev/cloud_ace/articles/617ac84b3e28a7</link><guid isPermaLink="true">https://zenn.dev/cloud_ace/articles/617ac84b3e28a7</guid><pubDate>Fri, 11 Apr 2025 08:40:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XamW5R1k--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tomcat%2520%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2581%25A7Filter%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25A6%25E3%2580%2581Spring%2520Security%2520%25E3%2582%2592%25E9%259B%2591%25E3%2581%25AB%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25A6%25E3%2583%2589%25E3%2582%25A8%25E3%2583%25BC%25E3%2582%25B9%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE2OGMwYmM4MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>クラウドエース株式会社</dc:creator></item><item><title><![CDATA[Spring Boot + Docker + MySQL + MyBatis + Flyway構成のアプリケーションを生成AIで作成してみた]]></title><description><![CDATA[
 はじめに
Rehab for JAPANレセプトバックエンドエンジニアの @aragane です!
生成AIの活用が高まる中で、業務で使用している技術スタックを含めて0から作ってみたらどれくらいのものが出来るのかなと気になり、キャッチアップも兼ねて試してみました。
試してみての記録・備忘録に近い内容のため、気軽に読んで頂ければと思います。
後述の記事内でプロンプトや作成したソースコードを公開していますので、興味がある方は覗いてみてください☀️

 使用した生成AI

ChatGPT-4o(Plus)
Claude 3.7 Sonnet(無償版)!
Claudeについては無償版というこ...]]></description><link>https://zenn.dev/rehabforjapan/articles/create_springboot_using_ai</link><guid isPermaLink="true">https://zenn.dev/rehabforjapan/articles/create_springboot_using_ai</guid><pubDate>Fri, 11 Apr 2025 02:48:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xhdaMTLS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Spring%2520Boot%2520%252B%2520Docker%2520%252B%2520MySQL%2520%252B%2520MyBatis%2520%252B%2520Flyway%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:aragane%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNkYzExOTgzNjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Rehab%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E0NDczYjk0NzEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aragane</dc:creator></item><item><title><![CDATA[Stringインスタンスのパンを焼こう]]></title><description><![CDATA[本日のコードはこちら。簡略型で行きますが

Intern.java
String a = "abc";
String b = new String("abc");

では、次の演算は、true、false、どちらになるでしょう。
このとき、Java人には常識かもですが、「==」という記号は、単に同値なのではなく同じインスタンスを指しているかどうかを判定することに注意してください。
a === b;

はい、こちらは先ほど述べた理由で、falseになりますね。では次です。
a == b.intern()

正解は、、、trueです。なぜでしょう。
答えは「パンをおいておく場所」にあります。...]]></description><link>https://zenn.dev/bunkei/articles/d8960e16c83f3e</link><guid isPermaLink="true">https://zenn.dev/bunkei/articles/d8960e16c83f3e</guid><pubDate>Fri, 11 Apr 2025 01:47:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Dhorkj2G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:String%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%25AE%25E3%2583%2591%25E3%2583%25B3%25E3%2582%2592%25E7%2584%25BC%25E3%2581%2593%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2596%2587%25E7%25B3%25BB%25E5%25A4%25A7%25E5%25AD%25A6%25E7%2594%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3ODk2NmZhNTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>文系大学生</dc:creator></item><item><title><![CDATA[ぽりもーふぃずむ]]></title><description><![CDATA[＊厳密でなければごめんなさい。黒本参照。
ぽりもーふぃずむ。難しいですよね。語感はいいけど。
ポリモーフィズムは多態性とも呼ばれて、要は同じメソッドを呼び出しても、インスタンスごとに違う動きをするよ、ということです。
前提として、親クラスの型の変数は、子クラスのインスタンスも代入することができます。
例えば、SuperHeroクラスがHeroクラスを継承している場合

HeroTest.java
Hero h = new SuperHero();

これはオッケーです。SuperHeroもHeroも、Heroであることに変わりはないですもんね。
これを踏まえて

Animal.java
...]]></description><link>https://zenn.dev/bunkei/articles/4cfeb341100a4a</link><guid isPermaLink="true">https://zenn.dev/bunkei/articles/4cfeb341100a4a</guid><pubDate>Thu, 10 Apr 2025 13:12:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--o1ibrZdh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2581%25BD%25E3%2582%258A%25E3%2582%2582%25E3%2583%25BC%25E3%2581%25B5%25E3%2581%2583%25E3%2581%259A%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2596%2587%25E7%25B3%25BB%25E5%25A4%25A7%25E5%25AD%25A6%25E7%2594%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3ODk2NmZhNTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>文系大学生</dc:creator></item><item><title><![CDATA[var 〜ワイルドカード〜]]></title><description><![CDATA[＊厳密でなければごめんなさい。黒本参照。
みなさん、varしてますか。
突然ですが問題。
黒本第2章第8問です。

A.java
public class A {
    public void test() {
        System.out.println("A");
    }
}


B.java
public class B extends A {
    @Override
    public void test() {
        System.out.println("B");
    }
}


C.java
public class C extends A...]]></description><link>https://zenn.dev/bunkei/articles/4850d50c118575</link><guid isPermaLink="true">https://zenn.dev/bunkei/articles/4850d50c118575</guid><pubDate>Thu, 10 Apr 2025 12:44:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ei_GTnWz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:var%2520%25E3%2580%259C%25E3%2583%25AF%25E3%2582%25A4%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25AB%25E3%2583%25BC%25E3%2583%2589%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%2596%2587%25E7%25B3%25BB%25E5%25A4%25A7%25E5%25AD%25A6%25E7%2594%259F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E3ODk2NmZhNTMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>文系大学生</dc:creator></item></channel></rss>