<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「TypeScript」のフィード]]></title><description><![CDATA[Zennのトピック「TypeScript」のRSSフィードです]]></description><link>https://zenn.dev/topics/typescript</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/f13e758fdb.png</url><title>Zennの「TypeScript」のフィード</title><link>https://zenn.dev/topics/typescript</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 13 Oct 2024 00:26:38 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/typescript/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[自動でハイフン区切りしてくれる電話番号の入力補助機能]]></title><description><![CDATA[
 はじめに
今回作ったのはこちらです。
タイトルにある通りなのですが、電話番号を入力すると自動でハイフン区切りしてくれます。
React, TypeScriptで作っているものの、処理に関してはカスタムフックに切り分けているのでバニラJSでも（型注釈を外せば）使えると思います。

今回これを作ったきっかけは以下の記事を拝見したことです。
https://zenn.dev/yumemi_inc/articles/c1c83cb4cdcaa8

電話番号の入力で、ハイフンを入れる人と入れない人がいます。どちらか一方しか受け付けないと、エラーが発生し、ユーザーにストレスを与えます。ハイフンの...]]></description><link>https://zenn.dev/benjuwan/articles/350b6ca8fdb18c</link><guid isPermaLink="true">https://zenn.dev/benjuwan/articles/350b6ca8fdb18c</guid><pubDate>Sun, 13 Oct 2024 00:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qO-l1DHS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2587%25AA%25E5%258B%2595%25E3%2581%25A7%25E3%2583%258F%25E3%2582%25A4%25E3%2583%2595%25E3%2583%25B3%25E5%258C%25BA%25E5%2588%2587%25E3%2582%258A%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258B%25E9%259B%25BB%25E8%25A9%25B1%25E7%2595%25AA%25E5%258F%25B7%25E3%2581%25AE%25E5%2585%25A5%25E5%258A%259B%25E8%25A3%259C%25E5%258A%25A9%25E6%25A9%259F%25E8%2583%25BD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:benjuwan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnd2XzJhLTN4SnJmSkN0Ql9wMkkwWUlVaVlTY1ozLTFQZFZoNkxsaUIyRmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>benjuwan</dc:creator></item><item><title><![CDATA[Remult + SvelteKitが良さげ]]></title><description><![CDATA[
Web開発において汎用性かつ機能性の高い最適なAPIの開発やドキュメントの作成は非常に重要です。
今回は「型安全なAPIの自動生成・容易なリアルタイムデータ同期」が可能なRemultとFWのSveltekitを利用して素早くAPIやWebアプリを作成する方法を記録いたします。


 環境

macOS 13.6.8
node 22.0.0


 手順

 Svelteプロジェクトの構築

任意のディレクトリで以下のコマンドで、Sveltekitプロジェクトを作成します。

# svelteインストール
$ npm create svelte@latest sample

Need to...]]></description><link>https://zenn.dev/t_o_d/articles/f8cf4b95b3797e</link><guid isPermaLink="true">https://zenn.dev/t_o_d/articles/f8cf4b95b3797e</guid><pubDate>Sat, 12 Oct 2024 19:43:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7v0MAmvR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Remult%2520%252B%2520SvelteKit%25E3%2581%258C%25E8%2589%25AF%25E3%2581%2595%25E3%2581%2592%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:t_o_d%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmYzIwYTUyNTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>t_o_d</dc:creator></item><item><title><![CDATA[ViteによるReact+TypeScriptアプリケーション環境作成手順書]]></title><description><![CDATA[ViteでReact+TypeScriptのアプリケーションを作成する手順書]]></description><link>https://zenn.dev/nakurei/books/create-app-react-typescript-vite</link><guid isPermaLink="true">https://zenn.dev/nakurei/books/create-app-react-typescript-vite</guid><pubDate>Sat, 12 Oct 2024 16:51:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Fyab0qtc--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8zNzdkODA0NmE5LnBuZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>NakuRei</dc:creator></item><item><title><![CDATA[TypeScript で Hello World を実行する]]></title><description><![CDATA[
 概要
TypeScript をインストールし、Hello World を実行するまでの手順を記載します。
OS は Ubuntu 20.04 を使用しました。
以下の流れでインストール、実行しました。

Node.js をインストール
TypeScript コンパイラをインストール
Hello World を実行


 Node.js をインストール
Node.js 公式の手順(下記URL)を実施しました。
https://nodejs.org/en/download/package-manager
手順の中のfnmをインストールするところで、unzipが無いと出力されました。
$ ...]]></description><link>https://zenn.dev/shu_kitamura/articles/fb3c0b86dff900</link><guid isPermaLink="true">https://zenn.dev/shu_kitamura/articles/fb3c0b86dff900</guid><pubDate>Sat, 12 Oct 2024 16:25:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sPUXOXmp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%2520%25E3%2581%25A7%2520Hello%2520World%2520%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Skit%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjZjhiN2M4YmEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Skit</dc:creator></item><item><title><![CDATA[Next.js を Firebase Hosting でデプロイして GitHub Actions も設定する際に必要なこと]]></title><description><![CDATA[
 はじめに
Vercel や Cloudflare Pages などのサービスを使うことで、Next.js アプリケーションを簡単にデプロイすることができますが、実は Firebase Hosting でも Next.js アプリケーションをデプロイすることができたので試してみました。
https://firebase.google.com/docs/hosting/frameworks/nextjs?hl=ja
Firebase CLI で 様々な設定ができますが、その中で GitHub Actions も設定できます。
https://firebase.google.com/doc...]]></description><link>https://zenn.dev/hasehiro0828/articles/12890854557d78</link><guid isPermaLink="true">https://zenn.dev/hasehiro0828/articles/12890854557d78</guid><pubDate>Sat, 12 Oct 2024 14:49:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M99X3gjE--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Next.js%2520%25E3%2582%2592%2520Firebase%2520Hosting%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%25A6%2520GitHub%2520Actions%2520%25E3%2582%2582%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AB...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3NGYyOGIxMWUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroto</dc:creator></item><item><title><![CDATA[TypeScriptでコードの可読性を上げる方法と変更のしやすさについて考える]]></title><description><![CDATA[
 可読性の高いコードを書きたい
ソフトウェア開発において、コードの可読性は開発者にとって最も重要な要素の一つです。
誰もが悪意をもってわかりずらいコードを書こうとは思っていません。
現実に読みやすい、読みづらいコードが存在することは確かです…
可読性が高いコードが書ければ、開発チーム全体での理解やコミュニケーション（呼びやすい、意味のわかりやすい変数名）がスムーズになったり、デバッグするときに不具合箇所の特定、バグ修正が容易になります。
本記事では、簡単にコードの可読性を上げることができる方法を具体的な例を交えながら考えていきます。


 1. 意味のある命名をする
最も簡単にできる改...]]></description><link>https://zenn.dev/kaz141/articles/8a812c7708f5a8</link><guid isPermaLink="true">https://zenn.dev/kaz141/articles/8a812c7708f5a8</guid><pubDate>Sat, 12 Oct 2024 12:44:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QgjQFnkt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25AE%25E5%258F%25AF%25E8%25AA%25AD%25E6%2580%25A7%25E3%2582%2592%25E4%25B8%258A%25E3%2581%2592%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%25E3%2581%25A8%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%25AE%25E3%2581%2597%25E3%2582%2584%25E3%2581%2599%25E3%2581%2595%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%2580%2583%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ruf%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwYjFiYmViM2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ruf</dc:creator></item><item><title><![CDATA[TypeScriptでユニオン型と配列を1箇所で管理する]]></title><description><![CDATA[TypeScriptでユニオン型を定義し、その値を含む配列を作成する場合、よく以下のようなコードを書くことがあります。
type Taste = 'しょうゆ' | 'みそ' | 'とんこつ'
const tastes = ['しょうゆ', 'みそ', 'とんこつ']
この方法は一見シンプルに見えますが、問題があります。新しい味を追加したり、既存の味を変更する場合、ユニオン型の定義と配列の両方を更新する必要があり、2箇所を直す手間が発生します。これはミスを招きやすく、メンテナンス性もよくありません。

 解決策: as constとtypeofを使ったシンプルな方法
この問題を解決するため...]]></description><link>https://zenn.dev/mktoho/articles/bca327e6c99647</link><guid isPermaLink="true">https://zenn.dev/mktoho/articles/bca327e6c99647</guid><pubDate>Sat, 12 Oct 2024 06:10:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zHNRMDlF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%25E5%259E%258B%25E3%2581%25A8%25E9%2585%258D%25E5%2588%2597%25E3%2582%25921%25E7%25AE%2587%25E6%2589%2580%25E3%2581%25A7%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2588%25E3%2582%2580%25E3%2581%2591%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNHdmSjRVOWxNU3NnWWhZa3pERi12U0xBNG1Sb3FzeHFlemt6Mk91Zz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>えむけー</dc:creator></item><item><title><![CDATA[Dockerで実装するVue3 x TS環境 🫠🫠🫠]]></title><description><![CDATA[
 出来上がったもの
https://github.com/Hashi-02/vue3_docker
(テンプレートレポジトリだよ)

 このリポジトリの使いかた
1.テンプレートを引っ張って、ローカルに落とす。
リポジトリのページにあるUse this templateを押し、設定を進めると、いい感じにリポジトリができます。
あとはソイツをクローンしてください。
2. 以下のコマンドをDockerfileがある階層で実行。
docker compose run vue-app npm install
3. 最後に、以下のコマンドをDockerfileがある階層で実行。
docker c...]]></description><link>https://zenn.dev/hashi02/articles/de74e50fa3fb3c</link><guid isPermaLink="true">https://zenn.dev/hashi02/articles/de74e50fa3fb3c</guid><pubDate>Sat, 12 Oct 2024 06:01:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--9bo-roKR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258BVue3%2520x%2520TS%25E7%2592%25B0%25E5%25A2%2583%2520%2520%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hashi02%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M0Y2ZmMGFmMWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hashi02</dc:creator></item><item><title><![CDATA[【Deno 2.0】動かなくなった File Server を再インストールする]]></title><description><![CDATA[
 結論
Deno Third Party Modules（以下TPM）の代わりに JSR から再インストールします。

 従来の file_server は Deno 2.0 以降では動かない
Deno 2.0 以降のネイティブ API に破壊的変更が入ったため、TPM からインストールしたスクリプトが Deno 本体のアップグレード後に動かなくなる場合があります。
今回はその一例として、既にスタンドアロンとしてインストールした file_server を、Deno 標準ライブラリの新しいリポジトリである JSR から再インストールしてみます。

 コマンド
今回インストールする fi...]]></description><link>https://zenn.dev/ihasq/articles/42fd60af795241</link><guid isPermaLink="true">https://zenn.dev/ihasq/articles/42fd60af795241</guid><pubDate>Sat, 12 Oct 2024 05:22:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZhEMWYJ6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Deno%25202.0%25E3%2580%2591%25E5%258B%2595%25E3%2581%258B%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%2520File%2520Server%2520%25E3%2582%2592%25E5%2586%258D%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ihasq%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I3YWEyZmFhZmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ihasq</dc:creator></item><item><title><![CDATA[Deno 2 正式版リリース！公式アナウンス内容を完全分解]]></title><description><![CDATA[Deno 2 正式版が10月9日にリリースされました。

Deno 2が目指すビジョンや詳しい変更内容については、公式ブログのアナウンス記事で詳しく説明されています。
https://deno.com/blog/v2.0
今回はブログ記事と同名のタイトルで公開されたYouTube動画について、内容をチャプターごとに解説します。
内容そのものも興味深いので（特に最初の2分半）、ぜひ本記事を参考に視聴してみてください。

 Announcing Deno 2
https://www.youtube.com/watch?v=d35SlRgVxT8

 00:00 コールドオープン

Ryan ...]]></description><link>https://zenn.dev/silloi/articles/e0428d8d29125f</link><guid isPermaLink="true">https://zenn.dev/silloi/articles/e0428d8d29125f</guid><pubDate>Fri, 11 Oct 2024 08:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7Ji_csVI--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%25202%2520%25E6%25AD%25A3%25E5%25BC%258F%25E7%2589%2588%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25EF%25BC%2581%25E5%2585%25AC%25E5%25BC%258F%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25B9%25E5%2586%2585%25E5%25AE%25B9%25E3%2582%2592%25E5%25AE%258C%25E5%2585%25A8%25E5%2588%2586%25E8%25A7%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nishiyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Y1NDZjYzE0NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nishiyama</dc:creator></item><item><title><![CDATA[Honoを使ってNext.jsにPOSTページを実装しよう！]]></title><description><![CDATA[こんにちは、エンジニアの籏野です。
近年、弊社の作るWebアプリケーションはNext.jsを用いて開発されることが多いです。
Next.jsは高パフォーマンスなWebページを作るための様々な機能を内包したReactフレームワークであり、メジャーバージョンアップの際には次々と新しい機能が追加されています。
さて今回はとある事情により、POSTメソッドで描画されるページを実装したい要望が出てきたため、Next.jsでPOSTページを実現できるのか検証してみました。

 結論
HonoをRoute Handlersで利用することで、Next.jsでもPOSTページを実装することができました。
...]]></description><link>https://zenn.dev/forcia_tech/articles/2024_hatano_nextjs_post_page</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/2024_hatano_nextjs_post_page</guid><pubDate>Fri, 11 Oct 2024 03:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qAFP9NwA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Hono%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6Next.js%25E3%2581%25ABPOST%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[deno.json の隠し設定 "patch" についての話]]></title><description><![CDATA[
 はじめに
Deno 2.0 がリリースされましたね。はい。さて、それと関係ない話で恐縮ではございますが、みなさん、deno.json には patch という設定ができることをご存知でしょうか。
この patch というものは、Deno の公式ドキュメントにも記載のない、言わば隠し設定のようなものとして存在します。しかし！これはある特定のユースケースにおきまして、とんでもなく便利、というよりもこいつがいないとやってられないレベルのすごい働きをしてくれるものなのです。
ということでございまして、今回はぜひこの patch について紹介させていただきたいと思います。

 patch の設...]]></description><link>https://zenn.dev/5t111111/articles/hidden-config-patch-in-deno-json</link><guid isPermaLink="true">https://zenn.dev/5t111111/articles/hidden-config-patch-in-deno-json</guid><pubDate>Fri, 11 Oct 2024 02:20:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--D-SG-ELk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:deno.json%2520%25E3%2581%25AE%25E9%259A%25A0%25E3%2581%2597%25E8%25A8%25AD%25E5%25AE%259A%2520%2522patch%2522%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25AE%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:5t111111%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM0NjI2ZDE4MTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>5t111111</dc:creator></item><item><title><![CDATA[Cloudflare で Prisma + PostgreSQL を使う場合、リクエストを超えてインスタンスを使いまわしてはいけない]]></title><description><![CDATA[
 Cloudflare Workers の制限
Cloudflare Workers では、Workers 内で生成したコネクションはリクエストを超えて使いまわすことができません。そのため、Prisma や PostgreSQL などの外部コネクションを使う場合は、リクエストごとに新しいインスタンスを生成する必要があります。D1 のようなコネクションを伴わない DB であれば、インスタンスを使いまわしても問題ありません。

 Prisma + PostgreSQL の例
最小限のコードで Prisma インスタンスを使いまわしたらどうなるのかという検証を行いました。以下のリンク先で実際...]]></description><link>https://zenn.dev/sora_kumo/articles/cloudflare-workers-prisma-connection</link><guid isPermaLink="true">https://zenn.dev/sora_kumo/articles/cloudflare-workers-prisma-connection</guid><pubDate>Thu, 10 Oct 2024 23:38:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JQUAhsEo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cloudflare%2520%25E3%2581%25A7%2520Prisma%2520%252B%2520PostgreSQL%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E5%25A0%25B4%25E5%2590%2588%25E3%2580%2581%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25A8%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%25B6%2585%25E3%2581%2588%25E3%2581%25A6%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VlZTgzMDYyMDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>空雲</dc:creator></item><item><title><![CDATA[Node.js 22の--experimental-require-moduleで、NestJSからESM Onlyライブラリを使ってみる]]></title><description><![CDATA[
 はじめに
JavaScriptにはCommonJS / ECMA Script Modules（以下ESM）の二つのモジュールシステムがあり、ライブラリには両方サポートするもの（Dual Package）もあれば、ESMのみをサポートするものもあります。（本記事では後者をESM Onlyライブラリと呼称します。）
バックエンドフレームワークとして人気のあるNestJSはCommonJSの世界で動いており、ESM非対応です。具体的な問題としてNestJSではESM Onlyのライブラリを通常のimportで使おうとするとERR_REQUIRE_ESMが出ます。たとえば下記の記事が一例。...]]></description><link>https://zenn.dev/ptna/articles/28b20f303a3cfb</link><guid isPermaLink="true">https://zenn.dev/ptna/articles/28b20f303a3cfb</guid><pubDate>Thu, 10 Oct 2024 23:15:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BqXRtYT---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%252022%25E3%2581%25AE--experimental-require-module%25E3%2581%25A7%25E3%2580%2581NestJS%25E3%2581%258B%25E3%2582%2589ESM%2520Onl...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hosaka313%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZjNDZkNWFmNTAuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E5%2585%25A8%25E6%2597%25A5%25E6%259C%25AC%25E3%2583%2594%25E3%2582%25A2%25E3%2583%258E%25E6%258C%2587%25E5%25B0%258E%25E8%2580%2585%25E5%258D%2594%25E4%25BC%259A%25EF%25BC%2588%25E3%2583%2594%25E3%2583%2586%25E3%2582%25A3%25E3%2583%258A%25EF%25BC%2589%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lvTjJRYzJRN1V1ZnM1X29EblNkWkt4OFNPSWUzOTBaQTRSTDVOPXM5Ni1j%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hosaka313</dc:creator></item><item><title><![CDATA[Deno v2.0 が発表されたので入門してみる]]></title><description><![CDATA[
 はじめに
先日 Deno v.2.0 がリリースされました。それに伴い Zenn や X などで Deno に関する様々な記事や発信が投稿され、現在非常にホットです。それらを見て、私もこれを機に Deno を触ってみようと思い立ちこの記事を書いています。まずは入門編ということで、インストールやプロジェクトのセットアップ、Deno CLI の使い方などを見ていこうと思います。
以下のドキュメントに沿って進めていきます。
https://docs.deno.com

 インストール

Mac

curl -fsSL https://deno.land/install.sh | sh
# ...]]></description><link>https://zenn.dev/kterada/articles/091971d0df3f5d</link><guid isPermaLink="true">https://zenn.dev/kterada/articles/091971d0df3f5d</guid><pubDate>Thu, 10 Oct 2024 14:20:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--OUXbGdXg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Deno%2520v2.0%2520%25E3%2581%258C%25E7%2599%25BA%25E8%25A1%25A8%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E5%2585%25A5%25E9%2596%2580%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kterada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyODkzYzViMWIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kterada</dc:creator></item><item><title><![CDATA["use server";を勘違いして使うと危ない]]></title><description><![CDATA[ムーザルちゃんねるのzaruです、こんにちは。今回はNext.js AppRouterのServer Actionsで "use server"; を勘違いして使うと危ないケースがあるよというのを紹介します。
以前書いた"use server"; でexportした関数が意図せず？公開されるとはまた違うケースだったので改めて書きます。
今回のケースが発生することは稀だと思いますが、Server Actionsの仕組みを勘違いしてしまっていたり雰囲気で使っているとセキュリティリスクをはらむコードになってしまいます。
例として、以下のようなフォームのデータフローを実装したとします。3つのファ...]]></description><link>https://zenn.dev/moozaru/articles/c7335f66dfb8df</link><guid isPermaLink="true">https://zenn.dev/moozaru/articles/c7335f66dfb8df</guid><pubDate>Thu, 10 Oct 2024 13:52:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--1yJgsH9l--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2522use%2520server%2522%253B%25E3%2582%2592%25E5%258B%2598%25E9%2581%2595%25E3%2581%2584%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E5%258D%25B1%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:zaru%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FiNDkwNTdmZTMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25AD%25E3%2582%258B%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hTeWVOcHN2TEdOdTdPeUFlU1JEbDhUNkNOX1p3NHBXSHpIRHN2NlBFPXMyNTAtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>zaru</dc:creator></item><item><title><![CDATA[TypeScriptユーザーから見るGoの特徴]]></title><description><![CDATA[
 はじめに
この記事では、TypeScriptとGoの違い（基本的にGoにはあってTypeScriptにはないこと）をまとめています。
これからGoを学ぼうと考えている方や、TypeScriptユーザーがGoに触れてみる際の参考になれば幸いです！
また私自身はまだまだ初学者なので、もしかしたら間違いや改善点があるかもしれません。
その場合はぜひアドバイスをいただけると嬉しいです🙇

 変数

 暗黙的宣言
varを省略してより簡潔に変数を宣言することができます。
この際、変数の型は自動的に推論されます。
ただし、暗黙的な宣言は関数内でのみ行うことができます。
// 暗黙的な変数の宣言（...]]></description><link>https://zenn.dev/kiman/articles/2106fb4fe04f27</link><guid isPermaLink="true">https://zenn.dev/kiman/articles/2106fb4fe04f27</guid><pubDate>Thu, 10 Oct 2024 13:22:38 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hx8kK9PJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:TypeScript%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25B6%25E3%2583%25BC%25E3%2581%258B%25E3%2582%2589%25E8%25A6%258B%25E3%2582%258BGo%25E3%2581%25AE%25E7%2589%25B9%25E5%25BE%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258D%25E3%2582%2593%25E3%2582%2586%25E3%2581%25BE%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MmYyZmE3MTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>きんゆまん</dc:creator></item><item><title><![CDATA[zodでtransformした後，ジェネリクスで型エラーが出る問題の解決法]]></title><description><![CDATA[
 zodにはtransform機能がある
zodでは，スキーマにtransform()メソッドを使用することで，パースを行った後に別の型に変換することができます。
しかし，ジェネリクスと組み合わせるときには注意が必要です。
結論だけ書くと，スキーマの型として以下のように指定すると良いです。
z.ZodType&lt;I, z.ZodTypeDef, O&gt;

 エラーの例
import axios from "axios";
import { z } from "zod";

const outputSchema = z
  .object({ name: z.string(), ...]]></description><link>https://zenn.dev/utopi_a/articles/b8a6286951cf3b</link><guid isPermaLink="true">https://zenn.dev/utopi_a/articles/b8a6286951cf3b</guid><pubDate>Thu, 10 Oct 2024 11:10:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Oz-awI9F--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:zod%25E3%2581%25A7transform%25E3%2581%2597%25E3%2581%259F%25E5%25BE%258C%25EF%25BC%258C%25E3%2582%25B8%25E3%2582%25A7%25E3%2583%258D%25E3%2583%25AA%25E3%2582%25AF%25E3%2582%25B9%25E3%2581%25A7%25E5%259E%258B%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%25A8%25E3%2581%25B4%25E3%2581%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAzNDZlMWE5ZTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーとぴあ</dc:creator></item><item><title><![CDATA[【TypeScript】ユーティリティ型のExtractとExcludeをConditional Typesで定義する]]></title><description><![CDATA[TypeScriptは、強力な型システムを持つことで知られており、開発者がより安全で信頼性の高いコードを書くのを助けます。その中でも、ユーティリティ型は、複雑な型操作を簡潔に表現するための強力なツールです。本記事では、TypeScriptに標準で用意されているユーティリティ型であるExtractとExcludeを、Conditional Typesを用いてどのように定義するかを解説します。

 ユーティリティ型とは？
ユーティリティ型は、TypeScriptが提供する一般的な型変換を容易にするための組み込みの型変換ツールで、既存の型を元に新しい型を作成するために使用されます。これにより、...]]></description><link>https://zenn.dev/ujita/articles/2327748327996c</link><guid isPermaLink="true">https://zenn.dev/ujita/articles/2327748327996c</guid><pubDate>Thu, 10 Oct 2024 09:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UR9ShQSy--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590TypeScript%25E3%2580%2591%25E3%2583%25A6%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25AA%25E3%2583%2586%25E3%2582%25A3%25E5%259E%258B%25E3%2581%25AEExtract%25E3%2581%25A8Exclude%25E3%2582%2592Conditional%2520Types%25E3%2581%25A7%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ujita%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3MmNmYWM3NTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ujita</dc:creator></item><item><title><![CDATA[openapi2aspidaをOpenAPI 3.1.0に雑対応した]]></title><description><![CDATA[私たちはtobaso(https://www.tobaso.jp)という配信に特化したおたよりサービスを8月末にリリースしました。
そのサービスの開発の中で、バックエンドとのAPI仕様の共有のためOpenAPIのスキーマファイルを作成し、共有することになり、バックエンドで導入したツールの影響でこれまでのOpenAPI 3.0.3が利用できず、3.1.0を利用することになりました。
そこで、これまで利用してきたaspidaのツールチェーンであるopenapi2aspidaが3.0.3までしか利用できなかったため、forkして3.1.0に対応することにしました。
今回は他ライブラリの対応状況...]]></description><link>https://zenn.dev/sucotech/articles/1cd6686b90fa25</link><guid isPermaLink="true">https://zenn.dev/sucotech/articles/1cd6686b90fa25</guid><pubDate>Thu, 10 Oct 2024 06:21:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Y2az328---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:openapi2aspida%25E3%2582%2592OpenAPI%25203.1.0%25E3%2581%25AB%25E9%259B%2591%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:NEKOYASAN%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzlhNWEwOWJhMzIuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I2YTllZTA0ZWUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NEKOYASAN</dc:creator></item></channel></rss>