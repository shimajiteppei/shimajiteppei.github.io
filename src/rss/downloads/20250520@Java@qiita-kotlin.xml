<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-05-21T01:00:00+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2028636</id>
    <published>2025-05-21T01:00:00+09:00</published>
    <updated>2025-05-21T01:00:00+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/fujithuro/items/aed133583e28639427f0"/>
    <url>https://qiita.com/fujithuro/items/aed133583e28639427f0</url>
    <title>イミュータブルの嬉しさって何だっけ</title>
    <content type="html">はじめに
日頃、Kotlinでコーディングしている際に、「変数の宣言にはvarではなくvalを使う」「ミュータブルではなくイミュータブルなコレクションを使う」などはいつも意識してきました。
ただ、あ…</content>
    <author>
      <name>fujithuro</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2028227</id>
    <published>2025-05-20T00:17:27+09:00</published>
    <updated>2025-05-20T00:17:27+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/repepe2en/items/1fda3651e861ef4c748f"/>
    <url>https://qiita.com/repepe2en/items/1fda3651e861ef4c748f</url>
    <title>今更すぎるAndroidのXMLレイアウトの実装、Viewの参照/紐付けの仕方の変遷</title>
    <content type="html">はじめに
Androidエンジニアとして働き始めてはや4週間。
目の前の仕事とインプットをする日々であっという間に過ぎています。
そんな中今回はレイアウト関連で、当たり前だけど、今更なんだっけと聞け…</content>
    <author>
      <name>repepe2en</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2028047</id>
    <published>2025-05-19T16:57:55+09:00</published>
    <updated>2025-05-19T16:57:55+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/koras7788/items/a093533899c1510007c6"/>
    <url>https://qiita.com/koras7788/items/a093533899c1510007c6</url>
    <title> Kotlinのサスペンド関数（Suspend Function）</title>
    <content type="html">サスペンド関数は、Kotlinのコルーチン（非同期プログラミング）の中核となる機能です。長時間実行される操作を非ブロッキングな方法で処理するために設計されています。
1. サスペンド関数の基本概念
…</content>
    <author>
      <name>koras7788</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2028014</id>
    <published>2025-05-19T15:46:49+09:00</published>
    <updated>2025-05-19T15:46:49+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/koras7788/items/80c521811861c6e5f92f"/>
    <url>https://qiita.com/koras7788/items/80c521811861c6e5f92f</url>
    <title>Jetpack Composeのrememberの使い方について</title>
    <content type="html">基本概念
rememberはJetpack Composeで、コンポーザブル関数の再構成（recomposition）間で状態を保持するために使用されます。Composeのコンポーザブルは何度も呼び…</content>
    <author>
      <name>koras7788</name>
    </author>
  </entry>
</feed>
