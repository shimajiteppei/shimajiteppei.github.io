<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Docker」のフィード]]></title><description><![CDATA[Zennのトピック「Docker」のRSSフィードです]]></description><link>https://zenn.dev/topics/docker</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/75b80a5922.png</url><title>Zennの「Docker」のフィード</title><link>https://zenn.dev/topics/docker</link></image><generator>zenn.dev</generator><lastBuildDate>Sun, 27 Jul 2025 07:07:43 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/docker/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dockerコンテナに未インストールのコマンドを実行する : docker debug コマンド]]></title><description><![CDATA[
 TL;DR


slimなどの軽量イメージは、必要最低限のコマンドしかインストールされていない
そのため、動作確認やデバッグのためのコマンド（例：ping）が使用できない
そんな時は、docker debugコマンドを使うと、コンテナに未インストールのコマンドを実行できる


 注意事項
docker debugコマンドはDocker Desktopの有料プラン(Pro/Team/Business) でしか利用できません。

 背景
Dockerイメージを作成する際のベストプラクティスとして、「必要最小限の要素のみを含める」というものがあります。
「イメージサイズを小さくすることによ...]]></description><link>https://zenn.dev/junm0ri/articles/docker-debug-command</link><guid isPermaLink="true">https://zenn.dev/junm0ri/articles/docker-debug-command</guid><pubDate>Sun, 27 Jul 2025 03:06:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u-e3o5Z_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25AB%25E6%259C%25AA%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2520%253A%2520docker%2520debug%2520%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Junm0ri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNjZTI2ODcxYTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Junm0ri</dc:creator></item><item><title><![CDATA[ネットワークの観察 - 第2回 SCPを解析する]]></title><description><![CDATA[
 はじめに
scpの接続はどのようになっているのでしょうか？今回はwiresharkを使用して確認してみます。

 マシンスペック
MacBook Air M2 arm64
Docker上で実施

 準備

 wiresharkのインストール
brew install --cask wireshark

 Dockerfile
FROM ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update &amp;&amp; apt-get install -y \
        openssh-server ope...]]></description><link>https://zenn.dev/ka_kan/articles/8abcd73598e406</link><guid isPermaLink="true">https://zenn.dev/ka_kan/articles/8abcd73598e406</guid><pubDate>Sun, 27 Jul 2025 02:06:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3Fdqbyif--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E8%25A6%25B3%25E5%25AF%259F%2520-%2520%25E7%25AC%25AC2%25E5%259B%259E%2520SCP%25E3%2582%2592%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlOGJhYTMxOGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanda</dc:creator></item><item><title><![CDATA[prometheus のデータを grafana で可視化する]]></title><description><![CDATA[
 はじめに
前回の記事で prometheus と grafana を dockerコンテナで起動しました。今回は実際に prometheus で収集したデータを grafana で可視化してみようと思います。

 prometheus をデータソースに追加
grafana に prometheus をデータソースとして認識させる必要があります。
まずはhttp://localhost:3000 にアクセスします。
トップ画面左下の plugins_and_data から　Plugins をクリックします。
追加画面
表示された中から prometheus を選択します。
データソース...]]></description><link>https://zenn.dev/eiken/articles/c360a81ba626c1</link><guid isPermaLink="true">https://zenn.dev/eiken/articles/c360a81ba626c1</guid><pubDate>Sun, 27 Jul 2025 00:29:14 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xC-N81Ws--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:prometheus%2520%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2582%2592%2520grafana%2520%25E3%2581%25A7%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:enjine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enjine</dc:creator></item><item><title><![CDATA[GitHubのissueをCopilotに割り当ててDockerイメージのビルド時間を短縮してもらった話]]></title><description><![CDATA[
 概要
Dockerfileの更新時、GitHub ActionsでDockerイメージをビルドし、SyftでSBOMを作成、Grypeで脆弱性をスキャンしています。
しかし、Dockerイメージのビルドに時間がかかるという課題がありました。
GitHub Copilot Proを契約して、GitHubのissueをCopilotに割り当てて対応してもらえるようになったので、Dockerイメージのビルド時間短縮の対応をしてもらいました。

 issueの内容
問題点と対策を記載したissueを作成し、Copilotにアサインしました。


 Copilotによる修正内容
従来はdock...]]></description><link>https://zenn.dev/jnxjez/articles/d40cc548d993a9</link><guid isPermaLink="true">https://zenn.dev/jnxjez/articles/d40cc548d993a9</guid><pubDate>Sat, 26 Jul 2025 23:19:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZPuxwutz--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHub%25E3%2581%25AEissue%25E3%2582%2592Copilot%25E3%2581%25AB%25E5%2589%25B2%25E3%2582%258A%25E5%25BD%2593%25E3%2581%25A6%25E3%2581%25A6Docker%25E3%2582%25A4%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E6%2599%2582%25E9%2596%2593%25E3%2582%2592%25E7%259F%25AD%25E7%25B8%25AE%25E3%2581%2597%25E3%2581%25A6%25E3%2582%2582%25E3%2582%2589%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmNzI0MTQ1M2UuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ジェイ</dc:creator></item><item><title><![CDATA[grafana をdockerコンテナで実行する]]></title><description><![CDATA[
 はじめに
前回の記事で prometheusu の導入が完了しました。今回は grafana を dockerコンテナで実行します。

 実行環境と作業の流れ
監視サーバー : Dockerコンテナ（MacBookAir上で構築）
監視対象 : Fedoraサーバー（VMWare仮想マシン）
※ 以下手順で作業していきます。
prometheusu のコンテナで環境を構築する
grafana のコンテナ環境を構築する  ← ※今回はここです
prometheus から取得したデータを grafana で可視化する

 grafana の起動
前回作成した docker-compose...]]></description><link>https://zenn.dev/eiken/articles/4f0e8c046b936c</link><guid isPermaLink="true">https://zenn.dev/eiken/articles/4f0e8c046b936c</guid><pubDate>Sat, 26 Jul 2025 23:02:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xnTGxILh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:grafana%2520%25E3%2582%2592docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:enjine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enjine</dc:creator></item><item><title><![CDATA[ネットワークの観察 - 第1回 SSHを解析する]]></title><description><![CDATA[
 はじめに
SSHの接続はどのようになっているのでしょうか？今回はwiresharkを使用して確認してみます。
また、今回だけでなく次回以降も様々なネットワークの事象について観察していきたいと思います。

 マシンスペック
MacBook Air M2 arm64
Docker上で実施

 準備

 wiresharkのインストール
brew install --cask wireshark

 Dockerfile
FROM ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update &amp;&amp; a...]]></description><link>https://zenn.dev/ka_kan/articles/0d7240aa5524fd</link><guid isPermaLink="true">https://zenn.dev/ka_kan/articles/0d7240aa5524fd</guid><pubDate>Sat, 26 Jul 2025 21:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ppNmtM5A--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25AE%25E8%25A6%25B3%25E5%25AF%259F%2520-%2520%25E7%25AC%25AC1%25E5%259B%259E%2520SSH%25E3%2582%2592%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kanda%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzVlOGJhYTMxOGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kanda</dc:creator></item><item><title><![CDATA[Claude Code不要！プロンプトエンジニアリングでどこまで開発できる？]]></title><description><![CDATA[
 はじめに
「Claude Codeを使ってみたいけど、追加料金が...」
「プロンプトエンジニアリングだけで、どこまで実用的な開発ができるの？」
そんな疑問を抱えている個人開発者の方、いらっしゃいませんか？
私は普段AWSインフラエンジニアとして働きながら、プライベートではRustでのOSS開発に挑戦しています。これまでPythonでのスクリプト実装が中心でしたが、今年からRustとGoの学習に力を入れています。
今回、月額$20のClaude Proのみを使い、プロンプトエンジニアリングだけで実用的なRust CLIツールを開発するという検証プロジェクトを開始しました。
この記事で...]]></description><link>https://zenn.dev/kyonaka/articles/520cbfb5960c90</link><guid isPermaLink="true">https://zenn.dev/kyonaka/articles/520cbfb5960c90</guid><pubDate>Sat, 26 Jul 2025 09:52:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JuGD6Gop--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Claude%2520Code%25E4%25B8%258D%25E8%25A6%2581%25EF%25BC%2581%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%2593%25E3%2581%25BE%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Kyonaka%2540AWS%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5NzcxODk2ODAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Kyonaka@AWSエンジニア</dc:creator></item><item><title><![CDATA[prometheusu を dockerコンテナで実行する]]></title><description><![CDATA[
 はじめに
サーバーマシンを監視する為、監視システムである prometheusu をDockerコンテナで実行します。
そして、監視対象のマシンから prometheusu で収集した監視メトリクスを grafana を用いて可視化したいと思います。

 概要

 【prometheusu とは】
オープンソースの監視システムおよび時系列データベースであり、インフラやアプリケーションのメトリクス（CPU使用率やメモリ使用量など）を収集・保存・可視化するために利用されます。
データ収集は Prometheus が定期的に対象（ターゲット）に HTTP リクエストを送ってメトリクスを取得...]]></description><link>https://zenn.dev/eiken/articles/a5a61770531c70</link><guid isPermaLink="true">https://zenn.dev/eiken/articles/a5a61770531c70</guid><pubDate>Sat, 26 Jul 2025 08:12:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RM1m67W6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:prometheusu%2520%25E3%2582%2592%2520docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:enjine%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZS5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>enjine</dc:creator></item><item><title><![CDATA[WAS × Semeru Runtime 組み込み検証まとめ]]></title><description><![CDATA[
 検証目的
IBM公式の WebSphere Application Server（WAS）コンテナに、Semeru Runtime Certified Edition(OpenJDK 21.0.7+6)を組み込み、ECRにプッシュできるかを検証しました。

 経緯
客先環境でSemeru RuntimeをGitで管理する想定でいましたが、容量が大きすぎて管理することが難しい状況になってしまいました。
Git Large File Storageで管理することも検討しましたが、お客様より以下提案がありました。
今後多数のアプリをデプロイしないといけないため、専用リポジトリで管理すること...]]></description><link>https://zenn.dev/wan0ri/articles/10-was-semeruruntime-poc</link><guid isPermaLink="true">https://zenn.dev/wan0ri/articles/10-was-semeruruntime-poc</guid><pubDate>Sat, 26 Jul 2025 03:37:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xaMgrUif--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WAS%2520%25C3%2597%2520Semeru%2520Runtime%2520%25E7%25B5%2584%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wan0ri%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IzM2M3Y2U5OTUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wan0ri</dc:creator></item><item><title><![CDATA[Raspberry Pi + Yocto + docker + FastAPIでAPIサーバコンテナ]]></title><description><![CDATA[作りたいものの全体像（このスクラップ）から参照しています
https://zenn.dev/takumique/scraps/dc811f9f30d004

 作りたいもの
Raspberry Pi 4 (RasPi4)にYoctoを載せて、その上にDocker環境を構築し（手順はスクラップにあります）、その上にFastAPIを使ったAPIサーバコンテナを立ち上げます。
動作する全ソースコードをGitHubで公開しています。

 Yoctoのコンテナイメージビルドについて
Yoctoのビルド内でコンテナイメージをビルドするには、Yoctoを使ってコンテナイメージをビルドすることになります...]]></description><link>https://zenn.dev/takumique/articles/01d115c0c706d9</link><guid isPermaLink="true">https://zenn.dev/takumique/articles/01d115c0c706d9</guid><pubDate>Fri, 25 Jul 2025 23:43:22 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--hfvrrbSP--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Raspberry%2520Pi%2520%252B%2520Yocto%2520%252B%2520docker%2520%252B%2520FastAPI%25E3%2581%25A7API%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:takumique%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jS3I4X01CVk1NS3pLWDBiYWdESTdCRXV5dEdxMHpHLUdWSWE1emhJc1MxYkFTU3J3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takumique</dc:creator></item><item><title><![CDATA[[WIP]記憶を持ったClaudeたん🤖をNeo4jで構築するのだ🛰️]]></title><description><![CDATA[
 できること

Claude単体では記憶（コンテクスト）を保持できない...
今回はneo4jというグラフDBを使ってClaudeたんを僕色に染めちゃうのだ😻



タチコマ。コンテキストを保持できるということは、AIのキャラクターも（特にneo4jを使ったらとても細かく）設定できるのだ🐈
json形式のmemory使えばよくね？
Knowledge Graph Memory Serverという、MCPが大々的に広がり始めたとき、初期Exampleとして多く配布された記憶MCPサーバーがあります。
グラフDBをjsonで簡易的に模した（RDBにおけるSQLiteみたいな）ものなので、記...]]></description><link>https://zenn.dev/rascal54/articles/4a27dd1e7396c8</link><guid isPermaLink="true">https://zenn.dev/rascal54/articles/4a27dd1e7396c8</guid><pubDate>Fri, 25 Jul 2025 08:41:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wgxqJkG6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BWIP%255D%25E8%25A8%2598%25E6%2586%25B6%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A3%25E3%2581%259FClaude%25E3%2581%259F%25E3%2582%2593%2520%25E3%2582%2592Neo4j%25E3%2581%25A7%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2581%25A0%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:rascal%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGtVUEJ5R2RjLUlIc1JfNmtBa3paNS1aemluVlZCaHZQOVpDUFNNcnZBaU1jQnFEaFg9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>rascal</dc:creator></item><item><title><![CDATA[PostgreSQLのダンプ・リストアをDocker1発で実行するワンライナー]]></title><description><![CDATA[いちいちPostgreSQLのクライアントを入れるのが面倒だったので、Dockerコンテナで実行するワンライナーにしました。

 ダンプ
sudo docker run --rm -e PGPASSWORD='&lt;DBのパスワード&gt;' -v "$PWD":/backup postgres:16-alpine pg_dump -h &lt;DBのURL&gt; -U &lt;DBのユーザー名&gt; -d &lt;データベース名&gt; -p &lt;DBのポート&gt; -Fc -f /backup/db_$(date +%Y%m%d_%H%M%S).dump

 リストア
s...]]></description><link>https://zenn.dev/taiyaki_715/articles/3676242c5c2022</link><guid isPermaLink="true">https://zenn.dev/taiyaki_715/articles/3676242c5c2022</guid><pubDate>Fri, 25 Jul 2025 02:11:44 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I9ySLKQO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PostgreSQL%25E3%2581%25AE%25E3%2583%2580%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25BB%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A2%25E3%2582%2592Docker1%25E7%2599%25BA%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AF%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%259F%25E3%2581%2584%25E3%2582%2584%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSUdpTlkxNmZWR0g0T09EWWZ4blI3RExSM3h1cjNqS1d3LXU4ckFwZ3QwUG1oQkF6QT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>たいやき</dc:creator></item><item><title><![CDATA[Ubuntu 24.04にDocker Desktopをインストールする]]></title><description><![CDATA[Dockerとは一つのOS上で、アプリケーションとその依存関係をコンテナと呼ばれる単位で分離して仮想化し、ホストOSのカーネルを共用することで、Hypervisorと比較して軽量で高速に動作する仮想化環境です。
今回は、先日の記事でMINISFORUM BD795i SEにインストールしたUbuntu 24.04へ、Docker DesktopをインストールしてGUIによるコンテナを用いた仮想化を行います。


 環境

Ubuntu 24.04.2 LTS


 環境構築

 動作条件
https://docs.docker.com/desktop/setup/install/linu...]]></description><link>https://zenn.dev/sion_pn/articles/0f894ab51bbea2</link><guid isPermaLink="true">https://zenn.dev/sion_pn/articles/0f894ab51bbea2</guid><pubDate>Thu, 24 Jul 2025 15:27:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xCNmbEhY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Ubuntu%252024.04%25E3%2581%25ABDocker%2520Desktop%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Mimaki%2520SiON%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXBpNXV1TDJvZUNVYlBqU2FPTUtYb0wwQzNFbXByeEZ0OGxIVnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Mimaki SiON</dc:creator></item><item><title><![CDATA[PHP 開発環境と実行環境を統合して WordPress 開発を効率化]]></title><description><![CDATA[
 はじめに
WordPress 開発に挑戦している皆さん、環境構築で次のようなお悩みはありませんか？

ローカル環境と本番環境で PHP のバージョンが合わない
デバッグがうまくいかない
チーム開発で環境を統一するのが難しい

もし1つでも当てはまるなら、Docker と VS Code Dev Container の出番です。これらのツールを活用することで、本記事で紹介する dvc-wordpress のような、快適で効率的な WordPress 開発環境を構築できます。この開発環境のサンプルとして dvc-wordpress を作成してみました。

dvc-wordpress は、...]]></description><link>https://zenn.dev/hiro345/articles/20250719_dvc_wordpress</link><guid isPermaLink="true">https://zenn.dev/hiro345/articles/20250719_dvc_wordpress</guid><pubDate>Thu, 24 Jul 2025 10:04:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--biESc8v2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PHP%2520%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25A8%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E7%25B5%25B1%25E5%2590%2588%25E3%2581%2597%25E3%2581%25A6%2520WordPress%2520%25E9%2596%258B%25E7%2599%25BA%25E3%2582%2592%25E5%258A%25B9%25E7%258E%2587%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hiroshi%2520Koyama%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5ZzdjLS0xTFk0S2k0LWw3dVFSSFZRdEdQcWZHYTlibVRJYUtFM0E9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hiroshi Koyama</dc:creator></item><item><title><![CDATA[Dev Contaienr 上の Claude Code とホストの Mac で起動している Neovim を IDE 連携する]]></title><description><![CDATA[masaki です。
先日は「Dev Container で起動した Claude Code から Hooks でホストの Mac に通知する」という記事を書きました。
https://zenn.dev/socialplus/articles/ea9be95301ae99
今日は先日に引き続き、Claude Code と Dev Container の話題です。
先日の記事の内容と共通する部分があるため、先日の記事に興味を持っていただいた方は今日の記事にも興味を持っていただけるかもしれません。

 この記事で得られるもの

Claude Code (コンテナ) と Neovim (ホスト...]]></description><link>https://zenn.dev/socialplus/articles/ad237464dcfb50</link><guid isPermaLink="true">https://zenn.dev/socialplus/articles/ad237464dcfb50</guid><pubDate>Thu, 24 Jul 2025 09:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0IXW4LGg--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dev%2520Contaienr%2520%25E4%25B8%258A%25E3%2581%25AE%2520Claude%2520Code%2520%25E3%2581%25A8%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%2520Mac%2520%25E3%2581%25A7%25E8%25B5%25B7%25E5%258B%2595%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%2520Neovim%2520%25E3%2582%2592%2520I...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:masaki%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2I4Mjg2YmNjMDEuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Social%2520PLUS%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU3YWM1MjkxMTEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>masaki</dc:creator></item><item><title><![CDATA[コンテナ上で NGS 解析のツールを動作させてみた（Docker・Singularity/Apptainer）]]></title><description><![CDATA[
 はじめに
次世代シーケンサー（NGS: Next-Generation Sequencing）の解析を始めたくて、ツール類をインストールする際にぶつかる壁として、そもそもツールを自分の環境にインストールできないという問題があります。
Bioconda というパッケージマネージャ（ライブラリ・ツール管理の仕組み）ができたことにより、今までよりも確かにインストールやツールの管理が楽になりました。ただ、それでもやはり、自分の環境依存でインストールできたり、できなかったりします。
これを解決する手段として、コンテナ技術（Docker・Singularity/Apptainer）が登場しました...]]></description><link>https://zenn.dev/rna_analysis/articles/ngs-analysis-with-container</link><guid isPermaLink="true">https://zenn.dev/rna_analysis/articles/ngs-analysis-with-container</guid><pubDate>Wed, 23 Jul 2025 13:38:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nrmEahM_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E4%25B8%258A%25E3%2581%25A7%2520NGS%2520%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%25AE%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E4%25BD%259C%25E3%2581%2595%25E3%2581%259B%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25EF%25BC%2588Docker%25E3%2583%25BBSingularity%252FApptainer%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Naoto%2520Imamachi%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc4ZDA5ZTFmYTYuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:RNA%25E8%25A7%25A3%25E6%259E%2590%2520%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U5ZmRiZGRlNGEuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Naoto Imamachi</dc:creator></item><item><title><![CDATA[EmbulkをDocker×Lambdaで動かす（開発＆本番環境）]]></title><description><![CDATA[
 はじめに
Embulkを触って最初に思ったのは「これ、どこで動かそうか？？」
直感的にLambdaが良いなと思ったものの、調べてもあまり情報もなく、スッキリした構成を取るのにも色々検討したのでオススメとして紹介します。
また以前、執筆したDockerを活用したLambdaの開発＆本番環境のおすすめ構成を元に、Docker×Lambdaで本番環境を構築した上で、開発環境も一貫性のある作りにしています。

※どっちもクジラ！！

 サンプルコード
本記事で解説するコード一式は、以下のGitHubリポジトリで公開しています：
🔗 embulk-lambda-container

完全なDo...]]></description><link>https://zenn.dev/konan/articles/653381379e846f</link><guid isPermaLink="true">https://zenn.dev/konan/articles/653381379e846f</guid><pubDate>Wed, 23 Jul 2025 13:29:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HImM3wJ0--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Embulk%25E3%2582%2592Docker%25C3%2597Lambda%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25EF%25BC%2588%25E9%2596%258B%25E7%2599%25BA%25EF%25BC%2586%25E6%259C%25AC%25E7%2595%25AA%25E7%2592%25B0%25E5%25A2%2583%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Konan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2RlMzRhOGU0NDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Konan</dc:creator></item><item><title><![CDATA[docker buildx で sass 実行時に CSS の値の小数点以下が切り捨てられる可能性がある]]></title><description><![CDATA[
Rails アプリケーションを docker で動かすために、Dockerfile 内で vite build を実行するようにしていた。
macOS (arm64) 上の docker buildx で arm64 および amd64 用のイメージを作成していた。
amd64 用イメージ内の CSS の値が小数点以下切り捨てられていた。

# 元の CSS や arm64 イメージ内の CSS の記述
html { line-height: 1.5; }
# amd64 イメージ内の CSS の記述
html { line-height: 1; }
調査すると scss (sass)...]]></description><link>https://zenn.dev/labocho/articles/3fc285f64be2ca</link><guid isPermaLink="true">https://zenn.dev/labocho/articles/3fc285f64be2ca</guid><pubDate>Wed, 23 Jul 2025 06:35:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m5Iwlj54--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:docker%2520buildx%2520%25E3%2581%25A7%2520sass%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AB%2520CSS%2520%25E3%2581%25AE%25E5%2580%25A4%25E3%2581%25AE%25E5%25B0%258F%25E6%2595%25B0%25E7%2582%25B9%25E4%25BB%25A5%25E4%25B8%258B%25E3%2581%258C%25E5%2588%2587%25E3%2582%258A%25E6%258D%25A8%25E3%2581%25A6%25E3%2582%2589%25E3%2582%258C%25E3%2582%258B%25E5%258F%25AF%25E8%2583%25BD%25E6%2580%25A7%25E3%2581%258C%25E3%2581%2582%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:labocho%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hsUVdTdXZxd3RRU0xWNnFqUHVfT0NRaFJFMU9lS0xvQlZiMnhsWGc9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>labocho</dc:creator></item><item><title><![CDATA[📝 Go初心者がTodoアプリにPostgreSQL接続を実践]]></title><description><![CDATA[
 はじめに
エンジニア4ヶ月目のSomeです！
前回、Go vs C# Todo App のDocker化比較を書いて、Goの圧倒的性能を実感しました。しかし、その時のアプリはIn-Memoryでデータを管理していたため、アプリを再起動するとデータが消えてしまう問題がありました。
今回は、その続編としてGoアプリをPostgreSQL化してみました。実際の業務では避けて通れないデータベース接続を学びながら、設定管理やORM、Docker Composeなど、Web開発の基本的な要素を一通り体験できました。
この記事では、Go初心者の私がPostgreSQL接続を実装する過程で学んだこと...]]></description><link>https://zenn.dev/some55/articles/7537064831894e</link><guid isPermaLink="true">https://zenn.dev/some55/articles/7537064831894e</guid><pubDate>Tue, 22 Jul 2025 23:27:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--s8XvcXoW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%2520%2520Go%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258CTodo%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25ABPostgreSQL%25E6%258E%25A5%25E7%25B6%259A%25E3%2582%2592%25E5%25AE%259F%25E8%25B7%25B5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:some%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQzNWYzNjQ4YWQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>some</dc:creator></item><item><title><![CDATA[entrypoint.shとは]]></title><description><![CDATA[
 この記事の背景
コードを書く作業と、マネジメントの作業を行ったりきたりすると忘れるので、自分のために
entrypoint.shの役割についてメモ

 entrypoint.shとは
entrypoint.sh は、Dockerコンテナが起動したときに最初に実行されるシェルスクリプトとしてよく使われるファイルです
🧭 基本のイメージ
Dockerfile で次のように指定されていたら：
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
このとき、コンテ...]]></description><link>https://zenn.dev/bati668/articles/0420a251979d35</link><guid isPermaLink="true">https://zenn.dev/bati668/articles/0420a251979d35</guid><pubDate>Tue, 22 Jul 2025 00:26:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xrLyPJf5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_72:entrypoint.sh%25E3%2581%25A8%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:bati668%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU1MWQyODliZDcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>bati668</dc:creator></item></channel></rss>