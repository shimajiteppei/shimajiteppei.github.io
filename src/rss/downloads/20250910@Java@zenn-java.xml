<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Java」のフィード]]></title><description><![CDATA[Zennのトピック「Java」のRSSフィードです]]></description><link>https://zenn.dev/topics/java</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/5c47bb8423.png</url><title>Zennの「Java」のフィード</title><link>https://zenn.dev/topics/java</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 10 Sep 2025 12:04:35 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/java/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Javaのチェック例外/非チェック例外の使い分け？]]></title><description><![CDATA[
 例外クラスの継承構造
Javaにおいては、例外はクラスです。こんな感じの継承構造になっています。

この図はイメージ優先のため、正確な継承構造ではありません。
一番上のスーパークラスはThrowableです（Objectのサブクラス）。
ThrowableのサブクラスはExceptionとErrorです。
Errorおよびそのサブクラスは、メモリが足りないなどかなり致命的な例外です。基本的には、これらがスローされたらアプリケーションを止めるしかありません。
Exceptionのサブクラスは、RuntimeExceptionおよびそのサブクラスと、RuntimeException以外の...]]></description><link>https://zenn.dev/masatoshi_tada/articles/24cda978a16e8f</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/24cda978a16e8f</guid><pubDate>Wed, 10 Sep 2025 02:00:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--QmbHEZCa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E3%2581%25AE%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E4%25BE%258B%25E5%25A4%2596%252F%25E9%259D%259E%25E3%2583%2581%25E3%2582%25A7%25E3%2583%2583%25E3%2582%25AF%25E4%25BE%258B%25E5%25A4%2596%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E5%2588%2586%25E3%2581%2591%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[第1章：クラスの基本とインスタンス化]]></title><description><![CDATA[
 第1章：クラスの基本とインスタンス化


 1. はじめに


プログラムを書く目的は、コンピュータを動かすことだけではありません。プログラムは人間が読むものでもあり、他人や未来の自分が理解しやすいことが重要です。
したがって、コードは「動く手順書」であると同時に「思考の設計図」である必要があります。
この授業では、コードの可読性（readability）を重視します。単に動けばよいコードではなく、**「何をしているのか」「なぜそう書かれているのか」**を重要視します。

 コーディングで大切な3つの原則


変数やメソッドの名前に意味を込めること（命名は意図を伝える最初の道具です）...]]></description><link>https://zenn.dev/yusukesakae/articles/3533a3d047bbb1</link><guid isPermaLink="true">https://zenn.dev/yusukesakae/articles/3533a3d047bbb1</guid><pubDate>Tue, 09 Sep 2025 14:31:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vTQQ7xFY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E7%25AC%25AC1%25E7%25AB%25A0%25EF%25BC%259A%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%25A8%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2582%25B9%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E6%25A6%25AE%25E7%25A5%2590%25E4%25BB%258B%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkRZYTlKNnlkNW9rQUVfMjZkZDVCeUZSQUFtZlZ2S01sRVB4RUQ1R0dNOEF5TEZ3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>榮祐介</dc:creator></item><item><title><![CDATA[java.util.Dateとjava.sql.Dateとjava.time.LocalDateのややこしい関係]]></title><description><![CDATA[
 環境
JDK 21

Java 8以降であれば、バージョンが違っていても同じだと思います。たぶん。


 各クラスの１行説明


java.util.Date

Javaの初期から存在する日時クラス（時分秒も持つ）



java.sql.Date

JDBCで利用する日付クラス（時分秒は持たない）



java.time.LocalDate

Java 8から導入された日付クラス（時分秒は持たない）



通常の業務ロジックを書くときは、基本的にはjava.time.LocalDateを使うことがほとんどです。
しかし、古いライブラリやロジックではjava.util.Date、D...]]></description><link>https://zenn.dev/masatoshi_tada/articles/aa4eb7cf0cde36</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/aa4eb7cf0cde36</guid><pubDate>Tue, 09 Sep 2025 09:41:30 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rRKu4lO1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:java.util.Date%25E3%2581%25A8java.sql.Date%25E3%2581%25A8java.time.LocalDate%25E3%2581%25AE%25E3%2582%2584%25E3%2582%2584%25E3%2581%2593%25E3%2581%2597%25E3%2581%2584%25E9%2596%25A2%25E4%25BF%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[Mockitoでモックのメソッドが1回目・2回目・・・に呼び出されるごとに戻り値を変えるようにする]]></title><description><![CDATA[
 環境

JDK 21
JUnit 5.12.2
Mockito 5.15.0


 テスト対象

Sample.java
public class Sample {
    Random random = new Random();

    public int getNextInt() {
        return random.nextInt();
    }
}


 テスト
doReturn()に複数の値を指定すれば、それが1回目の戻り値・2回目の戻り値・・・となります。

SampleTest.java
public class SampleTest {
    @N...]]></description><link>https://zenn.dev/masatoshi_tada/articles/f881ecc422d3af</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/f881ecc422d3af</guid><pubDate>Tue, 09 Sep 2025 06:56:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--tnWZalBq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mockito%25E3%2581%25A7%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E3%2583%25A1%25E3%2582%25BD%25E3%2583%2583%25E3%2583%2589%25E3%2581%258C1%25E5%259B%259E%25E7%259B%25AE%25E3%2583%25BB2%25E5%259B%259E%25E7%259B%25AE%25E3%2583%25BB%25E3%2583%25BB%25E3%2583%25BB%25E3%2581%25AB%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E3%2581%2594%25E3%2581%25A8%25E3%2581%25AB%25E6%2588%25BB%25E3%2582%258A%25E5%2580%25A4%25E3%2582%2592%25E5%25A4%2589%25E3%2581%2588%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[標準入力/標準出力をテストする]]></title><description><![CDATA[
 何をしたいか
極稀に、標準入力で何が入力されたか・標準出力で何が出力されたかをテストしたいことがあります。
やり方を備忘録としてメモしておきます。

 環境

JDK 21
JUnit 5.12.2


多少バージョンが違っていても大丈夫だと思います。たぶん。


 テスト対象

Sample1.java
public class Sample1 {
    public List&lt;Integer&gt; input() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("整...]]></description><link>https://zenn.dev/masatoshi_tada/articles/abf40605cd2045</link><guid isPermaLink="true">https://zenn.dev/masatoshi_tada/articles/abf40605cd2045</guid><pubDate>Tue, 09 Sep 2025 06:20:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zr9UKe6B--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%25A8%2599%25E6%25BA%2596%25E5%2585%25A5%25E5%258A%259B%252F%25E6%25A8%2599%25E6%25BA%2596%25E5%2587%25BA%25E5%258A%259B%25E3%2582%2592%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masatoshi%2520Tada%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlNzY1NjBmYTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masatoshi Tada</dc:creator></item><item><title><![CDATA[i++と++iの実行順序について〜自戒を込めて〜]]></title><description><![CDATA[
 はじめに
早速ですが、以下のプログラムの実行結果をどうなるでしょうか？
public class Test {
    public static void main(String[] args) {
        int i = 0;
        System.out.println(i++ + ++i);
    }
}
答え
2 （0 + 2 = 2）



i++ の部分で、現在の i の値（0）が評価されます。この時点で、i は1増えます。
評価: 0, iの値: 1

続いて、++i の部分で i が1増加して 2 になり、その値が評価されます。
評価: 2, iの...]]></description><link>https://zenn.dev/sh1ge99/articles/bb72d926513ce4</link><guid isPermaLink="true">https://zenn.dev/sh1ge99/articles/bb72d926513ce4</guid><pubDate>Sun, 07 Sep 2025 04:00:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---YFxIL3O--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:i%252B%252B%25E3%2581%25A8%252B%252Bi%25E3%2581%25AE%25E5%25AE%259F%25E8%25A1%258C%25E9%25A0%2586%25E5%25BA%258F%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2580%259C%25E8%2587%25AA%25E6%2588%2592%25E3%2582%2592%25E8%25BE%25BC%25E3%2582%2581%25E3%2581%25A6%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:shige%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY4ZTI1Mzk1ODIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>shige</dc:creator></item><item><title><![CDATA[Spring Securityを使う]]></title><description><![CDATA[Spring Securityを使う方法を基礎から応用まで紹介していきます。]]></description><link>https://zenn.dev/free_corder/books/df7f44051c1825</link><guid isPermaLink="true">https://zenn.dev/free_corder/books/df7f44051c1825</guid><pubDate>Sat, 06 Sep 2025 22:50:30 GMT</pubDate><dc:creator>フリーコーダー</dc:creator></item><item><title><![CDATA[ローカル日時クラスまとめ<前編>[Java]]]></title><description><![CDATA[
 はじめに
こんにちは。
プログラミング初心者wakinozaと申します。
Java勉強中に調べたことを記事にまとめています。
十分気をつけて執筆していますが、なにぶん初心者が書いた記事なので、理解が浅い点などあるかと思います。
間違い等あれば、指摘いただけると助かります。
記事を参考にされる方は、初心者の記事であることを念頭において、お読みいただけると幸いです。

 対象読者

Javaを勉強中の方
「Date and Time API」について知りたい方


 記事のテーマ

「Date and Time API」のローカル日時を扱うクラスを開発でよく使います。しかし、APIの種類...]]></description><link>https://zenn.dev/wakinoza/articles/3730127e016962</link><guid isPermaLink="true">https://zenn.dev/wakinoza/articles/3730127e016962</guid><pubDate>Sat, 06 Sep 2025 06:24:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--M4AH0GwG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E6%2597%25A5%25E6%2599%2582%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%253C%25E5%2589%258D%25E7%25B7%25A8%253E%255BJava%255D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:wakinoza%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhkYzVjNWY5ZWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>wakinoza</dc:creator></item><item><title><![CDATA[【Java】Mathクラスを使用し、三角形の斜辺・円周・円の面積・円の体積 を計算するプログラムを作成（備忘録）]]></title><description><![CDATA[
 １．はじめに
Java の理解を深めるために、Youtube 動画を参考に作成しました。
Math クラスを使用し作成しています。

 ２．Mathクラスとは
・Math クラスは、数値処理を行うための便利なメソッドが用意されているクラスです。
・java.lang パッケージに含まれているので、import 宣言をせずに使用可能です。

Sample.java
public class Sample {
    public static void main(String[] args) {

        System.out.println("大きい数値を取得：" + Mat...]]></description><link>https://zenn.dev/yama_kawa/articles/584d6c12ce9df8</link><guid isPermaLink="true">https://zenn.dev/yama_kawa/articles/584d6c12ce9df8</guid><pubDate>Fri, 05 Sep 2025 03:31:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--JPKCDCE5--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Java%25E3%2580%2591Math%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2580%2581%25E4%25B8%2589%25E8%25A7%2592%25E5%25BD%25A2%25E3%2581%25AE%25E6%2596%259C%25E8%25BE%25BA%25E3%2583%25BB%25E5%2586%2586%25E5%2591%25A8%25E3%2583%25BB%25E5%2586%2586%25E3%2581%25AE%25E9%259D%25A2%25E7%25A9%258D%25E3%2583%25BB%25E5%2586%2586%25E3%2581%25AE%25E4%25BD%2593%25E7%25A9%258D%2520%25E3%2582%2592%25E8%25A8%2588%25E7%25AE%2597%25E3%2581%2599%25E3%2582%258B%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25EF%25BC%2588%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%25A9%25E3%2582%25B6%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2591%25E3%2583%25B3%25E3%2582%25B5%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ0MzVlNmE1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ラザニアパンサー</dc:creator></item><item><title><![CDATA[Gradle再入門 - 基本から実践的な運用まで]]></title><description><![CDATA[
 概要
この記事では、モダンなソフトウェア開発に不可欠なビルド自動化ツール「Gradle」について、その基本概念から内部構造、実践的な利用方法、そしてCI/CDとの連携までを体系的に解説します。
Gradleは、多言語ソフトウェア開発に対応するオープンソースのビルド自動化ツールです。ソースコードのコンパイル、テスト、パッケージング、デプロイといった一連のプロセスを自動化し、実行可能なアプリケーションやライブラリへと変換します。
Apache AntやMavenの思想を基盤としつつ、パフォーマンスと柔軟性の課題を解決するために設計されました。XMLベースのMavenとは異なり、Groov...]]></description><link>https://zenn.dev/suwash/articles/gradle_20250905</link><guid isPermaLink="true">https://zenn.dev/suwash/articles/gradle_20250905</guid><pubDate>Thu, 04 Sep 2025 15:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--guG1lc8f--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Gradle%25E5%2586%258D%25E5%2585%25A5%25E9%2596%2580%2520-%2520%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%258B%25E3%2582%2589%25E5%25AE%259F%25E8%25B7%25B5%25E7%259A%2584%25E3%2581%25AA%25E9%2581%258B%25E7%2594%25A8%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:suwa-sh%2520%252F%2520%25E8%25AB%258F%25E8%25A8%25AA%25E7%259C%259F%25E4%25B8%2580%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNlQ0cjdIdGJrWG10aG42OE53dmlHWXBLcGI5VWQ5N3hnRS1aQnM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>suwa-sh / 諏訪真一</dc:creator></item><item><title><![CDATA[Rust Async完全攻略：TokioとFuturesで高性能を引き出す10のTips]]></title><description><![CDATA[
 Rust Async エコシステム（Tokio/Futures）の10の実践テクニック
Rust Async エコシステム（Tokio/Futures）のコアデザインはゼロコスト抽象化＋メモリ安全性にありますが、高水準な開発ではスケジューリング、メモリ、並行処理の面で隠れた落とし穴が発生しやすいです。以下の10のテクニックは、基盤となるロジックを理解し、高性能な Async コードを記述するのに役立ちます。

 💡 テクニック1：Pin の本质を理解する－「固定」ではなく「約束」である

 なぜこのデザインが必要か？
Async Future には自己参照（例：async fn が ...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/611cbf623f8133</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/611cbf623f8133</guid><pubDate>Wed, 03 Sep 2025 14:49:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--m2dKDxke--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520Async%25E5%25AE%258C%25E5%2585%25A8%25E6%2594%25BB%25E7%2595%25A5%25EF%25BC%259ATokio%25E3%2581%25A8Futures%25E3%2581%25A7%25E9%25AB%2598%25E6%2580%25A7%25E8%2583%25BD%25E3%2582%2592%25E5%25BC%2595%25E3%2581%258D%25E5%2587%25BA%25E3%2581%259910%25E3%2581%25AETips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[Rust Web アプリをレベルアップ：開発者向け上級テク10選]]></title><description><![CDATA[
 Rust Web開発の高度な10のヒント：設計原則から実装まで
RustによるWeb開発のメリットは**「ゼロコスト抽象化＋メモリ安全性」** にありますが、高度なシナリオ（高並行性、複雑な依存関係、セキュリティ保護）では「フレームワークのデフォルト使用法」を超える必要があります。以下の10のヒントは、Tokio/Axum/Sqlxなどのエコシステムを組み合わせ、設計ロジックを分解して、より効率的で安全なコードを記述するのに役立ちます。

 ヒント1：手動のJoinHandle管理の代わりにTokio JoinSetを使用する
方法：複数の非同期タスクのシナリオでは、JoinHand...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/d57984d41afc42</guid><pubDate>Tue, 02 Sep 2025 15:05:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ynzN_vd4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520Web%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25EF%25BC%259A%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E4%25B8%258A%25E7%25B4%259A%25E3%2583%2586%25E3%2582%25AF10%25E9%2581%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[Java仮想マシン（JVM）を読解しながら理解する #06]]></title><description><![CDATA[https://zenn.dev/h_kohe/articles/5cbf90982e0c29
こちらの記事の続きです
よんでいる公式ドキュメント
https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-2.html
今週末は今更ながらにClaude Codeをプロプランに切り替えたのですが、
想定より楽しくなってしまいずっと触っていたらあっという間に深夜になってしまいました・・・😇
https://github.com/koheihida/digital-narrative-cascade
GitHub Pagesにも公開してい...]]></description><link>https://zenn.dev/h_kohe/articles/0415315d4dd8b9</link><guid isPermaLink="true">https://zenn.dev/h_kohe/articles/0415315d4dd8b9</guid><pubDate>Tue, 02 Sep 2025 15:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ty0WSgwJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%25E4%25BB%25AE%25E6%2583%25B3%25E3%2583%259E%25E3%2582%25B7%25E3%2583%25B3%25EF%25BC%2588JVM%25EF%25BC%2589%25E3%2582%2592%25E8%25AA%25AD%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25AA%25E3%2581%258C%25E3%2582%2589%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2520%252306%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:KOHE%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2MwMDQxMTQ1ZjguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>KOHE</dc:creator></item><item><title><![CDATA[Axon Framework の Deadline 機能 を使ってみた]]></title><description><![CDATA[
 はじめに
Axon Framework の Deadline 機能を使って、処理のタイムアウト処理を実装してみたので、その使い心地と注意事項、所感等をまとめます。

 Deadline とは
Axon における Deadline とは、大きく以下の 2 つがあります。

Deadline Manager - 指定の時間経過後にコールバックを呼び出す
Event Scheduler - 指定の時間経過後にイベントを発行する

どちらも業務的な「期限」を表現するものであり、似たようなものですが、Deadline Manager は期限到来時に何らかの処理を動かしたい場合、Event Sc...]]></description><link>https://zenn.dev/tmiyajima/articles/c5b7d82ca7062d</link><guid isPermaLink="true">https://zenn.dev/tmiyajima/articles/c5b7d82ca7062d</guid><pubDate>Tue, 02 Sep 2025 14:01:04 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P8pIamM8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Axon%2520Framework%2520%25E3%2581%25AE%2520Deadline%2520%25E6%25A9%259F%25E8%2583%25BD%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tmiyajima%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnUzRG0tMWUtQzRDSUh5RGZLSUYtanJZREJHdGRtZXBjbGY0bERsUW1FLUhOdXhSST1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tmiyajima</dc:creator></item><item><title><![CDATA[ラムダって何なの？]]></title><description><![CDATA[
 まず初めに
この記事を読むとラムダについて理解できるようになる。

 今回の内容の目的

ラムダってなんなん？という状態を抜け出す


 ラムダとは
ラムダ式とは、無名関数を表現するための構文のこと。
ラムダ関数とはラムダ式をコンパイルした結果を得られる関数オブジェクトのこと。

 サンプルコード
まず、ラムダのとてもシンプルなサンプルコードを見ていきます。
// xを受け取ってxの2乗をするラムダ式
Function&lt;Integer, Integer&gt; square = x -&gt; x * x;

// 呼び出し
System.out.println(square....]]></description><link>https://zenn.dev/tacos/articles/8065f767dc2044</link><guid isPermaLink="true">https://zenn.dev/tacos/articles/8065f767dc2044</guid><pubDate>Tue, 02 Sep 2025 11:19:15 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2Rcm9OFH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2583%25A0%25E3%2583%2580%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25E3%2581%25AA%25E3%2581%25AE%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25BF%25E3%2582%25B3%25E3%2582%25B9%25E3%2583%259E%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25BC%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHNqWVZUSXZtQmFWX3VLeWdicy0tbDVHRG13dUpVMWd6TEtDYzJPRElNTlE5T0JBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>タコスマスター</dc:creator></item><item><title><![CDATA[【Android】cloneアプリのapplicationIdなどを変更して別アプリとして流用する]]></title><description><![CDATA[Android アプリ開発において、既存プロジェクトやテンプレートプロジェクトを clone して流用したい場面があると思います。
または、適当に applicationId を設定したものの、後から正式なものに変更したい。などの場合もあるあるかと思います。
そんな場合の applicationId や Project 名などを変更する方法についてざっとまとめてみました。


 検証環境

Android Studio Narwhal Feature Drop | 2025.1.2
検証前の applicationId は com.example.test.app と仮定します。

※ ...]]></description><link>https://zenn.dev/ncdc/articles/android_applicationid</link><guid isPermaLink="true">https://zenn.dev/ncdc/articles/android_applicationid</guid><pubDate>Tue, 02 Sep 2025 01:17:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--KboI_TKr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Android%25E3%2580%2591clone%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AEapplicationId%25E3%2581%25AA%25E3%2581%25A9%25E3%2582%2592%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%2597%25E3%2581%25A6%25E5%2588%25A5%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E6%25B5%2581%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%25A8%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODZhNDA5ZDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/g_south_west%2Ch_34%2Cl_default:og-publication-pro-mark-xcosax%2Cw_34%2Cx_217%2Cy_158/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:NCDC%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_255%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZjMDVkNzJkN2EuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ゆーと</dc:creator></item><item><title><![CDATA[HTTPからWebSocketへ：リアルタイムWebの進化]]></title><description><![CDATA[
Leapcell：最高のサーバーレスWebホスティング

 HTTP長接続からWebSocketへ：リアルタイムWebの技術進化と米国企業の実践

 I. 歴史的進化：HTTP接続方式のジレンマと突破口
初期のWebは静的コンテンツが中心であり、HTTPプロトコルは「リクエスト-レスポンス」の短時間接続（ショートコネクション）方式を採用していた。クライアントがリクエストを送信し、サーバーがレスポンスを返すと、TCP接続は即座に切断される。この方式は静的ページの時代には有効だったが、オンラインチャットやリアルタイム監視といったインタラクティブなニーズの高まりに伴い、ショートコネクションの...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/dc12c235f1e917</guid><pubDate>Mon, 01 Sep 2025 15:35:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4WFcS8nY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:HTTP%25E3%2581%258B%25E3%2582%2589WebSocket%25E3%2581%25B8%25EF%25BC%259A%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0Web%25E3%2581%25AE%25E9%2580%25B2%25E5%258C%2596%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item><item><title><![CDATA[JavaSilver取得に向けて]]></title><description><![CDATA[こんにちは。
オアシステクノロジーズの中村です。
会社的には新年度の一発目投稿となります！
今年度の目標として資格を取得しようというあるあるなものがありまして、自分はJavaSilverに挑戦します。
一度受けたのですが、その時は丁度50%の正解率で残り6~8問くらいでした。
chatGPTで勉強できるみたいなので、みなさんと一緒に勉強したいと思います！

 Java Silver 練習問題集（10問）
ITエンジニア向けに、Java Silver試験対策として10問の練習問題を用意しました。形式はシンプルに「問題 → 解答 → 解説」としています。ぜひ挑戦してみてください。


 問題...]]></description><link>https://zenn.dev/oasys/articles/a6135ed0692b81</link><guid isPermaLink="true">https://zenn.dev/oasys/articles/a6135ed0692b81</guid><pubDate>Mon, 01 Sep 2025 01:56:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--pZhQckjJ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JavaSilver%25E5%258F%2596%25E5%25BE%2597%25E3%2581%25AB%25E5%2590%2591%25E3%2581%2591%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AA%25E3%2582%25A2%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258E%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%25BC%25E3%2582%25BA%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQyMGUxYmY0YzcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>オアシステクノロジーズ</dc:creator></item><item><title><![CDATA[jOOQ の起動後最初のクエリが遅い問題]]></title><description><![CDATA[
 先にまとめ
jOOQ を大量(数百以上)のテーブルを持つデータベースで使うとき、クラスローディング等で起動後最初のリクエストで時間がかかることがある。
リクエストを受け付ける前に適当な jOOQ クエリを一度流しておくなど、適切にウォームアップしましょう。

 問題
jOOQ を ORM として利用してるバックエンドプロジェクトで、以下の様な問題に遭遇しました。
https://www.jooq.org/

起動直後の1発目リクエストが必ず遅い (2秒以上)
2発目以降のリクエストは、概ね 500ms 以下で処理できる
jOOQ を呼び出していないリクエストはそれほど遅くない
JDB...]]></description><link>https://zenn.dev/moneyforward/articles/1b1f145593ce09</link><guid isPermaLink="true">https://zenn.dev/moneyforward/articles/1b1f145593ce09</guid><pubDate>Mon, 01 Sep 2025 00:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--VaTvxv2---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:jOOQ%2520%25E3%2581%25AE%25E8%25B5%25B7%25E5%258B%2595%25E5%25BE%258C%25E6%259C%2580%25E5%2588%259D%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%258C%25E9%2581%2585%25E3%2581%2584%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:hktechno%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUwOTQ4MTI2ZjguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Money%2520Forward%2520Developers%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM1MGU0MTgwOWQuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hktechno</dc:creator></item><item><title><![CDATA[WebSocketとHTTPショートコネクションの技術進化と比較分析]]></title><description><![CDATA[
 WebSocketとHTTPショートコネクションの技術進化と比較分析
現代のWebアプリケーションにおいて、クライアントとサーバー間の通信方式は、アプリケーションのパフォーマンスとユーザーエクスペリエンスに直接的な影響を与えます。初期の静的Webページから今日のリアルタイムコラボレーションツールまで、通信プロトコルの進化は常に「効率性」と「リアルタイム性」という2つのコアニーズを中心に展開されてきました。本稿では、HTTPショートコネクション、HTTPロングコネクション及びその派生技術を深く分析し、最終的にWebSocketの設計理念とアプリケーションシナリオを比較します。また、Py...]]></description><link>https://zenn.dev/taiga_yamamoto/articles/39d2cc9d4a1487</link><guid isPermaLink="true">https://zenn.dev/taiga_yamamoto/articles/39d2cc9d4a1487</guid><pubDate>Sun, 31 Aug 2025 14:09:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sTPTGUi4--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:WebSocket%25E3%2581%25A8HTTP%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25B3%25E3%2583%258D%25E3%2582%25AF%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E6%258A%2580%25E8%25A1%2593%25E9%2580%25B2%25E5%258C%2596%25E3%2581%25A8%25E6%25AF%2594%25E8%25BC%2583%25E5%2588%2586%25E6%259E%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Taiga%2520Yamamoto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTGNWMEs0N0tCSkhhMXpRV3lLNm0tdjh1X1U4N1VPQ2xBazBVOVpubVF5dWZBLT1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Taiga Yamamoto</dc:creator></item></channel></rss>