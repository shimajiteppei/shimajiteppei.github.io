<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 11 Jun 2025 07:59:10 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[Dioxus v0.6 でデスクトップアプリを作る実装 Tips]]></title><description><![CDATA[
 概要
Rust のフレームワーク「Dioxus」と画像処理ライブラリ「OpenCV」を組み合わせて、テンプレートマッチングアプリを開発した際の実装 Tips をまとめました。

 環境

Rust 1.86.0
Dioxus CLI 0.6.3
OpenCV 4.11.0
npm 10.8.2
Tailwind CSS 4.1.7


 作ったもの

Windows の画面をキャプチャし、指定したテンプレート画像と一致する箇所を検出
GUI でテンプレート画像や検出感度などを設定可能
検出時に通知やサウンド、Discord 通知も送信できる


 リポジトリ
GitHub: rust...]]></description><link>https://zenn.dev/st_little/articles/learned-from-building-desktop-app-with-dioxus-v06</link><guid isPermaLink="true">https://zenn.dev/st_little/articles/learned-from-building-desktop-app-with-dioxus-v06</guid><pubDate>Tue, 10 Jun 2025 10:25:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--SakjqrTm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dioxus%2520v0.6%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E5%25AE%259F%25E8%25A3%2585%2520Tips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:st-little%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUxtNXd1MzFRX0lpMkZWUVdwclRKOUluaXJPN092TlI2WkV6c1A3WGRRMTU9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>st-little</dc:creator></item><item><title><![CDATA[rusqliteを使ってみた]]></title><description><![CDATA[今回はRustからSQLiteを使うためのrusqliteに入門したので、その紹介をしようと思います。

 rusqliteとは？
公式のGitHubページによると、ruqsliteはSQLiteをRustから利用するためのラッパーということです。私自身、Pythonを使う時はsqlite3を用いて接続しており、DBの環境構築が不要なので簡単な実装などには利用しています。そこで、Rustでも使えたらいいなと思っていたら使えるとのことだったので今回使ってみました。
https://github.com/rusqlite/rusqlite

 rusqliteを使ってみる

 環境構築
まず...]]></description><link>https://zenn.dev/akasan/articles/5e069b51c68db1</link><guid isPermaLink="true">https://zenn.dev/akasan/articles/5e069b51c68db1</guid><pubDate>Mon, 09 Jun 2025 11:39:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gMMvYRK1--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:rusqlite%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Akasan%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwNXJfNDFtel9OY3dPYUtMRE1vc09tbVB6YmxHM0V5N3lNZzI3QWM9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Akasan</dc:creator></item><item><title><![CDATA[serdeのシリアライズ/デシアライズ実例]]></title><description><![CDATA[
 説明
以下二つの構造体をserdeでjsonにシリアライズ/デシアライズするとどうなるのかの実例です。上をSimple, 下をComplexとしてます。
Self {
    int_field: 1,
    float_field: 2.3,
    str_field: "foo".to_string(),
    boolean_field: false,
}
Self {
    desc: "it is complex".to_string(),
    simple_1: Simple::default(), // Simpleは上の構造体
    date: Loca...]]></description><link>https://zenn.dev/uliboooo/articles/0f2c0e56e3f1fa</link><guid isPermaLink="true">https://zenn.dev/uliboooo/articles/0f2c0e56e3f1fa</guid><pubDate>Mon, 09 Jun 2025 06:05:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vZGrySzj--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:serde%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25BA%252F%25E3%2583%2587%25E3%2582%25B7%25E3%2582%25A2%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25BA%25E5%25AE%259F%25E4%25BE%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Uliboooo%2528%25E3%2581%2586%25E3%2582%258A%25E3%2581%25BC%25E3%2581%2586%2529%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MTFjYWRhM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Uliboooo(うりぼう)</dc:creator></item><item><title><![CDATA[Rust未経験でも5日でサービス公開！Vibe Codingの威力がすごかった話]]></title><description><![CDATA[本日、みんなの話題 というサービスを公開しました！
このサービスは Vibe Coding により Rust 未経験 の状態から約 5 日[1]で開発したものです。
コードは OSS になっているため、ぜひサービスとあわせてご覧ください。
https://minwada.com
https://github.com/y-temp4/minwada

 サービス開発のきっかけ
以前から Rust に興味があり、多少学習を進めていました。
具体的にはいくつか書籍を読んだり、少しだけ LeetCode の問題に取り組むなどしていた感じです。ただ、やはり実際にがっつりとコードを書く機会がないとあ...]]></description><link>https://zenn.dev/typebase_dev/articles/rust-beginner-vibe-coding-5days-launch</link><guid isPermaLink="true">https://zenn.dev/typebase_dev/articles/rust-beginner-vibe-coding-5days-launch</guid><pubDate>Mon, 09 Jun 2025 03:04:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4tbwqSyc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E6%259C%25AA%25E7%25B5%258C%25E9%25A8%2593%25E3%2581%25A7%25E3%2582%25825%25E6%2597%25A5%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E5%2585%25AC%25E9%2596%258B%25EF%25BC%2581Vibe%2520Coding%25E3%2581%25AE%25E5%25A8%2581%25E5%258A%259B%25E3%2581%258C%25E3%2581%2599%25E3%2581%2594%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:Yuki%2520Terashima%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YwOWU5MTQ2MTkuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:Typebase%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YTY4MjVhZmMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yuki Terashima</dc:creator></item><item><title><![CDATA[Rust で slack-morphism を使って Slack にメッセージを送る]]></title><description><![CDATA[
 内容
Rust の slack-morphism クレートを使って Slack にメッセージを送る。
Slack に API を使ってメッセージを送るだけならばプランを問わず Free プランでも チャンネル あたり 1秒1件 メッセージを送ることができる。
Burst 送信で多少オーバーすることはできるらしい。
少し厳しい条件だが通知を集約したりなどすれば実用上は問題がない印象。
具体的な curl でのリクエストや、レガシーな手法を比較しながら、現在(2025年6月)一番モダンな Slack Block API を使ったコードを示す。

 準備

 アプリの作成


https:...]]></description><link>https://zenn.dev/creanciel/articles/slack-morphism</link><guid isPermaLink="true">https://zenn.dev/creanciel/articles/slack-morphism</guid><pubDate>Sun, 08 Jun 2025 15:37:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LipEHczD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520slack-morphism%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%2520Slack%2520%25E3%2581%25AB%25E3%2583%25A1%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E9%2580%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Creanciel%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwOWFkYmIxNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Creanciel</dc:creator></item><item><title><![CDATA[Rustで学ぶシェルの簡単な構造]]></title><description><![CDATA[
 はじめに
いつも何気なく使っているシェル、中身どうなっているんだろう、、こんな感じなのかな〜みたいなのは前から想像を膨らませてながら仕事していた日々。
ふとRustでシェルが公開されているのを見て、「せっかくだし自分でもつくって、さわってみよ」という軽い気持ちで作ってみましたので何かの参考になれば幸いです。

 開発環境

MacOS Monterey 12.6
docker 20.10.17
rust 1.60 （dockerコンテナ内）


 ディレクトリ, ファイル構成
下記のような構成になってます。
今回コンテナひとつなのでcomposeいらないかなとも思いましたが、軽い気持...]]></description><link>https://zenn.dev/m2lab/articles/7361d41918a6e8</link><guid isPermaLink="true">https://zenn.dev/m2lab/articles/7361d41918a6e8</guid><pubDate>Sun, 08 Jun 2025 13:33:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RexzDXSG--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2581%25AE%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AA%25E6%25A7%258B%25E9%2580%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masa0209%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzA4ZWJkMzI1Y2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masa0209</dc:creator></item><item><title><![CDATA[ABC409: Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 409のA-E問題をRustで解いた際の解法をまとめました。

 A 問題
問題
https://atcoder.jp/contests/abc409/tasks/abc409_a
解説
2人の欲しいものリスト（文字列）を比較し、同じ位置で両方が o となっている列が1つでも存在するかを判定する問題です。
具体的には、文字列 T と A の各文字を順に比較し、どちらも o である箇所が1つでもあれば Yes を出力し、そうでなければ No を出力します。
コード

abc409a.rs
use proconio::{input, mark...]]></description><link>https://zenn.dev/nakst_hide/articles/dbc547a25c0eb3</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/dbc547a25c0eb3</guid><pubDate>Sun, 08 Jun 2025 11:40:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PJP_29GR--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC409%253A%2520Rust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Vibe CodingでTLS 1.3を実装してみたら、思ったより人間が必要だった話]]></title><description><![CDATA[人間はコードを書かずに自然言語でLLMアプリに指示を与えることでソフトウェアを開発する、いわゆる「Vibe Coding」が普通になりました。プログラミング言語よりも自然言語のほうが得意っていう自分みたいな人間にとっては、いろいろ夢が広がります。
そんな夢の1つとして「プロトコルの実装」がありました。ネットワークの解説書を作る仕事をしているので、さまざまなプロトコルでやり取りされるメッセージの仕様に触れる機会はわりとあるほうです。それなのにプロトコルを実装したことがないのは実に残念な話だなと思っていました。
プロトコルの実装に必要なスキルは、プロトコルそのものの理解よりも、コンピューター...]]></description><link>https://zenn.dev/k16/articles/6b3c23af139b90</link><guid isPermaLink="true">https://zenn.dev/k16/articles/6b3c23af139b90</guid><pubDate>Sun, 08 Jun 2025 09:13:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--BmrWRGUm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Vibe%2520Coding%25E3%2581%25A7TLS%25201.3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2582%2589%25E3%2580%2581%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2582%258A%25E4%25BA%25BA%25E9%2596%2593%25E3%2581%258C%25E5%25BF%2585%25E8%25A6%2581%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:keiichiro%2520shikano%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFhMTI1NjVmOWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>keiichiro shikano</dc:creator></item><item><title><![CDATA[Rust CQRS イベントソーシング で APIサーバー を構築する]]></title><description><![CDATA[
 はじめに

 対象読者

CQRS とは何かを知りたい人
イベントソーシング とは何かを知りたい人
Rust CQRS イベントソーシングで API を実装したい人


 説明しないこと

Rust の基本的な文法
DDD の基本的な考え方

以前、Rust と DDD で API サーバーを構築する 記事を書いたので、DDD を使った API サーバーの構築方法を知りたい方は、そちらを参考にしてください。今回はそのリポジトリをもとに、コードを書いています。
https://github.com/katayama8000/axum-ddd-rust
!
あくまでも Rust で CQ...]]></description><link>https://zenn.dev/tattu/articles/rust-cqrs4t5rwss6</link><guid isPermaLink="true">https://zenn.dev/tattu/articles/rust-cqrs4t5rwss6</guid><pubDate>Sun, 08 Jun 2025 07:58:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--lFt_ixy---/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520CQRS%2520%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25BD%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25B3%25E3%2582%25B0%2520%25E3%2581%25A7%2520API%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%2520%25E3%2582%2592%25E6%25A7%258B%25E7%25AF%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:katayama8000%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FmZmRhNTA5ZmUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>katayama8000</dc:creator></item><item><title><![CDATA[duckdb-spatial は（まだ）複数ファイルを読み込めないので Rust でDuckDB 拡張をつくりました]]></title><description><![CDATA[duckdb-spatial の ST_Read は、単一のファイルしか読めません。メンテナの人によれば、DuckDB は複数のデータソースを扱うための仕組みがあり、duckdb-spatial でもそれを使うようにできるはず、とのことです。なので、将来的には複数ファイルを読めるようになりそうです。
https://github.com/duckdb/duckdb-spatial/issues/191#issuecomment-2935130507
ただ、それは少し先の話です。それまでのつなぎとして、ちょっとした DuckDB 拡張を作りました。以下のように glob パターンでパスを指...]]></description><link>https://zenn.dev/mierune/articles/7e34479ca467e0</link><guid isPermaLink="true">https://zenn.dev/mierune/articles/7e34479ca467e0</guid><pubDate>Sun, 08 Jun 2025 06:26:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3zpGFdQh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:duckdb-spatial%2520%25E3%2581%25AF%25EF%25BC%2588%25E3%2581%25BE%25E3%2581%25A0%25EF%25BC%2589%25E8%25A4%2587%25E6%2595%25B0%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2581%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%2520Rust%2520%25E3%2581%25A7DuckDB%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:yutannihilation%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzAyNDdjMTQzMmUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:MIERUNE%25E3%2581%25AEZenn%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2cxWXFZLWt6LTVmNFhSNVdXbjFNOVBpaWxaMkdYNHkwNjdtZy1VOEE9czk2LWM=%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yutannihilation</dc:creator></item><item><title><![CDATA[プログラミング初心者、Rustをはじめる]]></title><description><![CDATA[
 はろー、Zenn

 あいさつと今の状況
こんにちは　ねこです。本日からRustを学び始めました。旦那さんから影響をうけました。
今の状態書いていきます。


機械に明るくない。ぼけーっとしている。頭はよくない。考え事をすることが好き。


発達障害、PTSD、うつ病、解離性障害、最重度線維筋痛症などなど障害持ち


プログラミング楽しそうにやってる旦那さんやニコニコ技術部を見て自分もやりたくなりました。


興味がある方向はArduino、Raspberry Pi、Rust、Python、React、C/C++、低レイヤ


旦那さんに技術日記をZennに書くことを勧められて書いて...]]></description><link>https://zenn.dev/micro5mini6/articles/e4d34ca7d27edc</link><guid isPermaLink="true">https://zenn.dev/micro5mini6/articles/e4d34ca7d27edc</guid><pubDate>Sat, 07 Jun 2025 12:28:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--HWnwdxX_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2580%2581Rust%25E3%2582%2592%25E3%2581%25AF%25E3%2581%2598%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:neco%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzk4MDhhNDMzMjYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>neco</dc:creator></item><item><title><![CDATA[Rust で ONNX 形式の LightGBM の推論を実行する]]></title><description><![CDATA[
 はじめに
業務で Rust、ONNX、LightGBM を使って API を構築する機会がありました。
Rust で ONNX 形式の LightGBM の推論を実行する必要があったのですが、調べてもなかなか先行事例が見つからなかったので、自分なりに調べたことをここにまとめたいと思います。
LightGBM の学習は Python で行い、学習したモデルを ONNX 形式で保存し、推論は Rust で行うことを想定しています。

 実行環境
検証時の OS、言語、関連する Python ライブラリと Rust クレートのバージョンは以下の通りです。

OS: M1 Mac (Sono...]]></description><link>https://zenn.dev/potato_iidx/articles/528b3a4a4002f9</link><guid isPermaLink="true">https://zenn.dev/potato_iidx/articles/528b3a4a4002f9</guid><pubDate>Sat, 07 Jun 2025 07:14:31 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s---owf3pk2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520ONNX%2520%25E5%25BD%25A2%25E5%25BC%258F%25E3%2581%25AE%2520LightGBM%2520%25E3%2581%25AE%25E6%258E%25A8%25E8%25AB%2596%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kosei%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhjYTQwYTFlMmMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kosei</dc:creator></item><item><title><![CDATA[PHP スクリプトを実行する Rust CLI ツールを作る]]></title><description><![CDATA[
 序文
PHP スクリプトを Rust 製の CLI ツールから実行できたら便利だと思ったことはありませんか？
本記事では、PHP に標準で用意されている埋め込み用インターフェース（embed SAPI）を使って、Rust から PHP スクリプトを実行する最小限の CLI ツールを構築してみます。C 言語で php_embed_init() を呼び出し、Rust 側からは FFI 経由でこの関数を叩く構成です。
具体的には、以下の 2 つの処理例を紹介します：

.php ファイルを実行する CLI ツール -  zend_execute_scripts()

REPL の作成 - ...]]></description><link>https://zenn.dev/masakielastic/articles/20250607-php-cli-from-rust</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250607-php-cli-from-rust</guid><pubDate>Sat, 07 Jun 2025 07:11:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--COIdqM8w--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:PHP%2520%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2520Rust%2520CLI%2520%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[RustのフレームワークRocketを使ってTODOアプリを構築しよう]]></title><description><![CDATA[「RustでWebアプリって難しそう…」と思っていませんか？
実は Rocket というフレームワークを使えば、RustでもサクッとWebアプリが作れちゃうんです！

この記事では、Rust・HTML・CSS・SQLiteを使って、TODOアプリを一緒に作っていきます。
PythonのFlaskやDjangoを使ったことがある人なら、似た感じで開発できるのでとっつきやすいはず。

この記事を読めば…

- Rust × Rocketでアプリを作る方法がわかる
- MVTモデルの基本がつかめる
- Repositoryパターンの実装にもチャレンジできる！

前半ではRocketの使い方を丁寧に紹介しつつ、後半では実際にアプリを作ってデプロイまで体験します。

RustでWeb開発を始めてみたい人、Rocketって何？って気になっている人、
この機会にぜひ一緒にRustに触れてみましょう！]]></description><link>https://zenn.dev/kenquichi/books/016a034ec7b464</link><guid isPermaLink="true">https://zenn.dev/kenquichi/books/016a034ec7b464</guid><pubDate>Sat, 07 Jun 2025 00:28:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7AoQIhLY--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9lYWNhYTZhZjcwLmpwZWc=%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg" length="0" type="image/jpeg"/><dc:creator>ケン吉</dc:creator></item><item><title><![CDATA[「型システムのしくみ」をRustで実装してみた]]></title><description><![CDATA[
 やったこと
「型システムのしくみ」という書籍をRustで実装してみました。
https://www.lambdanote.com/products/type-systems
レポジトリはこちらです。
https://github.com/okaduki/type-systems-by-rust

 やってみた理由
以前「n月刊ラムダノート Vol.4, No.3」を読んでいましたが、今回さらに発展的な内容が含まれて面白そうだったため手を動かしてみました。
書籍はTypeScriptで進める構成になっていますが、Rust の勉強もちょうどしたいと思っていたのでRust で実装することに...]]></description><link>https://zenn.dev/okaduki/articles/b519bc9876e34f</link><guid isPermaLink="true">https://zenn.dev/okaduki/articles/b519bc9876e34f</guid><pubDate>Fri, 06 Jun 2025 18:31:33 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--kpvNbIhd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%258C%25E5%259E%258B%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%25E3%2580%258D%25E3%2582%2592Rust%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:okaduki%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YxNGVlNDBhMmQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>okaduki</dc:creator></item><item><title><![CDATA[YAZI入門：Rust製の高速ターミナルファイルマネージャー]]></title><description><![CDATA[
 YAZI入門：Rust製の高速ターミナルファイルマネージャー

YAZIロゴ（出典）

 はじめに
YAZIは、Rustで書かれた高速なターミナルファイルマネージャーです。非同期I/Oをベースにした設計により、非常に高速なファイル操作が可能です。この記事では、YAZIの基本的な使い方から、実践的な活用方法まで詳しく解説します。

 YAZIとは
YAZI（「アヒル」の意味）は、Rustで書かれた非同期I/Oベースのターミナルファイルマネージャーです。従来のファイルマネージャーと比較して、以下の特徴があります：

 主な特徴

🚀 完全な非同期サポート: すべてのI/O操作が非同期で、...]]></description><link>https://zenn.dev/long910/articles/2025-06-06-yazi</link><guid isPermaLink="true">https://zenn.dev/long910/articles/2025-06-06-yazi</guid><pubDate>Fri, 06 Jun 2025 14:00:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--F2Q83unD--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:YAZI%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%259ARust%25E8%25A3%25BD%25E3%2581%25AE%25E9%25AB%2598%25E9%2580%259F%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Long%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3YjMxYzM0YjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Long</dc:creator></item><item><title><![CDATA[BiomeのGritQLプラグイン vs. ast-grep: JS開発者のためのAST変換ガイド]]></title><description><![CDATA[
 なぜASTツールがリンターにとって重要なのか
Zennの皆様こんにちは。ast-grepの著者、Herringtonです。
大規模プロジェクトで一貫性のある高品質なコードを維持することは、大きな課題です。最新のRustベースのLintingツールは、基本的なコーディング標準を強制する点で素晴らしいパフォーマンスを発揮しますが、開発者が高度にカスタムなプロジェクト固有のパターンや、コードベース全体にわたる自動化された大規模なリファクタリングを必要とする場合、しばしば不十分です。ここで、AST（Abstract Syntax Tree：抽象構文木）ベースのツール、特にネイティブリンターに...]]></description><link>https://zenn.dev/hd_nvim/articles/f536e4e87f5d55</link><guid isPermaLink="true">https://zenn.dev/hd_nvim/articles/f536e4e87f5d55</guid><pubDate>Fri, 06 Jun 2025 05:29:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--agZTJNfU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Biome%25E3%2581%25AEGritQL%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%2520vs.%2520ast-grep%253A%2520JS%25E9%2596%258B%25E7%2599%25BA%25E8%2580%2585%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEAST%25E5%25A4%2589%25E6%258F%259B%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Herrington%2520Darkholme%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFjSFR0ZWZPY0dMdmpkYjdJT0JURTFKNXB4d3ZVcEc2SEdRZ2w3bE1LZnR0SW1hMFRxTj1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Herrington Darkholme</dc:creator></item><item><title><![CDATA[【Rust】抽象化のテクニック]]></title><description><![CDATA[!
随時更新中です。


 はじめに

cargo 1.87.0 (99624be96 2025-05-06)
edition = "2024"


 トレイト
Rustのトレイトは他言語のインタフェースと似ており、構造体に実装することで異なる型の振る舞いを共通化することができます。
trait Animal {
    fn make_sound(&amp;self) -&gt; String;
}
トレイトの実装struct Dog;

impl Animal for Dog {
    fn make_sound(&amp;self) -&gt; String {
        ...]]></description><link>https://zenn.dev/hkiku482/articles/22334ca7f22400</link><guid isPermaLink="true">https://zenn.dev/hkiku482/articles/22334ca7f22400</guid><pubDate>Wed, 04 Jun 2025 16:49:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--iYQyRSDh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E6%258A%25BD%25E8%25B1%25A1%25E5%258C%2596%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25AF%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hkiku482%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2YyODNiZDA2Y2IuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hkiku482</dc:creator></item><item><title><![CDATA[Rust で PHP 拡張を書く：Debian + ext-php-rs チュートリアル]]></title><description><![CDATA[
 序文
PHP でウェブ開発をしていると、非同期処理や低レベルの通信仕様（HTTP/2やHTTP/3）について体系的に学ぶ機会は限られています。そこで注目したのが Rust の導入です。
Rust は高速で安全なシステム言語でありながら、近年では WebAssembly や FFI を通じて PHP と組み合わせた開発も現実的になってきました。
本記事では、ext-php-rs を用いて Rust 製の PHP 拡張モジュールを作成し、PHP 環境に組み込む手順を紹介します。今後、Rust 側で HTTP サーバーや非同期処理を担い、PHP をそのクライアントとして使うようなハイブリッ...]]></description><link>https://zenn.dev/masakielastic/articles/20250604-ext-php-rs</link><guid isPermaLink="true">https://zenn.dev/masakielastic/articles/20250604-ext-php-rs</guid><pubDate>Wed, 04 Jun 2025 12:01:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wDUYDmQY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%2520PHP%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%25EF%25BC%259ADebian%2520%252B%2520ext-php-rs%2520%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Masaki%2520Kagaya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzc3ODAxZTNiZTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Masaki Kagaya</dc:creator></item><item><title><![CDATA[ライブラリ製作者に知ってほしい、examplesの3箇条]]></title><description><![CDATA[!
2025/06/07 追記
見出しの構成を一部変更しました。
「理想的なコード数」の項目に説明を追加しました。

Rust言語のライブラリのソースコードをリポジトリで公開する際、慣例的にexamplesというディレクトリが用意されていることが多いです。
このexamplesの配下にはライブラリの使い方を示すサンプルコードが置かれており、初めてそのライブラリを触るユーザーをガイドするという重要な役割を果たしています。
この記事ではより良い例の書き方について、私が意識していることを3つ紹介します。
先に伝えたいことだけまとめると、コードは最小構成にし、ユーザーが段階を踏んで例を確認できる...]]></description><link>https://zenn.dev/elm/articles/6a9771fcab7529</link><guid isPermaLink="true">https://zenn.dev/elm/articles/6a9771fcab7529</guid><pubDate>Wed, 04 Jun 2025 03:49:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NdUrWbq8--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E8%25A3%25BD%25E4%25BD%259C%25E8%2580%2585%25E3%2581%25AB%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BB%25E3%2581%2597%25E3%2581%2584%25E3%2580%2581examples%25E3%2581%25AE3%25E7%25AE%2587%25E6%259D%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:notelm%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE4NWNhMmQ2OTIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>notelm</dc:creator></item></channel></rss>