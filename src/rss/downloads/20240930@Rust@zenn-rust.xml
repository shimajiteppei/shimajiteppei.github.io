<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Mon, 30 Sep 2024 03:00:20 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[worker-rsからSlackに投稿する]]></title><description><![CDATA[use worker::*;
use reqwest;
use std::collections::HashMap;

async fn post_slack(channel: &amp;str, token: &amp;str, message: &amp;str) -&gt; Result&lt;Response&gt; {
    let url = "https://slack.com/api/chat.postMessage";

    let mut payload = HashMap::new();
    payload.insert("channel", channe...]]></description><link>https://zenn.dev/t4nih4ru/articles/f2d8c887e54a8f</link><guid isPermaLink="true">https://zenn.dev/t4nih4ru/articles/f2d8c887e54a8f</guid><pubDate>Sun, 29 Sep 2024 09:17:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--49HPPHyn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:worker-rs%25E3%2581%258B%25E3%2582%2589Slack%25E3%2581%25AB%25E6%258A%2595%25E7%25A8%25BF%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:TTT%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRmMWU1YTExNGEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>TTT</dc:creator></item><item><title><![CDATA[各言語の日本語文字変換ライブラリ一覧]]></title><description><![CDATA[（随時更新中、補足や他の言語についてはコメント欄で教えて下さい）

 凡例

 列名


名前：ライブラリ名（リンクはレジストリまたはレポジトリのホームページ）

作者：作者名・作者ID（リンクはGitHub等のリンク）

利用：利用ライセンス

（言語名）：サポートされている言語のバージョン

ひ⇆カ：ひらがなとカタカナの相互変換

ｶ⇆カ：半角カタカナと全角カタカナの相互変換

a1⇆Ａ１：半角英数字と全角英数字の相互変換

ひカ⇆R：ひらかな・カタカナとローマ字の相互変換

漢⇆かA：漢字と仮名やローマ字の相互変換（読み仮名）


 記号

✅　サポートされている
🔺　部分的にサポ...]]></description><link>https://zenn.dev/mkpoli/articles/07dd3a0d961058</link><guid isPermaLink="true">https://zenn.dev/mkpoli/articles/07dd3a0d961058</guid><pubDate>Sat, 28 Sep 2024 15:37:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--u0-uO0bC--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E5%2590%2584%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E6%2596%2587%25E5%25AD%2597%25E5%25A4%2589%25E6%258F%259B%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E4%25B8%2580%25E8%25A6%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mkpoli%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhhNjVjYTVjMTAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mkpoli</dc:creator></item><item><title><![CDATA[Rustを使って大きなファイルを分割してGCSにアップロードする]]></title><description><![CDATA[
 背景
前回の記事: https://zenn.dev/harui/articles/9143558098c454 では、GCEのVMに溜まっていくファイルを定期的にGCSにアップロードしたうえで削除するプログラムをRustで書いたのでした。
しかし、そのプログラムではアップロードするファイルをメモリに一度に読み込むためメモリに載らないほど大きなファイルを扱うことはできませんでした。
この記事では、大きなファイルを小さなチャンクに分けてアップロードすることで、大きなファイルでもGCSにアップロードできるようなプログラムにしていきます。

 実現方法
前回と同じく、google-clou...]]></description><link>https://zenn.dev/harui/articles/87dc293b6b706e</link><guid isPermaLink="true">https://zenn.dev/harui/articles/87dc293b6b706e</guid><pubDate>Sat, 28 Sep 2024 15:28:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--28JrRkYq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E5%25A4%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E5%2588%2586%25E5%2589%25B2%25E3%2581%2597%25E3%2581%25A6GCS%25E3%2581%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Harui%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSS1VaExIUDlyTFBxTWlsQU1EUnEwTUN1UDhwSnYwYk9hYkNpMDJ4eFdhYXpOLUdzYz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Harui</dc:creator></item><item><title><![CDATA[色変記事：実質2.5ヶ月でRubyとRustを使って入緑した話]]></title><description><![CDATA[くぅ～疲れましたw これにて入緑です！

ちゃんとAtCoderを始めてから2.5ヶ月。ABC373で水パフォ（1297）を出して入緑しました！嬉しい！
と言うわけで何か書いてみようと思います。

 スペック

17歳（高3）
プログラミングは9~10年ほど
普段はVoicevoxのエディタを開発している
AtCoderはアルゴリズム何も知らない状態でやったのが15回ほど（グラフの左半分）

灰パフォなのでノーカンということで…




 言語
基本的にはRuby、計算量が重そうな場合はRustを使っています。最近はCrystalも気になっています。
Rubyは競プロでも使える便利メソッ...]]></description><link>https://zenn.dev/mnonamer/articles/atcoder-green</link><guid isPermaLink="true">https://zenn.dev/mnonamer/articles/atcoder-green</guid><pubDate>Sat, 28 Sep 2024 14:33:19 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RgkQ0X9C--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E8%2589%25B2%25E5%25A4%2589%25E8%25A8%2598%25E4%25BA%258B%25EF%25BC%259A%25E5%25AE%259F%25E8%25B3%25AA2.5%25E3%2583%25B6%25E6%259C%2588%25E3%2581%25A7Ruby%25E3%2581%25A8Rust%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E5%2585%25A5%25E7%25B7%2591%25E3%2581%2597%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E5%2590%258D%25E7%2584%25A1%25E3%2581%2597%25E3%2580%2582%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZmMjI1ZGZkZDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>名無し。</dc:creator></item><item><title><![CDATA[GCEのVM上のファイルを定期的にGCSへアップロードして削除する with Rust]]></title><description><![CDATA[!
この記事のプログラムの持つ欠陥を改善した記事もあわせて参照してください : https://zenn.dev/harui/articles/87dc293b6b706e


 想定する読者


GCEのVM上のファイルを定期的にGCSへアップロードしたい！という人


仮想通貨取引所の約定履歴や板情報を全部保存するなんてストレージがいくらあっても足りないから無理だよ～～～と思っている人



 背景(botter向け)
botterの皆さんは当然取引所から配信されるデータをすべて保存したいと思っているはずです。
しかし、実際にすべて保存していると、大変な量のストレージを圧迫することに...]]></description><link>https://zenn.dev/harui/articles/9143558098c454</link><guid isPermaLink="true">https://zenn.dev/harui/articles/9143558098c454</guid><pubDate>Sat, 28 Sep 2024 02:14:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K2a2LUwL--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GCE%25E3%2581%25AEVM%25E4%25B8%258A%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E5%25AE%259A%25E6%259C%259F%25E7%259A%2584%25E3%2581%25ABGCS%25E3%2581%25B8%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2581%2597%25E3%2581%25A6%25E5%2589%258A%25E9%2599%25A4%25E3%2581%2599%25E3%2582%258B%2520with%2520Rust%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Harui%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSS1VaExIUDlyTFBxTWlsQU1EUnEwTUN1UDhwSnYwYk9hYkNpMDJ4eFdhYXpOLUdzYz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Harui</dc:creator></item><item><title><![CDATA[【Bevyでゲーム作り】BevyとLDtkで2Dゲームを作る]]></title><description><![CDATA[この記事ではRustで作られたゲームエンジンBevyと、2DレベルエディタであるLDtkを組み合わせたゲームの作り方について解説しています。

 この記事は？
bevy_ecs_ldtkパッケージを使えばいい感じにBevyでゲームを作れることは書いてたが、
Bevyでどうやってゲームの制御面を作れば良いかのことは探してもなかったので、
自分で書いてみました。

 使用技術
今回ゲーム開発に使用した技術は以下の通り。
https://bevyengine.org/
https://ldtk.io/
https://github.com/Trouv/bevy_ecs_ldtk

 ソースコー...]]></description><link>https://zenn.dev/ittoku_ky73/articles/bevy-ldtk-setup</link><guid isPermaLink="true">https://zenn.dev/ittoku_ky73/articles/bevy-ldtk-setup</guid><pubDate>Fri, 27 Sep 2024 11:29:49 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4pPf5QbY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Bevy%25E3%2581%25A7%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E4%25BD%259C%25E3%2582%258A%25E3%2580%2591Bevy%25E3%2581%25A8LDtk%25E3%2581%25A72D%25E3%2582%25B2%25E3%2583%25BC%25E3%2583%25A0%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:ittokunvim%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y3BCQXEzTW1mRWhOc3RMcUk5ZjQySGhwWE8tcmhrVjFFYUY3azhCPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ittokunvim</dc:creator></item><item><title><![CDATA[Rustでテーブル変更に対して壊れにくいテストを書く]]></title><description><![CDATA[
 目的
少しの変更で壊れやすいテストのことをFragile Test(壊れやすいテスト)といいます。色々な理由で壊れやすいテストが生まれますが、ここではテーブル変更で壊れやすいテストについて考えます。
カラムを全部指定するようにテストを書いていると、カラムが追加されると、すべてのテストを書き直す必要がでてきます。なるべくカラムを書かないようにテストを作るのが重要になります。

 テーブル
ユーザーの情報を格納するusersテーブルを作成します。

 users

users.sql
CREATE TABLE public.users (
  uuid UUID NOT NULL
  ,...]]></description><link>https://zenn.dev/aoyagikouhei/articles/89991ee2fc92dd</link><guid isPermaLink="true">https://zenn.dev/aoyagikouhei/articles/89991ee2fc92dd</guid><pubDate>Wed, 25 Sep 2024 22:43:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mQ-BIbqs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E3%2583%2586%25E3%2583%25BC%25E3%2583%2596%25E3%2583%25AB%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2597%25E3%2581%25A6%25E5%25A3%258A%25E3%2582%258C%25E3%2581%25AB%25E3%2581%258F%25E3%2581%2584%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E6%259B%25B8%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E9%259D%2592%25E6%259F%25B3%25E5%25BA%25B7%25E5%25B9%25B3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFjZDA3ZGRhNzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>青柳康平</dc:creator></item><item><title><![CDATA[[Rust] 再帰下降パーサの落とし穴]]></title><description><![CDATA[
 Rusty-parser 最適化
Rust で作るプログラミング言語シリーズです。
rusty-parser プロジェクトで、パーサが異様に遅い現象がありました。
しかも、次のようなシンプルなコードでです。
var a = array([[[1]]]);

print(a, type(a));
こんな素朴なコードのパースに、 Rust のリリースビルドでも 2 秒もかかりました。
real    0m2.447s
user    0m2.446s
sys     0m0.001s
この遅さは配列のネストの深さを増すと急速に増大します。もう一段ネストしただけで...
var a = [...]]></description><link>https://zenn.dev/msakuta/articles/ada382444fc615</link><guid isPermaLink="true">https://zenn.dev/msakuta/articles/ada382444fc615</guid><pubDate>Wed, 25 Sep 2024 14:31:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oBFBNE4h--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BRust%255D%2520%25E5%2586%258D%25E5%25B8%25B0%25E4%25B8%258B%25E9%2599%258D%25E3%2583%2591%25E3%2583%25BC%25E3%2582%25B5%25E3%2581%25AE%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:msakuta%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeG5tZ0ZYQlJsZjJpZVh1QWlwOG9LaFdpT2FSczg2dXRzWlcwN3o9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>msakuta</dc:creator></item><item><title><![CDATA[Http requests in Rust, part 1: Get and parse JSON data]]></title><description><![CDATA[In this article I will demonstrate how to use popular rust crates to send simple http requests to JSONPlaceholder.

 Environment
In this article we will be using rustc 1.79.0 on macos.
If you need to install rust, please visit the rustup website and follow the instructions.

 Crates(packages) to ...]]></description><link>https://zenn.dev/alc_tecdev/articles/46b3320c618fe2</link><guid isPermaLink="true">https://zenn.dev/alc_tecdev/articles/46b3320c618fe2</guid><pubDate>Wed, 25 Sep 2024 06:11:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CYDyPNB7--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Http%2520requests%2520in%2520Rust%252C%2520part%25201%253A%2520Get%2520and%2520parse%2520JSON%2520data%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:f-julius%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2M5M2RkY2UxMGUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%25AF%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSVpDdmhaeTJ5SzlpRVRDVFFicnFtdWkzQzcxOENGT24xNXJPTS03cTRHOUw4NkhXcz1zOTYtYw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>f-julius</dc:creator></item><item><title><![CDATA[#63　Understanding BitTorrent 5: Download a Piece]]></title><description><![CDATA[
 Introduction
In our last exploration, we delved into discovering peers and tried to handshake with one of the peer, then we successfully got the peer id.
By using peer id, in this time, we going to try exchange the message with the peer then download a piece.

 Flow
Before diving into the secti...]]></description><link>https://zenn.dev/nxted_sapporo/articles/7d0dace1588614</link><guid isPermaLink="true">https://zenn.dev/nxted_sapporo/articles/7d0dace1588614</guid><pubDate>Wed, 25 Sep 2024 02:56:40 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LogPoUyn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%252363%25E3%2580%2580Understanding%2520BitTorrent%25205%253A%2520Download%2520a%2520Piece%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:NXTEDCo.%252C%2520Ltd.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzBmZjQzOTVhYzUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>NXTEDCo., Ltd.</dc:creator></item><item><title><![CDATA[ブロックチェーン上にWEBアプリをホストする　その２（機能紹介編）　Internet Computer Protocol(ICP)]]></title><description><![CDATA[!
https://zenn.dev/articles/b14250bdc1c2e3/edit　の続きです。


 1.はじめに
前回の記事では環境構築して、簡単な疎通確認をしました。
今回も、2章 dapp開発を参考に Internet Computer Protocol(ICP) における開発で必要となるであろう主要機能を動かしてみたので、前回同様に備忘録を兼ねて記事にしてみます。
次の ICP 独自機能(2024/08時点)に注目して見ていきたい思いますが、今回は○が付いた機能を中心に動かしてみます。内容に誤りがあればご指摘いただけますと幸いです。



機能





Stabl...]]></description><link>https://zenn.dev/plum_tt/articles/9fcae7f0312585</link><guid isPermaLink="true">https://zenn.dev/plum_tt/articles/9fcae7f0312585</guid><pubDate>Tue, 24 Sep 2024 10:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--XyEegsvX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%25B3%25E4%25B8%258A%25E3%2581%25ABWEB%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E3%2580%2580%25E3%2581%259D%25E3%2581%25AE%25EF%25BC%2592%25EF%25BC%2588%25E6%25A9%259F%25E8%2583%25BD%25E7%25B4%25B9%25E4%25BB%258B%25E7%25B7%25A8%25EF%25BC%2589%25E3%2580%2580Internet%2520Computer%2520Proto...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:satoshi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSkNMekpyR05WY3B6OEJJTXZqQ1dCc0tKV2RmOWVDM0pJOHpEazBDLUk9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>satoshi</dc:creator></item><item><title><![CDATA[Rust REST APIとDBをSQLxで接続する]]></title><description><![CDATA[
 概要
今回は英語で記事を書いていきます。
Today we're going to connect an existing Actix Web  REST API and a Postgres  DB with the SQLx  Rust crate. This tutorial assumes you have Rust installed  already.
To learn how to setup an Actix Web REST API, check out my previous article: Fast REST API with Rust and Actix W...]]></description><link>https://zenn.dev/shota_watanabe/articles/13ca67617d031c</link><guid isPermaLink="true">https://zenn.dev/shota_watanabe/articles/13ca67617d031c</guid><pubDate>Tue, 24 Sep 2024 09:31:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--UXUmaqnd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520REST%2520API%25E3%2581%25A8DB%25E3%2582%2592SQLx%25E3%2581%25A7%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2523%2520colessar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIyNThmNWVlY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator># colessar</dc:creator></item><item><title><![CDATA[Solana ブロックチェーン向け Rust プログラミング言語]]></title><description><![CDATA[(https://storage.googleapis.com/zenn-user-upload/896890846ab5-20240924.png)
Rust はシステム プログラミング言語です。
システム プログラミング言語は、オペレーティング システムやコンパイラ ソフトウェアなどの作成など、システム プログラミングに使用される言語です。
Rust は、他のシステム言語では提供されない安全性、並行性、速度に基づいています。Rust は Solana Blockchain に使用されます。
Solana は、非常に低い手数料で 1 秒あたり 50,000 件のトランザクションを処理で...]]></description><link>https://zenn.dev/shota_watanabe/articles/e1e768eb5bed69</link><guid isPermaLink="true">https://zenn.dev/shota_watanabe/articles/e1e768eb5bed69</guid><pubDate>Tue, 24 Sep 2024 08:31:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--At0_XmBa--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Solana%2520%25E3%2583%2596%25E3%2583%25AD%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2581%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%25B3%25E5%2590%2591%25E3%2581%2591%2520Rust%2520%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%259F%25E3%2583%25B3%25E3%2582%25B0%25E8%25A8%2580%25E8%25AA%259E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%2523%2520colessar%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIyNThmNWVlY2QuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator># colessar</dc:creator></item><item><title><![CDATA[chip4. bevyのプリミティブ・シェイプ]]></title><description><![CDATA[
 はじめに
2024/09/23時点の内容です。

rustc 1.81.0
bevy 0.14.2
bevyは開発初期段階のOSSで、まだまだ破壊的なアップデートが入ります。
でも、面白いですよ。


 前回
chip3.5. bevyの名前付きカラー

 bevyの図形は増加中
bevyはv0.13以降、内蔵する基本図形（Primitive Shapes）を増強しています。
　・News → Bevy 0.13 → Primitive Shapes
　・News → Bevy 0.14 → New Geometric Primitives
v0.14では2D図形を「厚く」して3D化...]]></description><link>https://zenn.dev/hyoi/articles/bb5b1df32bcf1d</link><guid isPermaLink="true">https://zenn.dev/hyoi/articles/bb5b1df32bcf1d</guid><pubDate>Mon, 23 Sep 2024 12:41:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--I5bLkigr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:chip4.%2520bevy%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AA%25E3%2583%259F%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2583%25BB%25E3%2582%25B7%25E3%2582%25A7%25E3%2582%25A4%25E3%2583%2597%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hyoi%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o3d2VRb3N6YndjY3ZuWE5kM1JuRHFVTWxVZWVVbDlzYjUtS1lKPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hyoi</dc:creator></item><item><title><![CDATA[【Rust】ディレクトリをブックマークするCLIツールを作ってみた]]></title><description><![CDATA[
 はじめに
ターミナル上でよく使うディレクトリをブックマークして管理するコマンドラインツールを作ってみたので、紹介します。
https://github.com/iced-penguin/bookmark-cli
動機としてはターミナル上での移動が面倒だったからです（ある程度の補完は効く環境にはなっているのですが、それでも時々あのディレクトリのパス何だっけ、と考えながら入力するハメに……）。
それと、RustでCLIツールを作ってみたかったからです（重要）。

 インストール
cargo install bookmark-cli

 機能

 できること
シンプルで基本的な機能のみを提...]]></description><link>https://zenn.dev/icedpenguin/articles/82ab6e9c468707</link><guid isPermaLink="true">https://zenn.dev/icedpenguin/articles/82ab6e9c468707</guid><pubDate>Mon, 23 Sep 2024 12:23:34 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gjIjLZXr--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2582%2592%25E3%2583%2596%25E3%2583%2583%25E3%2582%25AF%25E3%2583%259E%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%2599%25E3%2582%258BCLI%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:icedpenguin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E1Nzc3NGIxNTcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>icedpenguin</dc:creator></item><item><title><![CDATA[【Rust】トレイト境界~基本編~]]></title><description><![CDATA[
 トレイト境界
特定の型が特定のトレイトを実装していることをコンパイル時に保証する機能

 コンパイラが型の不一致を指摘してくれる
ジェネリクスは型を曖昧に表現する手段です。曖昧に指定するのは場合によっては有効です。
例えば、以下のように「型はどうであれ、数字なら足したい」というシチュエーションです。
fn add_values&lt;T&gt;(a: T, b: T) -&gt; T {
    a + b
}

fn main() {
    let sum = add_values(5, 10);
    println!("Sum: {}", sum);
}

しかし、これはエ...]]></description><link>https://zenn.dev/nekoninaritai/articles/909396113f8b17</link><guid isPermaLink="true">https://zenn.dev/nekoninaritai/articles/909396113f8b17</guid><pubDate>Mon, 23 Sep 2024 11:59:11 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Z9Wlp_ll--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Rust%25E3%2580%2591%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E5%25A2%2583%25E7%2595%258C%7E%25E5%259F%25BA%25E6%259C%25AC%25E7%25B7%25A8%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:svun%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2E2ODg0YTdhNTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>svun</dc:creator></item><item><title><![CDATA[floor_sum()]]></title><description><![CDATA[
 イントロダクション
いきなりですが、次の値を求めてください。

f(n, m, a, b) = \sum_{i=0}^{n-1} \Big\lfloor \frac{ai+b}{m} \Big\rfloor

O(n) で計算するアルゴリズムを思い浮かべた方も多いのではないでしょうか？　以下では、これをO\big(\log \max(a, m)\big)で計算するアルゴリズムを紹介します。

 アルゴリズム編
!
本節は参考記事に大いに影響を受けています。そちらも参照してください。


 Step 1
まず、aとbを次のように展開します。

\begin{equation*}
   ...]]></description><link>https://zenn.dev/yatyou/articles/47831bf5576657</link><guid isPermaLink="true">https://zenn.dev/yatyou/articles/47831bf5576657</guid><pubDate>Mon, 23 Sep 2024 11:00:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xEL7a1O3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:floor_sum%2528%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:qdot3%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSjJhZldfVDRNTWJCUzNDeG9YSlpnNFhJbndOeFkxbTB1TWxTWGtCSm9nPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>qdot3</dc:creator></item><item><title><![CDATA[Rust3000行でテキストエディタを作るチュートリアルをやった]]></title><description><![CDATA[想定よりだいぶ大変でした。

hecto
成果物はこれ↓
https://github.com/kawarimidoll/kilo-study
参考サイトはこれです↓
https://www.flenker.blog/hecto/
インスパイア元↓
https://rhysd.hatenablog.com/entry/2019/08/29/091753
感想

Rustはこのチュートリアルが初体験

ずっと勉強したいとは思っていたので良い機会だった
チュートリアルを進めていくなかで所有権とかライフタイムとかを少しずつ導入していき説明も挟んでくれるので助かった
しかし3000行の経験を積ん...]]></description><link>https://zenn.dev/kawarimidoll/articles/0b3edd1b000124</link><guid isPermaLink="true">https://zenn.dev/kawarimidoll/articles/0b3edd1b000124</guid><pubDate>Mon, 23 Sep 2024 06:23:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--nYB3dol_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust3000%25E8%25A1%258C%25E3%2581%25A7%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E3%2583%2581%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%2588%25E3%2583%25AA%25E3%2582%25A2%25E3%2583%25AB%25E3%2582%2592%25E3%2582%2584%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kawarimidoll%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIzNzlhYzhkODYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kawarimidoll</dc:creator></item><item><title><![CDATA[【AHC】Rustでパーティクルフィルタ書いてみた]]></title><description><![CDATA[第一回マスターズの決勝で出題された問題で、パーティクルフィルタというものを使うっぽいのですが、よく分からないので、ネットを漁ったり、本屋で色々立ち読みしていたら、『詳解 確率ロボティクス Pythonによる基礎アルゴリズムの実装』という本が良さそうでした。
https://www.amazon.co.jp/詳解-確率ロボティクス-Pythonによる基礎アルゴリズムの実装-KS理工学専門書-上田/dp/4065170060/ref=pd_lpo_sccl_2/358-3160576-5508222?pd_rd_w=dO8oS&amp;content-id=amzn1.sym.855d8f7...]]></description><link>https://zenn.dev/tipstar0125/articles/0fee50c22cb17d</link><guid isPermaLink="true">https://zenn.dev/tipstar0125/articles/0fee50c22cb17d</guid><pubDate>Sun, 22 Sep 2024 04:02:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--eiPILiOc--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590AHC%25E3%2580%2591Rust%25E3%2581%25A7%25E3%2583%2591%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25AF%25E3%2583%25AB%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tipstar0125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlMDRiN2Q5N2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tipstar0125</dc:creator></item><item><title><![CDATA[【AHC】Rustのモジュールを単一ファイルにバンドルするスクリプトを作ってみた]]></title><description><![CDATA[長期のAHCに参加していると、コードがどんどん肥大化していって、提出のために単一ファイルでコード書くのが結構しんどいです。
モジュール毎にコードを書きたくなるのですが、手動で単一ファイルにまとめるのも大分しんどいです。
これを解決するためにcargo equipを使用する手があるのですが、以下の理由からスクリプトを自作することにしました。

使い方に癖がありそう。実際使ってないので、そうではないかもしれないが、使い方に慣れるぐらいなら自作した方が早そう。
自由度がほしい。ビジュアライザのコードも埋め込んで、そのまま提出したいので、ローカル環境だけで動かすフィーチャーフラグを付与したい、な...]]></description><link>https://zenn.dev/tipstar0125/articles/d423d391a55b6a</link><guid isPermaLink="true">https://zenn.dev/tipstar0125/articles/d423d391a55b6a</guid><pubDate>Sat, 21 Sep 2024 09:47:54 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZxTJN5dt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590AHC%25E3%2580%2591Rust%25E3%2581%25AE%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%258D%2598%25E4%25B8%2580%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E3%2583%2590%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tipstar0125%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FlMDRiN2Q5N2EuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tipstar0125</dc:creator></item></channel></rss>