<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Tue, 31 Dec 2024 06:21:32 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[[備忘録05]作って学ぶブラウザのしくみ / URLの構文解析の実装]]></title><description><![CDATA[URLの実装はurl.rsというファイルに実装することにする。

 ライブラリクレートの作成
０章で作成したプロジェクトのディレクトリ直下で以下を実行して、新しいライブラリクレートを作成する。
クレートとは、rustでのコンパイル単位で以下の２種類が存在する

バイナリクレート

実行可能ファイル


ライブラリクレート

再利用可能なコードのコレクション。モジュール化したコードを他のプロクラムやクレートに提供できる。



cargo  new saba_core --lib
上記のコマンドにより、src/lib.rsファイルが自動的に作成さいれる。このファイルに他のプログラムやクレー...]]></description><link>https://zenn.dev/tommy_aki/articles/6174de660a5db4</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/6174de660a5db4</guid><pubDate>Tue, 31 Dec 2024 06:18:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--rycBHbvU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B205%255D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%2520%252F%2520URL%25E3%2581%25AE%25E6%25A7%258B%25E6%2596%2587%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[2024年の振り返りと2025年の抱負]]></title><description><![CDATA[今年の振り返りと来年に向けた目標の整理をしていく。

 2024年の振り返り
2024年の目標として設定していたのは、以下の4つだった:

大学院で良い成績をとりつづける
仕事でより良い成果を出す
外部発信をしていく
人生をがんばる

それぞれ達成度合いを振り返っていく。

 大学院で良い成績をとりつづける
2022年9月からオンラインで通い始めたGeorgia Tech、早いもので2年とちょっとが経過した。2024年の秋学期終了時点での取得単位数は24（修了単位は30）。
2024年にとったクラスは以下のとおり:

CS6211: System Design for Cloud Com...]]></description><link>https://zenn.dev/magurotuna/articles/2024-to-2025</link><guid isPermaLink="true">https://zenn.dev/magurotuna/articles/2024-to-2025</guid><pubDate>Mon, 30 Dec 2024 10:24:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NAhJ4rAn--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:2024%25E5%25B9%25B4%25E3%2581%25AE%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%25E3%2581%25A82025%25E5%25B9%25B4%25E3%2581%25AE%25E6%258A%25B1%25E8%25B2%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:magurotuna%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNUGF0cWN1MUh1d1dEcG5uVzRETFVxZlI5aDlOM1NFc3FmaWdYZkE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>magurotuna</dc:creator></item><item><title><![CDATA[[備忘録04]作って学ぶブラウザのしくみ / URLを分解する]]></title><description><![CDATA[
 URLとは
インターネット上にある特定のリソースにアクセスするための識別子。
本書ではhttpのみを実装する。（httpsは実装しない)

 URLの分析

** http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;searchpart&gt;**


 スキーム(scheme)
URLnおスキームとは、リソースにアクセスするために使用されるプロトコルの名前を示す。
スキームの後は**://**が続く
よく使われるスキームは HTTP, HTTPS, FTP, FILE, DATA

 ホスト(host)
ホストとは、FQDN(Full...]]></description><link>https://zenn.dev/tommy_aki/articles/7c5e91a3fbf9c9</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/7c5e91a3fbf9c9</guid><pubDate>Mon, 30 Dec 2024 08:48:06 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uN7AQRVh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B204%255D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%2520%252F%2520URL%25E3%2582%2592%25E5%2588%2586%25E8%25A7%25A3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[ABC386:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 386のA~E問題をRustで解いた際の解法をまとめました。

 A問題

問題

https://atcoder.jp/contests/abc386/tasks/abc386_a

解説
1〜13までの各カードが何枚あったのかを数えます。任意のカードを1枚追加してフルハウスとなるのは、以下の条件(1)または(2)を満たす場合です。それぞれチェックします。
(1) 3枚同じカードが1種類、かつ1枚だけのカードが1種類、残りは全て0枚
(2) 2枚同じカードが2種類、残りは全て0枚

カードの枚数が多い順に並び替えて枚数の多いもの2つを見...]]></description><link>https://zenn.dev/nakst_hide/articles/7cb37229c13abf</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/7cb37229c13abf</guid><pubDate>Sun, 29 Dec 2024 11:36:51 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zmAezLnh--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC386%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[[備忘録01]作って学ぶブラウザのしくみ]]></title><description><![CDATA[ざっくりと本書で学習するトピックをさらってみる
!
学習環境：macbook pro 13 macOS Ventura ver13.4.1

まず、サンプルプログラムを動かしてみる
本書にもサンプルプログラムの作成の仕方が書かれていますが、こちらのgit repositoryのsababookのch1を使っても同じことができます。
しかし自分の環境では以下の変更が必要でした。
Cargo.tomlで以下のように書かれていますが、
[package]
name = "saba"
version = "0.1.0"
edition = "2021"

[dependencies]
noli ...]]></description><link>https://zenn.dev/tommy_aki/articles/e51241ccdcc0bd</link><guid isPermaLink="true">https://zenn.dev/tommy_aki/articles/e51241ccdcc0bd</guid><pubDate>Sat, 28 Dec 2024 14:47:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--CF8w4nHp--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B201%255D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%25AD%25A6%25E3%2581%25B6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2581%25AE%25E3%2581%2597%25E3%2581%258F%25E3%2581%25BF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Tommy%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lCc3lXZ2NzVmVqT2JNYWJDX0w5RjJTeTdhSjVoXzlsN0ZEWmp3TGc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Tommy</dc:creator></item><item><title><![CDATA[Dockerコンテナ負荷をRustで取得&Next.jsで表示]]></title><description><![CDATA[
 シンプルなプログラムで本番環境のサーバ負荷ログを取りたい
と思って、最初は Linux 環境の /proc 以下にある疑似ファイルを読む Rust コードを書こうとしていました。

本番環境では Docker で管理しているため、途中まで作ったところで 自分の本当に欲しいもののはちょっと違う気がする...... となり、Docker API を使ったコードに書き直しました。
Dockerを使っている皆さんお馴染みの、/var/run/docker.sock は REST API エンドポイントとして使えます。

Githubリポジトリはこちら。
https://github.com/...]]></description><link>https://zenn.dev/daiius/articles/8f38ae1893c166</link><guid isPermaLink="true">https://zenn.dev/daiius/articles/8f38ae1893c166</guid><pubDate>Sat, 28 Dec 2024 12:19:29 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E7p9g_Ib--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Docker%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E8%25B2%25A0%25E8%258D%25B7%25E3%2582%2592Rust%25E3%2581%25A7%25E5%258F%2596%25E5%25BE%2597%2526Next.js%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Daiius%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U2MzM1ZDg3MzAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Daiius</dc:creator></item><item><title><![CDATA[uv tool install でインストールしたツールは独立したvenvで実行される]]></title><description><![CDATA[便利さと実装方法に感動したので書く。

 uvとは
https://docs.astral.sh/uv/
Pythonのバージョン+依存ライブラリ管理ツール。もはや説明不要かもしれない。Rustで書かれているので「Pythonの管理ツールをPythonで動かす場合、そのツールを動かすPythonのバージョンはいくつになるの？」みたいなニワトリ卵問題は発生しない。
最強なので使ったことの無い人は本当に使ってみてほしい。pyenvやpipenvやpoetryに苦しめられた経験のある人は特に。

 uv tool installとは
https://docs.astral.sh/uv/conc...]]></description><link>https://zenn.dev/1hakusai1/articles/18ce679d072802</link><guid isPermaLink="true">https://zenn.dev/1hakusai1/articles/18ce679d072802</guid><pubDate>Sat, 28 Dec 2024 10:41:02 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oUumElS3--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:uv%2520tool%2520install%2520%25E3%2581%25A7%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2597%25E3%2581%259F%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25AF%25E7%258B%25AC%25E7%25AB%258B%25E3%2581%2597%25E3%2581%259Fvenv%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hakusai%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2U1Mjk0YmM1NWEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hakusai</dc:creator></item><item><title><![CDATA[LinkedList(PythonとRustで比較)]]></title><description><![CDATA[
 LinkedListというデータ構造
LinkedListというデータ構造が分子動力学計算の書籍で表れてたので、色々調べて見ました。
本記事ではpythonとrustでlinkedListというデータ構造を実装してみたいと思います。
pythonでは楽だったのですが、rustだと結構しんどかったでｺﾞﾜｽ

 そもそもLinkedListとは？
出てくる概念

Node

property

value:ノードが保持する値
next:次のノードへの参照


method

change_next:自身のノードが参照しているノードを別のノードへ切り替える




List

prope...]]></description><link>https://zenn.dev/kurutazoku/articles/f061d5cfa077af</link><guid isPermaLink="true">https://zenn.dev/kurutazoku/articles/f061d5cfa077af</guid><pubDate>Fri, 27 Dec 2024 15:50:23 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PI7tdlrs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:LinkedList%2528Python%25E3%2581%25A8Rust%25E3%2581%25A7%25E6%25AF%2594%25E8%25BC%2583%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%2596%2584%25E6%25B1%259A%25E3%2581%2584%25EF%25BD%25B8%25EF%25BE%2599%25EF%25BE%2580%25E6%2597%258F%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ3MjliOThhZjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>薄汚いｸﾙﾀ族</dc:creator></item><item><title><![CDATA[README.mdにリポジトリのコードを埋め込みたい]]></title><description><![CDATA[
 背景
Rustでライブラリを作っているとき、README.mdにexamples/以下のコードを埋め込みたい。
しかしコードをアップデートするたびに毎回コードをコピペするのは面倒。

 解決策

 PHPを使う
べつにこれでいい。
PHPの正しい使い方という感じがして良い。
なんかマークダウン

```rust, no_run
&lt;?php
    echo file_get_contents('examples/example.rs');
?&gt;
```

 gppを使う
GPP
C以外でも使えるCプリプロセッサ、探したらあった。
#がマークダウンと被ってると思いきやなんか...]]></description><link>https://zenn.dev/hatoo/articles/573bf2b4727c1c</link><guid isPermaLink="true">https://zenn.dev/hatoo/articles/573bf2b4727c1c</guid><pubDate>Fri, 27 Dec 2024 12:56:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--3z61Vc58--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:README.md%25E3%2581%25AB%25E3%2583%25AA%25E3%2583%259D%25E3%2582%25B8%25E3%2583%2588%25E3%2583%25AA%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E5%259F%258B%25E3%2582%2581%25E8%25BE%25BC%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:hatoo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMzRhZWY1YjMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>hatoo</dc:creator></item><item><title><![CDATA[Rust で仮想言語のインタプリタを作る (その3)]]></title><description><![CDATA[
 概要
前回c言語をベースの言語を作ってインタプリタを作りました.
変数定義と関数定義と呼び出しまで作ったので, if文, while文が動くところまで進んだのでちょっとまとめておく.
前記事
https://zenn.dev/kaito_73519/articles/be7d5a6993861b
ソースコード
https://github.com/nagato0614/NagatoInterpreter

 if文
if文を使えるようになったことでフィボナッチ数列を再帰的に計算ができるようになった.
int fib = 0;
int fibonacci(int n) {
    if...]]></description><link>https://zenn.dev/kaito_73519/articles/565462151789d9</link><guid isPermaLink="true">https://zenn.dev/kaito_73519/articles/565462151789d9</guid><pubDate>Fri, 27 Dec 2024 07:43:20 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--7BhGeXgu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%2520%25E3%2581%25A7%25E4%25BB%25AE%25E6%2583%25B3%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25BF%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%2520%2528%25E3%2581%259D%25E3%2581%25AE3%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kaito%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzU2YzU4NDk4MjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kaito</dc:creator></item><item><title><![CDATA[RustのプログラムをWSLでクロスコンパイルして Raspberry Pi Zero 2 で動かすまで]]></title><description><![CDATA[
 はじめに
こんにちは。aq2rです。
Rustのプログラムを Raspberry Pi Zero 2 で動かしたいなと思ったのですが、動かすまでに苦労したので残しておこうと思います。多少うろ覚えですが方法だけでなく、クロスコンパイルができるまでの道のりも残しておこうと思うので、
さっさと一番簡単な方法教えて！
という方は その後見つけたもっと簡単な方法 に飛んでください。

 対象読者
WSL2上で Raspberry Pi Zero 2 向けにRustプログラムをクロスコンパイルしたい人

 クロスコンパイルするまでの道のり
私がクロスコンパイルを行いたいと思った理由は、ラズパイ上...]]></description><link>https://zenn.dev/aq2r/articles/869c53f829928e</link><guid isPermaLink="true">https://zenn.dev/aq2r/articles/869c53f829928e</guid><pubDate>Fri, 27 Dec 2024 06:55:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5g6hEkEV--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%25A0%25E3%2582%2592WSL%25E3%2581%25A7%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%2597%25E3%2581%25A6%2520Raspberry%2520Pi%2520Zero%25202%2520%25E3%2581%25A7%25E5%258B%2595%25E3%2581%258B%25E3%2581%2599%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aq2r%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyYTQ3YTRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aq2r</dc:creator></item><item><title><![CDATA[Rustのビルドオプション]]></title><description><![CDATA[
 Rustのビルドオプション
組み込み向けの開発ではリソースが限られているため、ビルド時の最適化やデバッグのしやすさが重要です。Rust でのビルドオプションを整理し、Release ビルドでバイナリサイズが小さくなる理由から、手軽に切り替えられる高度なビルド設定を解説します。


 1. Releaseビルドでバイナリが小さくなる理由

 1.1 最適化フラグとデバッグ情報の削除


opt-level: [profile.release] で opt-level = 3（デフォルト）が指定されており、デッドコード除去・インライン展開・分岐予測最適化などの高度な最適化が行われます。
...]]></description><link>https://zenn.dev/kokimu/articles/32dd41ec48d9b3</link><guid isPermaLink="true">https://zenn.dev/kokimu/articles/32dd41ec48d9b3</guid><pubDate>Fri, 27 Dec 2024 06:06:45 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--zeWNaxrF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%2593%25E3%2583%25AB%25E3%2583%2589%25E3%2582%25AA%25E3%2583%2597%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2593%25E3%2583%25BC%25E3%2581%258D%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2UwZTkxNWRmMTguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>こーき</dc:creator></item><item><title><![CDATA[Rustの並列処理で安全にログ出力する]]></title><description><![CDATA[こんにちは、エンジニアの澤田です。
昨年は Rust の quick-xml というライブラリを使ってみた記事 を書きましたが、Rust の勉強を兼ねて、今回は並列処理をやってみようと思います。
普段の業務で、外部のAPIへ並列でリクエストを送り、その際に受け取ったエラーメッセージなどをログに書き込む処理を行っていますが、並列処理でのログ出力を Rust でやってみようと思います！
※rustc と cargo はバージョン 1.83.0 を使用しています。

 並列処理でログ出力を安全に行う
複数のスレッドが単一のリソースを変更する場合に、安全に変更する方法は大きく以下の2つがあります...]]></description><link>https://zenn.dev/forcia_tech/articles/202412_rust_concurrency_logging_sawada</link><guid isPermaLink="true">https://zenn.dev/forcia_tech/articles/202412_rust_concurrency_logging_sawada</guid><pubDate>Fri, 27 Dec 2024 04:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gV_XN44G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E5%2588%2597%25E5%2587%25A6%25E7%2590%2586%25E3%2581%25A7%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2583%25AD%25E3%2582%25B0%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:FORCIA%2520Tech%2520Blog%2520%25E9%2581%258B...%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2QyMDIwOGYzMDMuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:FORCIA%2520Tech%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2NkZmRkZTQ5MGUuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>FORCIA Tech Blog 運営チーム</dc:creator></item><item><title><![CDATA[【Axum 0.7.9】WindowsでAxum環境構築]]></title><description><![CDATA[
 AxumをWindowsで利用する
この記事では、WindowsでAxumを「最低限」扱えるだけの情報を雑集してございます。
RustやVSCodeのインストールは説明を省いております。

 Axumの概要
Axumとは、言語Rustに於いて「Webサーバー側のプログラムを実装できるもの」、等と筆舌し得るものです。単なるWebサイトを作成することも、Webアプリケーションを作成することもできます。
https://www.shuwasystem.co.jp/book/9784798067315.html
我が国ではこの著書が一つ有名なものと存じます。此書をきっかけにして、Rustでの...]]></description><link>https://zenn.dev/amenaruya/articles/48e2ab898624e9</link><guid isPermaLink="true">https://zenn.dev/amenaruya/articles/48e2ab898624e9</guid><pubDate>Fri, 27 Dec 2024 03:23:25 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--YcZv0C1K--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590Axum%25200.7.9%25E3%2580%2591Windows%25E3%2581%25A7Axum%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:amenaruya%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzMwZDg5YWZmZGYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>amenaruya</dc:creator></item><item><title><![CDATA[cargo-componentから脱却するには]]></title><description><![CDATA[Rust 1.82.0からwasm32-wasip2がtier 2のターゲットとなり、rustup target addコマンドでビルドターゲットに追加できるようになりました。
これによりcargo-componentを利用しなくても、Wasmコンポーネントを作成できるようになりました。この記事では、cargo-componentを利用してビルドしていたライブラリークレートを、cargoコマンドだけでビルドできるようにするための変更点を述べます。

 cargo-componentがビルド時にやっていたことの置き換え
cargo-componentがビルド時にやっていたのは、次の作業です...]]></description><link>https://zenn.dev/chikoski/articles/cargo-component-removal</link><guid isPermaLink="true">https://zenn.dev/chikoski/articles/cargo-component-removal</guid><pubDate>Thu, 26 Dec 2024 13:33:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--67jbWvXZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:cargo-component%25E3%2581%258B%25E3%2582%2589%25E8%2584%25B1%25E5%258D%25B4%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AB%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:chikoski%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzgwYzk3YTk1NjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>chikoski</dc:creator></item><item><title><![CDATA[Tauriアプリにウィンドウマネージャーを実装する]]></title><description><![CDATA[Tauriを使ってアプリのウィンドウのサイズや位置を管理できるようにしました。
具体的には、ウィンドウのサイズを増減させたり、画面の特定の位置に移動させる機能を実装します。


 前提設定

 tauri.conf.json
参考にしてみてください。
tauri.conf.json
tauri.conf.json{
  "build": {
    "beforeDevCommand": "npm run dev",
    "beforeBuildCommand": "npm run build",
    "devPath": "http://localhost:1420",
   ...]]></description><link>https://zenn.dev/ocat/articles/22b773c2282742</link><guid isPermaLink="true">https://zenn.dev/ocat/articles/22b773c2282742</guid><pubDate>Thu, 26 Dec 2024 01:48:05 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--P9oVjB6Z--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Tauri%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AB%25E3%2582%25A6%25E3%2582%25A3%25E3%2583%25B3%25E3%2583%2589%25E3%2582%25A6%25E3%2583%259E%25E3%2583%258D%25E3%2583%25BC%25E3%2582%25B8%25E3%2583%25A3%25E3%2583%25BC%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Ocat%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2VkZjUxNWYzOGUuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Ocat</dc:creator></item><item><title><![CDATA[Linux上のtauriで画面に何も映らない問題への対応]]></title><description><![CDATA[
 環境
OS    : Arch Linux x86_64
Host  : ASUS MB
Kernel: Linux 6.12.6-arch1-1
Shell : fish 3.7.1
DE    : Cinnamon 6.4.3
WM    : Muffin (X11)
CPU   : Intel(R) Core(TM) i7-4790K (8) @ 4.60 GHz
GPU   : NVIDIA GeForce GTX 1070 [Discrete]

 問題の概要

pnpm create tauri-appでtauriのプロジェクトを起動したあとpnpm tauri devを...]]></description><link>https://zenn.dev/aqyuki/articles/9a411bf51263c6</link><guid isPermaLink="true">https://zenn.dev/aqyuki/articles/9a411bf51263c6</guid><pubDate>Wed, 25 Dec 2024 23:49:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--RovU70zd--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%25E4%25B8%258A%25E3%2581%25AEtauri%25E3%2581%25A7%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%25AB%25E4%25BD%2595%25E3%2582%2582%25E6%2598%25A0%25E3%2582%2589%25E3%2581%25AA%25E3%2581%2584%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25B8%25E3%2581%25AE%25E5%25AF%25BE%25E5%25BF%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2597%25E3%2582%258D%25E3%2581%25AD%2520%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRkMDJjNjQ5MjIuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>しろね✨</dc:creator></item><item><title><![CDATA[Rust/Ruby向けのインラインREPLのVS Code拡張機能を公開しました]]></title><description><![CDATA[!
この記事は Rust アドベントカレンダー 2024 および フィヨルドブートキャンプ Advent Calendar 2024 の 25 日目の記事です。


 はじめに
プログラミング言語の学習や開発において、REPL は非常に強力なツールです。特に Rust のような静的型付け言語では、コードの動作を素早く確認できる REPL の存在は、開発効率を大きく向上させます。
私は開発において以下のような課題を感じており、これを解決するために VS Code 向けのインライン REPL 拡張機能の開発を始めました：


エディタ機能との統合

VS Code で Rust Analyz...]]></description><link>https://zenn.dev/mh/articles/73aab10616892d</link><guid isPermaLink="true">https://zenn.dev/mh/articles/73aab10616892d</guid><pubDate>Wed, 25 Dec 2024 11:11:32 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ele0xpMm--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%252FRuby%25E5%2590%2591%25E3%2581%2591%25E3%2581%25AE%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3REPL%25E3%2581%25AEVS%2520Code%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mh-mobile%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzE0OTRjZDRjNTkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mh-mobile</dc:creator></item><item><title><![CDATA[Rustのマクロで正規表現のmatchを高速で行えるクレートを作ってみた...?]]></title><description><![CDATA[
 はじめに
こんにちは。aq2rです。
最近Rustのマクロ、特に procedural macro が面白いなーと思いはまっています。
そこで、何かマクロを書きたいけどいい感じのネタないかなーと思っていたところ、
正規表現をもとにコンパイル時にif文に展開できれば高速で正規表現の判定ができるんじゃない？
というのを思いついたので、このようなクレートを作って見ました。
(crates.ioへの公開はしていません。)
https://github.com/aq2r/reif
!
本気で高速化したいというよりただマクロを書くネタが欲しかっただけなので、Rust Regexクレートと完全に同...]]></description><link>https://zenn.dev/aq2r/articles/73b4e82d68adbe</link><guid isPermaLink="true">https://zenn.dev/aq2r/articles/73b4e82d68adbe</guid><pubDate>Wed, 25 Dec 2024 07:29:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--L671NlBk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E3%2581%25A7%25E6%25AD%25A3%25E8%25A6%258F%25E8%25A1%25A8%25E7%258F%25BE%25E3%2581%25AEmatch%25E3%2582%2592%25E9%25AB%2598%25E9%2580%259F%25E3%2581%25A7%25E8%25A1%258C%25E3%2581%2588%25E3%2582%258B%25E3%2582%25AF%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F...%253F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:aq2r%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IyYTQ3YTRiNjcuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>aq2r</dc:creator></item><item><title><![CDATA[[小ネタ] GoとRustでLambdaを比較してみた]]></title><description><![CDATA[
 はじめに
こんにちは！株式会社ブロードエッジ・ウェアリンク CTOの高丸です。
今回は、Qiita Advent Calendar 2024の21日目の記事です。
今回も小ネタではありますが、技術を楽しく実験してみたというお話です。弊社のワインのマッチ度計算ロジックにおいて、その値を返すAPIをGoやRustを使って既存のAPIと比較してみたという話です。

 弊社のマッチ度計算
wine@ONLINESTORE（ワインアットオンラインストア）では、ユーザーの好みの味わいタイプとワインの特徴を照らし合わせ、そのマッチ度を数値化して提供しています。ユーザーは味わいタイプだけでなく、マッ...]]></description><link>https://zenn.dev/be_warelink/articles/3cb5a8cb33e763</link><guid isPermaLink="true">https://zenn.dev/be_warelink/articles/3cb5a8cb33e763</guid><pubDate>Wed, 25 Dec 2024 05:01:36 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4gNXTzFx--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255B%25E5%25B0%258F%25E3%2583%258D%25E3%2582%25BF%255D%2520Go%25E3%2581%25A8Rust%25E3%2581%25A7Lambda%25E3%2582%2592%25E6%25AF%2594%25E8%25BC%2583%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takamario%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzM2NzAzOWIzMTUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E3%2583%2596%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25B8%25E3%2583%25BB%25E3%2582%25A6%25E3%2582%25A7%25E3%2582%25A2%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%2520%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2FjMjM3OWQ5YWMuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takamario</dc:creator></item></channel></rss>