<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2025-09-04T16:04:00+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075919</id>
    <published>2025-09-04T16:04:00+09:00</published>
    <updated>2025-09-04T16:04:35+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/6361c812a673d51bced7"/>
    <url>https://qiita.com/nozomi2025/items/6361c812a673d51bced7</url>
    <title>【デザインパターン】コマンドパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
コマンド（Command）パターン は、
操作（リクエスト）をオブジェクトとしてカプセル化し、呼び出し元と実行処理を分離する デザインパターンです。

解決する問題

「操作の履歴」「取り消し（Undo）」「やり直し（Redo）」を柔軟に実装したい
...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075882</id>
    <published>2025-09-04T15:05:41+09:00</published>
    <updated>2025-09-04T15:06:05+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nakashimaakio/items/3c0e8d9b06a57db99b31"/>
    <url>https://qiita.com/nakashimaakio/items/3c0e8d9b06a57db99b31</url>
    <title>【Android】 戻る処理ジェスチャー無効化</title>
    <content type="text">概要
戻る処理ジェスチャー無効化する方法について解説。

方法
下記のようにsystemGestureExclusionRectsを使用すれば良い。
binding.hogeView.post {
    val rect = Rect(0, 0, binding.hog...</content>
    <author>
      <name>nakashimaakio</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075485</id>
    <published>2025-09-03T15:14:00+09:00</published>
    <updated>2025-09-03T15:14:00+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nozomi2025/items/1699ea706e4c35e0b820"/>
    <url>https://qiita.com/nozomi2025/items/1699ea706e4c35e0b820</url>
    <title>【デザインパターン】ストラテジーパターン解説（Flutter / Android 実例付き）</title>
    <content type="text">1. パターンの意図
ストラテジー（Strategy）パターン は、
アルゴリズムをカプセル化し、実行時に差し替え可能にする デザインパターンです。

解決する問題

複数のアルゴリズム（処理手順）を切り替えたい
if/else や switch 文が増えすぎて管理が大変...</content>
    <author>
      <name>nozomi2025</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/2075367</id>
    <published>2025-09-03T10:13:08+09:00</published>
    <updated>2025-09-03T10:13:08+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/majoLibrary/items/8b059a600d7b3f419a7e"/>
    <url>https://qiita.com/majoLibrary/items/8b059a600d7b3f419a7e</url>
    <title>【Android】I/O境界はRepositoryに閉じ込めよ</title>
    <content type="text">結論
I/O境界はRepositoryに閉じ込め、
UI（や任意の上位層）はI/OやDispatcherを知らないようにする。

I/Oについて / 前提
ここでは「計算ではなく、外部とのやりとりで遅延が発生する処理」とする。

特別な対応が必要な理由

1. 時間が読め...</content>
    <author>
      <name>majoLibrary</name>
    </author>
  </entry>
</feed>
