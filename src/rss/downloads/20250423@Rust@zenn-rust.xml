<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Zennの「Rust」のフィード]]></title><description><![CDATA[Zennのトピック「Rust」のRSSフィードです]]></description><link>https://zenn.dev/topics/rust</link><image><url>https://storage.googleapis.com/zenn-user-upload/topics/ba09661577.png</url><title>Zennの「Rust」のフィード</title><link>https://zenn.dev/topics/rust</link></image><generator>zenn.dev</generator><lastBuildDate>Wed, 23 Apr 2025 11:52:46 GMT</lastBuildDate><atom:link href="https://zenn.dev/topics/rust/feed" rel="self" type="application/rss+xml"/><language><![CDATA[ja]]></language><item><title><![CDATA[0003 redis-client]]></title><description><![CDATA[async version
use redis::AsyncCommands;
use anyhow::Result;
#[tokio::main]
async fn main() -&gt; Result&lt;()&gt; {
    let client = redis::Client::open("redis://127.0.0.1/").unwrap();
    let mut connection = client.get_multiplexed_async_connection().await?;
    let _ : () = connection.set("my_k...]]></description><link>https://zenn.dev/yukinekonyan/articles/47ce4bc1b01e6f</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/47ce4bc1b01e6f</guid><pubDate>Wed, 23 Apr 2025 08:15:46 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--_-IQ7Zx_--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0003%2520redis-client%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0002 serde json]]></title><description><![CDATA[jsonのparseとbuild
use serde_json::json;
use serde_json::Value;
fn main() -&gt; Result&lt;(), serde_json::Error&gt; {
    let json_str = r#"{"name": "John Doe", "age": 30, "is_student": false}"#;
    let parsed:Value = serde_json::fro m_str(json_str)?;
    println!("{}", parsed["name"].to_string())...]]></description><link>https://zenn.dev/yukinekonyan/articles/6eccf5e18c251b</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/6eccf5e18c251b</guid><pubDate>Wed, 23 Apr 2025 07:13:28 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--8hl0NimX--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0002%2520serde%2520json%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[0001 reqwest-http]]></title><description><![CDATA[use reqwest;
use anyhow::Result;
#[tokio::main]
async fn main() -&gt; Result&lt;()&gt;{
    let url = "https://google.com";
    let res = reqwest::get(url).await?;
    assert!(res.status().is_success());
    println!("{}", res.status());
    let _body = res.text().await?;
    //println!("{body}")...]]></description><link>https://zenn.dev/yukinekonyan/articles/3a1f78d3ac7973</link><guid isPermaLink="true">https://zenn.dev/yukinekonyan/articles/3a1f78d3ac7973</guid><pubDate>Wed, 23 Apr 2025 01:51:43 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--PKBJdpFN--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80:0001%2520reqwest-http%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:yukineko%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTHdrb1VFNXJOaVI2dndBUlBkMVNhYXM5QVBRMk45Nk1qTVdPTlp5VXFjNkhLdndRPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>yukineko</dc:creator></item><item><title><![CDATA[RustのSizedトレイトと動的サイズ型の理解]]></title><description><![CDATA[

 序論
Rust は、安全性とパフォーマンスに優れたシステムレベルのプログラミング言語です。Rust において、型のサイズをコンパイル時に決定できることは非常に重要です。しかし、一部の型についてはそのサイズがコンパイル時に決定できません。これが、Rust における動的サイズ型（DST: Dynamically Sized Type）に関係しています。Rust では、コンパイル時に型のサイズを確定できるようにするために、Sized トレイトが導入されています。
この記事では、Rust の Sized トレイトについて深く掘り下げていきます。Sized トレイトの定義、役割、使用方法、そ...]]></description><link>https://zenn.dev/leap_adam/articles/394b78e55aad2b</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/394b78e55aad2b</guid><pubDate>Tue, 22 Apr 2025 16:55:27 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--ZO1KDp6v--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AESized%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%2588%25E3%2581%25A8%25E5%258B%2595%25E7%259A%2584%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E5%259E%258B%25E3%2581%25AE%25E7%2590%2586%25E8%25A7%25A3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Node.jsで動いているLambdaをRustに移行してみた]]></title><description><![CDATA[
 TL;DR

移行前のLambda

パッケージタイプ：Zip
ランタイム：Node.js 20.x


移行後のLambda

パッケージタイプ：Image
ランタイム：Rust


あくまで試しにやってみたときの作業ログ程度の内容

!
Rustに移行したわけではないので、移行の背景等は記載していません。
シンプルに移行できるかを試してみた時のログになります。


 移行対象

Cognitoの認証時に設定しているPre token generation Lambda triggerが対象
Pre token generation Lambda trigger内ではBackend...]]></description><link>https://zenn.dev/dress_code/articles/d1fcc041b0ba39</link><guid isPermaLink="true">https://zenn.dev/dress_code/articles/d1fcc041b0ba39</guid><pubDate>Tue, 22 Apr 2025 00:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--jWARh9hq--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Node.js%25E3%2581%25A7%25E5%258B%2595%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258BLambda%25E3%2582%2592Rust%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_34:%25E3%2581%258B%25E3%2582%258F%25E3%2581%2586%25E3%2581%259D%2Cx_220%2Cy_108/bo_3px_solid_rgb:d6e3ed%2Cg_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzRiOGMxZmU1MDUuanBlZw==%2Cr_20%2Cw_90%2Cx_92%2Cy_102/co_rgb:6e7b85%2Cg_south_west%2Cl_text:notosansjp-medium.otf_30:DRESS%2520CODE%2520TECH%2520BLOG%2Cx_220%2Cy_160/bo_4px_solid_white%2Cg_south_west%2Ch_50%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzg5OThmMTk2YzAuanBlZw==%2Cr_max%2Cw_50%2Cx_139%2Cy_84/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>かわうそ</dc:creator></item><item><title><![CDATA[Java の MapStruct を Rust で再現する]]></title><description><![CDATA[
Java のエコシステムには MapStruct という Bean 変換ツールがあり、Bean 間の変換を非常に簡単に行うことができます。原理は、コードのコンパイル時に変換メソッドを自動生成するというものです。Rust 自体のマクロもコンパイル時にコードを生成できるため、属性マクロを使って簡単な MapStruct を実装してみようと思います。

 Rust のマクロに関する知識
Rust のマクロには大きく分けて 2 種類あります：宣言的マクロ（declarative macros）である macro_rules! と、3 種類の手続き的マクロ（procedural macros）で...]]></description><link>https://zenn.dev/leap_adam/articles/0d5d25f169cde4</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/0d5d25f169cde4</guid><pubDate>Mon, 21 Apr 2025 19:32:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--6HtihNvk--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Java%2520%25E3%2581%25AE%2520MapStruct%2520%25E3%2582%2592%2520Rust%2520%25E3%2581%25A7%25E5%2586%258D%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[[Bevy] WGSLシェーダーをインポートする方法]]></title><description><![CDATA[bevyのwgslシェーダーをインポートする際は

main_shader.wgsl
#import bevy_pbr::pbr_fragment::pbr_input_from_standard_material;

でインポートできます。
もし自分で作成したモジュールをインポートしたい場合は

アセットとして登録して
#define_import_pathでパスを定義して
#import my_moduleでインポートします


 1. モジュール用のプラグインを作成

utils.rs
use bevy::{
    asset::{embedded_asset, load_int...]]></description><link>https://zenn.dev/omini/articles/f06a1b1af514a9</link><guid isPermaLink="true">https://zenn.dev/omini/articles/f06a1b1af514a9</guid><pubDate>Mon, 21 Apr 2025 13:50:17 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--gWLBkC47--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%255BBevy%255D%2520WGSL%25E3%2582%25B7%25E3%2582%25A7%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:omini%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvby5wbmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>omini</dc:creator></item><item><title><![CDATA[RustのOptionとResultを使いこなす]]></title><description><![CDATA[
 はじめに
Rust では値の有無を表す Option&lt;T&gt; と、成功 / 失敗を表す Result&lt;T,&nbsp;E&gt; が標準で用意されています。本稿では match を最小限に抑え、メソッドチェーンや演算子を駆使してエレガントに扱うための実践テクニックを解説します。

 Option&lt;T&gt; 基礎
Option&lt;T&gt; は「値がある / ない」を表す列挙型です。
enum Option&lt;T&gt; { Some(T), None }

 Option&lt;T&gt; を使いこなす

 値がある時だけ取り出す — if let
i...]]></description><link>https://zenn.dev/harutin/articles/3bba8889e3b6a5</link><guid isPermaLink="true">https://zenn.dev/harutin/articles/3bba8889e3b6a5</guid><pubDate>Mon, 21 Apr 2025 06:35:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--bJXDGFge--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AEOption%25E3%2581%25A8Result%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2593%25E3%2581%25AA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2583%258F%25E3%2583%25AB%25E3%2581%25A1%25E3%2582%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jTDhfQWxsbUEzdUNWSDl4b2dCaGR6RWNjXzdyUm1zUWhjOEZDVWRwU2JlNGs1a0RlND1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>ハルちん</dc:creator></item><item><title><![CDATA[JetBrainsのAIであるJunieに記事を作らせてみた (Rustで始めるWebAssembly入門)]]></title><description><![CDATA[
 この記事について
この記事は、私のZennの投稿を管理しているリポジトリにおいて、JetBrainsのAIであるJunieに以下の指示をして生成したものです。
https://www.jetbrains.com/ja-jp/junie/
このリポジトリはzennという技術ブログプラットフォームの記事データです。package.jsonとarticlesディレクトリにある既存の記事を読み、新しい記事を1つ書いてみてください。その際、技術的にニッチで特定の読者に強く紐づく内容でありつつ、既存の記事から得られる人物像や文体に即した内容であり、かつ正確性を重視して記載してください。

私が行...]]></description><link>https://zenn.dev/miketako3/articles/abcdef0123456</link><guid isPermaLink="true">https://zenn.dev/miketako3/articles/abcdef0123456</guid><pubDate>Mon, 21 Apr 2025 03:30:16 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--qyBs_8SA--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:JetBrains%25E3%2581%25AEAI%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258BJunie%25E3%2581%25AB%25E8%25A8%2598%25E4%25BA%258B%25E3%2582%2592%25E4%25BD%259C%25E3%2582%2589%25E3%2581%259B%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2520%2528Rust%25E3%2581%25A7%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BWebAssembly%25E5%2585%25A5%25E9%2596%2580%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%25BF%25E3%2581%2591%25E3%2581%259F%25E3%2581%2593%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzJmMmZjNTY0MjEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>みけたこ</dc:creator></item><item><title><![CDATA[Rustの所有権と借用の仕組みを解説]]></title><description><![CDATA[

 前書き
Rust において、所有権とはメモリを管理するための仕組みであり、ある時点でどの変数がメモリの制御権を持っているかを決定します。Rust はコンパイル時に所有権の関係をチェックし、プログラマーに対して変数をいつ使用でき、いつメモリを解放する必要があるかを知らせます。
すべての値には所有者（owner）が存在し、任意の時点で一つの値には一人の所有者しか存在できません。所有者がスコープを離れると、それが所有していたメモリは自動的に解放されます。既に解放されたメモリにアクセスしようとすると、Rust はコンパイルを拒否します。
Rust における所有権の仕組みは、借用（borro...]]></description><link>https://zenn.dev/leap_adam/articles/5242011ce9e83f</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/5242011ce9e83f</guid><pubDate>Sun, 20 Apr 2025 19:17:37 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mRbT0rrM--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E6%2589%2580%25E6%259C%2589%25E6%25A8%25A9%25E3%2581%25A8%25E5%2580%259F%25E7%2594%25A8%25E3%2581%25AE%25E4%25BB%2595%25E7%25B5%2584%25E3%2581%25BF%25E3%2582%2592%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Cargo Lambda のログを JSON(Bunyan format) で出力する]]></title><description><![CDATA[
 内容
出力するログのフォーマットは JSON で出力すると便利なことが多い。
CloudWatchLogs なら Subscription filter を使って一定以上の Log Level のもののみを転送して通知するなどがやりやすいためである。
Bunyan format
{
  "v": 0,
  "name": "lambda",
  "msg": "information",
  "level": 30,
  "hostname": "Workstation",
  "pid": 4574,
  "time": "2025-04-20T17:21:57.31645104Z...]]></description><link>https://zenn.dev/creanciel/articles/cargo-lambda-bunyan</link><guid isPermaLink="true">https://zenn.dev/creanciel/articles/cargo-lambda-bunyan</guid><pubDate>Sun, 20 Apr 2025 18:30:48 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--4ZYS313G--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Cargo%2520Lambda%2520%25E3%2581%25AE%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592%2520JSON%2528Bunyan%2520format%2529%2520%25E3%2581%25A7%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Creanciel%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzIwOWFkYmIxNjAuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Creanciel</dc:creator></item><item><title><![CDATA[ABC402:Rustで解く！問題解説]]></title><description><![CDATA[AtCoder Beginner Contest 402のA~E問題をRustで解いた際の解法をまとめました。

 A問題
問題
https://atcoder.jp/contests/abc402/tasks/abc402_a
解説
与えられた文字列 S からASCIIの大文字(A~Z)のみを抽出して、それらを連結した文字列を出力します。
コード

abc402a.rs
use proconio::{input, marker::Chars};
use itertools::Itertools;
fn main() {
    // 入力
    input!{
        s: ...]]></description><link>https://zenn.dev/nakst_hide/articles/b2e2bcbdf511e8</link><guid isPermaLink="true">https://zenn.dev/nakst_hide/articles/b2e2bcbdf511e8</guid><pubDate>Sun, 20 Apr 2025 11:00:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--uIj0wN_d--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:ABC402%253ARust%25E3%2581%25A7%25E8%25A7%25A3%25E3%2581%258F%25EF%25BC%2581%25E5%2595%258F%25E9%25A1%258C%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nakahide%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUdObXl4YkMxNEpSQnNET01hTGcxTVRQWGNTWS1qYlNQbFRMQTN3ZU9Sdz1zOTYtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nakahide</dc:creator></item><item><title><![CDATA[Rustのシャドーイング]]></title><description><![CDATA[
 Rustのシャドーイング：JavaScriptプログラマーが驚く変数の扱い方

 はじめに
普段JavaScriptを書いてる私が、Rustの勉強を始めて、多くの概念が新しく見えますが、その中でも「変数のシャドーイング」が新しい概念だったので、この記事を起こしました。
この記事では、Rustの変数シャドウイングの基本から、JavaScriptプログラマーが驚くポイント、そして実際の使い方までを解説します。

 シャドーイングの基本概念

 シャドーイングとは何か
シャドーイングとは、同じスコープ内で同じ変数名を再度宣言することで、以前の変数を「影」に隠す（シャドウする）機能です。Ru...]]></description><link>https://zenn.dev/nisitin/articles/54f840e37942fd</link><guid isPermaLink="true">https://zenn.dev/nisitin/articles/54f840e37942fd</guid><pubDate>Sun, 20 Apr 2025 04:12:24 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--DCZtXX1j--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%2589%25E3%2583%25BC%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nishitin%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzQ2YWFkNTFhYzQuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nishitin</dc:creator></item><item><title><![CDATA[Rustで計算グラフを実装中]]></title><description><![CDATA[AIの勉強を始めたので「ゼロからつくるDeep Learning（以降、ゼロつく）」を読みながら、Rustで計算グラフを実装することにしました。

 大枠ではこんな感じです。
まずは計算グラフのノードを用意。
struct Node {
    parents: Vec&lt;Rc&lt;RefCell&lt;FunctionNode&gt;&gt;&gt;,
    data: Tensor,
    //　逆伝播まで値がないのでOptionに包む
    grad: Option&lt;Tensor&gt;,
}
それから、ノードの親としてFunctionNodeを用意しました。
s...]]></description><link>https://zenn.dev/nium_dev/articles/4023149300396d</link><guid isPermaLink="true">https://zenn.dev/nium_dev/articles/4023149300396d</guid><pubDate>Sat, 19 Apr 2025 07:28:59 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--wD4bMrmT--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7%25E8%25A8%2588%25E7%25AE%2597%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E4%25B8%25AD%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nium_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnZOZXNmOS1wc0x3b2VKSlNFUXRHbVdoU1dyT3M1anRaVmRyRGZtZ0FMZlpHNEJnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nium_dev</dc:creator></item><item><title><![CDATA[Rust+terraform+cloudrunでHello world]]></title><description><![CDATA[
 概要
SAM(lambda)でRustの処理を組み込んだ経験はあるけど、cloudrunとかで試したことがなかったのと、terraformと組み合わせようということで、作ってみました。
lambdaをデプロイする際にクロスコンパイル周りで過去に苦戦したことがあるのですが、同様にcloudrunでもMacでハマったところがあるので、そちらを含めて備忘録としてまとめます。今回はMacで開発を進めていますので、ご容赦ください。

 開発手順

 構成
ファイル構成は下記になります。
.
├── Cargo.lock
├── Cargo.toml
├── Dockerfile
├── REA...]]></description><link>https://zenn.dev/bamboo_nova/articles/7169cb3163b7d1</link><guid isPermaLink="true">https://zenn.dev/bamboo_nova/articles/7169cb3163b7d1</guid><pubDate>Sat, 19 Apr 2025 04:30:01 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--sWfR99DH--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_66:Rust%252Bterraform%252Bcloudrun%25E3%2581%25A7Hello%2520world%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E8%25A1%2580%25E5%25A8%2581%25E8%258F%25AF%25E6%2588%2591%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZiMmY0NjM5OTEuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>血威華我</dc:creator></item><item><title><![CDATA[Rustを始めました]]></title><description><![CDATA[
 Rustを始めた
この春からRustを始めました。（まだ一月経ってないかな）
「そのうち技術ブログなるものを書こう」と思っていて、「そのうち」っていつくるんだろう？って感じだったのですが、「技術ブログは自分用の公開メモだ」のような言説を見かけて、「ならば」と思い、書き残すことにしました。
あとはZenn見ているとすごい記事ばっかりで「私のようなものの記事など…」と思ってしまうので、「他の入門者のためにハードルを下げよう！」というのもあり。


 Rust初心者のRustへの雑感
私はほぼほぼPHPしか経験がないので、Rustのあれこれを学ぶのがとても楽しかったです。
所有権とか参照と...]]></description><link>https://zenn.dev/nium_dev/articles/2ca869bc32d5a7</link><guid isPermaLink="true">https://zenn.dev/nium_dev/articles/2ca869bc32d5a7</guid><pubDate>Fri, 18 Apr 2025 21:13:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--0Hs0cWYO--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nium_dev%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUNnOG9jSnZOZXNmOS1wc0x3b2VKSlNFUXRHbVdoU1dyT3M1anRaVmRyRGZtZ0FMZlpHNEJnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>nium_dev</dc:creator></item><item><title><![CDATA[Rust並行処理：非同期ランタイムの適切な使い方]]></title><description><![CDATA[
Rust の非同期ランタイムはさまざまな場面で非常に有用であり、特に高い並行性と高性能が求められる I/O 集約型のアプリケーションにおいて顕著です。以下は、Rust の非同期ランタイムがよく使用されるシナリオのいくつかです。

 ネットワークプログラミング


Web サーバーおよびクライアント： 多数の同時接続を処理することは Web サーバーの主要な要件です。非同期ランタイムを使用することで、各接続ごとにスレッドを生成することなく、数千から数万の同時リクエストを効率的に処理できます。Tokio や async-std のようなランタイムは、高性能な Web アプリケーションの構築...]]></description><link>https://zenn.dev/leap_adam/articles/72c76fec66cd90</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/72c76fec66cd90</guid><pubDate>Fri, 18 Apr 2025 18:56:26 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--K5XJjVtS--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25EF%25BC%259A%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2583%25A9%25E3%2583%25B3%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2581%25AE%25E9%2581%25A9%25E5%2588%2587%25E3%2581%25AA%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[RustでFFmpegフィルターを簡単に実装：音声・動画処理をシンプルにする新手法]]></title><description><![CDATA[

 はじめに

FFmpegは、動画や音声のエンコード、デコード、トランスコード、フィルター処理に広く使われる強力なツールです。しかし、RustプロジェクトでFFmpegのC APIを直接使うと、メモリ管理の複雑さやセキュリティリスクに直面することがあります。特にカスタムフィルターを実装する場合、従来の方法ではCコードを書き、FFmpegの内部構造を深く理解する必要があり、多くの開発者にとってハードルが高いです。Rustのメモリ安全性とシンプルさを利用して、ez-ffmpegライブラリを使えば、純粋なRustコードでFFmpegのカスタムフィルターを実装でき、開発の難易度を大幅に下げる...]]></description><link>https://zenn.dev/yeauty/articles/dd2361213ffc09</link><guid isPermaLink="true">https://zenn.dev/yeauty/articles/dd2361213ffc09</guid><pubDate>Fri, 18 Apr 2025 03:00:58 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--E4OYiidZ--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25A7FFmpeg%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25BC%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25AE%259F%25E8%25A3%2585%25EF%25BC%259A%25E9%259F%25B3%25E5%25A3%25B0%25E3%2583%25BB%25E5%258B%2595%25E7%2594%25BB%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2582%25B7%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B0%25E6%2589%258B%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Yeauty%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzFlMjMwYTI3Y2MuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Yeauty</dc:creator></item><item><title><![CDATA[Rustの並行処理：非同期で陥りがちな落とし穴]]></title><description><![CDATA[
Rust での非同期実行には一定の複雑さがあり、プログラミング中にいくつかのミスを犯しやすいです。この記事では、Rust の非同期ランタイムでよくある落とし穴について紹介します。

 意図しない同期ブロッキング
非同期コードの中で意図せず同期ブロッキング操作を行うことは、非同期プログラミングにおける重要な落とし穴の一つです。これは非同期プログラミングの利点を損ない、パフォーマンスのボトルネックとなります。以下はよくあるシナリオです：

非同期関数内でブロッキング I/O 操作を使う：例えば、async fn内で標準のstd::fs::File::openやstd::net::TcpSt...]]></description><link>https://zenn.dev/leap_adam/articles/71a0792375b352</link><guid isPermaLink="true">https://zenn.dev/leap_adam/articles/71a0792375b352</guid><pubDate>Thu, 17 Apr 2025 18:45:57 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--n_ZIkrbW--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Rust%25E3%2581%25AE%25E4%25B8%25A6%25E8%25A1%258C%25E5%2587%25A6%25E7%2590%2586%25EF%25BC%259A%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E3%2581%25A7%25E9%2599%25A5%25E3%2582%258A%25E3%2581%258C%25E3%2581%25A1%25E3%2581%25AA%25E8%2590%25BD%25E3%2581%25A8%25E3%2581%2597%25E7%25A9%25B4%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:Adam%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzZhZDIzOTdlZTYuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>Adam</dc:creator></item><item><title><![CDATA[Voisona talk等で出力した音声ファイルのタイトルをセリフにするツールをRustで書いた話]]></title><description><![CDATA[voisona Talk等で出力された音声ファイルの名前を、同名のセリフを含むテキストファイルを参照して変換するツールをRustで書いてみたのでそれの紹介です。ほとんどREADMEのコピペかも。
ソースコードは今見ても綺麗とは言えないですが動作はちゃんとしてます。
https://github.com/Uliboooo/track2line

 GUIもあります
GUI版を作ってみました
https://github.com/Uliboooo/track2line_gui
まだエラーハンドリングもしてないですが、一応動きます。

 Lates Release
https://github...]]></description><link>https://zenn.dev/uliboooo/articles/5a1cf3772bf9c0</link><guid isPermaLink="true">https://zenn.dev/uliboooo/articles/5a1cf3772bf9c0</guid><pubDate>Thu, 17 Apr 2025 02:20:39 GMT</pubDate><enclosure url="https://res.cloudinary.com/zenn/image/upload/s--mzsOlmSu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:Voisona%2520talk%25E7%25AD%2589%25E3%2581%25A7%25E5%2587%25BA%25E5%258A%259B%25E3%2581%2597%25E3%2581%259F%25E9%259F%25B3%25E5%25A3%25B0%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%2588%25E3%2583%25AB%25E3%2582%2592%25E3%2582%25BB%25E3%2583%25AA%25E3%2583%2595%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592Rust%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%2584%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:%25E3%2581%2586%25E3%2582%258A%25E3%2581%25BC%25E3%2581%2586%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyLzY0MTFjYWRhM2YuanBlZw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png" length="0" type="image/png"/><dc:creator>うりぼう</dc:creator></item></channel></rss>